
rom.exe:	file format ELF32-pi32v2

Disassembly of section .rom_code:
_start:
       0:    c0 ea 8e 50       	goto 0xa11c <_startup : a120 >			  ## startup.S:34:0


WOLAAnalysisFilter_Float_M64_m4_r1:
       4:	 00 00 00 00 4a 9f c4 38         ....J..8
       c:	 b4 54 06 39 be 55 30 39         .T.9.U09
      14:	 4b cc 60 39 b5 18 8c 39         K.`9...9
      1c:	 56 7e ab 39 79 d1 ce 39         V~.9y..9
      24:	 b6 4a f6 39 0f 10 11 3a         .J.9...:
      2c:	 57 42 29 3a c2 d3 43 3a         WB):..C:
      34:	 ab d9 60 3a 66 33 80 3a         ..`:f3.:
      3c:	 7c 45 91 3a 46 a9 a3 3a         |E.:F..:
      44:	 37 63 b7 3a 98 75 cc 3a         7c.:.u.:
      4c:	 9c e0 e2 3a ea a1 fa 3a         ...:...:
      54:	 5b da 09 3b a8 08 17 3b         [..;...;
      5c:	 97 d6 24 3b 51 3d 33 3b         ..$;Q=3;
      64:	 58 34 42 3b 81 b1 51 3b         X4B;..Q;
      6c:	 db a8 61 3b 91 0c 72 3b         ..a;..r;
      74:	 78 66 81 3b 2c ec 89 3b         xf.;,..;
      7c:	 92 8d 92 3b d5 3f 9b 3b         ...;.?.;
      84:	 18 f7 a3 3b 7a a6 ac 3b         ...;z..;
      8c:	 13 40 b5 3b ec b4 bd 3b         .@.;...;
      94:	 0f f5 c5 3b 82 ef cd 3b         ...;...;
      9c:	 50 92 d5 3b 8f ca dc 3b         P..;...;
      a4:	 67 84 e3 3b 1d ab e9 3b         g..;...;
      ac:	 21 29 ef 3b 18 e8 f3 3b         !).;...;
      b4:	 ec d0 f7 3b d9 cb fa 3b         ...;...;
      bc:	 8e c0 fc 3b 2a 96 fd 3b         ...;*..;
      c4:	 63 33 fd 3b 93 7e fb 3b         c3.;.~.;
      cc:	 d9 5d f8 3b 29 b7 f3 3b         .].;)..;
      d4:	 6a 70 ed 3b 93 6f e5 3b         jp.;.o.;
      dc:	 ca 9a db 3b 7b d8 cf 3b         ...;{..;
      e4:	 7c 0f c2 3b 29 27 b2 3b         |..;)'.;
      ec:	 87 07 a0 3b 66 99 8b 3b         ...;f..;
      f4:	 e6 8c 69 3b e0 f2 36 3b         ..i;..6;
      fc:	 fd 78 fe 3a 43 88 84 3a         .x.:C..:
     104:	 00 00 00 00 8a f5 8f ba         ........
     10c:	 7c 7d 15 bb 18 ba 68 bb         |}....h.
     114:	 de e2 a0 bb c6 58 d0 bb         .....X..
     11c:	 a3 62 01 bc 52 16 1c bc         .b..R...
     124:	 71 48 38 bc db f8 55 bc         qH8...U.
     12c:	 28 26 75 bc d9 e6 8a bc         (&u.....
     134:	 ca f5 9b bc 42 bd ad bc         ....B...
     13c:	 07 3a c0 bc 1c 68 d3 bc         .:...h..
     144:	 e5 42 e7 bc 1d c5 fb bc         .B......
     14c:	 63 74 08 bd 9f 53 13 bd         ct...S..
     154:	 9b 7c 1e bd 5c eb 29 bd         .|..\.).
     15c:	 98 9b 35 bd ae 88 41 bd         ..5...A.
     164:	 b3 ad 4d bd 72 05 5a bd         ..M.r.Z.
     16c:	 6e 8a 66 bd df 36 73 bd         n.f..6s.
     174:	 61 02 80 bd ec 76 86 bd         a....v..
     17c:	 d1 f5 8c bd ba 7b 93 bd         .....{..
     184:	 37 05 9a bd c6 8e a0 bd         7.......
     18c:	 d1 14 a7 bd b2 93 ad bd         ........
     194:	 ba 07 b4 bd 2a 6d ba bd         ....*m..
     19c:	 47 c0 c0 bd 4c fd c6 bd         G...L...
     1a4:	 6d 20 cd bd fd 25 d3 bd         m ...%..
     1ac:	 35 0a d9 bd 69 c9 de bd         5...i...
     1b4:	 fc 5f e4 bd 5c ca e9 bd         ._..\...
     1bc:	 13 05 ef bd ad 0c f4 bd         ........
     1c4:	 f5 dd f8 bd ac 75 fd bd         .....u..
     1cc:	 6b e8 00 be 40 f6 02 be         k...@...
     1d4:	 fa e2 04 be 49 ad 06 be         ....I...
     1dc:	 f0 53 08 be de d5 09 be         .S......
     1e4:	 05 32 0b be 75 67 0c be         .2..ug..
     1ec:	 55 75 0d be f2 5a 0e be         Uu...Z..
     1f4:	 a3 17 0f be f6 aa 0f be         ........
     1fc:	 79 14 10 be e3 53 10 be         y....S..
     204:	 0b 69 10 be e3 53 10 be         .i...S..
     20c:	 79 14 10 be f6 aa 0f be         y.......
     214:	 a3 17 0f be f2 5a 0e be         .....Z..
     21c:	 55 75 0d be 75 67 0c be         Uu..ug..
     224:	 05 32 0b be de d5 09 be         .2......
     22c:	 f0 53 08 be 49 ad 06 be         .S..I...
     234:	 fa e2 04 be 40 f6 02 be         ....@...
     23c:	 6b e8 00 be ac 75 fd bd         k....u..
     244:	 f5 dd f8 bd ad 0c f4 bd         ........
     24c:	 13 05 ef bd 5c ca e9 bd         ....\...
     254:	 fc 5f e4 bd 69 c9 de bd         ._..i...
     25c:	 35 0a d9 bd fd 25 d3 bd         5....%..
     264:	 6d 20 cd bd 4c fd c6 bd         m ..L...
     26c:	 47 c0 c0 bd 2a 6d ba bd         G...*m..
     274:	 ba 07 b4 bd b2 93 ad bd         ........
     27c:	 d1 14 a7 bd c6 8e a0 bd         ........
     284:	 37 05 9a bd ba 7b 93 bd         7....{..
     28c:	 d1 f5 8c bd ec 76 86 bd         .....v..
     294:	 61 02 80 bd df 36 73 bd         a....6s.
     29c:	 6e 8a 66 bd 72 05 5a bd         n.f.r.Z.
     2a4:	 b3 ad 4d bd ae 88 41 bd         ..M...A.
     2ac:	 98 9b 35 bd 5c eb 29 bd         ..5.\.).
     2b4:	 9b 7c 1e bd 9f 53 13 bd         .|...S..
     2bc:	 63 74 08 bd 1d c5 fb bc         ct......
     2c4:	 e5 42 e7 bc 1c 68 d3 bc         .B...h..
     2cc:	 07 3a c0 bc 42 bd ad bc         .:..B...
     2d4:	 ca f5 9b bc d9 e6 8a bc         ........
     2dc:	 28 26 75 bc db f8 55 bc         (&u...U.
     2e4:	 71 48 38 bc 52 16 1c bc         qH8.R...
     2ec:	 a3 62 01 bc c6 58 d0 bb         .b...X..
     2f4:	 de e2 a0 bb 18 ba 68 bb         ......h.
     2fc:	 7c 7d 15 bb 8a f5 8f ba         |}......
     304:	 00 00 00 00 43 88 84 3a         ....C..:
     30c:	 fd 78 fe 3a e0 f2 36 3b         .x.:..6;
     314:	 e6 8c 69 3b 66 99 8b 3b         ..i;f..;
     31c:	 87 07 a0 3b 29 27 b2 3b         ...;)'.;
     324:	 7c 0f c2 3b 7b d8 cf 3b         |..;{..;
     32c:	 ca 9a db 3b 93 6f e5 3b         ...;.o.;
     334:	 6a 70 ed 3b 29 b7 f3 3b         jp.;)..;
     33c:	 d9 5d f8 3b 93 7e fb 3b         .].;.~.;
     344:	 63 33 fd 3b 2a 96 fd 3b         c3.;*..;
     34c:	 8e c0 fc 3b d9 cb fa 3b         ...;...;
     354:	 ec d0 f7 3b 18 e8 f3 3b         ...;...;
     35c:	 21 29 ef 3b 1d ab e9 3b         !).;...;
     364:	 67 84 e3 3b 8f ca dc 3b         g..;...;
     36c:	 50 92 d5 3b 82 ef cd 3b         P..;...;
     374:	 0f f5 c5 3b ec b4 bd 3b         ...;...;
     37c:	 13 40 b5 3b 7a a6 ac 3b         .@.;z..;
     384:	 18 f7 a3 3b d5 3f 9b 3b         ...;.?.;
     38c:	 92 8d 92 3b 2c ec 89 3b         ...;,..;
     394:	 78 66 81 3b 91 0c 72 3b         xf.;..r;
     39c:	 db a8 61 3b 81 b1 51 3b         ..a;..Q;
     3a4:	 58 34 42 3b 51 3d 33 3b         X4B;Q=3;
     3ac:	 97 d6 24 3b a8 08 17 3b         ..$;...;
     3b4:	 5b da 09 3b ea a1 fa 3a         [..;...:
     3bc:	 9c e0 e2 3a 98 75 cc 3a         ...:.u.:
     3c4:	 37 63 b7 3a 46 a9 a3 3a         7c.:F..:
     3cc:	 7c 45 91 3a 66 33 80 3a         |E.:f3.:
     3d4:	 ab d9 60 3a c2 d3 43 3a         ..`:..C:
     3dc:	 57 42 29 3a 0f 10 11 3a         WB):...:
     3e4:	 b6 4a f6 39 79 d1 ce 39         .J.9y..9
     3ec:	 56 7e ab 39 b5 18 8c 39         V~.9...9
     3f4:	 4b cc 60 39 be 55 30 39         K.`9.U09
     3fc:	 b4 54 06 39 4a 9f c4 38         .T.9J..8


WOLASynthesisFilter_Float_M64_m4_r1:
     404:	 c6 52 a3 3c 7b 1b f6 3c         .R.<{..<
     40c:	 18 98 22 3d c8 00 48 3d         .."=..H=
     414:	 a3 02 6b 3d d3 ad 85 3d         ..k=...=
     41c:	 c7 66 94 3d 27 8f a1 3d         .f.='..=
     424:	 55 0c ad 3d 64 c6 b6 3d         U..=d..=
     42c:	 57 a8 be 3d 4f a0 c4 3d         W..=O..=
     434:	 d4 9f c8 3d 06 9c ca 3d         ...=...=
     43c:	 c0 8d ca 3d c4 71 c8 3d         ...=.q.=
     444:	 e8 48 c4 3d 21 18 be 3d         .H.=!..=
     44c:	 a0 e8 b5 3d db c7 ab 3d         ...=...=
     454:	 98 c7 9f 3d e4 fd 91 3d         ...=...=
     45c:	 10 85 82 3d 23 f7 62 3d         ...=#.b=
     464:	 eb 07 3e 3d 6f 89 16 3d         ..>=o..=
     46c:	 60 a0 d9 3c a7 6f 82 3c         `..<.o.<
     474:	 2a 15 a1 3b 27 37 d0 bb         *..;'7..
     47c:	 8d ad 91 bc 91 fb ec bc         ........
     484:	 58 8b 9c bd 86 34 df bd         X....4..
     48c:	 18 d3 0f be d1 ab 2e be         ........
     494:	 07 e1 4b be cd 30 67 be         ..K..0g.
     49c:	 9a 2d 80 be 74 91 8b be         .-..t...
     4a4:	 c2 a6 95 be 23 52 9e be         ....#R..
     4ac:	 43 7a a5 be 00 08 ab be         Cz......
     4b4:	 e0 e6 ae be 01 05 b1 be         ........
     4bc:	 95 53 b1 be d4 c6 af be         .S......
     4c4:	 6a 56 ac be 6c fd a6 be         jV..l...
     4cc:	 96 ba 9f be 76 90 96 be         ....v...
     4d4:	 6f 85 8b be ab 47 7d be         o....G}.
     4dc:	 20 f4 5f be 1a 35 3f be          ._..5?.
     4e4:	 86 37 1b be 12 61 e8 bd         .7...a..
     4ec:	 85 ba 94 bd d8 15 f0 bc         ........
     4f4:	 61 92 84 3c 2f 1b 82 3d         a..</..=
     4fc:	 6f 27 e6 3d 11 76 25 3e         o'.=.v%>
     504:	 ca da 83 3e 42 28 ae 3e         ...>B(.>
     50c:	 78 ec d7 3e 20 68 00 3f         x..> h.?
     514:	 8a 3d 14 3f b6 49 27 3f         .=.?.I'?
     51c:	 ba 5f 39 3f b3 52 4a 3f         ._9?.RJ?
     524:	 2d f6 59 3f 45 1e 68 3f         -.Y?E.h?
     52c:	 08 a0 74 3f bd 51 7f 3f         ..t?.Q.?
     534:	 8a 05 84 3f d2 52 87 3f         ...?.R.?
     53c:	 5f 7e 89 3f 25 77 8a 3f         _~.?%w.?
     544:	 49 2d 8a 3f 47 92 88 3f         I-.?G..?
     54c:	 35 99 85 3f b5 36 81 3f         5..?.6.?
     554:	 34 c2 76 3f 21 21 68 3f         4.v?!!h?
     55c:	 37 7e 56 3f 7a d1 41 3f         7~V?z.A?
     564:	 eb 16 2a 3f ba 4e 0f 3f         ..*?.N.?
     56c:	 9e fa e2 3e bd 56 a1 3e         ...>.V.>
     574:	 d0 97 33 3e 4d cf c7 3c         ..3>M..<
     57c:	 44 d5 0c be a6 29 9e be         D....)..
     584:	 59 54 09 bf 17 61 44 bf         YT...aD.
     58c:	 0d c2 80 bf 89 41 a0 bf         .....A..
     594:	 0c 90 c0 bf 37 8d e1 bf         ....7...
     59c:	 9c 8b 01 c0 90 85 12 c0         ........
     5a4:	 6e a2 23 c0 cc cf 34 c0         n.#...4.
     5ac:	 f0 fa 45 c0 d8 10 57 c0         ..E...W.
     5b4:	 72 fe 67 c0 92 b0 78 c0         r.g...x.
     5bc:	 18 8a 84 c0 31 8b 8c c0         ....1...
     5c4:	 48 52 94 c0 3d d6 9b c0         HR..=...
     5cc:	 2a 0e a3 c0 80 f1 a9 c0         *.......
     5d4:	 f5 77 b0 c0 a6 99 b6 c0         .w......
     5dc:	 22 4f bc c0 5e 91 c1 c0         "O..^...
     5e4:	 e4 59 c6 c0 b8 a2 ca c0         .Y......
     5ec:	 77 66 ce c0 5c a0 d1 c0         wf..\...
     5f4:	 40 4c d4 c0 a1 66 d6 c0         @L...f..
     5fc:	 b3 ec d7 c0 c1 e5 d8 c0         ........
     604:	 48 0b d8 c0 60 77 d6 c0         H...`w..
     60c:	 4c 4f d4 c0 f0 95 d1 c0         LO......
     614:	 d7 4e ce c0 3d 7e ca c0         .N..=~..
     61c:	 fc 28 c6 c0 7c 54 c1 c0         .(..|T..
     624:	 cb 06 bc c0 6f 46 b6 c0         ....oF..
     62c:	 7a 1a b0 c0 70 8a a9 c0         z...p...
     634:	 3a 9e a2 c0 27 5e 9b c0         :...'^..
     63c:	 db d2 93 c0 3a 05 8c c0         ....:...
     644:	 6b fe 83 c0 86 8f 77 c0         k.....w.
     64c:	 73 d5 66 c0 a8 e1 55 c0         s.f...U.
     654:	 4c c7 44 c0 7c 99 33 c0         L.D.|.3.
     65c:	 38 6b 22 c0 2f 4f 11 c0         8k"./O..
     664:	 c5 57 00 c0 fd 2d df bf         .W...-..
     66c:	 86 3c be bf e3 fc 9d bf         .<......
     674:	 9d 1e 7d bf 29 25 40 bf         ..}.)%@.
     67c:	 7a 47 05 bf 08 f4 98 be         zG......
     684:	 26 c5 e7 bd 7b a3 43 3d         &...{.C=
     68c:	 bb 73 4a 3e 60 34 ac 3e         .sJ>`4.>
     694:	 01 42 ed 3e cb 24 14 3f         .B.>.$.?
     69c:	 44 9d 2e 3f 73 06 46 3f         D..?s.F?
     6a4:	 a4 60 5a 3f 39 b0 6b 3f         .`Z?9.k?
     6ac:	 a4 fd 79 3f 9f aa 82 3f         ..y?...?
     6b4:	 9b e3 86 3f 8d b3 89 3f         ...?...?
     6bc:	 0f 26 8b 3f 45 48 8b 3f         .&.?EH.?
     6c4:	 cc 28 8a 3f aa d7 87 3f         .(.?...?
     6cc:	 23 66 84 3f 3b cd 7f 3f         #f.?;..?
     6d4:	 fc d8 74 3f 07 18 68 3f         ..t?..h?
     6dc:	 4d b4 59 3f f4 d8 49 3f         M.Y?..I?
     6e4:	 fc b1 38 3f 06 6c 26 3f         ..8?.l&?
     6ec:	 05 34 13 3f fd 6d fe 3e         .4.?.m.>
     6f4:	 79 43 d5 3e 1f 41 ab 3e         yC.>.A.>
     6fc:	 0e be 80 3e 80 60 2b 3e         ...>.`+>
     704:	 2a 26 c7 3d c1 b0 45 3d         *&.=..E=
     70c:	 a8 86 5f 3a 4f e0 36 bd         .._:O.6.
     714:	 10 0e b4 bd 48 c1 03 be         ....H...
     71c:	 86 a2 2a be 5f 6e 4e be         ..*._nN.
     724:	 8d f0 6e be 6f fe 85 be         ..n.o...
     72c:	 a7 b7 92 be fb 95 9d be         ........
     734:	 7e 8f a6 be 41 9e ad be         ~...A...
     73c:	 25 c0 b2 be d8 f6 b5 be         %.......
     744:	 a6 47 b7 be 6a bb b6 be         .G..j...
     74c:	 3a 5e b4 be 5c 3f b0 be         :^..\?..
     754:	 08 71 aa be 21 08 a3 be         .q..!...
     75c:	 18 1c 9a be a1 c6 8f be         ........
     764:	 67 23 84 be cf 9f 6e be         g#....n.
     76c:	 38 d6 52 be 63 2a 35 be         8.R.c*5.
     774:	 be de 15 be 33 6e ea bd         ....3n..
     77c:	 44 f0 a6 bd c0 f3 41 bd         D.....A.
     784:	 e6 ea 85 bc 9c de 98 bb         ........
     78c:	 5f 1f e0 3b b9 f7 93 3c         _..;...<
     794:	 6e c7 ec 3c 71 d9 20 3d         n..<q. =
     79c:	 b9 01 49 3d 7f 88 6e 3d         ..I=..n=
     7a4:	 a3 90 88 3d c0 43 98 3d         ...=.C.=
     7ac:	 69 3f a6 3d a9 69 b2 3d         i?.=.i.=
     7b4:	 cb ac bc 3d 6b f7 c4 3d         ...=k..=
     7bc:	 75 3c cb 3d 20 73 cf 3d         u<.= s.=
     7c4:	 e6 96 d1 3d 5d a7 d1 3d         ...=]..=
     7cc:	 2f a8 cf 3d f4 a0 cb 3d         /..=...=
     7d4:	 fb 9c c5 3d 30 ab bd 3d         ...=0..=
     7dc:	 d4 dd b3 3d 58 4a a8 3d         ...=XJ.=
     7e4:	 15 09 9b 3d 0a 35 8c 3d         ...=.5.=
     7ec:	 42 d7 77 3d b1 98 54 3d         B.w=..T=
     7f4:	 1c f1 2e 3d 47 26 07 3d         ...=G&.=
     7fc:	 13 01 bb 3c 94 d6 46 3c         ...<..F<


WOLAAnalysisFilter_Float_M128_m4_r1:
     804:	 00 00 00 00 6a 43 79 b8         ....jCy.
     80c:	 2e b4 93 b8 1f be ac b8         ........
     814:	 df d4 c7 b8 d9 0d e5 b8         ........
     81c:	 41 3f 02 b9 24 1e 13 b9         A?..$...
     824:	 43 2e 25 b9 47 7a 38 b9         C.%.Gz8.
     82c:	 cc 0c 4d b9 40 f0 62 b9         ..M.@.b.
     834:	 09 2f 7a b9 ad 69 89 b9         ./z..i..
     83c:	 9e 73 96 b9 48 3a a4 b9         .s..H:..
     844:	 79 c2 b2 b9 e5 10 c2 b9         y.......
     84c:	 13 2a d2 b9 69 12 e3 b9         .*..i...
     854:	 1c ce f4 b9 9f b0 03 ba         ........
     85c:	 cf 67 0d ba 6f 8e 17 ba         .g..o...
     864:	 32 26 22 ba a9 30 2d ba         2&"..0-.
     86c:	 43 af 38 ba 50 a3 44 ba         C.8.P.D.
     874:	 f7 0d 51 ba 34 f0 5d ba         ..Q.4.].
     87c:	 df 4a 6b ba a1 1e 79 ba         .Jk...y.
     884:	 fa b5 83 ba 93 19 8b ba         ........
     88c:	 24 ba 92 ba 9b 97 9a ba         $.......
     894:	 e0 b1 a2 ba 9c 08 ab ba         ........
     89c:	 70 9b b3 ba dc 69 bc ba         p....i..
     8a4:	 3c 73 c5 ba d4 b6 ce ba         <s......
     8ac:	 bc 33 d8 ba fa e8 e1 ba         .3......
     8b4:	 51 d5 eb ba 8b f7 f5 ba         Q.......
     8bc:	 13 27 00 bb cb 6b 05 bb         .'...k..
     8c4:	 0b c9 0a bb e6 3d 10 bb         .....=..
     8cc:	 4d c9 15 bb 29 6a 1b bb         M...)j..
     8d4:	 4a 1f 21 bb 6d e7 26 bb         J.!.m.&.
     8dc:	 32 c1 2c bb 30 ab 32 bb         2.,.0.2.
     8e4:	 d8 a3 38 bb 92 a9 3e bb         ..8...>.
     8ec:	 ab ba 44 bb 55 d5 4a bb         ..D.U.J.
     8f4:	 b7 f7 50 bb d1 1f 57 bb         ..P...W.
     8fc:	 97 4b 5d bb e5 78 63 bb         .K]..xc.
     904:	 7a a5 69 bb 01 cf 6f bb         z.i...o.
     90c:	 14 f3 75 bb 2b 0f 7c bb         ..u.+.|.
     914:	 56 10 81 bb 72 12 84 bb         V...r...
     91c:	 84 0c 87 bb 20 fd 89 bb         .... ...
     924:	 c7 e2 8c bb f5 bb 8f bb         ........
     92c:	 16 87 92 bb 92 42 95 bb         .....B..
     934:	 be ec 97 bb e7 83 9a bb         ........
     93c:	 54 06 9d bb 3d 72 9f bb         T...=r..
     944:	 d0 c5 a1 bb 34 ff a3 bb         ....4...
     94c:	 88 1c a6 bb d9 1b a8 bb         ........
     954:	 37 fb a9 bb a0 b8 ab bb         7.......
     95c:	 11 52 ad bb 79 c5 ae bb         .R..y...
     964:	 c3 10 b0 bb d1 31 b1 bb         .....1..
     96c:	 81 26 b2 bb a7 ec b2 bb         .&......
     974:	 16 82 b3 bb 9a e4 b3 bb         ........
     97c:	 f6 11 b4 bb eb 07 b4 bb         ........
     984:	 3b c4 b3 bb 9d 44 b3 bb         ;....D..
     98c:	 cc 86 b2 bb 7d 88 b1 bb         ....}...
     994:	 64 47 b0 bb 2f c1 ae bb         dG../...
     99c:	 98 f3 ac bb 4d dc aa bb         ....M...
     9a4:	 03 79 a8 bb 6d c7 a5 bb         .y..m...
     9ac:	 41 c5 a2 bb 3b 70 9f bb         A...;p..
     9b4:	 15 c6 9b bb 93 c4 97 bb         ........
     9bc:	 76 69 93 bb 8b b2 8e bb         vi......
     9c4:	 a1 9d 89 bb 91 28 84 bb         .....(..
     9cc:	 71 a2 7c bb fe 2a 70 bb         q.|..*p.
     9d4:	 a6 e6 62 bb 5c d1 54 bb         ..b.\.T.
     9dc:	 2f e7 45 bb 2e 24 36 bb         /.E..$6.
     9e4:	 9b 84 25 bb bc 04 14 bb         ..%.....
     9ec:	 fb a0 01 bb b4 ab dc ba         ........
     9f4:	 f4 3f b4 ba 33 f8 89 ba         .?..3...
     9fc:	 70 9c 3b ba f0 ef be b9         p.;.....
     a04:	 00 00 00 00 5d df c8 39         ....]..9
     a0c:	 0c 48 4c 3a 9b 0d 9c 3a         .HL:...:
     a14:	 2b f9 d3 3a 6c f5 06 3b         +..:l..;
     a1c:	 4c f3 24 3b f0 f7 43 3b         L.$;..C;
     a24:	 f8 04 64 3b e4 8d 82 3b         ..d;...;
     a2c:	 ce 9e 93 3b c0 35 a5 3b         ...;.5.;
     a34:	 24 53 b7 3b 50 f7 c9 3b         $S.;P..;
     a3c:	 79 22 dd 3b bf d4 f0 3b         y".;...;
     a44:	 14 87 02 3c 4d e7 0c 3c         ...<M..<
     a4c:	 f1 8a 17 3c db 71 22 3c         ...<.q"<
     a54:	 da 9b 2d 3c 95 08 39 3c         ..-<..9<
     a5c:	 d5 b7 44 3c 30 a9 50 3c         ..D<0.P<
     a64:	 2f dc 5c 3c 5b 50 69 3c         /.\<[Pi<
     a6c:	 20 05 76 3c f3 7c 81 3c          .v<.|.<
     a74:	 06 17 88 3c 63 d0 8e 3c         ...<c..<
     a7c:	 a4 a8 95 3c 68 9f 9c 3c         ...<h..<
     a84:	 2f b4 a3 3c 83 e6 aa 3c         /..<...<
     a8c:	 dd 35 b2 3c b7 a1 b9 3c         .5.<...<
     a94:	 7b 29 c1 3c 92 cc c8 3c         {).<...<
     a9c:	 51 8a d0 3c 1c 62 d8 3c         Q..<.b.<
     aa4:	 37 53 e0 3c f6 5c e8 3c         7S.<.\.<
     aac:	 8d 7e f0 3c 3c b7 f8 3c         .~.<<..<
     ab4:	 1d 83 00 3d 54 b5 04 3d         ...=T..=
     abc:	 d9 f1 08 3d 3d 38 0d 3d         ...==8.=
     ac4:	 05 88 11 3d c0 e0 15 3d         ...=...=
     acc:	 f0 41 1a 3d 19 ab 1e 3d         .A.=...=
     ad4:	 b9 1b 23 3d 4a 93 27 3d         ..#=J.'=
     adc:	 4b 11 2c 3d 2c 95 30 3d         K.,=,.0=
     ae4:	 65 1e 35 3d 64 ac 39 3d         e.5=d.9=
     aec:	 9d 3e 3e 3d 76 d4 42 3d         .>>=v.B=
     af4:	 5d 6d 47 3d b7 08 4c 3d         ]mG=..L=
     afc:	 f0 a5 50 3d 63 44 55 3d         ..P=cDU=
     b04:	 79 e3 59 3d 8f 82 5e 3d         y.Y=..^=
     b0c:	 05 21 63 3d 38 be 67 3d         .!c=8.g=
     b14:	 82 59 6c 3d 41 f2 70 3d         .Yl=A.p=
     b1c:	 cc 87 75 3d 7c 19 7a 3d         ..u=|.z=
     b24:	 a9 a6 7e 3d 56 97 81 3d         ..~=V..=
     b2c:	 6d d8 83 3d 43 16 86 3d         m..=C..=
     b34:	 85 50 88 3d df 86 8a 3d         .P.=...=
     b3c:	 fa b8 8c 3d 81 e6 8e 3d         ...=...=
     b44:	 20 0f 91 3d 82 32 93 3d          ..=.2.=
     b4c:	 53 50 95 3d 3f 68 97 3d         SP.=?h.=
     b54:	 f3 79 99 3d 1b 85 9b 3d         .y.=...=
     b5c:	 66 89 9d 3d 82 86 9f 3d         f..=...=
     b64:	 1d 7c a1 3d e9 69 a3 3d         .|.=.i.=
     b6c:	 94 4f a5 3d d4 2c a7 3d         .O.=.,.=
     b74:	 57 01 a9 3d d5 cc aa 3d         W..=...=
     b7c:	 02 8f ac 3d 92 47 ae 3d         ...=.G.=
     b84:	 41 f6 af 3d c4 9a b1 3d         A..=...=
     b8c:	 d7 34 b3 3d 36 c4 b4 3d         .4.=6..=
     b94:	 9f 48 b6 3d d2 c1 b7 3d         .H.=...=
     b9c:	 8d 2f b9 3d 95 91 ba 3d         ./.=...=
     ba4:	 ae e7 bb 3d 9e 31 bd 3d         ...=.1.=
     bac:	 2d 6f be 3d 26 a0 bf 3d         -o.=&..=
     bb4:	 55 c4 c0 3d 87 db c1 3d         U..=...=
     bbc:	 8e e5 c2 3d 3c e2 c3 3d         ...=<..=
     bc4:	 66 d1 c4 3d e2 b2 c5 3d         f..=...=
     bcc:	 8a 86 c6 3d 3a 4c c7 3d         ...=:L.=
     bd4:	 d0 03 c8 3d 2c ad c8 3d         ...=,..=
     bdc:	 30 48 c9 3d c3 d4 c9 3d         0H.=...=
     be4:	 ca 52 ca 3d 32 c2 ca 3d         .R.=2..=
     bec:	 e6 22 cb 3d d7 74 cb 3d         .".=.t.=
     bf4:	 f4 b7 cb 3d 35 ec cb 3d         ...=5..=
     bfc:	 8d 11 cc 3d f8 27 cc 3d         ...=.'.=
     c04:	 71 2f cc 3d f8 27 cc 3d         q/.=.'.=
     c0c:	 8d 11 cc 3d 35 ec cb 3d         ...=5..=
     c14:	 f4 b7 cb 3d d7 74 cb 3d         ...=.t.=
     c1c:	 e6 22 cb 3d 32 c2 ca 3d         .".=2..=
     c24:	 ca 52 ca 3d c3 d4 c9 3d         .R.=...=
     c2c:	 30 48 c9 3d 2c ad c8 3d         0H.=,..=
     c34:	 d0 03 c8 3d 3a 4c c7 3d         ...=:L.=
     c3c:	 8a 86 c6 3d e2 b2 c5 3d         ...=...=
     c44:	 66 d1 c4 3d 3c e2 c3 3d         f..=<..=
     c4c:	 8e e5 c2 3d 87 db c1 3d         ...=...=
     c54:	 55 c4 c0 3d 26 a0 bf 3d         U..=&..=
     c5c:	 2d 6f be 3d 9e 31 bd 3d         -o.=.1.=
     c64:	 ae e7 bb 3d 95 91 ba 3d         ...=...=
     c6c:	 8d 2f b9 3d d2 c1 b7 3d         ./.=...=
     c74:	 9f 48 b6 3d 36 c4 b4 3d         .H.=6..=
     c7c:	 d7 34 b3 3d c4 9a b1 3d         .4.=...=
     c84:	 41 f6 af 3d 92 47 ae 3d         A..=.G.=
     c8c:	 02 8f ac 3d d5 cc aa 3d         ...=...=
     c94:	 57 01 a9 3d d4 2c a7 3d         W..=.,.=
     c9c:	 94 4f a5 3d e9 69 a3 3d         .O.=.i.=
     ca4:	 1d 7c a1 3d 82 86 9f 3d         .|.=...=
     cac:	 66 89 9d 3d 1b 85 9b 3d         f..=...=
     cb4:	 f3 79 99 3d 3f 68 97 3d         .y.=?h.=
     cbc:	 53 50 95 3d 82 32 93 3d         SP.=.2.=
     cc4:	 20 0f 91 3d 81 e6 8e 3d          ..=...=
     ccc:	 fa b8 8c 3d df 86 8a 3d         ...=...=
     cd4:	 85 50 88 3d 43 16 86 3d         .P.=C..=
     cdc:	 6d d8 83 3d 56 97 81 3d         m..=V..=
     ce4:	 a9 a6 7e 3d 7c 19 7a 3d         ..~=|.z=
     cec:	 cc 87 75 3d 41 f2 70 3d         ..u=A.p=
     cf4:	 82 59 6c 3d 38 be 67 3d         .Yl=8.g=
     cfc:	 05 21 63 3d 8f 82 5e 3d         .!c=..^=
     d04:	 79 e3 59 3d 63 44 55 3d         y.Y=cDU=
     d0c:	 f0 a5 50 3d b7 08 4c 3d         ..P=..L=
     d14:	 5d 6d 47 3d 76 d4 42 3d         ]mG=v.B=
     d1c:	 9d 3e 3e 3d 64 ac 39 3d         .>>=d.9=
     d24:	 65 1e 35 3d 2c 95 30 3d         e.5=,.0=
     d2c:	 4b 11 2c 3d 4a 93 27 3d         K.,=J.'=
     d34:	 b9 1b 23 3d 19 ab 1e 3d         ..#=...=
     d3c:	 f0 41 1a 3d c0 e0 15 3d         .A.=...=
     d44:	 05 88 11 3d 3d 38 0d 3d         ...==8.=
     d4c:	 d9 f1 08 3d 54 b5 04 3d         ...=T..=
     d54:	 1d 83 00 3d 3c b7 f8 3c         ...=<..<
     d5c:	 8d 7e f0 3c f6 5c e8 3c         .~.<.\.<
     d64:	 37 53 e0 3c 1c 62 d8 3c         7S.<.b.<
     d6c:	 51 8a d0 3c 92 cc c8 3c         Q..<...<
     d74:	 7b 29 c1 3c b7 a1 b9 3c         {).<...<
     d7c:	 dd 35 b2 3c 83 e6 aa 3c         .5.<...<
     d84:	 2f b4 a3 3c 68 9f 9c 3c         /..<h..<
     d8c:	 a4 a8 95 3c 63 d0 8e 3c         ...<c..<
     d94:	 06 17 88 3c f3 7c 81 3c         ...<.|.<
     d9c:	 20 05 76 3c 5b 50 69 3c          .v<[Pi<
     da4:	 2f dc 5c 3c 30 a9 50 3c         /.\<0.P<
     dac:	 d5 b7 44 3c 95 08 39 3c         ..D<..9<
     db4:	 da 9b 2d 3c db 71 22 3c         ..-<.q"<
     dbc:	 f1 8a 17 3c 4d e7 0c 3c         ...<M..<
     dc4:	 14 87 02 3c bf d4 f0 3b         ...<...;
     dcc:	 79 22 dd 3b 50 f7 c9 3b         y".;P..;
     dd4:	 24 53 b7 3b c0 35 a5 3b         $S.;.5.;
     ddc:	 ce 9e 93 3b e4 8d 82 3b         ...;...;
     de4:	 f8 04 64 3b f0 f7 43 3b         ..d;..C;
     dec:	 4c f3 24 3b 6c f5 06 3b         L.$;l..;
     df4:	 2b f9 d3 3a 9b 0d 9c 3a         +..:...:
     dfc:	 0c 48 4c 3a 5d df c8 39         .HL:]..9
     e04:	 00 00 00 00 f0 ef be b9         ........
     e0c:	 70 9c 3b ba 33 f8 89 ba         p.;.3...
     e14:	 f4 3f b4 ba b4 ab dc ba         .?......
     e1c:	 fb a0 01 bb bc 04 14 bb         ........
     e24:	 9b 84 25 bb 2e 24 36 bb         ..%..$6.
     e2c:	 2f e7 45 bb 5c d1 54 bb         /.E.\.T.
     e34:	 a6 e6 62 bb fe 2a 70 bb         ..b..*p.
     e3c:	 71 a2 7c bb 91 28 84 bb         q.|..(..
     e44:	 a1 9d 89 bb 8b b2 8e bb         ........
     e4c:	 76 69 93 bb 93 c4 97 bb         vi......
     e54:	 15 c6 9b bb 3b 70 9f bb         ....;p..
     e5c:	 41 c5 a2 bb 6d c7 a5 bb         A...m...
     e64:	 03 79 a8 bb 4d dc aa bb         .y..M...
     e6c:	 98 f3 ac bb 2f c1 ae bb         ..../...
     e74:	 64 47 b0 bb 7d 88 b1 bb         dG..}...
     e7c:	 cc 86 b2 bb 9d 44 b3 bb         .....D..
     e84:	 3b c4 b3 bb eb 07 b4 bb         ;.......
     e8c:	 f6 11 b4 bb 9a e4 b3 bb         ........
     e94:	 16 82 b3 bb a7 ec b2 bb         ........
     e9c:	 81 26 b2 bb d1 31 b1 bb         .&...1..
     ea4:	 c3 10 b0 bb 79 c5 ae bb         ....y...
     eac:	 11 52 ad bb a0 b8 ab bb         .R......
     eb4:	 37 fb a9 bb d9 1b a8 bb         7.......
     ebc:	 88 1c a6 bb 34 ff a3 bb         ....4...
     ec4:	 d0 c5 a1 bb 3d 72 9f bb         ....=r..
     ecc:	 54 06 9d bb e7 83 9a bb         T.......
     ed4:	 be ec 97 bb 92 42 95 bb         .....B..
     edc:	 16 87 92 bb f5 bb 8f bb         ........
     ee4:	 c7 e2 8c bb 20 fd 89 bb         .... ...
     eec:	 84 0c 87 bb 72 12 84 bb         ....r...
     ef4:	 56 10 81 bb 2b 0f 7c bb         V...+.|.
     efc:	 14 f3 75 bb 01 cf 6f bb         ..u...o.
     f04:	 7a a5 69 bb e5 78 63 bb         z.i..xc.
     f0c:	 97 4b 5d bb d1 1f 57 bb         .K]...W.
     f14:	 b7 f7 50 bb 55 d5 4a bb         ..P.U.J.
     f1c:	 ab ba 44 bb 92 a9 3e bb         ..D...>.
     f24:	 d8 a3 38 bb 30 ab 32 bb         ..8.0.2.
     f2c:	 32 c1 2c bb 6d e7 26 bb         2.,.m.&.
     f34:	 4a 1f 21 bb 29 6a 1b bb         J.!.)j..
     f3c:	 4d c9 15 bb e6 3d 10 bb         M....=..
     f44:	 0b c9 0a bb cb 6b 05 bb         .....k..
     f4c:	 13 27 00 bb 8b f7 f5 ba         .'......
     f54:	 51 d5 eb ba fa e8 e1 ba         Q.......
     f5c:	 bc 33 d8 ba d4 b6 ce ba         .3......
     f64:	 3c 73 c5 ba dc 69 bc ba         <s...i..
     f6c:	 70 9b b3 ba 9c 08 ab ba         p.......
     f74:	 e0 b1 a2 ba 9b 97 9a ba         ........
     f7c:	 24 ba 92 ba 93 19 8b ba         $.......
     f84:	 fa b5 83 ba a1 1e 79 ba         ......y.
     f8c:	 df 4a 6b ba 34 f0 5d ba         .Jk.4.].
     f94:	 f7 0d 51 ba 50 a3 44 ba         ..Q.P.D.
     f9c:	 43 af 38 ba a9 30 2d ba         C.8..0-.
     fa4:	 32 26 22 ba 6f 8e 17 ba         2&".o...
     fac:	 cf 67 0d ba 9f b0 03 ba         .g......
     fb4:	 1c ce f4 b9 69 12 e3 b9         ....i...
     fbc:	 13 2a d2 b9 e5 10 c2 b9         .*......
     fc4:	 79 c2 b2 b9 48 3a a4 b9         y...H:..
     fcc:	 9e 73 96 b9 ad 69 89 b9         .s...i..
     fd4:	 09 2f 7a b9 40 f0 62 b9         ./z.@.b.
     fdc:	 cc 0c 4d b9 47 7a 38 b9         ..M.Gz8.
     fe4:	 43 2e 25 b9 24 1e 13 b9         C.%.$...
     fec:	 41 3f 02 b9 d9 0d e5 b8         A?......
     ff4:	 df d4 c7 b8 1f be ac b8         ........
     ffc:	 2e b4 93 b8 6a 43 79 b8         ....jCy.


WOLASynthesisFilter_Float_M128_m4_r1:
    1004:	 41 cc b0 bc 67 8d ee bc         A...g...
    100c:	 05 98 15 bd c6 4c 33 bd         .....L3.
    1014:	 c1 57 50 bd f5 ab 6c bd         .WP...l.
    101c:	 4a 1e 84 bd 84 7e 91 bd         J....~..
    1024:	 7a 70 9e bd 28 ee aa bd         zp..(...
    102c:	 a8 f1 b6 bd 4b 75 c2 bd         ....Ku..
    1034:	 86 73 cd bd f7 e6 d7 bd         .s......
    103c:	 8b ca e1 bd 39 19 eb bd         ....9...
    1044:	 64 ce f3 bd 89 e5 fb bd         d.......
    104c:	 3c ad 01 be 9a 14 05 be         <.......
    1054:	 0f 27 08 be e1 e2 0a be         .'......
    105c:	 83 46 0d be 8c 50 0f be         .F...P..
    1064:	 b2 ff 10 be f6 52 12 be         .....R..
    106c:	 61 49 13 be 21 e2 13 be         aI..!...
    1074:	 b1 1c 14 be 9f f8 13 be         ........
    107c:	 b5 75 13 be e5 93 12 be         .u......
    1084:	 44 53 11 be 30 b4 0f be         DS..0...
    108c:	 1b b7 0d be c7 5c 0b be         .....\..
    1094:	 0b a6 08 be f3 93 05 be         ........
    109c:	 c9 27 02 be 17 c6 fc bd         .'......
    10a4:	 98 8e f4 bd dc ac eb bd         ........
    10ac:	 ee 24 e2 bd 41 fb d7 bd         .$..A...
    10b4:	 a9 34 cd bd 40 d6 c1 bd         .4..@...
    10bc:	 b1 e5 b5 bd dd 68 a9 bd         .....h..
    10c4:	 15 66 9c bd f5 e3 8e bd         .f......
    10cc:	 7e e9 80 bd 00 fc 64 bd         ~.....d.
    10d4:	 47 52 47 bd c8 e5 28 bd         GRG...(.
    10dc:	 11 c7 09 bd a0 0e d4 bc         ........
    10e4:	 85 70 93 bc dd b0 23 bc         .p....#.
    10ec:	 bc c0 f6 ba eb b7 ce 3b         .......;
    10f4:	 0a 9c 6e 3c 90 4b bb 3c         ..n<.K.<
    10fc:	 43 7d ff 3c 00 bf 1f 3d         C}.<...=
    1104:	 7f a3 ad 3d 74 02 df 3d         ...=t..=
    110c:	 b5 e5 07 3e d0 f2 1f 3e         ...>...>
    1114:	 41 9c 37 3e ae d5 4e 3e         A.7>..N>
    111c:	 e7 92 65 3e c2 c7 7b 3e         ..e>..{>
    1124:	 14 b4 88 3e 1b 34 93 3e         ...>.4.>
    112c:	 15 5e 9d 3e 30 2c a7 3e         .^.>0,.>
    1134:	 c0 98 b0 3e 2d 9e b9 3e         ...>-..>
    113c:	 fe 36 c2 3e e1 5d ca 3e         .6.>.].>
    1144:	 ad 0d d2 3e 53 41 d9 3e         ...>SA.>
    114c:	 fe f3 df 3e ff 20 e6 3e         ...>. .>
    1154:	 e1 c3 eb 3e 52 d8 f0 3e         ...>R..>
    115c:	 47 5a f5 3e e6 45 f9 3e         GZ.>.E.>
    1164:	 92 97 fc 3e ef 4b ff 3e         ...>.K.>
    116c:	 f0 af 00 3f 45 68 01 3f         ...?Eh.?
    1174:	 ab cd 01 3f fc de 01 3f         ...?...?
    117c:	 35 9b 01 3f 7c 01 01 3f         5..?|..?
    1184:	 1d 11 00 3f 0f 93 fd 3e         ...?...>
    118c:	 b5 54 fa 3e b0 66 f6 3e         .T.>.f.>
    1194:	 e7 c8 f1 3e 86 7b ec 3e         ...>.{.>
    119c:	 1b 7f e6 3e 8d d4 df 3e         ...>...>
    11a4:	 15 7d d8 3e 51 7a d0 3e         .}.>Qz.>
    11ac:	 2e ce c7 3e fe 7a be 3e         ...>.z.>
    11b4:	 6d 83 b4 3e 83 ea a9 3e         m..>...>
    11bc:	 9d b3 9e 3e 80 e2 92 3e         ...>...>
    11c4:	 4e 7b 86 3e fc 04 73 3e         N{.>..s>
    11cc:	 d0 f9 57 3e 82 df 3b 3e         ..W>..;>
    11d4:	 27 c1 1e 3e 8d aa 00 3e         '..>...>
    11dc:	 8d 50 c3 3d ed 8e 83 3d         .P.=...=
    11e4:	 1c 58 04 3d fd f3 ba b9         .X.=....
    11ec:	 60 0f 0a bd 6d 9a 8a bd         `...m...
    11f4:	 38 52 d1 bd 71 86 0c be         8R..q...
    11fc:	 79 d3 30 be 44 40 54 be         y.0.D@T.
    1204:	 6e 4c 93 be f1 d6 b1 be         nL......
    120c:	 ec 51 d0 be 41 ae ee be         .Q..A...
    1214:	 54 6e 06 bf d8 66 15 bf         Tn...f..
    121c:	 d7 38 24 bf 78 dc 32 bf         .8$.x.2.
    1224:	 ca 49 41 bf d8 78 4f bf         .IA..xO.
    122c:	 99 61 5d bf 1e fc 6a bf         .a]...j.
    1234:	 42 40 78 bf 10 93 82 bf         B@x.....
    123c:	 cc d2 88 bf 6a db 8e bf         ....j...
    1244:	 e3 a8 94 bf 50 37 9a bf         ....P7..
    124c:	 cb 82 9f bf 77 87 a4 bf         ....w...
    1254:	 7d 41 a9 bf 21 ad ad bf         }A..!...
    125c:	 a8 c6 b1 bf 76 8a b5 bf         ....v...
    1264:	 f9 f4 b8 bf b0 02 bc bf         ........
    126c:	 32 b0 be bf 2f fa c0 bf         2.../...
    1274:	 72 dd c2 bf d6 56 c4 bf         r....V..
    127c:	 5e 63 c5 bf 11 00 c6 bf         ^c......
    1284:	 3d 2a c6 bf 33 df c5 bf         =*..3...
    128c:	 54 1c c5 bf 55 df c3 bf         T...U...
    1294:	 ea 25 c2 bf e9 ed bf bf         .%......
    129c:	 65 35 bd bf 87 fa b9 bf         e5......
    12a4:	 a3 3b b6 bf 38 f7 b1 bf         .;..8...
    12ac:	 ed 2b ad bf 9d d8 a7 bf         .+......
    12b4:	 3b fc a1 bf ff 95 9b bf         ;.......
    12bc:	 2f a5 94 bf 67 29 8d bf         /...g)..
    12c4:	 53 22 85 bf a5 1f 79 bf         S"....y.
    12cc:	 0a e4 66 bf 46 92 53 bf         ..f.F.S.
    12d4:	 51 2b 3f bf 79 b0 29 bf         Q+?.y.).
    12dc:	 6b 23 13 bf 6e 0c f7 be         k#..n...
    12e4:	 a9 b6 c5 be 34 4b 92 be         ....4K..
    12ec:	 19 a1 39 be 9d 37 95 bd         ..9..7..
    12f4:	 8a a5 21 3d ec 5c 1f 3e         ..!=.\.>
    12fc:	 dc 15 8d 3e 47 85 cb 3e         ...>G..>
    1304:	 e7 9f 10 3f d7 59 39 3f         ...?.Y9?
    130c:	 b1 e6 62 3f 6f 9e 86 3f         ..b?o..?
    1314:	 39 29 9c 3f a6 0e b2 3f         9).?...?
    131c:	 66 49 c8 3f 1b d4 de 3f         fI.?...?
    1324:	 19 a9 f5 3f 63 61 06 40         ...?ca.@
    132c:	 a2 0d 12 40 52 d6 1d 40         ...@R..@
    1334:	 67 b8 29 40 cd b0 35 40         g.)@..5@
    133c:	 62 bc 41 40 f1 d7 4d 40         b.A@..M@
    1344:	 4b 00 5a 40 27 32 66 40         K.Z@'2f@
    134c:	 38 6a 72 40 2b a5 7e 40         8jr@+.~@
    1354:	 d4 6f 85 40 2a 8b 8b 40         .o.@*..@
    135c:	 e2 a2 91 40 4a b5 97 40         ...@J..@
    1364:	 af c0 9d 40 5f c3 a3 40         ...@_..@
    136c:	 a3 bb a9 40 c6 a7 af 40         ...@...@
    1374:	 18 86 b5 40 eb 54 bb 40         ...@.T.@
    137c:	 8e 12 c1 40 5a bd c6 40         ...@Z..@
    1384:	 a6 53 cc 40 d0 d3 d1 40         .S.@...@
    138c:	 38 3c d7 40 4a 8b dc 40         8<.@J..@
    1394:	 72 bf e1 40 21 d7 e6 40         r..@!..@
    139c:	 d9 d0 eb 40 15 ab f0 40         ...@...@
    13a4:	 60 64 f5 40 55 fb f9 40         `d.@U..@
    13ac:	 89 6e fe 40 52 5e 01 41         .n.@R^.A
    13b4:	 2a 72 03 41 2c 72 05 41         *r.A,r.A
    13bc:	 b5 5d 07 41 3f 34 09 41         .].A?4.A
    13c4:	 1a f5 0a 41 d9 9f 0c 41         ...A...A
    13cc:	 e0 33 0e 41 c0 b0 0f 41         .3.A...A
    13d4:	 f9 15 11 41 19 63 12 41         ...A.c.A
    13dc:	 bb 97 13 41 81 b3 14 41         ...A...A
    13e4:	 f9 b5 15 41 e9 9e 16 41         ...A...A
    13ec:	 f9 6d 17 41 e6 22 18 41         .m.A.".A
    13f4:	 6a bd 18 41 64 3d 19 41         j..Ad=.A
    13fc:	 8f a2 19 41 2a f4 19 41         ...A*..A
    1404:	 82 af 19 41 dc 47 19 41         ...A.G.A
    140c:	 78 c5 18 41 80 28 18 41         x..A.(.A
    1414:	 21 71 17 41 ae 9f 16 41         !q.A...A
    141c:	 5d b4 15 41 7a af 14 41         ]..Az..A
    1424:	 64 91 13 41 72 5a 12 41         d..ArZ.A
    142c:	 08 0b 11 41 91 a3 0f 41         ...A...A
    1434:	 7a 24 0e 41 3b 8e 0c 41         z$.A;..A
    143c:	 5f e1 0a 41 67 1e 09 41         _..Ag..A
    1444:	 da 45 07 41 4c 58 05 41         .E.ALX.A
    144c:	 59 56 03 41 9d 40 01 41         YV.A.@.A
    1454:	 73 2f fe 40 ae b8 f9 40         s/.@...@
    145c:	 4b 1e f5 40 aa 61 f0 40         K..@.a.@
    1464:	 3e 84 eb 40 79 87 e6 40         >..@y..@
    146c:	 db 6c e1 40 e7 35 dc 40         .l.@.5.@
    1474:	 2e e4 d6 40 40 79 d1 40         ...@@y.@
    147c:	 b8 f6 cb 40 33 5e c6 40         ...@3^.@
    1484:	 53 b1 c0 40 c3 f1 ba 40         S..@...@
    148c:	 29 21 b5 40 35 41 af 40         )!.@5A.@
    1494:	 97 53 a9 40 06 5a a3 40         .S.@.Z.@
    149c:	 2e 56 9d 40 c7 49 97 40         .V.@.I.@
    14a4:	 85 36 91 40 1d 1e 8b 40         .6.@...@
    14ac:	 3f 02 85 40 3f c9 7d 40         ?..@?.}@
    14b4:	 da 8d 71 40 a8 55 65 40         ..q@.Ue@
    14bc:	 fb 23 59 40 1e fc 4c 40         .#Y@..L@
    14c4:	 50 e1 40 40 d4 d6 34 40         P.@@..4@
    14cc:	 ce df 28 40 65 ff 1c 40         ..(@e..@
    14d4:	 ac 38 11 40 ac 8e 05 40         .8.@...@
    14dc:	 b7 08 f4 3f 4b 39 dd 3f         ...?K9.?
    14e4:	 c0 b4 c6 3f ae 80 b0 3f         ...?...?
    14ec:	 6e a2 9a 3f 47 1f 85 3f         n..?G..?
    14f4:	 b0 f8 5f 3f 0e 7d 36 3f         .._?.}6?
    14fc:	 42 d5 0d 3f 47 48 cb 3e         B..?GH.>
    1504:	 93 2d 84 3e 24 e4 0d 3e         .-.>$..>
    150c:	 2b 5b ba 3c 67 b8 b6 bd         +[.<g...
    1514:	 33 01 4a be da 49 9a be         3.J..I..
    151c:	 b7 82 cd be ca a4 fe be         ........
    1524:	 3c d5 16 bf 73 47 2d bf         <...sG-.
    152c:	 05 a7 42 bf 43 f2 56 bf         ..B.C.V.
    1534:	 ff 27 6a bf 44 47 7c bf         .'j.DG|.
    153c:	 ce a7 86 bf 77 a0 8e bf         ....w...
    1544:	 b2 0d 96 bf dd ef 9c bf         ........
    154c:	 6b 47 a3 bf 16 15 a9 bf         kG......
    1554:	 a7 59 ae bf 2b 16 b3 bf         .Y..+...
    155c:	 d7 4b b7 bf fc fb ba bf         .K......
    1564:	 2c 28 be bf 13 d2 c0 bf         ,(......
    156c:	 8f fb c2 bf 8f a6 c4 bf         ........
    1574:	 3d d5 c5 bf db 89 c6 bf         =.......
    157c:	 e7 c6 c6 bf de 8e c6 bf         ........
    1584:	 71 e4 c5 bf 60 ca c4 bf         q...`...
    158c:	 b7 43 c3 bf 58 53 c1 bf         .C..XS..
    1594:	 7a fc be bf 5b 42 bc bf         z...[B..
    159c:	 52 28 b9 bf af b1 b5 bf         R(......
    15a4:	 15 e2 b1 bf 06 bd ad bf         ........
    15ac:	 24 46 a9 bf 34 81 a4 bf         $F..4...
    15b4:	 f3 71 9f bf 37 1c 9a bf         .q..7...
    15bc:	 d3 83 94 bf c1 ac 8e bf         ........
    15c4:	 ed 9a 88 bf 3f 52 82 bf         ....?R..
    15cc:	 95 ad 77 bf 12 59 6a bf         ..w..Yj.
    15d4:	 ee ae 5c bf 4b b7 4e bf         ..\.K.N.
    15dc:	 1b 7a 40 bf 66 ff 31 bf         .z@.f.1.
    15e4:	 23 4f 23 bf 41 71 14 bf         #O#.Aq..
    15ec:	 a0 6d 05 bf 23 98 ec be         .m..#...
    15f4:	 96 28 ce be ea 9b af be         .(......
    15fc:	 34 01 91 be 9d a8 63 be         4.....c.
    1604:	 a1 02 26 be ae a6 01 be         ..&.....
    160c:	 8a 7a bb bd 29 60 69 bd         .z..)`i.
    1614:	 32 40 bc bc 6d 25 2a 3c         2@..m%*<
    161c:	 02 5d 30 3d 1c 8f 99 3d         .]0=...=
    1624:	 7d 49 d9 3d 0a a1 0b 3e         }I.=...>
    162c:	 41 af 29 3e f7 c2 46 3e         A.)>..F>
    1634:	 66 d0 62 3e 7f cc 7d 3e         f.b>..}>
    163c:	 84 d6 8b 3e 21 34 98 3e         ...>!4.>
    1644:	 b1 fa a3 3e 1b 26 af 3e         ...>.&.>
    164c:	 a6 b2 b9 3e fa 9c c3 3e         ...>...>
    1654:	 16 e2 cc 3e 5c 7f d5 3e         ...>\..>
    165c:	 84 72 dd 3e a6 b9 e4 3e         .r.>...>
    1664:	 35 53 eb 3e fe 3d f1 3e         5S.>.=.>
    166c:	 21 79 f6 3e 22 04 fb 3e         !y.>"..>
    1674:	 d4 de fe 3e af 04 01 3f         ...>...?
    167c:	 24 42 02 3f 2f 28 03 3f         $B.?/(.?
    1684:	 65 b7 03 3f 7b f0 03 3f         e..?{..?
    168c:	 54 d4 03 3f f7 63 03 3f         T..?.c.?
    1694:	 90 a0 02 3f 6b 8b 01 3f         ...?k..?
    169c:	 fa 25 00 3f a9 e3 fc 3e         .%.?...>
    16a4:	 50 e1 f8 3e 96 48 f4 3e         P..>.H.>
    16ac:	 5a 1d ef 3e b1 63 e9 3e         Z..>.c.>
    16b4:	 eb 1f e3 3e 93 56 dc 3e         ...>.V.>
    16bc:	 51 0c d5 3e 11 46 cd 3e         Q..>.F.>
    16c4:	 db 08 c5 3e e7 59 bc 3e         ...>.Y.>
    16cc:	 8a 3e b3 3e 48 bc a9 3e         .>.>H..>
    16d4:	 b4 d8 9f 3e 90 99 95 3e         ...>...>
    16dc:	 a1 04 8b 3e dd 1f 80 3e         ...>...>
    16e4:	 66 e2 69 3e 68 fd 52 3e         f.i>h.R>
    16ec:	 ec 9c 3b 3e 3c cd 23 3e         ..;><.#>
    16f4:	 a4 9a 0b 3e 07 23 e6 3d         ...>.#.=
    16fc:	 87 7c b4 3d 4b 14 81 3d         .|.=K..=
    1704:	 0f df f7 3c 24 eb b2 3c         ...<$..<
    170c:	 85 64 5c 3c f9 76 a7 3b         .d\<.v.;
    1714:	 19 4f 4f bb 0c fa 39 bc         .OO...9.
    171c:	 04 35 9f bc 41 6c e0 bc         .5..Al..
    1724:	 10 3f 10 bd 99 a3 2f bd         .?..../.
    172c:	 96 52 4e bd 7d 3b 6c bd         .RN.};l.
    1734:	 30 a7 84 bd 00 be 92 bd         0.......
    173c:	 dd 5a a0 bd d4 76 ad bd         .Z...v..
    1744:	 3c 0b ba bd e9 11 c6 bd         <.......
    174c:	 dd 84 d1 bd 8b 5e dc bd         .....^..
    1754:	 e3 99 e6 bd 12 32 f0 bd         .....2..
    175c:	 a4 22 f9 bd c7 b3 00 be         ."......
    1764:	 a1 7e 04 be 38 f0 07 be         .~..8...
    176c:	 15 07 0b be 02 c2 0d be         ........
    1774:	 ee 1f 10 be 07 20 12 be         ..... ..
    177c:	 92 c1 13 be 16 04 15 be         ........
    1784:	 50 e7 15 be 1e 6b 16 be         P....k..
    178c:	 95 8f 16 be f1 54 16 be         .....T..
    1794:	 b1 bb 15 be 5c c4 14 be         ....\...
    179c:	 c1 6f 13 be da be 11 be         .o......
    17a4:	 b8 b2 0f be a6 4c 0d be         .....L..
    17ac:	 0d 8e 0a be 86 78 07 be         .....x..
    17b4:	 c7 0d 04 be a4 4f 00 be         .....O..
    17bc:	 44 80 f8 bd de c2 ef bd         D.......
    17c4:	 61 6b e6 bd bc 7e dc bd         ak...~..
    17cc:	 cd 01 d2 bd b6 f9 c6 bd         ........
    17d4:	 f0 6b bb bd 01 5e af bd         .k...^..
    17dc:	 ac d5 a2 bd d8 d8 95 bd         ........
    17e4:	 96 6d 88 bd 2d 34 75 bd         .m..-4u.
    17ec:	 5d c9 58 bd 91 a7 3b bd         ].X...;.
    17f4:	 e6 db 1d bd 21 e7 fe bc         ....!...
    17fc:	 dd f7 c0 bc bd 40 80 bc         .....@..


WOLAAnalysisFilter_Float_M256_m4_r1:
    1804:	 00 00 00 00 d3 bc 26 b8         ......&.
    180c:	 8e 3f 36 b8 9f 6d 46 b8         .?6..mF.
    1814:	 c5 4a 57 b8 c4 da 68 b8         .JW...h.
    181c:	 5e 21 7b b8 2d 11 87 b8         ^!{.-...
    1824:	 be f0 90 b8 49 31 9b b8         ....I1..
    182c:	 b1 d4 a5 b8 dc dc b0 b8         ........
    1834:	 ad 4b bc b8 09 23 c8 b8         .K...#..
    183c:	 d6 64 d4 b8 f9 12 e1 b8         .d......
    1844:	 46 2f ee b8 ad bb fb b8         F/......
    184c:	 00 dd 04 b9 10 16 0c b9         ........
    1854:	 f8 89 13 b9 a1 39 1b b9         .....9..
    185c:	 f4 25 23 b9 db 4f 2b b9         .%#..O+.
    1864:	 41 b8 33 b9 07 60 3c b9         A.3..`<.
    186c:	 17 48 45 b9 47 71 4e b9         .HE.GqN.
    1874:	 80 dc 57 b9 9d 8a 61 b9         ..W...a.
    187c:	 7c 7c 6b b9 e9 b2 75 b9         ||k...u.
    1884:	 61 17 80 b9 6d 78 85 b9         a...mx..
    188c:	 00 fd 8a b9 7a a5 90 b9         ....z...
    1894:	 46 72 96 b9 c1 63 9c b9         Fr...c..
    189c:	 4d 7a a2 b9 49 b6 a8 b9         Mz..I...
    18a4:	 10 18 af b9 f9 9f b5 b9         ........
    18ac:	 61 4e bc b9 99 23 c3 b9         aN...#..
    18b4:	 f8 1f ca b9 c5 43 d1 b9         .....C..
    18bc:	 58 8f d8 b9 f8 02 e0 b9         X.......
    18c4:	 e9 9e e7 b9 74 63 ef b9         ....tc..
    18cc:	 dd 50 f7 b9 5c 67 ff b9         .P..\g..
    18d4:	 9b d3 03 ba 4e 08 08 ba         ....N...
    18dc:	 e4 51 0c ba 75 b0 10 ba         .Q..u...
    18e4:	 17 24 15 ba e1 ac 19 ba         .$......
    18ec:	 e7 4a 1e ba 38 fe 22 ba         .J..8.".
    18f4:	 e5 c6 27 ba fc a4 2c ba         ..'...,.
    18fc:	 88 98 31 ba 92 a1 36 ba         ..1...6.
    1904:	 24 c0 3b ba 3f f4 40 ba         $.;.?.@.
    190c:	 e7 3d 46 ba 20 9d 4b ba         .=F. .K.
    1914:	 e4 11 51 ba 32 9c 56 ba         ..Q.2.V.
    191c:	 01 3c 5c ba 49 f1 61 ba         .<\.I.a.
    1924:	 ff bb 67 ba 16 9c 6d ba         ..g...m.
    192c:	 7a 91 73 ba 1a 9c 79 ba         z.s...y.
    1934:	 e1 bb 7f ba 5a f8 82 ba         ....Z...
    193c:	 3b 1d 86 ba 89 4c 89 ba         ;....L..
    1944:	 2d 86 8c ba 1e ca 8f ba         -.......
    194c:	 3a 18 93 ba 78 70 96 ba         :...xp..
    1954:	 be d2 99 ba f3 3e 9d ba         .....>..
    195c:	 06 b5 a0 ba cb 34 a4 ba         .....4..
    1964:	 31 be a7 ba 16 51 ab ba         1....Q..
    196c:	 60 ed ae ba e5 92 b2 ba         `.......
    1974:	 81 41 b6 ba 1c f9 b9 ba         .A......
    197c:	 81 b9 bd ba 86 82 c1 ba         ........
    1984:	 10 54 c5 ba ed 2d c9 ba         .T...-..
    198c:	 e9 0f cd ba d0 f9 d0 ba         ........
    1994:	 7f eb d4 ba c4 e4 d8 ba         ........
    199c:	 5a e5 dc ba 15 ed e0 ba         Z.......
    19a4:	 ba fb e4 ba 0c 11 e9 ba         ........
    19ac:	 d0 2c ed ba c8 4e f1 ba         .,...N..
    19b4:	 ba 76 f5 ba 57 a4 f9 ba         .v..W...
    19bc:	 64 d7 fd ba ca 07 01 bb         d.......
    19c4:	 54 26 03 bb 27 47 05 bb         T&..'G..
    19cc:	 20 6a 07 bb 13 8f 09 bb          j......
    19d4:	 db b5 0b bb 54 de 0d bb         ....T...
    19dc:	 47 08 10 bb 96 33 12 bb         G....3..
    19e4:	 12 60 14 bb 87 8d 16 bb         .`......
    19ec:	 ca bb 18 bb b0 ea 1a bb         ........
    19f4:	 06 1a 1d bb 9c 49 1f bb         .....I..
    19fc:	 3b 79 21 bb b8 a8 23 bb         ;y!...#.
    1a04:	 d6 d7 25 bb 62 06 28 bb         ..%.b.(.
    1a0c:	 28 34 2a bb f2 60 2c bb         (4*..`,.
    1a14:	 85 8c 2e bb a8 b6 30 bb         ......0.
    1a1c:	 1d df 32 bb b1 05 35 bb         ..2...5.
    1a24:	 1f 2a 37 bb 2b 4c 39 bb         .*7.+L9.
    1a2c:	 9a 6b 3b bb 29 88 3d bb         .k;.).=.
    1a34:	 9a a1 3f bb ac b7 41 bb         ..?...A.
    1a3c:	 1a ca 43 bb 9f d8 45 bb         ..C...E.
    1a44:	 fb e2 47 bb e4 e8 49 bb         ..G...I.
    1a4c:	 17 ea 4b bb 4a e6 4d bb         ..K.J.M.
    1a54:	 38 dd 4f bb 90 ce 51 bb         8.O...Q.
    1a5c:	 11 ba 53 bb 6a 9f 55 bb         ..S.j.U.
    1a64:	 4e 7e 57 bb 73 56 59 bb         N~W.sVY.
    1a6c:	 88 27 5b bb 43 f1 5c bb         .'[.C.\.
    1a74:	 4c b3 5e bb 57 6d 60 bb         L.^.Wm`.
    1a7c:	 15 1f 62 bb 2f c8 63 bb         ..b./.c.
    1a84:	 53 68 65 bb 31 ff 66 bb         She.1.f.
    1a8c:	 68 8c 68 bb ad 0f 6a bb         h.h...j.
    1a94:	 a9 88 6b bb fe f6 6c bb         ..k...l.
    1a9c:	 55 5a 6e bb 59 b2 6f bb         UZn.Y.o.
    1aa4:	 b0 fe 70 bb fc 3e 72 bb         ..p..>r.
    1aac:	 e1 72 73 bb 06 9a 74 bb         .rs...t.
    1ab4:	 0c b4 75 bb 9a c0 76 bb         ..u...v.
    1abc:	 50 bf 77 bb cc af 78 bb         P.w...x.
    1ac4:	 b4 91 79 bb a0 64 7a bb         ..y..dz.
    1acc:	 37 28 7b bb 19 dc 7b bb         7({...{.
    1ad4:	 dd 7f 7c bb 26 13 7d bb         ..|.&.}.
    1adc:	 8f 95 7d bb b8 06 7e bb         ..}...~.
    1ae4:	 3c 66 7e bb b2 b3 7e bb         <f~...~.
    1aec:	 c0 ee 7e bb f7 16 7f bb         ..~.....
    1af4:	 f4 2b 7f bb 58 2d 7f bb         .+..X-..
    1afc:	 b5 1a 7f bb aa f3 7e bb         ......~.
    1b04:	 ce b7 7e bb b8 66 7e bb         ..~..f~.
    1b0c:	 07 00 7e bb 4e 83 7d bb         ..~.N.}.
    1b14:	 27 f0 7c bb 2a 46 7c bb         '.|.*F|.
    1b1c:	 f5 84 7b bb 19 ac 7a bb         ..{...z.
    1b24:	 2d bb 79 bb cf b1 78 bb         -.y...x.
    1b2c:	 95 8f 77 bb 12 54 76 bb         ..w..Tv.
    1b34:	 e3 fe 74 bb a2 8f 73 bb         ..t...s.
    1b3c:	 df 05 72 bb 38 61 70 bb         ..r.8ap.
    1b44:	 44 a1 6e bb 9d c5 6c bb         D.n...l.
    1b4c:	 d8 cd 6a bb 8e b9 68 bb         ..j...h.
    1b54:	 5b 88 66 bb d5 39 64 bb         [.f..9d.
    1b5c:	 99 cd 61 bb 3e 43 5f bb         ..a.>C_.
    1b64:	 60 9a 5c bb 9a d2 59 bb         `.\...Y.
    1b6c:	 81 eb 56 bb b7 e4 53 bb         ..V...S.
    1b74:	 d9 bd 50 bb 7c 76 4d bb         ..P.|vM.
    1b7c:	 45 0e 4a bb ce 84 46 bb         E.J...F.
    1b84:	 b3 d9 42 bb 96 0c 3f bb         ..B...?.
    1b8c:	 15 1d 3b bb cc 0a 37 bb         ..;...7.
    1b94:	 66 d5 32 bb 7b 7c 2e bb         f.2.{|..
    1b9c:	 b6 ff 29 bb b0 5e 25 bb         ..)..^%.
    1ba4:	 17 99 20 bb 87 ae 1b bb         .. .....
    1bac:	 ac 9e 16 bb 27 69 11 bb         ....'i..
    1bb4:	 a6 0d 0c bb d3 8b 06 bb         ........
    1bbc:	 51 e3 00 bb 98 27 f6 ba         Q....'..
    1bc4:	 e7 39 ea ba e5 fc dd ba         .9......
    1bcc:	 ec 6f d1 ba 63 92 c4 ba         .o..c...
    1bd4:	 a6 63 b7 ba 13 e3 a9 ba         .c......
    1bdc:	 1f 10 9c ba 1f ea 8d ba         ........
    1be4:	 28 e1 7e ba c1 45 61 ba         (.~..Ea.
    1bec:	 ee 00 43 ba 9b 11 24 ba         ..C...$.
    1bf4:	 b5 76 04 ba 61 5e c8 b9         .v..a^..
    1bfc:	 0e 74 86 b9 f2 58 06 b9         .t...X..
    1c04:	 00 00 00 00 87 04 0f 39         .......9
    1c0c:	 26 ed 8e 39 c5 bc d7 39         &..9...9
    1c14:	 6e f9 10 3a 90 c8 36 3a         n..:..6:
    1c1c:	 94 4c 5d 3a 24 43 82 3a         .L]:$C.:
    1c24:	 38 3b 96 3a d7 8e aa 3a         8;.:...:
    1c2c:	 6f 3e bf 3a 45 4a d4 3a         o>.:EJ.:
    1c34:	 ae b2 e9 3a f8 77 ff 3a         ...:.w.:
    1c3c:	 39 cd 0a 3b 2e 0d 16 3b         9..;...;
    1c44:	 00 7c 21 3b c7 19 2d 3b         .|!;..-;
    1c4c:	 a2 e6 38 3b af e2 44 3b         ..8;..D;
    1c54:	 03 0e 51 3b b8 68 5d 3b         ..Q;.h];
    1c5c:	 df f2 69 3b 85 ac 76 3b         ..i;..v;
    1c64:	 e2 ca 81 3b 50 57 88 3b         ...;PW.;
    1c6c:	 95 fb 8e 3b b6 b7 95 3b         ...;...;
    1c74:	 b2 8b 9c 3b 8d 77 a3 3b         ...;.w.;
    1c7c:	 4b 7b aa 3b e9 96 b1 3b         K{.;...;
    1c84:	 66 ca b8 3b bc 15 c0 3b         f..;...;
    1c8c:	 ee 78 c7 3b f1 f3 ce 3b         .x.;...;
    1c94:	 c0 86 d6 3b 55 31 de 3b         ...;U1.;
    1c9c:	 a5 f3 e5 3b a6 cd ed 3b         ...;...;
    1ca4:	 4e bf f5 3b 92 c8 fd 3b         N..;...;
    1cac:	 b0 f4 02 3c d5 10 07 3c         ...<...<
    1cb4:	 b0 38 0b 3c 38 6c 0f 3c         .8.<8l.<
    1cbc:	 64 ab 13 3c 29 f6 17 3c         d..<)..<
    1cc4:	 7d 4c 1c 3c 54 ae 20 3c         }L.<T. <
    1ccc:	 a3 1b 25 3c 59 94 29 3c         ..%<Y.)<
    1cd4:	 6c 18 2e 3c c8 a7 32 3c         l..<..2<
    1cdc:	 6c 42 37 3c 39 e8 3b 3c         lB7<9.;<
    1ce4:	 2d 99 40 3c 29 55 45 3c         -.@<)UE<
    1cec:	 23 1c 4a 3c 0f ee 4e 3c         #.J<..N<
    1cf4:	 ce ca 53 3c 53 b2 58 3c         ..S<S.X<
    1cfc:	 81 a4 5d 3c 55 a1 62 3c         ..]<U.b<
    1d04:	 a6 a8 67 3c 68 ba 6c 3c         ..g<h.l<
    1d0c:	 87 d6 71 3c ec fc 76 3c         ..q<..v<
    1d14:	 6d 2d 7c 3c 00 b4 80 3c         m-|<...<
    1d1c:	 46 56 83 3c 7b fd 85 3c         FV.<{..<
    1d24:	 92 a9 88 3c 77 5a 8b 3c         ...<wZ.<
    1d2c:	 24 10 8e 3c 88 ca 90 3c         $..<...<
    1d34:	 90 89 93 3c 34 4d 96 3c         ...<4M.<
    1d3c:	 5b 15 99 3c fe e1 9b 3c         [..<...<
    1d44:	 0e b3 9e 3c 71 88 a1 3c         ...<q..<
    1d4c:	 20 62 a4 3c 00 40 a7 3c          b.<.@.<
    1d54:	 08 22 aa 3c 26 08 ad 3c         .".<&..<
    1d5c:	 41 f2 af 3c 4d e0 b2 3c         A..<M..<
    1d64:	 3a d2 b5 3c ed c7 b8 3c         :..<...<
    1d6c:	 57 c1 bb 3c 61 be be 3c         W..<a..<
    1d74:	 fd be c1 3c 18 c3 c4 3c         ...<...<
    1d7c:	 95 ca c7 3c 61 d5 ca 3c         ...<a..<
    1d84:	 6d e3 cd 3c a5 f4 d0 3c         m..<...<
    1d8c:	 ec 08 d4 3c 2d 20 d7 3c         ...<- .<
    1d94:	 59 3a da 3c 4e 57 dd 3c         Y:.<NW.<
    1d9c:	 03 77 e0 3c 57 99 e3 3c         .w.<W..<
    1da4:	 35 be e6 3c 87 e5 e9 3c         5..<...<
    1dac:	 38 0f ed 3c 2c 3b f0 3c         8..<,;.<
    1db4:	 49 69 f3 3c 7a 99 f6 3c         Ii.<z..<
    1dbc:	 a9 cb f9 3c b5 ff fc 3c         ...<...<
    1dc4:	 c8 1a 00 3d 8c b6 01 3d         ...=...=
    1dcc:	 19 53 03 3d 65 f0 04 3d         .S.=e..=
    1dd4:	 62 8e 06 3d 05 2d 08 3d         b..=.-.=
    1ddc:	 3c cc 09 3d ff 6b 0b 3d         <..=.k.=
    1de4:	 3d 0c 0d 3d e9 ac 0e 3d         =..=...=
    1dec:	 f6 4d 10 3d 56 ef 11 3d         .M.=V..=
    1df4:	 fc 90 13 3d da 32 15 3d         ...=.2.=
    1dfc:	 e3 d4 16 3d 07 77 18 3d         ...=.w.=
    1e04:	 39 19 1a 3d 68 bb 1b 3d         9..=h..=
    1e0c:	 8c 5d 1d 3d 8f ff 1e 3d         .].=...=
    1e14:	 6b a1 20 3d 0b 43 22 3d         k. =.C"=
    1e1c:	 63 e4 23 3d 66 85 25 3d         c.#=f.%=
    1e24:	 02 26 27 3d 2a c6 28 3d         .&'=*.(=
    1e2c:	 d2 65 2a 3d e6 04 2c 3d         .e*=..,=
    1e34:	 5c a3 2d 3d 23 41 2f 3d         \.-=#A/=
    1e3c:	 29 de 30 3d 66 7a 32 3d         ).0=fz2=
    1e44:	 c7 15 34 3d 3e b0 35 3d         ..4=>.5=
    1e4c:	 bb 49 37 3d 2f e2 38 3d         .I7=/.8=
    1e54:	 8e 79 3a 3d c3 0f 3c 3d         .y:=..<=
    1e5c:	 c6 a4 3d 3d 85 38 3f 3d         ..==.8?=
    1e64:	 ee ca 40 3d f5 5b 42 3d         ..@=.[B=
    1e6c:	 8d eb 43 3d a4 79 45 3d         ..C=.yE=
    1e74:	 29 06 47 3d 13 91 48 3d         ).G=..H=
    1e7c:	 4d 1a 4a 3d cc a1 4b 3d         M.J=..K=
    1e84:	 80 27 4d 3d 59 ab 4e 3d         .'M=Y.N=
    1e8c:	 4a 2d 50 3d 41 ad 51 3d         J-P=A.Q=
    1e94:	 33 2b 53 3d 0e a7 54 3d         3+S=..T=
    1e9c:	 c6 20 56 3d 4a 98 57 3d         . V=J.W=
    1ea4:	 8d 0d 59 3d 7f 80 5a 3d         ..Y=..Z=
    1eac:	 12 f1 5b 3d 39 5f 5d 3d         ..[=9_]=
    1eb4:	 e4 ca 5e 3d 02 34 60 3d         ..^=.4`=
    1ebc:	 8a 9a 61 3d 6a fe 62 3d         ..a=j.b=
    1ec4:	 96 5f 64 3d fd bd 65 3d         ._d=..e=
    1ecc:	 95 19 67 3d 4d 72 68 3d         ..g=Mrh=
    1ed4:	 18 c8 69 3d e9 1a 6b 3d         ..i=..k=
    1edc:	 b2 6a 6c 3d 66 b7 6d 3d         .jl=f.m=
    1ee4:	 f4 00 6f 3d 53 47 70 3d         ..o=SGp=
    1eec:	 71 8a 71 3d 48 ca 72 3d         q.q=H.r=
    1ef4:	 c5 06 74 3d db 3f 75 3d         ..t=.?u=
    1efc:	 83 75 76 3d aa a7 77 3d         .uv=..w=
    1f04:	 43 d6 78 3d 48 01 7a 3d         C.x=H.z=
    1f0c:	 a8 28 7b 3d 57 4c 7c 3d         .({=WL|=
    1f14:	 4a 6c 7d 3d 74 88 7e 3d         Jl}=t.~=
    1f1c:	 ca a0 7f 3d a0 5a 80 3d         ...=.Z.=
    1f24:	 e5 e2 80 3d 30 69 81 3d         ...=0i.=
    1f2c:	 78 ed 81 3d bb 6f 82 3d         x..=.o.=
    1f34:	 f2 ef 82 3d 17 6e 83 3d         ...=.n.=
    1f3c:	 25 ea 83 3d 18 64 84 3d         %..=.d.=
    1f44:	 ea db 84 3d 96 51 85 3d         ...=.Q.=
    1f4c:	 16 c5 85 3d 67 36 86 3d         ...=g6.=
    1f54:	 84 a5 86 3d 66 12 87 3d         ...=f..=
    1f5c:	 0a 7d 87 3d 6d e5 87 3d         .}.=m..=
    1f64:	 87 4b 88 3d 58 af 88 3d         .K.=X..=
    1f6c:	 d7 10 89 3d 03 70 89 3d         ...=.p.=
    1f74:	 d8 cc 89 3d 51 27 8a 3d         ...=Q'.=
    1f7c:	 6b 7f 8a 3d 21 d5 8a 3d         k..=!..=
    1f84:	 70 28 8b 3d 53 79 8b 3d         p(.=Sy.=
    1f8c:	 ca c7 8b 3d ce 13 8c 3d         ...=...=
    1f94:	 5e 5d 8c 3d 75 a4 8c 3d         ^].=u..=
    1f9c:	 12 e9 8c 3d 31 2b 8d 3d         ...=1+.=
    1fa4:	 cf 6a 8d 3d ea a7 8d 3d         .j.=...=
    1fac:	 7f e2 8d 3d 8a 1a 8e 3d         ...=...=
    1fb4:	 0b 50 8e 3d 00 83 8e 3d         .P.=...=
    1fbc:	 63 b3 8e 3d 36 e1 8e 3d         c..=6..=
    1fc4:	 74 0c 8f 3d 1e 35 8f 3d         t..=.5.=
    1fcc:	 2f 5b 8f 3d a8 7e 8f 3d         /[.=.~.=
    1fd4:	 87 9f 8f 3d c8 bd 8f 3d         ...=...=
    1fdc:	 6e d9 8f 3d 75 f2 8f 3d         n..=u..=
    1fe4:	 dc 08 90 3d a3 1c 90 3d         ...=...=
    1fec:	 c9 2d 90 3d 4c 3c 90 3d         .-.=L<.=
    1ff4:	 2e 48 90 3d 6b 51 90 3d         .H.=kQ.=
    1ffc:	 04 58 90 3d fb 5b 90 3d         .X.=.[.=
    2004:	 4d 5d 90 3d fb 5b 90 3d         M].=.[.=
    200c:	 04 58 90 3d 6b 51 90 3d         .X.=kQ.=
    2014:	 2e 48 90 3d 4c 3c 90 3d         .H.=L<.=
    201c:	 c9 2d 90 3d a3 1c 90 3d         .-.=...=
    2024:	 dc 08 90 3d 75 f2 8f 3d         ...=u..=
    202c:	 6e d9 8f 3d c8 bd 8f 3d         n..=...=
    2034:	 87 9f 8f 3d a8 7e 8f 3d         ...=.~.=
    203c:	 2f 5b 8f 3d 1e 35 8f 3d         /[.=.5.=
    2044:	 74 0c 8f 3d 36 e1 8e 3d         t..=6..=
    204c:	 63 b3 8e 3d 00 83 8e 3d         c..=...=
    2054:	 0b 50 8e 3d 8a 1a 8e 3d         .P.=...=
    205c:	 7f e2 8d 3d ea a7 8d 3d         ...=...=
    2064:	 cf 6a 8d 3d 31 2b 8d 3d         .j.=1+.=
    206c:	 12 e9 8c 3d 75 a4 8c 3d         ...=u..=
    2074:	 5e 5d 8c 3d ce 13 8c 3d         ^].=...=
    207c:	 ca c7 8b 3d 53 79 8b 3d         ...=Sy.=
    2084:	 70 28 8b 3d 21 d5 8a 3d         p(.=!..=
    208c:	 6b 7f 8a 3d 51 27 8a 3d         k..=Q'.=
    2094:	 d8 cc 89 3d 03 70 89 3d         ...=.p.=
    209c:	 d7 10 89 3d 58 af 88 3d         ...=X..=
    20a4:	 87 4b 88 3d 6d e5 87 3d         .K.=m..=
    20ac:	 0a 7d 87 3d 66 12 87 3d         .}.=f..=
    20b4:	 84 a5 86 3d 67 36 86 3d         ...=g6.=
    20bc:	 16 c5 85 3d 96 51 85 3d         ...=.Q.=
    20c4:	 ea db 84 3d 18 64 84 3d         ...=.d.=
    20cc:	 25 ea 83 3d 17 6e 83 3d         %..=.n.=
    20d4:	 f2 ef 82 3d bb 6f 82 3d         ...=.o.=
    20dc:	 78 ed 81 3d 30 69 81 3d         x..=0i.=
    20e4:	 e5 e2 80 3d a0 5a 80 3d         ...=.Z.=
    20ec:	 ca a0 7f 3d 74 88 7e 3d         ...=t.~=
    20f4:	 4a 6c 7d 3d 57 4c 7c 3d         Jl}=WL|=
    20fc:	 a8 28 7b 3d 48 01 7a 3d         .({=H.z=
    2104:	 43 d6 78 3d aa a7 77 3d         C.x=..w=
    210c:	 83 75 76 3d db 3f 75 3d         .uv=.?u=
    2114:	 c5 06 74 3d 48 ca 72 3d         ..t=H.r=
    211c:	 71 8a 71 3d 53 47 70 3d         q.q=SGp=
    2124:	 f4 00 6f 3d 66 b7 6d 3d         ..o=f.m=
    212c:	 b2 6a 6c 3d e9 1a 6b 3d         .jl=..k=
    2134:	 18 c8 69 3d 4d 72 68 3d         ..i=Mrh=
    213c:	 95 19 67 3d fd bd 65 3d         ..g=..e=
    2144:	 96 5f 64 3d 6a fe 62 3d         ._d=j.b=
    214c:	 8a 9a 61 3d 02 34 60 3d         ..a=.4`=
    2154:	 e4 ca 5e 3d 39 5f 5d 3d         ..^=9_]=
    215c:	 12 f1 5b 3d 7f 80 5a 3d         ..[=..Z=
    2164:	 8d 0d 59 3d 4a 98 57 3d         ..Y=J.W=
    216c:	 c6 20 56 3d 0e a7 54 3d         . V=..T=
    2174:	 33 2b 53 3d 41 ad 51 3d         3+S=A.Q=
    217c:	 4a 2d 50 3d 59 ab 4e 3d         J-P=Y.N=
    2184:	 80 27 4d 3d cc a1 4b 3d         .'M=..K=
    218c:	 4d 1a 4a 3d 13 91 48 3d         M.J=..H=
    2194:	 29 06 47 3d a4 79 45 3d         ).G=.yE=
    219c:	 8d eb 43 3d f5 5b 42 3d         ..C=.[B=
    21a4:	 ee ca 40 3d 85 38 3f 3d         ..@=.8?=
    21ac:	 c6 a4 3d 3d c3 0f 3c 3d         ..==..<=
    21b4:	 8e 79 3a 3d 2f e2 38 3d         .y:=/.8=
    21bc:	 bb 49 37 3d 3e b0 35 3d         .I7=>.5=
    21c4:	 c7 15 34 3d 66 7a 32 3d         ..4=fz2=
    21cc:	 29 de 30 3d 23 41 2f 3d         ).0=#A/=
    21d4:	 5c a3 2d 3d e6 04 2c 3d         \.-=..,=
    21dc:	 d2 65 2a 3d 2a c6 28 3d         .e*=*.(=
    21e4:	 02 26 27 3d 66 85 25 3d         .&'=f.%=
    21ec:	 63 e4 23 3d 0b 43 22 3d         c.#=.C"=
    21f4:	 6b a1 20 3d 8f ff 1e 3d         k. =...=
    21fc:	 8c 5d 1d 3d 68 bb 1b 3d         .].=h..=
    2204:	 39 19 1a 3d 07 77 18 3d         9..=.w.=
    220c:	 e3 d4 16 3d da 32 15 3d         ...=.2.=
    2214:	 fc 90 13 3d 56 ef 11 3d         ...=V..=
    221c:	 f6 4d 10 3d e9 ac 0e 3d         .M.=...=
    2224:	 3d 0c 0d 3d ff 6b 0b 3d         =..=.k.=
    222c:	 3c cc 09 3d 05 2d 08 3d         <..=.-.=
    2234:	 62 8e 06 3d 65 f0 04 3d         b..=e..=
    223c:	 19 53 03 3d 8c b6 01 3d         .S.=...=
    2244:	 c8 1a 00 3d b5 ff fc 3c         ...=...<
    224c:	 a9 cb f9 3c 7a 99 f6 3c         ...<z..<
    2254:	 49 69 f3 3c 2c 3b f0 3c         Ii.<,;.<
    225c:	 38 0f ed 3c 87 e5 e9 3c         8..<...<
    2264:	 35 be e6 3c 57 99 e3 3c         5..<W..<
    226c:	 03 77 e0 3c 4e 57 dd 3c         .w.<NW.<
    2274:	 59 3a da 3c 2d 20 d7 3c         Y:.<- .<
    227c:	 ec 08 d4 3c a5 f4 d0 3c         ...<...<
    2284:	 6d e3 cd 3c 61 d5 ca 3c         m..<a..<
    228c:	 95 ca c7 3c 18 c3 c4 3c         ...<...<
    2294:	 fd be c1 3c 61 be be 3c         ...<a..<
    229c:	 57 c1 bb 3c ed c7 b8 3c         W..<...<
    22a4:	 3a d2 b5 3c 4d e0 b2 3c         :..<M..<
    22ac:	 41 f2 af 3c 26 08 ad 3c         A..<&..<
    22b4:	 08 22 aa 3c 00 40 a7 3c         .".<.@.<
    22bc:	 20 62 a4 3c 71 88 a1 3c          b.<q..<
    22c4:	 0e b3 9e 3c fe e1 9b 3c         ...<...<
    22cc:	 5b 15 99 3c 34 4d 96 3c         [..<4M.<
    22d4:	 90 89 93 3c 88 ca 90 3c         ...<...<
    22dc:	 24 10 8e 3c 77 5a 8b 3c         $..<wZ.<
    22e4:	 92 a9 88 3c 7b fd 85 3c         ...<{..<
    22ec:	 46 56 83 3c 00 b4 80 3c         FV.<...<
    22f4:	 6d 2d 7c 3c ec fc 76 3c         m-|<..v<
    22fc:	 87 d6 71 3c 68 ba 6c 3c         ..q<h.l<
    2304:	 a6 a8 67 3c 55 a1 62 3c         ..g<U.b<
    230c:	 81 a4 5d 3c 53 b2 58 3c         ..]<S.X<
    2314:	 ce ca 53 3c 0f ee 4e 3c         ..S<..N<
    231c:	 23 1c 4a 3c 29 55 45 3c         #.J<)UE<
    2324:	 2d 99 40 3c 39 e8 3b 3c         -.@<9.;<
    232c:	 6c 42 37 3c c8 a7 32 3c         lB7<..2<
    2334:	 6c 18 2e 3c 59 94 29 3c         l..<Y.)<
    233c:	 a3 1b 25 3c 54 ae 20 3c         ..%<T. <
    2344:	 7d 4c 1c 3c 29 f6 17 3c         }L.<)..<
    234c:	 64 ab 13 3c 38 6c 0f 3c         d..<8l.<
    2354:	 b0 38 0b 3c d5 10 07 3c         .8.<...<
    235c:	 b0 f4 02 3c 92 c8 fd 3b         ...<...;
    2364:	 4e bf f5 3b a6 cd ed 3b         N..;...;
    236c:	 a5 f3 e5 3b 55 31 de 3b         ...;U1.;
    2374:	 c0 86 d6 3b f1 f3 ce 3b         ...;...;
    237c:	 ee 78 c7 3b bc 15 c0 3b         .x.;...;
    2384:	 66 ca b8 3b e9 96 b1 3b         f..;...;
    238c:	 4b 7b aa 3b 8d 77 a3 3b         K{.;.w.;
    2394:	 b2 8b 9c 3b b6 b7 95 3b         ...;...;
    239c:	 95 fb 8e 3b 50 57 88 3b         ...;PW.;
    23a4:	 e2 ca 81 3b 85 ac 76 3b         ...;..v;
    23ac:	 df f2 69 3b b8 68 5d 3b         ..i;.h];
    23b4:	 03 0e 51 3b af e2 44 3b         ..Q;..D;
    23bc:	 a2 e6 38 3b c7 19 2d 3b         ..8;..-;
    23c4:	 00 7c 21 3b 2e 0d 16 3b         .|!;...;
    23cc:	 39 cd 0a 3b f8 77 ff 3a         9..;.w.:
    23d4:	 ae b2 e9 3a 45 4a d4 3a         ...:EJ.:
    23dc:	 6f 3e bf 3a d7 8e aa 3a         o>.:...:
    23e4:	 38 3b 96 3a 24 43 82 3a         8;.:$C.:
    23ec:	 94 4c 5d 3a 90 c8 36 3a         .L]:..6:
    23f4:	 6e f9 10 3a c5 bc d7 39         n..:...9
    23fc:	 26 ed 8e 39 87 04 0f 39         &..9...9
    2404:	 00 00 00 00 f2 58 06 b9         .....X..
    240c:	 0e 74 86 b9 61 5e c8 b9         .t..a^..
    2414:	 b5 76 04 ba 9b 11 24 ba         .v....$.
    241c:	 ee 00 43 ba c1 45 61 ba         ..C..Ea.
    2424:	 28 e1 7e ba 1f ea 8d ba         (.~.....
    242c:	 1f 10 9c ba 13 e3 a9 ba         ........
    2434:	 a6 63 b7 ba 63 92 c4 ba         .c..c...
    243c:	 ec 6f d1 ba e5 fc dd ba         .o......
    2444:	 e7 39 ea ba 98 27 f6 ba         .9...'..
    244c:	 51 e3 00 bb d3 8b 06 bb         Q.......
    2454:	 a6 0d 0c bb 27 69 11 bb         ....'i..
    245c:	 ac 9e 16 bb 87 ae 1b bb         ........
    2464:	 17 99 20 bb b0 5e 25 bb         .. ..^%.
    246c:	 b6 ff 29 bb 7b 7c 2e bb         ..).{|..
    2474:	 66 d5 32 bb cc 0a 37 bb         f.2...7.
    247c:	 15 1d 3b bb 96 0c 3f bb         ..;...?.
    2484:	 b3 d9 42 bb ce 84 46 bb         ..B...F.
    248c:	 45 0e 4a bb 7c 76 4d bb         E.J.|vM.
    2494:	 d9 bd 50 bb b7 e4 53 bb         ..P...S.
    249c:	 81 eb 56 bb 9a d2 59 bb         ..V...Y.
    24a4:	 60 9a 5c bb 3e 43 5f bb         `.\.>C_.
    24ac:	 99 cd 61 bb d5 39 64 bb         ..a..9d.
    24b4:	 5b 88 66 bb 8e b9 68 bb         [.f...h.
    24bc:	 d8 cd 6a bb 9d c5 6c bb         ..j...l.
    24c4:	 44 a1 6e bb 38 61 70 bb         D.n.8ap.
    24cc:	 df 05 72 bb a2 8f 73 bb         ..r...s.
    24d4:	 e3 fe 74 bb 12 54 76 bb         ..t..Tv.
    24dc:	 95 8f 77 bb cf b1 78 bb         ..w...x.
    24e4:	 2d bb 79 bb 19 ac 7a bb         -.y...z.
    24ec:	 f5 84 7b bb 2a 46 7c bb         ..{.*F|.
    24f4:	 27 f0 7c bb 4e 83 7d bb         '.|.N.}.
    24fc:	 07 00 7e bb b8 66 7e bb         ..~..f~.
    2504:	 ce b7 7e bb aa f3 7e bb         ..~...~.
    250c:	 b5 1a 7f bb 58 2d 7f bb         ....X-..
    2514:	 f4 2b 7f bb f7 16 7f bb         .+......
    251c:	 c0 ee 7e bb b2 b3 7e bb         ..~...~.
    2524:	 3c 66 7e bb b8 06 7e bb         <f~...~.
    252c:	 8f 95 7d bb 26 13 7d bb         ..}.&.}.
    2534:	 dd 7f 7c bb 19 dc 7b bb         ..|...{.
    253c:	 37 28 7b bb a0 64 7a bb         7({..dz.
    2544:	 b4 91 79 bb cc af 78 bb         ..y...x.
    254c:	 50 bf 77 bb 9a c0 76 bb         P.w...v.
    2554:	 0c b4 75 bb 06 9a 74 bb         ..u...t.
    255c:	 e1 72 73 bb fc 3e 72 bb         .rs..>r.
    2564:	 b0 fe 70 bb 59 b2 6f bb         ..p.Y.o.
    256c:	 55 5a 6e bb fe f6 6c bb         UZn...l.
    2574:	 a9 88 6b bb ad 0f 6a bb         ..k...j.
    257c:	 68 8c 68 bb 31 ff 66 bb         h.h.1.f.
    2584:	 53 68 65 bb 2f c8 63 bb         She./.c.
    258c:	 15 1f 62 bb 57 6d 60 bb         ..b.Wm`.
    2594:	 4c b3 5e bb 43 f1 5c bb         L.^.C.\.
    259c:	 88 27 5b bb 73 56 59 bb         .'[.sVY.
    25a4:	 4e 7e 57 bb 6a 9f 55 bb         N~W.j.U.
    25ac:	 11 ba 53 bb 90 ce 51 bb         ..S...Q.
    25b4:	 38 dd 4f bb 4a e6 4d bb         8.O.J.M.
    25bc:	 17 ea 4b bb e4 e8 49 bb         ..K...I.
    25c4:	 fb e2 47 bb 9f d8 45 bb         ..G...E.
    25cc:	 1a ca 43 bb ac b7 41 bb         ..C...A.
    25d4:	 9a a1 3f bb 29 88 3d bb         ..?.).=.
    25dc:	 9a 6b 3b bb 2b 4c 39 bb         .k;.+L9.
    25e4:	 1f 2a 37 bb b1 05 35 bb         .*7...5.
    25ec:	 1d df 32 bb a8 b6 30 bb         ..2...0.
    25f4:	 85 8c 2e bb f2 60 2c bb         .....`,.
    25fc:	 28 34 2a bb 62 06 28 bb         (4*.b.(.
    2604:	 d6 d7 25 bb b8 a8 23 bb         ..%...#.
    260c:	 3b 79 21 bb 9c 49 1f bb         ;y!..I..
    2614:	 06 1a 1d bb b0 ea 1a bb         ........
    261c:	 ca bb 18 bb 87 8d 16 bb         ........
    2624:	 12 60 14 bb 96 33 12 bb         .`...3..
    262c:	 47 08 10 bb 54 de 0d bb         G...T...
    2634:	 db b5 0b bb 13 8f 09 bb         ........
    263c:	 20 6a 07 bb 27 47 05 bb          j..'G..
    2644:	 54 26 03 bb ca 07 01 bb         T&......
    264c:	 64 d7 fd ba 57 a4 f9 ba         d...W...
    2654:	 ba 76 f5 ba c8 4e f1 ba         .v...N..
    265c:	 d0 2c ed ba 0c 11 e9 ba         .,......
    2664:	 ba fb e4 ba 15 ed e0 ba         ........
    266c:	 5a e5 dc ba c4 e4 d8 ba         Z.......
    2674:	 7f eb d4 ba d0 f9 d0 ba         ........
    267c:	 e9 0f cd ba ed 2d c9 ba         .....-..
    2684:	 10 54 c5 ba 86 82 c1 ba         .T......
    268c:	 81 b9 bd ba 1c f9 b9 ba         ........
    2694:	 81 41 b6 ba e5 92 b2 ba         .A......
    269c:	 60 ed ae ba 16 51 ab ba         `....Q..
    26a4:	 31 be a7 ba cb 34 a4 ba         1....4..
    26ac:	 06 b5 a0 ba f3 3e 9d ba         .....>..
    26b4:	 be d2 99 ba 78 70 96 ba         ....xp..
    26bc:	 3a 18 93 ba 1e ca 8f ba         :.......
    26c4:	 2d 86 8c ba 89 4c 89 ba         -....L..
    26cc:	 3b 1d 86 ba 5a f8 82 ba         ;...Z...
    26d4:	 e1 bb 7f ba 1a 9c 79 ba         ......y.
    26dc:	 7a 91 73 ba 16 9c 6d ba         z.s...m.
    26e4:	 ff bb 67 ba 49 f1 61 ba         ..g.I.a.
    26ec:	 01 3c 5c ba 32 9c 56 ba         .<\.2.V.
    26f4:	 e4 11 51 ba 20 9d 4b ba         ..Q. .K.
    26fc:	 e7 3d 46 ba 3f f4 40 ba         .=F.?.@.
    2704:	 24 c0 3b ba 92 a1 36 ba         $.;...6.
    270c:	 88 98 31 ba fc a4 2c ba         ..1...,.
    2714:	 e5 c6 27 ba 38 fe 22 ba         ..'.8.".
    271c:	 e7 4a 1e ba e1 ac 19 ba         .J......
    2724:	 17 24 15 ba 75 b0 10 ba         .$..u...
    272c:	 e4 51 0c ba 4e 08 08 ba         .Q..N...
    2734:	 9b d3 03 ba 5c 67 ff b9         ....\g..
    273c:	 dd 50 f7 b9 74 63 ef b9         .P..tc..
    2744:	 e9 9e e7 b9 f8 02 e0 b9         ........
    274c:	 58 8f d8 b9 c5 43 d1 b9         X....C..
    2754:	 f8 1f ca b9 99 23 c3 b9         .....#..
    275c:	 61 4e bc b9 f9 9f b5 b9         aN......
    2764:	 10 18 af b9 49 b6 a8 b9         ....I...
    276c:	 4d 7a a2 b9 c1 63 9c b9         Mz...c..
    2774:	 46 72 96 b9 7a a5 90 b9         Fr..z...
    277c:	 00 fd 8a b9 6d 78 85 b9         ....mx..
    2784:	 61 17 80 b9 e9 b2 75 b9         a.....u.
    278c:	 7c 7c 6b b9 9d 8a 61 b9         ||k...a.
    2794:	 80 dc 57 b9 47 71 4e b9         ..W.GqN.
    279c:	 17 48 45 b9 07 60 3c b9         .HE..`<.
    27a4:	 41 b8 33 b9 db 4f 2b b9         A.3..O+.
    27ac:	 f4 25 23 b9 a1 39 1b b9         .%#..9..
    27b4:	 f8 89 13 b9 10 16 0c b9         ........
    27bc:	 00 dd 04 b9 ad bb fb b8         ........
    27c4:	 46 2f ee b8 f9 12 e1 b8         F/......
    27cc:	 d6 64 d4 b8 09 23 c8 b8         .d...#..
    27d4:	 ad 4b bc b8 dc dc b0 b8         .K......
    27dc:	 b1 d4 a5 b8 49 31 9b b8         ....I1..
    27e4:	 be f0 90 b8 2d 11 87 b8         ....-...
    27ec:	 5e 21 7b b8 c4 da 68 b8         ^!{...h.
    27f4:	 c5 4a 57 b8 9f 6d 46 b8         .JW..mF.
    27fc:	 8e 3f 36 b8 d3 bc 26 b8         .?6...&.


WOLASynthesisFilter_Float_M256_m4_r1:
    2804:	 e8 d3 d0 bc 04 9d fd bc         ........
    280c:	 e5 04 15 bd b6 0a 2b bd         ......+.
    2814:	 93 dd 40 bd 11 7b 56 bd         ..@..{V.
    281c:	 d7 e0 6b bd 44 86 80 bd         ..k.D...
    2824:	 eb fd 8a bd 2d 56 95 bd         ....-V..
    282c:	 e5 8d 9f bd ee a3 a9 bd         ........
    2834:	 22 97 b3 bd 67 66 bd bd         "...gf..
    283c:	 98 10 c7 bd a3 94 d0 bd         ........
    2844:	 5e f1 d9 bd ba 25 e3 bd         ^....%..
    284c:	 b8 30 ec bd 32 11 f5 bd         .0..2...
    2854:	 19 c6 fd bd 3f 27 03 be         ....?'..
    285c:	 aa 54 07 be cd 6a 0b be         .T...j..
    2864:	 2a 69 0f be 40 4f 13 be         *i..@O..
    286c:	 9e 1c 17 be cb d0 1a be         ........
    2874:	 54 6b 1e be c2 eb 21 be         Tk....!.
    287c:	 a8 51 25 be 9b 9c 28 be         .Q%...(.
    2884:	 29 cc 2b be f5 df 2e be         ).+.....
    288c:	 92 d7 31 be a3 b2 34 be         ..1...4.
    2894:	 c4 70 37 be a3 11 3a be         .p7...:.
    289c:	 d5 94 3c be 18 fa 3e be         ..<...>.
    28a4:	 06 41 41 be 5c 69 43 be         .AA.\iC.
    28ac:	 ca 72 45 be 00 5d 47 be         .rE..]G.
    28b4:	 c7 27 49 be cf d2 4a be         .'I...J.
    28bc:	 dc 5d 4c be b8 c8 4d be         .]L...M.
    28c4:	 2e 13 4f be fa 3c 50 be         ..O..<P.
    28cc:	 f3 45 51 be f3 2d 52 be         .EQ..-R.
    28d4:	 cf f4 52 be 5b 9a 53 be         ..R.[.S.
    28dc:	 79 1e 54 be 0a 81 54 be         y.T...T.
    28e4:	 f2 c1 54 be 2b e1 54 be         ..T.+.T.
    28ec:	 8c de 54 be 1c ba 54 be         ..T...T.
    28f4:	 c0 73 54 be 7f 0b 54 be         .sT...T.
    28fc:	 58 81 53 be 46 d5 52 be         X.S.F.R.
    2904:	 55 07 52 be 8d 17 51 be         U.R...Q.
    290c:	 01 06 50 be be d2 4e be         ..P...N.
    2914:	 e8 7d 4d be 90 07 4c be         .}M...L.
    291c:	 e0 6f 4a be fa b6 48 be         .oJ...H.
    2924:	 fe dc 46 be 2a e2 44 be         ..F.*.D.
    292c:	 a5 c6 42 be a6 8a 40 be         ..B...@.
    2934:	 68 2e 3e be 35 b2 3b be         h.>.5.;.
    293c:	 3d 16 39 be d7 5a 36 be         =.9..Z6.
    2944:	 4c 80 33 be ed 86 30 be         L.3...0.
    294c:	 04 6f 2d be fc 38 2a be         .o-..8*.
    2954:	 2c e5 26 be f3 73 23 be         ,.&..s#.
    295c:	 b5 e5 1f be e4 3a 1c be         .....:..
    2964:	 ec 73 18 be 3e 91 14 be         .s..>...
    296c:	 5a 93 10 be ac 7a 0c be         Z....z..
    2974:	 c0 47 08 be 1c fb 03 be         .G......
    297c:	 83 2a ff bd 76 2d f6 bd         .*..v-..
    2984:	 3c 00 ed bd f9 a3 e3 bd         <.......
    298c:	 d7 19 da bd 25 63 d0 bd         ....%c..
    2994:	 0e 81 c6 bd df 74 bc bd         .....t..
    299c:	 ee 3f b2 bd 8c e3 a7 bd         .?......
    29a4:	 18 61 9d bd fb b9 92 bd         .a......
    29ac:	 a0 ef 87 bd f7 06 7a bd         ......z.
    29b4:	 0e ee 63 bd 90 97 4d bd         ..c...M.
    29bc:	 8d 06 37 bd 29 3e 20 bd         ..7.)> .
    29c4:	 82 41 09 bd ad 27 e4 bc         .A...'..
    29cc:	 e0 70 b5 bc 3a 65 86 bc         .p..:e..
    29d4:	 df 16 2e bc 4f a9 9d bb         ....O...
    29dc:	 0d 73 87 3a 8a 48 e2 3b         .s.:.H.;
    29e4:	 da be 51 3c f0 57 99 3c         ..Q<.W.<
    29ec:	 70 f4 c9 3c 9b ad fa 3c         p..<...<
    29f4:	 10 be 15 3d 38 2c 2e 3d         ...=8,.=
    29fc:	 93 9d 46 3d f6 ef 5b 3d         ..F=..[=
    2a04:	 f6 a1 d1 3d a8 4a f5 3d         ...=.J.=
    2a0c:	 bc 63 0c 3e ff 09 1e 3e         .c.>...>
    2a14:	 e9 95 2f 3e 47 05 41 3e         ../>G.A>
    2a1c:	 e6 55 52 3e 98 85 63 3e         .UR>..c>
    2a24:	 22 92 74 3e ac bc 82 3e         ".t>...>
    2a2c:	 86 1c 8b 3e 86 67 93 3e         ...>.g.>
    2a34:	 95 9c 9b 3e a0 ba a3 3e         ...>...>
    2a3c:	 93 c0 ab 3e 4b ad b3 3e         ...>K..>
    2a44:	 d3 7f bb 3e fd 36 c3 3e         ...>.6.>
    2a4c:	 d0 d1 ca 3e 2d 4f d2 3e         ...>-O.>
    2a54:	 16 ae d9 3e 77 ed e0 3e         ...>w..>
    2a5c:	 55 0c e8 3e a0 09 ef 3e         U..>...>
    2a64:	 53 e4 f5 3e 7a 9b fc 3e         S..>z..>
    2a6c:	 03 97 01 3f 8a cd 04 3f         ...?...?
    2a74:	 ca f0 07 3f 51 00 0b 3f         ...?Q..?
    2a7c:	 9f fb 0d 3f 43 e2 10 3f         ...?C..?
    2a84:	 c6 b3 13 3f b5 6f 16 3f         ...?.o.?
    2a8c:	 9b 15 19 3f 09 a5 1b 3f         ...?...?
    2a94:	 8f 1d 1e 3f c6 7e 20 3f         ...?.~ ?
    2a9c:	 3f c8 22 3f 98 f9 24 3f         ?."?..$?
    2aa4:	 6d 12 27 3f 52 12 29 3f         m.'?R.)?
    2aac:	 eb f8 2a 3f d5 c5 2c 3f         ..*?..,?
    2ab4:	 bd 78 2e 3f 46 11 30 3f         .x.?F.0?
    2abc:	 1a 8f 31 3f dc f1 32 3f         ..1?..2?
    2ac4:	 4b 39 34 3f 09 65 35 3f         K94?.e5?
    2acc:	 d3 74 36 3f 58 68 37 3f         .t6?Xh7?
    2ad4:	 60 3f 38 3f 9a f9 38 3f         `?8?..8?
    2adc:	 c7 96 39 3f b4 16 3a 3f         ..9?..:?
    2ae4:	 20 79 3a 3f d8 bd 3a 3f          y:?..:?
    2aec:	 a1 e4 3a 3f 4d ed 3a 3f         ..:?M.:?
    2af4:	 b8 d7 3a 3f af a3 3a 3f         ..:?..:?
    2afc:	 13 51 3a 3f bb df 39 3f         .Q:?..9?
    2b04:	 8b 4f 39 3f 66 a0 38 3f         .O9?f.8?
    2b0c:	 32 d2 37 3f e1 e4 36 3f         2.7?..6?
    2b14:	 5b d8 35 3f 9c ac 34 3f         [.5?..4?
    2b1c:	 8e 61 33 3f 36 f7 31 3f         .a3?6.1?
    2b24:	 8e 6d 30 3f 92 c4 2e 3f         .m0?...?
    2b2c:	 55 fc 2c 3f d5 14 2b 3f         U.,?..+?
    2b34:	 27 0e 29 3f 55 e8 26 3f         '.)?U.&?
    2b3c:	 7b a3 24 3f b5 3f 22 3f         {.$?.?"?
    2b44:	 11 bd 1f 3f c5 1b 1d 3f         ...?...?
    2b4c:	 e3 5b 1a 3f a4 7d 17 3f         .[.?.}.?
    2b54:	 2f 81 14 3f b3 66 11 3f         /..?.f.?
    2b5c:	 68 2e 0e 3f 86 d8 0a 3f         h..?...?
    2b64:	 4f 65 07 3f 04 d5 03 3f         Oe.?...?
    2b6c:	 e8 27 00 3f 8c bc f8 3e         .'.?...>
    2b74:	 d8 f0 f0 3e 58 ed e8 3e         ...>X..>
    2b7c:	 c2 b2 e0 3e c9 41 d8 3e         ...>.A.>
    2b84:	 21 9b cf 3e 98 bf c6 3e         !..>...>
    2b8c:	 f9 af bd 3e 1b 6d b4 3e         ...>.m.>
    2b94:	 dd f7 aa 3e 1e 51 a1 3e         ...>.Q.>
    2b9c:	 d9 79 97 3e 00 73 8d 3e         .y.>.s.>
    2ba4:	 8e 3d 83 3e 20 b5 71 3e         .=.> .q>
    2bac:	 1e 96 5c 3e 49 20 47 3e         ..\>I G>
    2bb4:	 dd 55 31 3e 2d 39 1b 3e         .U1>-9.>
    2bbc:	 90 cc 04 3e df 24 dc 3d         ...>.$.=
    2bc4:	 a5 1a ae 3d de fe 7e 3d         ...=..~=
    2bcc:	 f5 b0 20 3d 58 ac 82 3c         .. =X..<
    2bd4:	 b2 34 f8 bb 3b 5a 00 bd         .4..;Z..
    2bdc:	 73 99 62 bd 55 dc a2 bd         s.b.U...
    2be4:	 0e d6 d4 bd f6 99 03 be         ........
    2bec:	 e5 f7 1c be be 81 36 be         ......6.
    2bf4:	 5a 34 50 be 79 0c 6a be         Z4P.y.j.
    2bfc:	 71 03 82 be 30 26 8e be         q...0&..
    2c04:	 15 c2 b3 be a2 8a c9 be         ........
    2c0c:	 82 53 df be 0a 1a f5 be         .S......
    2c14:	 ca 6d 05 bf bd 4a 10 bf         .m...J..
    2c1c:	 82 22 1b bf c7 f3 25 bf         ."....%.
    2c24:	 23 bd 30 bf 45 7d 3b bf         #.0.E};.
    2c2c:	 bf 32 46 bf 38 dc 50 bf         .2F.8.P.
    2c34:	 4b 78 5b bf 92 05 66 bf         Kx[...f.
    2c3c:	 a7 82 70 bf 1b ee 7a bf         ..p...z.
    2c44:	 48 a3 82 bf 48 c5 87 bf         H...H...
    2c4c:	 66 dc 8c bf da e7 91 bf         f.......
    2c54:	 f3 e6 96 bf 02 d9 9b bf         ........
    2c5c:	 45 bd a0 bf 14 93 a5 bf         E.......
    2c64:	 b0 59 aa bf 5e 10 af bf         .Y..^...
    2c6c:	 78 b6 b3 bf 34 4b b8 bf         x...4K..
    2c74:	 ea cd bc bf e2 3d c1 bf         .....=..
    2c7c:	 63 9a c5 bf bd e2 c9 bf         c.......
    2c84:	 2f 16 ce bf 1a 34 d2 bf         /....4..
    2c8c:	 bc 3b d6 bf 6f 2c da bf         .;..o,..
    2c94:	 71 05 de bf 22 c6 e1 bf         q..."...
    2c9c:	 ca 6d e5 bf c2 fb e8 bf         .m......
    2ca4:	 58 6f ec bf d6 c7 ef bf         Xo......
    2cac:	 a3 04 f3 bf 10 25 f6 bf         .....%..
    2cb4:	 74 28 f9 bf 1f 0e fc bf         t(......
    2cbc:	 7c d5 fe bf f0 be 00 c0         |.......
    2cc4:	 58 03 02 c0 a0 37 03 c0         X....7..
    2ccc:	 7d 5b 04 c0 9c 6e 05 c0         }[...n..
    2cd4:	 b9 70 06 c0 80 61 07 c0         .p...a..
    2cdc:	 ab 40 08 c0 e9 0d 09 c0         .@......
    2ce4:	 fc c8 09 c0 93 71 0a c0         .....q..
    2cec:	 68 07 0b c0 3b 8a 0b c0         h...;...
    2cf4:	 c6 f9 0b c0 c5 55 0c c0         .....U..
    2cfc:	 f5 9d 0c c0 1c d2 0c c0         ........
    2d04:	 f1 f1 0c c0 3f fd 0c c0         ....?...
    2d0c:	 c7 f3 0c c0 4e d5 0c c0         ....N...
    2d14:	 98 a1 0c c0 75 58 0c c0         ....uX..
    2d1c:	 a9 f9 0b c0 01 85 0b c0         ........
    2d24:	 4c fa 0a c0 58 59 0a c0         L...XY..
    2d2c:	 f5 a1 09 c0 f2 d3 08 c0         ........
    2d34:	 24 ef 07 c0 62 f3 06 c0         $...b...
    2d3c:	 87 e0 05 c0 63 b6 04 c0         ....c...
    2d44:	 d6 74 03 c0 bd 1b 02 c0         .t......
    2d4c:	 f3 aa 00 c0 bf 44 fe bf         .....D..
    2d54:	 b8 03 fb bf a7 92 f7 bf         ........
    2d5c:	 4a f1 f3 bf 7d 1f f0 bf         J...}...
    2d64:	 11 1d ec bf d1 e9 e7 bf         ........
    2d6c:	 ad 85 e3 bf 7c f0 de bf         ....|...
    2d74:	 13 2a da bf 72 32 d5 bf         .*..r2..
    2d7c:	 81 09 d0 bf 1d af ca bf         ........
    2d84:	 4f 23 c5 bf fe 65 bf bf         O#...e..
    2d8c:	 32 77 b9 bf eb 56 b3 bf         2w...V..
    2d94:	 29 05 ad bf fe 81 a6 bf         ).......
    2d9c:	 70 cd 9f bf 92 e7 98 bf         p.......
    2da4:	 7d d0 91 bf 48 88 8a bf         }...H...
    2dac:	 17 0f 83 bf 11 ca 76 bf         ......v.
    2db4:	 90 14 67 bf fc fd 56 bf         ..g...V.
    2dbc:	 bc 86 46 bf 35 af 35 bf         ..F.5.5.
    2dc4:	 de 77 24 bf 32 e1 12 bf         .w$.2...
    2dcc:	 b5 eb 00 bf dd 2f dd be         ...../..
    2dd4:	 00 cd b7 be f9 af 91 be         ........
    2ddc:	 4d b4 55 be c1 99 06 be         M.U.....
    2de4:	 e3 4c 58 bd 33 e2 de 3c         .LX.3..<
    2dec:	 20 63 de 3d 5d e9 43 3e          c.=].C>
    2df4:	 1a 00 8d 3e 45 b9 b8 3e         ...>E..>
    2dfc:	 5a 1e e5 3e 82 75 08 3f         Z..>.u.?
    2e04:	 40 60 29 3f f6 c8 45 3f         @`)?..E?
    2e0c:	 fe 7f 62 3f b4 83 7f 3f         ..b?...?
    2e14:	 40 69 8e 3f 4c 35 9d 3f         @i.?L5.?
    2e1c:	 31 25 ac 3f 0d 38 bb 3f         1%.?.8.?
    2e24:	 f4 6c ca 3f 0d c3 d9 3f         .l.?...?
    2e2c:	 65 39 e9 3f 10 cf f8 3f         e9.?...?
    2e34:	 92 41 04 40 52 2a 0c 40         .A.@R*.@
    2e3c:	 4f 21 14 40 07 26 1c 40         O!.@.&.@
    2e44:	 04 38 24 40 bd 56 2c 40         .8$@.V,@
    2e4c:	 b2 81 34 40 5f b8 3c 40         ..4@_.<@
    2e54:	 44 fa 44 40 d4 46 4d 40         D.D@.FM@
    2e5c:	 84 9d 55 40 e3 fd 5d 40         ..U@..]@
    2e64:	 45 67 66 40 34 d9 6e 40         Egf@4.n@
    2e6c:	 11 53 77 40 67 d4 7f 40         .Sw@g..@
    2e74:	 47 2e 84 40 86 75 88 40         G..@.u.@
    2e7c:	 a3 bf 8c 40 54 0c 91 40         ...@T..@
    2e84:	 55 5b 95 40 52 ac 99 40         U[.@R..@
    2e8c:	 06 ff 9d 40 2e 53 a2 40         ...@.S.@
    2e94:	 70 a8 a6 40 8d fe aa 40         p..@...@
    2e9c:	 32 55 af 40 17 ac b3 40         2U.@...@
    2ea4:	 ef 02 b8 40 6d 59 bc 40         ...@mY.@
    2eac:	 45 af c0 40 27 04 c5 40         E..@'..@
    2eb4:	 cb 57 c9 40 e3 a9 cd 40         .W.@...@
    2ebc:	 1e fa d1 40 34 48 d6 40         ...@4H.@
    2ec4:	 d3 93 da 40 af dc de 40         ...@...@
    2ecc:	 81 22 e3 40 eb 64 e7 40         .".@.d.@
    2ed4:	 ad a3 eb 40 7d de ef 40         ...@}..@
    2edc:	 03 15 f4 40 f1 46 f8 40         ...@.F.@
    2ee4:	 0a 74 fc 40 f7 4d 00 41         .t.@.M.A
    2eec:	 2f 5f 02 41 82 6d 04 41         /_.A.m.A
    2ef4:	 cf 78 06 41 ed 80 08 41         .x.A...A
    2efc:	 b5 85 0a 41 05 87 0c 41         ...A...A
    2f04:	 b4 84 0e 41 9f 7e 10 41         ...A.~.A
    2f0c:	 9f 74 12 41 91 66 14 41         .t.A.f.A
    2f14:	 51 54 16 41 ba 3d 18 41         QT.A.=.A
    2f1c:	 a8 22 1a 41 f4 02 1c 41         .".A...A
    2f24:	 7d de 1d 41 1f b5 1f 41         }..A...A
    2f2c:	 b8 86 21 41 26 53 23 41         ..!A&S#A
    2f34:	 4c 1a 25 41 f5 db 26 41         L.%A..&A
    2f3c:	 16 98 28 41 7b 4e 2a 41         ..(A{N*A
    2f44:	 0f ff 2b 41 b3 a9 2d 41         ..+A..-A
    2f4c:	 3c 4e 2f 41 8b ec 30 41         <N/A..0A
    2f54:	 8c 84 32 41 1e 16 34 41         ..2A..4A
    2f5c:	 18 a1 35 41 65 25 37 41         ..5Ae%7A
    2f64:	 db a2 38 41 70 19 3a 41         ..8Ap.:A
    2f6c:	 f8 88 3b 41 61 f1 3c 41         ..;Aa.<A
    2f74:	 89 52 3e 41 52 ac 3f 41         .R>AR.?A
    2f7c:	 b0 fe 40 41 7b 49 42 41         ..@A{IBA
    2f84:	 93 8c 43 41 ed c7 44 41         ..CA..DA
    2f8c:	 74 fb 45 41 fe 26 47 41         t.EA.&GA
    2f94:	 8c 4a 48 41 e9 65 49 41         .JHA.eIA
    2f9c:	 1e 79 4a 41 f9 83 4b 41         .yJA..KA
    2fa4:	 79 86 4c 41 7e 80 4d 41         y.LA~.MA
    2fac:	 fe 71 4e 41 e4 5a 4f 41         .qNA.ZOA
    2fb4:	 10 3b 50 41 84 12 51 41         .;PA..QA
    2fbc:	 1e e1 51 41 df a6 52 41         ..QA..RA
    2fc4:	 9d 63 53 41 63 17 54 41         .cSAc.TA
    2fcc:	 1c c2 54 41 a8 63 55 41         ..TA.cUA
    2fd4:	 11 fc 55 41 39 8b 56 41         ..UA9.VA
    2fdc:	 1f 11 57 41 b9 8d 57 41         ..WA..WA
    2fe4:	 f1 00 58 41 c8 6a 58 41         ..XA.jXA
    2fec:	 34 cb 58 41 29 22 59 41         4.XA)"YA
    2ff4:	 9e 6f 59 41 92 b3 59 41         .oYA..YA
    2ffc:	 f0 ed 59 41 7e 29 5a 41         ..YA~)ZA
    3004:	 cf f7 59 41 8a bc 59 41         ..YA..YA
    300c:	 c4 77 59 41 69 29 59 41         .wYAi)YA
    3014:	 98 d1 58 41 5a 70 58 41         ..XAZpXA
    301c:	 a7 05 58 41 88 91 57 41         ..XA..WA
    3024:	 1d 14 57 41 5a 8d 56 41         ..WAZ.VA
    302c:	 4c fd 55 41 11 64 55 41         L.UA.dUA
    3034:	 a9 c1 54 41 1e 16 54 41         ..TA..TA
    303c:	 87 61 53 41 ec a3 52 41         .aSA..RA
    3044:	 59 dd 51 41 ed 0d 51 41         Y.QA..QA
    304c:	 a8 35 50 41 aa 54 4f 41         .5PA.TOA
    3054:	 f2 6a 4e 41 ab 78 4d 41         .jNA.xMA
    305c:	 d4 7d 4c 41 8d 7a 4b 41         .}LA.zKA
    3064:	 e1 6e 4a 41 ee 5a 49 41         .nJA.ZIA
    306c:	 c0 3e 48 41 76 1a 47 41         .>HAv.GA
    3074:	 24 ee 45 41 eb b9 44 41         $.EA..DA
    307c:	 ca 7d 43 41 eb 39 42 41         .}CA.9BA
    3084:	 6e ee 40 41 5c 9b 3f 41         n.@A\.?A
    308c:	 e1 40 3e 41 07 df 3c 41         .@>A..<A
    3094:	 ed 75 3b 41 b2 05 3a 41         .u;A..:A
    309c:	 75 8e 38 41 4d 10 37 41         u.8AM.7A
    30a4:	 59 8b 35 41 c1 ff 33 41         Y.5A..3A
    30ac:	 91 6d 32 41 e9 d4 30 41         .m2A..0A
    30b4:	 fc 35 2f 41 d6 90 2d 41         .5/A..-A
    30bc:	 9f e5 2b 41 78 34 2a 41         ..+Ax4*A
    30c4:	 80 7d 28 41 d7 c0 26 41         .}(A..&A
    30cc:	 9b fe 24 41 ed 36 23 41         ..$A.6#A
    30d4:	 01 6a 21 41 e3 97 1f 41         .j!A...A
    30dc:	 bf c0 1d 41 bb e4 1b 41         ...A...A
    30e4:	 f3 03 1a 41 94 1e 18 41         ...A...A
    30ec:	 b5 34 16 41 88 46 14 41         .4.A.F.A
    30f4:	 28 54 12 41 bd 5d 10 41         (T.A.].A
    30fc:	 6d 63 0e 41 5c 65 0c 41         mc.A\e.A
    3104:	 ae 63 0a 41 87 5e 08 41         .c.A.^.A
    310c:	 13 56 06 41 73 4a 04 41         .V.AsJ.A
    3114:	 ca 3b 02 41 46 2a 00 41         .;.AF*.A
    311c:	 13 2c fc 40 6f fe f7 40         .,.@o..@
    3124:	 f1 cb f3 40 ea 94 ef 40         ...@...@
    312c:	 a3 59 eb 40 74 1a e7 40         .Y.@t..@
    3134:	 95 d7 e2 40 62 91 de 40         ...@b..@
    313c:	 2e 48 da 40 37 fc d5 40         .H.@7..@
    3144:	 d6 ad d1 40 4c 5d cd 40         ...@L].@
    314c:	 f8 0a c9 40 15 b7 c4 40         ...@...@
    3154:	 04 62 c0 40 fa 0b bc 40         .b.@...@
    315c:	 5b b5 b7 40 61 5e b3 40         [..@a^.@
    3164:	 68 07 af 40 b4 b0 aa 40         h..@...@
    316c:	 90 5a a6 40 47 05 a2 40         .Z.@G..@
    3174:	 27 b1 9d 40 7f 5e 99 40         '..@.^.@
    317c:	 91 0d 95 40 b2 be 90 40         ...@...@
    3184:	 1d 72 8c 40 28 28 88 40         .r.@((.@
    318c:	 1a e1 83 40 6d 3a 7f 40         ...@m:.@
    3194:	 95 b9 76 40 31 40 6e 40         ..v@1@n@
    319c:	 d9 ce 65 40 1b 66 5d 40         ..e@.f]@
    31a4:	 70 06 55 40 75 b0 4c 40         p.U@u.L@
    31ac:	 aa 64 44 40 9a 23 3c 40         .dD@.#<@
    31b4:	 cc ed 33 40 c2 c3 2b 40         ..3@..+@
    31bc:	 01 a6 23 40 0c 95 1b 40         ..#@...@
    31c4:	 60 91 13 40 80 9b 0b 40         `..@...@
    31cc:	 ea b3 03 40 2c b6 f7 3f         ...@,..?
    31d4:	 ff 22 e8 3f 36 af d8 3f         .".?6..?
    31dc:	 cd 5b c9 3f a6 29 ba 3f         .[.?.).?
    31e4:	 a4 19 ab 3f b2 2c 9c 3f         ...?.,.?
    31ec:	 a2 63 8d 3f ae 7e 7d 3f         .c.?.~}?
    31f4:	 52 81 60 3f c6 d0 43 3f         R.`?..C?
    31fc:	 b8 6e 27 3f 6a c7 0a 3f         .n'?j..?
    3204:	 28 ce de 3e 3a 78 b2 3e         (..>:x.>
    320c:	 72 ce 86 3e 60 a5 37 3e         r..>`.7>
    3214:	 db 1a c6 3d f6 87 7d 3c         ...=..}<
    321c:	 46 ec 83 bd 53 5b 12 be         F...S[..
    3224:	 0e 54 61 be bc 6e 97 be         .Ta..n..
    322c:	 6b 7a bd be b5 cb e2 be         kz......
    3234:	 bf b0 03 bf 3b 9d 15 bf         ....;...
    323c:	 d6 2a 27 bf fe 58 38 bf         .*'..X8.
    3244:	 3d 27 49 bf 21 95 59 bf         ='I.!.Y.
    324c:	 47 a2 69 bf 44 4e 79 bf         G.i.DNy.
    3254:	 62 4c 84 bf c2 c0 8b bf         bL......
    325c:	 14 04 93 bf 48 16 9a bf         ....H...
    3264:	 34 f7 a0 bf ce a6 a7 bf         4.......
    326c:	 ff 24 ae bf b4 71 b4 bf         .$...q..
    3274:	 f8 8c ba bf b0 76 c0 bf         .....v..
    327c:	 e4 2e c6 bf 9e b5 cb bf         ........
    3284:	 dd 0a d1 bf ba 2e d6 bf         ........
    328c:	 2d 21 db bf 69 e2 df bf         -!..i...
    3294:	 6d 72 e4 bf 63 d1 e8 bf         mr..c...
    329c:	 6d ff ec bf ad fc f0 bf         m.......
    32a4:	 43 c9 f4 bf 6b 65 f8 bf         C...ke..
    32ac:	 4e d1 fb bf 20 0d ff bf         N... ...
    32b4:	 89 0c 01 c0 b7 7a 02 c0         .....z..
    32bc:	 39 d1 03 c0 30 10 05 c0         9...0...
    32c4:	 b9 37 06 c0 02 48 07 c0         .7...H..
    32cc:	 31 41 08 c0 6c 23 09 c0         1A..l#..
    32d4:	 dd ee 09 c0 b5 a3 0a c0         ........
    32dc:	 20 42 0b c0 4b ca 0b c0          B..K...
    32e4:	 68 3c 0c c0 af 98 0c c0         h<......
    32ec:	 55 df 0c c0 88 10 0d c0         U.......
    32f4:	 88 2c 0d c0 87 33 0d c0         .,...3..
    32fc:	 c8 25 0d c0 82 03 0d c0         .%......
    3304:	 f3 cc 0c c0 5a 82 0c c0         ....Z...
    330c:	 fb 23 0c c0 10 b2 0b c0         .#......
    3314:	 e4 2c 0b c0 b8 94 0a c0         .,......
    331c:	 d1 e9 09 c0 77 2c 09 c0         ....w,..
    3324:	 ee 5c 08 c0 85 7b 07 c0         .\...{..
    332c:	 83 88 06 c0 34 84 05 c0         ....4...
    3334:	 e3 6e 04 c0 dc 48 03 c0         .n...H..
    333c:	 73 12 02 c0 ef cb 00 c0         s.......
    3344:	 4f eb fe bf da 1f fc bf         O.......
    334c:	 0d 36 f9 bf a9 2e f6 bf         .6......
    3354:	 46 0a f3 bf 93 c9 ef bf         F.......
    335c:	 2f 6d ec bf d3 f5 e8 bf         /m......
    3364:	 17 64 e5 bf c3 b8 e1 bf         .d......
    336c:	 6f f4 dd bf d3 17 da bf         o.......
    3374:	 9e 23 d6 bf 8b 18 d2 bf         .#......
    337c:	 38 f7 cd bf 6e c0 c9 bf         8...n...
    3384:	 cd 74 c5 bf 1e 15 c1 bf         .t......
    338c:	 01 a2 bc bf 37 1c b8 bf         ....7...
    3394:	 6f 84 b3 bf 62 db ae bf         o...b...
    339c:	 c9 21 aa bf 53 58 a5 bf         .!..SX..
    33a4:	 c3 7f a0 bf c8 98 9b bf         ........
    33ac:	 1a a4 96 bf 6a a2 91 bf         ....j...
    33b4:	 79 94 8c bf ee 7a 87 bf         y....z..
    33bc:	 93 56 82 bf 0d 50 7a bf         .V...Pz.
    33c4:	 1c e0 6f bf b1 5e 65 bf         ..o..^e.
    33cc:	 33 cd 5a bf 0d 2d 50 bf         3.Z..-P.
    33d4:	 a6 7f 45 bf 58 c6 3a bf         ..E.X.:.
    33dc:	 8b 02 30 bf a3 35 25 bf         ..0..5%.
    33e4:	 fb 60 1a bf eb 85 0f bf         .`......
    33ec:	 d0 a5 04 bf 12 84 f3 be         ........
    33f4:	 cd b7 dd be 75 e9 c7 be         ....u...
    33fc:	 ad 1b b2 be f5 7b 9b be         .....{..
    3404:	 fd 72 7c be bc 72 62 be         .r|..rb.
    340c:	 44 95 48 be d5 dd 2e be         D.H.....
    3414:	 a3 4f 15 be b1 db f7 bd         .O......
    341c:	 14 77 c5 bd 90 77 93 bd         .w...w..
    3424:	 36 c6 43 bd 62 fe c2 bc         6.C.b...
    342c:	 03 64 16 b8 8d 76 c0 3c         .d...v.<
    3434:	 51 98 3f 3d 5f f3 8e 3d         Q.?=_..=
    343c:	 f3 8d bd 3d af 96 eb 3d         ...=...=
    3444:	 44 84 0c 3e 41 ef 22 3e         D..>A.">
    344c:	 e5 09 39 3e da d1 4e 3e         ..9>..N>
    3454:	 c6 44 64 3e 81 60 79 3e         .Dd>.`y>
    345c:	 69 11 87 3e cf 44 91 3e         i..>.D.>
    3464:	 6b 49 9b 3e 43 1e a5 3e         kI.>C..>
    346c:	 5c c2 ae 3e cf 34 b8 3e         \..>.4.>
    3474:	 b4 74 c1 3e 27 81 ca 3e         .t.>'..>
    347c:	 62 59 d3 3e 83 fc db 3e         bY.>...>
    3484:	 ca 69 e4 3e 86 a0 ec 3e         .i.>...>
    348c:	 03 a0 f4 3e 82 67 fc 3e         ...>.g.>
    3494:	 37 fb 01 3f 19 a6 05 3f         7..?...?
    349c:	 12 34 09 3f e2 a4 0c 3f         .4.?...?
    34a4:	 4b f8 0f 3f 0d 2e 13 3f         K..?...?
    34ac:	 ef 45 16 3f bd 3f 19 3f         .E.?.?.?
    34b4:	 42 1b 1c 3f 4d d8 1e 3f         B..?M..?
    34bc:	 c5 76 21 3f 75 f6 23 3f         .v!?u.#?
    34c4:	 40 57 26 3f 13 99 28 3f         @W&?..(?
    34cc:	 c8 bb 2a 3f 53 bf 2c 3f         ..*?S.,?
    34d4:	 9b a3 2e 3f 98 68 30 3f         ...?.h0?
    34dc:	 46 0e 32 3f 94 94 33 3f         F.2?..3?
    34e4:	 87 fb 34 3f 26 43 36 3f         ..4?&C6?
    34ec:	 6b 6b 37 3f 6b 74 38 3f         kk7?kt8?
    34f4:	 2c 5e 39 3f c8 28 3a 3f         ,^9?.(:?
    34fc:	 49 d4 3a 3f d0 60 3b 3f         I.:?.`;?
    3504:	 78 ce 3b 3f 57 1d 3c 3f         x.;?W.<?
    350c:	 9f 4d 3c 3f 6c 5f 3c 3f         .M<?l_<?
    3514:	 ec 52 3c 3f 4b 28 3c 3f         .R<?K(<?
    351c:	 bb df 3b 3f 73 79 3b 3f         ..;?sy;?
    3524:	 a3 f5 3a 3f 82 54 3a 3f         ..:?.T:?
    352c:	 59 96 39 3f 65 bb 38 3f         Y.9?e.8?
    3534:	 e4 c3 37 3f 27 b0 36 3f         ..7?'.6?
    353c:	 6a 80 35 3f 05 35 34 3f         j.5?.54?
    3544:	 3c ce 32 3f 6b 4c 31 3f         <.2?kL1?
    354c:	 de af 2f 3f f6 f8 2d 3f         ../?..-?
    3554:	 02 28 2c 3f 67 3d 2a 3f         .(,?g=*?
    355c:	 82 39 28 3f af 1c 26 3f         .9(?..&?
    3564:	 52 e7 23 3f d6 99 21 3f         R.#?..!?
    356c:	 a4 34 1f 3f 21 b8 1c 3f         .4.?!..?
    3574:	 b8 24 1a 3f da 7a 17 3f         .$.?.z.?
    357c:	 f9 ba 14 3f 88 e5 11 3f         ...?...?
    3584:	 f5 fa 0e 3f ba fb 0b 3f         ...?...?
    358c:	 4e e8 08 3f 2d c1 05 3f         N..?-..?
    3594:	 cd 86 02 3f 53 73 fe 3e         ...?Ss.>
    359c:	 91 b4 f7 3e 37 d2 f0 3e         ...>7..>
    35a4:	 60 cd e9 3e 08 a7 e2 3e         `..>...>
    35ac:	 2c 60 db 3e e1 f9 d3 3e         ,`.>...>
    35b4:	 24 75 cc 3e 0d d3 c4 3e         $u.>...>
    35bc:	 a1 14 bd 3e ed 3a b5 3e         ...>.:.>
    35c4:	 10 47 ad 3e 0c 3a a5 3e         .G.>.:.>
    35cc:	 02 15 9d 3e 01 d9 94 3e         ...>...>
    35d4:	 23 87 8c 3e 7b 20 84 3e         #..>{ .>
    35dc:	 46 4c 77 3e 64 32 66 3e         FLw>d2f>
    35e4:	 83 f5 54 3e d6 97 43 3e         ..T>..C>
    35ec:	 92 1b 32 3e ea 82 20 3e         ..2>.. >
    35f4:	 12 d0 0e 3e 6d 0a fa 3d         ...>m..=
    35fc:	 25 49 d6 3d 98 8c b0 3d         %I.=...=
    3604:	 9f 0c 44 3d 7f 78 2b 3d         ..D=.x+=
    360c:	 1d e8 12 3d 99 be f4 3c         ...=...<
    3614:	 79 c3 c3 3c 3c e6 92 3c         y..<<..<
    361c:	 66 5c 44 3c 46 8a c6 3b         f\D<F..;
    3624:	 cf 40 25 39 aa 4b bb bb         .@%9.K..
    362c:	 79 5d 3d bc 02 42 8e bc         y]=..B..
    3634:	 f8 85 bd bc e1 73 ec bc         .....s..
    363c:	 92 82 0d bd 8d 99 24 bd         ......$.
    3644:	 bf 7b 3b bd f0 25 52 bd         .{;..%R.
    364c:	 ff 94 68 bd db c5 7e bd         ..h...~.
    3654:	 ca 5a 8a bd 8d 30 95 bd         .Z...0..
    365c:	 cc e2 9f bd 13 70 aa bd         .....p..
    3664:	 02 d7 b4 bd 37 16 bf bd         ....7...
    366c:	 5f 2c c9 bd 26 18 d3 bd         _,..&...
    3674:	 48 d8 dc bd 8a 6b e6 bd         H....k..
    367c:	 a8 d0 ef bd 6f 06 f9 bd         ....o...
    3684:	 e8 05 01 be cd 6f 05 be         .....o..
    368c:	 52 c0 09 be fd f6 0d be         R.......
    3694:	 4a 13 12 be b1 14 16 be         J.......
    369c:	 b9 fa 19 be eb c4 1d be         ........
    36a4:	 db 72 21 be 0f 04 25 be         .r!...%.
    36ac:	 24 78 28 be b4 ce 2b be         $x(...+.
    36b4:	 5b 07 2f be bb 21 32 be         [./..!2.
    36bc:	 7d 1d 35 be 49 fa 37 be         }.5.I.7.
    36c4:	 d6 b7 3a be cc 55 3d be         ..:..U=.
    36cc:	 ef d3 3f be f5 31 42 be         ..?..1B.
    36d4:	 a2 6f 44 be c0 8c 46 be         .oD...F.
    36dc:	 0d 89 48 be 65 64 4a be         ..H.edJ.
    36e4:	 8e 1e 4c be 6b b7 4d be         ..L.k.M.
    36ec:	 cf 2e 4f be 9e 84 50 be         ..O...P.
    36f4:	 b7 b8 51 be 0d cb 52 be         ..Q...R.
    36fc:	 7d bb 53 be 08 8a 54 be         }.S...T.
    3704:	 93 36 55 be 25 c1 55 be         .6U.%.U.
    370c:	 b7 29 56 be 48 70 56 be         .)V.HpV.
    3714:	 e1 94 56 be 87 97 56 be         ..V...V.
    371c:	 55 78 56 be 4b 37 56 be         UxV.K7V.
    3724:	 8b d4 55 be 29 50 55 be         ..U.)PU.
    372c:	 4d aa 54 be 0c e3 53 be         M.T...S.
    3734:	 94 fa 52 be 0d f1 51 be         ..R...Q.
    373c:	 a0 c6 50 be 8a 7b 4f be         ..P..{O.
    3744:	 eb 0f 4e be 0e 84 4c be         ..N...L.
    374c:	 28 d8 4a be 7d 0c 49 be         (.J.}.I.
    3754:	 48 21 47 be d4 16 45 be         H!G...E.
    375c:	 64 ed 42 be 4f a5 40 be         d.B.O.@.
    3764:	 e5 3e 3e be 71 ba 3b be         .>>.q.;.
    376c:	 50 18 39 be d2 58 36 be         P.9..X6.
    3774:	 64 7c 33 be 5c 83 30 be         d|3.\.0.
    377c:	 19 6e 2d be 05 3d 2a be         .n-..=*.
    3784:	 8d f0 26 be 14 89 23 be         ..&...#.
    378c:	 0d 07 20 be dd 6a 1c be         .. ..j..
    3794:	 09 b5 18 be f7 e5 14 be         ........
    379c:	 1f fe 10 be 01 fe 0c be         ........
    37a4:	 15 e6 08 be e2 b6 04 be         ........
    37ac:	 da 70 00 be 07 29 f8 bd         .p...)..
    37b4:	 d4 44 ef bd 10 36 e6 bd         .D...6..
    37bc:	 e0 fd dc bd 43 9d d3 bd         ....C...
    37c4:	 61 15 ca bd 45 67 c0 bd         a...Eg..
    37cc:	 11 94 b6 bd e8 9c ac bd         ........
    37d4:	 e4 82 a2 bd 2b 47 98 bd         ....+G..
    37dc:	 e7 ea 8d bd 42 6f 83 bd         ....Bo..
    37e4:	 bd aa 71 bd dd 3c 5c bd         ..q..<\.
    37ec:	 49 97 46 bd 53 bc 30 bd         I.F.S.0.
    37f4:	 6f ae 1a bd ec 6f 04 bd         o....o..
    37fc:	 8c 06 dc bc 99 58 ac bc         .....X..


STFT_Win_FixHalf_M512_D160:
    3804:	 00 00 c9 00 92 01 5b 02         ......[.
    380c:	 24 03 ed 03 b6 04 7f 05         $.......
    3814:	 48 06 11 07 d9 07 a2 08         H.......
    381c:	 6b 09 33 0a fb 0a c4 0b         k.3.....
    3824:	 8c 0c 54 0d 1c 0e e4 0e         ..T.....
    382c:	 ab 0f 73 10 3a 11 01 12         ..s.:...
    3834:	 c8 12 8f 13 55 14 1c 15         ....U...
    383c:	 e2 15 a8 16 6e 17 33 18         ....n.3.
    3844:	 f9 18 be 19 83 1a 47 1b         ......G.
    384c:	 0c 1c d0 1c 93 1d 57 1e         ......W.
    3854:	 1a 1f dd 1f 9f 20 62 21         ..... b!
    385c:	 24 22 e5 22 a7 23 67 24         $".".#g$
    3864:	 28 25 e8 25 a8 26 68 27         (%.%.&h'
    386c:	 27 28 e5 28 a4 29 62 2a         '(.(.)b*
    3874:	 1f 2b dc 2b 99 2c 55 2d         .+.+.,U-
    387c:	 11 2e cc 2e 87 2f 42 30         ...../B0
    3884:	 fc 30 b5 31 6e 32 27 33         .0.1n2'3
    388c:	 df 33 97 34 4e 35 04 36         .3.4N5.6
    3894:	 ba 36 70 37 25 38 d9 38         .6p7%8.8
    389c:	 8d 39 40 3a f3 3a a5 3b         .9@:.:.;
    38a4:	 57 3c 08 3d b8 3d 68 3e         W<.=.=h>
    38ac:	 17 3f c6 3f 74 40 21 41         .?.?t@!A
    38b4:	 ce 41 7a 42 26 43 d1 43         .AzB&C.C
    38bc:	 7b 44 24 45 cd 45 75 46         {D$E.EuF
    38c4:	 1d 47 c4 47 6a 48 0f 49         .G.GjH.I
    38cc:	 b4 49 58 4a fb 4a 9e 4b         .IXJ.J.K
    38d4:	 40 4c e1 4c 81 4d 21 4e         @L.L.M!N
    38dc:	 c0 4e 5e 4f fb 4f 98 50         .N^O.O.P
    38e4:	 34 51 cf 51 69 52 03 53         4Q.QiR.S
    38ec:	 9b 53 33 54 ca 54 60 55         .S3T.T`U
    38f4:	 f6 55 8a 56 1e 57 b1 57         .U.V.W.W
    38fc:	 43 58 d4 58 64 59 f4 59         CX.XdY.Y
    3904:	 82 5a 10 5b 9d 5b 29 5c         .Z.[.[)\
    390c:	 b4 5c 3e 5d c8 5d 50 5e         .\>].]P^
    3914:	 d7 5e 5e 5f e4 5f 68 60         .^^_._h`
    391c:	 ec 60 6f 61 f1 61 72 62         .`oa.arb
    3924:	 f2 62 71 63 ef 63 6c 64         .bqc.cld
    392c:	 e9 64 64 65 de 65 57 66         .dde.eWf
    3934:	 d0 66 47 67 bd 67 32 68         .fGg.g2h
    393c:	 a7 68 1a 69 8c 69 fd 69         .h.i.i.i
    3944:	 6e 6a dd 6a 4b 6b b8 6b         nj.jKk.k
    394c:	 24 6c 8f 6c f9 6c 62 6d         $l.l.lbm
    3954:	 ca 6d 31 6e 97 6e fb 6e         .m1n.n.n
    395c:	 5f 6f c2 6f 23 70 83 70         _o.o#p.p
    3964:	 e3 70 41 71 9e 71 fa 71         .pAq.q.q
    396c:	 55 72 af 72 08 73 5f 73         Ur.r.s_s
    3974:	 b6 73 0b 74 60 74 b3 74         .s.t`t.t
    397c:	 05 75 56 75 a6 75 f4 75         .uVu.u.u
    3984:	 42 76 8e 76 d9 76 23 77         Bv.v.v#w
    398c:	 6c 77 b4 77 fb 77 40 78         lw.w.w@x
    3994:	 85 78 c8 78 0a 79 4a 79         .x.x.yJy
    399c:	 8a 79 c9 79 06 7a 42 7a         .y.y.zBz
    39a4:	 7d 7a b7 7a ef 7a 27 7b         }z.z.z'{
    39ac:	 5d 7b 92 7b c6 7b f9 7b         ]{.{.{.{
    39b4:	 2a 7c 5a 7c 89 7c b7 7c         *|Z|.|.|
    39bc:	 e4 7c 0f 7d 3a 7d 63 7d         .|.}:}c}
    39c4:	 8a 7d b1 7d d6 7d fb 7d         .}.}.}.}
    39cc:	 1e 7e 3f 7e 60 7e 7f 7e         .~?~`~.~
    39d4:	 9d 7e ba 7e d6 7e f0 7e         .~.~.~.~
    39dc:	 0a 7f 22 7f 38 7f 4e 7f         ..".8.N.
    39e4:	 62 7f 75 7f 87 7f 98 7f         b.u.....
    39ec:	 a7 7f b5 7f c2 7f ce 7f         ........
    39f4:	 d9 7f e2 7f ea 7f f1 7f         ........
    39fc:	 f6 7f fa 7f fe 7f ff 7f         ........
    3a04:	 ff 7f ff 7f fe 7f fa 7f         ........
    3a0c:	 f6 7f f1 7f ea 7f e2 7f         ........
    3a14:	 d9 7f ce 7f c2 7f b5 7f         ........
    3a1c:	 a7 7f 98 7f 87 7f 75 7f         ......u.
    3a24:	 62 7f 4e 7f 38 7f 22 7f         b.N.8.".
    3a2c:	 0a 7f f0 7e d6 7e ba 7e         ...~.~.~
    3a34:	 9d 7e 7f 7e 60 7e 3f 7e         .~.~`~?~
    3a3c:	 1e 7e fb 7d d6 7d b1 7d         .~.}.}.}
    3a44:	 8a 7d 63 7d 3a 7d 0f 7d         .}c}:}.}
    3a4c:	 e4 7c b7 7c 89 7c 5a 7c         .|.|.|Z|
    3a54:	 2a 7c f9 7b c6 7b 92 7b         *|.{.{.{
    3a5c:	 5d 7b 27 7b ef 7a b7 7a         ]{'{.z.z
    3a64:	 7d 7a 42 7a 06 7a c9 79         }zBz.z.y
    3a6c:	 8a 79 4a 79 0a 79 c8 78         .yJy.y.x
    3a74:	 85 78 40 78 fb 77 b4 77         .x@x.w.w
    3a7c:	 6c 77 23 77 d9 76 8e 76         lw#w.v.v
    3a84:	 42 76 f4 75 a6 75 56 75         Bv.u.uVu
    3a8c:	 05 75 b3 74 60 74 0b 74         .u.t`t.t
    3a94:	 b6 73 5f 73 08 73 af 72         .s_s.s.r
    3a9c:	 55 72 fa 71 9e 71 41 71         Ur.q.qAq
    3aa4:	 e3 70 83 70 23 70 c2 6f         .p.p#p.o
    3aac:	 5f 6f fb 6e 97 6e 31 6e         _o.n.n1n
    3ab4:	 ca 6d 62 6d f9 6c 8f 6c         .mbm.l.l
    3abc:	 24 6c b8 6b 4b 6b dd 6a         $l.kKk.j
    3ac4:	 6e 6a fd 69 8c 69 1a 69         nj.i.i.i
    3acc:	 a7 68 32 68 bd 67 47 67         .h2h.gGg
    3ad4:	 d0 66 57 66 de 65 64 65         .fWf.ede
    3adc:	 e9 64 6c 64 ef 63 71 63         .dld.cqc
    3ae4:	 f2 62 72 62 f1 61 6f 61         .brb.aoa
    3aec:	 ec 60 68 60 e4 5f 5e 5f         .`h`._^_
    3af4:	 d7 5e 50 5e c8 5d 3e 5d         .^P^.]>]
    3afc:	 b4 5c 29 5c 9d 5b 10 5b         .\)\.[.[
    3b04:	 82 5a f4 59 64 59 d4 58         .Z.YdY.X
    3b0c:	 43 58 b1 57 1e 57 8a 56         CX.W.W.V
    3b14:	 f6 55 60 55 ca 54 33 54         .U`U.T3T
    3b1c:	 9b 53 03 53 69 52 cf 51         .S.SiR.Q
    3b24:	 34 51 98 50 fb 4f 5e 4f         4Q.P.O^O
    3b2c:	 c0 4e 21 4e 81 4d e1 4c         .N!N.M.L
    3b34:	 40 4c 9e 4b fb 4a 58 4a         @L.K.JXJ
    3b3c:	 b4 49 0f 49 6a 48 c4 47         .I.IjH.G
    3b44:	 1d 47 75 46 cd 45 24 45         .GuF.E$E
    3b4c:	 7b 44 d1 43 26 43 7a 42         {D.C&CzB
    3b54:	 ce 41 21 41 74 40 c6 3f         .A!At@.?
    3b5c:	 17 3f 68 3e b8 3d 08 3d         .?h>.=.=
    3b64:	 57 3c a5 3b f3 3a 40 3a         W<.;.:@:
    3b6c:	 8d 39 d9 38 25 38 70 37         .9.8%8p7
    3b74:	 ba 36 04 36 4e 35 97 34         .6.6N5.4
    3b7c:	 df 33 27 33 6e 32 b5 31         .3'3n2.1
    3b84:	 fc 30 42 30 87 2f cc 2e         .0B0./..
    3b8c:	 11 2e 55 2d 99 2c dc 2b         ..U-.,.+
    3b94:	 1f 2b 62 2a a4 29 e5 28         .+b*.).(
    3b9c:	 27 28 68 27 a8 26 e8 25         '(h'.&.%
    3ba4:	 28 25 67 24 a7 23 e5 22         (%g$.#."
    3bac:	 24 22 62 21 9f 20 dd 1f         $"b!. ..
    3bb4:	 1a 1f 57 1e 93 1d d0 1c         ..W.....
    3bbc:	 0c 1c 47 1b 83 1a be 19         ..G.....
    3bc4:	 f9 18 33 18 6e 17 a8 16         ..3.n...
    3bcc:	 e2 15 1c 15 55 14 8f 13         ....U...
    3bd4:	 c8 12 01 12 3a 11 73 10         ....:.s.
    3bdc:	 ab 0f e4 0e 1c 0e 54 0d         ......T.
    3be4:	 8c 0c c4 0b fb 0a 33 0a         ......3.
    3bec:	 6b 09 a2 08 d9 07 11 07         k.......
    3bf4:	 48 06 7f 05 b6 04 ed 03         H.......
    3bfc:	 24 03 5b 02 92 01 c9 00         $.[.....


STFT_Win_FixHalf_M256_D160:
    3c04:	 00 00 18 02 30 04 48 06         ....0.H.
    3c0c:	 5f 08 76 0a 8c 0c a1 0e         _.v.....
    3c14:	 b5 10 c8 12 da 14 ea 16         ........
    3c1c:	 f9 18 06 1b 11 1d 1a 1f         ........
    3c24:	 21 21 26 23 28 25 28 27         !!&#(%('
    3c2c:	 25 29 1f 2b 17 2d 0b 2f         %).+.-./
    3c34:	 fc 30 e9 32 d4 34 ba 36         .0.2.4.6
    3c3c:	 9d 38 7c 3a 57 3c 2d 3e         .8|:W<->
    3c44:	 00 40 ce 41 98 43 5d 45         .@.A.C]E
    3c4c:	 1d 47 d8 48 8f 4a 40 4c         .G.H.J@L
    3c54:	 ec 4d 93 4f 34 51 cf 52         .M.O4Q.R
    3c5c:	 65 54 f6 55 80 57 04 59         eT.U.W.Y
    3c64:	 82 5a fa 5b 6c 5d d7 5e         .Z.[l].^
    3c6c:	 3c 60 9a 61 f2 62 43 64         <`.a.bCd
    3c74:	 8d 65 d0 66 0b 68 40 69         .e.f.h@i
    3c7c:	 6e 6a 94 6b b3 6c ca 6d         nj.k.l.m
    3c84:	 da 6e e2 6f e3 70 dc 71         .n.o.p.q
    3c8c:	 cd 72 b6 73 97 74 70 75         .r.s.tpu
    3c94:	 42 76 0b 77 cc 77 85 78         Bv.w.w.x
    3c9c:	 35 79 dd 79 7d 7a 14 7b         5y.y}z.{
    3ca4:	 a3 7b 2a 7c a8 7c 1d 7d         .{*|.|.}
    3cac:	 8a 7d ef 7d 4a 7e 9d 7e         .}.}J~.~
    3cb4:	 e8 7e 29 7f 62 7f 92 7f         .~).b...
    3cbc:	 ba 7f d9 7f ee 7f fc 7f         ........
    3cc4:	 ff 7f ff 7f ff 7f ff 7f         ........
    3ccc:	 ff 7f ff 7f ff 7f ff 7f         ........
    3cd4:	 ff 7f ff 7f ff 7f ff 7f         ........
    3cdc:	 ff 7f ff 7f ff 7f ff 7f         ........
    3ce4:	 ff 7f ff 7f ff 7f ff 7f         ........
    3cec:	 ff 7f ff 7f ff 7f ff 7f         ........
    3cf4:	 ff 7f ff 7f ff 7f ff 7f         ........
    3cfc:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d04:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d0c:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d14:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d1c:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d24:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d2c:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d34:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d3c:	 ff 7f ff 7f ff 7f ff 7f         ........
    3d44:	 ff 7f fc 7f ee 7f d9 7f         ........
    3d4c:	 ba 7f 92 7f 62 7f 29 7f         ....b.).
    3d54:	 e8 7e 9d 7e 4a 7e ef 7d         .~.~J~.}
    3d5c:	 8a 7d 1d 7d a8 7c 2a 7c         .}.}.|*|
    3d64:	 a3 7b 14 7b 7d 7a dd 79         .{.{}z.y
    3d6c:	 35 79 85 78 cc 77 0b 77         5y.x.w.w
    3d74:	 42 76 70 75 97 74 b6 73         Bvpu.t.s
    3d7c:	 cd 72 dc 71 e3 70 e2 6f         .r.q.p.o
    3d84:	 da 6e ca 6d b3 6c 94 6b         .n.m.l.k
    3d8c:	 6e 6a 40 69 0b 68 d0 66         nj@i.h.f
    3d94:	 8d 65 43 64 f2 62 9a 61         .eCd.b.a
    3d9c:	 3c 60 d7 5e 6c 5d fa 5b         <`.^l].[
    3da4:	 82 5a 04 59 80 57 f6 55         .Z.Y.W.U
    3dac:	 65 54 cf 52 34 51 93 4f         eT.R4Q.O
    3db4:	 ec 4d 40 4c 8f 4a d8 48         .M@L.J.H
    3dbc:	 1d 47 5d 45 98 43 ce 41         .G]E.C.A
    3dc4:	 00 40 2d 3e 57 3c 7c 3a         .@->W<|:
    3dcc:	 9d 38 ba 36 d4 34 e9 32         .8.6.4.2
    3dd4:	 fc 30 0b 2f 17 2d 1f 2b         .0./.-.+
    3ddc:	 25 29 28 27 28 25 26 23         %)('(%&#
    3de4:	 21 21 1a 1f 11 1d 06 1b         !!......
    3dec:	 f9 18 ea 16 da 14 c8 12         ........
    3df4:	 b5 10 a1 0e 8c 0c 76 0a         ......v.
    3dfc:	 5f 08 48 06 30 04 18 02         _.H.0...


STFT_Win_FixHalf_M256_D80:
    3e04:	 00 00 92 01 24 03 b6 04         ....$...
    3e0c:	 48 06 d9 07 6b 09 fb 0a         H...k...
    3e14:	 8c 0c 1c 0e ab 0f 3a 11         ......:.
    3e1c:	 c8 12 55 14 e2 15 6e 17         ..U...n.
    3e24:	 f9 18 83 1a 0c 1c 93 1d         ........
    3e2c:	 1a 1f 9f 20 24 22 a7 23         ... $".#
    3e34:	 28 25 a8 26 27 28 a4 29         (%.&'(.)
    3e3c:	 1f 2b 99 2c 11 2e 87 2f         .+.,.../
    3e44:	 fc 30 6e 32 df 33 4e 35         .0n2.3N5
    3e4c:	 ba 36 25 38 8d 39 f3 3a         .6%8.9.:
    3e54:	 57 3c b8 3d 17 3f 74 40         W<.=.?t@
    3e5c:	 ce 41 26 43 7b 44 cd 45         .A&C{D.E
    3e64:	 1d 47 6a 48 b4 49 fb 4a         .GjH.I.J
    3e6c:	 40 4c 81 4d c0 4e fb 4f         @L.M.N.O
    3e74:	 34 51 69 52 9b 53 ca 54         4QiR.S.T
    3e7c:	 f6 55 1e 57 43 58 64 59         .U.WCXdY
    3e84:	 82 5a 9d 5b b4 5c c8 5d         .Z.[.\.]
    3e8c:	 d7 5e e4 5f ec 60 f1 61         .^._.`.a
    3e94:	 f2 62 ef 63 e9 64 de 65         .b.c.d.e
    3e9c:	 d0 66 bd 67 a7 68 8c 69         .f.g.h.i
    3ea4:	 6e 6a 4b 6b 24 6c f9 6c         njKk$l.l
    3eac:	 ca 6d 97 6e 5f 6f 23 70         .m.n_o#p
    3eb4:	 e3 70 9e 71 55 72 08 73         .p.qUr.s
    3ebc:	 b6 73 60 74 05 75 a6 75         .s`t.u.u
    3ec4:	 42 76 d9 76 6c 77 fb 77         Bv.vlw.w
    3ecc:	 85 78 0a 79 8a 79 06 7a         .x.y.y.z
    3ed4:	 7d 7a ef 7a 5d 7b c6 7b         }z.z]{.{
    3edc:	 2a 7c 89 7c e4 7c 3a 7d         *|.|.|:}
    3ee4:	 8a 7d d6 7d 1e 7e 60 7e         .}.}.~`~
    3eec:	 9d 7e d6 7e 0a 7f 38 7f         .~.~..8.
    3ef4:	 62 7f 87 7f a7 7f c2 7f         b.......
    3efc:	 d9 7f ea 7f f6 7f fe 7f         ........
    3f04:	 ff 7f fe 7f f6 7f ea 7f         ........
    3f0c:	 d9 7f c2 7f a7 7f 87 7f         ........
    3f14:	 62 7f 38 7f 0a 7f d6 7e         b.8....~
    3f1c:	 9d 7e 60 7e 1e 7e d6 7d         .~`~.~.}
    3f24:	 8a 7d 3a 7d e4 7c 89 7c         .}:}.|.|
    3f2c:	 2a 7c c6 7b 5d 7b ef 7a         *|.{]{.z
    3f34:	 7d 7a 06 7a 8a 79 0a 79         }z.z.y.y
    3f3c:	 85 78 fb 77 6c 77 d9 76         .x.wlw.v
    3f44:	 42 76 a6 75 05 75 60 74         Bv.u.u`t
    3f4c:	 b6 73 08 73 55 72 9e 71         .s.sUr.q
    3f54:	 e3 70 23 70 5f 6f 97 6e         .p#p_o.n
    3f5c:	 ca 6d f9 6c 24 6c 4b 6b         .m.l$lKk
    3f64:	 6e 6a 8c 69 a7 68 bd 67         nj.i.h.g
    3f6c:	 d0 66 de 65 e9 64 ef 63         .f.e.d.c
    3f74:	 f2 62 f1 61 ec 60 e4 5f         .b.a.`._
    3f7c:	 d7 5e c8 5d b4 5c 9d 5b         .^.].\.[
    3f84:	 82 5a 64 59 43 58 1e 57         .ZdYCX.W
    3f8c:	 f6 55 ca 54 9b 53 69 52         .U.T.SiR
    3f94:	 34 51 fb 4f c0 4e 81 4d         4Q.O.N.M
    3f9c:	 40 4c fb 4a b4 49 6a 48         @L.J.IjH
    3fa4:	 1d 47 cd 45 7b 44 26 43         .G.E{D&C
    3fac:	 ce 41 74 40 17 3f b8 3d         .At@.?.=
    3fb4:	 57 3c f3 3a 8d 39 25 38         W<.:.9%8
    3fbc:	 ba 36 4e 35 df 33 6e 32         .6N5.3n2
    3fc4:	 fc 30 87 2f 11 2e 99 2c         .0./...,
    3fcc:	 1f 2b a4 29 27 28 a8 26         .+.)'(.&
    3fd4:	 28 25 a7 23 24 22 9f 20         (%.#$". 
    3fdc:	 1a 1f 93 1d 0c 1c 83 1a         ........
    3fe4:	 f9 18 6e 17 e2 15 55 14         ..n...U.
    3fec:	 c8 12 3a 11 ab 0f 1c 0e         ..:.....
    3ff4:	 8c 0c fb 0a 6b 09 d9 07         ....k...
    3ffc:	 48 06 b6 04 24 03 92 01         H...$...


STFT_Win_FixHalf_M128_D80:
    4004:	 00 00 30 04 5f 08 8c 0c         ..0._...
    400c:	 b5 10 da 14 f9 18 11 1d         ........
    4014:	 21 21 28 25 25 29 17 2d         !!(%%).-
    401c:	 fc 30 d4 34 9d 38 57 3c         .0.4.8W<
    4024:	 00 40 98 43 1d 47 8f 4a         .@.C.G.J
    402c:	 ec 4d 34 51 65 54 80 57         .M4QeT.W
    4034:	 82 5a 6c 5d 3c 60 f2 62         .Zl]<`.b
    403c:	 8d 65 0b 68 6e 6a b3 6c         .e.hnj.l
    4044:	 da 6e e3 70 cd 72 97 74         .n.p.r.t
    404c:	 42 76 cc 77 35 79 7d 7a         Bv.w5y}z
    4054:	 a3 7b a8 7c 8a 7d 4a 7e         .{.|.}J~
    405c:	 e8 7e 62 7f ba 7f ee 7f         .~b.....
    4064:	 ff 7f ff 7f ff 7f ff 7f         ........
    406c:	 ff 7f ff 7f ff 7f ff 7f         ........
    4074:	 ff 7f ff 7f ff 7f ff 7f         ........
    407c:	 ff 7f ff 7f ff 7f ff 7f         ........
    4084:	 ff 7f ff 7f ff 7f ff 7f         ........
    408c:	 ff 7f ff 7f ff 7f ff 7f         ........
    4094:	 ff 7f ff 7f ff 7f ff 7f         ........
    409c:	 ff 7f ff 7f ff 7f ff 7f         ........
    40a4:	 ff 7f ee 7f ba 7f 62 7f         ......b.
    40ac:	 e8 7e 4a 7e 8a 7d a8 7c         .~J~.}.|
    40b4:	 a3 7b 7d 7a 35 79 cc 77         .{}z5y.w
    40bc:	 42 76 97 74 cd 72 e3 70         Bv.t.r.p
    40c4:	 da 6e b3 6c 6e 6a 0b 68         .n.lnj.h
    40cc:	 8d 65 f2 62 3c 60 6c 5d         .e.b<`l]
    40d4:	 82 5a 80 57 65 54 34 51         .Z.WeT4Q
    40dc:	 ec 4d 8f 4a 1d 47 98 43         .M.J.G.C
    40e4:	 00 40 57 3c 9d 38 d4 34         .@W<.8.4
    40ec:	 fc 30 17 2d 25 29 28 25         .0.-%)(%
    40f4:	 21 21 11 1d f9 18 da 14         !!......
    40fc:	 b5 10 8c 0c 5f 08 30 04         ...._.0.


memcmp:
    4104:    74 04             	[--sp] = {rets, r4}
    4106:    82 f9 05 08       	if (r2 < 0x4) goto 0xa <memcmp+0x10 : 4114 >
    410a:    90 e1 10 30       	r3 = r1 | r0
    410e:    60 ff 03 30 0b 00 	if ((r3 & 0x3) == 0) goto 0x16 <memcmp+0x26 : 412a >
    4114:    02 51             	if (r2 == 0) goto 0x22 <memcmp+0x34 : 4138 >
    4116:    13 07             	r3 = b[r1++=0x1] (u)
    4118:    04 07             	r4 = b[r0++=0x1] (u)
    411a:    fa 3f             	r2 += -0x1
    411c:    03 e8 fa 41       	if (r4 == r3) goto -0xc <memcmp+0x10 : 4114 >
    4120:    c8 1e             	r0 = r4 - r3
    4122:    54 04             	{pc, r4} = [sp++]
    4124:    fa 3c             	r2 += -0x4
    4126:    c1 24             	r1 += 0x4
    4128:    c0 24             	r0 += 0x4
    412a:    82 f9 f3 09       	if (r2 < 0x4) goto -0x1a <memcmp+0x10 : 4114 >
    412e:    13 60             	r3 = [r1+0x0] 
    4130:    04 60             	r4 = [r0+0x0] 
    4132:    03 e8 f7 41       	if (r4 == r3) goto -0x12 <memcmp+0x20 : 4124 >
    4136:    f7 8e             	goto -0x24 <memcmp+0x10 : 4114 >
    4138:    40 20             	r0 = 0x0
    413a:    54 04             	{pc, r4} = [sp++]


memmove:
    413c:    76 04             	[--sp] = {rets, r6-r4}
    413e:    00 ec 03 10       	if (r1 > r0) goto 0x6 <memmove+0xC : 4148 >
    4142:    93 1c             	r3 = r1 + r2
    4144:    00 ec 29 30       	if (r3 > r0) goto 0x52 <memmove+0x5E : 419a >
    4148:    03 16             	r3 = r0
    414a:    82 f9 14 10       	if (r2 < 0x8) goto 0x28 <memmove+0x3A : 4176 >
    414e:    65 e1 03 10       	r5 = r1 & 0x3
    4152:    64 e1 03 30       	r4 = r3 & 0x3
    4156:    04 46             	if (r4 == 0) goto 0xc <memmove+0x28 : 4164 >
    4158:    a6 e0 04 40       	r6 = 0x4 - r4
    415c:    a2 1f             	r2 = r2 - r6
    415e:    16 03             	rep 0x4 r6 {
    4160:    16 07             		r6 = b[r1++=0x1] (u)
    4162:    b6 07             		b[r3++=0x1] = r6
                               	}
    4164:    5c 19             	r4 ^= r5
    4166:    a5 a2             	r5 = r2 >> 0x2
    4168:    84 4a             	if (r4 != 0) goto 0x14 <memmove+0x42 : 417e >
    416a:    15 03             	rep 0x4 r5 {
    416c:    16 05             		r6 = [r1++=0x4] 
    416e:    b6 05             		[r3++=0x4] = r6
                               	}
    4170:    f5 5c             	if (r5 != 0) goto -0x8 <memmove+0x2E : 416a >
    4172:    62 e1 03 20       	r2 = r2 & 0x3
    4176:    12 03             	rep 0x4 r2 {
    4178:    12 07             		r2 = b[r1++=0x1] (u)
    417a:    b2 07             		b[r3++=0x1] = r2
                               	}
    417c:    56 04             	{pc, r6-r4} = [sp++]
    417e:    a5 03             	rep 0x16 r5 {
    4180:    16 07             		r6 = b[r1++=0x1] (u)
    4182:    14 07             		r4 = b[r1++=0x1] (u)
    4184:    a6 f1 20 44       		r6 <= insert(r4, p:0x8, l:0x8)  #
    4188:    14 07             			 r4 = b[r1++=0x1] (u)
    418a:    a6 f1 20 48       		r6 <= insert(r4, p:0x10, l:0x8)  #
    418e:    14 07             			 r4 = b[r1++=0x1] (u)
    4190:    a6 e1 20 4c       		r6 <= insert(r4, p:0x18, l:0x8)
    4194:    b6 05             		[r3++=0x4] = r6
                               	}
    4196:    f5 53             	if (r5 != 0) goto -0x1a <memmove+0x42 : 417e >
    4198:    f7 8c             	goto -0x28 <memmove+0x36 : 4172 >
    419a:    83 1c             	r3 = r0 + r2
    419c:    91 1c             	r1 = r1 + r2
    419e:    82 f9 17 10       	if (r2 < 0x8) goto 0x2e <memmove+0x94 : 41d0 >
    41a2:    65 e1 03 10       	r5 = r1 & 0x3
    41a6:    64 e1 03 30       	r4 = r3 & 0x3
    41aa:    04 47             	if (r4 == 0) goto 0xe <memmove+0x7E : 41ba >
    41ac:    22 1f             	r2 = r2 - r4
    41ae:    46 16             	r6 = r4
    41b0:    36 03             	rep 0x8 r6 {
    41b2:    59 ee 1f 6f       		r6 = b[++r1=-0x1] (u)
    41b6:    5b ee 3f 6f       		b[++r3=-0x1] = r6
                               	}
    41ba:    5c 19             	r4 ^= r5
    41bc:    a5 a2             	r5 = r2 >> 0x2
    41be:    84 4e             	if (r4 != 0) goto 0x1c <memmove+0xA0 : 41dc >
    41c0:    35 03             	rep 0x8 r5 {
    41c2:    d7 ec 1e 6f       		r6 = [++r1=-0x4]
    41c6:    d7 ec 3f 6f       		[++r3=-0x4] = r6
                               	}
    41ca:    f5 5a             	if (r5 != 0) goto -0xc <memmove+0x84 : 41c0 >
    41cc:    62 e1 03 20       	r2 = r2 & 0x3
    41d0:    32 03             	rep 0x8 r2 {
    41d2:    59 ee 1f 6f       		r6 = b[++r1=-0x1] (u)
    41d6:    5b ee 3f 6f       		b[++r3=-0x1] = r6
                               	}
    41da:    56 04             	{pc, r6-r4} = [sp++]
    41dc:    f9 3f             	r1 += -0x1
    41de:    b5 03             	rep 0x18 r5 {
    41e0:    1e 07             		r6 = b[r1++=-0x1] (u)
    41e2:    66 b8             		r6 = r6 << 0x18
    41e4:    1c 07             		r4 = b[r1++=-0x1] (u)
    41e6:    a6 f1 20 48       		r6 <= insert(r4, p:0x10, l:0x8)  #
    41ea:    1c 07             			 r4 = b[r1++=-0x1] (u)
    41ec:    a6 f1 20 44       		r6 <= insert(r4, p:0x8, l:0x8)  #
    41f0:    1c 07             			 r4 = b[r1++=-0x1] (u)
    41f2:    46 19             		r6 |= r4
    41f4:    d7 ec 3f 6f       		[++r3=-0x4] = r6
                               	}
    41f8:    f5 52             	if (r5 != 0) goto -0x1c <memmove+0xA2 : 41de >
    41fa:    19 81             	r1 = r1 + 0x1
    41fc:    f7 87             	goto -0x32 <memmove+0x90 : 41cc >


memmem:
    41fe:    77 04             	[--sp] = {rets, r7-r4}
    4200:    35 16             	r5 = r3
    4202:    26 16             	r6 = r2
    4204:    17 16             	r7 = r1
    4206:    04 16             	r4 = r0
    4208:    85 49             	if (r5 != 0) goto 0x12 <memmem+0x1E : 421c >
    420a:    04 8b             	goto 0x16 <memmem+0x24 : 4222 >
    420c:    40 16             	r0 = r4
    420e:    61 16             	r1 = r6
    4210:    52 16             	r2 = r5
    4212:    bf ea 77 ff       	call -0x112 <memcmp : 4104 >
    4216:    00 45             	if (r0 == 0) goto 0xa <memmem+0x24 : 4222 >
    4218:    ff 3f             	r7 += -0x1
    421a:    c4 21             	r4 += 0x1
    421c:    05 e9 f6 71       	if (r7 >= r5) goto -0x14 <memmem+0xE : 420c >
    4220:    44 20             	r4 = 0x0
    4222:    40 16             	r0 = r4
    4224:    57 04             	{pc, r7-r4} = [sp++]


memset:
    4226:    74 04             	[--sp] = {rets, r4}
    4228:    03 16             	r3 = r0
    422a:    02 52             	if (r2 == 0) goto 0x24 <memset+0x2A : 4250 >
    422c:    33 ea 03 40       	if ((r3 & 0x3) != 0) {
    4230:    f2 f0 01 20       		r2 = r2 - 0x1  #
    4234:    b1 07             		  b[r3++=0x1] = r1
    4236:    f7 99             		goto -0xe
                               	} <memset+0x4 : 422a >
    4238:    a4 a2             	r4 = r2 >> 0x2
    423a:    a1 e1 20 14       	r1 <= insert(r1, p:0x8, l:0x8)
    423e:    a1 e1 40 18       	r1 <= insert(r1, p:0x10, l:0x10)
    4242:    04 03             	rep 0x2 r4 {
    4244:    b1 05             		[r3++=0x4] = r1
                               	}
    4246:    f4 5d             	if (r4 != 0) goto -0x6 <memset+0x1C : 4242 >
    4248:    62 e1 03 20       	r2 = r2 & 0x3
    424c:    02 03             	rep 0x2 r2 {
    424e:    b1 07             		b[r3++=0x1] = r1
                               	}
    4250:    54 04             	{pc, r4} = [sp++]


modf:
    4252:    79 04             	[--sp] = {rets, r9-r4}
    4254:    04 15             	r5_r4 = r1_r0
    4256:    d0 e1 04 4b       	r5_r4 >>= 0x34
    425a:    43 e0 ff 07       	r3 = 0x7ff <alg_code_size+0x32E : 7fe >
    425e:    b4 19             	r4 &= r3
    4260:    33 e1 01 4c       	r3 = r4 + -0x3ff
    4264:    03 fe 08 26       	ifs (r3 > 0x13) goto 0x10 <modf+0x26 : 4278 >
    4268:    74 fc 1d fc       	if (r4 > 0x3fe) goto 0x3a <modf+0x54 : 42a6 >
    426c:    65 e1 00 14       	r5 = r1 & 0x80000000
    4270:    44 20             	r4 = 0x0
    4272:    50 ec 21 40       	d[r2+0x0] = r5_r4
    4276:    59 04             	{pc, r9-r4} = [sp++]
    4278:    03 fd 2c 68       	ifs (r3 >= 0x34) goto 0x58 <modf+0x82 : 42d4 >
    427c:    33 e1 ed 4b       	r3 = r4 + -0x413
    4280:    14 3f             	r4 = -0x1
    4282:    c8 e1 42 33       	r3 = r4 >> r3
    4286:    03 fa 25 00       	if ((r3 & r0) == 0) goto 0x4a <modf+0x82 : 42d4 >
    428a:    44 20             	r4 = 0x0
    428c:    90 e1 03 63       	r6 = r0 & ~r3
    4290:    15 16             	r5 = r1
    4292:    47 16             	r7 = r4
    4294:    90 e1 70 95       	r9 = r7 | r5
    4298:    90 e1 60 84       	r8 = r6 | r4
    429c:    50 ec 21 80       	d[r2+0x0] = r9_r8
    42a0:    62 16             	r2 = r6
    42a2:    53 16             	r3 = r5
    42a4:    04 94             	goto 0x28 <modf+0x7C : 42ce >
    42a6:    c4 ff ff ff 0f 00 	r4 = 0xfffff <$data.__3+0xBDBE : ffffe >
    42ac:    c8 e1 42 33       	r3 = r4 >> r3
    42b0:    90 e1 32 41       	r4 = r3 & r1
    42b4:    04 19             	r4 |= r0
    42b6:    04 4e             	if (r4 == 0) goto 0x1c <modf+0x82 : 42d4 >
    42b8:    90 e1 13 43       	r4 = r1 & ~r3
    42bc:    45 20             	r5 = 0x0
    42be:    46 16             	r6 = r4
    42c0:    47 20             	r7 = 0x0
    42c2:    d0 e1 00 62       	r7_r6 <<= 0x20
    42c6:    50 ec 21 60       	d[r2+0x0] = r7_r6
    42ca:    42 20             	r2 = 0x0
    42cc:    43 16             	r3 = r4
    42ce:    39 04             	{rets, r9-r4} = [sp++]
    42d0:    c0 ea c3 9b       	goto 0x13786 <__subdf3 : 17a5a >
    42d4:    50 ec 21 00       	d[r2+0x0] = r1_r0
    42d8:    61 e1 00 14       	r1 = r1 & 0x80000000
    42dc:    40 20             	r0 = 0x0
    42de:    59 04             	{pc, r9-r4} = [sp++]


strchr:
    42e0:    11 17             	r1 = r1.b0 (u)
    42e2:    02 07             	r2 = b[r0++=0x1] (u)
    42e4:    01 e8 01 20       	if (r2 == r1) goto 0x2 <strchr+0xA : 42ea >
    42e8:    f2 5c             	if (r2 != 0) goto -0x8 <strchr+0x2 : 42e2 >
    42ea:    f8 3f             	r0 += -0x1
    42ec:    92 e8 00 01       	if (r2 != r1) {
    42f0:    40 20             		r0 = 0x0
                               	}
    42f2:    80 00             	rts


strcmp:
    42f4:    77 04             	[--sp] = {rets, r7-r4}
    42f6:    64 e1 03 00       	r4 = r0 & 0x3
    42fa:    04 4b             	if (r4 == 0) goto 0x16 <strcmp+0x1E : 4312 >
    42fc:    a4 e0 04 40       	r4 = 0x4 - r4
    4300:    0a 40             	r2 = b[r0+0x0] (u)
    4302:    22 41             	if (r2 == 0) goto 0x82 <strcmp+0x92 : 4386 >
    4304:    1b 40             	r3 = b[r1+0x0] (u)
    4306:    83 e8 3f 20       	if (r2 != r3) goto 0x7e <strcmp+0x94 : 4388 >
    430a:    08 81             	r0 = r0 + 0x1
    430c:    19 81             	r1 = r1 + 0x1
    430e:    04 ea f7 ff       	if (--r4 != 0) goto -0x12 <strcmp+0xC : 4300 >
    4312:    90 e1 10 20       	r2 = r1 | r0
    4316:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <RAM_LIMIT_H+0xFEE4FEFE : fefefefe >
    431c:    61 ff 03 20 13 00 	if ((r2 & 0x3) != 0) goto 0x26 <strcmp+0x54 : 4348 >
    4322:    02 60             	r2 = [r0+0x0] 
    4324:    13 60             	r3 = [r1+0x0] 
    4326:    83 e8 26 20       	if (r2 != r3) goto 0x4c <strcmp+0x82 : 4376 >
    432a:    14 16             	r4 = r1
    432c:    a1 1d             	r1 = r2 + r6
    432e:    90 e1 13 12       	r1 = r1 & ~r2
    4332:    61 ff 80 13 2c 00 	if ((r1 & 0x80808080) != 0) goto 0x58 <strcmp+0x9C : 4390 >
    4338:    02 61             	r2 = [r0+0x4] 
    433a:    45 61             	r5 = [r4+0x4] 
    433c:    49 84             	r1 = r4 + 0x4
    433e:    08 84             	r0 = r0 + 0x4
    4340:    14 16             	r4 = r1
    4342:    05 e8 f3 21       	if (r2 == r5) goto -0x1a <strcmp+0x38 : 432c >
    4346:    04 97             	goto 0x2e <strcmp+0x82 : 4376 >
    4348:    14 16             	r4 = r1
    434a:    02 60             	r2 = [r0+0x0] 
    434c:    43 07             	r3 = b[r4++=0x1] (u)
    434e:    45 07             	r5 = b[r4++=0x1] (u)
    4350:    a3 e1 20 54       	r3 <= insert(r5, p:0x8, l:0x8)
    4354:    45 07             	r5 = b[r4++=0x1] (u)
    4356:    a3 e1 20 58       	r3 <= insert(r5, p:0x10, l:0x8)
    435a:    45 07             	r5 = b[r4++=0x1] (u)
    435c:    a3 e1 20 5c       	r3 <= insert(r5, p:0x18, l:0x8)
    4360:    83 e8 09 20       	if (r2 != r3) goto 0x12 <strcmp+0x82 : 4376 >
    4364:    a5 1d             	r5 = r2 + r6
    4366:    90 e1 53 52       	r5 = r5 & ~r2
    436a:    61 ff 80 53 10 00 	if ((r5 & 0x80808080) != 0) goto 0x20 <strcmp+0x9C : 4390 >
    4370:    08 84             	r0 = r0 + 0x4
    4372:    19 84             	r1 = r1 + 0x4
    4374:    f7 89             	goto -0x2e <strcmp+0x54 : 4348 >
    4376:    0a 40             	r2 = b[r0+0x0] (u)
    4378:    02 46             	if (r2 == 0) goto 0xc <strcmp+0x92 : 4386 >
    437a:    1c 40             	r4 = b[r1+0x0] (u)
    437c:    84 e8 04 20       	if (r2 != r4) goto 0x8 <strcmp+0x94 : 4388 >
    4380:    08 81             	r0 = r0 + 0x1
    4382:    19 81             	r1 = r1 + 0x1
    4384:    f7 98             	goto -0x10 <strcmp+0x82 : 4376 >
    4386:    42 20             	r2 = 0x0
    4388:    13 16             	r3 = r1
    438a:    38 40             	r0 = b[r3+0x0] (u)
    438c:    20 1e             	r0 = r2 - r0
    438e:    57 04             	{pc, r7-r4} = [sp++]
    4390:    40 20             	r0 = 0x0
    4392:    57 04             	{pc, r7-r4} = [sp++]


strcpy:
    4394:    77 04             	[--sp] = {rets, r7-r4}
    4396:    07 16             	r7 = r0
    4398:    64 e1 03 00       	r4 = r0 & 0x3
    439c:    04 47             	if (r4 == 0) goto 0xe <strcpy+0x18 : 43ac >
    439e:    a4 e0 04 40       	r4 = 0x4 - r4
    43a2:    12 07             	r2 = b[r1++=0x1] (u)
    43a4:    82 07             	b[r0++=0x1] = r2
    43a6:    12 4b             	if (r2 == 0) goto 0x56 <strcpy+0x6A : 43fe >
    43a8:    04 ea fb ff       	if (--r4 != 0) goto -0xa <strcpy+0xE : 43a2 >
    43ac:    90 e1 10 20       	r2 = r1 | r0
    43b0:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <RAM_LIMIT_H+0xFEE4FEFE : fefefefe >
    43b6:    61 ff 03 20 0a 00 	if ((r2 & 0x3) != 0) goto 0x14 <strcpy+0x3C : 43d0 >
    43bc:    12 60             	r2 = [r1+0x0] 
    43be:    a3 1d             	r3 = r2 + r6
    43c0:    90 e1 33 32       	r3 = r3 & ~r2
    43c4:    61 ff 80 33 17 00 	if ((r3 & 0x80808080) != 0) goto 0x2e <strcpy+0x64 : 43f8 >
    43ca:    19 84             	r1 = r1 + 0x4
    43cc:    82 05             	[r0++=0x4] = r2
    43ce:    f7 96             	goto -0x14 <strcpy+0x28 : 43bc >
    43d0:    14 16             	r4 = r1
    43d2:    42 07             	r2 = b[r4++=0x1] (u)
    43d4:    45 07             	r5 = b[r4++=0x1] (u)
    43d6:    a2 e1 20 54       	r2 <= insert(r5, p:0x8, l:0x8)
    43da:    45 07             	r5 = b[r4++=0x1] (u)
    43dc:    a2 e1 20 58       	r2 <= insert(r5, p:0x10, l:0x8)
    43e0:    45 07             	r5 = b[r4++=0x1] (u)
    43e2:    a2 e1 20 5c       	r2 <= insert(r5, p:0x18, l:0x8)
    43e6:    a5 1d             	r5 = r2 + r6
    43e8:    90 e1 53 52       	r5 = r5 & ~r2
    43ec:    61 ff 80 53 03 00 	if ((r5 & 0x80808080) != 0) goto 0x6 <strcpy+0x64 : 43f8 >
    43f2:    82 05             	[r0++=0x4] = r2
    43f4:    41 16             	r1 = r4
    43f6:    f7 8c             	goto -0x28 <strcpy+0x3C : 43d0 >
    43f8:    12 07             	r2 = b[r1++=0x1] (u)
    43fa:    82 07             	b[r0++=0x1] = r2
    43fc:    f2 5d             	if (r2 != 0) goto -0x6 <strcpy+0x64 : 43f8 >
    43fe:    70 16             	r0 = r7
    4400:    57 04             	{pc, r7-r4} = [sp++]


strlen:
    4402:    01 16             	r1 = r0
    4404:    12 07             	r2 = b[r1++=0x1] (u)
    4406:    f2 5e             	if (r2 != 0) goto -0x4 <strlen+0x2 : 4404 >
    4408:    f9 3f             	r1 += -0x1
    440a:    10 1e             	r0 = r1 - r0
    440c:    80 00             	rts


strncmp:
    440e:    74 04             	[--sp] = {rets, r4}
    4410:    02 4c             	if (r2 == 0) goto 0x18 <strncmp+0x1C : 442a >
    4412:    a2 e0 01 20       	r2 = 0x1 - r2
    4416:    04 84             	goto 0x8 <strncmp+0x12 : 4420 >
    4418:    02 46             	if (r2 == 0) goto 0xc <strncmp+0x18 : 4426 >
    441a:    83 e8 04 40       	if (r4 != r3) goto 0x8 <strncmp+0x18 : 4426 >
    441e:    c2 21             	r2 += 0x1
    4420:    13 07             	r3 = b[r1++=0x1] (u)
    4422:    04 07             	r4 = b[r0++=0x1] (u)
    4424:    f4 59             	if (r4 != 0) goto -0xe <strncmp+0xA : 4418 >
    4426:    c8 1e             	r0 = r4 - r3
    4428:    54 04             	{pc, r4} = [sp++]
    442a:    40 20             	r0 = 0x0
    442c:    54 04             	{pc, r4} = [sp++]


strstr:
    442e:    74 04             	[--sp] = {rets, r4}
    4430:    0a 40             	r2 = b[r0+0x0] (u)
    4432:    82 4f             	if (r2 != 0) goto 0x1e <strstr+0x24 : 4452 >
    4434:    19 40             	r1 = b[r1+0x0] (u)
    4436:    01 4f             	if (r1 == 0) goto 0x1e <strstr+0x28 : 4456 >
    4438:    40 20             	r0 = 0x0
    443a:    54 04             	{pc, r4} = [sp++]
    443c:    42 20             	r2 = 0x0
    443e:    d8 ee 10 32       	r3 = b[r1+r2] (u)
    4442:    03 49             	if (r3 == 0) goto 0x12 <strstr+0x28 : 4456 >
    4444:    d8 ee 00 42       	r4 = b[r0+r2] (u)
    4448:    c2 21             	r2 += 0x1
    444a:    04 e8 f8 31       	if (r3 == r4) goto -0x10 <strstr+0x10 : 443e >
    444e:    58 ee 01 20       	r2 = b[++r0=0x1] (u)
    4452:    f2 54             	if (r2 != 0) goto -0x18 <strstr+0xE : 443c >
    4454:    f7 91             	goto -0x1e <strstr+0xA : 4438 >
    4456:    54 04             	{pc, r4} = [sp++]


nvram_ota_tag:
    4458:	 4f 54 41 85 66 3a 7b 63         OTA.f:{c


nvram_uart_tag:
    4460:	 75 61 72 74 d9 c4 05 a8         uart....


nvram_usb_tag:
    4468:	 75 73 62 ed 63 81 67 ef         usb.c.g.


nvram_boot_state:
    4470:    74 04             	[--sp] = {rets, r4}			  ## boot_nvram.c:51:0
    4472:    c4 ff 00 08 18 00 	r4 = 0x180800 <nvram_list : 180800 >			  ## boot_nvram.c:51:0
    4478:    c1 ff 68 44 00 00 	r1 = 0x4468 <nvram_usb_tag : 4468 >			  ## boot_nvram.c:52:9
    447e:    42 28             	r2 = 0x8			  ## boot_nvram.c:52:9
    4480:    40 16             	r0 = r4			  ## boot_nvram.c:52:9
    4482:    80 ff 7c fc ff ff 	call -0x384 <memcmp : 4104 >			  ## boot_nvram.c:52:9
    4488:    00 56             	if (r0 == 0) goto 0x2c <nvram_boot_state+0x46 : 44b6 >			  ## boot_nvram.c:52:9
    448a:    c1 ff 60 44 00 00 	r1 = 0x4460 <nvram_uart_tag : 4460 >			  ## boot_nvram.c:55:16
    4490:    42 28             	r2 = 0x8			  ## boot_nvram.c:55:16
    4492:    40 16             	r0 = r4			  ## boot_nvram.c:55:16
    4494:    80 ff 6a fc ff ff 	call -0x396 <memcmp : 4104 >			  ## boot_nvram.c:55:16
    449a:    00 4f             	if (r0 == 0) goto 0x1e <nvram_boot_state+0x4A : 44ba >			  ## boot_nvram.c:55:16
    449c:    c1 ff 58 44 00 00 	r1 = 0x4458 <nvram_ota_tag : 4458 >			  ## boot_nvram.c:58:16
    44a2:    42 28             	r2 = 0x8			  ## boot_nvram.c:58:16
    44a4:    40 16             	r0 = r4			  ## boot_nvram.c:58:16
    44a6:    80 ff 58 fc ff ff 	call -0x3a8 <memcmp : 4104 >			  ## boot_nvram.c:58:16
    44ac:    01 16             	r1 = r0			  ## boot_nvram.c:58:16
    44ae:    40 20             	r0 = 0x0			  ## boot_nvram.c:58:16
    44b0:    81 49             	if (r1 != 0) goto 0x12 <nvram_boot_state+0x54 : 44c4 >			  ## boot_nvram.c:58:16
    44b2:    40 26             	r0 = 0x6
    44b4:    04 83             	goto 0x6 <nvram_boot_state+0x4C : 44bc >
    44b6:    40 22             	r0 = 0x2
    44b8:    04 81             	goto 0x2 <nvram_boot_state+0x4C : 44bc >
    44ba:    40 23             	r0 = 0x3
    44bc:    42 20             	r2 = 0x0			  ## boot_nvram.c:48:5
    44be:    43 20             	r3 = 0x0			  ## boot_nvram.c:48:5
    44c0:    50 ec 41 20       	d[r4+0x0] = r3_r2			  ## boot_nvram.c:48:5
    44c4:    54 04             	{pc, r4} = [sp++]			  ## boot_nvram.c:63:1


nvram_set_boot_state:
    44c6:    00 f8 0b 04       	if (r0 == 0x2) goto 0x16 <nvram_set_boot_state+0x1A : 44e0 >			  ## boot_nvram.c:65:0
    44ca:    00 f8 10 0c       	if (r0 == 0x6) goto 0x20 <nvram_set_boot_state+0x28 : 44ee >			  ## boot_nvram.c:65:0
    44ce:    80 f8 19 06       	if (r0 != 0x3) goto 0x32 <nvram_set_boot_state+0x3E : 4504 >			  ## boot_nvram.c:65:0
    44d2:    c0 ff 75 61 72 74 	r0 = 0x74726175 <RAM_LIMIT_H+0x74586174 : 74726174 >			  ## boot_nvram.c:65:0
    44d8:    c1 ff d9 c4 05 a8 	r1 = 0xa805c4d9 <RAM_LIMIT_H+0xA7EBC4D8 : a805c4d8 >			  ## boot_nvram.c:65:0
    44de:    04 8d             	goto 0x1a <nvram_set_boot_state+0x34 : 44fa >			  ## boot_nvram.c:65:0
    44e0:    c0 ff 75 73 62 ed 	r0 = 0xed627375 <RAM_LIMIT_H+0xED487374 : ed627374 >			  ## boot_nvram.c:65:0
    44e6:    c1 ff 63 81 67 ef 	r1 = 0xef678163 <RAM_LIMIT_H+0xEF4D8162 : ef678162 >			  ## boot_nvram.c:65:0
    44ec:    04 86             	goto 0xc <nvram_set_boot_state+0x34 : 44fa >			  ## boot_nvram.c:65:0
    44ee:    c0 ff 4f 54 41 85 	r0 = 0x8541544f <RAM_LIMIT_H+0x8527544E : 8541544e >			  ## boot_nvram.c:65:0
    44f4:    c1 ff 66 3a 7b 63 	r1 = 0x637b3a66 <RAM_LIMIT_H+0x63613A66 : 637b3a66 >			  ## boot_nvram.c:65:0
    44fa:    c2 ff 00 08 18 00 	r2 = 0x180800 <nvram_list : 180800 >			  ## boot_nvram.c:65:0
    4500:    50 ec 21 00       	d[r2+0x0] = r1_r0			  ## boot_nvram.c:65:0
    4504:    80 00             	rts			  ## boot_nvram.c:79:1


chip_reset:
    4506:    c0 ff 80 c2 f2 00 	r0 = 0xf2c280 <RAM_LIMIT_H+0xD8C280 : f2c280 >			  ## main.c:66:0
    450c:    00 ef 10 00       	[r0+0x0] |= 0x10			  ## main.c:67:15
    4510:    f7 9f             	goto -0x2 <chip_reset+0xA : 4510 >			  ## main.c:68:5


os_code_begin:
    4512:    10 04             	[--sp] = rets			  ## mask_export.c:66:0
    4514:    c0 ff 68 fd 19 00 	r0 = 0x19fd68 <the_debug_isr_stack_c1 : 19fd68 >			  ## mask_export.c:67:5
    451a:    c2 ff 3c 00 00 00 	r2 = 0x3c <os_bss_size : 3c >			  ## mask_export.c:67:5
    4520:    41 20             	r1 = 0x0			  ## mask_export.c:67:5
    4522:    80 ff fe fc ff ff 	call -0x302 <memset : 4226 >			  ## mask_export.c:67:5
    4528:    00 04             	pc = [sp++]			  ## mask_export.c:68:1


local_irq_disable:
    452a:    60 00             	cli			  ## mask_export.c:84:0
    452c:    64 e0 00 06       	r0 = cnum			  ## cpu.h:59:5
    4530:    00 a2             	r0 = r0 << 0x2			  ## mask_export.c:73:5
    4532:    c1 ff 68 fd 19 00 	r1 = 0x19fd68 <the_debug_isr_stack_c1 : 19fd68 >			  ## mask_export.c:73:5
    4538:    10 18             	r0 += r1			  ## mask_export.c:73:5
    453a:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## mask_export.c:73:35
    453e:    c0 ff 70 fd 19 00 	r0 = 0x19fd70 <cpu_lock_cnt : 19fd70 >			  ## mask_export.c:87:9
    4544:    64 e0 00 16       	r1 = cnum			  ## cpu.h:59:5
    4548:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## mask_export.c:87:39
    454c:    2b 81             	r3 = r2 + 0x1			  ## mask_export.c:87:39
    454e:    d8 ec 0b 31       	[r0+r1<<2] = r3			  ## mask_export.c:87:39
    4552:    82 41             	if (r2 != 0) goto 0x2 <local_irq_disable+0x2C : 4556 >			  ## mask_export.c:87:39
    4554:    41 00             	lockset			  ## mask_export.c:88:9
    4556:    20 00             	csync			  ## mask_export.c:91:5
    4558:    80 00             	rts			  ## mask_export.c:92:1


local_irq_enable:
    455a:    20 00             	csync			  ## mask_export.c:95:0
    455c:    c0 ff 70 fd 19 00 	r0 = 0x19fd70 <cpu_lock_cnt : 19fd70 >			  ## mask_export.c:98:11
    4562:    64 e0 00 16       	r1 = cnum			  ## cpu.h:59:5
    4566:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## mask_export.c:98:9
    456a:    fa 3f             	r2 += -0x1			  ## mask_export.c:98:9
    456c:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## mask_export.c:98:9
    4570:    82 41             	if (r2 != 0) goto 0x2 <local_irq_enable+0x1A : 4574 >			  ## mask_export.c:98:9
    4572:    40 00             	lockclr			  ## mask_export.c:99:9
    4574:    64 e0 00 06       	r0 = cnum			  ## cpu.h:59:5
    4578:    c1 ff 68 fd 19 00 	r1 = 0x19fd68 <the_debug_isr_stack_c1 : 19fd68 >			  ## mask_export.c:78:11
    457e:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## mask_export.c:78:9
    4582:    fa 3f             	r2 += -0x1			  ## mask_export.c:78:9
    4584:    d8 ec 1b 20       	[r1+r0<<2] = r2			  ## mask_export.c:78:9
    4588:    32 e8 00 00       	if (r2 == 0x0) {			  ## mask_export.c:78:9
    458c:    61 00             		sti
                               	}			  ## mask_export.c:79:9
    458e:    80 00             	rts			  ## mask_export.c:103:1


mask_init:
    4590:    75 04             	[--sp] = {rets, r5, r4}			  ## mask_export.c:58:0
    4592:    14 16             	r4 = r1			  ## mask_export.c:58:0
    4594:    05 16             	r5 = r0			  ## mask_export.c:58:0
    4596:    c0 ff 68 fd 19 00 	r0 = 0x19fd68 <the_debug_isr_stack_c1 : 19fd68 >			  ## mask_export.c:67:5
    459c:    c2 ff 3c 00 00 00 	r2 = 0x3c <os_bss_size : 3c >			  ## mask_export.c:67:5
    45a2:    41 20             	r1 = 0x0			  ## mask_export.c:67:5
    45a4:    80 ff 7c fc ff ff 	call -0x384 <memset : 4226 >			  ## mask_export.c:67:5
    45aa:    c0 ff 7c fd 19 00 	r0 = 0x19fd7c <mask_putchar : 19fd7c >			  ## mask_export.c:61:18
    45b0:    84 60             	[r0+0x0] = r4			  ## mask_export.c:61:18
    45b2:    c0 ff 80 fd 19 00 	r0 = 0x19fd80 <exception_irq_hook : 19fd80 >			  ## mask_export.c:62:24
    45b8:    85 60             	[r0+0x0] = r5			  ## mask_export.c:62:24
    45ba:    55 04             	{pc, r5, r4} = [sp++]			  ## mask_export.c:63:1


sMassDescriptor:
    45bc:	 09 04 00 00 02 08 06 50         .......P
    45c4:	 00 07 05 81 02 40 00 01         .....@..
    45cc:	 07 05 01 02 40 00 01            ....@..


SCSIInquiryData:
    45d3:	 00 80 02 02 20 00 00 00         .... ...
    45db:	 42 52 32 38 20 20 20 20         BR28    
    45e3:	 55 42 4f 4f 54 31 2e 30         UBOOT1.0
    45eb:	 30 20 20 20 20 20 20 20         0       
    45f3:	 31 2e 30 30                     1.00


scsi_mode_sense:
    45f7:	 03 00 00 00                     ....


sDeviceDescriptor:
    45fb:	 12 01 10 01 00 00 00 40         .......@
    4603:	 4a 4c 42 34 00 03 01 02         JLB4....
    460b:	 00 01                           ..


MANUFACTURE_STR:
    460d:	 1c 03 42 00 52 00 32 00         ..B.R.2.
    4615:	 38 00 55 00 42 00 4f 00         8.U.B.O.
    461d:	 4f 00 54 00 31 00 2e 00         O.T.1...
    4625:	 30 00 30 00                     0.0.


sConfigDescriptor:
    4629:	 09 02 20 00 01 01 00 80         .. .....
    4631:	 c8                              .


usb_clr_intr_rxe:
    4632:    c1 ff 24 4a fd 00 	r1 = 0xfd4a24 <RAM_LIMIT_H+0xE34A24 : fd4a24 >			  ## usb_phy.c:168:0
    4638:    12 60             	r2 = [r1+0x0] 			  ## usb_phy.c:170:33
    463a:    13 61             	r3 = [r1+0x4] 			  ## usb_phy.c:170:58
    463c:    b0 e8 ff 9f       	if (r0 != -0x1) {			  ## usb_phy.c:170:58
    4640:    33 a8             		r3 = r3 << 0x8			  ## usb_phy.c:170:68
    4642:    32 19             		r2 |= r3			  ## usb_phy.c:170:43
    4644:    94 e1 23 00       		r0 = r2 & ~(1 << r0)
                               	} else {			  ## usb_phy.c:174:18
    4648:    40 20             		r0 = 0x0
                               	}
    464a:    02 17             	r2 = r0.b0 (u)			  ## usb_phy.c:176:37
    464c:    92 60             	[r1+0x0] = r2			  ## usb_phy.c:176:26
    464e:    80 a8             	r0 = r0 >> 0x8			  ## usb_phy.c:177:37
    4650:    90 61             	[r1+0x4] = r0			  ## usb_phy.c:177:26
    4652:    80 00             	rts			  ## usb_phy.c:179:1


usb_clr_intr_txe:
    4654:    c1 ff 1c 4a fd 00 	r1 = 0xfd4a1c <RAM_LIMIT_H+0xE34A1C : fd4a1c >			  ## usb_phy.c:146:0
    465a:    12 60             	r2 = [r1+0x0] 			  ## usb_phy.c:148:33
    465c:    13 61             	r3 = [r1+0x4] 			  ## usb_phy.c:148:58
    465e:    b0 e8 ff 9f       	if (r0 != -0x1) {			  ## usb_phy.c:148:58
    4662:    33 a8             		r3 = r3 << 0x8			  ## usb_phy.c:148:68
    4664:    32 19             		r2 |= r3			  ## usb_phy.c:148:43
    4666:    94 e1 23 00       		r0 = r2 & ~(1 << r0)
                               	} else {			  ## usb_phy.c:152:18
    466a:    40 20             		r0 = 0x0
                               	}
    466c:    02 17             	r2 = r0.b0 (u)			  ## usb_phy.c:154:37
    466e:    92 60             	[r1+0x0] = r2			  ## usb_phy.c:154:26
    4670:    80 a8             	r0 = r0 >> 0x8			  ## usb_phy.c:155:37
    4672:    90 61             	[r1+0x4] = r0			  ## usb_phy.c:155:26
    4674:    80 00             	rts			  ## usb_phy.c:157:1


usb_read_rxcsr:
    4676:    c0 ff 50 4b fd 00 	r0 = 0xfd4b50 <RAM_LIMIT_H+0xE34B50 : fd4b50 >			  ## usb_phy.c:215:0
    467c:    01 60             	r1 = [r0+0x0] 			  ## usb_phy.c:220:29
    467e:    11 d7             	r1 = r1.b0 (u)  #			  ## usb_phy.c:220:37
    4680:    00 61             		 r0 = [r0+0x4] 			  ## usb_phy.c:220:62
    4682:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:220:71
    4684:    80 17             	r0 = r0.l (u)			  ## usb_phy.c:220:71
    4686:    10 19             	r0 |= r1			  ## usb_phy.c:220:45
    4688:    80 00             	rts			  ## usb_phy.c:222:5


usb_g_bulk_read:
    468a:    7b 04             	[--sp] = {rets, r11-r4}			  ## usb_phy.c:405:0
    468c:    14 16             	r4 = r1			  ## usb_phy.c:405:0
    468e:    07 16             	r7 = r0			  ## usb_phy.c:405:0
    4690:    14 5a             	if (r4 == 0) goto 0x74 <usb_g_bulk_read+0x7C : 4706 >			  ## usb_phy.c:405:0
    4692:    c0 ff 54 14 18 00 	r0 = 0x181454 <ep_raddr : 181454 >			  ## usb_phy.c:405:0
    4698:    d0 ec 00 80       	r8 = [r0+0x0]			  ## usb_phy.c:405:0
    469c:    4a e0 01 00       	r10 = 0x1 <mem_code_size : 0 >			  ## usb_phy.c:405:0
    46a0:    32 e8 00 00       	if (r2 == 0x0) {			  ## usb_phy.c:405:0
    46a4:    2a 16             		r10 = r2
                               	}			  ## usb_phy.c:405:0
    46a6:    c1 14             	r9 = 0			  ## usb_phy.c:405:0
    46a8:    cb ff 50 4b fd 00 	r11 = 0xfd4b50 <RAM_LIMIT_H+0xE34B50 : fd4b50 >			  ## usb_phy.c:405:0
    46ae:    d0 ec b0 00       	r0 = [r11+0x0]			  ## usb_phy.c:309:18
    46b2:    50 e8 24 00       	if ((r0 & 0x1) == 0) goto 0x48 <usb_g_bulk_read+0x74 : 46fe >			  ## usb_phy.c:309:18
    46b6:    d0 ec b8 00       	r0 = [r11+0x8]			  ## usb_phy.c:310:28
    46ba:    d0 ec bc 10       	r1 = [r11+0xc]			  ## usb_phy.c:310:50
    46be:    11 a8             	r1 = r1 << 0x8			  ## usb_phy.c:310:60
    46c0:    90 e1 10 50       	r5 = r1 | r0			  ## usb_phy.c:310:38
    46c4:    05 5c             	if (r5 == 0) goto 0x38 <usb_g_bulk_read+0x74 : 46fe >
    46c6:    61 97             	call -0x52 <usb_read_rxcsr : 4676 >			  ## usb_phy.c:330:21
    46c8:    06 16             	r6 = r0			  ## usb_phy.c:330:21
    46ca:    b7 e8 00 c0       	if (r7 != 0x0) {
    46ce:    70 16             		r0 = r7			  ## usb_phy.c:344:13
    46d0:    81 16             		r1 = r8			  ## usb_phy.c:344:13
    46d2:    52 16             		r2 = r5			  ## usb_phy.c:344:13
    46d4:    80 ff 62 fa ff ff 		call -0x59e
                               	} <memmove : 413c >			  ## usb_phy.c:344:13
    46da:    60 e1 8b 60       	r0 = r6 & 0x8B			  ## usb_phy.c:210:28
    46de:    30 24             	r0 |= 0x10			  ## usb_phy.c:210:28
    46e0:    d0 ec b1 00       	[r11+0x0] = r0			  ## usb_phy.c:210:20
    46e4:    e0 a9             	r0 = r6 >> 0x9			  ## usb_phy.c:211:28
    46e6:    00 a1             	r0 = r0 << 0x1			  ## usb_phy.c:211:28
    46e8:    59 18             	r9 += r5			  ## usb_phy.c:348:14
    46ea:    4c 1f             	r4 = r4 - r5			  ## usb_phy.c:347:13
    46ec:    79 1d             	r1 = r7 + r5			  ## usb_phy.c:350:17
    46ee:    d0 ec b5 00       	[r11+0x4] = r0			  ## usb_phy.c:211:20
    46f2:    37 e8 00 00       	if (r7 == 0x0) {			  ## usb_phy.c:211:20
    46f6:    71 16             		r1 = r7
                               	}			  ## usb_phy.c:349:13
    46f8:    40 21             	r0 = 0x1
    46fa:    17 16             	r7 = r1
    46fc:    04 81             	goto 0x2 <usb_g_bulk_read+0x76 : 4700 >
    46fe:    a0 16             	r0 = r10
    4700:    04 43             	if (r4 == 0) goto 0x6 <usb_g_bulk_read+0x7E : 4708 >
    4702:    e0 55             	if (r0 != 0) goto -0x56 <usb_g_bulk_read+0x24 : 46ae >
    4704:    04 81             	goto 0x2 <usb_g_bulk_read+0x7E : 4708 >
    4706:    c1 14             	r9 = 0
    4708:    90 16             	r0 = r9			  ## usb_phy.c:406:5
    470a:    5b 04             	{pc, r11-r4} = [sp++]			  ## usb_phy.c:406:5


rbc_get_length:
    470c:    c0 ff f8 13 18 00 	r0 = 0x1813f8 <cbw : 1813f8 >			  ## msd_upgrade.c:51:0
    4712:    50 ee 05 11       	r1 = b[r0+0x15] (u)			  ## msd_upgrade.c:63:12
    4716:    50 ee 06 01       	r0 = b[r0+0x16] (u)			  ## msd_upgrade.c:63:12
    471a:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## msd_upgrade.c:63:12
    471e:    80 00             	rts			  ## msd_upgrade.c:63:5


msd_usb2mcu:
    4720:    10 04             	[--sp] = rets			  ## msd.c:138:0
    4722:    42 21             	r2 = 0x1			  ## msd.c:139:12
    4724:    51 92             	call -0x9c <usb_g_bulk_read : 468a >			  ## msd.c:139:12
    4726:    00 04             	pc = [sp++]			  ## msd.c:139:5


usb_read_txcsr:
    4728:    c0 ff 44 4b fd 00 	r0 = 0xfd4b44 <RAM_LIMIT_H+0xE34B44 : fd4b44 >			  ## usb_phy.c:196:0
    472e:    01 60             	r1 = [r0+0x0] 			  ## usb_phy.c:201:22
    4730:    00 61             	r0 = [r0+0x4] 			  ## usb_phy.c:201:42
    4732:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:201:50
    4734:    10 19             	r0 |= r1			  ## usb_phy.c:201:30
    4736:    80 00             	rts			  ## usb_phy.c:203:5


msd_mcu2usb:
    4738:    7a 04             	[--sp] = {rets, r10-r4}			  ## msd.c:142:0
    473a:    c2 ff 44 14 18 00 	r2 = 0x181444 <ep_taddr : 181444 >			  ## msd.c:142:0
    4740:    d0 ec 20 a0       	r10 = [r2+0x0]			  ## msd.c:142:0
    4744:    18 16             	r8 = r1			  ## msd.c:142:0
    4746:    06 16             	r6 = r0			  ## msd.c:142:0
    4748:    c4 ff 44 4b fd 00 	r4 = 0xfd4b44 <RAM_LIMIT_H+0xE34B44 : fd4b44 >			  ## msd.c:142:0
    474e:    c9 ff 0c 18 fd 00 	r9 = 0xfd180c <RAM_LIMIT_H+0xE3180C : fd180c >			  ## msd.c:142:0
    4754:    85 16             	r5 = r8			  ## msd.c:142:0
    4756:    04 84             	goto 0x8 <msd_mcu2usb+0x28 : 4760 >			  ## msd.c:142:0
    4758:    81 19             	r1 &= r0			  ## usb_phy.c:191:28
    475a:    c1 60             	[r4+0x0] = r1			  ## usb_phy.c:191:20
    475c:    80 a8             	r0 = r0 >> 0x8			  ## usb_phy.c:192:28
    475e:    c0 61             	[r4+0x4] = r0			  ## usb_phy.c:192:20
    4760:    71 83             	call -0x3a <usb_read_txcsr : 4728 >			  ## usb_phy.c:373:21
    4762:    50 e8 08 72       	if ((r0 & 0x4000) != 0) goto 0x10 <msd_mcu2usb+0x3E : 4776 >
    4766:    79 3a             	r1 = 0xfa
    4768:    50 e8 f6 13       	if ((r0 & 0x4) != 0) goto -0x14 <msd_mcu2usb+0x20 : 4758 >
    476c:    79 3c             	r1 = 0xfc
    476e:    50 e8 f3 0b       	if ((r0 & 0x2) != 0) goto -0x1a <msd_mcu2usb+0x20 : 4758 >
    4772:    50 e8 f5 03       	if ((r0 & 0x1) != 0) goto -0x16 <msd_mcu2usb+0x28 : 4760 >
    4776:    57 16             	r7 = r5			  ## usb_phy.c:392:24
    4778:    35 e9 40 00       	if (r5 >= 0x40) {			  ## usb_phy.c:392:24
    477c:    57 20             		r7 = 0x40
                               	}			  ## usb_phy.c:392:24
    477e:    b6 e8 00 c0       	if (r6 != 0x0) {
    4782:    a0 16             		r0 = r10			  ## usb_phy.c:394:13
    4784:    61 16             		r1 = r6			  ## usb_phy.c:394:13
    4786:    72 16             		r2 = r7			  ## usb_phy.c:394:13
    4788:    80 ff ae f9 ff ff 		call -0x652
                               	} <memmove : 413c >			  ## usb_phy.c:394:13
    478e:    d0 ec 91 70       	[r9+0x0] = r7			  ## usb_phy.c:360:11
    4792:    61 8a             	call -0x6c <usb_read_txcsr : 4728 >			  ## usb_phy.c:361:17
    4794:    61 e1 fe 00       	r1 = r0 & 0xFE			  ## usb_phy.c:191:28
    4798:    31 20             	r1 |= 0x1			  ## usb_phy.c:191:28
    479a:    c1 60             	[r4+0x0] = r1			  ## usb_phy.c:191:20
    479c:    81 a8             	r1 = r0 >> 0x8			  ## usb_phy.c:192:28
    479e:    dd 1f             	r5 = r5 - r7			  ## usb_phy.c:397:13
    47a0:    e8 1d             	r0 = r6 + r7			  ## usb_phy.c:399:17
    47a2:    c1 61             	[r4+0x4] = r1			  ## usb_phy.c:192:20
    47a4:    36 e8 00 00       	if (r6 == 0x0) {			  ## usb_phy.c:192:20
    47a8:    60 16             		r0 = r6
                               	}			  ## usb_phy.c:398:13
    47aa:    06 16             	r6 = r0
    47ac:    e5 59             	if (r5 != 0) goto -0x4e <msd_mcu2usb+0x28 : 4760 >
    47ae:    80 16             	r0 = r8			  ## msd.c:143:5
    47b0:    5a 04             	{pc, r10-r4} = [sp++]			  ## msd.c:143:5


stall_inep:
    47b2:    10 04             	[--sp] = rets			  ## msd.c:177:0
    47b4:    c0 ff 44 4b fd 00 	r0 = 0xfd4b44 <RAM_LIMIT_H+0xE34B44 : fd4b44 >			  ## msd.c:177:0
    47ba:    40 ea 10 00       	[r0+0x0] = 0x10			  ## usb_phy.c:191:20
    47be:    41 ea 00 00       	[r0+0x4] = 0x0			  ## usb_phy.c:192:20
    47c2:    51 92             	call -0x9c <usb_read_txcsr : 4728 >			  ## msd.c:186:14
    47c4:    50 e8 fd 23       	if ((r0 & 0x10) != 0) goto -0x6 <stall_inep+0x10 : 47c2 >			  ## msd.c:186:13
    47c8:    00 04             	pc = [sp++]			  ## msd.c:190:1


unknow:
    47ca:    10 04             	[--sp] = rets			  ## msd.c:205:0
    47cc:    00 4c             	if (r0 == 0) goto 0x18 <unknow+0x1C : 47e6 >			  ## msd.c:206:9
    47ce:    c0 ff 50 4b fd 00 	r0 = 0xfd4b50 <RAM_LIMIT_H+0xE34B50 : fd4b50 >
    47d4:    40 ea 20 00       	[r0+0x0] = 0x20			  ## usb_phy.c:210:20
    47d8:    41 ea 00 00       	[r0+0x4] = 0x0			  ## usb_phy.c:211:20
    47dc:    bf ea 4b ff       	call -0x16a <usb_read_rxcsr : 4676 >			  ## msd.c:199:14
    47e0:    50 e8 fc 2b       	if ((r0 & 0x20) != 0) goto -0x8 <unknow+0x12 : 47dc >			  ## msd.c:199:14
    47e4:    04 81             	goto 0x2 <unknow+0x1E : 47e8 >			  ## msd.c:199:14
    47e6:    71 85             	call -0x36 <stall_inep : 47b2 >			  ## msd.c:209:9
    47e8:    c0 ff 17 14 18 00 	r0 = 0x181417 <cbw+0x1E : 181416 >			  ## msd.c:213:20
    47ee:    41 20             	r1 = 0x0			  ## msd.c:213:20
    47f0:    89 4b             	b[r0+0xb] = r1			  ## msd.c:212:25
    47f2:    89 4a             	b[r0+0xa] = r1			  ## msd.c:212:25
    47f4:    89 49             	b[r0+0x9] = r1			  ## msd.c:212:25
    47f6:    89 48             	b[r0+0x8] = r1			  ## msd.c:212:25
    47f8:    41 21             	r1 = 0x1			  ## msd.c:212:25
    47fa:    89 4c             	b[r0+0xc] = r1			  ## msd.c:213:20
    47fc:    c0 ff 24 14 18 00 	r0 = 0x181424 <msd_status.0 : 181424 >			  ## msd.c:214:23
    4802:    41 22             	r1 = 0x2			  ## msd.c:214:23
    4804:    89 40             	b[r0+0x0] = r1			  ## msd.c:214:23
    4806:    00 04             	pc = [sp++]			  ## msd.c:215:1


usb_slave_mode:
    4808:    e2 94             	sp += -0x30			  ## usb_device.c:15:0
    480a:    c0 ff b0 14 18 00 	r0 = 0x1814b0 <usb_interrupt_rx : 1814b0 >			  ## usb_onchip.c:91:5
    4810:    47 20             	r7 = 0x0			  ## usb_onchip.c:91:5
    4812:    00 86             	rep 0x2 0x7 {			  ## usb_onchip.c:91:5
    4814:    87 05             		[r0++=0x4] = r7
                               	}			  ## usb_onchip.c:91:5
    4816:    c0 ff 94 14 18 00 	r0 = 0x181494 <usb_interrupt_tx : 181494 >			  ## usb_onchip.c:92:5
    481c:    00 86             	rep 0x2 0x7 {			  ## usb_onchip.c:92:5
    481e:    87 05             		[r0++=0x4] = r7
                               	}			  ## usb_onchip.c:92:5
    4820:    c1 ff 80 4d 00 00 	r1 = 0x4d80 <usb_device_isr : 4d80 >			  ## usb_onchip.c:95:5
    4826:    40 3d             	r0 = 0x1d			  ## usb_onchip.c:95:5
    4828:    42 21             	r2 = 0x1			  ## usb_onchip.c:95:5
    482a:    80 ff 76 5a 00 00 	call 0x5a76 <HWI_Install : a2a6 >			  ## usb_onchip.c:95:5
    4830:    c0 ff 00 60 fd 00 	r0 = 0xfd6000 <RAM_LIMIT_H+0xE36000 : fd6000 >			  ## usb_onchip.c:95:5
    4836:    c0 ef 80 0d       	[r0+0x0] &= 0xFFFFEFFF			  ## usb_onchip.c:97:21
    483a:    00 ef 00 0d       	[r0+0x0] |= 0x2000			  ## usb_onchip.c:98:21
    483e:    41 e0 ca bf       	r1 = -0x4036 <RAM_LIMIT_H+0xFFFFFFFFFFE5BFCA : ffffffffffffbfca >			  ## usb_onchip.c:99:18
    4842:    c4 ff 00 18 fd 00 	r4 = 0xfd1800 <RAM_LIMIT_H+0xE31800 : fd1800 >			  ## usb_onchip.c:99:18
    4848:    64 e8 02 41       	[r4+0x0] &= r1			  ## usb_onchip.c:99:18
    484c:    c7 61             	[r4+0x4] = r7			  ## usb_onchip.c:100:18
    484e:    00 ef 01 40       	[r4+0x0] |= 0x1			  ## usb_onchip.c:102:18
    4852:    c0 ef 40 00       	[r0+0x0] &= 0xFFFFFFBF			  ## usb_onchip.c:104:5
    4856:    00 ef 80 00       	[r0+0x0] |= 0x80			  ## usb_onchip.c:105:5
    485a:    00 ef 10 00       	[r0+0x0] |= 0x10			  ## usb_onchip.c:107:5
    485e:    c0 ef 20 00       	[r0+0x0] &= 0xFFFFFFDF			  ## usb_onchip.c:108:5
    4862:    00 ef 34 40       	[r4+0x0] |= 0x34			  ## usb_onchip.c:110:18
    4866:    40 24             	r0 = 0x4			  ## usb_phy.c:133:27
    4868:    c5 ff 04 4a fd 00 	r5 = 0xfd4a04 <RAM_LIMIT_H+0xE34A04 : fd4a04 >
    486e:    d0 6a             	[r5+0x28] = r0			  ## usb_phy.c:133:27
    4870:    10 3f             	r0 = -0x1			  ## usb_onchip.c:113:5
    4872:    bf ea de fe       	call -0x244 <usb_clr_intr_rxe : 4632 >			  ## usb_onchip.c:113:5
    4876:    10 3f             	r0 = -0x1			  ## usb_onchip.c:114:5
    4878:    bf ea ec fe       	call -0x228 <usb_clr_intr_txe : 4654 >			  ## usb_onchip.c:114:5
    487c:    40 ea 40 50       	[r5+0x0] = 0x40			  ## usb_phy.c:36:23
    4880:    00 ef 00 4e       	[r4+0x0] |= 0x800			  ## usb_onchip.c:123:18
    4884:    c0 ff 40 10 18 00 	r0 = 0x181040 <ep0_dma_buffer : 181040 >			  ## usb_phy.c:289:25
    488a:    c0 67             	[r4+0x1c] = r0			  ## usb_phy.c:289:25
    488c:    c1 ff 40 14 18 00 	r1 = 0x181440 <ep0_addr : 181440 >			  ## usb_phy.c:290:18
    4892:    90 60             	[r1+0x0] = r0			  ## usb_phy.c:290:18
    4894:    c0 ff 80 10 18 00 	r0 = 0x181080 <ep1_dma_buffer : 181080 >
    489a:    c0 68             	[r4+0x20] = r0			  ## usb_phy.c:276:12
    489c:    c1 ff 44 14 18 00 	r1 = 0x181444 <ep_taddr : 181444 >			  ## usb_phy.c:277:22
    48a2:    90 60             	[r1+0x0] = r0			  ## usb_phy.c:277:22
    48a4:    d0 20             	r0 += 0x40			  ## usb_phy.c:277:22
    48a6:    4a f0 53 00       	r10 = 0x53  # <os_bss_size+0x16 : 52 >
    48aa:    c0 69             		 [r4+0x24] = r0			  ## usb_phy.c:295:12
    48ac:    c1 ff 54 14 18 00 	r1 = 0x181454 <ep_raddr : 181454 >			  ## usb_phy.c:296:22
    48b2:    4e f0 42 00       	r14 = 0x42  # <os_bss_size+0x6 : 42 >			  ## usb_phy.c:296:22
    48b6:    90 60             		 [r1+0x0] = r0			  ## usb_phy.c:296:22
    48b8:    a8 80             	r0 = sp + 32			  ## usb_phy.c:296:22
    48ba:    4b f0 55 00       	r11 = 0x55  # <os_bss_size+0x18 : 54 >
    48be:    80 22             		 [sp+8] = r0
    48c0:    88 8e             	r0 = sp + 14
    48c2:    80 21             	[sp+4] = r0
    48c4:    c0 21             	r0 += 0x1
    48c6:    80 20             	[sp] = r0
    48c8:    c4 ff f8 13 18 00 	r4 = 0x1813f8 <cbw : 1813f8 >
    48ce:    c9 ff 55 53 42 43 	r9 = 0x43425355 <RAM_LIMIT_H+0x43285354 : 43425354 >
    48d4:    c5 ff 17 14 18 00 	r5 = 0x181417 <cbw+0x1E : 181416 >
    48da:    c8 ff 28 14 18 00 	r8 = 0x181428 <hook_usb_scsi : 181428 >
    48e0:    cd ff 24 14 18 00 	r13 = 0x181424 <msd_status.0 : 181424 >
    48e6:    cc ff 25 14 18 00 	r12 = 0x181425 <msd_status.0 : 181424 >
    48ec:    cf ff 26 14 18 00 	r15 = 0x181426 <msd_status.2 : 181426 >
    48f2:    80 ff 52 60 00 00 	call 0x6052 <wdt_clr : a94a >			  ## usb_device.c:23:9
    48f8:    40 d6             	r0 = r4  #			  ## msd.c:148:18
    48fa:    cf 43             		 b[r4+0x3] = r7			  ## msd.c:147:23
    48fc:    cf 42             	b[r4+0x2] = r7			  ## msd.c:147:23
    48fe:    cf 41             	b[r4+0x1] = r7			  ## msd.c:147:23
    4900:    cf 40             	b[r4+0x0] = r7			  ## msd.c:147:23
    4902:    41 3f             	r1 = 0x1f			  ## msd.c:148:18
    4904:    42 20             	r2 = 0x0			  ## msd.c:148:18
    4906:    bf ea c0 fe       	call -0x280 <usb_g_bulk_read : 468a >			  ## msd.c:148:18
    490a:    4a 43             	r2 = b[r4+0x3] (u)			  ## msd.c:152:13
    490c:    4b 42             	r3 = b[r4+0x2] (u)			  ## msd.c:152:13
    490e:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## msd.c:152:13
    4912:    4e 41             		 r6 = b[r4+0x1] (u)			  ## msd.c:152:13
    4914:    49 40             	r1 = b[r4+0x0] (u)			  ## msd.c:152:13
    4916:    a1 e1 20 64       	r1 <= insert(r6, p:0x8, l:0x8)			  ## msd.c:152:13
    491a:    a1 e1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)			  ## msd.c:152:13
    491e:    70 49             	if (r0 == 0) goto -0x2e <usb_slave_mode+0xEA : 48f2 >			  ## msd.c:149:9
    4920:    89 e8 e7 11       	if (r1 != r9) goto -0x32 <usb_slave_mode+0xEA : 48f2 >
    4924:    58 84             	r0 = r5 + 0x4
    4926:    49 84             	r1 = r4 + 0x4			  ## msd.c:158:23
    4928:    10 83             	rep 0x4 0x4 {			  ## msd.c:158:17
    492a:    12 07             		r2 = b[r1++=0x1] (u)			  ## msd.c:158:17
    492c:    82 07             		b[r0++=0x1] = r2
                               	}			  ## msd.c:158:17
    492e:    58 88             	r0 = r5 + 0x8			  ## msd.c:158:17
    4930:    49 88             	r1 = r4 + 0x8			  ## msd.c:159:31
    4932:    10 83             	rep 0x4 0x4 {			  ## msd.c:159:25
    4934:    12 07             		r2 = b[r1++=0x1] (u)			  ## msd.c:159:25
    4936:    82 07             		b[r0++=0x1] = r2
                               	}			  ## msd.c:159:25
    4938:    d0 ec 80 20       	r2 = [r8+0x0]			  ## msd_upgrade.c:135:9
    493c:    02 45             	if (r2 == 0) goto 0xa <usb_slave_mode+0x140 : 4948 >			  ## msd_upgrade.c:135:9
    493e:    a9 80             	r1 = sp + 32
    4940:    40 16             	r0 = r4			  ## msd_upgrade.c:135:26
    4942:    c2 00             	call r2			  ## msd_upgrade.c:135:26
    4944:    80 f8 c4 00       	if (r0 != 0x0) goto 0x188 <usb_slave_mode+0x2C8 : 4ad0 >			  ## msd_upgrade.c:135:26
    4948:    48 4f             	r0 = b[r4+0xf] (u)			  ## msd_upgrade.c:139:18
    494a:    10 f8 26 fa       	if (r0 == 0xfd) goto 0x4c <usb_slave_mode+0x192 : 499a >			  ## msd_upgrade.c:139:5
    494e:    90 f8 51 f6       	if (r0 != 0xfb) goto 0xa2 <usb_slave_mode+0x1EC : 49f4 >
    4952:    50 ee 40 01       	r0 = b[r4+0x10] (u)			  ## msd_upgrade.c:143:22
    4956:    00 f8 8b 10       	if (r0 == 0x8) goto 0x116 <usb_slave_mode+0x268 : 4a70 >			  ## msd_upgrade.c:143:9
    495a:    80 f8 83 0c       	if (r0 != 0x6) goto 0x106 <usb_slave_mode+0x25C : 4a64 >
    495e:    48 91             	r0 = r4 + 0x11
    4960:    09 43             	r1 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
    4962:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
    4964:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
    4968:    0b 41             		 r3 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
    496a:    08 40             	r0 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
    496c:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
    4970:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
    4974:    70 e0 00 b0       	r11 = rev8(r0)			  ## msd_upgrade.c:46:12
    4978:    bf ea c8 fe       	call -0x270 <rbc_get_length : 470c >			  ## msd_upgrade.c:82:11
    497c:    06 16             	r6 = r0			  ## msd_upgrade.c:82:11
    497e:    b0 16             	r0 = r11			  ## msd_upgrade.c:85:5
    4980:    61 16             	r1 = r6			  ## msd_upgrade.c:85:5
    4982:    bf ea cd fe       	call -0x266 <msd_usb2mcu : 4720 >			  ## msd_upgrade.c:85:5
    4986:    e1 17             	r1 = r6.l (u)			  ## msd_upgrade.c:86:5
    4988:    b0 16             	r0 = r11			  ## msd_upgrade.c:86:5
    498a:    4b e0 55 00       	r11 = 0x55 <os_bss_size+0x18 : 54 >			  ## msd_upgrade.c:86:5
    498e:    80 ff 8a 60 00 00 	call 0x608a <CrcDecode : aa1e >			  ## msd_upgrade.c:86:5
    4994:    d0 ec 81 70       	[r8+0x0] = r7			  ## msd_upgrade.c:146:27
    4998:    44 9b             	goto 0x136 <usb_slave_mode+0x2C8 : 4ad0 >			  ## msd_upgrade.c:146:27
    499a:    50 ee 40 01       	r0 = b[r4+0x10] (u)			  ## msd_upgrade.c:158:22
    499e:    80 f8 61 0e       	if (r0 != 0x7) goto 0xc2 <usb_slave_mode+0x25C : 4a64 >			  ## msd_upgrade.c:158:22
    49a2:    48 91             	r0 = r4 + 0x11
    49a4:    09 43             	r1 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
    49a6:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
    49a8:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
    49ac:    0b 41             		 r3 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
    49ae:    08 40             	r0 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
    49b0:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
    49b4:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
    49b8:    70 e0 00 60       	r6 = rev8(r0)			  ## msd_upgrade.c:46:12
    49bc:    bf ea a6 fe       	call -0x2b4 <rbc_get_length : 470c >			  ## msd_upgrade.c:95:11
    49c0:    fe 16             	r14 = r15			  ## msd_upgrade.c:95:11
    49c2:    cf 16             	r15 = r12			  ## msd_upgrade.c:95:11
    49c4:    0c 16             	r12 = r0			  ## msd_upgrade.c:95:11
    49c6:    bb e1 40 00       	r11 = uextra(r0, p:0x0, l:0x10)			  ## msd_upgrade.c:97:5
    49ca:    60 16             	r0 = r6			  ## msd_upgrade.c:97:5
    49cc:    b1 16             	r1 = r11			  ## msd_upgrade.c:97:5
    49ce:    80 ff 4a 60 00 00 	call 0x604a <CrcDecode : aa1e >			  ## msd_upgrade.c:97:5
    49d4:    60 16             	r0 = r6			  ## msd_upgrade.c:98:5
    49d6:    c1 16             	r1 = r12			  ## msd_upgrade.c:98:5
    49d8:    fc 16             	r12 = r15			  ## msd_upgrade.c:98:5
    49da:    ef 16             	r15 = r14
    49dc:    4e e0 42 00       	r14 = 0x42 <os_bss_size+0x6 : 42 >
    49e0:    bf ea aa fe       	call -0x2ac <msd_mcu2usb : 4738 >			  ## msd_upgrade.c:98:5
    49e4:    60 16             	r0 = r6			  ## msd_upgrade.c:99:5
    49e6:    b1 16             	r1 = r11			  ## msd_upgrade.c:99:5
    49e8:    4b e0 55 00       	r11 = 0x55 <os_bss_size+0x18 : 54 >			  ## msd_upgrade.c:99:5
    49ec:    80 ff 2c 60 00 00 	call 0x602c <CrcDecode : aa1e >			  ## msd_upgrade.c:99:5
    49f2:    34 8e             	goto 0xdc <usb_slave_mode+0x2C8 : 4ad0 >			  ## msd_upgrade.c:99:5
    49f4:    00 f8 a1 00       	if (r0 == 0x0) goto 0x142 <.GJTIE82_0_0_+0x46 : 4b3a >			  ## msd.c:291:9
    49f8:    00 f8 a5 06       	if (r0 == 0x3) goto 0x14a <.GJTIE82_0_0_+0x52 : 4b46 >
    49fc:    00 f8 6a 5e       	if (r0 == 0x2f) goto 0xd4 <usb_slave_mode+0x2CC : 4ad4 >
    4a00:    00 f8 d3 34       	if (r0 == 0x1a) goto 0x1a6 <.GJTIE82_0_0_+0xB6 : 4baa >
    4a04:    00 f8 d8 3c       	if (r0 == 0x1e) goto 0x1b0 <.GJTIE82_0_0_+0xC4 : 4bb8 >
    4a08:    00 f8 8e 46       	if (r0 == 0x23) goto 0x11c <.GJTIE82_0_0_+0x34 : 4b28 >
    4a0c:    00 f8 8c 4a       	if (r0 == 0x25) goto 0x118 <.GJTIE82_0_0_+0x34 : 4b28 >
    4a10:    00 f8 8a 50       	if (r0 == 0x28) goto 0x114 <.GJTIE82_0_0_+0x34 : 4b28 >
    4a14:    80 f8 26 24       	if (r0 != 0x12) goto 0x4c <usb_slave_mode+0x25C : 4a64 >
    4a18:    58 4b             	r0 = b[r5+0xb] (u)			  ## msd.c:165:15
    4a1a:    59 4a             	r1 = b[r5+0xa] (u)			  ## msd.c:165:15
    4a1c:    a1 f1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)  #			  ## msd.c:165:15
    4a20:    5a 49             		 r2 = b[r5+0x9] (u)			  ## msd.c:165:15
    4a22:    5e 48             	r6 = b[r5+0x8] (u)			  ## msd.c:165:15
    4a24:    a6 e1 20 24       	r6 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:165:15
    4a28:    a6 e1 40 18       	r6 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:165:15
    4a2c:    36 e9 24 00       	if (r6 >= 0x24) {			  ## msd.c:165:15
    4a30:    4e 24             		r6 = 0x24
                               	}			  ## msd.c:165:15
    4a32:    c0 ff d3 45 00 00 	r0 = 0x45d3 <sMassDescriptor+0x16 : 45d2 >			  ## msd.c:167:5
    4a38:    61 16             	r1 = r6			  ## msd.c:167:5
    4a3a:    bf ea 7d fe       	call -0x306 <msd_mcu2usb : 4738 >			  ## msd.c:167:5
    4a3e:    58 4b             	r0 = b[r5+0xb] (u)			  ## msd.c:168:25
    4a40:    59 4a             	r1 = b[r5+0xa] (u)			  ## msd.c:168:25
    4a42:    a1 f1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)  #			  ## msd.c:168:25
    4a46:    5a 49             		 r2 = b[r5+0x9] (u)			  ## msd.c:168:25
    4a48:    5b 48             	r3 = b[r5+0x8] (u)			  ## msd.c:168:25
    4a4a:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:168:25
    4a4e:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:168:25
    4a52:    b0 1f             	r0 = r3 - r6			  ## msd.c:168:25
    4a54:    d8 48             	b[r5+0x8] = r0			  ## msd.c:168:25
    4a56:    81 b8             	r1 = r0 >> 0x18			  ## msd.c:168:25
    4a58:    d9 4b             	b[r5+0xb] = r1			  ## msd.c:168:25
    4a5a:    81 b0             	r1 = r0 >> 0x10			  ## msd.c:168:25
    4a5c:    d9 4a             	b[r5+0xa] = r1			  ## msd.c:168:25
    4a5e:    80 a8             	r0 = r0 >> 0x8			  ## msd.c:168:25
    4a60:    d8 49             	b[r5+0x9] = r0			  ## msd.c:168:25
    4a62:    14 9c             	goto 0x78 <usb_slave_mode+0x2D4 : 4adc >			  ## msd.c:168:25
    4a64:    48 4c             	r0 = b[r4+0xc] (u)			  ## msd.c:316:26
    4a66:    80 a7             	r0 = r0 >> 0x7			  ## msd.c:316:20
    4a68:    38 20             	r0 ^= 0x1			  ## msd.c:316:20
    4a6a:    bf ea ae fe       	call -0x2a4 <unknow : 47ca >			  ## msd.c:316:13
    4a6e:    14 97             	goto 0x6e <usb_slave_mode+0x2D6 : 4ade >			  ## msd.c:316:13
    4a70:    48 91             	r0 = r4 + 0x11
    4a72:    50 ee 01 b0       	r11 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
    4a76:    0b 40             	r3 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
    4a78:    50 ee 03 e0       	r14 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
    4a7c:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
    4a7e:    bf ea 45 fe       	call -0x376 <rbc_get_length : 470c >			  ## msd_upgrade.c:109:15
    4a82:    c6 ff 2c 14 18 00 	r6 = 0x18142c <arg_list : 18142c >
    4a88:    c1 ff 38 47 00 00 	r1 = 0x4738 <msd_mcu2usb : 4738 >			  ## msd_upgrade.c:110:26
    4a8e:    a2 f1 20 e4       	r2 <= insert(r14, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
    4a92:    e1 60             		 [r6+0x0] = r1			  ## msd_upgrade.c:110:26
    4a94:    c1 ff 20 47 00 00 	r1 = 0x4720 <msd_usb2mcu : 4720 >			  ## msd_upgrade.c:111:26
    4a9a:    4e f0 42 00       	r14 = 0x42  # <os_bss_size+0x6 : 42 >			  ## msd_upgrade.c:111:26
    4a9e:    e1 61             		 [r6+0x4] = r1			  ## msd_upgrade.c:111:26
    4aa0:    d0 ec 69 80       	[r6+0x8] = r8			  ## msd_upgrade.c:112:20
    4aa4:    a3 f1 20 b4       	r3 <= insert(r11, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
    4aa8:    e0 63             		 [r6+0xc] = r0			  ## msd_upgrade.c:113:21
    4aaa:    4b f0 55 00       	r11 = 0x55  # <os_bss_size+0x18 : 54 >			  ## msd_upgrade.c:113:21
    4aae:    e7 64             		 [r6+0x10] = r7			  ## msd_upgrade.c:114:23
    4ab0:    a3 e1 40 28       	r3 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
    4ab4:    70 e0 00 13       	r1 = rev8(r3)			  ## msd_upgrade.c:46:12
    4ab8:    60 16             	r0 = r6			  ## msd_upgrade.c:119:5
    4aba:    c1 00             	call r1			  ## msd_upgrade.c:119:5
    4abc:    78 3b             	r0 = 0xfb			  ## msd_upgrade.c:121:12
    4abe:    de e9 20 00       	b[sp+32] = r0			  ## msd_upgrade.c:121:12
    4ac2:    00 22             	r0 = [sp+8]			  ## msd_upgrade.c:122:12
    4ac4:    41 28             	r1 = 0x8			  ## msd_upgrade.c:122:12
    4ac6:    89 41             	b[r0+0x1] = r1			  ## msd_upgrade.c:122:12
    4ac8:    a8 80             	r0 = sp + 32			  ## msd_upgrade.c:122:12
    4aca:    41 30             	r1 = 0x10			  ## msd_upgrade.c:124:5
    4acc:    bf ea 34 fe       	call -0x398 <msd_mcu2usb : 4738 >			  ## msd_upgrade.c:124:5
    4ad0:    52 ee d0 70       	b[r13+0x0] = r7			  ## msd.c:286:27
    4ad4:    df 4b             	b[r5+0xb] = r7
    4ad6:    df 4a             	b[r5+0xa] = r7
    4ad8:    df 49             	b[r5+0x9] = r7
    4ada:    df 48             	b[r5+0x8] = r7
    4adc:    df 4c             	b[r5+0xc] = r7
    4ade:    50 ee d0 20       	r2 = b[r13+0x0] (u)			  ## msd.c:320:24
    4ae2:    02 fc 09 0c       	if (r2 > 0x6) goto 0x12 <.GJTIE82_0_0_+0x4 : 4af8 >			  ## msd.c:320:24
    4ae6:    48 24             	r0 = 0x24
    4ae8:    41 25             	r1 = 0x5
    4aea:    02 01             	tbb [r2]


.GJTIS82_0_0_:
    4aec:    04     < 4 : 0x4 >
    4aed:    11     < 17 : 0x11 >
    4aee:    0d     < 13 : 0xD >
    4aef:    11     < 17 : 0x11 >
    4af0:    11     < 17 : 0x11 >
    4af1:    08     < 8 : 0x8 >
    4af2:    0b     < 11 : 0xB >
    4af3:    00     < 0 : 0x0 >
    4af4:    80 14             	r1_r0 = 0
    4af6:    04 87             	goto 0xe <.GJTIE82_0_0_+0x12 : 4b06 >
    4af8:    82 f8 09 1e       	if (r2 != 0xf) goto 0x12 <.GJTIE82_0_0_+0x1A : 4b0e >
    4afc:    48 3a             	r0 = 0x3a
    4afe:    41 22             	r1 = 0x2
    4b00:    04 82             	goto 0x4 <.GJTIE82_0_0_+0x12 : 4b06 >
    4b02:    48 20             	r0 = 0x20
    4b04:    41 2b             	r1 = 0xb
    4b06:    52 ee c0 10       	b[r12+0x0] = r1
    4b0a:    52 ee f0 00       	b[r15+0x0] = r0
    4b0e:    52 ee 53 a0       	b[r5+0x3] = r10			  ## msd.c:173:23
    4b12:    52 ee 52 e0       	b[r5+0x2] = r14			  ## msd.c:173:23
    4b16:    52 ee 51 a0       	b[r5+0x1] = r10			  ## msd.c:173:23
    4b1a:    52 ee 50 b0       	b[r5+0x0] = r11			  ## msd.c:173:23
    4b1e:    41 2d             	r1 = 0xd			  ## msd.c:174:5
    4b20:    50 16             	r0 = r5			  ## msd.c:174:5
    4b22:    bf ea 09 fe       	call -0x3ee <msd_mcu2usb : 4738 >			  ## msd.c:174:5
    4b26:    77 85             	goto -0x236 <usb_slave_mode+0xEA : 48f2 >			  ## msd.c:174:5
    4b28:    40 20             	r0 = 0x0			  ## msd.c:218:5
    4b2a:    bf ea 4e fe       	call -0x364 <unknow : 47ca >			  ## msd.c:218:5
    4b2e:    40 25             	r0 = 0x5			  ## msd.c:219:23
    4b30:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:219:23
    4b34:    40 21             	r0 = 0x1			  ## msd.c:220:20
    4b36:    d8 4c             	b[r5+0xc] = r0			  ## msd.c:220:20
    4b38:    e7 92             	goto -0x5c <usb_slave_mode+0x2D6 : 4ade >			  ## msd.c:220:20
    4b3a:    40 21             	r0 = 0x1			  ## msd.c:224:20
    4b3c:    d8 4c             	b[r5+0xc] = r0			  ## msd.c:224:20
    4b3e:    40 25             	r0 = 0x5			  ## msd.c:225:23
    4b40:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:225:23
    4b44:    e7 9b             	goto -0x4a <.GJTIE82_0_0_+0x8 : 4afc >			  ## msd.c:225:23
    4b46:    49 4b             	r1 = b[r4+0xb] (u)			  ## msd.c:240:11
    4b48:    4a 4a             	r2 = b[r4+0xa] (u)			  ## msd.c:240:11
    4b4a:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd.c:240:11
    4b4e:    4b 49             		 r3 = b[r4+0x9] (u)			  ## msd.c:240:11
    4b50:    48 48             	r0 = b[r4+0x8] (u)			  ## msd.c:240:11
    4b52:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd.c:240:11
    4b56:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd.c:240:11
    4b5a:    0b 16             	r11 = r0			  ## msd.c:240:11
    4b5c:    30 e9 12 00       	if (r0 >= 0x12) {			  ## msd.c:240:11
    4b60:    4b e0 12 00       		r11 = 0x12
                               	} <WOLAAnalysisFilter_Float_M64_m4_r1+0xE : 12 >			  ## msd.c:240:11
    4b64:    10 58             	if (r0 == 0) goto 0x70 <.GJTIE82_0_0_+0xE2 : 4bd6 >
    4b66:    46 20             	r6 = 0x0
    4b68:    00 20             	r0 = [sp]			  ## msd.c:248:9
    4b6a:    00 90             	rep 0x2 0x11 {			  ## msd.c:248:9
    4b6c:    86 07             		b[r0++=0x1] = r6
                               	}			  ## msd.c:248:9
    4b6e:    50 ee c0 00       	r0 = b[r12+0x0] (u)			  ## msd.c:249:36
    4b72:    50 ee f0 10       	r1 = b[r15+0x0] (u)			  ## msd.c:250:37
    4b76:    02 21             	r2 = [sp+4]			  ## msd.c:250:37
    4b78:    a8 42             	b[r2+0x2] = r0			  ## msd.c:249:23
    4b7a:    b1 d6             	r1 = r11  #			  ## msd.c:256:9
    4b7c:    a9 4c             		 b[r2+0xc] = r1			  ## msd.c:250:24
    4b7e:    ae 4d             	b[r2+0xd] = r6			  ## msd.c:251:24
    4b80:    58 30             	r0 = 0x70			  ## msd.c:252:23
    4b82:    de e9 0e 00       	b[sp+14] = r0			  ## msd.c:252:23
    4b86:    40 2a             	r0 = 0xa			  ## msd.c:253:23
    4b88:    a8 47             	b[r2+0x7] = r0			  ## msd.c:253:23
    4b8a:    88 8e             	r0 = sp + 14			  ## msd.c:253:23
    4b8c:    bf ea d4 fd       	call -0x458 <msd_mcu2usb : 4738 >			  ## msd.c:256:9
    4b90:    58 4b             	r0 = b[r5+0xb] (u)			  ## msd.c:259:25
    4b92:    59 4a             	r1 = b[r5+0xa] (u)			  ## msd.c:259:25
    4b94:    a1 f1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)  #			  ## msd.c:259:25
    4b98:    5a 49             		 r2 = b[r5+0x9] (u)			  ## msd.c:259:25
    4b9a:    5b 48             	r3 = b[r5+0x8] (u)			  ## msd.c:259:25
    4b9c:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:259:25
    4ba0:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:259:25
    4ba4:    b4 e0 32 0b       	r0 = r3 - r11			  ## msd.c:259:25
    4ba8:    04 9d             	goto 0x3a <.GJTIE82_0_0_+0xF0 : 4be4 >			  ## msd.c:259:25
    4baa:    41 24             	r1 = 0x4			  ## msd.c:267:5
    4bac:    c0 ff f7 45 00 00 	r0 = 0x45f7 <SCSIInquiryData+0x23 : 45f6 >			  ## msd.c:267:5
    4bb2:    bf ea c1 fd       	call -0x47e <msd_mcu2usb : 4738 >			  ## msd.c:267:5
    4bb6:    c7 8e             	goto -0xe4 <usb_slave_mode+0x2CC : 4ad4 >			  ## msd.c:267:5
    4bb8:    df 4c             	b[r5+0xc] = r7			  ## msd.c:229:20
    4bba:    50 ee 43 01       	r0 = b[r4+0x13] (u)			  ## msd.c:230:9
    4bbe:    b0 e8 00 c0       	if (r0 != 0x0) {			  ## msd.c:230:9
    4bc2:    40 22             		r0 = 0x2			  ## msd.c:231:27
    4bc4:    52 ee d0 00       		b[r13+0x0] = r0			  ## msd.c:231:27
    4bc8:    40 21             		r0 = 0x1			  ## msd.c:232:24
    4bca:    d8 4c             		b[r5+0xc] = r0
                               	}			  ## msd.c:232:24
    4bcc:    df 4b             	b[r5+0xb] = r7			  ## msd.c:234:25
    4bce:    df 4a             	b[r5+0xa] = r7			  ## msd.c:234:25
    4bd0:    df 49             	b[r5+0x9] = r7			  ## msd.c:234:25
    4bd2:    df 48             	b[r5+0x8] = r7			  ## msd.c:234:25
    4bd4:    c7 84             	goto -0xf8 <usb_slave_mode+0x2D6 : 4ade >			  ## msd.c:234:25
    4bd6:    bf ea ec fd       	call -0x428 <stall_inep : 47b2 >			  ## msd.c:242:9
    4bda:    40 22             	r0 = 0x2			  ## msd.c:243:27
    4bdc:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:243:27
    4be0:    46 21             	r6 = 0x1			  ## msd.c:243:27
    4be2:    40 20             	r0 = 0x0			  ## msd.c:243:27
    4be4:    4b f0 55 00       	r11 = 0x55  # <os_bss_size+0x18 : 54 >
    4be8:    d8 48             		 b[r5+0x8] = r0
    4bea:    81 b8             	r1 = r0 >> 0x18
    4bec:    d9 4b             	b[r5+0xb] = r1
    4bee:    81 b0             	r1 = r0 >> 0x10
    4bf0:    d9 4a             	b[r5+0xa] = r1
    4bf2:    80 a8             	r0 = r0 >> 0x8
    4bf4:    d8 49             	b[r5+0x9] = r0
    4bf6:    de 4c             	b[r5+0xc] = r6
    4bf8:    b7 92             	goto -0x11c <usb_slave_mode+0x2D6 : 4ade >


usb_write_txcsr:
    4bfa:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:187:0
    4bfc:    12 17             	r2 = r1.b0 (u)			  ## usb_phy.c:191:28
    4bfe:    c3 ff 91 52 3f 00 	r3 = 0x3f5291 <RAM_LIMIT_H+0x255290 : 3f5290 >			  ## usb_phy.c:191:13
    4c04:    d8 ec 0b 23       	[r0+r3<<2] = r2			  ## usb_phy.c:191:20
    4c08:    91 a8             	r1 = r1 >> 0x8			  ## usb_phy.c:192:28
    4c0a:    3a 81             	r2 = r3 + 0x1			  ## usb_phy.c:192:13
    4c0c:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## usb_phy.c:192:20
    4c10:    80 00             	rts			  ## usb_phy.c:194:1


usb_write_rxcsr:
    4c12:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:206:0
    4c14:    12 17             	r2 = r1.b0 (u)			  ## usb_phy.c:210:28
    4c16:    c3 ff 94 52 3f 00 	r3 = 0x3f5294 <RAM_LIMIT_H+0x255294 : 3f5294 >			  ## usb_phy.c:210:13
    4c1c:    d8 ec 0b 23       	[r0+r3<<2] = r2			  ## usb_phy.c:210:20
    4c20:    91 a8             	r1 = r1 >> 0x8			  ## usb_phy.c:211:28
    4c22:    3a 81             	r2 = r3 + 0x1			  ## usb_phy.c:211:13
    4c24:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## usb_phy.c:211:20
    4c28:    80 00             	rts			  ## usb_phy.c:213:1


usb_g_ep_config:
    4c2a:    75 04             	[--sp] = {rets, r5, r4}			  ## usb_phy.c:429:0
    4c2c:    04 16             	r4 = r0			  ## usb_phy.c:429:0
    4c2e:    c0 ff 40 14 18 00 	r0 = 0x181440 <ep0_addr : 181440 >			  ## usb_phy.c:429:0
    4c34:    c2 ff 1c 18 fd 00 	r2 = 0xfd181c <RAM_LIMIT_H+0xE3181C : fd181c >			  ## usb_phy.c:429:0
    4c3a:    54 e8 0f 3a       	if ((r4 & 0x80) != 0) goto 0x1e <usb_g_ep_config+0x32 : 4c5c >			  ## usb_phy.c:429:0
    4c3e:    14 41             	if (r4 == 0) goto 0x42 <usb_g_ep_config+0x58 : 4c82 >			  ## usb_phy.c:429:0
    4c40:    30 e1 ff 4f       	r0 = r4 + -0x1			  ## usb_phy.c:294:22
    4c44:    02 a3             	r2 = r0 << 0x3			  ## usb_phy.c:294:11
    4c46:    c3 ff 09 46 3f 00 	r3 = 0x3f4609 <RAM_LIMIT_H+0x254608 : 3f4608 >			  ## usb_phy.c:294:11
    4c4c:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## usb_phy.c:295:12
    4c50:    c2 ff 54 14 18 00 	r2 = 0x181454 <ep_raddr : 181454 >			  ## usb_phy.c:296:5
    4c56:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## usb_phy.c:296:22
    4c5a:    04 97             	goto 0x2e <usb_g_ep_config+0x60 : 4c8a >
    4c5c:    65 e1 0f 40       	r5 = r4 & 0xF			  ## usb_phy.c:432:12
    4c60:    60 ff 0f 40 21 00 	if ((r4 & 0xF) == 0) goto 0x42 <usb_g_ep_config+0x7E : 4ca8 >
    4c66:    30 e1 ff 5f       	r0 = r5 + -0x1			  ## usb_phy.c:275:22
    4c6a:    02 a3             	r2 = r0 << 0x3			  ## usb_phy.c:275:11
    4c6c:    c3 ff 08 46 3f 00 	r3 = 0x3f4608 <RAM_LIMIT_H+0x254608 : 3f4608 >			  ## usb_phy.c:275:11
    4c72:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## usb_phy.c:276:12
    4c76:    c2 ff 44 14 18 00 	r2 = 0x181444 <ep_taddr : 181444 >			  ## usb_phy.c:277:5
    4c7c:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## usb_phy.c:277:22
    4c80:    04 96             	goto 0x2c <usb_g_ep_config+0x84 : 4cae >			  ## usb_phy.c:277:22
    4c82:    a1 60             	[r2+0x0] = r1			  ## usb_phy.c:289:25
    4c84:    30 f1 ff 4f       	r0 = r4 + -0x1  #			  ## usb_phy.c:228:19
    4c88:    81 60             		 [r0+0x0] = r1			  ## usb_phy.c:290:18
    4c8a:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:229:13
    4c8c:    c1 ff d3 52 3f 00 	r1 = 0x3f52d3 <RAM_LIMIT_H+0x2552D2 : 3f52d2 >			  ## usb_phy.c:229:13
    4c92:    42 e0 ff 03       	r2 = 0x3ff <ROM_RAM_SIZE+0x1FE : 3fe >			  ## usb_phy.c:229:20
    4c96:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## usb_phy.c:229:20
    4c9a:    61 30             	r1 = 0x90			  ## usb_phy.c:449:9
    4c9c:    40 16             	r0 = r4			  ## usb_phy.c:449:9
    4c9e:    51 99             	call -0x8e <usb_write_rxcsr : 4c12 >			  ## usb_phy.c:449:9
    4ca0:    40 16             	r0 = r4			  ## usb_phy.c:456:13
    4ca2:    bf ea c6 fc       	call -0x674 <usb_clr_intr_rxe : 4632 >			  ## usb_phy.c:456:13
    4ca6:    55 04             	{pc, r5, r4} = [sp++]			  ## usb_phy.c:456:13
    4ca8:    a1 60             	[r2+0x0] = r1			  ## usb_phy.c:270:25
    4caa:    81 60             	[r0+0x0] = r1			  ## usb_phy.c:271:18
    4cac:    10 3f             	r0 = -0x1			  ## usb_phy.c:271:18
    4cae:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:237:13
    4cb0:    c1 ff d0 52 3f 00 	r1 = 0x3f52d0 <RAM_LIMIT_H+0x2552D0 : 3f52d0 >			  ## usb_phy.c:237:13
    4cb6:    42 e0 ff 03       	r2 = 0x3ff <ROM_RAM_SIZE+0x1FE : 3fe >			  ## usb_phy.c:237:20
    4cba:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## usb_phy.c:237:20
    4cbe:    51 28             	r1 = 0x48			  ## usb_phy.c:436:9
    4cc0:    50 16             	r0 = r5			  ## usb_phy.c:436:9
    4cc2:    41 9b             	call -0xca <usb_write_txcsr : 4bfa >			  ## usb_phy.c:436:9
    4cc4:    50 16             	r0 = r5			  ## usb_phy.c:443:13
    4cc6:    bf ea c5 fc       	call -0x676 <usb_clr_intr_txe : 4654 >			  ## usb_phy.c:443:13
    4cca:    55 04             	{pc, r5, r4} = [sp++]			  ## usb_phy.c:443:13


msd_ep_init:
    4ccc:    74 04             	[--sp] = {rets, r4}			  ## msd.c:85:0
    4cce:    c4 ff 80 10 18 00 	r4 = 0x181080 <ep1_dma_buffer : 181080 >			  ## msd.c:87:5
    4cd4:    60 21             	r0 = 0x81			  ## msd.c:86:5
    4cd6:    41 16             	r1 = r4			  ## msd.c:86:5
    4cd8:    51 88             	call -0xb0 <usb_g_ep_config : 4c2a >			  ## msd.c:86:5
    4cda:    01 e1 40 40       	r1 = r4 + 0x40			  ## msd.c:87:5
    4cde:    40 21             	r0 = 0x1			  ## msd.c:87:5
    4ce0:    51 84             	call -0xb8 <usb_g_ep_config : 4c2a >			  ## msd.c:87:5
    4ce2:    54 04             	{pc, r4} = [sp++]			  ## msd.c:91:1


msd_itf_hander:
    4ce4:    75 04             	[--sp] = {rets, r5, r4}			  ## msd.c:99:0
    4ce6:    c2 ff 28 14 18 00 	r2 = 0x181428 <hook_usb_scsi : 181428 >			  ## msd_upgrade.c:128:19
    4cec:    40 ea 00 20       	[r2+0x0] = 0x0			  ## msd_upgrade.c:128:19
    4cf0:    04 15             	r5_r4 = r1_r0			  ## msd_upgrade.c:128:19
    4cf2:    71 8c             	call -0x28 <msd_ep_init : 4ccc >			  ## msd.c:96:5
    4cf4:    58 40             	r0 = b[r5+0x0] (u)			  ## msd.c:101:15
    4cf6:    41 23             	r1 = 0x3			  ## msd.c:101:15
    4cf8:    10 f8 08 42       	if (r0 == 0xa1) goto 0x10 <msd_itf_hander+0x28 : 4d0c >			  ## msd.c:101:37
    4cfc:    80 f8 10 42       	if (r0 != 0x21) goto 0x20 <msd_itf_hander+0x3C : 4d20 >
    4d00:    58 41             	r0 = b[r5+0x1] (u)			  ## msd.c:102:15
    4d02:    41 20             	r1 = 0x0			  ## msd.c:101:9
    4d04:    b0 e8 ff 00       	if (r0 != 0xff) {			  ## msd.c:101:9
    4d08:    41 23             		r1 = 0x3
                               	}			  ## msd.c:101:9
    4d0a:    04 8a             	goto 0x14 <msd_itf_hander+0x3C : 4d20 >			  ## msd.c:101:9
    4d0c:    58 41             	r0 = b[r5+0x1] (u)			  ## msd.c:107:22
    4d0e:    90 f8 07 fc       	if (r0 != 0xfe) goto 0xe <msd_itf_hander+0x3C : 4d20 >			  ## msd.c:107:22
    4d12:    40 62             	r0 = [r4+0x8] 			  ## msd.c:110:21
    4d14:    41 20             	r1 = 0x0			  ## msd.c:110:37
    4d16:    89 40             	b[r0+0x0] = r1			  ## msd.c:110:37
    4d18:    40 62             	r0 = [r4+0x8] 			  ## msd.c:111:45
    4d1a:    c0 63             	[r4+0xc] = r0			  ## msd.c:111:31
    4d1c:    41 21             	r1 = 0x1			  ## msd.c:111:31
    4d1e:    c9 61             	h[r4+0x2] = r1			  ## msd.c:112:33
    4d20:    40 20             	r0 = 0x0			  ## msd.c:117:5
    4d22:    c9 41             	b[r4+0x1] = r1			  ## msd.c:117:5
    4d24:    55 04             	{pc, r5, r4} = [sp++]			  ## msd.c:117:5


ep0_stage_tx:
    4d26:    76 04             	[--sp] = {rets, r6-r4}			  ## usb_setup.c:15:0
    4d28:    c5 ff 44 4a fd 00 	r5 = 0xfd4a44 <RAM_LIMIT_H+0xE34A44 : fd4a44 >			  ## usb_setup.c:15:0
    4d2e:    50 60             	r0 = [r5+0x0] 			  ## usb_phy.c:62:28
    4d30:    50 e8 22 0a       	if ((r0 & 0x2) != 0) goto 0x44 <ep0_stage_tx+0x52 : 4d78 >
    4d34:    c6 ff 80 14 18 00 	r6 = 0x181480 <usb_device : 181480 >
    4d3a:    6c 61             	r4 = h[r6+0x2] (u)			  ## usb_setup.c:20:16
    4d3c:    04 59             	if (r4 == 0) goto 0x32 <ep0_stage_tx+0x4A : 4d70 >			  ## usb_setup.c:20:16
    4d3e:    34 e9 40 00       	if (r4 >= 0x40) {
    4d42:    54 20             		r4 = 0x40
                               	}			  ## usb_setup.c:24:19
    4d44:    c0 ff 40 14 18 00 	r0 = 0x181440 <ep0_addr : 181440 >			  ## usb_phy.c:96:20
    4d4a:    42 d6             	r2 = r4  #			  ## usb_phy.c:96:5
    4d4c:    00 60             		 r0 = [r0+0x0] 			  ## usb_phy.c:96:20
    4d4e:    61 63             	r1 = [r6+0xc] 			  ## usb_setup.c:25:34
    4d50:    80 ff e6 f3 ff ff 	call -0xc1a <memmove : 413c >			  ## usb_phy.c:96:5
    4d56:    c0 ff 08 18 fd 00 	r0 = 0xfd1808 <RAM_LIMIT_H+0xE31808 : fd1808 >			  ## usb_phy.c:97:21
    4d5c:    84 60             	[r0+0x0] = r4			  ## usb_phy.c:97:21
    4d5e:    68 e8 0c 64       	[r6+0xc] += r4			  ## usb_setup.c:26:30
    4d62:    68 61             	r0 = h[r6+0x2] (u)			  ## usb_setup.c:27:32
    4d64:    00 1f             	r0 = r0 - r4			  ## usb_setup.c:27:32
    4d66:    e8 61             	h[r6+0x2] = r0			  ## usb_setup.c:27:32
    4d68:    69 46             	r1 = b[r6+0x6] (u)			  ## usb_setup.c:28:50
    4d6a:    81 47             	if (r1 != 0) goto 0xe <ep0_stage_tx+0x54 : 4d7a >			  ## usb_setup.c:28:50
    4d6c:    80 17             	r0 = r0.l (u)			  ## usb_setup.c:28:13
    4d6e:    80 45             	if (r0 != 0) goto 0xa <ep0_stage_tx+0x54 : 4d7a >			  ## usb_setup.c:28:13
    4d70:    40 ea 0a 50       	[r5+0x0] = 0xA
    4d74:    40 20             	r0 = 0x0
    4d76:    e8 41             	b[r6+0x1] = r0
    4d78:    56 04             	{pc, r6-r4} = [sp++]			  ## usb_setup.c:35:1
    4d7a:    40 ea 02 50       	[r5+0x0] = 0x2			  ## usb_phy.c:70:22
    4d7e:    56 04             	{pc, r6-r4} = [sp++]			  ## usb_setup.c:35:1


usb_device_isr:
    4d80:    e9 04             	[--sp] = {psr, rets, reti}			  ## usb_onchip.c:30:0
    4d82:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## usb_onchip.c:30:0
    4d86:    e2 9e             	sp += -0x8			  ## usb_onchip.c:30:0
    4d88:    c4 ff 00 4a fd 00 	r4 = 0xfd4a00 <RAM_LIMIT_H+0xE34A00 : fd4a00 >			  ## usb_onchip.c:30:0
    4d8e:    d0 ec 48 a1       	r10 = [r4+0x18]			  ## usb_phy.c:115:29
    4d92:    41 62             	r1 = [r4+0x8] 			  ## usb_phy.c:116:29
    4d94:    42 63             	r2 = [r4+0xc] 			  ## usb_phy.c:116:53
    4d96:    d0 ec 40 81       	r8 = [r4+0x10]			  ## usb_phy.c:117:29
    4d9a:    43 65             	r3 = [r4+0x14] 			  ## usb_phy.c:117:53
    4d9c:    47 6b             	r7 = [r4+0x2c] 			  ## usb_phy.c:125:31
    4d9e:    45 67             	r5 = [r4+0x1c] 			  ## usb_phy.c:126:30
    4da0:    22 a8             	r2 = r2 << 0x8			  ## usb_phy.c:116:62
    4da2:    21 d9             	r1 |= r2  #			  ## usb_phy.c:116:38
    4da4:    46 68             		 r6 = [r4+0x20] 			  ## usb_phy.c:126:55
    4da6:    62 a8             	r2 = r6 << 0x8			  ## usb_phy.c:126:65
    4da8:    52 19             	r2 |= r5			  ## usb_phy.c:126:40
    4daa:    d0 ec 44 92       	r9 = [r4+0x24]			  ## usb_phy.c:127:30
    4dae:    90 f1 12 52       	r5 = r1 & r2  #			  ## usb_onchip.c:45:13
    4db2:    40 6a             		 r0 = [r4+0x28] 			  ## usb_phy.c:127:55
    4db4:    36 a8             	r6 = r3 << 0x8			  ## usb_phy.c:117:62
    4db6:    90 e1 a2 17       	r1 = r10 & r7			  ## usb_onchip.c:44:14
    4dba:    07 a8             	r7 = r0 << 0x8			  ## usb_phy.c:127:65
    4dbc:    31 ea 04 00       	if ((r1 & 0x4) != 0) {
    4dc0:    41 85             		call -0xf6
                               	} <msd_ep_init : 4ccc >			  ## usb_onchip.c:54:9
    4dc2:    90 e1 60 f8       	r15 = r6 | r8			  ## usb_phy.c:117:38
    4dc6:    90 e1 70 e9       	r14 = r7 | r9			  ## usb_phy.c:127:40
    4dca:    60 ff 01 50 2f 01 	if ((r5 & 0x1) == 0) goto 0x25e <.GJTIE109_0_0_+0x182 : 502e >
    4dd0:    c9 ff 80 14 18 00 	r9 = 0x181480 <usb_device : 181480 >
    4dd6:    50 ee 90 00       	r0 = b[r9+0x0] (u)			  ## usb_setup.c:220:20
    4dda:    b0 e8 00 80       	if (r0 != 0x0) {			  ## usb_setup.c:220:20
    4dde:    c0 60             		[r4+0x0] = r0			  ## usb_phy.c:183:23
    4de0:    40 20             		r0 = 0x0			  ## usb_setup.c:222:26
    4de2:    52 ee 90 00       		b[r9+0x0] = r0
                               	}			  ## usb_setup.c:222:26
    4de6:    08 e1 44 40       	r8 = r4 + 0x44			  ## usb_setup.c:222:26
    4dea:    d0 ec 80 00       	r0 = [r8+0x0]			  ## usb_phy.c:62:28
    4dee:    50 e8 0b 12       	if ((r0 & 0x4) != 0) goto 0x16 <usb_device_isr+0x88 : 4e08 >
    4df2:    50 e8 0f 22       	if ((r0 & 0x10) != 0) goto 0x1e <usb_device_isr+0x94 : 4e14 >
    4df6:    50 ee 91 10       	r1 = b[r9+0x1] (u)			  ## usb_setup.c:236:24
    4dfa:    01 f8 5f 04       	if (r1 == 0x2) goto 0xbe <.GJTIE109_0_0_+0x10 : 4ebc >			  ## usb_setup.c:236:5
    4dfe:    00 ff 01 10 13 01 	if (r1 == 0x1) goto 0x226 <.GJTIE109_0_0_+0x17E : 502a >
    4e04:    01 4c             	if (r1 == 0) goto 0x18 <usb_device_isr+0x9E : 4e1e >
    4e06:    84 93             	goto 0x226 <.GJTIE109_0_0_+0x182 : 502e >
    4e08:    40 20             	r0 = 0x0
    4e0a:    d0 ec 81 00       	[r8+0x0] = r0			  ## usb_phy.c:70:22
    4e0e:    52 ee 91 00       	b[r9+0x1] = r0
    4e12:    84 8d             	goto 0x21a <.GJTIE109_0_0_+0x182 : 502e >
    4e14:    40 ea 80 80       	[r8+0x0] = 0x80			  ## usb_phy.c:70:22
    4e18:    41 20             	r1 = 0x0			  ## usb_setup.c:233:27
    4e1a:    52 ee 91 10       	b[r9+0x1] = r1			  ## usb_setup.c:233:27
    4e1e:    60 ff 01 00 05 01 	if ((r0 & 0x1) == 0) goto 0x20a <.GJTIE109_0_0_+0x182 : 502e >
    4e24:    c0 ff 40 14 18 00 	r0 = 0x181440 <ep0_addr : 181440 >			  ## usb_phy.c:108:25
    4e2a:    02 60             	r2 = [r0+0x0] 			  ## usb_phy.c:108:25
    4e2c:    50 ee 21 a0       	r10 = b[r2+0x1] (u)			  ## usb_phy.c:108:5
    4e30:    28 40             	r0 = b[r2+0x0] (u)			  ## usb_phy.c:108:5
    4e32:    50 ee 23 b0       	r11 = b[r2+0x3] (u)			  ## usb_phy.c:108:5
    4e36:    2c 42             	r4 = b[r2+0x2] (u)			  ## usb_phy.c:108:5
    4e38:    50 ee 25 c0       	r12 = b[r2+0x5] (u)			  ## usb_phy.c:108:5
    4e3c:    29 44             	r1 = b[r2+0x4] (u)			  ## usb_phy.c:108:5
    4e3e:    50 ee 27 d0       	r13 = b[r2+0x7] (u)			  ## usb_phy.c:108:5
    4e42:    2b 46             	r3 = b[r2+0x6] (u)			  ## usb_phy.c:108:5
    4e44:    8e 80             	r6 = sp + 0			  ## usb_phy.c:108:5
    4e46:    10 87             	rep 0x4 0x8 {			  ## usb_phy.c:108:5
    4e48:    27 07             		r7 = b[r2++=0x1] (u)			  ## usb_phy.c:108:5
    4e4a:    e7 07             		b[r6++=0x1] = r7
                               	}			  ## usb_phy.c:108:5
    4e4c:    42 21             	r2 = 0x1			  ## usb_phy.c:108:5
    4e4e:    52 ee 91 20       	b[r9+0x1] = r2			  ## usb_setup.c:187:23
    4e52:    c6 ff 40 11 18 00 	r6 = 0x181140 <ep2_dma_buffer : 181140 >			  ## usb_setup.c:187:23
    4e58:    a3 e1 20 d4       	r3 <= insert(r13, p:0x8, l:0x8)			  ## usb_phy.c:108:5
    4e5c:    a1 e1 20 c4       	r1 <= insert(r12, p:0x8, l:0x8)			  ## usb_phy.c:108:5
    4e60:    a1 e1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)			  ## usb_phy.c:108:5
    4e64:    a4 e1 20 b4       	r4 <= insert(r11, p:0x8, l:0x8)			  ## usb_phy.c:108:5
    4e68:    a0 e1 20 a4       	r0 <= insert(r10, p:0x8, l:0x8)			  ## usb_phy.c:108:5
    4e6c:    a0 e1 40 48       	r0 <= insert(r4, p:0x10, l:0x10)			  ## usb_phy.c:108:5
    4e70:    d0 ec 99 60       	[r9+0x8] = r6			  ## usb_setup.c:188:29
    4e74:    0a 15             	r11_r10 = r1_r0			  ## usb_setup.c:190:5
    4e76:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## usb_setup.c:190:5
    4e7a:    0c 15             	r13_r12 = r1_r0			  ## usb_setup.c:190:5
    4e7c:    64 e1 1f 00       	r4 = r0 & 0x1F			  ## usb_setup.c:190:5
    4e80:    d0 e1 08 c8       	r13_r12 >>= 0x8			  ## usb_setup.c:190:5
    4e84:    04 f8 1d 04       	if (r4 == 0x2) goto 0x3a <.GJTIE109_0_0_+0x16 : 4ec2 >			  ## usb_setup.c:190:5
    4e88:    c3 ff 64 14 18 00 	r3 = 0x181464 <interface_hander : 181464 >
    4e8e:    04 f8 31 02       	if (r4 == 0x1) goto 0x62 <.GJTIE109_0_0_+0x48 : 4ef4 >
    4e92:    84 f8 c8 00       	if (r4 != 0x0) goto 0x190 <.GJTIE109_0_0_+0x17A : 5026 >
    4e96:    b4 e1 20 c0       	r4 = uextra(r12, p:0x0, l:0x8)
    4e9a:    04 fc 35 16       	if (r4 > 0xb) goto 0x6a <.GJTIE109_0_0_+0x5C : 4f08 >
    4e9e:    04 01             	tbb [r4]


.GJTIS109_0_0_:
    4ea0:    06     < 6 : 0x6 >
    4ea1:    7a     < 122 : 0x7A >
    4ea2:    34     < 52 : 0x34 >
    4ea3:    34     < 52 : 0x34 >
    4ea4:    34     < 52 : 0x34 >
    4ea5:    54     < 84 : 0x54 >
    4ea6:    57     < 87 : 0x57 >
    4ea7:    34     < 52 : 0x34 >
    4ea8:    6d     < 109 : 0x6D >
    4ea9:    78     < 120 : 0x78 >
    4eaa:    34     < 52 : 0x34 >
    4eab:    7a     < 122 : 0x7A >
    4eac:    40 21             	r0 = 0x1
    4eae:    e8 40             	b[r6+0x0] = r0			  ## usb_setup.c:105:36
    4eb0:    40 20             	r0 = 0x0			  ## usb_setup.c:106:36
    4eb2:    e8 41             	b[r6+0x1] = r0			  ## usb_setup.c:106:36
    4eb4:    40 22             	r0 = 0x2			  ## usb_setup.c:107:32
    4eb6:    50 ed 93 00       	h[r9+0x2] = r0			  ## usb_setup.c:107:32
    4eba:    54 95             	goto 0x16a <.GJTIE109_0_0_+0x17A : 5026 >			  ## usb_setup.c:107:32
    4ebc:    40 ea 48 80       	[r8+0x0] = 0x48			  ## usb_phy.c:70:22
    4ec0:    14 88             	goto 0x50 <.GJTIE109_0_0_+0x66 : 4f12 >			  ## usb_phy.c:70:22
    4ec2:    60 ff ff c0 27 00 	if ((r12 & 0xFF) == 0) goto 0x4e <.GJTIE109_0_0_+0x6A : 4f16 >			  ## usb_setup.c:150:5
    4ec8:    b3 e1 20 c0       	r3 = uextra(r12, p:0x0, l:0x8)
    4ecc:    03 f8 2d 06       	if (r3 == 0x3) goto 0x5a <.GJTIE109_0_0_+0x7E : 4f2a >
    4ed0:    83 f8 2a 02       	if (r3 != 0x1) goto 0x54 <.GJTIE109_0_0_+0x7C : 4f28 >
    4ed4:    42 23             	r2 = 0x3
    4ed6:    61 ff ff a0 27 00 	if ((r10 & 0xFF) != 0) goto 0x4e <.GJTIE109_0_0_+0x7E : 4f2a >
    4edc:    02 15             	r3_r2 = r1_r0			  ## usb_phy.c:108:5
    4ede:    d0 e1 00 2a       	r3_r2 >>= 0x20			  ## usb_phy.c:108:5
    4ee2:    60 e1 03 10       	r0 = r1 & 0x3			  ## usb_setup.c:149:34
    4ee6:    52 e8 5e 3a       	if ((r2 & 0x80) != 0) goto 0xbc <.GJTIE109_0_0_+0xFA : 4fa6 >
    4eea:    61 20             	r1 = 0x80			  ## usb_setup.c:156:17
    4eec:    bf ea 91 fe       	call -0x2de <usb_write_rxcsr : 4c12 >			  ## usb_setup.c:156:17
    4ef0:    42 20             	r2 = 0x0
    4ef2:    04 9b             	goto 0x36 <.GJTIE109_0_0_+0x7E : 4f2a >
    4ef4:    10 17             	r0 = r1.b0 (u)			  ## usb_setup.c:127:19
    4ef6:    00 fc 07 0c       	if (r0 > 0x6) goto 0xe <.GJTIE109_0_0_+0x5C : 4f08 >			  ## usb_setup.c:127:19
    4efa:    d8 ec 3a 20       	r2 = [r3+r0<<2]			  ## usb_setup.c:130:9
    4efe:    02 44             	if (r2 == 0) goto 0x8 <.GJTIE109_0_0_+0x5C : 4f08 >			  ## usb_setup.c:130:9
    4f00:    89 80             	r1 = sp + 0
    4f02:    90 16             	r0 = r9			  ## usb_setup.c:131:10
    4f04:    c2 00             	call r2			  ## usb_setup.c:131:10
    4f06:    20 4c             	if (r0 == 0) goto 0x98 <.GJTIE109_0_0_+0xF4 : 4fa0 >			  ## usb_setup.c:131:10
    4f08:    40 23             	r0 = 0x3
    4f0a:    52 ee 91 00       	b[r9+0x1] = r0
    4f0e:    40 ea 60 80       	[r8+0x0] = 0x60			  ## usb_phy.c:70:22
    4f12:    40 20             	r0 = 0x0
    4f14:    b7 9c             	goto -0x108 <usb_device_isr+0x8E : 4e0e >
    4f16:    40 20             	r0 = 0x0			  ## usb_setup.c:164:36
    4f18:    e8 40             	b[r6+0x0] = r0			  ## usb_setup.c:164:36
    4f1a:    e8 41             	b[r6+0x1] = r0			  ## usb_setup.c:165:36
    4f1c:    d0 ec 9d 60       	[r9+0xc] = r6			  ## usb_setup.c:166:30
    4f20:    40 22             	r0 = 0x2			  ## usb_setup.c:167:32
    4f22:    50 ed 93 00       	h[r9+0x2] = r0			  ## usb_setup.c:167:32
    4f26:    04 81             	goto 0x2 <.GJTIE109_0_0_+0x7E : 4f2a >			  ## usb_setup.c:167:32
    4f28:    42 23             	r2 = 0x3
    4f2a:    52 ee 91 20       	b[r9+0x1] = r2
    4f2e:    30 e1 ff 2f       	r0 = r2 + -0x1			  ## usb_setup.c:203:9
    4f32:    80 f9 04 04       	if (r0 < 0x2) goto 0x8 <.GJTIE109_0_0_+0x92 : 4f3e >			  ## usb_setup.c:203:9
    4f36:    12 51             	if (r2 == 0) goto 0x62 <.GJTIE109_0_0_+0xEE : 4f9a >
    4f38:    02 f8 e9 07       	if (r2 == 0x3) goto -0x2e <.GJTIE109_0_0_+0x62 : 4f0e >
    4f3c:    34 98             	goto 0xf0 <.GJTIE109_0_0_+0x182 : 502e >
    4f3e:    40 ea 40 80       	[r8+0x0] = 0x40			  ## usb_phy.c:70:22
    4f42:    02 f8 72 02       	if (r2 == 0x1) goto 0xe4 <.GJTIE109_0_0_+0x17E : 502a >			  ## usb_phy.c:70:22
    4f46:    34 93             	goto 0xe6 <.GJTIE109_0_0_+0x182 : 502e >			  ## usb_phy.c:70:22
    4f48:    52 ee 90 a0       	b[r9+0x0] = r10			  ## usb_setup.c:47:26
    4f4c:    14 83             	goto 0x46 <.GJTIE109_0_0_+0xE8 : 4f94 >			  ## usb_setup.c:47:26
    4f4e:    0c 15             	r13_r12 = r1_r0			  ## usb_setup.c:64:17
    4f50:    d0 e1 08 c9       	r13_r12 >>= 0x18			  ## usb_setup.c:64:17
    4f54:    b4 e1 20 c0       	r4 = uextra(r12, p:0x0, l:0x8)			  ## usb_setup.c:64:9
    4f58:    04 f8 2a 06       	if (r4 == 0x3) goto 0x54 <.GJTIE109_0_0_+0x104 : 4fb0 >			  ## usb_setup.c:64:9
    4f5c:    04 f8 34 04       	if (r4 == 0x2) goto 0x68 <.GJTIE109_0_0_+0x11C : 4fc8 >
    4f60:    84 f8 d2 03       	if (r4 != 0x1) goto -0x5c <.GJTIE109_0_0_+0x5C : 4f08 >
    4f64:    c2 ff fb 45 00 00 	r2 = 0x45fb <scsi_mode_sense+0x3 : 45fa >			  ## descriptor.c:71:5
    4f6a:    63 16             	r3 = r6			  ## descriptor.c:71:5
    4f6c:    10 91             	rep 0x4 0x12 {			  ## descriptor.c:71:5
    4f6e:    24 07             		r4 = b[r2++=0x1] (u)			  ## descriptor.c:71:5
    4f70:    b4 07             		b[r3++=0x1] = r4
                               	}			  ## descriptor.c:71:5
    4f72:    d0 ec 9d 60       	[r9+0xc] = r6			  ## usb_setup.c:67:34
    4f76:    43 32             	r3 = 0x12
    4f78:    24 88             	goto 0x90 <.GJTIE109_0_0_+0x15E : 500a >
    4f7a:    50 ee 95 00       	r0 = b[r9+0x5] (u)			  ## usb_setup.c:57:49
    4f7e:    e8 40             	b[r6+0x0] = r0			  ## usb_setup.c:57:36
    4f80:    d0 ec 9d 60       	[r9+0xc] = r6			  ## usb_setup.c:58:30
    4f84:    40 21             	r0 = 0x1			  ## usb_setup.c:58:30
    4f86:    50 ed 93 00       	h[r9+0x2] = r0			  ## usb_setup.c:59:32
    4f8a:    52 ee 91 00       	b[r9+0x1] = r0			  ## usb_setup.c:60:27
    4f8e:    24 8b             	goto 0x96 <.GJTIE109_0_0_+0x17A : 5026 >			  ## usb_setup.c:60:27
    4f90:    52 ee 95 a0       	b[r9+0x5] = r10			  ## usb_setup.c:100:31
    4f94:    40 20             	r0 = 0x0
    4f96:    52 ee 91 00       	b[r9+0x1] = r0
    4f9a:    40 ea 48 80       	[r8+0x0] = 0x48			  ## usb_phy.c:70:22
    4f9e:    24 87             	goto 0x8e <.GJTIE109_0_0_+0x182 : 502e >			  ## usb_phy.c:70:22
    4fa0:    50 ee 91 20       	r2 = b[r9+0x1] (u)
    4fa4:    e7 84             	goto -0x78 <.GJTIE109_0_0_+0x82 : 4f2e >
    4fa6:    51 20             	r1 = 0x40			  ## usb_setup.c:154:17
    4fa8:    bf ea 27 fe       	call -0x3b2 <usb_write_txcsr : 4bfa >			  ## usb_setup.c:154:17
    4fac:    42 20             	r2 = 0x0
    4fae:    d7 9d             	goto -0x86 <.GJTIE109_0_0_+0x7E : 4f2a >
    4fb0:    60 ff ff a0 23 00 	if ((r10 & 0xFF) == 0) goto 0x46 <.GJTIE109_0_0_+0x150 : 4ffc >
    4fb6:    c2 ff 0d 46 00 00 	r2 = 0x460d <sDeviceDescriptor+0x11 : 460c >			  ## descriptor.c:79:5
    4fbc:    63 16             	r3 = r6			  ## descriptor.c:79:5
    4fbe:    10 9b             	rep 0x4 0x1c {			  ## descriptor.c:79:5
    4fc0:    24 07             		r4 = b[r2++=0x1] (u)			  ## descriptor.c:79:5
    4fc2:    b4 07             		b[r3++=0x1] = r4
                               	}			  ## descriptor.c:79:5
    4fc4:    43 3c             	r3 = 0x1c			  ## descriptor.c:79:5
    4fc6:    04 9f             	goto 0x3e <.GJTIE109_0_0_+0x15A : 5006 >			  ## descriptor.c:79:5
    4fc8:    c2 ff 29 46 00 00 	r2 = 0x4629 <MANUFACTURE_STR+0x1B : 4628 >			  ## descriptor.c:85:5
    4fce:    64 16             	r4 = r6			  ## descriptor.c:85:5
    4fd0:    10 88             	rep 0x4 0x9 {			  ## descriptor.c:85:5
    4fd2:    27 07             		r7 = b[r2++=0x1] (u)			  ## descriptor.c:85:5
    4fd4:    c7 07             		b[r4++=0x1] = r7
                               	}			  ## descriptor.c:85:5
    4fd6:    6a 89             	r2 = r6 + 0x9			  ## descriptor.c:85:5
    4fd8:    c4 ff bc 45 00 00 	r4 = 0x45bc <sMassDescriptor : 45bc >			  ## msd.c:125:5
    4fde:    10 96             	rep 0x4 0x17 {			  ## msd.c:125:5
    4fe0:    47 07             		r7 = b[r4++=0x1] (u)			  ## msd.c:125:5
    4fe2:    a7 07             		b[r2++=0x1] = r7
                               	}			  ## msd.c:125:5
    4fe4:    42 20             	r2 = 0x0			  ## msd.c:126:12
    4fe6:    ea 4b             	b[r6+0xb] = r2			  ## msd.c:126:12
    4fe8:    c4 ff e4 4c 00 00 	r4 = 0x4ce4 <msd_itf_hander : 4ce4 >			  ## usb_setup.c:143:31
    4fee:    b4 60             	[r3+0x0] = r4			  ## usb_setup.c:143:31
    4ff0:    4b 20             	r3 = 0x20			  ## usb_setup.c:143:31
    4ff2:    eb 42             	b[r6+0x2] = r3			  ## descriptor.c:99:10
    4ff4:    ea 43             	b[r6+0x3] = r2			  ## descriptor.c:100:10
    4ff6:    42 21             	r2 = 0x1			  ## descriptor.c:101:10
    4ff8:    ea 44             	b[r6+0x4] = r2			  ## descriptor.c:101:10
    4ffa:    04 85             	goto 0xa <.GJTIE109_0_0_+0x15A : 5006 >			  ## descriptor.c:101:10
    4ffc:    c2 ff 04 03 09 04 	r2 = 0x4090304 <RAM_LIMIT_H+0x3EF0304 : 4090304 >			  ## descriptor.c:75:5
    5002:    e2 60             	[r6+0x0] = r2			  ## descriptor.c:75:5
    5004:    43 24             	r3 = 0x4			  ## descriptor.c:75:5
    5006:    d0 ec 9d 60       	[r9+0xc] = r6
    500a:    d0 e1 00 0b       	r1_r0 >>= 0x30			  ## usb_setup.c:190:5
    500e:    32 16             	r2 = r3			  ## usb_setup.c:90:13
    5010:    90 ec 00 03       	if (r0 <= r3) {			  ## usb_setup.c:90:13
    5014:    02 16             		r2 = r0
                               	}			  ## usb_setup.c:90:13
    5016:    50 ed 93 20       	h[r9+0x2] = r2			  ## usb_setup.c:89:32
    501a:    42 21             	r2 = 0x1			  ## usb_setup.c:90:36
    501c:    90 ec 00 03       	if (r0 <= r3) {			  ## usb_setup.c:90:36
    5020:    42 20             		r2 = 0x0
                               	}			  ## usb_setup.c:90:36
    5022:    52 ee 96 20       	b[r9+0x6] = r2			  ## usb_setup.c:90:36
    5026:    40 ea 40 80       	[r8+0x0] = 0x40			  ## usb_phy.c:70:22
    502a:    bf ea 7c fe       	call -0x308 <ep0_stage_tx : 4d26 >
    502e:    90 e1 f2 6e       	r6 = r15 & r14			  ## usb_onchip.c:46:13
    5032:    44 21             	r4 = 0x1
    5034:    c7 ff 94 14 18 00 	r7 = 0x181494 <usb_interrupt_tx : 181494 >
    503a:    04 8a             	goto 0x14 <.GJTIE109_0_0_+0x1A4 : 5050 >
    503c:    94 e1 52 04       	r0 = r5 & (1 << r4)			  ## usb_onchip.c:65:13
    5040:    00 46             	if (r0 == 0) goto 0xc <.GJTIE109_0_0_+0x1A2 : 504e >			  ## usb_onchip.c:65:13
    5042:    d8 ec 7a 14       	r1 = [r7+r4<<2]			  ## usb_onchip.c:66:17
    5046:    b1 e8 00 40       	if (r1 != 0x0) {			  ## usb_onchip.c:66:17
    504a:    40 16             		r0 = r4			  ## usb_onchip.c:67:17
    504c:    c1 00             		call r1
                               	}			  ## usb_onchip.c:67:17
    504e:    c4 21             	r4 += 0x1			  ## usb_onchip.c:64:37
    5050:    84 f8 f4 0f       	if (r4 != 0x7) goto -0x18 <.GJTIE109_0_0_+0x190 : 503c >			  ## usb_onchip.c:64:5
    5054:    44 21             	r4 = 0x1
    5056:    c5 ff b0 14 18 00 	r5 = 0x1814b0 <usb_interrupt_rx : 1814b0 >
    505c:    04 8a             	goto 0x14 <.GJTIE109_0_0_+0x1C6 : 5072 >
    505e:    94 e1 62 04       	r0 = r6 & (1 << r4)			  ## usb_onchip.c:72:13
    5062:    00 46             	if (r0 == 0) goto 0xc <.GJTIE109_0_0_+0x1C4 : 5070 >			  ## usb_onchip.c:72:13
    5064:    d8 ec 5a 14       	r1 = [r5+r4<<2]			  ## usb_onchip.c:73:17
    5068:    b1 e8 00 40       	if (r1 != 0x0) {			  ## usb_onchip.c:73:17
    506c:    40 16             		r0 = r4			  ## usb_onchip.c:74:17
    506e:    c1 00             		call r1
                               	}			  ## usb_onchip.c:74:17
    5070:    c4 21             	r4 += 0x1			  ## usb_onchip.c:71:37
    5072:    84 f8 f4 0f       	if (r4 != 0x7) goto -0x18 <.GJTIE109_0_0_+0x1B2 : 505e >
    5076:    02 82             	sp += 0x8
    5078:    d4 e8 ff ff       	{r15-r0} = [sp++]			  ## usb_onchip.c:79:1
    507c:    a9 04             	{psr, rets, reti} = [sp++]			  ## usb_onchip.c:79:1
    507e:    81 00             	rti			  ## usb_onchip.c:79:1


usb_code_end:
    5080:    68 24             	r0 = 0xa4			  ## cvsd_codec.c:29:0
    5082:    80 00             	rts			  ## cvsd_codec.c:30:5


btcvsd_init:
    5084:    75 04             	[--sp] = {rets, r5, r4}			  ## cvsd_codec.c:34:0
    5086:    04 16             	r4 = r0			  ## cvsd_codec.c:34:0
    5088:    41 20             	r1 = 0x0			  ## cvsd_codec.c:36:5
    508a:    6a 24             	r2 = 0xa4			  ## cvsd_codec.c:36:5
    508c:    45 20             	r5 = 0x0			  ## cvsd_codec.c:36:5
    508e:    80 ff 92 f1 ff ff 	call -0xe6e <memset : 4226 >			  ## cvsd_codec.c:36:5
    5094:    40 e0 00 28       	r0 = 0x2800 <TLB_SIZE : 2800 >			  ## cvsd_codec.c:38:35
    5098:    01 e1 40 40       	r1 = r4 + 0x40			  ## cvsd_codec.c:38:35
    509c:    90 62             	[r1+0x8] = r0			  ## cvsd_codec.c:38:35
    509e:    42 21             	r2 = 0x1			  ## cvsd_codec.c:39:33
    50a0:    9a 41             	b[r1+0x1] = r2			  ## cvsd_codec.c:39:33
    50a2:    95 61             	[r1+0x4] = r5			  ## cvsd_codec.c:40:34
    50a4:    90 65             	[r1+0x14] = r0			  ## cvsd_codec.c:42:35
    50a6:    9a 4d             	b[r1+0xd] = r2			  ## cvsd_codec.c:43:33
    50a8:    40 20             	r0 = 0x0			  ## cvsd_codec.c:46:5
    50aa:    95 64             	[r1+0x10] = r5			  ## cvsd_codec.c:44:34
    50ac:    55 04             	{pc, r5, r4} = [sp++]			  ## cvsd_codec.c:46:5


CVSD_StudentEncode:
    50ae:    78 04             	[--sp] = {rets, r8-r4}			  ## cvsd_codec.c:235:0
    50b0:    42 20             	r2 = 0x0			  ## cvsd_codec.c:235:0
    50b2:    48 f0 ff 03       	r8 = 0x3ff  # <ROM_RAM_SIZE+0x1FE : 3fe >			  ## cvsd_codec.c:235:0
    50b6:    9a 40             		 b[r1+0x0] = r2			  ## cvsd_codec.c:240:26
    50b8:    43 21             	r3 = 0x1
    50ba:    24 8a             	goto 0x94 <CVSD_StudentEncode+0xA2 : 5150 >
    50bc:    1c 41             	r4 = b[r1+0x1] (u)			  ## cvsd_codec.c:242:43
    50be:    44 a1             	r4 = r4 << 0x1			  ## cvsd_codec.c:242:50
    50c0:    66 e1 0e 40       	r6 = r4 & 0xE			  ## cvsd_codec.c:242:56
    50c4:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:242:28
    50c6:    d8 ec 0a 42       	r4 = [r0+r2<<2]			  ## cvsd_codec.c:243:14
    50ca:    15 61             	r5 = [r1+0x4] 			  ## cvsd_codec.c:243:53
    50cc:    44 aa             	r4 = r4 << 0xa			  ## cvsd_codec.c:243:24
    50ce:    05 ed 10 40       	ifs (r4 >= r5) goto 0x20 <CVSD_StudentEncode+0x44 : 50f2 >			  ## cvsd_codec.c:243:24
    50d2:    36 20             	r6 |= 0x1			  ## cvsd_codec.c:259:53
    50d4:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:259:32
    50d6:    1c 40             	r4 = b[r1+0x0] (u)			  ## cvsd_codec.c:260:36
    50d8:    34 19             	r4 |= r3			  ## cvsd_codec.c:260:57
    50da:    9c 40             	b[r1+0x0] = r4			  ## cvsd_codec.c:260:34
    50dc:    14 62             	r4 = [r1+0x8] 			  ## cvsd_codec.c:260:34
    50de:    86 f8 16 1e       	if (r6 != 0xf) goto 0x2c <CVSD_StudentEncode+0x60 : 510e >			  ## cvsd_codec.c:261:17
    50e2:    e6 e0 20 4d       	r6 = r4 + 0x2800			  ## cvsd_codec.c:262:61
    50e6:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:262:38
    50e8:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:262:38
    50ec:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:263:21
    50f0:    04 99             	goto 0x32 <CVSD_StudentEncode+0x76 : 5124 >			  ## cvsd_codec.c:263:21
    50f2:    14 62             	r4 = [r1+0x8] 
    50f4:    06 5a             	if (r6 == 0) goto 0x34 <CVSD_StudentEncode+0x7C : 512a >
    50f6:    36 e1 01 8e       	r6 = r8 + -0x1ff			  ## cvsd_codec.c:251:23
    50fa:    47 20             	r7 = 0x0			  ## cvsd_codec.c:251:23
    50fc:    fc e1 40 68       	r7_r6 += r4 * r8 (u)			  ## cvsd_codec.c:251:23
    5100:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:252:46
    5104:    a6 ec 20 0d       	if (r6 <= 0x2800) {
    5108:    46 e0 00 28       		r6 = 0x2800
                               	} <TLB_SIZE : 2800 >			  ## cvsd_codec.c:253:21
    510c:    04 95             	goto 0x2a <CVSD_StudentEncode+0x8A : 5138 >			  ## cvsd_codec.c:253:21
    510e:    36 e1 01 8e       	r6 = r8 + -0x1ff			  ## cvsd_codec.c:268:23
    5112:    47 20             	r7 = 0x0			  ## cvsd_codec.c:268:23
    5114:    fc e1 40 68       	r7_r6 += r4 * r8 (u)			  ## cvsd_codec.c:268:23
    5118:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:269:46
    511c:    a6 ec 20 0d       	if (r6 <= 0x2800) {
    5120:    46 e0 00 28       		r6 = 0x2800
                               	} <TLB_SIZE : 2800 >			  ## cvsd_codec.c:270:21
    5124:    d5 df             	r5 = r5 - r6  #			  ## cvsd_codec.c:274:55
    5126:    96 62             		 [r1+0x8] = r6			  ## cvsd_codec.c:274:55
    5128:    04 89             	goto 0x12 <CVSD_StudentEncode+0x8E : 513c >			  ## cvsd_codec.c:274:55
    512a:    e6 e0 20 4d       	r6 = r4 + 0x2800			  ## cvsd_codec.c:245:61
    512e:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:245:38
    5130:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:245:38
    5134:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:246:21
    5138:    65 d8             	r5 += r6  #			  ## cvsd_codec.c:257:55
    513a:    96 62             		 [r1+0x8] = r6			  ## cvsd_codec.c:257:55
    513c:    95 61             	[r1+0x4] = r5
    513e:    5d a6             	r5 = r5 <<< 0x6			  ## cvsd_codec.c:285:13
    5140:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:285:13
    5142:    e4 e1 1f 50       	r4 = r5 * 0x1F			  ## cvsd_codec.c:297:52
    5146:    c4 30             	r4 += 0x10			  ## cvsd_codec.c:297:57
    5148:    cc a5             	r4 = r4 >>> 0x5			  ## cvsd_codec.c:297:63
    514a:    94 61             	[r1+0x4] = r4			  ## cvsd_codec.c:297:29
    514c:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:241:35
    514e:    33 a1             	r3 = r3 << 0x1			  ## cvsd_codec.c:298:19
    5150:    82 f8 b4 11       	if (r2 != 0x8) goto -0x98 <CVSD_StudentEncode+0xE : 50bc >
    5154:    58 04             	{pc, r8-r4} = [sp++]			  ## cvsd_codec.c:302:1


cvsd_encode:
    5156:    7e 04             	[--sp] = {rets, r14-r4}			  ## cvsd_codec.c:373:0
    5158:    04 e1 40 00       	r4 = r0 + 0x40			  ## cvsd_codec.c:377:23
    515c:    3c d6             	r12 = r3  #			  ## cvsd_codec.c:377:23
    515e:    4e 61             		 r6 = h[r4+0x2] (u)			  ## cvsd_codec.c:377:30
    5160:    2a 16             	r10 = r2
    5162:    1b 16             	r11 = r1
    5164:    86 f8 9c 02       	if (r6 != 0x1) goto 0x138 <cvsd_encode+0x14A : 52a0 >
    5168:    08 e1 18 00       	r8 = r0 + 0x18			  ## cvsd_codec.c:374:9
    516c:    09 e1 08 00       	r9 = r0 + 0x8			  ## cvsd_codec.c:374:9
    5170:    c6 14             	r14 = 0			  ## cvsd_codec.c:374:9
    5172:    c5 14             	r13 = 0			  ## cvsd_codec.c:374:9
    5174:    44 92             	goto 0x124 <cvsd_encode+0x144 : 529a >			  ## cvsd_codec.c:374:9
    5176:    d8 ed ba 2d       	r2 = h[r11+r13<<1] (s)			  ## cvsd_codec.c:118:30
    517a:    41 20             	r1 = 0x0			  ## cvsd_codec.c:118:30
    517c:    20 eb 06 00       	[r0+] = {r2, r1}			  ## cvsd_codec.c:117:28
    5180:    14 83             	goto 0x46 <cvsd_encode+0x72 : 51c8 >
    5182:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
    5186:    43 67             	r3 = [r4+0x1c] 			  ## cvsd_codec.c:55:15
    5188:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
    518a:    e5 e1 54 20       	r5 = r2 * 0x54			  ## cvsd_codec.c:56:27
    518e:    cd 20             	r5 += 0x20			  ## cvsd_codec.c:56:37
    5190:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:56:43
    5192:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:56:49
    5194:    c3 67             	[r4+0x1c] = r3			  ## cvsd_codec.c:56:19
    5196:    45 69             	r5 = [r4+0x24] 			  ## cvsd_codec.c:59:27
    5198:    47 68             	r7 = [r4+0x20] 			  ## cvsd_codec.c:59:15
    519a:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:59:25
    519c:    e6 e1 4d 50       	r6 = r5 * 0x4D			  ## cvsd_codec.c:60:27
    51a0:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:60:37
    51a2:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:60:43
    51a4:    ee 1f             	r6 = r6 - r7			  ## cvsd_codec.c:60:49
    51a6:    6d df             	r5 = r6 - r5  #			  ## cvsd_codec.c:61:26
    51a8:    c6 68             		 [r4+0x20] = r6			  ## cvsd_codec.c:60:19
    51aa:    d8 ec 0a 71       	r7 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
    51ae:    de 1f             	r6 = r5 - r7			  ## cvsd_codec.c:63:20
    51b0:    e7 e1 18 60       	r7 = r6 * 0x18			  ## cvsd_codec.c:64:27
    51b4:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
    51b6:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
    51b8:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:64:49
    51ba:    b2 de             	r2 = r3 - r2  #			  ## cvsd_codec.c:65:26
    51bc:    c5 69             		 [r4+0x24] = r5			  ## cvsd_codec.c:64:19
    51be:    a2 1f             	r2 = r2 - r6			  ## cvsd_codec.c:57:26
    51c0:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
    51c2:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
    51c6:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
    51c8:    81 f8 db 05       	if (r1 != 0x2) goto -0x4a <cvsd_encode+0x2C : 5182 >			  ## cvsd_codec.c:54:5
    51cc:    41 21             	r1 = 0x1
    51ce:    92 16             	r2 = r9
    51d0:    04 86             	goto 0xc <cvsd_encode+0x88 : 51de >
    51d2:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## cvsd_codec.c:121:42
    51d6:    a3 61             	[r2+0x4] = r3			  ## cvsd_codec.c:121:40
    51d8:    df ec 29 ef       	[r2++=-0x8] = r14			  ## cvsd_codec.c:122:36
    51dc:    f9 3f             	r1 += -0x1			  ## cvsd_codec.c:120:26
    51de:    71 fe f8 ff       	ifs (r1 > -0x1) goto -0x10 <cvsd_encode+0x7C : 51d2 >			  ## cvsd_codec.c:120:5
    51e2:    41 20             	r1 = 0x0
    51e4:    14 82             	goto 0x44 <cvsd_encode+0xD4 : 522a >
    51e6:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
    51ea:    43 6a             	r3 = [r4+0x28] 			  ## cvsd_codec.c:55:15
    51ec:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
    51ee:    e5 e1 60 20       	r5 = r2 * 0x60			  ## cvsd_codec.c:56:27
    51f2:    cd 20             	r5 += 0x20			  ## cvsd_codec.c:56:37
    51f4:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:56:43
    51f6:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:56:49
    51f8:    c3 6a             	[r4+0x28] = r3			  ## cvsd_codec.c:56:19
    51fa:    45 6c             	r5 = [r4+0x30] 			  ## cvsd_codec.c:59:27
    51fc:    46 6b             	r6 = [r4+0x2c] 			  ## cvsd_codec.c:59:15
    51fe:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:59:25
    5200:    e7 e1 60 50       	r7 = r5 * 0x60			  ## cvsd_codec.c:60:27
    5204:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:60:37
    5206:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:60:43
    5208:    f6 1f             	r6 = r7 - r6			  ## cvsd_codec.c:60:49
    520a:    6d df             	r5 = r6 - r5  #			  ## cvsd_codec.c:61:26
    520c:    c6 6b             		 [r4+0x2c] = r6			  ## cvsd_codec.c:60:19
    520e:    d8 ec 0a 71       	r7 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
    5212:    de 1f             	r6 = r5 - r7			  ## cvsd_codec.c:63:20
    5214:    67 a5             	r7 = r6 << 0x5			  ## cvsd_codec.c:64:27
    5216:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
    5218:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
    521a:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:64:49
    521c:    b2 de             	r2 = r3 - r2  #			  ## cvsd_codec.c:65:26
    521e:    c5 6c             		 [r4+0x30] = r5			  ## cvsd_codec.c:64:19
    5220:    a2 1f             	r2 = r2 - r6			  ## cvsd_codec.c:57:26
    5222:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
    5224:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
    5228:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
    522a:    81 f8 dc 09       	if (r1 != 0x4) goto -0x48 <cvsd_encode+0x90 : 51e6 >			  ## cvsd_codec.c:54:5
    522e:    41 23             	r1 = 0x3
    5230:    82 16             	r2 = r8
    5232:    04 86             	goto 0xc <cvsd_encode+0xEA : 5240 >
    5234:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## cvsd_codec.c:126:42
    5238:    a3 61             	[r2+0x4] = r3			  ## cvsd_codec.c:126:40
    523a:    df ec 29 ef       	[r2++=-0x8] = r14			  ## cvsd_codec.c:127:36
    523e:    f9 3f             	r1 += -0x1			  ## cvsd_codec.c:125:26
    5240:    71 fe f8 ff       	ifs (r1 > -0x1) goto -0x10 <cvsd_encode+0xDE : 5234 >			  ## cvsd_codec.c:125:5
    5244:    41 20             	r1 = 0x0
    5246:    04 99             	goto 0x32 <cvsd_encode+0x124 : 527a >
    5248:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
    524c:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## cvsd_codec.c:56:49
    5250:    43 6d             		 r3 = [r4+0x34] 			  ## cvsd_codec.c:55:15
    5252:    c2 6d             	[r4+0x34] = r2			  ## cvsd_codec.c:56:19
    5254:    42 6f             	r2 = [r4+0x3c] 			  ## cvsd_codec.c:59:27
    5256:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## cvsd_codec.c:60:49
    525a:    45 6e             		 r5 = [r4+0x38] 			  ## cvsd_codec.c:59:15
    525c:    c2 6e             	[r4+0x38] = r2			  ## cvsd_codec.c:60:19
    525e:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
    5262:    52 18             	r2 += r5			  ## cvsd_codec.c:63:20
    5264:    26 a5             	r6 = r2 << 0x5			  ## cvsd_codec.c:64:37
    5266:    a6 e0 20 60       	r6 = 0x20 - r6			  ## cvsd_codec.c:64:37
    526a:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
    526c:    65 18             	r5 += r6			  ## cvsd_codec.c:64:49
    526e:    aa de             	r2 = r2 - r3  #			  ## cvsd_codec.c:57:26
    5270:    c5 6f             		 [r4+0x3c] = r5			  ## cvsd_codec.c:64:19
    5272:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
    5274:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
    5278:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
    527a:    81 f8 e5 11       	if (r1 != 0x8) goto -0x36 <cvsd_encode+0xF2 : 5248 >
    527e:    01 16             	r1 = r0			  ## cvsd_codec.c:142:9
    5280:    30 87             	rep 0x8 0x8 {			  ## cvsd_codec.c:142:9
    5282:    12 60             		r2 = [r1+0x0] 			  ## cvsd_codec.c:142:9
    5284:    78 e0 01 22       		r2 = sat16(r2) (s)			  ## cvsd_codec.c:142:9
    5288:    92 05             		[r1++=0x4] = r2
                               	}			  ## cvsd_codec.c:142:9
    528a:    41 16             	r1 = r4			  ## cvsd_codec.c:380:13
    528c:    bf ea 0f ff       	call -0x1e2 <CVSD_StudentEncode : 50ae >			  ## cvsd_codec.c:380:13
    5290:    49 40             	r1 = b[r4+0x0] (u)			  ## cvsd_codec.c:381:47
    5292:    d8 ee a1 1d       	b[r10+r13] = r1			  ## cvsd_codec.c:381:24
    5296:    0d e1 01 d0       	r13 = r13 + 0x1			  ## cvsd_codec.c:378:31
    529a:    8c ed 6c d1       	ifs (r13 < r12) goto -0x128 <cvsd_encode+0x20 : 5176 >
    529e:    04 9c             	goto 0x38 <cvsd_encode+0x182 : 52d8 >
    52a0:    46 20             	r6 = 0x0
    52a2:    04 98             	goto 0x30 <cvsd_encode+0x17E : 52d4 >
    52a4:    d8 ed ba 16       	r1 = h[r11+r6<<1] (s)			  ## cvsd_codec.c:89:14
    52a8:    54 ed 08 25       	r2 = h[r0+0x58] (s)			  ## cvsd_codec.c:89:23
    52ac:    97 1e             	r7 = r1 - r2			  ## cvsd_codec.c:89:21
    52ae:    7b 87             	r3 = r7 + 0x7			  ## cvsd_codec.c:91:15
    52b0:    37 ed 00 00       	ifs (r7 >= 0x0) {
    52b4:    73 16             		r3 = r7
                               	}			  ## cvsd_codec.c:90:9
    52b6:    bb a3             	r3 = r3 >>> 0x3			  ## cvsd_codec.c:93:11
    52b8:    05 16             	r5 = r0			  ## cvsd_codec.c:94:5
    52ba:    af 1c             	r7 = r2 + r3			  ## cvsd_codec.c:94:5
    52bc:    10 86             	rep 0x4 0x7 {			  ## cvsd_codec.c:94:5
    52be:    ff dc             		r7 = r7 + r3  #			  ## cvsd_codec.c:94:5
    52c0:    d7 05             			 [r5++=0x4] = r7
                               	}			  ## cvsd_codec.c:94:5
    52c2:    d7 05             	[r5++=0x4] = r7			  ## cvsd_codec.c:94:5
    52c4:    41 d6             	r1 = r4  #			  ## cvsd_codec.c:386:13
    52c6:    c9 6c             		 h[r4+0x18] = r1			  ## cvsd_codec.c:107:28
    52c8:    bf ea f1 fe       	call -0x21e <CVSD_StudentEncode : 50ae >			  ## cvsd_codec.c:386:13
    52cc:    49 40             	r1 = b[r4+0x0] (u)			  ## cvsd_codec.c:387:47
    52ce:    d8 ee a1 16       	b[r10+r6] = r1			  ## cvsd_codec.c:387:24
    52d2:    c6 21             	r6 += 0x1			  ## cvsd_codec.c:384:31
    52d4:    8c ed e6 61       	ifs (r6 < r12) goto -0x34 <cvsd_encode+0x14E : 52a4 >
    52d8:    40 20             	r0 = 0x0			  ## cvsd_codec.c:391:5
    52da:    5e 04             	{pc, r14-r4} = [sp++]			  ## cvsd_codec.c:391:5


CVSD_StudentDecode:
    52dc:    78 04             	[--sp] = {rets, r8-r4}			  ## cvsd_codec.c:305:0
    52de:    42 20             	r2 = 0x0			  ## cvsd_codec.c:305:0
    52e0:    48 e0 ff 03       	r8 = 0x3ff <ROM_RAM_SIZE+0x1FE : 3fe >			  ## cvsd_codec.c:305:0
    52e4:    04 e1 00 22       	r4 = r2 + 0x200			  ## cvsd_codec.c:305:0
    52e8:    45 20             	r5 = 0x0			  ## cvsd_codec.c:305:0
    52ea:    24 8a             	goto 0x94 <CVSD_StudentDecode+0xA4 : 5380 >			  ## cvsd_codec.c:305:0
    52ec:    1b 40             	r3 = b[r1+0x0] (u)			  ## cvsd_codec.c:312:16
    52ee:    a3 da             	r3 >>= r2  #			  ## cvsd_codec.c:312:37
    52f0:    1e 41             		 r6 = b[r1+0x1] (u)			  ## cvsd_codec.c:313:32
    52f2:    67 e1 01 30       	r7 = r3 & 0x1			  ## cvsd_codec.c:312:15
    52f6:    66 a1             	r6 = r6 << 0x1			  ## cvsd_codec.c:313:51
    52f8:    66 e1 0e 60       	r6 = r6 & 0xE			  ## cvsd_codec.c:313:57
    52fc:    76 19             	r6 |= r7			  ## cvsd_codec.c:313:65
    52fe:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:313:28
    5300:    53 e8 0d 02       	if ((r3 & 0x1) != 0) goto 0x1a <CVSD_StudentDecode+0x42 : 531e >			  ## cvsd_codec.c:314:13
    5304:    13 62             	r3 = [r1+0x8] 
    5306:    16 44             	if (r6 == 0) goto 0x48 <CVSD_StudentDecode+0x74 : 5350 >
    5308:    46 16             	r6 = r4			  ## cvsd_codec.c:322:23
    530a:    47 20             	r7 = 0x0			  ## cvsd_codec.c:322:23
    530c:    fc e1 30 68       	r7_r6 += r3 * r8 (u)			  ## cvsd_codec.c:322:23
    5310:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:323:46
    5314:    a6 ec 20 0d       	if (r6 <= 0x2800) {
    5318:    46 e0 00 28       		r6 = 0x2800
                               	} <TLB_SIZE : 2800 >			  ## cvsd_codec.c:324:21
    531c:    14 80             	goto 0x40 <CVSD_StudentDecode+0x82 : 535e >			  ## cvsd_codec.c:324:21
    531e:    13 62             	r3 = [r1+0x8] 
    5320:    86 f8 08 1e       	if (r6 != 0xf) goto 0x10 <CVSD_StudentDecode+0x58 : 5334 >			  ## cvsd_codec.c:331:17
    5324:    e6 e0 20 3d       	r6 = r3 + 0x2800			  ## cvsd_codec.c:332:61
    5328:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:332:38
    532a:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:332:38
    532e:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:333:21
    5332:    04 8a             	goto 0x14 <CVSD_StudentDecode+0x6C : 5348 >			  ## cvsd_codec.c:333:21
    5334:    46 16             	r6 = r4			  ## cvsd_codec.c:338:23
    5336:    47 20             	r7 = 0x0			  ## cvsd_codec.c:338:23
    5338:    fc e1 30 68       	r7_r6 += r3 * r8 (u)			  ## cvsd_codec.c:338:23
    533c:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:339:46
    5340:    a6 ec 20 0d       	if (r6 <= 0x2800) {
    5344:    46 e0 00 28       		r6 = 0x2800
                               	} <TLB_SIZE : 2800 >			  ## cvsd_codec.c:340:21
    5348:    96 62             	[r1+0x8] = r6
    534a:    13 61             	r3 = [r1+0x4] 			  ## cvsd_codec.c:344:48
    534c:    b6 1f             	r6 = r3 - r6			  ## cvsd_codec.c:344:56
    534e:    04 8a             	goto 0x14 <CVSD_StudentDecode+0x88 : 5364 >			  ## cvsd_codec.c:344:56
    5350:    e6 e0 20 3d       	r6 = r3 + 0x2800			  ## cvsd_codec.c:316:61
    5354:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:316:38
    5356:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:316:38
    535a:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:317:21
    535e:    96 62             	[r1+0x8] = r6
    5360:    13 61             	r3 = [r1+0x4] 			  ## cvsd_codec.c:329:47
    5362:    36 18             	r6 += r3			  ## cvsd_codec.c:329:55
    5364:    96 61             	[r1+0x4] = r6
    5366:    6e a6             	r6 = r6 <<< 0x6			  ## cvsd_codec.c:354:13
    5368:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:354:13
    536a:    e3 e1 1f 60       	r3 = r6 * 0x1F			  ## cvsd_codec.c:366:52
    536e:    c3 30             	r3 += 0x10			  ## cvsd_codec.c:366:57
    5370:    bb a5             	r3 = r3 >>> 0x5			  ## cvsd_codec.c:366:63
    5372:    03 f1 00 32       	r3 = r3 + 0x200  #			  ## cvsd_codec.c:367:42
    5376:    93 61             		 [r1+0x4] = r3			  ## cvsd_codec.c:366:29
    5378:    bb aa             	r3 = r3 >>> 0xa			  ## cvsd_codec.c:367:68
    537a:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:367:19
    537e:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:311:35
    5380:    82 f8 b4 11       	if (r2 != 0x8) goto -0x98 <CVSD_StudentDecode+0x10 : 52ec >
    5384:    58 04             	{pc, r8-r4} = [sp++]			  ## cvsd_codec.c:370:1


cvsd_decode:
    5386:    7e 04             	[--sp] = {rets, r14-r4}			  ## cvsd_codec.c:395:0
    5388:    0d 16             	r13 = r0			  ## cvsd_codec.c:395:0
    538a:    0e e1 4c 00       	r14 = r0 + 0x4c			  ## cvsd_codec.c:399:23
    538e:    50 ed e2 50       	r5 = h[r14+0x2] (u)			  ## cvsd_codec.c:399:30
    5392:    3a 16             	r10 = r3
    5394:    28 16             	r8 = r2
    5396:    19 16             	r9 = r1
    5398:    c8 20             	r0 += 0x20
    539a:    85 f8 a8 02       	if (r5 != 0x1) goto 0x150 <cvsd_decode+0x168 : 54ee >
    539e:    c3 14             	r11 = 0
    53a0:    4c e0 02 00       	r12 = 0x2 <mem_code_size+0x2 : 2 >
    53a4:    54 81             	goto 0x142 <cvsd_decode+0x162 : 54e8 >
    53a6:    d8 ee 90 1b       	r1 = b[r9+r11] (u)			  ## cvsd_codec.c:401:45
    53aa:    52 ee e0 10       	b[r14+0x0] = r1			  ## cvsd_codec.c:401:43
    53ae:    e1 16             	r1 = r14			  ## cvsd_codec.c:402:13
    53b0:    41 95             	call -0xd6 <CVSD_StudentDecode : 52dc >			  ## cvsd_codec.c:402:13
    53b2:    42 20             	r2 = 0x0
    53b4:    04 99             	goto 0x32 <cvsd_decode+0x62 : 53e8 >
    53b6:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:55:27
    53ba:    a3 f0 00 30       	r3 = 0x0 - r3  #			  ## cvsd_codec.c:56:49
    53be:    17 63             		 r7 = [r1+0xc] 			  ## cvsd_codec.c:55:15
    53c0:    93 63             	[r1+0xc] = r3			  ## cvsd_codec.c:56:19
    53c2:    13 65             	r3 = [r1+0x14] 			  ## cvsd_codec.c:59:27
    53c4:    a3 f0 00 30       	r3 = 0x0 - r3  #			  ## cvsd_codec.c:60:49
    53c8:    15 64             		 r5 = [r1+0x10] 			  ## cvsd_codec.c:59:15
    53ca:    93 64             	[r1+0x10] = r3			  ## cvsd_codec.c:60:19
    53cc:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:63:22
    53d0:    53 18             	r3 += r5			  ## cvsd_codec.c:63:20
    53d2:    36 a5             	r6 = r3 << 0x5			  ## cvsd_codec.c:64:37
    53d4:    a6 e0 20 60       	r6 = 0x20 - r6			  ## cvsd_codec.c:64:37
    53d8:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
    53da:    65 18             	r5 += r6			  ## cvsd_codec.c:64:49
    53dc:    b9 df             	r1 = r3 - r7  #			  ## cvsd_codec.c:57:26
    53de:    95 65             		 [r1+0x14] = r5			  ## cvsd_codec.c:64:19
    53e0:    51 18             	r1 += r5			  ## cvsd_codec.c:67:27
    53e2:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## cvsd_codec.c:67:20
    53e6:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:54:27
    53e8:    01 e1 8c d0       	r1 = r13 + 0x8c
    53ec:    82 f8 e3 11       	if (r2 != 0x8) goto -0x3a <cvsd_decode+0x30 : 53b6 >			  ## cvsd_codec.c:54:5
    53f0:    82 14             	r3_r2 = 0
    53f2:    04 88             	goto 0x10 <cvsd_decode+0x7E : 5404 >
    53f4:    d8 ec 02 52       	r5 = [r0+r2]			  ## cvsd_codec.c:196:35
    53f8:    f4 e1 51 5c       	r5 = r5 / r12 (s)			  ## cvsd_codec.c:196:63
    53fc:    d8 ec 0b 53       	[r0+r3<<2] = r5			  ## cvsd_codec.c:196:33
    5400:    c2 28             	r2 += 0x8			  ## cvsd_codec.c:195:5
    5402:    c3 21             	r3 += 0x1			  ## cvsd_codec.c:195:25
    5404:    83 f8 f6 09       	if (r3 != 0x4) goto -0x14 <cvsd_decode+0x6E : 53f4 >			  ## cvsd_codec.c:195:5
    5408:    42 20             	r2 = 0x0
    540a:    14 82             	goto 0x44 <cvsd_decode+0xCA : 5450 >
    540c:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:55:27
    5410:    15 60             	r5 = [r1+0x0] 			  ## cvsd_codec.c:55:15
    5412:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:55:25
    5414:    e6 e1 60 30       	r6 = r3 * 0x60			  ## cvsd_codec.c:56:27
    5418:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:56:37
    541a:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:56:43
    541c:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:56:49
    541e:    95 60             	[r1+0x0] = r5			  ## cvsd_codec.c:56:19
    5420:    16 62             	r6 = [r1+0x8] 			  ## cvsd_codec.c:59:27
    5422:    17 61             	r7 = [r1+0x4] 			  ## cvsd_codec.c:59:15
    5424:    f6 1f             	r6 = r7 - r6			  ## cvsd_codec.c:59:25
    5426:    e4 e1 60 60       	r4 = r6 * 0x60			  ## cvsd_codec.c:60:27
    542a:    cc 20             	r4 += 0x20			  ## cvsd_codec.c:60:37
    542c:    cc a6             	r4 = r4 >>> 0x6			  ## cvsd_codec.c:60:43
    542e:    cc 1f             	r4 = r4 - r7			  ## cvsd_codec.c:60:49
    5430:    c4 df             	r4 = r4 - r6  #			  ## cvsd_codec.c:61:26
    5432:    94 61             		 [r1+0x4] = r4			  ## cvsd_codec.c:60:19
    5434:    d8 ec 0a 72       	r7 = [r0+r2<<2]			  ## cvsd_codec.c:63:22
    5438:    ce 1f             	r6 = r4 - r7			  ## cvsd_codec.c:63:20
    543a:    67 a5             	r7 = r6 << 0x5			  ## cvsd_codec.c:64:27
    543c:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
    543e:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
    5440:    74 1f             	r4 = r7 - r4			  ## cvsd_codec.c:64:49
    5442:    db de             	r3 = r5 - r3  #			  ## cvsd_codec.c:65:26
    5444:    94 62             		 [r1+0x8] = r4			  ## cvsd_codec.c:64:19
    5446:    b3 1f             	r3 = r3 - r6			  ## cvsd_codec.c:57:26
    5448:    43 18             	r3 += r4			  ## cvsd_codec.c:67:27
    544a:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:67:20
    544e:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:54:27
    5450:    82 f8 dc 09       	if (r2 != 0x4) goto -0x48 <cvsd_decode+0x86 : 540c >			  ## cvsd_codec.c:54:5
    5454:    41 20             	r1 = 0x0
    5456:    42 20             	r2 = 0x0
    5458:    04 88             	goto 0x10 <cvsd_decode+0xE4 : 546a >
    545a:    d8 ec 02 31       	r3 = [r0+r1]			  ## cvsd_codec.c:200:35
    545e:    f4 e1 31 3c       	r3 = r3 / r12 (s)			  ## cvsd_codec.c:200:63
    5462:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:200:33
    5466:    c1 28             	r1 += 0x8			  ## cvsd_codec.c:199:5
    5468:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:199:25
    546a:    82 f8 f6 05       	if (r2 != 0x2) goto -0x14 <cvsd_decode+0xD4 : 545a >			  ## cvsd_codec.c:199:5
    546e:    41 20             	r1 = 0x0
    5470:    14 89             	goto 0x52 <cvsd_decode+0x13E : 54c4 >
    5472:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
    5476:    d0 ec e4 33       	r3 = [r14+0x34]			  ## cvsd_codec.c:55:15
    547a:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
    547c:    e4 e1 54 20       	r4 = r2 * 0x54			  ## cvsd_codec.c:56:27
    5480:    cc 20             	r4 += 0x20			  ## cvsd_codec.c:56:37
    5482:    cc a6             	r4 = r4 >>> 0x6			  ## cvsd_codec.c:56:43
    5484:    cb 1e             	r3 = r4 - r3			  ## cvsd_codec.c:56:49
    5486:    d0 ec e5 33       	[r14+0x34] = r3			  ## cvsd_codec.c:56:19
    548a:    d0 ec ec 43       	r4 = [r14+0x3c]			  ## cvsd_codec.c:59:27
    548e:    d0 ec e8 53       	r5 = [r14+0x38]			  ## cvsd_codec.c:59:15
    5492:    54 1f             	r4 = r5 - r4			  ## cvsd_codec.c:59:25
    5494:    e6 e1 4d 40       	r6 = r4 * 0x4D			  ## cvsd_codec.c:60:27
    5498:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:60:37
    549a:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:60:43
    549c:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:60:49
    549e:    d0 ec e9 53       	[r14+0x38] = r5			  ## cvsd_codec.c:60:19
    54a2:    d8 ec 0a 61       	r6 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
    54a6:    54 1f             	r4 = r5 - r4			  ## cvsd_codec.c:61:26
    54a8:    c5 1f             	r5 = r4 - r6			  ## cvsd_codec.c:63:20
    54aa:    e6 e1 18 50       	r6 = r5 * 0x18			  ## cvsd_codec.c:64:27
    54ae:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:64:37
    54b0:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
    54b2:    64 1f             	r4 = r6 - r4			  ## cvsd_codec.c:64:49
    54b4:    d0 ec ed 43       	[r14+0x3c] = r4			  ## cvsd_codec.c:64:19
    54b8:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:65:26
    54ba:    2a 1f             	r2 = r2 - r5			  ## cvsd_codec.c:57:26
    54bc:    42 18             	r2 += r4			  ## cvsd_codec.c:67:27
    54be:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
    54c2:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
    54c4:    81 f8 d5 05       	if (r1 != 0x2) goto -0x56 <cvsd_decode+0xEC : 5472 >
    54c8:    d0 ec d0 12       	r1 = [r13+0x20]			  ## cvsd_codec.c:224:17
    54cc:    12 16             	r2 = r1			  ## cvsd_codec.c:214:9
    54ce:    ab bf             	r3 = r2 >>> 0x1f			  ## cvsd_codec.c:214:9
    54d0:    d2 e1 31 2c       	r2 = r3_r2 >>> 0x1 (zero)			  ## cvsd_codec.c:214:9
    54d4:    78 e0 01 12       	r1 = sat16(r2) (s)			  ## cvsd_codec.c:214:9
    54d8:    d0 ec d1 12       	[r13+0x20] = r1			  ## cvsd_codec.c:214:9
    54dc:    50 ed ef 10       	h[r14+0xe] = r1			  ## cvsd_codec.c:230:28
    54e0:    d8 ed 89 1b       	h[r8+r11<<1] = r1			  ## cvsd_codec.c:404:24
    54e4:    0b e1 01 b0       	r11 = r11 + 0x1			  ## cvsd_codec.c:400:31
    54e8:    8a ed 5d b1       	ifs (r11 < r10) goto -0x146 <cvsd_decode+0x20 : 53a6 >
    54ec:    04 97             	goto 0x2e <cvsd_decode+0x196 : 551c >
    54ee:    45 20             	r5 = 0x0
    54f0:    04 93             	goto 0x26 <cvsd_decode+0x192 : 5518 >
    54f2:    d8 ee 90 15       	r1 = b[r9+r5] (u)			  ## cvsd_codec.c:408:45
    54f6:    52 ee e0 10       	b[r14+0x0] = r1			  ## cvsd_codec.c:408:43
    54fa:    e1 16             	r1 = r14			  ## cvsd_codec.c:409:13
    54fc:    bf ea ee fe       	call -0x224 <CVSD_StudentDecode : 52dc >			  ## cvsd_codec.c:409:13
    5500:    41 20             	r1 = 0x0			  ## cvsd_codec.c:170:9
    5502:    02 16             	r2 = r0			  ## cvsd_codec.c:170:9
    5504:    23 05             	r3 = [r2++=0x4] 			  ## cvsd_codec.c:170:9
    5506:    10 87             	rep 0x4 0x8 {			  ## cvsd_codec.c:170:9
    5508:    99 dc             		r1 = r1 + r3  #			  ## cvsd_codec.c:170:9
    550a:    23 05             			 r3 = [r2++=0x4] 
                               	}			  ## cvsd_codec.c:170:9
    550c:    91 a3             	r1 = r1 >> 0x3			  ## cvsd_codec.c:181:19
    550e:    50 ed ef 10       	h[r14+0xe] = r1			  ## cvsd_codec.c:184:28
    5512:    d8 ed 89 15       	h[r8+r5<<1] = r1			  ## cvsd_codec.c:411:24
    5516:    c5 21             	r5 += 0x1			  ## cvsd_codec.c:407:31
    5518:    8a ed eb 51       	ifs (r5 < r10) goto -0x2a <cvsd_decode+0x16C : 54f2 >
    551c:    40 20             	r0 = 0x0			  ## cvsd_codec.c:415:5
    551e:    5e 04             	{pc, r14-r4} = [sp++]			  ## cvsd_codec.c:415:5


cvsd_set:
    5520:    81 48             	if (r1 != 0) goto 0x10 <cvsd_set+0x12 : 5532 >			  ## cvsd_codec.c:419:0
    5522:    54 ee 20 10       	r1 = b[r2+0x0] (s)			  ## cvsd_codec.c:425:40
    5526:    50 ed 03 14       	h[r0+0x42] = r1			  ## cvsd_codec.c:425:38
    552a:    54 ee 21 10       	r1 = b[r2+0x1] (s)			  ## cvsd_codec.c:426:40
    552e:    50 ed 0f 14       	h[r0+0x4e] = r1			  ## cvsd_codec.c:426:38
    5532:    80 00             	rts			  ## cvsd_codec.c:432:1


get_cvsd_codec_ops:
    5534:    c0 ff 3c 55 00 00 	r0 = 0x553c <bt_esco_cvsd_codec : 553c >			  ## cvsd_codec.c:443:0
    553a:    80 00             	rts			  ## cvsd_codec.c:444:5


bt_esco_cvsd_codec:
    553c:	 80 50 00 00 84 50 00 00         .P...P..
    5544:	 56 51 00 00 86 53 00 00         VQ...S..
    554c:	 20 55 00 00                      U..


wtgv2_silk_LPC_analysis_filter:
    5550:    7f 04             	[--sp] = {rets, r15-r4}			  ## LPC_analysis_filter.c:57:0
    5552:    e2 9c             	sp += -0x10			  ## LPC_analysis_filter.c:57:0
    5554:    d4 e9 44 c0       	r12 = [sp+68]			  ## LPC_analysis_filter.c:57:0
    5558:    29 d6             	r9 = r2  #			  ## LPC_analysis_filter.c:57:0
    555a:    83 22             		 [sp+8] = r3			  ## LPC_analysis_filter.c:57:0
    555c:    c0 f1 c1 00       	r0 = r12 << 0x1  #			  ## LPC_analysis_filter.c:82:10
    5560:    80 23             		 [sp+12] = r0			  ## LPC_analysis_filter.c:82:10
    5562:    d0 e9 01 00       	d[sp] = r1_r0			  ## LPC_analysis_filter.c:82:10
    5566:    15 1c             	r5 = r1 + r0			  ## LPC_analysis_filter.c:82:10
    5568:    31 e1 f0 5f       	r1 = r5 + -0x10			  ## LPC_analysis_filter.c:82:10
    556c:    cb 16             	r11 = r12			  ## LPC_analysis_filter.c:82:10
    556e:    24 98             	goto 0xb0 <wtgv2_silk_LPC_analysis_filter+0xD0 : 5620 >			  ## LPC_analysis_filter.c:82:10
    5570:    c0 f1 b1 50       	r5 = r11 << 0x1  #			  ## LPC_analysis_filter.c:83:26
    5574:    00 21             		 r0 = [sp+4]			  ## LPC_analysis_filter.c:83:19
    5576:    05 18             	r5 += r0			  ## LPC_analysis_filter.c:83:19
    5578:    57 ed 5e af       	r10 = h[r5+-0x2] (s)			  ## LPC_analysis_filter.c:85:21
    557c:    54 ed 90 d0       	r13 = h[r9+0x0] (s)			  ## LPC_analysis_filter.c:85:21
    5580:    57 ed 5c 6f       	r6 = h[r5+-0x4] (s)			  ## LPC_analysis_filter.c:88:21
    5584:    54 ed 92 70       	r7 = h[r9+0x2] (s)			  ## LPC_analysis_filter.c:88:21
    5588:    da 1b             	r10 *= r13			  ## LPC_analysis_filter.c:85:21
    558a:    f0 e1 70 d6       	r13 = r7 * r6			  ## LPC_analysis_filter.c:88:21
    558e:    57 ed 5a ef       	r14 = h[r5+-0x6] (s)			  ## LPC_analysis_filter.c:89:21
    5592:    54 ed 94 f0       	r15 = h[r9+0x4] (s)			  ## LPC_analysis_filter.c:89:21
    5596:    57 ed 58 8f       	r8 = h[r5+-0x8] (s)			  ## LPC_analysis_filter.c:90:21
    559a:    54 ed 96 60       	r6 = h[r9+0x6] (s)			  ## LPC_analysis_filter.c:90:21
    559e:    da 18             	r10 += r13			  ## LPC_analysis_filter.c:88:21
    55a0:    f0 e1 f0 7e       	r7 = r15 * r14			  ## LPC_analysis_filter.c:89:21
    55a4:    7a 18             	r10 += r7			  ## LPC_analysis_filter.c:89:21
    55a6:    68 1b             	r8 *= r6			  ## LPC_analysis_filter.c:90:21
    55a8:    57 ed 56 df       	r13 = h[r5+-0xa] (s)			  ## LPC_analysis_filter.c:91:21
    55ac:    54 ed 98 e0       	r14 = h[r9+0x8] (s)			  ## LPC_analysis_filter.c:91:21
    55b0:    57 ed 54 ff       	r15 = h[r5+-0xc] (s)			  ## LPC_analysis_filter.c:92:21
    55b4:    54 ed 9a 20       	r2 = h[r9+0xa] (s)			  ## LPC_analysis_filter.c:92:21
    55b8:    b4 e0 a0 78       	r7 = r10 + r8			  ## LPC_analysis_filter.c:90:21
    55bc:    f0 e1 e0 6d       	r6 = r14 * r13			  ## LPC_analysis_filter.c:91:21
    55c0:    76 18             	r6 += r7			  ## LPC_analysis_filter.c:91:21
    55c2:    f2 1b             	r2 *= r15			  ## LPC_analysis_filter.c:92:21
    55c4:    26 18             	r6 += r2			  ## LPC_analysis_filter.c:92:21
    55c6:    3a e1 fe 5f       	r10 = r5 + -0x2			  ## LPC_analysis_filter.c:83:19
    55ca:    47 20             	r7 = 0x0
    55cc:    15 16             	r5 = r1
    55ce:    04 90             	goto 0x20 <wtgv2_silk_LPC_analysis_filter+0xA0 : 55f0 >
    55d0:    72 a1             	r2 = r7 << 0x1			  ## LPC_analysis_filter.c:94:25
    55d2:    92 18             	r2 += r9			  ## LPC_analysis_filter.c:94:25
    55d4:    54 ed 2e 40       	r4 = h[r2+0xe] (s)			  ## LPC_analysis_filter.c:95:25
    55d8:    54 ed 50 00       	r0 = h[r5+0x0] (s)			  ## LPC_analysis_filter.c:95:25
    55dc:    54 ed 2c 20       	r2 = h[r2+0xc] (s)			  ## LPC_analysis_filter.c:94:25
    55e0:    54 ed 52 30       	r3 = h[r5+0x2] (s)			  ## LPC_analysis_filter.c:94:25
    55e4:    40 1b             	r0 *= r4			  ## LPC_analysis_filter.c:95:25
    55e6:    32 1b             	r2 *= r3			  ## LPC_analysis_filter.c:94:25
    55e8:    62 18             	r2 += r6			  ## LPC_analysis_filter.c:94:25
    55ea:    26 1c             	r6 = r2 + r0			  ## LPC_analysis_filter.c:95:25
    55ec:    fd 3c             	r5 += -0x4			  ## LPC_analysis_filter.c:93:9
    55ee:    c7 22             	r7 += 0x2			  ## LPC_analysis_filter.c:93:9
    55f0:    7a 86             	r2 = r7 + 0x6			  ## LPC_analysis_filter.c:93:23
    55f2:    8c ed ed 21       	ifs (r2 < r12) goto -0x26 <wtgv2_silk_LPC_analysis_filter+0x80 : 55d0 >			  ## LPC_analysis_filter.c:93:23
    55f6:    54 ed a2 00       	r0 = h[r10+0x2] (s)			  ## LPC_analysis_filter.c:99:21
    55fa:    00 ac             	r0 = r0 << 0xc			  ## LPC_analysis_filter.c:99:21
    55fc:    80 1f             	r0 = r0 - r6			  ## LPC_analysis_filter.c:99:21
    55fe:    88 ab             	r0 = r0 >>> 0xb			  ## LPC_analysis_filter.c:102:17
    5600:    c0 21             	r0 += 0x1			  ## LPC_analysis_filter.c:102:17
    5602:    8e a1             	r6 = r0 >>> 0x1			  ## LPC_analysis_filter.c:102:17
    5604:    45 e0 ff 7f       	r5 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >
    5608:    a6 ed 00 4c       	ifs (r6 < 0x8000) {
    560c:    40 e0 00 80       		r0 = -0x8000 <RAM_LIMIT_H+0xFFFFFFFFFFE58000 : ffffffffffff8000 >			  ## LPC_analysis_filter.c:105:33
    5610:    34 e4 61 50       		r5 = smax(r6, r0)
                               	}			  ## LPC_analysis_filter.c:105:33
    5614:    00 23             	r0 = [sp+12]			  ## LPC_analysis_filter.c:105:19
    5616:    d8 ed 09 5b       	h[r0+r11<<1] = r5			  ## LPC_analysis_filter.c:105:19
    561a:    c1 22             	r1 += 0x2			  ## LPC_analysis_filter.c:82:5
    561c:    0b e1 01 b0       	r11 = r11 + 0x1			  ## LPC_analysis_filter.c:82:30
    5620:    00 22             	r0 = [sp+8]			  ## LPC_analysis_filter.c:82:5
    5622:    80 ed a5 b1       	ifs (r11 < r0) goto -0xb6 <wtgv2_silk_LPC_analysis_filter+0x20 : 5570 >			  ## LPC_analysis_filter.c:82:5
    5626:    41 20             	r1 = 0x0			  ## LPC_analysis_filter.c:109:5
    5628:    00 23             	r0 = [sp+12]			  ## LPC_analysis_filter.c:109:5
    562a:    02 20             	r2 = [sp]			  ## LPC_analysis_filter.c:109:5
    562c:    80 ff f4 eb ff ff 	call -0x140c <memset : 4226 >			  ## LPC_analysis_filter.c:109:5
    5632:    02 84             	sp += 0x10			  ## LPC_analysis_filter.c:109:5
    5634:    5f 04             	{pc, r15-r4} = [sp++]			  ## LPC_analysis_filter.c:111:1


wtgv2_silk_decode_core:
    5636:    7f 04             	[--sp] = {rets, r15-r4}			  ## decode_core.c:50:0
    5638:    f0 e8 74 1d       	sp += -0x28c			  ## decode_core.c:50:0
    563c:    1c d6             	r12 = r1  #			  ## decode_core.c:50:0
    563e:    82 30             		 [sp+64] = r2			  ## decode_core.c:50:0
    5640:    06 16             	r6 = r0			  ## decode_core.c:50:0
    5642:    01 e1 98 64       	r1 = r6 + 0x498			  ## decode_core.c:50:0
    5646:    d0 ec 18 81       	r8 = [r1+0x18]			  ## decode_core.c:64:5
    564a:    0b e1 14 64       	r11 = r6 + 0x414
    564e:    d0 ec bc 70       	r7 = [r11+0xc]			  ## decode_core.c:68:5
    5652:    d0 ec b8 40       	r4 = [r11+0x8]			  ## decode_core.c:68:5
    5656:    a0 e0 00 80       	r0 = 0x0 - r8			  ## decode_core.c:68:5
    565a:    69 e1 03 00       	r9 = r0 & 0x3			  ## decode_core.c:68:5
    565e:    b4 e0 80 29       	r2 = r8 + r9			  ## decode_core.c:68:5
    5662:    c8 dd             	r0 = r4 + r7  #			  ## decode_core.c:68:5
    5664:    82 31             		 [sp+68] = r2			  ## decode_core.c:68:5
    5666:    00 a2             	r0 = r0 << 0x2			  ## decode_core.c:68:5
    5668:    20 d8             	r0 += r2  #			  ## decode_core.c:68:5
    566a:    81 2f             		 [sp+60] = r1			  ## decode_core.c:68:5
    566c:    90 66             	[r1+0x18] = r0			  ## decode_core.c:68:5
    566e:    54 ee b5 08       	r0 = b[r11+0x85] (s)			  ## decode_core.c:76:54
    5672:    54 ee ba 18       	r1 = b[r11+0x8a] (s)			  ## decode_core.c:85:17
    5676:    81 34             	[sp+80] = r1			  ## decode_core.c:78:24
    5678:    54 ee b7 18       	r1 = b[r11+0x87] (s)			  ## decode_core.c:78:24
    567c:    81 24             	[sp+16] = r1			  ## decode_core.c:76:18
    567e:    54 ee b6 18       	r1 = b[r11+0x86] (s)			  ## decode_core.c:76:18
    5682:    00 a1             	r0 = r0 << 0x1			  ## decode_core.c:76:18
    5684:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## decode_core.c:76:80
    5688:    c2 ff a4 76 00 00 	r2 = 0x76a4 <wtgv2silk_Quantization_Offsets_Q10 : 76a4 >			  ## decode_core.c:76:18
    568e:    20 18             	r0 += r2			  ## decode_core.c:76:18
    5690:    d8 ed 0a 01       	r0 = h[r0+r1<<1] (s)			  ## decode_core.c:76:18
    5694:    02 e1 44 61       	r2 = r6 + 0x144			  ## decode_core.c:106:5
    5698:    f8 e8 ec 10       	r1 = sp + 236			  ## decode_core.c:106:5
    569c:    82 22             	[sp+8] = r2
    569e:    10 8f             	rep 0x4 0x10 {			  ## decode_core.c:106:5
    56a0:    25 05             		r5 = [r2++=0x4] 			  ## decode_core.c:106:5
    56a2:    95 05             		[r1++=0x4] = r5
                               	}			  ## decode_core.c:106:5
    56a4:    00 a4             	r0 = r0 << 0x4
    56a6:    70 df             	r0 = r7 - r4  #			  ## decode_core.c:113:40
    56a8:    80 2d             		 [sp+52] = r0			  ## decode_core.c:113:40
    56aa:    c7 d4             	r15 = 0  #			  ## decode_core.c:113:40
    56ac:    87 33             		 [sp+76] = r7			  ## decode_core.c:113:40
    56ae:    01 a1             	r1 = r0 << 0x1
    56b0:    10 3c             	r0 = -0x4
    56b2:    d4 e9 1d 90       	[sp+28] = r9
    56b6:    90 f1 00 09       	r0 = r0 | r9  #			  ## decode_core.c:116:10
    56ba:    81 2c             		 [sp+48] = r1			  ## decode_core.c:116:10
    56bc:    02 e1 84 61       	r2 = r6 + 0x184			  ## decode_core.c:116:10
    56c0:    21 d8             	r1 += r2  #			  ## decode_core.c:116:10
    56c2:    82 2b             		 [sp+44] = r2			  ## decode_core.c:116:10
    56c4:    81 2a             	[sp+40] = r1			  ## decode_core.c:116:10
    56c6:    80 d8             	r0 += r8  #			  ## decode_core.c:116:10
    56c8:    80 26             		 [sp+24] = r0			  ## decode_core.c:116:10
    56ca:    0a f1 04 60       	r10 = r6 + 0x4  #			  ## decode_core.c:116:10
    56ce:    80 23             		 [sp+12] = r0			  ## decode_core.c:116:10
    56d0:    86 35             	[sp+84] = r6			  ## decode_core.c:116:10
    56d2:    f8 e8 6c 02       	r0 = sp + 620
    56d6:    30 f1 f8 8f       	r0 = r8 + -0x8  #			  ## decode_core.c:116:10
    56da:    80 29             		 [sp+36] = r0			  ## decode_core.c:116:10
    56dc:    d4 e9 21 80       	[sp+32] = r8			  ## decode_core.c:116:10
    56e0:    80 25             	[sp+20] = r0
    56e2:    c8 ff 35 84 b3 0b 	r8 = 0xbb38435 <RAM_LIMIT_H+0xB998434 : bb38434 >
    56e8:    c9 ff 6b 63 19 36 	r9 = 0x3619636b <RAM_LIMIT_H+0x35FF636A : 3619636a >
    56ee:    45 20             	r5 = 0x0
    56f0:    83 2e             	[sp+56] = r3
    56f2:    d4 e9 49 c0       	[sp+72] = r12
    56f6:    d4 e9 e9 b0       	[sp+232] = r11
    56fa:    b5 90             	goto 0x6e0 <wtgv2_silk_decode_core+0x7A6 : 5ddc >
    56fc:    40 20             	r0 = 0x0
    56fe:    07 2d             	r7 = [sp+52]
    5700:    06 34             	r6 = [sp+80]
    5702:    14 89             	goto 0x52 <wtgv2_silk_decode_core+0x120 : 5756 >
    5704:    f0 e1 50 14       	r1 = r5 * r4			  ## decode_core.c:124:38
    5708:    01 18             	r1 += r0			  ## decode_core.c:124:38
    570a:    d8 ed 3a 41       	r4 = h[r3+r1<<1] (s)			  ## decode_core.c:124:38
    570e:    42 ae             	r2 = r4 << 0xe			  ## decode_core.c:124:38
    5710:    d8 ec ab 20       	[r10+r0<<2] = r2			  ## decode_core.c:124:36
    5714:    f0 e1 60 18       	r1 = r6 * r8			  ## decode_core.c:123:29
    5718:    91 18             	r1 += r9			  ## decode_core.c:123:29
    571a:    84 fd 05 02       	ifs (r4 < 0x1) goto 0xa <wtgv2_silk_decode_core+0xF2 : 5728 >			  ## decode_core.c:125:21
    571e:    32 e1 00 2b       	r2 = r2 + -0x500			  ## decode_core.c:126:40
    5722:    d8 ec ab 20       	[r10+r0<<2] = r2
    5726:    04 82             	goto 0x4 <wtgv2_silk_decode_core+0xF6 : 572c >
    5728:    f4 fe 12 fe       	ifs (r4 <= -0x1) goto 0x24 <wtgv2_silk_decode_core+0x11A : 5750 >
    572c:    ac 1d             	r4 = r2 + r7			  ## decode_core.c:132:36
    572e:    a2 e0 00 40       	r2 = 0x0 - r4			  ## decode_core.c:134:42
    5732:    31 ed 00 00       	ifs (r1 >= 0x0) {			  ## decode_core.c:134:42
    5736:    42 16             		r2 = r4
                               	}			  ## decode_core.c:133:21
    5738:    d8 ec ab 20       	[r10+r0<<2] = r2			  ## decode_core.c:132:36
    573c:    d0 ec b8 40       	r4 = [r11+0x8]			  ## decode_core.c:137:29
    5740:    f0 e1 50 24       	r2 = r5 * r4			  ## decode_core.c:137:29
    5744:    02 18             	r2 += r0			  ## decode_core.c:137:29
    5746:    d8 ed 3a 22       	r2 = h[r3+r2<<1] (s)			  ## decode_core.c:137:29
    574a:    2e 1c             	r6 = r2 + r1			  ## decode_core.c:137:29
    574c:    c0 21             	r0 += 0x1			  ## decode_core.c:121:54
    574e:    04 83             	goto 0x6 <wtgv2_silk_decode_core+0x120 : 5756 >
    5750:    42 e1 a0 2e       	r2 = r2 | 0x500			  ## decode_core.c:130:44
    5754:    f7 86             	goto -0x34 <wtgv2_silk_decode_core+0xEC : 5722 >			  ## decode_core.c:130:44
    5756:    84 ed d5 01       	ifs (r0 < r4) goto -0x56 <wtgv2_silk_decode_core+0xCE : 5704 >
    575a:    50 a4             	r0 = r5 << 0x4			  ## decode_core.c:141:17
    575c:    d0 ec b0 21       	r2 = [r11+0x10]			  ## decode_core.c:144:9
    5760:    70 f1 1f 00       	r0 = r0 & 0xFFFFFFE0  #			  ## decode_core.c:141:44
    5764:    a2 2c             		 [sp+176] = r2			  ## decode_core.c:141:44
    5766:    c0 18             	r0 += r12			  ## decode_core.c:141:17
    5768:    01 e1 20 00       	r1 = r0 + 0x20			  ## decode_core.c:141:17
    576c:    22 a1             	r2 = r2 << 0x1			  ## decode_core.c:144:9
    576e:    f8 e8 6c 02       	r0 = sp + 620			  ## decode_core.c:144:9
    5772:    a1 2e             	[sp+184] = r1			  ## decode_core.c:144:9
    5774:    80 ff c2 e9 ff ff 	call -0x163e <memmove : 413c >			  ## decode_core.c:144:9
    577a:    00 e1 10 c0       	r0 = r12 + 0x10			  ## decode_core.c:148:24
    577e:    d8 ec 0a 15       	r1 = [r0+r5<<2]			  ## decode_core.c:148:24
    5782:    00 2f             	r0 = [sp+60]			  ## decode_core.c:146:39
    5784:    08 41             	r0 = b[r0+0x1] (u)			  ## decode_core.c:146:39
    5786:    30 f4 00 01       	r0 = abs(r1)  #			  ## decode_core.c:148:24
    578a:    a0 32             		 [sp+200] = r0			  ## decode_core.c:148:24
    578c:    a1 34             	[sp+208] = r1			  ## decode_core.c:148:24
    578e:    a5 37             	[sp+220] = r5
    5790:    86 34             	[sp+80] = r6
    5792:    b0 e8 00 10       	if (r0 != 0x0) {
    5796:    80 e1 00 20       		r2 = clz(r0)
                               	} else {			  ## macros.h:122:24
    579a:    4a 20             		r2 = 0x20
                               	}			  ## macros.h:122:24
    579c:    30 f1 ff 2f       	r0 = r2 + -0x1  #			  ## Inlines.h:155:44
    57a0:    21 34             		 r1 = [sp+208]			  ## Inlines.h:156:15
    57a2:    c8 e1 10 60       	r6 = r1 << r0			  ## Inlines.h:156:15
    57a6:    e8 b0             	r0 = r6 >>> 0x10			  ## Inlines.h:159:15
    57a8:    c1 ff ff ff ff 1f 	r1 = 0x1fffffff <RAM_LIMIT_H+0x1FE5FFFE : 1ffffffe >			  ## Inlines.h:159:15
    57ae:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## Inlines.h:159:15
    57b2:    f1 16             	r1 = r15			  ## Inlines.h:165:15
    57b4:    0c 15             	r13_r12 = r1_r0			  ## Inlines.h:165:15
    57b6:    d0 e1 00 c3       	r13_r12 <<= 0x30			  ## Inlines.h:165:15
    57ba:    d0 e1 00 cf       	r13_r12 >>>= 0x30			  ## Inlines.h:165:15
    57be:    d0 e9 e1 60       	d[sp+224] = r7_r6			  ## Inlines.h:165:15
    57c2:    f8 f1 60 7c       	r7_r6 = r6 * r12 (s)  #			  ## Inlines.h:165:15
    57c6:    a2 30             		 [sp+192] = r2			  ## Inlines.h:172:9
    57c8:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:165:15
    57cc:    a5 e0 00 65       	r5 = 0x20000000 - r6			  ## Inlines.h:165:15
    57d0:    55 a3             	r5 = r5 << 0x3			  ## Inlines.h:165:15
    57d2:    f8 e1 50 70       	r7_r6 = r5 * r0 (s)			  ## Inlines.h:168:14
    57d6:    c0 e1 00 81       	r8 = r0 << 0x10			  ## Inlines.h:162:14
    57da:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:168:14
    57de:    f9 16             	r9 = r15			  ## Inlines.h:168:14
    57e0:    b4 e0 60 08       	r0 = r6 + r8			  ## Inlines.h:168:14
    57e4:    b8 e0 70 19       	r1 = r7 + r9 + c			  ## Inlines.h:168:14
    57e8:    a5 e0 0f 20       	r5 = 0xF - r2			  ## Inlines.h:171:28
    57ec:    85 fe 08 00       	ifs (r5 <= 0x0) goto 0x10 <wtgv2_silk_decode_core+0x1CA : 5800 >
    57f0:    c8 e1 03 85       	r8 = r0 >>> r5			  ## Inlines.h:176:20
    57f4:    35 ed 20 00       	ifs (r5 >= 0x20) {			  ## Inlines.h:176:20
    57f8:    c0 14             		r8 = 0
                               	}			  ## Inlines.h:175:13
    57fa:    d0 e9 e0 20       	r3_r2 = d[sp+224]			  ## Inlines.h:175:13
    57fe:    04 9f             	goto 0x3e <wtgv2_silk_decode_core+0x208 : 583e >			  ## Inlines.h:175:13
    5800:    a5 e0 3e 20       	r5 = 0x3E - r2			  ## Inlines.h:171:17
    5804:    a6 e0 2f 50       	r6 = 0x2F - r5			  ## Inlines.h:173:16
    5808:    c5 ff ff ff ff 7f 	r5 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## Inlines.h:173:16
    580e:    c8 e1 52 76       	r7 = r5 >> r6			  ## Inlines.h:173:16
    5812:    60 e0 00 54       	r5 = 0x80000000			  ## Inlines.h:173:16
    5816:    ed 1a             	r5 >>>= r6			  ## Inlines.h:173:16
    5818:    87 ee 08 50       	ifs (r5 <= r7) goto 0x10 <wtgv2_silk_decode_core+0x1F6 : 582c >			  ## Inlines.h:173:16
    581c:    58 16             	r8 = r5			  ## Inlines.h:173:16
    581e:    d0 e9 e0 20       	r3_r2 = d[sp+224]			  ## Inlines.h:173:16
    5822:    90 ee 00 05       	ifs (r0 <= r5) {			  ## Inlines.h:173:16
    5826:    34 e4 01 87       		r8 = smax(r0, r7)
                               	}			  ## Inlines.h:173:16
    582a:    04 87             	goto 0xe <wtgv2_silk_decode_core+0x204 : 583a >			  ## Inlines.h:173:16
    582c:    78 16             	r8 = r7			  ## Inlines.h:173:16
    582e:    d0 e9 e0 20       	r3_r2 = d[sp+224]			  ## Inlines.h:173:16
    5832:    90 ee 00 07       	ifs (r0 <= r7) {			  ## Inlines.h:173:16
    5836:    34 e4 01 85       		r8 = smax(r0, r5)
                               	}			  ## Inlines.h:173:16
    583a:    c8 e1 80 86       	r8 = r8 << r6			  ## Inlines.h:173:16
    583e:    00 35             	r0 = [sp+84]			  ## decode_core.c:152:49
    5840:    60 f0 80 0b       	r0 = 0x10000  #			  ## decode_core.c:152:49
    5844:    06 60             		 r6 = [r0+0x0] 			  ## decode_core.c:152:49
    5846:    25 34             	r5 = [sp+208]			  ## decode_core.c:152:13
    5848:    06 e8 57 50       	if (r5 == r6) goto 0xae <wtgv2_silk_decode_core+0x2C4 : 58fa >			  ## decode_core.c:152:13
    584c:    30 e4 00 06       	r0 = abs(r6)			  ## Inlines.h:110:28
    5850:    ab bf             	r3 = r2 >>> 0x1f			  ## Inlines.h:165:15
    5852:    b0 e8 00 10       	if (r0 != 0x0) {
    5856:    80 e1 00 50       		r5 = clz(r0)
                               	} else {			  ## macros.h:122:24
    585a:    4d 20             		r5 = 0x20
                               	}			  ## macros.h:122:24
    585c:    30 e1 ff 5f       	r0 = r5 + -0x1			  ## Inlines.h:110:44
    5860:    06 1a             	r6 <<= r0			  ## Inlines.h:111:15
    5862:    f8 e1 60 1c       	r1_r0 = r6 * r12 (s)			  ## Inlines.h:123:15
    5866:    d0 e1 00 01       	r1_r0 <<= 0x10			  ## Inlines.h:123:15
    586a:    d0 e1 00 0e       	r1_r0 >>>= 0x20			  ## Inlines.h:123:15
    586e:    f8 e1 00 32       	r3_r2 = r0 * r2 (s)			  ## Inlines.h:123:15
    5872:    d0 e1 0d 29       	r3_r2 >>= 0x1d			  ## Inlines.h:123:15
    5876:    72 e1 07 20       	r2 = r2 & 0xFFFFFFF8			  ## Inlines.h:123:15
    587a:    e2 1e             	r2 = r6 - r2			  ## Inlines.h:123:15
    587c:    f8 e1 20 7c       	r7_r6 = r2 * r12 (s)			  ## Inlines.h:126:14
    5880:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:126:14
    5884:    62 1c             	r2 = r6 + r0			  ## Inlines.h:126:14
    5886:    b8 f0 70 31       	r3 = r7 + r1 + c  #			  ## Inlines.h:126:14
    588a:    20 30             		 r0 = [sp+192]			  ## Inlines.h:126:14
    588c:    a0 e0 01 00       	r0 = 0x1 - r0
    5890:    50 18             	r0 += r5			  ## Inlines.h:129:17
    5892:    0d 8c             	r5 = r0 + 0xc			  ## Inlines.h:129:39
    5894:    f5 fe 06 fe       	ifs (r5 <= -0x1) goto 0xc <wtgv2_silk_decode_core+0x26E : 58a4 >
    5898:    c8 e1 23 05       	r0 = r2 >>> r5			  ## Inlines.h:134:20
    589c:    35 ed 20 00       	ifs (r5 >= 0x20) {			  ## Inlines.h:134:20
    58a0:    40 20             		r0 = 0x0
                               	}			  ## Inlines.h:133:13
    58a2:    04 9b             	goto 0x36 <wtgv2_silk_decode_core+0x2A4 : 58da >			  ## Inlines.h:133:13
    58a4:    c0 3c             	r0 += 0x1c			  ## Inlines.h:129:28
    58a6:    a0 e0 10 00       	r0 = 0x10 - r0			  ## Inlines.h:131:16
    58aa:    c1 ff ff ff ff 7f 	r1 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## Inlines.h:131:16
    58b0:    c8 e1 12 50       	r5 = r1 >> r0			  ## Inlines.h:131:16
    58b4:    60 e0 00 14       	r1 = 0x80000000			  ## Inlines.h:131:16
    58b8:    c8 e1 13 60       	r6 = r1 >>> r0			  ## Inlines.h:131:16
    58bc:    85 ee 06 60       	ifs (r6 <= r5) goto 0xc <wtgv2_silk_decode_core+0x296 : 58cc >			  ## Inlines.h:131:16
    58c0:    61 16             	r1 = r6			  ## Inlines.h:131:16
    58c2:    92 ee 00 06       	ifs (r2 <= r6) {			  ## Inlines.h:131:16
    58c6:    34 e4 21 15       		r1 = smax(r2, r5)
                               	}			  ## Inlines.h:131:16
    58ca:    04 85             	goto 0xa <wtgv2_silk_decode_core+0x2A0 : 58d6 >			  ## Inlines.h:131:16
    58cc:    51 16             	r1 = r5			  ## Inlines.h:131:16
    58ce:    92 ee 00 05       	ifs (r2 <= r5) {			  ## Inlines.h:131:16
    58d2:    34 e4 21 16       		r1 = smax(r2, r6)
                               	}			  ## Inlines.h:131:16
    58d6:    c8 e1 10 00       	r0 = r1 << r0			  ## Inlines.h:131:16
    58da:    89 bf             	r1 = r0 >>> 0x1f
    58dc:    42 20             	r2 = 0x0
    58de:    04 8b             	goto 0x16 <wtgv2_silk_decode_core+0x2C0 : 58f6 >
    58e0:    f8 e8 ec 30       	r3 = sp + 236
    58e4:    d8 ec 3a 52       	r5 = [r3+r2<<2]			  ## decode_core.c:157:33
    58e8:    f8 e1 50 70       	r7_r6 = r5 * r0 (s)			  ## decode_core.c:157:33
    58ec:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## decode_core.c:157:33
    58f0:    d8 ec 3b 62       	[r3+r2<<2] = r6			  ## decode_core.c:157:31
    58f4:    c2 21             	r2 += 0x1			  ## decode_core.c:156:45
    58f6:    82 f8 f3 21       	if (r2 != 0x10) goto -0x1a <wtgv2_silk_decode_core+0x2AA : 58e0 >
    58fa:    25 34             	r5 = [sp+208]
    58fc:    da a6             	r2 = r5 >>> 0x6			  ## decode_core.c:148:24
    58fe:    d0 e9 e1 20       	d[sp+224] = r3_r2			  ## decode_core.c:165:30
    5902:    02 35             	r2 = [sp+84]			  ## decode_core.c:165:30
    5904:    a5 60             	[r2+0x0] = r5			  ## decode_core.c:165:30
    5906:    22 32             	r2 = [sp+200]			  ## decode_core.c:168:13
    5908:    82 f8 c3 04       	if (r2 != 0x2) goto 0x186 <wtgv2_silk_decode_core+0x45C : 5a92 >			  ## decode_core.c:168:13
    590c:    05 32             	r5 = [sp+72]
    590e:    23 37             	r3 = [sp+220]
    5910:    d8 ec 5a b3       	r11 = [r5+r3<<2]			  ## decode_core.c:170:19
    5914:    e2 e1 0a 30       	r2 = r3 * 0xA			  ## decode_core.c:145:25
    5918:    d4 1c             	r4 = r5 + r2			  ## decode_core.c:145:25
    591a:    03 5c             	if (r3 == 0) goto 0x38 <wtgv2_silk_decode_core+0x31E : 5954 >			  ## decode_core.c:173:24
    591c:    02 24             	r2 = [sp+16]			  ## decode_core.c:173:36
    591e:    0c ff 03 20 45 02 	ifs (r2 > 0x3) goto 0x48a <wtgv2_silk_decode_core+0x778 : 5dae >			  ## decode_core.c:173:36
    5924:    01 ff 02 30 42 02 	if (r3 != 0x2) goto 0x484 <wtgv2_silk_decode_core+0x778 : 5dae >
    592a:    26 3a             	r6 = [sp+232]
    592c:    11 3e             	r1 = -0x2			  ## decode_core.c:175:51
    592e:    b4 f0 12 1b       	r1 = r1 - r11  #			  ## decode_core.c:175:51
    5932:    60 63             		 r0 = [r6+0xc] 			  ## decode_core.c:175:36
    5934:    01 d8             	r1 += r0  #			  ## decode_core.c:175:57
    5936:    25 2c             		 r5 = [sp+176]			  ## decode_core.c:175:57
    5938:    19 df             	r1 = r1 - r5  #			  ## decode_core.c:175:76
    593a:    07 30             		 r7 = [sp+64]			  ## decode_core.c:175:76
    593c:    0b de             	r3 = r0 - r1  #			  ## decode_core.c:183:50
    593e:    02 35             		 r2 = [sp+84]			  ## decode_core.c:182:70
    5940:    11 a1             	r1 = r1 << 0x1			  ## decode_core.c:182:50
    5942:    78 dc             	r0 = r7 + r1  #			  ## decode_core.c:182:50
    5944:    85 20             		 [sp] = r5			  ## decode_core.c:182:17
    5946:    21 d8             	r1 += r2  #			  ## decode_core.c:182:70
    5948:    22 2e             		 r2 = [sp+184]			  ## decode_core.c:182:17
    594a:    01 e1 84 11       	r1 = r1 + 0x184			  ## decode_core.c:182:70
    594e:    bf ea ff fd       	call -0x402 <wtgv2_silk_LPC_analysis_filter : 5550 >			  ## decode_core.c:182:17
    5952:    04 9e             	goto 0x3c <wtgv2_silk_decode_core+0x35A : 5990 >
    5954:    4c d6             	r12 = r4  #
    5956:    26 3a             		 r6 = [sp+232]
    5958:    11 3e             	r1 = -0x2			  ## decode_core.c:175:51
    595a:    b4 f0 12 1b       	r1 = r1 - r11  #			  ## decode_core.c:175:51
    595e:    60 63             		 r0 = [r6+0xc] 			  ## decode_core.c:175:36
    5960:    01 d8             	r1 += r0  #			  ## decode_core.c:175:57
    5962:    24 2c             		 r4 = [sp+176]			  ## decode_core.c:175:57
    5964:    11 df             	r1 = r1 - r4  #			  ## decode_core.c:175:76
    5966:    07 30             		 r7 = [sp+64]			  ## decode_core.c:175:76
    5968:    0b de             	r3 = r0 - r1  #			  ## decode_core.c:183:50
    596a:    02 35             		 r2 = [sp+84]			  ## decode_core.c:182:70
    596c:    11 a1             	r1 = r1 << 0x1			  ## decode_core.c:182:50
    596e:    78 dc             	r0 = r7 + r1  #			  ## decode_core.c:182:50
    5970:    84 20             		 [sp] = r4			  ## decode_core.c:182:17
    5972:    21 d8             	r1 += r2  #			  ## decode_core.c:182:70
    5974:    22 2e             		 r2 = [sp+184]			  ## decode_core.c:182:17
    5976:    01 e1 84 11       	r1 = r1 + 0x184			  ## decode_core.c:182:70
    597a:    c4 16             	r4 = r12			  ## decode_core.c:182:70
    597c:    bf ea e8 fd       	call -0x430 <wtgv2_silk_LPC_analysis_filter : 5550 >			  ## decode_core.c:182:17
    5980:    54 ed 58 08       	r0 = h[r5+0x88] (s)			  ## decode_core.c:188:36
    5984:    f8 e1 00 18       	r1_r0 = r0 * r8 (s)			  ## decode_core.c:188:36
    5988:    d0 e1 0e 08       	r1_r0 >>= 0xe			  ## decode_core.c:188:36
    598c:    78 e1 03 00       	r8 = r0 & 0xFFFFFFFC			  ## decode_core.c:188:36
    5990:    00 33             	r0 = [sp+76]			  ## decode_core.c:190:22
    5992:    00 a2             	r0 = r0 << 0x2			  ## decode_core.c:190:22
    5994:    01 31             	r1 = [sp+68]			  ## decode_core.c:190:22
    5996:    10 18             	r0 += r1			  ## decode_core.c:190:22
    5998:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## decode_core.c:190:22
    599c:    01 e1 02 b0       	r1 = r11 + 0x2
    59a0:    42 20             	r2 = 0x0
    59a2:    13 3f             	r3 = -0x1
    59a4:    04 8c             	goto 0x18 <wtgv2_silk_decode_core+0x388 : 59be >
    59a6:    65 63             	r5 = [r6+0xc] 			  ## decode_core.c:191:56
    59a8:    35 18             	r5 += r3			  ## decode_core.c:191:56
    59aa:    d8 ed 7a 55       	r5 = h[r7+r5<<1] (s)			  ## decode_core.c:191:56
    59ae:    f8 e1 50 d8       	r13_r12 = r5 * r8 (s)			  ## decode_core.c:191:56
    59b2:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## decode_core.c:191:56
    59b6:    d8 ec 0b c3       	[r0+r3<<2] = r12			  ## decode_core.c:191:54
    59ba:    fb 3f             	r3 += -0x1			  ## decode_core.c:190:17
    59bc:    c2 21             	r2 += 0x1			  ## decode_core.c:190:53
    59be:    81 ed f2 21       	ifs (r2 < r1) goto -0x1c <wtgv2_silk_decode_core+0x370 : 59a6 >
    59c2:    00 f1 60 40       	r0 = r4 + 0x60  #			  ## decode_core.c:145:25
    59c6:    01 33             		 r1 = [sp+76]			  ## decode_core.c:204:18
    59c8:    11 a2             	r1 = r1 << 0x2			  ## decode_core.c:204:18
    59ca:    03 28             	r3 = [sp+32]			  ## decode_core.c:204:18
    59cc:    3a dc             	r2 = r3 + r1  #			  ## decode_core.c:204:18
    59ce:    05 27             		 r5 = [sp+28]			  ## decode_core.c:204:18
    59d0:    52 18             	r2 += r5			  ## decode_core.c:204:18
    59d2:    c0 f1 b2 20       	r2 = r11 << 0x2  #			  ## decode_core.c:204:18
    59d6:    a2 34             		 [sp+208] = r2			  ## decode_core.c:204:18
    59d8:    92 1e             	r2 = r1 - r2			  ## decode_core.c:204:18
    59da:    b1 1c             	r1 = r3 + r2			  ## decode_core.c:204:18
    59dc:    1b 1d             	r3 = r1 + r5			  ## decode_core.c:204:18
    59de:    a3 32             	[sp+200] = r3			  ## decode_core.c:204:18
    59e0:    03 26             	r3 = [sp+24]			  ## decode_core.c:204:18
    59e2:    b4 f0 10 b3       	r11 = r1 + r3  #			  ## decode_core.c:204:18
    59e6:    01 25             		 r1 = [sp+20]			  ## decode_core.c:204:18
    59e8:    12 18             	r2 += r1			  ## decode_core.c:204:18
    59ea:    25 18             	r5 += r2			  ## decode_core.c:204:18
    59ec:    46 20             	r6 = 0x0			  ## decode_core.c:204:18
    59ee:    24 8d             	goto 0x9a <wtgv2_silk_decode_core+0x454 : 5a8a >			  ## decode_core.c:204:18
    59f0:    62 a2             	r2 = r6 << 0x2			  ## decode_core.c:204:36
    59f2:    21 32             	r1 = [sp+200]			  ## decode_core.c:204:36
    59f4:    94 1c             	r4 = r1 + r2			  ## decode_core.c:204:36
    59f6:    42 62             	r2 = [r4+0x8] 			  ## decode_core.c:208:32
    59f8:    54 ed 00 30       	r3 = h[r0+0x0] (s)			  ## decode_core.c:208:32
    59fc:    f8 f1 30 92       	r9_r8 = r3 * r2 (s)  #			  ## decode_core.c:208:32
    5a00:    47 61             		 r7 = [r4+0x4] 			  ## decode_core.c:209:32
    5a02:    54 ed 02 10       	r1 = h[r0+0x2] (s)			  ## decode_core.c:209:32
    5a06:    f8 e1 10 d7       	r13_r12 = r1 * r7 (s)			  ## decode_core.c:209:32
    5a0a:    d0 f1 00 89       	r9_r8 >>= 0x10  #			  ## decode_core.c:208:32
    5a0e:    41 60             		 r1 = [r4+0x0] 			  ## decode_core.c:210:32
    5a10:    54 ed 04 40       	r4 = h[r0+0x4] (s)			  ## decode_core.c:210:32
    5a14:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## decode_core.c:209:32
    5a18:    b4 e0 c0 28       	r2 = r12 + r8			  ## decode_core.c:209:32
    5a1c:    b8 e0 d0 39       	r3 = r13 + r9 + c			  ## decode_core.c:209:32
    5a20:    f8 e1 40 91       	r9_r8 = r4 * r1 (s)			  ## decode_core.c:210:32
    5a24:    d8 ec ba 16       	r1 = [r11+r6<<2]			  ## decode_core.c:211:32
    5a28:    54 ed 06 40       	r4 = h[r0+0x6] (s)			  ## decode_core.c:211:32
    5a2c:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:210:32
    5a30:    b4 e0 20 c8       	r12 = r2 + r8			  ## decode_core.c:210:32
    5a34:    b8 e0 30 d9       	r13 = r3 + r9 + c			  ## decode_core.c:210:32
    5a38:    f8 e1 40 31       	r3_r2 = r4 * r1 (s)			  ## decode_core.c:211:32
    5a3c:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## decode_core.c:211:32
    5a40:    b4 e0 c0 82       	r8 = r12 + r2			  ## decode_core.c:211:32
    5a44:    b8 e0 d0 93       	r9 = r13 + r3 + c			  ## decode_core.c:211:32
    5a48:    d0 e1 00 82       	r9_r8 <<= 0x20			  ## decode_core.c:211:32
    5a4c:    d8 ec 5a 16       	r1 = [r5+r6<<2]			  ## decode_core.c:212:32
    5a50:    54 ed 08 40       	r4 = h[r0+0x8] (s)			  ## decode_core.c:212:32
    5a54:    02 e1 00 80       	r2 = r8 + 0x0			  ## decode_core.c:212:32
    5a58:    47 22             	r7 = 0x2			  ## decode_core.c:212:32
    5a5a:    b8 e0 90 37       	r3 = r9 + r7 + c			  ## decode_core.c:212:32
    5a5e:    d0 e1 00 2a       	r3_r2 >>= 0x20			  ## decode_core.c:212:32
    5a62:    f8 e1 40 91       	r9_r8 = r4 * r1 (s)			  ## decode_core.c:212:32
    5a66:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:212:32
    5a6a:    d8 ec aa 16       	r1 = [r10+r6<<2]			  ## decode_core.c:216:31
    5a6e:    b4 e0 20 c8       	r12 = r2 + r8			  ## decode_core.c:212:32
    5a72:    b8 e0 30 d9       	r13 = r3 + r9 + c			  ## decode_core.c:212:32
    5a76:    c0 e1 c1 20       	r2 = r12 << 0x1			  ## decode_core.c:216:31
    5a7a:    21 18             	r1 += r2			  ## decode_core.c:216:31
    5a7c:    d8 ec ab 16       	[r10+r6<<2] = r1			  ## decode_core.c:216:29
    5a80:    11 a1             	r1 = r1 << 0x1			  ## decode_core.c:219:42
    5a82:    22 34             	r2 = [sp+208]			  ## decode_core.c:219:40
    5a84:    d8 ec 2b 16       	[r2+r6<<2] = r1			  ## decode_core.c:219:40
    5a88:    c6 21             	r6 += 0x1			  ## decode_core.c:204:51
    5a8a:    21 3a             	r1 = [sp+232]			  ## decode_core.c:204:36
    5a8c:    14 62             	r4 = [r1+0x8] 			  ## decode_core.c:204:36
    5a8e:    84 ed af 61       	ifs (r6 < r4) goto -0xa2 <wtgv2_silk_decode_core+0x3BA : 59f0 >			  ## decode_core.c:204:36
    5a92:    25 3a             	r5 = [sp+232]
    5a94:    41 a2             	r1 = r4 << 0x2			  ## decode_core.c:228:26
    5a96:    00 31             	r0 = [sp+68]			  ## decode_core.c:228:26
    5a98:    01 d8             	r1 += r0  #			  ## decode_core.c:228:26
    5a9a:    52 63             		 r2 = [r5+0xc] 			  ## decode_core.c:228:64
    5a9c:    22 a2             	r2 = r2 << 0x2			  ## decode_core.c:228:78
    5a9e:    80 ff 98 e6 ff ff 	call -0x1968 <memmove : 413c >			  ## decode_core.c:228:9
    5aa4:    00 29             	r0 = [sp+36]			  ## decode_core.c:228:9
    5aa6:    54 ed 0e 61       	r6 = h[r0+0x1e] (s)			  ## decode_core.c:228:9
    5aaa:    54 ed 0c 81       	r8 = h[r0+0x1c] (s)			  ## decode_core.c:228:9
    5aae:    d0 e9 e0 20       	r3_r2 = d[sp+224]			  ## decode_core.c:228:9
    5ab2:    ab bf             	r3 = r2 >>> 0x1f			  ## decode_core.c:228:9
    5ab4:    d0 e9 e1 20       	d[sp+224] = r3_r2			  ## decode_core.c:228:9
    5ab8:    ef bf             	r7 = r6 >>> 0x1f			  ## decode_core.c:228:9
    5aba:    d0 e9 81 60       	d[sp+128] = r7_r6			  ## decode_core.c:228:9
    5abe:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## decode_core.c:228:9
    5ac2:    d0 e9 79 80       	d[sp+120] = r9_r8			  ## decode_core.c:228:9
    5ac6:    54 ed 0a 21       	r2 = h[r0+0x1a] (s)			  ## decode_core.c:228:9
    5aca:    54 ed 08 61       	r6 = h[r0+0x18] (s)			  ## decode_core.c:228:9
    5ace:    54 ed 06 81       	r8 = h[r0+0x16] (s)			  ## decode_core.c:228:9
    5ad2:    54 ed 04 c1       	r12 = h[r0+0x14] (s)			  ## decode_core.c:228:9
    5ad6:    ab bf             	r3 = r2 >>> 0x1f			  ## decode_core.c:228:9
    5ad8:    d0 e9 71 20       	d[sp+112] = r3_r2			  ## decode_core.c:228:9
    5adc:    ef bf             	r7 = r6 >>> 0x1f			  ## decode_core.c:228:9
    5ade:    d0 e9 69 60       	d[sp+104] = r7_r6			  ## decode_core.c:228:9
    5ae2:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## decode_core.c:228:9
    5ae6:    d0 e9 61 80       	d[sp+96] = r9_r8			  ## decode_core.c:228:9
    5aea:    c0 e1 cf dd       	r13 = r12 >>> 0x1f			  ## decode_core.c:228:9
    5aee:    d0 e9 59 c0       	d[sp+88] = r13_r12			  ## decode_core.c:228:9
    5af2:    54 ed 02 21       	r2 = h[r0+0x12] (s)			  ## decode_core.c:228:9
    5af6:    54 ed 00 61       	r6 = h[r0+0x10] (s)			  ## decode_core.c:228:9
    5afa:    54 ed 0e 80       	r8 = h[r0+0xe] (s)			  ## decode_core.c:228:9
    5afe:    54 ed 0c c0       	r12 = h[r0+0xc] (s)			  ## decode_core.c:228:9
    5b02:    ab bf             	r3 = r2 >>> 0x1f			  ## decode_core.c:228:9
    5b04:    d0 e9 d1 20       	d[sp+208] = r3_r2			  ## decode_core.c:228:9
    5b08:    ef bf             	r7 = r6 >>> 0x1f			  ## decode_core.c:228:9
    5b0a:    d0 e9 c9 60       	d[sp+200] = r7_r6			  ## decode_core.c:228:9
    5b0e:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## decode_core.c:228:9
    5b12:    d0 e9 c1 80       	d[sp+192] = r9_r8			  ## decode_core.c:228:9
    5b16:    c0 e1 cf dd       	r13 = r12 >>> 0x1f			  ## decode_core.c:228:9
    5b1a:    d0 e9 b9 c0       	d[sp+184] = r13_r12			  ## decode_core.c:228:9
    5b1e:    54 ed 0a 20       	r2 = h[r0+0xa] (s)			  ## decode_core.c:228:9
    5b22:    54 ed 08 60       	r6 = h[r0+0x8] (s)			  ## decode_core.c:228:9
    5b26:    54 ed 06 80       	r8 = h[r0+0x6] (s)			  ## decode_core.c:228:9
    5b2a:    54 ed 04 c0       	r12 = h[r0+0x4] (s)			  ## decode_core.c:228:9
    5b2e:    ab bf             	r3 = r2 >>> 0x1f			  ## decode_core.c:228:9
    5b30:    d0 e9 b1 20       	d[sp+176] = r3_r2			  ## decode_core.c:228:9
    5b34:    ef bf             	r7 = r6 >>> 0x1f			  ## decode_core.c:228:9
    5b36:    d0 e9 a9 60       	d[sp+168] = r7_r6			  ## decode_core.c:228:9
    5b3a:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## decode_core.c:228:9
    5b3e:    d0 e9 a1 80       	d[sp+160] = r9_r8			  ## decode_core.c:228:9
    5b42:    c0 e1 cf dd       	r13 = r12 >>> 0x1f			  ## decode_core.c:228:9
    5b46:    d0 e9 99 c0       	d[sp+152] = r13_r12			  ## decode_core.c:228:9
    5b4a:    54 ed 02 20       	r2 = h[r0+0x2] (s)			  ## decode_core.c:228:9
    5b4e:    d9 e9 6c 82       	r8 = h[sp+620] (s)			  ## decode_core.c:228:9
    5b52:    57 62             	r7 = [r5+0x8] 			  ## decode_core.c:228:9
    5b54:    50 63             	r0 = [r5+0xc] 			  ## decode_core.c:229:31
    5b56:    80 33             	[sp+76] = r0
    5b58:    ab bf             	r3 = r2 >>> 0x1f
    5b5a:    d0 e9 91 20       	d[sp+144] = r3_r2
    5b5e:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f
    5b62:    d0 e9 89 80       	d[sp+136] = r9_r8
    5b66:    46 20             	r6 = 0x0
    5b68:    d4 e9 40 b0       	r11 = [sp+64]
    5b6c:    25 37             	r5 = [sp+220]
    5b6e:    74 95             	goto 0x1ea <wtgv2_silk_decode_core+0x724 : 5d5a >
    5b70:    60 a2             	r0 = r6 << 0x2			  ## decode_core.c:236:28
    5b72:    f8 e8 ec 10       	r1 = sp + 236			  ## decode_core.c:236:28
    5b76:    12 dc             	r2 = r1 + r0  #			  ## decode_core.c:236:28
    5b78:    21 3a             		 r1 = [sp+232]			  ## decode_core.c:235:28
    5b7a:    23 6f             	r3 = [r2+0x3c] 			  ## decode_core.c:236:28
    5b7c:    d0 e9 88 40       	r5_r4 = d[sp+136]			  ## decode_core.c:236:28
    5b80:    f8 f1 40 93       	r9_r8 = r4 * r3 (s)  #			  ## decode_core.c:236:28
    5b84:    11 64             		 r1 = [r1+0x10] 			  ## decode_core.c:235:28
    5b86:    d0 f1 00 89       	r9_r8 >>= 0x10  #			  ## decode_core.c:236:28
    5b8a:    23 6e             		 r3 = [r2+0x38] 			  ## decode_core.c:237:28
    5b8c:    c0 e1 11 ec       	r14 = r1 >>> 0x1			  ## decode_core.c:235:28
    5b90:    b4 e0 80 4e       	r4 = r8 + r14			  ## decode_core.c:236:28
    5b94:    b8 e0 90 5f       	r5 = r9 + r15 + c			  ## decode_core.c:236:28
    5b98:    d0 e9 90 80       	r9_r8 = d[sp+144]			  ## decode_core.c:237:28
    5b9c:    f8 f1 80 93       	r9_r8 = r8 * r3 (s)  #			  ## decode_core.c:237:28
    5ba0:    23 6d             		 r3 = [r2+0x34] 			  ## decode_core.c:238:28
    5ba2:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:237:28
    5ba6:    b4 e0 40 c8       	r12 = r4 + r8			  ## decode_core.c:237:28
    5baa:    b8 e0 50 d9       	r13 = r5 + r9 + c			  ## decode_core.c:237:28
    5bae:    d0 e9 98 40       	r5_r4 = d[sp+152]			  ## decode_core.c:238:28
    5bb2:    f8 f1 40 93       	r9_r8 = r4 * r3 (s)  #			  ## decode_core.c:238:28
    5bb6:    23 6c             		 r3 = [r2+0x30] 			  ## decode_core.c:239:28
    5bb8:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:238:28
    5bbc:    b4 e0 c0 48       	r4 = r12 + r8			  ## decode_core.c:238:28
    5bc0:    b8 e0 d0 59       	r5 = r13 + r9 + c			  ## decode_core.c:238:28
    5bc4:    d0 e9 a0 80       	r9_r8 = d[sp+160]			  ## decode_core.c:239:28
    5bc8:    f8 f1 80 93       	r9_r8 = r8 * r3 (s)  #			  ## decode_core.c:239:28
    5bcc:    23 6b             		 r3 = [r2+0x2c] 			  ## decode_core.c:240:28
    5bce:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:239:28
    5bd2:    b4 e0 40 c8       	r12 = r4 + r8			  ## decode_core.c:239:28
    5bd6:    b8 e0 50 d9       	r13 = r5 + r9 + c			  ## decode_core.c:239:28
    5bda:    d0 e9 a8 40       	r5_r4 = d[sp+168]			  ## decode_core.c:240:28
    5bde:    f8 f1 40 93       	r9_r8 = r4 * r3 (s)  #			  ## decode_core.c:240:28
    5be2:    23 6a             		 r3 = [r2+0x28] 			  ## decode_core.c:241:28
    5be4:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:240:28
    5be8:    b4 e0 c0 48       	r4 = r12 + r8			  ## decode_core.c:240:28
    5bec:    b8 e0 d0 59       	r5 = r13 + r9 + c			  ## decode_core.c:240:28
    5bf0:    d0 e9 b0 80       	r9_r8 = d[sp+176]			  ## decode_core.c:241:28
    5bf4:    f8 f1 80 93       	r9_r8 = r8 * r3 (s)  #			  ## decode_core.c:241:28
    5bf8:    23 69             		 r3 = [r2+0x24] 			  ## decode_core.c:242:28
    5bfa:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:241:28
    5bfe:    b4 e0 40 c8       	r12 = r4 + r8			  ## decode_core.c:241:28
    5c02:    b8 e0 50 d9       	r13 = r5 + r9 + c			  ## decode_core.c:241:28
    5c06:    d0 e9 b8 40       	r5_r4 = d[sp+184]			  ## decode_core.c:242:28
    5c0a:    f8 f1 40 93       	r9_r8 = r4 * r3 (s)  #			  ## decode_core.c:242:28
    5c0e:    23 68             		 r3 = [r2+0x20] 			  ## decode_core.c:243:28
    5c10:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:242:28
    5c14:    b4 e0 c0 48       	r4 = r12 + r8			  ## decode_core.c:242:28
    5c18:    b8 e0 d0 59       	r5 = r13 + r9 + c			  ## decode_core.c:242:28
    5c1c:    d0 e9 c0 80       	r9_r8 = d[sp+192]			  ## decode_core.c:243:28
    5c20:    f8 e1 80 93       	r9_r8 = r8 * r3 (s)			  ## decode_core.c:243:28
    5c24:    50 ec 28 21       	r3_r2 = d[r2+0x18]			  ## decode_core.c:244:28
    5c28:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:243:28
    5c2c:    b4 e0 40 c8       	r12 = r4 + r8			  ## decode_core.c:243:28
    5c30:    b8 e0 50 d9       	r13 = r5 + r9 + c			  ## decode_core.c:243:28
    5c34:    d0 e9 c8 40       	r5_r4 = d[sp+200]			  ## decode_core.c:244:28
    5c38:    f8 e1 40 53       	r5_r4 = r4 * r3 (s)			  ## decode_core.c:244:28
    5c3c:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## decode_core.c:244:28
    5c40:    b4 e0 c0 84       	r8 = r12 + r4			  ## decode_core.c:244:28
    5c44:    b8 e0 d0 95       	r9 = r13 + r5 + c			  ## decode_core.c:244:28
    5c48:    d0 e9 d0 40       	r5_r4 = d[sp+208]			  ## decode_core.c:245:28
    5c4c:    f8 e1 40 52       	r5_r4 = r4 * r2 (s)			  ## decode_core.c:245:28
    5c50:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## decode_core.c:245:28
    5c54:    b4 e0 80 24       	r2 = r8 + r4			  ## decode_core.c:245:28
    5c58:    b8 e0 90 35       	r3 = r9 + r5 + c			  ## decode_core.c:245:28
    5c5c:    81 f8 45 20       	if (r1 != 0x10) goto 0x8a <wtgv2_silk_decode_core+0x6B4 : 5cea >
    5c60:    f8 e8 ec 10       	r1 = sp + 236
    5c64:    10 18             	r0 += r1			  ## decode_core.c:247:32
    5c66:    01 65             	r1 = [r0+0x14] 			  ## decode_core.c:247:32
    5c68:    d0 e9 58 40       	r5_r4 = d[sp+88]			  ## decode_core.c:247:32
    5c6c:    f8 f1 40 51       	r5_r4 = r4 * r1 (s)  #			  ## decode_core.c:247:32
    5c70:    01 64             		 r1 = [r0+0x10] 			  ## decode_core.c:248:32
    5c72:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## decode_core.c:247:32
    5c76:    b4 e0 40 c2       	r12 = r4 + r2			  ## decode_core.c:247:32
    5c7a:    b8 e0 50 d3       	r13 = r5 + r3 + c			  ## decode_core.c:247:32
    5c7e:    d0 e9 60 20       	r3_r2 = d[sp+96]			  ## decode_core.c:248:32
    5c82:    f8 f1 20 51       	r5_r4 = r2 * r1 (s)  #			  ## decode_core.c:248:32
    5c86:    01 63             		 r1 = [r0+0xc] 			  ## decode_core.c:249:32
    5c88:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## decode_core.c:248:32
    5c8c:    b4 e0 c0 24       	r2 = r12 + r4			  ## decode_core.c:248:32
    5c90:    b8 e0 d0 35       	r3 = r13 + r5 + c			  ## decode_core.c:248:32
    5c94:    d0 e9 68 40       	r5_r4 = d[sp+104]			  ## decode_core.c:249:32
    5c98:    f8 f1 40 91       	r9_r8 = r4 * r1 (s)  #			  ## decode_core.c:249:32
    5c9c:    01 62             		 r1 = [r0+0x8] 			  ## decode_core.c:250:32
    5c9e:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:249:32
    5ca2:    b4 e0 20 48       	r4 = r2 + r8			  ## decode_core.c:249:32
    5ca6:    b8 e0 30 59       	r5 = r3 + r9 + c			  ## decode_core.c:249:32
    5caa:    d0 e9 70 20       	r3_r2 = d[sp+112]			  ## decode_core.c:250:32
    5cae:    f8 e1 20 91       	r9_r8 = r2 * r1 (s)			  ## decode_core.c:250:32
    5cb2:    50 ec 00 00       	r1_r0 = d[r0+0x0]			  ## decode_core.c:251:32
    5cb6:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:250:32
    5cba:    b4 e0 40 28       	r2 = r4 + r8			  ## decode_core.c:250:32
    5cbe:    b8 e0 50 39       	r3 = r5 + r9 + c			  ## decode_core.c:250:32
    5cc2:    d0 e9 78 40       	r5_r4 = d[sp+120]			  ## decode_core.c:251:32
    5cc6:    f8 e1 40 51       	r5_r4 = r4 * r1 (s)			  ## decode_core.c:251:32
    5cca:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## decode_core.c:251:32
    5cce:    b4 e0 20 84       	r8 = r2 + r4			  ## decode_core.c:251:32
    5cd2:    b8 e0 30 95       	r9 = r3 + r5 + c			  ## decode_core.c:251:32
    5cd6:    d0 e9 80 20       	r3_r2 = d[sp+128]			  ## decode_core.c:252:32
    5cda:    f8 e1 20 10       	r1_r0 = r2 * r0 (s)			  ## decode_core.c:252:32
    5cde:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## decode_core.c:252:32
    5ce2:    b4 e0 80 20       	r2 = r8 + r0			  ## decode_core.c:252:32
    5ce6:    b8 e0 90 31       	r3 = r9 + r1 + c			  ## decode_core.c:252:32
    5cea:    20 16             	r0 = r2			  ## decode_core.c:256:45
    5cec:    a2 ee 78 04       	ifs (r2 <= 0xf8000000) {			  ## decode_core.c:256:45
    5cf0:    60 e0 78 04       		r0 = 0xF8000000
                               	}			  ## decode_core.c:256:45
    5cf4:    01 a4             	r1 = r0 << 0x4			  ## decode_core.c:256:45
    5cf6:    c0 ff f0 ff ff 7f 	r0 = 0x7ffffff0 <RAM_LIMIT_H+0x7FE5FFF0 : 7ffffff0 >			  ## decode_core.c:256:45
    5cfc:    25 37             	r5 = [sp+220]			  ## decode_core.c:256:45
    5cfe:    a2 ed 00 06       	ifs (r2 < 0x8000000) {			  ## decode_core.c:256:45
    5d02:    10 16             		r0 = r1
                               	}			  ## decode_core.c:256:45
    5d04:    d8 ec aa 26       	r2 = [r10+r6<<2]			  ## decode_core.c:256:45
    5d08:    81 1c             	r1 = r0 + r2			  ## decode_core.c:256:45
    5d0a:    81 fd 06 00       	ifs (r1 < 0x0) goto 0xc <wtgv2_silk_decode_core+0x6E4 : 5d1a >			  ## decode_core.c:256:45
    5d0e:    82 19             	r2 &= r0			  ## decode_core.c:256:45
    5d10:    60 e0 00 04       	r0 = 0x80000000			  ## decode_core.c:256:45
    5d14:    02 fd 07 00       	ifs (r2 >= 0x0) goto 0xe <wtgv2_silk_decode_core+0x6F0 : 5d26 >			  ## decode_core.c:256:45
    5d18:    04 87             	goto 0xe <wtgv2_silk_decode_core+0x6F2 : 5d28 >			  ## decode_core.c:256:45
    5d1a:    02 19             	r2 |= r0			  ## decode_core.c:256:45
    5d1c:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## decode_core.c:256:45
    5d22:    72 fe 01 fe       	ifs (r2 > -0x1) goto 0x2 <wtgv2_silk_decode_core+0x6F2 : 5d28 >			  ## decode_core.c:256:45
    5d26:    10 16             	r0 = r1
    5d28:    f8 e8 ec 10       	r1 = sp + 236
    5d2c:    d1 20             	r1 += 0x40			  ## decode_core.c:256:43
    5d2e:    d8 ec 1b 06       	[r1+r6<<2] = r0			  ## decode_core.c:256:43
    5d32:    d0 e9 e0 20       	r3_r2 = d[sp+224]			  ## decode_core.c:259:36
    5d36:    f8 e1 00 12       	r1_r0 = r0 * r2 (s)			  ## decode_core.c:259:36
    5d3a:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## decode_core.c:259:36
    5d3e:    88 a7             	r0 = r0 >>> 0x7			  ## decode_core.c:259:36
    5d40:    c0 21             	r0 += 0x1			  ## decode_core.c:259:36
    5d42:    89 a1             	r1 = r0 >>> 0x1			  ## decode_core.c:259:36
    5d44:    40 e0 ff 7f       	r0 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## decode_core.c:259:36
    5d48:    a1 ed 00 4c       	ifs (r1 < 0x8000) {			  ## decode_core.c:259:36
    5d4c:    40 e0 00 80       		r0 = -0x8000 <RAM_LIMIT_H+0xFFFFFFFFFFE58000 : ffffffffffff8000 >			  ## decode_core.c:259:36
    5d50:    34 e4 11 00       		r0 = smax(r1, r0)
                               	}			  ## decode_core.c:259:36
    5d54:    d8 ed b9 06       	h[r11+r6<<1] = r0			  ## decode_core.c:259:22
    5d58:    c6 21             	r6 += 0x1			  ## decode_core.c:231:47
    5d5a:    87 ed 09 61       	ifs (r6 < r7) goto -0x1ee <wtgv2_silk_decode_core+0x53A : 5b70 >
    5d5e:    70 a1             	r0 = r7 << 0x1			  ## decode_core.c:263:9
    5d60:    01 35             	r1 = [sp+84]			  ## decode_core.c:263:9
    5d62:    10 d8             	r0 += r1  #			  ## decode_core.c:263:9
    5d64:    02 2c             		 r2 = [sp+48]			  ## decode_core.c:263:9
    5d66:    01 f1 84 01       	r1 = r0 + 0x184  #			  ## decode_core.c:263:9
    5d6a:    00 2b             		 r0 = [sp+44]			  ## decode_core.c:263:9
    5d6c:    80 ff ca e3 ff ff 	call -0x1c36 <memmove : 413c >			  ## decode_core.c:263:9
    5d72:    b1 d6             	r1 = r11  #			  ## decode_core.c:264:9
    5d74:    23 3a             		 r3 = [sp+232]			  ## decode_core.c:264:9
    5d76:    3b d6             	r11 = r3  #			  ## decode_core.c:264:9
    5d78:    30 62             		 r0 = [r3+0x8] 			  ## decode_core.c:264:9
    5d7a:    02 a1             	r2 = r0 << 0x1			  ## decode_core.c:264:9
    5d7c:    00 2a             	r0 = [sp+40]			  ## decode_core.c:264:9
    5d7e:    80 ff b8 e3 ff ff 	call -0x1c48 <memmove : 413c >			  ## decode_core.c:264:9
    5d84:    d0 ec b8 40       	r4 = [r11+0x8]			  ## decode_core.c:268:9
    5d88:    40 a2             	r0 = r4 << 0x2			  ## decode_core.c:268:9
    5d8a:    f8 e8 ec 10       	r1 = sp + 236			  ## decode_core.c:268:9
    5d8e:    10 18             	r0 += r1			  ## decode_core.c:268:9
    5d90:    10 8f             	rep 0x4 0x10 {			  ## decode_core.c:268:9
    5d92:    02 05             		r2 = [r0++=0x4] 			  ## decode_core.c:268:9
    5d94:    92 05             		[r1++=0x4] = r2
                               	}			  ## decode_core.c:268:9
    5d96:    c5 21             	r5 += 0x1			  ## decode_core.c:116:39
    5d98:    d4 e9 48 c0       	r12 = [sp+72]
    5d9c:    c6 ff 35 84 b3 0b 	r6 = 0xbb38435 <RAM_LIMIT_H+0xB998434 : bb38434 >
    5da2:    c7 ff 6b 63 19 36 	r7 = 0x3619636b <RAM_LIMIT_H+0x35FF636A : 3619636a >
    5da8:    68 d5             	r9_r8 = r7_r6  #
    5daa:    03 2e             		 r3 = [sp+56]
    5dac:    04 97             	goto 0x2e <wtgv2_silk_decode_core+0x7A6 : 5ddc >
    5dae:    20 ff 80 0b 07 fe 	if (r0 == 0x10000) goto -0x3f2 <wtgv2_silk_decode_core+0x38C : 59c2 >
    5db4:    02 33             	r2 = [sp+76]			  ## decode_core.c:51:16
    5db6:    22 a2             	r2 = r2 << 0x2			  ## decode_core.c:51:16
    5db8:    03 23             	r3 = [sp+12]			  ## decode_core.c:51:16
    5dba:    32 18             	r2 += r3			  ## decode_core.c:51:16
    5dbc:    89 bf             	r1 = r0 >>> 0x1f			  ## decode_core.c:51:16
    5dbe:    03 e1 02 b0       	r3 = r11 + 0x2
    5dc2:    45 20             	r5 = 0x0
    5dc4:    04 88             	goto 0x10 <wtgv2_silk_decode_core+0x7A0 : 5dd6 >
    5dc6:    27 60             	r7 = [r2+0x0] 			  ## decode_core.c:197:60
    5dc8:    f8 e1 70 90       	r9_r8 = r7 * r0 (s)			  ## decode_core.c:197:60
    5dcc:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## decode_core.c:197:60
    5dd0:    df ec 2d 8f       	[r2++=-0x4] = r8			  ## decode_core.c:197:58
    5dd4:    c5 21             	r5 += 0x1			  ## decode_core.c:196:57
    5dd6:    83 ed f6 51       	ifs (r5 < r3) goto -0x14 <wtgv2_silk_decode_core+0x790 : 5dc6 >
    5dda:    f6 93             	goto -0x41a <wtgv2_silk_decode_core+0x38C : 59c2 >
    5ddc:    d0 ec b0 00       	r0 = [r11+0x0]			  ## decode_core.c:116:28
    5de0:    4b ff 00 50 8b fc 	ifs (r5 < r0) goto -0x6ea <wtgv2_silk_decode_core+0xC6 : 56fc >			  ## decode_core.c:116:28
    5de6:    f8 e8 ec 00       	r0 = sp + 236
    5dea:    02 22             	r2 = [sp+8]			  ## decode_core.c:274:5
    5dec:    10 8f             	rep 0x4 0x10 {			  ## decode_core.c:274:5
    5dee:    01 05             		r1 = [r0++=0x4] 			  ## decode_core.c:274:5
    5df0:    a1 05             		[r2++=0x4] = r1
                               	}			  ## decode_core.c:274:5
    5df2:    00 2f             	r0 = [sp+60]			  ## decode_core.c:275:5
    5df4:    01 28             	r1 = [sp+32]			  ## decode_core.c:275:5
    5df6:    81 66             	[r0+0x18] = r1			  ## decode_core.c:275:5
    5df8:    f0 e8 8c 02       	sp += 0x28c			  ## decode_core.c:275:5
    5dfc:    5f 04             	{pc, r15-r4} = [sp++]			  ## decode_core.c:282:1


ec_read_byte:
    5dfe:    02 66             	r2 = [r0+0x18] 			  ## entdec.c:5:0
    5e00:    03 61             	r3 = [r0+0x4] 			  ## entdec.c:6:33
    5e02:    41 20             	r1 = 0x0			  ## entdec.c:6:33
    5e04:    92 e9 00 c3       	if (r2 < r3) {			  ## entdec.c:6:33
    5e08:    d8 ec 08 11       		r1 = [r0++=0x18]			  ## entdec.c:6:50
    5e0c:    2b 81             		r3 = r2 + 0x1			  ## entdec.c:6:65
    5e0e:    83 60             		[r0+0x0] = r3			  ## entdec.c:6:65
    5e10:    d8 ee 10 12       		r1 = b[r1+r2] (u)
                               	}			  ## entdec.c:6:43
    5e14:    10 16             	r0 = r1			  ## entdec.c:6:5
    5e16:    80 00             	rts			  ## entdec.c:6:5


wtgv2ec_dec_normalize:
    5e18:    76 04             	[--sp] = {rets, r6-r4}			  ## entdec.c:16:0
    5e1a:    04 16             	r4 = r0			  ## entdec.c:16:0
    5e1c:    c5 ff 00 ff ff 7f 	r5 = 0x7fffff00 <RAM_LIMIT_H+0x7FE5FF00 : 7fffff00 >			  ## entdec.c:16:0
    5e22:    04 93             	goto 0x26 <wtgv2ec_dec_normalize+0x32 : 5e4a >			  ## entdec.c:16:0
    5e24:    c5 eb 08 40       	[r4+0x14] += 0x8			  ## entdec.c:20:28
    5e28:    00 a8             	r0 = r0 << 0x8			  ## entdec.c:21:20
    5e2a:    40 d6             	r0 = r4  #			  ## entdec.c:25:22
    5e2c:    c0 67             		 [r4+0x1c] = r0			  ## entdec.c:21:20
    5e2e:    46 6a             	r6 = [r4+0x28] 			  ## entdec.c:23:22
    5e30:    71 86             	call -0x34 <ec_read_byte : 5dfe >			  ## entdec.c:25:22
    5e32:    c0 6a             	[r4+0x28] = r0			  ## entdec.c:25:20
    5e34:    41 68             	r1 = [r4+0x20] 			  ## entdec.c:29:31
    5e36:    11 a8             	r1 = r1 << 0x8			  ## entdec.c:29:35
    5e38:    d1 19             	r1 &= r5			  ## entdec.c:29:74
    5e3a:    62 a8             	r2 = r6 << 0x8			  ## entdec.c:27:20
    5e3c:    20 19             	r0 |= r2			  ## entdec.c:27:35
    5e3e:    b0 e1 a0 00       	r0 = uextra(r0, p:0x1, l:0x8)			  ## entdec.c:29:65
    5e42:    10 19             	r0 |= r1			  ## entdec.c:29:74
    5e44:    50 e1 ff 00       	r0 = r0 ^ 0xFF			  ## entdec.c:29:74
    5e48:    c0 68             	[r4+0x20] = r0			  ## entdec.c:29:20
    5e4a:    40 67             	r0 = [r4+0x1c] 			  ## entdec.c:18:19
    5e4c:    29 ff 00 08 e9 ff 	if (r0 <= 0x800000) goto -0x2e <wtgv2ec_dec_normalize+0xC : 5e24 >			  ## entdec.c:18:19
    5e52:    56 04             	{pc, r6-r4} = [sp++]			  ## entdec.c:31:1


wtgv2ec_dec_icdf:
    5e54:    77 04             	[--sp] = {rets, r7-r4}			  ## entdec.c:71:0
    5e56:    50 ec 0c 21       	r3_r2 = d[r0+0x1c]			  ## entdec.c:77:16
    5e5a:    a5 a8             	r5 = r2 >> 0x8			  ## entdec.c:79:11
    5e5c:    14 3f             	r4 = -0x1
    5e5e:    16 1d             	r6 = r1 + r4			  ## entdec.c:83:13
    5e60:    26 d6             	r6 = r2  #			  ## entdec.c:83:13
    5e62:    6f 41             		 r7 = b[r6+0x1] (u)			  ## entdec.c:83:13
    5e64:    f0 e1 70 25       	r2 = r7 * r5			  ## entdec.c:83:13
    5e68:    c4 21             	r4 += 0x1			  ## entdec.c:83:13
    5e6a:    82 e9 f8 31       	if (r3 < r2) goto -0x10 <wtgv2ec_dec_icdf+0xA : 5e5e >			  ## entdec.c:84:5
    5e6e:    b1 1e             	r1 = r3 - r2			  ## entdec.c:85:20
    5e70:    e1 de             	r1 = r6 - r2  #			  ## entdec.c:86:20
    5e72:    81 68             		 [r0+0x20] = r1			  ## entdec.c:85:16
    5e74:    81 67             	[r0+0x1c] = r1			  ## entdec.c:86:16
    5e76:    61 90             	call -0x60 <wtgv2ec_dec_normalize : 5e18 >			  ## entdec.c:87:5
    5e78:    40 16             	r0 = r4			  ## entdec.c:88:5
    5e7a:    57 04             	{pc, r7-r4} = [sp++]			  ## entdec.c:88:5


wtgv2_silk_NLSF_unpack:
    5e7c:    7a 04             	[--sp] = {rets, r10-r4}			  ## NLSF_unpack.c:41:0
    5e7e:    54 ed 22 50       	r5 = h[r2+0x2] (s)			  ## NLSF_unpack.c:46:50
    5e82:    53 db             	r3 *= r5  #			  ## NLSF_unpack.c:46:48
    5e84:    24 66             		 r4 = [r2+0x18] 			  ## NLSF_unpack.c:46:30
    5e86:    46 22             	r6 = 0x2			  ## NLSF_unpack.c:46:30
    5e88:    f4 e1 31 36       	r3 = r3 / r6 (s)			  ## NLSF_unpack.c:46:67
    5e8c:    b4 e0 40 83       	r8 = r4 + r3			  ## NLSF_unpack.c:46:19
    5e90:    44 20             	r4 = 0x0
    5e92:    14 8e             	goto 0x5c <wtgv2_silk_NLSF_unpack+0x74 : 5ef0 >
    5e94:    d0 ee 81 50       	r5 = b[r8++=0x1] (u)			  ## NLSF_unpack.c:48:17
    5e98:    46 a1             	r6 = r4 << 0x1			  ## NLSF_unpack.c:49:26
    5e9a:    b7 e1 8c 50       	r7 = uextra(r5, p:0x1, l:0x3)			  ## NLSF_unpack.c:49:28
    5e9e:    e7 e1 09 70       	r7 = r7 * 0x9			  ## NLSF_unpack.c:49:28
    5ea2:    03 16             	r3 = r0			  ## NLSF_unpack.c:49:26
    5ea4:    dc ed 31 76       	h[++r3=r6] = r7			  ## NLSF_unpack.c:49:26
    5ea8:    54 ed 22 90       	r9 = h[r2+0x2] (s)			  ## NLSF_unpack.c:50:70
    5eac:    77 e1 fe 50       	r7 = r5 & 0xFFFFFF01			  ## NLSF_unpack.c:50:60
    5eb0:    d0 ec 24 a1       	r10 = [r2+0x14]			  ## NLSF_unpack.c:50:39
    5eb4:    a7 e0 00 70       	r7 = 0x0 - r7			  ## NLSF_unpack.c:50:66
    5eb8:    36 e1 ff 9f       	r6 = r9 + -0x1			  ## NLSF_unpack.c:50:87
    5ebc:    f6 19             	r6 &= r7			  ## NLSF_unpack.c:50:66
    5ebe:    a6 18             	r6 += r10			  ## NLSF_unpack.c:50:28
    5ec0:    d8 ee 60 64       	r6 = b[r6+r4] (u)			  ## NLSF_unpack.c:50:28
    5ec4:    17 16             	r7 = r1			  ## NLSF_unpack.c:50:26
    5ec6:    dc ee 71 64       	b[++r7=r4] = r6			  ## NLSF_unpack.c:50:26
    5eca:    d6 a5             	r6 = r5 >> 0x5			  ## NLSF_unpack.c:51:28
    5ecc:    e6 e1 09 60       	r6 = r6 * 0x9			  ## NLSF_unpack.c:51:28
    5ed0:    b5 f1 04 52       	r5 = uextra(r5, p:0x4, l:0x1)  #			  ## NLSF_unpack.c:52:78
    5ed4:    be 61             		 h[r3+0x2] = r6			  ## NLSF_unpack.c:51:26
    5ed6:    54 ed 22 30       	r3 = h[r2+0x2] (s)			  ## NLSF_unpack.c:52:88
    5eda:    a5 f0 00 50       	r5 = 0x0 - r5  #			  ## NLSF_unpack.c:52:84
    5ede:    26 65             		 r6 = [r2+0x14] 			  ## NLSF_unpack.c:52:39
    5ee0:    fb 3f             	r3 += -0x1			  ## NLSF_unpack.c:52:105
    5ee2:    d3 19             	r3 &= r5			  ## NLSF_unpack.c:52:84
    5ee4:    63 18             	r3 += r6			  ## NLSF_unpack.c:52:28
    5ee6:    43 18             	r3 += r4			  ## NLSF_unpack.c:52:28
    5ee8:    3b 41             	r3 = b[r3+0x1] (u)			  ## NLSF_unpack.c:52:28
    5eea:    fb 41             	b[r7+0x1] = r3			  ## NLSF_unpack.c:52:26
    5eec:    2d 61             	r5 = h[r2+0x2] (u)			  ## NLSF_unpack.c:52:26
    5eee:    c4 22             	r4 += 0x2			  ## NLSF_unpack.c:47:41
    5ef0:    dd 17             	r5 = r5.l (s)			  ## NLSF_unpack.c:47:21
    5ef2:    85 ed cf 41       	ifs (r4 < r5) goto -0x62 <wtgv2_silk_NLSF_unpack+0x18 : 5e94 >			  ## NLSF_unpack.c:47:21
    5ef6:    5a 04             	{pc, r10-r4} = [sp++]			  ## NLSF_unpack.c:54:1


wtgv2_silk_decode_indices:
    5ef8:    7c 04             	[--sp] = {rets, r12-r4}			  ## decode_indices.c:43:0
    5efa:    e2 94             	sp += -0x30			  ## decode_indices.c:43:0
    5efc:    14 16             	r4 = r1			  ## decode_indices.c:43:0
    5efe:    05 16             	r5 = r0			  ## decode_indices.c:43:0
    5f00:    0b e1 0c 54       	r11 = r5 + 0x40c			  ## decode_indices.c:43:0
    5f04:    83 47             	if (r3 != 0) goto 0xe <wtgv2_silk_decode_indices+0x1C : 5f14 >			  ## decode_indices.c:43:0
    5f06:    00 e1 58 b0       	r0 = r11 + 0x58			  ## decode_indices.c:52:24
    5f0a:    d8 ec 0a 02       	r0 = [r0+r2<<2]			  ## decode_indices.c:52:24
    5f0e:    00 ff 00 00 11 01 	if (r0 == 0x0) goto 0x222 <wtgv2_silk_decode_indices+0x23E : 6136 >			  ## decode_indices.c:52:24
    5f14:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:53:56
    5f16:    09 9c             	r1 = r0 + 0x1c			  ## decode_indices.c:53:44
    5f18:    40 16             	r0 = r4			  ## decode_indices.c:53:14
    5f1a:    41 9c             	call -0xc8 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:53:14
    5f1c:    c0 22             	r0 += 0x2			  ## decode_indices.c:53:100
    5f1e:    81 a1             	r1 = r0 >> 0x1			  ## decode_indices.c:57:49
    5f20:    09 e1 98 54       	r9 = r5 + 0x498			  ## decode_indices.c:57:49
    5f24:    52 ee 91 10       	b[r9+0x1] = r1			  ## decode_indices.c:57:36
    5f28:    60 e1 01 00       	r0 = r0 & 0x1			  ## decode_indices.c:58:38
    5f2c:    52 ee 92 00       	b[r9+0x2] = r0			  ## decode_indices.c:58:36
    5f30:    0a e1 7c 54       	r10 = r5 + 0x47c			  ## decode_indices.c:58:36
    5f34:    d0 ec a0 03       	r0 = [r10+0x30]			  ## decode_indices.c:60:16
    5f38:    d4 e9 58 80       	r8 = [sp+88]			  ## decode_indices.c:60:16
    5f3c:    b0 e8 00 40       	if (r0 != 0x0) {
    5f40:    41 20             		r1 = 0x0
    5f42:    52 ee 91 10       		b[r9+0x1] = r1
                               	}			  ## decode_indices.c:62:34
    5f46:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:62:34
    5f48:    88 f8 05 04       	if (r8 != 0x2) goto 0xa <wtgv2_silk_decode_indices+0x5E : 5f56 >			  ## decode_indices.c:69:9
    5f4c:    01 e1 20 00       	r1 = r0 + 0x20			  ## decode_indices.c:71:85
    5f50:    40 16             	r0 = r4			  ## decode_indices.c:71:55
    5f52:    41 80             	call -0x100 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:71:55
    5f54:    04 93             	goto 0x26 <wtgv2_silk_decode_indices+0x84 : 5f7c >			  ## decode_indices.c:71:55
    5f56:    11 b8             	r1 = r1 << 0x18			  ## decode_indices.c:74:56
    5f58:    99 b5             	r1 = r1 >>> 0x15			  ## decode_indices.c:74:56
    5f5a:    10 18             	r0 += r1			  ## decode_indices.c:74:56
    5f5c:    01 e1 49 00       	r1 = r0 + 0x49			  ## decode_indices.c:74:56
    5f60:    40 16             	r0 = r4			  ## decode_indices.c:74:56
    5f62:    bf ea 77 ff       	call -0x112 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:74:56
    5f66:    00 a3             	r0 = r0 << 0x3			  ## decode_indices.c:74:45
    5f68:    52 ee a0 00       	b[r10+0x0] = r0			  ## decode_indices.c:74:43
    5f6c:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:75:98
    5f6e:    09 8a             	r1 = r0 + 0xa			  ## decode_indices.c:75:86
    5f70:    40 16             	r0 = r4			  ## decode_indices.c:75:56
    5f72:    bf ea 6f ff       	call -0x122 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:75:56
    5f76:    50 ee a0 10       	r1 = b[r10+0x0] (u)			  ## decode_indices.c:75:42
    5f7a:    10 18             	r0 += r1			  ## decode_indices.c:75:42
    5f7c:    52 ee a0 00       	b[r10+0x0] = r0
    5f80:    46 e0 7d 04       	r6 = 0x47d <WOLASynthesisFilter_Float_M64_m4_r1+0x78 : 47c >
    5f84:    04 89             	goto 0x12 <wtgv2_silk_decode_indices+0xA0 : 5f98 >
    5f86:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:80:97
    5f88:    01 e1 20 00       	r1 = r0 + 0x20			  ## decode_indices.c:80:85
    5f8c:    40 16             	r0 = r4			  ## decode_indices.c:80:55
    5f8e:    bf ea 61 ff       	call -0x13e <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:80:55
    5f92:    d8 ee 51 06       	b[r5+r6] = r0			  ## decode_indices.c:80:42
    5f96:    c6 21             	r6 += 0x1			  ## decode_indices.c:79:5
    5f98:    d0 ec b8 00       	r0 = [r11+0x8]			  ## decode_indices.c:79:28
    5f9c:    31 e1 84 6b       	r1 = r6 + -0x47c			  ## decode_indices.c:79:28
    5fa0:    80 ed f1 11       	ifs (r1 < r0) goto -0x1e <wtgv2_silk_decode_indices+0x8E : 5f86 >			  ## decode_indices.c:79:28
    5fa4:    d0 ec a0 03       	r0 = [r10+0x30]			  ## decode_indices.c:83:16
    5fa8:    00 47             	if (r0 == 0) goto 0xe <wtgv2_silk_decode_indices+0xC0 : 5fb8 >			  ## decode_indices.c:83:16
    5faa:    54 ee b0 07       	r0 = b[r11+0x70] (s)			  ## decode_indices.c:85:13
    5fae:    30 ed 0b 40       	ifs (r0 >= 0xb) {			  ## decode_indices.c:85:13
    5fb2:    40 2a             		r0 = 0xa			  ## decode_indices.c:87:44
    5fb4:    52 ee a0 00       		b[r10+0x0] = r0
                               	}			  ## decode_indices.c:87:44
    5fb8:    0c e1 4c 54       	r12 = r5 + 0x44c
    5fbc:    d0 ec c4 02       	r0 = [r12+0x24]			  ## decode_indices.c:94:142
    5fc0:    54 ee bd 18       	r1 = b[r11+0x8d] (s)			  ## decode_indices.c:94:100
    5fc4:    54 ed 00 00       	r0 = h[r0+0x0] (s)			  ## decode_indices.c:94:135
    5fc8:    d0 ec c8 22       	r2 = [r12+0x28]			  ## decode_indices.c:94:88
    5fcc:    99 a1             	r1 = r1 >>> 0x1			  ## decode_indices.c:94:126
    5fce:    10 1b             	r0 *= r1			  ## decode_indices.c:94:133
    5fd0:    21 1c             	r1 = r2 + r0			  ## decode_indices.c:94:81
    5fd2:    40 16             	r0 = r4			  ## decode_indices.c:94:50
    5fd4:    bf ea 3e ff       	call -0x184 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:94:50
    5fd8:    52 ee a8 00       	b[r10+0x8] = r0			  ## decode_indices.c:94:37
    5fdc:    d0 ec c4 22       	r2 = [r12+0x24]			  ## decode_indices.c:95:52
    5fe0:    0b 17             	r3 = r0.b0 (s)			  ## decode_indices.c:95:63
    5fe2:    88 90             	r0 = sp + 16			  ## decode_indices.c:95:63
    5fe4:    89 80             	r1 = sp + 0			  ## decode_indices.c:95:63
    5fe6:    bf ea 49 ff       	call -0x16e <wtgv2_silk_NLSF_unpack : 5e7c >			  ## decode_indices.c:95:5
    5fea:    07 e1 79 b0       	r7 = r11 + 0x79			  ## decode_indices.c:97:10
    5fee:    46 20             	r6 = 0x0
    5ff0:    14 81             	goto 0x42 <wtgv2_silk_decode_indices+0x13C : 6034 >
    5ff2:    88 90             	r0 = sp + 16
    5ff4:    d8 ed 0a 06       	r0 = h[r0+r6<<1] (s)			  ## decode_indices.c:98:45
    5ff8:    d0 ec cc 12       	r1 = [r12+0x2c]			  ## decode_indices.c:98:52
    5ffc:    01 18             	r1 += r0			  ## decode_indices.c:98:45
    5ffe:    40 16             	r0 = r4			  ## decode_indices.c:98:14
    6000:    bf ea 28 ff       	call -0x1b0 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:98:14
    6004:    00 f8 0a 10       	if (r0 == 0x8) goto 0x14 <wtgv2_silk_decode_indices+0x124 : 601c >			  ## decode_indices.c:99:13
    6008:    80 50             	if (r0 != 0) goto 0x20 <wtgv2_silk_decode_indices+0x132 : 602a >
    600a:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:100:61
    600c:    01 e1 44 02       	r1 = r0 + 0x244			  ## decode_indices.c:100:49
    6010:    40 16             	r0 = r4			  ## decode_indices.c:100:19
    6012:    bf ea 1f ff       	call -0x1c2 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:100:19
    6016:    a0 e0 00 00       	r0 = 0x0 - r0			  ## decode_indices.c:100:16
    601a:    04 87             	goto 0xe <wtgv2_silk_decode_indices+0x132 : 602a >
    601c:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:102:61
    601e:    01 e1 44 02       	r1 = r0 + 0x244			  ## decode_indices.c:102:49
    6022:    40 16             	r0 = r4			  ## decode_indices.c:102:19
    6024:    bf ea 16 ff       	call -0x1d4 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:102:19
    6028:    c0 28             	r0 += 0x8			  ## decode_indices.c:102:16
    602a:    00 e1 fc 00       	r0 = r0 + 0xfc			  ## decode_indices.c:104:61
    602e:    d8 ee 71 06       	b[r7+r6] = r0			  ## decode_indices.c:104:43
    6032:    c6 21             	r6 += 0x1			  ## decode_indices.c:104:38
    6034:    d0 ec c4 02       	r0 = [r12+0x24]			  ## decode_indices.c:97:28
    6038:    54 ed 02 00       	r0 = h[r0+0x2] (s)			  ## decode_indices.c:97:21
    603c:    80 ed d9 61       	ifs (r6 < r0) goto -0x4e <wtgv2_silk_decode_indices+0xFA : 5ff2 >			  ## decode_indices.c:97:21
    6040:    d0 ec b8 10       	r1 = [r11+0x8]			  ## decode_indices.c:108:16
    6044:    40 24             	r0 = 0x4			  ## decode_indices.c:108:16
    6046:    31 e8 04 c0       	if (r1 == 0x4) {			  ## decode_indices.c:108:16
    604a:    40 6c             		r0 = [r4+0x30] 			  ## decode_indices.c:109:97
    604c:    09 95             		r1 = r0 + 0x15			  ## decode_indices.c:109:85
    604e:    40 16             		r0 = r4			  ## decode_indices.c:109:55
    6050:    bf ea 00 ff       		call -0x200
                               	} <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:109:55
    6054:    52 ee 93 00       	b[r9+0x3] = r0			  ## decode_indices.c:109:55
    6058:    50 ee 91 00       	r0 = b[r9+0x1] (u)			  ## decode_indices.c:114:24
    605c:    80 f8 60 04       	if (r0 != 0x2) goto 0xc0 <wtgv2_silk_decode_indices+0x228 : 6120 >			  ## decode_indices.c:114:24
    6060:    88 f8 17 04       	if (r8 != 0x2) goto 0x2e <wtgv2_silk_decode_indices+0x19A : 6092 >
    6064:    d0 ec c0 01       	r0 = [r12+0x10]			  ## decode_indices.c:121:56
    6068:    80 f8 13 04       	if (r0 != 0x2) goto 0x26 <wtgv2_silk_decode_indices+0x19A : 6092 >			  ## decode_indices.c:121:56
    606c:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:123:84
    606e:    01 e1 4b 02       	r1 = r0 + 0x24b			  ## decode_indices.c:123:72
    6072:    40 16             	r0 = r4			  ## decode_indices.c:123:42
    6074:    bf ea ee fe       	call -0x224 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:123:42
    6078:    89 17             	r1 = r0.l (s)			  ## decode_indices.c:124:32
    607a:    81 fd 0a 02       	ifs (r1 < 0x1) goto 0x14 <wtgv2_silk_decode_indices+0x19A : 6092 >			  ## decode_indices.c:124:32
    607e:    50 ed c4 11       	r1 = h[r12+0x14] (u)			  ## decode_indices.c:126:57
    6082:    06 e1 54 b0       	r6 = r11 + 0x54			  ## decode_indices.c:126:64
    6086:    10 18             	r0 += r1			  ## decode_indices.c:125:49
    6088:    c1 ff f7 ff 00 00 	r1 = 0xfff7 <.GJTIE291_0_0_+0x72C : fff6 >			  ## decode_indices.c:125:49
    608e:    10 18             	r0 += r1			  ## decode_indices.c:126:80
    6090:    04 95             	goto 0x2a <wtgv2_silk_decode_indices+0x1C4 : 60bc >			  ## decode_indices.c:126:80
    6092:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:132:94
    6094:    01 e1 d8 00       	r1 = r0 + 0xd8			  ## decode_indices.c:132:82
    6098:    40 16             	r0 = r4			  ## decode_indices.c:132:52
    609a:    bf ea db fe       	call -0x24a <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:132:52
    609e:    b6 16             	r6 = r11			  ## decode_indices.c:132:134
    60a0:    d8 ec 64 15       	r1 = [r6++=0x54]			  ## decode_indices.c:132:134
    60a4:    91 a1             	r1 = r1 >> 0x1			  ## decode_indices.c:132:134
    60a6:    10 1b             	r0 *= r1			  ## decode_indices.c:132:132
    60a8:    50 ed ab 01       	h[r10+0x1a] = r0			  ## decode_indices.c:132:38
    60ac:    d0 ec c0 10       	r1 = [r12+0x0]			  ## decode_indices.c:133:89
    60b0:    40 16             	r0 = r4			  ## decode_indices.c:133:52
    60b2:    bf ea cf fe       	call -0x262 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:133:52
    60b6:    50 ed aa 11       	r1 = h[r10+0x1a] (u)			  ## decode_indices.c:133:37
    60ba:    10 18             	r0 += r1			  ## decode_indices.c:133:37
    60bc:    50 ed ab 01       	h[r10+0x1a] = r0
    60c0:    40 d6             	r0 = r4  #			  ## decode_indices.c:138:50
    60c2:    e8 60             		 h[r6+0x0] = r0			  ## decode_indices.c:135:32
    60c4:    d0 ec c4 10       	r1 = [r12+0x4]			  ## decode_indices.c:138:87
    60c8:    bf ea c4 fe       	call -0x278 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:138:50
    60cc:    52 ee 90 00       	b[r9+0x0] = r0			  ## decode_indices.c:138:37
    60d0:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:144:88
    60d2:    09 92             	r1 = r0 + 0x12			  ## decode_indices.c:144:76
    60d4:    40 16             	r0 = r4			  ## decode_indices.c:144:46
    60d6:    bf ea bd fe       	call -0x286 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:144:46
    60da:    52 ee 94 00       	b[r9+0x4] = r0			  ## decode_indices.c:144:33
    60de:    06 e1 74 b0       	r6 = r11 + 0x74			  ## decode_indices.c:146:14
    60e2:    47 20             	r7 = 0x0			  ## decode_indices.c:146:14
    60e4:    05 e1 34 40       	r5 = r4 + 0x34			  ## decode_indices.c:146:14
    60e8:    04 8a             	goto 0x14 <wtgv2_silk_decode_indices+0x206 : 60fe >
    60ea:    54 ee b0 09       	r0 = b[r11+0x90] (s)			  ## decode_indices.c:147:85
    60ee:    d8 ec 5a 10       	r1 = [r5+r0<<2]			  ## decode_indices.c:147:85
    60f2:    40 16             	r0 = r4			  ## decode_indices.c:147:55
    60f4:    bf ea ae fe       	call -0x2a4 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:147:55
    60f8:    d8 ee 61 07       	b[r6+r7] = r0			  ## decode_indices.c:147:42
    60fc:    c7 21             	r7 += 0x1			  ## decode_indices.c:146:43
    60fe:    d0 ec b8 00       	r0 = [r11+0x8]			  ## decode_indices.c:146:32
    6102:    80 ed f2 71       	ifs (r7 < r0) goto -0x1c <wtgv2_silk_decode_indices+0x1F2 : 60ea >			  ## decode_indices.c:146:32
    6106:    40 20             	r0 = 0x0
    6108:    88 f8 06 00       	if (r8 != 0x0) goto 0xc <wtgv2_silk_decode_indices+0x220 : 6118 >
    610c:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:154:98
    610e:    01 e1 d5 00       	r1 = r0 + 0xd5			  ## decode_indices.c:154:86
    6112:    40 16             	r0 = r4			  ## decode_indices.c:154:56
    6114:    bf ea 9e fe       	call -0x2c4 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:154:56
    6118:    52 ee 95 00       	b[r9+0x5] = r0
    611c:    50 ee 91 00       	r0 = b[r9+0x1] (u)
    6120:    08 17             	r0 = r0.b0 (s)			  ## decode_indices.c:159:32
    6122:    d0 ec c1 01       	[r12+0x10] = r0			  ## decode_indices.c:159:30
    6126:    40 d6             	r0 = r4  #			  ## decode_indices.c:164:38
    6128:    41 6c             		 r1 = [r4+0x30] 			  ## decode_indices.c:164:80
    612a:    bf ea 93 fe       	call -0x2da <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:164:38
    612e:    52 ee 96 00       	b[r9+0x6] = r0			  ## decode_indices.c:164:25
    6132:    02 8c             	sp += 0x30			  ## decode_indices.c:164:25
    6134:    5c 04             	{pc, r12-r4} = [sp++]			  ## decode_indices.c:165:1
    6136:    40 6c             	r0 = [r4+0x30] 			  ## decode_indices.c:55:56
    6138:    09 9a             	r1 = r0 + 0x1a			  ## decode_indices.c:55:44
    613a:    40 16             	r0 = r4			  ## decode_indices.c:55:14
    613c:    bf ea 8a fe       	call -0x2ec <wtgv2ec_dec_icdf : 5e54 >			  ## decode_indices.c:55:14
    6140:    77 8e             	goto -0x224 <wtgv2_silk_decode_indices+0x26 : 5f1e >


decode_split:
    6142:    76 04             	[--sp] = {rets, r6-r4}			  ## shell_coder.c:57:0
    6144:    35 16             	r5 = r3			  ## shell_coder.c:57:0
    6146:    14 16             	r4 = r1			  ## shell_coder.c:57:0
    6148:    06 16             	r6 = r0			  ## shell_coder.c:57:0
    614a:    85 fd 0d 02       	ifs (r5 < 0x1) goto 0x1a <decode_split+0x26 : 6168 >			  ## shell_coder.c:58:9
    614e:    00 24             	r0 = [sp+16]
    6150:    c1 ff c4 eb 01 00 	r1 = 0x1ebc4 <silk_shell_code_table_offsets : 1ebc4 >			  ## shell_coder.c:59:69
    6156:    d8 ee 50 11       	r1 = b[r5+r1] (u)			  ## shell_coder.c:59:56
    615a:    01 18             	r1 += r0			  ## shell_coder.c:59:56
    615c:    20 16             	r0 = r2			  ## shell_coder.c:59:25
    615e:    bf ea 79 fe       	call -0x30e <wtgv2ec_dec_icdf : 5e54 >			  ## shell_coder.c:59:25
    6162:    50 de             	r0 = r5 - r0  #			  ## shell_coder.c:60:27
    6164:    e8 60             		 h[r6+0x0] = r0			  ## shell_coder.c:59:23
    6166:    04 82             	goto 0x4 <decode_split+0x2A : 616c >			  ## shell_coder.c:59:23
    6168:    40 20             	r0 = 0x0
    616a:    e8 60             	h[r6+0x0] = r0			  ## shell_coder.c:62:23
    616c:    c8 60             	h[r4+0x0] = r0
    616e:    56 04             	{pc, r6-r4} = [sp++]			  ## shell_coder.c:65:1


wtgv2_silk_decode_pulses:
    6170:    7f 04             	[--sp] = {rets, r15-r4}			  ## decode_pulses.c:46:0
    6172:    c2 85             	sp += -0xec			  ## decode_pulses.c:46:0
    6174:    d4 e9 20 41       	r4 = [sp+288]			  ## decode_pulses.c:46:0
    6178:    19 d6             	r9 = r1  #			  ## decode_pulses.c:46:0
    617a:    83 22             		 [sp+8] = r3			  ## decode_pulses.c:46:0
    617c:    05 16             	r5 = r0			  ## decode_pulses.c:46:0
    617e:    71 e1 0f 40       	r1 = r4 & 0xFFFFFFF0			  ## decode_pulses.c:60:14
    6182:    c0 14             	r8 = 0			  ## decode_pulses.c:60:14
    6184:    40 21             	r0 = 0x1			  ## decode_pulses.c:60:14
    6186:    11 ed 00 04       	ifs (r1 >= r4) {			  ## decode_pulses.c:60:14
    618a:    40 20             		r0 = 0x0
                               	}			  ## decode_pulses.c:60:41
    618c:    84 23             	[sp+12] = r4			  ## decode_pulses.c:60:41
    618e:    c9 a4             	r1 = r4 >>> 0x4			  ## decode_pulses.c:59:12
    6190:    b4 f0 00 c1       	r12 = r0 + r1  #			  ## decode_pulses.c:60:9
    6194:    53 6c             		 r3 = [r5+0x30] 			  ## decode_pulses.c:55:64
    6196:    a8 a1             	r0 = r2 >>> 0x1			  ## decode_pulses.c:55:111
    6198:    e0 f1 09 00       	r0 = r0 * 0x9  #			  ## decode_pulses.c:55:52
    619c:    82 21             		 [sp+4] = r2			  ## decode_pulses.c:55:52
    619e:    30 18             	r0 += r3			  ## decode_pulses.c:55:52
    61a0:    01 e1 f8 00       	r1 = r0 + 0xf8			  ## decode_pulses.c:55:52
    61a4:    50 16             	r0 = r5			  ## decode_pulses.c:55:22
    61a6:    bf ea 55 fe       	call -0x356 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_pulses.c:55:22
    61aa:    e0 f1 12 00       	r0 = r0 * 0x12  #			  ## decode_pulses.c:68:15
    61ae:    51 6c             		 r1 = [r5+0x30] 			  ## decode_pulses.c:68:27
    61b0:    10 18             	r0 += r1			  ## decode_pulses.c:68:15
    61b2:    07 e1 60 02       	r7 = r0 + 0x260			  ## decode_pulses.c:68:15
    61b6:    46 20             	r6 = 0x0
    61b8:    04 9b             	goto 0x36 <wtgv2_silk_decode_pulses+0x80 : 61f0 >
    61ba:    a8 8c             	r0 = sp + 44
    61bc:    d8 ec 0b 86       	[r0+r6<<2] = r8			  ## decode_pulses.c:70:23
    61c0:    44 21             	r4 = 0x1			  ## decode_pulses.c:70:23
    61c2:    71 16             	r1 = r7
    61c4:    04 8c             	goto 0x18 <wtgv2_silk_decode_pulses+0x6E : 61de >
    61c6:    a8 8c             	r0 = sp + 44
    61c8:    d8 ec 0b 46       	[r0+r6<<2] = r4			  ## decode_pulses.c:75:26
    61cc:    40 21             	r0 = 0x1			  ## decode_pulses.c:75:26
    61ce:    b4 e8 0a 00       	if (r4 != 0xa) {			  ## decode_pulses.c:75:26
    61d2:    40 20             		r0 = 0x0
                               	}			  ## decode_pulses.c:78:107
    61d4:    51 6c             	r1 = [r5+0x30] 			  ## decode_pulses.c:78:29
    61d6:    10 18             	r0 += r1			  ## decode_pulses.c:78:89
    61d8:    01 e1 02 03       	r1 = r0 + 0x302			  ## decode_pulses.c:78:89
    61dc:    c4 21             	r4 += 0x1			  ## decode_pulses.c:74:9
    61de:    50 16             	r0 = r5			  ## decode_pulses.c:77:31
    61e0:    bf ea 38 fe       	call -0x390 <wtgv2ec_dec_icdf : 5e54 >			  ## decode_pulses.c:77:31
    61e4:    e9 9c             	r1 = sp + 124			  ## decode_pulses.c:77:31
    61e6:    d8 ec 1b 06       	[r1+r6<<2] = r0			  ## decode_pulses.c:77:31
    61ea:    00 f8 ec 23       	if (r0 == 0x11) goto -0x28 <wtgv2_silk_decode_pulses+0x56 : 61c6 >			  ## decode_pulses.c:77:31
    61ee:    c6 21             	r6 += 0x1			  ## decode_pulses.c:69:28
    61f0:    8c ed e3 61       	ifs (r6 < r12) goto -0x3a <wtgv2_silk_decode_pulses+0x4A : 61ba >			  ## decode_pulses.c:69:5
    61f4:    f8 e8 ce d0       	r13 = sp + 206
    61f8:    00 e1 0e d0       	r0 = r13 + 0xe
    61fc:    00 f1 0c d0       	r0 = r13 + 0xc  #
    6200:    80 2a             		 [sp+40] = r0
    6202:    00 f1 0a d0       	r0 = r13 + 0xa  #
    6206:    80 29             		 [sp+36] = r0
    6208:    00 f1 08 d0       	r0 = r13 + 0x8  #
    620c:    80 28             		 [sp+32] = r0
    620e:    f8 e8 de e0       	r14 = sp + 222
    6212:    00 f1 06 e0       	r0 = r14 + 0x6  #
    6216:    80 27             		 [sp+28] = r0
    6218:    00 f1 04 e0       	r0 = r14 + 0x4  #
    621c:    80 26             		 [sp+24] = r0
    621e:    00 f1 06 d0       	r0 = r13 + 0x6  #
    6222:    80 25             		 [sp+20] = r0
    6224:    07 f1 04 d0       	r7 = r13 + 0x4  #
    6228:    80 24             		 [sp+16] = r0
    622a:    08 e1 02 d0       	r8 = r13 + 0x2
    622e:    04 e1 02 e0       	r4 = r14 + 0x2
    6232:    f8 e8 e6 00       	r0 = sp + 230
    6236:    0a e1 02 00       	r10 = r0 + 0x2
    623a:    c7 14             	r15 = 0
    623c:    46 20             	r6 = 0x0
    623e:    64 86             	goto 0x18c <wtgv2_silk_decode_pulses+0x25C : 63cc >
    6240:    e8 9c             	r0 = sp + 124
    6242:    d8 ec 0a 36       	r3 = [r0+r6<<2]			  ## decode_pulses.c:86:13
    6246:    c0 e1 fb 0c       	r0 = r15 >>> 0xb
    624a:    b4 e0 90 b0       	r11 = r9 + r0
    624e:    83 fd b6 02       	ifs (r3 < 0x1) goto 0x16c <wtgv2_silk_decode_pulses+0x24E : 63be >			  ## decode_pulses.c:86:13
    6252:    52 d6             	r2 = r5  #			  ## shell_coder.c:82:5
    6254:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:82:84
    6256:    01 e1 de 04       	r1 = r0 + 0x4de			  ## shell_coder.c:82:72
    625a:    f8 e8 e6 00       	r0 = sp + 230			  ## shell_coder.c:82:72
    625e:    a1 d6             	r1 = r10  #			  ## shell_coder.c:82:5
    6260:    81 20             		 [sp] = r1			  ## shell_coder.c:82:5
    6262:    bf ea 6e ff       	call -0x124 <decode_split : 6142 >			  ## shell_coder.c:82:5
    6266:    52 d6             	r2 = r5  #			  ## shell_coder.c:84:5
    6268:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:84:89
    626a:    d9 e9 e6 30       	r3 = h[sp+230] (s)			  ## shell_coder.c:84:63
    626e:    01 e1 46 04       	r1 = r0 + 0x446			  ## shell_coder.c:84:77
    6272:    f8 e8 de 00       	r0 = sp + 222			  ## shell_coder.c:84:77
    6276:    41 d6             	r1 = r4  #			  ## shell_coder.c:84:5
    6278:    81 20             		 [sp] = r1			  ## shell_coder.c:84:5
    627a:    bf ea 62 ff       	call -0x13c <decode_split : 6142 >			  ## shell_coder.c:84:5
    627e:    52 d6             	r2 = r5  #			  ## shell_coder.c:86:5
    6280:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:86:89
    6282:    d9 e9 de 30       	r3 = h[sp+222] (s)			  ## shell_coder.c:86:63
    6286:    01 e1 ae 03       	r1 = r0 + 0x3ae			  ## shell_coder.c:86:77
    628a:    f8 e8 ce 00       	r0 = sp + 206			  ## shell_coder.c:86:77
    628e:    81 d6             	r1 = r8  #			  ## shell_coder.c:86:5
    6290:    81 20             		 [sp] = r1			  ## shell_coder.c:86:5
    6292:    bf ea 56 ff       	call -0x154 <decode_split : 6142 >			  ## shell_coder.c:86:5
    6296:    52 d6             	r2 = r5  #			  ## shell_coder.c:87:5
    6298:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:87:89
    629a:    d9 e9 ce 30       	r3 = h[sp+206] (s)			  ## shell_coder.c:87:63
    629e:    00 e1 16 03       	r0 = r0 + 0x316			  ## shell_coder.c:87:77
    62a2:    01 f1 02 b0       	r1 = r11 + 0x2  #			  ## shell_coder.c:87:36
    62a6:    80 20             		 [sp] = r0			  ## shell_coder.c:87:5
    62a8:    b0 16             	r0 = r11			  ## shell_coder.c:87:5
    62aa:    bf ea 4a ff       	call -0x16c <decode_split : 6142 >			  ## shell_coder.c:87:5
    62ae:    54 ed d2 30       	r3 = h[r13+0x2] (s)			  ## shell_coder.c:88:63
    62b2:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:88:89
    62b4:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:88:77
    62b8:    00 f1 04 b0       	r0 = r11 + 0x4  #			  ## shell_coder.c:88:20
    62bc:    82 20             		 [sp] = r2			  ## shell_coder.c:88:5
    62be:    01 e1 06 b0       	r1 = r11 + 0x6			  ## shell_coder.c:88:36
    62c2:    52 16             	r2 = r5			  ## shell_coder.c:88:5
    62c4:    bf ea 3d ff       	call -0x186 <decode_split : 6142 >			  ## shell_coder.c:88:5
    62c8:    54 ed e2 30       	r3 = h[r14+0x2] (s)			  ## shell_coder.c:90:63
    62cc:    52 d6             	r2 = r5  #			  ## shell_coder.c:90:5
    62ce:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:90:89
    62d0:    00 e1 ae 03       	r0 = r0 + 0x3ae			  ## shell_coder.c:90:77
    62d4:    70 d6             	r0 = r7  #			  ## shell_coder.c:90:5
    62d6:    80 20             		 [sp] = r0			  ## shell_coder.c:90:5
    62d8:    01 24             	r1 = [sp+16]			  ## shell_coder.c:90:5
    62da:    bf ea 32 ff       	call -0x19c <decode_split : 6142 >			  ## shell_coder.c:90:5
    62de:    54 ed d4 30       	r3 = h[r13+0x4] (s)			  ## shell_coder.c:91:63
    62e2:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:91:89
    62e4:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:91:77
    62e8:    00 f1 08 b0       	r0 = r11 + 0x8  #			  ## shell_coder.c:91:20
    62ec:    82 20             		 [sp] = r2			  ## shell_coder.c:91:5
    62ee:    01 e1 0a b0       	r1 = r11 + 0xa			  ## shell_coder.c:91:36
    62f2:    52 16             	r2 = r5			  ## shell_coder.c:91:5
    62f4:    bf ea 25 ff       	call -0x1b6 <decode_split : 6142 >			  ## shell_coder.c:91:5
    62f8:    54 ed d6 30       	r3 = h[r13+0x6] (s)			  ## shell_coder.c:92:63
    62fc:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:92:89
    62fe:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:92:77
    6302:    00 f1 0c b0       	r0 = r11 + 0xc  #			  ## shell_coder.c:92:20
    6306:    82 20             		 [sp] = r2			  ## shell_coder.c:92:5
    6308:    01 e1 0e b0       	r1 = r11 + 0xe			  ## shell_coder.c:92:36
    630c:    52 16             	r2 = r5			  ## shell_coder.c:92:5
    630e:    bf ea 18 ff       	call -0x1d0 <decode_split : 6142 >			  ## shell_coder.c:92:5
    6312:    54 ed a0 30       	r3 = h[r10+0x0] (s)			  ## shell_coder.c:94:63
    6316:    52 d6             	r2 = r5  #			  ## shell_coder.c:94:5
    6318:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:94:89
    631a:    00 e1 46 04       	r0 = r0 + 0x446			  ## shell_coder.c:94:77
    631e:    80 20             	[sp] = r0			  ## shell_coder.c:94:5
    6320:    d0 e9 14 00       	r1_r0 = d[sp+20]			  ## shell_coder.c:94:5
    6324:    bf ea 0d ff       	call -0x1e6 <decode_split : 6142 >			  ## shell_coder.c:94:5
    6328:    54 ed e4 30       	r3 = h[r14+0x4] (s)			  ## shell_coder.c:96:63
    632c:    52 d6             	r2 = r5  #			  ## shell_coder.c:96:5
    632e:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:96:89
    6330:    00 e1 ae 03       	r0 = r0 + 0x3ae			  ## shell_coder.c:96:77
    6334:    80 20             	[sp] = r0			  ## shell_coder.c:96:5
    6336:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## shell_coder.c:96:5
    633a:    bf ea 02 ff       	call -0x1fc <decode_split : 6142 >			  ## shell_coder.c:96:5
    633e:    54 ed d8 30       	r3 = h[r13+0x8] (s)			  ## shell_coder.c:97:63
    6342:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:97:89
    6344:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:97:77
    6348:    00 f1 10 b0       	r0 = r11 + 0x10  #			  ## shell_coder.c:97:20
    634c:    82 20             		 [sp] = r2			  ## shell_coder.c:97:5
    634e:    01 e1 12 b0       	r1 = r11 + 0x12			  ## shell_coder.c:97:36
    6352:    52 16             	r2 = r5			  ## shell_coder.c:97:5
    6354:    bf ea f5 fe       	call -0x216 <decode_split : 6142 >			  ## shell_coder.c:97:5
    6358:    54 ed da 30       	r3 = h[r13+0xa] (s)			  ## shell_coder.c:98:63
    635c:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:98:89
    635e:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:98:77
    6362:    00 f1 14 b0       	r0 = r11 + 0x14  #			  ## shell_coder.c:98:20
    6366:    82 20             		 [sp] = r2			  ## shell_coder.c:98:5
    6368:    01 e1 16 b0       	r1 = r11 + 0x16			  ## shell_coder.c:98:36
    636c:    52 16             	r2 = r5			  ## shell_coder.c:98:5
    636e:    bf ea e8 fe       	call -0x230 <decode_split : 6142 >			  ## shell_coder.c:98:5
    6372:    54 ed e6 30       	r3 = h[r14+0x6] (s)			  ## shell_coder.c:100:63
    6376:    52 d6             	r2 = r5  #			  ## shell_coder.c:100:5
    6378:    50 6c             		 r0 = [r5+0x30] 			  ## shell_coder.c:100:89
    637a:    00 e1 ae 03       	r0 = r0 + 0x3ae			  ## shell_coder.c:100:77
    637e:    80 20             	[sp] = r0			  ## shell_coder.c:100:5
    6380:    d0 e9 24 00       	r1_r0 = d[sp+36]			  ## shell_coder.c:100:5
    6384:    bf ea dd fe       	call -0x246 <decode_split : 6142 >			  ## shell_coder.c:100:5
    6388:    54 ed dc 30       	r3 = h[r13+0xc] (s)			  ## shell_coder.c:101:63
    638c:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:101:89
    638e:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:101:77
    6392:    00 f1 18 b0       	r0 = r11 + 0x18  #			  ## shell_coder.c:101:20
    6396:    82 20             		 [sp] = r2			  ## shell_coder.c:101:5
    6398:    01 e1 1a b0       	r1 = r11 + 0x1a			  ## shell_coder.c:101:36
    639c:    52 16             	r2 = r5			  ## shell_coder.c:101:5
    639e:    bf ea d0 fe       	call -0x260 <decode_split : 6142 >			  ## shell_coder.c:101:5
    63a2:    54 ed de 30       	r3 = h[r13+0xe] (s)			  ## shell_coder.c:102:63
    63a6:    50 6c             	r0 = [r5+0x30] 			  ## shell_coder.c:102:89
    63a8:    02 e1 16 03       	r2 = r0 + 0x316			  ## shell_coder.c:102:77
    63ac:    00 f1 1c b0       	r0 = r11 + 0x1c  #			  ## shell_coder.c:102:20
    63b0:    82 20             		 [sp] = r2			  ## shell_coder.c:102:5
    63b2:    01 e1 1e b0       	r1 = r11 + 0x1e			  ## shell_coder.c:102:36
    63b6:    52 16             	r2 = r5			  ## shell_coder.c:102:5
    63b8:    bf ea c3 fe       	call -0x27a <decode_split : 6142 >			  ## shell_coder.c:102:5
    63bc:    04 84             	goto 0x8 <wtgv2_silk_decode_pulses+0x256 : 63c6 >			  ## shell_coder.c:102:5
    63be:    40 20             	r0 = 0x0			  ## decode_pulses.c:89:13
    63c0:    10 8f             	rep 0x4 0x10 {			  ## decode_pulses.c:89:13
    63c2:    d0 ed b3 00       		h[r11++=0x2] = r0
                               	}			  ## decode_pulses.c:89:13
    63c6:    ef e0 80 fb       	r15 = r15 + 0x10000			  ## decode_pulses.c:85:5
    63ca:    c6 21             	r6 += 0x1			  ## decode_pulses.c:85:28
    63cc:    8c ed 38 61       	ifs (r6 < r12) goto -0x190 <wtgv2_silk_decode_pulses+0xD0 : 6240 >
    63d0:    c0 14             	r8 = 0
    63d2:    14 89             	goto 0x52 <wtgv2_silk_decode_pulses+0x2B6 : 6426 >
    63d4:    a8 8c             	r0 = sp + 44
    63d6:    d8 ec 0a a8       	r10 = [r0+r8<<2]			  ## decode_pulses.c:97:13
    63da:    8a fd 22 02       	ifs (r10 < 0x1) goto 0x44 <wtgv2_silk_decode_pulses+0x2B2 : 6422 >
    63de:    c0 e1 80 01       	r0 = r8 << 0x10			  ## decode_pulses.c:99:35
    63e2:    88 ab             	r0 = r0 >>> 0xb			  ## decode_pulses.c:99:27
    63e4:    b4 e0 90 b0       	r11 = r9 + r0			  ## decode_pulses.c:99:27
    63e8:    44 20             	r4 = 0x0
    63ea:    04 91             	goto 0x22 <wtgv2_silk_decode_pulses+0x29E : 640e >
    63ec:    d8 ed ba 74       	r7 = h[r11+r4<<1] (s)			  ## decode_pulses.c:101:25
    63f0:    a6 16             	r6 = r10
    63f2:    04 89             	goto 0x12 <wtgv2_silk_decode_pulses+0x296 : 6406 >
    63f4:    50 6c             	r0 = [r5+0x30] 			  ## decode_pulses.c:104:72
    63f6:    01 e1 14 03       	r1 = r0 + 0x314			  ## decode_pulses.c:104:60
    63fa:    50 16             	r0 = r5			  ## decode_pulses.c:104:30
    63fc:    bf ea 2a fd       	call -0x5ac <wtgv2ec_dec_icdf : 5e54 >			  ## decode_pulses.c:104:30
    6400:    71 a1             	r1 = r7 << 0x1			  ## decode_pulses.c:103:29
    6402:    0f 1c             	r7 = r0 + r1			  ## decode_pulses.c:104:27
    6404:    fe 3f             	r6 += -0x1			  ## decode_pulses.c:102:17
    6406:    f6 56             	if (r6 != 0) goto -0x14 <wtgv2_silk_decode_pulses+0x284 : 63f4 >
    6408:    d8 ed b9 74       	h[r11+r4<<1] = r7			  ## decode_pulses.c:106:33
    640c:    c4 21             	r4 += 0x1			  ## decode_pulses.c:100:56
    640e:    84 f8 ed 21       	if (r4 != 0x10) goto -0x26 <wtgv2_silk_decode_pulses+0x27C : 63ec >
    6412:    c0 e1 82 00       	r0 = r8 << 0x2			  ## decode_pulses.c:109:13
    6416:    e9 9c             	r1 = sp + 124			  ## decode_pulses.c:109:13
    6418:    10 18             	r0 += r1			  ## decode_pulses.c:109:13
    641a:    c0 e1 a5 10       	r1 = r10 << 0x5			  ## decode_pulses.c:109:36
    641e:    64 e8 00 01       	[r0+0x0] |= r1			  ## decode_pulses.c:109:29
    6422:    08 e1 01 80       	r8 = r8 + 0x1			  ## decode_pulses.c:96:28
    6426:    8c ed d5 81       	ifs (r8 < r12) goto -0x56 <wtgv2_silk_decode_pulses+0x264 : 63d4 >
    642a:    46 20             	r6 = 0x0
    642c:    de e9 eb 60       	b[sp+235] = r6			  ## code_signs.c:58:15
    6430:    00 21             	r0 = [sp+4]			  ## code_signs.c:60:9
    6432:    00 a1             	r0 = r0 << 0x1			  ## code_signs.c:60:9
    6434:    02 22             	r2 = [sp+8]			  ## code_signs.c:60:9
    6436:    20 d8             	r0 += r2  #			  ## code_signs.c:60:9
    6438:    51 6c             		 r1 = [r5+0x30] 			  ## code_signs.c:61:29
    643a:    88 17             	r0 = r0.l (s)			  ## code_signs.c:60:9
    643c:    e0 e1 07 00       	r0 = r0 * 0x7			  ## code_signs.c:60:9
    6440:    10 18             	r0 += r1			  ## code_signs.c:61:17
    6442:    08 f1 0a 01       	r8 = r0 + 0x10a  #			  ## code_signs.c:61:17
    6446:    00 23             		 r0 = [sp+12]			  ## code_signs.c:62:14
    6448:    c0 28             	r0 += 0x8			  ## code_signs.c:62:14
    644a:    8f a4             	r7 = r0 >>> 0x4			  ## code_signs.c:62:14
    644c:    14 86             	goto 0x4c <wtgv2_silk_decode_pulses+0x32A : 649a >
    644e:    e8 9c             	r0 = sp + 124
    6450:    d8 ec 0a 06       	r0 = [r0+r6<<2]			  ## code_signs.c:64:13
    6454:    80 fd 1e 02       	ifs (r0 < 0x1) goto 0x3c <wtgv2_silk_decode_pulses+0x324 : 6494 >
    6458:    60 e1 1f 00       	r0 = r0 & 0x1F			  ## code_signs.c:66:35
    645c:    30 e9 06 00       	if (r0 >= 0x6) {
    6460:    40 26             		r0 = 0x6
                               	}			  ## code_signs.c:66:35
    6462:    d8 ee 80 00       	r0 = b[r8+r0] (u)			  ## code_signs.c:66:25
    6466:    de e9 ea 00       	b[sp+234] = r0			  ## code_signs.c:66:23
    646a:    44 20             	r4 = 0x0
    646c:    04 91             	goto 0x22 <wtgv2_silk_decode_pulses+0x320 : 6490 >
    646e:    d8 ed 9a 04       	r0 = h[r9+r4<<1] (s)			  ## code_signs.c:68:21
    6472:    80 fd 0c 02       	ifs (r0 < 0x1) goto 0x18 <wtgv2_silk_decode_pulses+0x31E : 648e >			  ## code_signs.c:68:21
    6476:    f8 e8 ea 10       	r1 = sp + 234
    647a:    50 16             	r0 = r5			  ## code_signs.c:77:35
    647c:    bf ea ea fc       	call -0x62c <wtgv2ec_dec_icdf : 5e54 >			  ## code_signs.c:77:35
    6480:    d8 ed 98 14       	r1 = h[r9+r4<<1] (u)			  ## code_signs.c:77:32
    6484:    00 a1             	r0 = r0 << 0x1			  ## code_signs.c:77:35
    6486:    f8 3f             	r0 += -0x1			  ## code_signs.c:77:35
    6488:    10 1b             	r0 *= r1			  ## code_signs.c:77:32
    648a:    d8 ed 99 04       	h[r9+r4<<1] = r0			  ## code_signs.c:77:32
    648e:    c4 21             	r4 += 0x1			  ## code_signs.c:67:56
    6490:    84 f8 ed 21       	if (r4 != 0x10) goto -0x26 <wtgv2_silk_decode_pulses+0x2FE : 646e >
    6494:    c6 21             	r6 += 0x1			  ## code_signs.c:63:30
    6496:    09 e1 20 90       	r9 = r9 + 0x20			  ## code_signs.c:82:15
    649a:    87 ed d8 61       	ifs (r6 < r7) goto -0x50 <wtgv2_silk_decode_pulses+0x2DE : 644e >
    649e:    22 9b             	sp += 0xec
    64a0:    5f 04             	{pc, r15-r4} = [sp++]			  ## decode_pulses.c:117:1


silk_NLSF2A_find_poly:
    64a2:    7f 04             	[--sp] = {rets, r15-r4}			  ## NLSF2A.c:49:0
    64a4:    e2 9e             	sp += -0x8			  ## NLSF2A.c:49:0
    64a6:    40 ea 80 0b       	[r0+0x0] = 0x10000			  ## NLSF2A.c:53:12
    64aa:    81 20             	[sp] = r1			  ## NLSF2A.c:53:12
    64ac:    13 60             	r3 = [r1+0x0] 			  ## NLSF2A.c:54:15
    64ae:    82 21             	[sp+4] = r2			  ## NLSF2A.c:54:15
    64b0:    0a 84             	r2 = r0 + 0x4			  ## NLSF2A.c:54:5
    64b2:    a3 e0 00 30       	r3 = 0x0 - r3			  ## NLSF2A.c:54:14
    64b6:    46 21             	r6 = 0x1
    64b8:    44 20             	r4 = 0x0
    64ba:    21 16             	r1 = r2
    64bc:    14 95             	goto 0x6a <silk_NLSF2A_find_poly+0x86 : 6528 >
    64be:    63 a3             	r3 = r6 << 0x3			  ## NLSF2A.c:56:16
    64c0:    05 20             	r5 = [sp]			  ## NLSF2A.c:56:16
    64c2:    d8 ec 52 83       	r8 = [r5+r3]			  ## NLSF2A.c:56:16
    64c6:    63 a2             	r3 = r6 << 0x2			  ## NLSF2A.c:57:20
    64c8:    dc ec 32 50       	r5 = [++r3=r0]			  ## NLSF2A.c:57:61
    64cc:    f8 f1 50 d8       	r13_r12 = r5 * r8 (s)  #			  ## NLSF2A.c:57:61
    64d0:    33 7f             		 r3 = [r3+-0x4] 			  ## NLSF2A.c:57:20
    64d2:    d0 e1 0f c8       	r13_r12 >>= 0xf			  ## NLSF2A.c:57:61
    64d6:    0e e1 01 c0       	r14 = r12 + 0x1			  ## NLSF2A.c:57:61
    64da:    b8 e0 d0 f4       	r15 = r13 + r4 + c			  ## NLSF2A.c:57:61
    64de:    d0 e1 01 e8       	r15_r14 >>= 0x1			  ## NLSF2A.c:57:61
    64e2:    35 a1             	r5 = r3 << 0x1			  ## NLSF2A.c:57:20
    64e4:    b4 e0 52 5e       	r5 = r5 - r14			  ## NLSF2A.c:57:47
    64e8:    0e e1 01 60       	r14 = r6 + 0x1			  ## NLSF2A.c:57:14
    64ec:    d8 ec 0b 5e       	[r0+r14<<2] = r5			  ## NLSF2A.c:57:18
    64f0:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## NLSF2A.c:57:61
    64f4:    15 16             	r5 = r1			  ## NLSF2A.c:59:46
    64f6:    04 91             	goto 0x22 <silk_NLSF2A_find_poly+0x78 : 651a >			  ## NLSF2A.c:59:46
    64f8:    f8 f1 30 d8       	r13_r12 = r3 * r8 (s)  #			  ## NLSF2A.c:59:46
    64fc:    53 7e             		 r3 = [r5+-0x8] 			  ## NLSF2A.c:59:23
    64fe:    d0 f1 0f c8       	r13_r12 >>= 0xf  #			  ## NLSF2A.c:59:46
    6502:    57 60             		 r7 = [r5+0x0] 			  ## NLSF2A.c:59:20
    6504:    0a e1 01 c0       	r10 = r12 + 0x1			  ## NLSF2A.c:59:46
    6508:    b8 e0 d0 b4       	r11 = r13 + r4 + c			  ## NLSF2A.c:59:46
    650c:    d0 e1 01 a8       	r11_r10 >>= 0x1			  ## NLSF2A.c:59:46
    6510:    37 18             	r7 += r3			  ## NLSF2A.c:59:32
    6512:    b4 e0 72 7a       	r7 = r7 - r10			  ## NLSF2A.c:59:20
    6516:    df 05             	[r5++=-0x4] = r7			  ## NLSF2A.c:59:20
    6518:    fe 3f             	r6 += -0x1			  ## NLSF2A.c:59:46
    651a:    06 fd ed 05       	ifs (r6 >= 0x2) goto -0x26 <silk_NLSF2A_find_poly+0x56 : 64f8 >
    651e:    e6 d6             	r6 = r14  #
    6520:    23 60             		 r3 = [r2+0x0] 			  ## NLSF2A.c:61:16
    6522:    b4 e0 32 38       	r3 = r3 - r8			  ## NLSF2A.c:61:16
    6526:    c1 24             	r1 += 0x4			  ## NLSF2A.c:55:5
    6528:    a3 60             	[r2+0x0] = r3			  ## NLSF2A.c:61:16
    652a:    03 21             	r3 = [sp+4]			  ## NLSF2A.c:55:5
    652c:    83 ed c7 61       	ifs (r6 < r3) goto -0x72 <silk_NLSF2A_find_poly+0x1C : 64be >			  ## NLSF2A.c:55:5
    6530:    02 82             	sp += 0x8
    6532:    5f 04             	{pc, r15-r4} = [sp++]			  ## NLSF2A.c:63:1


wtgv2_silk_bwexpander_32:
    6534:    77 04             	[--sp] = {rets, r7-r4}			  ## bwexpander_32.c:42:0
    6536:    f9 3f             	r1 += -0x1			  ## bwexpander_32.c:42:0
    6538:    f4 e0 80 2b       	r4 = r2 - 0x10000			  ## bwexpander_32.c:44:48
    653c:    45 20             	r5 = 0x0
    653e:    04 8f             	goto 0x1e <wtgv2_silk_bwexpander_32+0x2A : 655e >
    6540:    d8 ec 0a 65       	r6 = [r0+r5<<2]			  ## bwexpander_32.c:47:22
    6544:    f8 e1 60 72       	r7_r6 = r6 * r2 (s)			  ## bwexpander_32.c:47:22
    6548:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## bwexpander_32.c:47:22
    654c:    d8 ec 0b 65       	[r0+r5<<2] = r6			  ## bwexpander_32.c:47:20
    6550:    f0 e1 20 64       	r6 = r2 * r4			  ## bwexpander_32.c:48:22
    6554:    ee af             	r6 = r6 >>> 0xf			  ## bwexpander_32.c:48:22
    6556:    c6 21             	r6 += 0x1			  ## bwexpander_32.c:48:22
    6558:    ee a1             	r6 = r6 >>> 0x1			  ## bwexpander_32.c:48:22
    655a:    62 18             	r2 += r6			  ## bwexpander_32.c:48:19
    655c:    c5 21             	r5 += 0x1			  ## bwexpander_32.c:46:29
    655e:    ab bf             	r3 = r2 >>> 0x1f
    6560:    81 ed ee 51       	ifs (r5 < r1) goto -0x24 <wtgv2_silk_bwexpander_32+0xC : 6540 >
    6564:    d8 ec 0a 41       	r4 = [r0+r1<<2]			  ## bwexpander_32.c:50:19
    6568:    f8 e1 40 32       	r3_r2 = r4 * r2 (s)			  ## bwexpander_32.c:50:19
    656c:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## bwexpander_32.c:50:19
    6570:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## bwexpander_32.c:50:17
    6574:    57 04             	{pc, r7-r4} = [sp++]			  ## bwexpander_32.c:51:1


wtgv2_silk_NLSF2A:
    6576:    7f 04             	[--sp] = {rets, r15-r4}			  ## NLSF2A.c:72:0
    6578:    82 8b             	sp += -0x1d4			  ## NLSF2A.c:72:0
    657a:    24 16             	r4 = r2			  ## NLSF2A.c:72:0
    657c:    05 16             	r5 = r0			  ## NLSF2A.c:72:0
    657e:    b4 e8 10 10       	if (r4 != 0x10) {			  ## NLSF2A.c:72:0
    6582:    c9 ff d8 7f 00 00 		r9 = 0x7fd8
                               	} else { <wtgv2_silk_NLSF2A.ordering10 : 7fd8 >			  ## NLSF2A.c:92:16
    6588:    c9 ff c8 7f 00 00 		r9 = 0x7fc8
                               	} <wtgv2_silk_NLSF2A.ordering16 : 7fc8 >			  ## NLSF2A.c:92:16
    658e:    42 20             	r2 = 0x0
    6590:    c8 ff 8c 84 01 00 	r8 = 0x1848c <wtgv2_LSFCosTab_FIX_Q12 : 1848c >
    6596:    04 99             	goto 0x32 <wtgv2_silk_NLSF2A+0x54 : 65ca >
    6598:    d8 ed 1a 62       	r6 = h[r1+r2<<1] (s)			  ## NLSF2A.c:97:17
    659c:    ef a8             	r7 = r6 >>> 0x8			  ## NLSF2A.c:97:17
    659e:    77 a1             	r7 = r7 << 0x1			  ## NLSF2A.c:106:19
    65a0:    dc ed 72 38       	r3 = h[++r7=r8] (s)			  ## NLSF2A.c:106:19
    65a4:    54 ed 72 70       	r7 = h[r7+0x2] (s)			  ## NLSF2A.c:107:19
    65a8:    70 e1 ff 60       	r0 = r6 & 0xFFFFFF00			  ## NLSF2A.c:100:28
    65ac:    60 1e             	r0 = r6 - r0			  ## NLSF2A.c:100:26
    65ae:    fe 1e             	r6 = r7 - r3			  ## NLSF2A.c:107:56
    65b0:    60 1b             	r0 *= r6			  ## NLSF2A.c:110:35
    65b2:    33 a8             	r3 = r3 << 0x8			  ## NLSF2A.c:110:35
    65b4:    30 18             	r0 += r3			  ## NLSF2A.c:110:35
    65b6:    88 a3             	r0 = r0 >>> 0x3			  ## NLSF2A.c:110:35
    65b8:    d8 ee 90 32       	r3 = b[r9+r2] (u)			  ## NLSF2A.c:110:9
    65bc:    c0 21             	r0 += 0x1			  ## NLSF2A.c:110:35
    65be:    88 a1             	r0 = r0 >>> 0x1			  ## NLSF2A.c:110:35
    65c0:    f8 e8 14 61       	r6 = sp + 276			  ## NLSF2A.c:110:35
    65c4:    d8 ec 6b 03       	[r6+r3<<2] = r0			  ## NLSF2A.c:110:33
    65c8:    c2 21             	r2 += 0x1			  ## NLSF2A.c:93:25
    65ca:    84 ed e5 21       	ifs (r2 < r4) goto -0x36 <wtgv2_silk_NLSF2A+0x22 : 6598 >
    65ce:    c0 e1 41 8c       	r8 = r4 >>> 0x1			  ## NLSF2A.c:113:10
    65d2:    f8 e8 e0 00       	r0 = sp + 224
    65d6:    f8 e8 14 71       	r7 = sp + 276
    65da:    71 16             	r1 = r7			  ## NLSF2A.c:116:5
    65dc:    82 16             	r2 = r8			  ## NLSF2A.c:116:5
    65de:    bf ea 60 ff       	call -0x140 <silk_NLSF2A_find_poly : 64a2 >			  ## NLSF2A.c:116:5
    65e2:    79 84             	r1 = r7 + 0x4			  ## NLSF2A.c:117:32
    65e4:    f8 e8 ac 00       	r0 = sp + 172			  ## NLSF2A.c:117:32
    65e8:    82 16             	r2 = r8			  ## NLSF2A.c:117:5
    65ea:    bf ea 5a ff       	call -0x14c <silk_NLSF2A_find_poly : 64a2 >			  ## NLSF2A.c:117:5
    65ee:    30 e1 ff 4f       	r0 = r4 + -0x1
    65f2:    41 20             	r1 = 0x0
    65f4:    04 98             	goto 0x30 <wtgv2_silk_NLSF2A+0xB0 : 6626 >
    65f6:    12 a2             	r2 = r1 << 0x2			  ## NLSF2A.c:121:16
    65f8:    f8 e8 e0 30       	r3 = sp + 224			  ## NLSF2A.c:121:16
    65fc:    23 18             	r3 += r2			  ## NLSF2A.c:121:16
    65fe:    03 eb 88 00       	{r7, r3} = [r3+]			  ## NLSF2A.c:121:16
    6602:    f8 e8 ac 60       	r6 = sp + 172			  ## NLSF2A.c:121:16
    6606:    dc ec 62 22       	r2 = [++r6=r2]			  ## NLSF2A.c:122:27
    660a:    73 d8             	r3 += r7  #			  ## NLSF2A.c:121:25
    660c:    66 61             		 r6 = [r6+0x4] 			  ## NLSF2A.c:122:16
    660e:    e2 1e             	r2 = r6 - r2			  ## NLSF2A.c:122:25
    6610:    ae 1c             	r6 = r2 + r3			  ## NLSF2A.c:125:34
    6612:    a6 e0 00 60       	r6 = 0x0 - r6			  ## NLSF2A.c:125:34
    6616:    cf 8c             	r7 = sp + 76			  ## NLSF2A.c:125:34
    6618:    d8 ec 7b 61       	[r7+r1<<2] = r6			  ## NLSF2A.c:125:26
    661c:    aa 1e             	r2 = r2 - r3			  ## NLSF2A.c:126:34
    661e:    d8 ec 7b 20       	[r7+r0<<2] = r2			  ## NLSF2A.c:126:26
    6622:    f8 3f             	r0 += -0x1			  ## NLSF2A.c:120:5
    6624:    c1 21             	r1 += 0x1			  ## NLSF2A.c:121:20
    6626:    88 ed e6 11       	ifs (r1 < r8) goto -0x34 <wtgv2_silk_NLSF2A+0x80 : 65f6 >
    662a:    86 14             	r7_r6 = 0
    662c:    c8 ff fe 7f 02 00 	r8 = 0x27ffe <text_size+0x7FFE : 27ffe >
    6632:    c9 ff 00 40 00 e0 	r9 = 0xe0004000 <RAM_LIMIT_H+0xDFE64000 : e0004000 >
    6638:    ca ff be ff 00 00 	r10 = 0xffbe <.GJTIE291_0_0_+0x6F4 : ffbe >
    663e:    14 87             	goto 0x4e <wtgv2_silk_NLSF2A+0x118 : 668e >
    6640:    80 14             	r1_r0 = 0
    6642:    04 8d             	goto 0x1a <wtgv2_silk_NLSF2A+0xE8 : 665e >
    6644:    ca 8c             	r2 = sp + 76
    6646:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## LPC_fit.c:51:22
    664a:    30 e4 00 22       	r2 = abs(r2)			  ## LPC_fit.c:51:22
    664e:    03 16             	r3 = r0			  ## LPC_fit.c:52:17
    6650:    92 ee 00 41       	ifs (r2 <= r1) {			  ## LPC_fit.c:52:17
    6654:    63 16             		r3 = r6			  ## LPC_fit.c:52:17
    6656:    12 16             		r2 = r1
                               	}			  ## LPC_fit.c:52:17
    6658:    c0 21             	r0 += 0x1			  ## LPC_fit.c:50:29
    665a:    36 16             	r6 = r3
    665c:    21 16             	r1 = r2
    665e:    84 ed f1 01       	ifs (r0 < r4) goto -0x1e <wtgv2_silk_NLSF2A+0xCE : 6644 >
    6662:    98 a4             	r0 = r1 >>> 0x4			  ## LPC_fit.c:57:18
    6664:    c0 21             	r0 += 0x1			  ## LPC_fit.c:57:18
    6666:    88 a1             	r0 = r0 >>> 0x1			  ## LPC_fit.c:57:18
    6668:    2b ff 00 0c 12 00 	ifs (r0 < 0x8000) goto 0x24 <wtgv2_silk_NLSF2A+0x11C : 6692 >
    666e:    35 e4 01 08       	r0 = smin(r0, r8)			  ## LPC_fit.c:61:22
    6672:    01 ae             	r1 = r0 << 0xe			  ## LPC_fit.c:62:55
    6674:    91 18             	r1 += r9			  ## LPC_fit.c:62:55
    6676:    6a 81             	r2 = r6 + 0x1			  ## LPC_fit.c:62:55
    6678:    20 1b             	r0 *= r2			  ## LPC_fit.c:62:55
    667a:    88 a2             	r0 = r0 >>> 0x2			  ## LPC_fit.c:62:55
    667c:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## LPC_fit.c:62:55
    6680:    b4 e0 a2 20       	r2 = r10 - r0			  ## LPC_fit.c:62:53
    6684:    c8 8c             	r0 = sp + 76
    6686:    41 16             	r1 = r4			  ## LPC_fit.c:64:13
    6688:    bf ea 54 ff       	call -0x158 <wtgv2_silk_bwexpander_32 : 6534 >			  ## LPC_fit.c:64:13
    668c:    c7 21             	r7 += 0x1			  ## LPC_fit.c:47:26
    668e:    87 fe d7 13       	ifs (r7 <= 0x9) goto -0x52 <wtgv2_silk_NLSF2A+0xCA : 6640 >
    6692:    40 20             	r0 = 0x0
    6694:    87 f8 0c 14       	if (r7 != 0xa) goto 0x18 <wtgv2_silk_NLSF2A+0x13A : 66b0 >
    6698:    41 e0 00 80       	r1 = -0x8000 <RAM_LIMIT_H+0xFFFFFFFFFFE58000 : ffffffffffff8000 >
    669c:    04 9f             	goto 0x3e <wtgv2_silk_NLSF2A+0x166 : 66dc >
    669e:    c9 8c             	r1 = sp + 76
    66a0:    d8 ec 1a 10       	r1 = [r1+r0<<2]
    66a4:    91 a4             	r1 = r1 >> 0x4			  ## LPC_fit.c:78:39
    66a6:    c1 21             	r1 += 0x1			  ## LPC_fit.c:78:39
    66a8:    91 a1             	r1 = r1 >> 0x1			  ## LPC_fit.c:78:39
    66aa:    d8 ed 59 10       	h[r5+r0<<1] = r1			  ## LPC_fit.c:78:25
    66ae:    c0 21             	r0 += 0x1			  ## LPC_fit.c:77:29
    66b0:    84 ed f5 01       	ifs (r0 < r4) goto -0x16 <wtgv2_silk_NLSF2A+0x128 : 669e >
    66b4:    04 95             	goto 0x2a <wtgv2_silk_NLSF2A+0x16A : 66e0 >
    66b6:    ca 8c             	r2 = sp + 76
    66b8:    d8 ec 2a 30       	r3 = [r2+r0<<2]
    66bc:    bb a4             	r3 = r3 >>> 0x4			  ## LPC_fit.c:73:39
    66be:    c3 21             	r3 += 0x1			  ## LPC_fit.c:73:39
    66c0:    be a1             	r6 = r3 >>> 0x1			  ## LPC_fit.c:73:39
    66c2:    43 e0 ff 7f       	r3 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## LPC_fit.c:73:39
    66c6:    a6 ed 00 0c       	ifs (r6 < 0x8000) {			  ## LPC_fit.c:73:39
    66ca:    34 e4 61 31       		r3 = smax(r6, r1)
                               	}			  ## LPC_fit.c:73:39
    66ce:    d8 ed 59 30       	h[r5+r0<<1] = r3			  ## LPC_fit.c:73:25
    66d2:    33 b0             	r3 = r3 << 0x10			  ## LPC_fit.c:74:26
    66d4:    bb ab             	r3 = r3 >>> 0xb			  ## LPC_fit.c:74:26
    66d6:    d8 ec 2b 30       	[r2+r0<<2] = r3			  ## LPC_fit.c:74:24
    66da:    c0 21             	r0 += 0x1			  ## LPC_fit.c:72:29
    66dc:    84 ed eb 01       	ifs (r0 < r4) goto -0x2a <wtgv2_silk_NLSF2A+0x140 : 66b6 >
    66e0:    f8 e8 74 01       	r0 = sp + 372
    66e4:    f8 38             	r0 += -0x8			  ## NLSF2A.c:82:19
    66e6:    c5 d4             	r13 = 0  #			  ## NLSF2A.c:82:19
    66e8:    80 21             		 [sp+4] = r0			  ## NLSF2A.c:82:19
    66ea:    40 20             	r0 = 0x0			  ## NLSF2A.c:82:19
    66ec:    80 25             	[sp+20] = r0			  ## NLSF2A.c:82:19
    66ee:    d0 e9 0d 40       	d[sp+12] = r5_r4			  ## NLSF2A.c:82:19
    66f2:    04 9c             	goto 0x38 <wtgv2_silk_NLSF2A+0x1B6 : 672c >			  ## NLSF2A.c:82:19
    66f4:    01 ff 00 30 e2 01 	if (r3 != 0x0) goto 0x3c4 <wtgv2_silk_NLSF2A+0x548 : 6abe >
    66fa:    40 22             	r0 = 0x2			  ## NLSF2A.c:135:55
    66fc:    60 da             	r0 <<= r6  #			  ## NLSF2A.c:135:55
    66fe:    04 23             		 r4 = [sp+12]			  ## NLSF2A.c:135:55
    6700:    a2 e0 80 0b       	r2 = 0x10000 - r0			  ## NLSF2A.c:135:53
    6704:    c8 8c             	r0 = sp + 76			  ## NLSF2A.c:135:53
    6706:    41 16             	r1 = r4			  ## NLSF2A.c:135:9
    6708:    bf ea 14 ff       	call -0x1d8 <wtgv2_silk_bwexpander_32 : 6534 >			  ## NLSF2A.c:135:9
    670c:    40 20             	r0 = 0x0
    670e:    05 24             	r5 = [sp+16]
    6710:    04 89             	goto 0x12 <wtgv2_silk_NLSF2A+0x1AE : 6724 >
    6712:    c9 8c             	r1 = sp + 76
    6714:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## NLSF2A.c:137:38
    6718:    91 a4             	r1 = r1 >> 0x4			  ## NLSF2A.c:137:38
    671a:    c1 21             	r1 += 0x1			  ## NLSF2A.c:137:38
    671c:    91 a1             	r1 = r1 >> 0x1			  ## NLSF2A.c:137:38
    671e:    d8 ed 59 10       	h[r5+r0<<1] = r1			  ## NLSF2A.c:137:24
    6722:    c0 21             	r0 += 0x1			  ## NLSF2A.c:136:29
    6724:    84 ed f5 01       	ifs (r0 < r4) goto -0x16 <wtgv2_silk_NLSF2A+0x19C : 6712 >
    6728:    c6 21             	r6 += 0x1			  ## NLSF2A.c:132:105
    672a:    86 25             	[sp+20] = r6
    672c:    d1 16             	r1 = r13
    672e:    d0 16             	r0 = r13
    6730:    04 89             	goto 0x12 <wtgv2_silk_NLSF2A+0x1CE : 6744 >
    6732:    d8 ed 5a 21       	r2 = h[r5+r1<<1] (s)			  ## LPC_inv_pred_gain.c:133:20
    6736:    23 ac             	r3 = r2 << 0xc			  ## LPC_inv_pred_gain.c:134:24
    6738:    f8 e8 74 61       	r6 = sp + 372			  ## LPC_inv_pred_gain.c:134:24
    673c:    d8 ec 6b 31       	[r6+r1<<2] = r3			  ## LPC_inv_pred_gain.c:134:22
    6740:    20 18             	r0 += r2			  ## LPC_inv_pred_gain.c:133:17
    6742:    c1 21             	r1 += 0x1			  ## LPC_inv_pred_gain.c:132:29
    6744:    84 ed f5 11       	ifs (r1 < r4) goto -0x16 <wtgv2_silk_NLSF2A+0x1BC : 6732 >
    6748:    41 e0 ff 0f       	r1 = 0xfff <usb_code_size+0x53A : ffe >
    674c:    81 ee 02 00       	ifs (r0 <= r1) goto 0x4 <wtgv2_silk_NLSF2A+0x1DE : 6754 >
    6750:    43 20             	r3 = 0x0
    6752:    d4 91             	goto 0x362 <wtgv2_silk_NLSF2A+0x540 : 6ab6 >
    6754:    60 e0 80 04       	r0 = 0x40000000
    6758:    41 20             	r1 = 0x0
    675a:    d0 e9 19 00       	d[sp+24] = r1_r0
    675e:    a4 92             	goto 0x2a4 <wtgv2_silk_NLSF2A+0x48E : 6a04 >
    6760:    30 e4 00 02       	r0 = abs(r2)			  ## LPC_inv_pred_gain.c:75:35
    6764:    b0 e8 00 10       	if (r0 != 0x0) {
    6768:    80 e1 00 00       		r0 = clz(r0)
                               	} else {			  ## macros.h:122:24
    676c:    48 20             		r0 = 0x20
                               	}
    676e:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## Inlines.h:155:44
    6772:    c8 e1 20 11       	r1 = r2 << r1			  ## Inlines.h:156:15
    6776:    9a b0             	r2 = r1 >>> 0x10			  ## Inlines.h:159:15
    6778:    c3 ff ff ff ff 1f 	r3 = 0x1fffffff <RAM_LIMIT_H+0x1FE5FFFE : 1ffffffe >			  ## Inlines.h:159:15
    677e:    f4 e1 31 22       	r2 = r3 / r2 (s)			  ## Inlines.h:159:15
    6782:    d0 e9 38 60       	r7_r6 = d[sp+56]			  ## LPC_inv_pred_gain.c:61:24
    6786:    ef bf             	r7 = r6 >>> 0x1f			  ## LPC_inv_pred_gain.c:61:24
    6788:    d0 e9 39 60       	d[sp+56] = r7_r6			  ## Inlines.h:165:15
    678c:    d3 16             	r3 = r13			  ## Inlines.h:165:15
    678e:    26 15             	r7_r6 = r3_r2			  ## Inlines.h:165:15
    6790:    d0 e1 00 63       	r7_r6 <<= 0x30			  ## Inlines.h:165:15
    6794:    d0 e1 00 6f       	r7_r6 >>>= 0x30			  ## Inlines.h:165:15
    6798:    f8 e1 60 71       	r7_r6 = r6 * r1 (s)			  ## Inlines.h:165:15
    679c:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:165:15
    67a0:    a1 e0 00 65       	r1 = 0x20000000 - r6			  ## Inlines.h:165:15
    67a4:    11 a3             	r1 = r1 << 0x3			  ## Inlines.h:165:15
    67a6:    f8 e1 10 72       	r7_r6 = r1 * r2 (s)			  ## Inlines.h:168:14
    67aa:    c0 e1 20 81       	r8 = r2 << 0x10			  ## Inlines.h:162:14
    67ae:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:168:14
    67b2:    d9 16             	r9 = r13			  ## Inlines.h:168:14
    67b4:    b4 e0 60 28       	r2 = r6 + r8			  ## Inlines.h:168:14
    67b8:    b8 e0 70 39       	r3 = r7 + r9 + c			  ## Inlines.h:168:14
    67bc:    a5 e0 20 00       	r5 = 0x20 - r0			  ## LPC_inv_pred_gain.c:75:21
    67c0:    89 fe 02 00       	ifs (r9 <= 0x0) goto 0x4 <wtgv2_silk_NLSF2A+0x252 : 67c8 >
    67c4:    2e 16             	r14 = r2
    67c6:    04 91             	goto 0x22 <wtgv2_silk_NLSF2A+0x274 : 67ea >
    67c8:    60 e0 00 04       	r0 = 0x80000000
    67cc:    41 21             	r1 = 0x1			  ## Inlines.h:173:16
    67ce:    81 46             	if (r1 != 0) goto 0xc <wtgv2_silk_NLSF2A+0x266 : 67dc >			  ## Inlines.h:173:16
    67d0:    0e 16             	r14 = r0			  ## Inlines.h:173:16
    67d2:    00 ee 0a 20       	ifs (r2 > r0) goto 0x14 <wtgv2_silk_NLSF2A+0x274 : 67ea >			  ## Inlines.h:173:16
    67d6:    e0 e0 ff 03       	r0 = r0 + 0xFFFFFFFF			  ## Inlines.h:173:16
    67da:    04 85             	goto 0xa <wtgv2_silk_NLSF2A+0x270 : 67e6 >			  ## Inlines.h:173:16
    67dc:    e1 e0 ff 03       	r1 = r0 + 0xFFFFFFFF
    67e0:    1e 16             	r14 = r1			  ## Inlines.h:173:16
    67e2:    01 ee 02 20       	ifs (r2 > r1) goto 0x4 <wtgv2_silk_NLSF2A+0x274 : 67ea >			  ## Inlines.h:173:16
    67e6:    34 e4 21 e0       	r14 = smax(r2, r0)
    67ea:    30 e1 ff 5f       	r0 = r5 + -0x1
    67ee:    41 20             	r1 = 0x0
    67f0:    c0 e1 ef fd       	r15 = r14 >>> 0x1f
    67f4:    ca a1             	r2 = r4 >>> 0x1
    67f6:    82 2c             	[sp+48] = r2
    67f8:    02 21             	r2 = [sp+4]
    67fa:    d0 e9 29 00       	d[sp+40] = r1_r0
    67fe:    40 20             	r0 = 0x0
    6800:    85 29             	[sp+36] = r5
    6802:    d0 e9 41 e0       	d[sp+64] = r15_r14
    6806:    84 28             	[sp+32] = r4
    6808:    04 85             	goto 0xa <wtgv2_silk_NLSF2A+0x29E : 6814 >
    680a:    02 2d             	r2 = [sp+52]
    680c:    d8 ec 2b 84       	[r2+r4<<2] = r8			  ## LPC_inv_pred_gain.c:94:31
    6810:    fa 3c             	r2 += -0x4			  ## LPC_inv_pred_gain.c:79:9
    6812:    c0 21             	r0 += 0x1			  ## LPC_inv_pred_gain.c:79:40
    6814:    01 2c             	r1 = [sp+48]			  ## LPC_inv_pred_gain.c:79:9
    6816:    01 ed ef 00       	ifs (r0 >= r1) goto 0x1de <wtgv2_silk_NLSF2A+0x482 : 69f8 >			  ## LPC_inv_pred_gain.c:79:9
    681a:    82 2d             	[sp+52] = r2
    681c:    d8 ec 2a 14       	r1 = [r2+r4<<2]			  ## LPC_inv_pred_gain.c:82:20
    6820:    d0 e9 38 20       	r3_r2 = d[sp+56]
    6824:    f8 e1 10 72       	r7_r6 = r1 * r2 (s)
    6828:    d0 e1 0e 69       	r7_r6 >>= 0x1e
    682c:    f8 e8 74 21       	r2 = sp + 372
    6830:    d8 ec 2a a0       	r10 = [r2+r0<<2]			  ## LPC_inv_pred_gain.c:81:20
    6834:    0e e1 01 60       	r14 = r6 + 0x1
    6838:    b8 e0 70 fd       	r15 = r7 + r13 + c
    683c:    d0 e1 01 e8       	r15_r14 >>= 0x1
    6840:    b4 e0 a2 8e       	r8 = r10 - r14
    6844:    85 f8 0e 02       	if (r5 != 0x1) goto 0x1c <wtgv2_silk_NLSF2A+0x2EE : 6864 >			  ## LPC_inv_pred_gain.c:83:21
    6848:    88 fd 2c 00       	ifs (r8 < 0x0) goto 0x58 <wtgv2_silk_NLSF2A+0x32E : 68a4 >			  ## LPC_inv_pred_gain.c:83:21
    684c:    5e e1 00 e4       	r14 = r14 ^ 0x80000000			  ## LPC_inv_pred_gain.c:83:21
    6850:    90 e1 e2 2a       	r2 = r14 & r10			  ## LPC_inv_pred_gain.c:83:21
    6854:    60 e0 00 34       	r3 = 0x80000000			  ## LPC_inv_pred_gain.c:83:21
    6858:    e6 e0 00 30       	r6 = r3 + 0x0			  ## LPC_inv_pred_gain.c:83:21
    685c:    60 e0 ff 73       	r7 = 0xFFFFFFFF			  ## LPC_inv_pred_gain.c:83:21
    6860:    ab 16             	r11 = r10			  ## LPC_inv_pred_gain.c:83:21
    6862:    14 89             	goto 0x52 <wtgv2_silk_NLSF2A+0x340 : 68b6 >			  ## LPC_inv_pred_gain.c:83:21
    6864:    38 ed 00 a0       	ifs (r8 >= 0x0) {
    6868:    5e e1 00 e4       		r14 = r14 ^ 0x80000000			  ## LPC_inv_pred_gain.c:83:21
    686c:    60 e0 00 24       		r2 = 0x80000000			  ## LPC_inv_pred_gain.c:83:21
    6870:    a3 16             		r3 = r10
                               	} else {			  ## LPC_inv_pred_gain.c:83:21
    6872:    53 e1 00 a4       		r3 = r10 ^ 0x80000000			  ## LPC_inv_pred_gain.c:83:21
    6876:    c2 ff ff ff ff 7f 		r2 = 0x7fffffff
                               	} <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## LPC_inv_pred_gain.c:83:21
    687c:    90 e1 32 3e       	r3 = r3 & r14			  ## LPC_inv_pred_gain.c:83:21
    6880:    33 ed 00 00       	ifs (r3 >= 0x0) {			  ## LPC_inv_pred_gain.c:83:21
    6884:    82 16             		r2 = r8
                               	}			  ## LPC_inv_pred_gain.c:83:21
    6886:    d0 e9 40 60       	r7_r6 = d[sp+64]			  ## LPC_inv_pred_gain.c:83:21
    688a:    f8 e1 20 36       	r3_r2 = r2 * r6 (s)			  ## LPC_inv_pred_gain.c:83:21
    688e:    d0 e9 28 60       	r7_r6 = d[sp+40]			  ## LPC_inv_pred_gain.c:83:21
    6892:    d8 e1 03 26       	r3_r2 >>>= r6			  ## LPC_inv_pred_gain.c:83:21
    6896:    08 e1 01 20       	r8 = r2 + 0x1			  ## LPC_inv_pred_gain.c:83:21
    689a:    b8 e0 30 9d       	r9 = r3 + r13 + c			  ## LPC_inv_pred_gain.c:83:21
    689e:    d0 e1 01 8c       	r9_r8 >>>= 0x1			  ## LPC_inv_pred_gain.c:83:21
    68a2:    14 85             	goto 0x4a <wtgv2_silk_NLSF2A+0x378 : 68ee >			  ## LPC_inv_pred_gain.c:83:21
    68a4:    5b e1 00 a4       	r11 = r10 ^ 0x80000000			  ## LPC_inv_pred_gain.c:83:21
    68a8:    90 e1 e2 2b       	r2 = r14 & r11			  ## LPC_inv_pred_gain.c:83:21
    68ac:    c6 ff ff ff ff 7f 	r6 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## LPC_inv_pred_gain.c:83:21
    68b2:    47 20             	r7 = 0x0			  ## LPC_inv_pred_gain.c:83:21
    68b4:    63 16             	r3 = r6			  ## LPC_inv_pred_gain.c:83:21
    68b6:    32 ed 00 40       	ifs (r2 >= 0x0) {
    68ba:    d9 16             		r9 = r13			  ## LPC_inv_pred_gain.c:83:21
    68bc:    86 15             		r7_r6 = r9_r8
                               	}			  ## LPC_inv_pred_gain.c:83:21
    68be:    c4 15             	r5_r4 = r13_r12			  ## LPC_inv_pred_gain.c:83:21
    68c0:    d0 e9 40 c0       	r13_r12 = d[sp+64]			  ## LPC_inv_pred_gain.c:83:21
    68c4:    f8 e1 60 7c       	r7_r6 = r6 * r12 (s)			  ## LPC_inv_pred_gain.c:83:21
    68c8:    d0 e1 01 6c       	r7_r6 >>>= 0x1			  ## LPC_inv_pred_gain.c:83:21
    68cc:    90 e1 b2 2e       	r2 = r11 & r14			  ## LPC_inv_pred_gain.c:83:21
    68d0:    32 ed 00 00       	ifs (r2 >= 0x0) {			  ## LPC_inv_pred_gain.c:83:21
    68d4:    83 16             		r3 = r8
                               	}			  ## LPC_inv_pred_gain.c:83:21
    68d6:    f8 e1 30 2c       	r3_r2 = r3 * r12 (u)			  ## LPC_inv_pred_gain.c:83:21
    68da:    4c 15             	r13_r12 = r5_r4			  ## LPC_inv_pred_gain.c:83:21
    68dc:    d3 16             	r3 = r13			  ## LPC_inv_pred_gain.c:83:21
    68de:    6c e1 01 20       	r12 = r2 & 0x1			  ## LPC_inv_pred_gain.c:83:21
    68e2:    b4 e0 c0 86       	r8 = r12 + r6			  ## LPC_inv_pred_gain.c:83:21
    68e6:    b8 e0 d0 97       	r9 = r13 + r7 + c			  ## LPC_inv_pred_gain.c:83:21
    68ea:    d0 e9 20 40       	r5_r4 = d[sp+32]			  ## LPC_inv_pred_gain.c:83:21
    68ee:    43 20             	r3 = 0x0			  ## LPC_inv_pred_gain.c:85:40
    68f0:    e6 e0 00 84       	r6 = r8 + 0x80000000			  ## LPC_inv_pred_gain.c:85:40
    68f4:    b8 e0 90 73       	r7 = r9 + r3 + c			  ## LPC_inv_pred_gain.c:85:40
    68f8:    f2 e0 ff 63       	r2 = r6 - 0xFFFFFFFF			  ## LPC_inv_pred_gain.c:85:40
    68fc:    b8 e0 72 63       	r6 = r7 - r3 - !c			  ## LPC_inv_pred_gain.c:85:40
    6900:    64 e0 00 75       	r7 = psr			  ## LPC_inv_pred_gain.c:85:40
    6904:    62 19             	r2 |= r6			  ## LPC_inv_pred_gain.c:85:40
    6906:    b6 e1 85 70       	r6 = sextra(r7, p:0x1, l:0x1)			  ## LPC_inv_pred_gain.c:85:40
    690a:    26 fb d4 00       	if ((r6 & r2) != 0) goto 0x1a8 <wtgv2_silk_NLSF2A+0x540 : 6ab6 >			  ## LPC_inv_pred_gain.c:85:40
    690e:    f8 e8 74 21       	r2 = sp + 372
    6912:    d8 ec 2b 80       	[r2+r0<<2] = r8			  ## LPC_inv_pred_gain.c:88:23
    6916:    d0 e9 38 20       	r3_r2 = d[sp+56]			  ## LPC_inv_pred_gain.c:88:23
    691a:    f8 e1 a0 32       	r3_r2 = r10 * r2 (s)			  ## LPC_inv_pred_gain.c:88:23
    691e:    d0 e1 0e 29       	r3_r2 >>= 0x1e			  ## LPC_inv_pred_gain.c:88:23
    6922:    0e e1 01 20       	r14 = r2 + 0x1			  ## LPC_inv_pred_gain.c:88:23
    6926:    b8 e0 30 fd       	r15 = r3 + r13 + c			  ## LPC_inv_pred_gain.c:88:23
    692a:    d0 e1 01 e8       	r15_r14 >>= 0x1			  ## LPC_inv_pred_gain.c:88:23
    692e:    b4 e0 12 8e       	r8 = r1 - r14			  ## LPC_inv_pred_gain.c:88:23
    6932:    85 f8 0d 02       	if (r5 != 0x1) goto 0x1a <wtgv2_silk_NLSF2A+0x3DA : 6950 >			  ## LPC_inv_pred_gain.c:89:21
    6936:    88 fd 29 00       	ifs (r8 < 0x0) goto 0x52 <wtgv2_silk_NLSF2A+0x416 : 698c >			  ## LPC_inv_pred_gain.c:89:21
    693a:    5e e1 00 e4       	r14 = r14 ^ 0x80000000			  ## LPC_inv_pred_gain.c:89:21
    693e:    90 e1 e2 21       	r2 = r14 & r1			  ## LPC_inv_pred_gain.c:89:21
    6942:    60 e0 00 34       	r3 = 0x80000000			  ## LPC_inv_pred_gain.c:89:21
    6946:    e6 e0 00 30       	r6 = r3 + 0x0			  ## LPC_inv_pred_gain.c:89:21
    694a:    60 e0 ff 73       	r7 = 0xFFFFFFFF			  ## LPC_inv_pred_gain.c:89:21
    694e:    14 86             	goto 0x4c <wtgv2_silk_NLSF2A+0x426 : 699c >			  ## LPC_inv_pred_gain.c:89:21
    6950:    b8 ed 00 60       	ifs (r8 < 0x0) {
    6954:    39 3f             		r1 ^= 0x80000000			  ## LPC_inv_pred_gain.c:89:21
    6956:    c2 ff ff ff ff 7f 		r2 = 0x7fffffff
                               	} else { <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
    695c:    5e e1 00 e4       		r14 = r14 ^ 0x80000000			  ## LPC_inv_pred_gain.c:89:21
    6960:    60 e0 00 24       		r2 = 0x80000000
                               	}			  ## LPC_inv_pred_gain.c:89:21
    6964:    90 e1 12 1e       	r1 = r1 & r14			  ## LPC_inv_pred_gain.c:89:21
    6968:    31 ed 00 00       	ifs (r1 >= 0x0) {			  ## LPC_inv_pred_gain.c:89:21
    696c:    82 16             		r2 = r8
                               	}			  ## LPC_inv_pred_gain.c:89:21
    696e:    d0 e9 40 e0       	r15_r14 = d[sp+64]			  ## LPC_inv_pred_gain.c:89:21
    6972:    f8 e1 20 3e       	r3_r2 = r2 * r14 (s)			  ## LPC_inv_pred_gain.c:89:21
    6976:    d0 e9 28 60       	r7_r6 = d[sp+40]			  ## LPC_inv_pred_gain.c:89:21
    697a:    d8 e1 03 26       	r3_r2 >>>= r6			  ## LPC_inv_pred_gain.c:89:21
    697e:    08 e1 01 20       	r8 = r2 + 0x1			  ## LPC_inv_pred_gain.c:89:21
    6982:    b8 e0 30 9d       	r9 = r3 + r13 + c			  ## LPC_inv_pred_gain.c:89:21
    6986:    d0 e1 01 8c       	r9_r8 >>>= 0x1			  ## LPC_inv_pred_gain.c:89:21
    698a:    14 85             	goto 0x4a <wtgv2_silk_NLSF2A+0x460 : 69d6 >			  ## LPC_inv_pred_gain.c:89:21
    698c:    39 3f             	r1 ^= 0x80000000			  ## LPC_inv_pred_gain.c:89:21
    698e:    90 e1 e2 21       	r2 = r14 & r1
    6992:    c6 ff ff ff ff 7f 	r6 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
    6998:    47 20             	r7 = 0x0
    699a:    63 16             	r3 = r6
    699c:    32 ed 00 40       	ifs (r2 >= 0x0) {
    69a0:    d9 16             		r9 = r13			  ## LPC_inv_pred_gain.c:89:21
    69a2:    86 15             		r7_r6 = r9_r8
                               	}			  ## LPC_inv_pred_gain.c:89:21
    69a4:    ca 15             	r11_r10 = r13_r12			  ## LPC_inv_pred_gain.c:89:21
    69a6:    d0 e9 40 c0       	r13_r12 = d[sp+64]			  ## LPC_inv_pred_gain.c:89:21
    69aa:    f8 e1 60 7c       	r7_r6 = r6 * r12 (s)			  ## LPC_inv_pred_gain.c:89:21
    69ae:    d0 e1 01 6c       	r7_r6 >>>= 0x1			  ## LPC_inv_pred_gain.c:89:21
    69b2:    90 e1 12 1e       	r1 = r1 & r14			  ## LPC_inv_pred_gain.c:89:21
    69b6:    31 ed 00 00       	ifs (r1 >= 0x0) {			  ## LPC_inv_pred_gain.c:89:21
    69ba:    83 16             		r3 = r8
                               	}			  ## LPC_inv_pred_gain.c:89:21
    69bc:    d0 e9 40 e0       	r15_r14 = d[sp+64]			  ## LPC_inv_pred_gain.c:89:21
    69c0:    f8 e1 30 2e       	r3_r2 = r3 * r14 (u)			  ## LPC_inv_pred_gain.c:89:21
    69c4:    ac 15             	r13_r12 = r11_r10			  ## LPC_inv_pred_gain.c:89:21
    69c6:    d3 16             	r3 = r13			  ## LPC_inv_pred_gain.c:89:21
    69c8:    62 e1 01 20       	r2 = r2 & 0x1			  ## LPC_inv_pred_gain.c:89:21
    69cc:    d3 16             	r3 = r13			  ## LPC_inv_pred_gain.c:89:21
    69ce:    b4 e0 20 86       	r8 = r2 + r6			  ## LPC_inv_pred_gain.c:89:21
    69d2:    b8 e0 30 97       	r9 = r3 + r7 + c			  ## LPC_inv_pred_gain.c:89:21
    69d6:    43 20             	r3 = 0x0			  ## LPC_inv_pred_gain.c:91:40
    69d8:    e6 e0 00 84       	r6 = r8 + 0x80000000			  ## LPC_inv_pred_gain.c:91:40
    69dc:    b8 e0 90 73       	r7 = r9 + r3 + c			  ## LPC_inv_pred_gain.c:91:40
    69e0:    f1 e0 ff 63       	r1 = r6 - 0xFFFFFFFF			  ## LPC_inv_pred_gain.c:91:40
    69e4:    b8 e0 72 23       	r2 = r7 - r3 - !c			  ## LPC_inv_pred_gain.c:91:40
    69e8:    64 e0 00 65       	r6 = psr			  ## LPC_inv_pred_gain.c:91:40
    69ec:    21 19             	r1 |= r2			  ## LPC_inv_pred_gain.c:91:40
    69ee:    b2 e1 85 60       	r2 = sextra(r6, p:0x1, l:0x1)			  ## LPC_inv_pred_gain.c:91:40
    69f2:    12 fa 0a ff       	if ((r2 & r1) == 0) goto -0x1ec <wtgv2_silk_NLSF2A+0x294 : 680a >			  ## LPC_inv_pred_gain.c:91:40
    69f6:    24 9f             	goto 0xbe <wtgv2_silk_NLSF2A+0x540 : 6ab6 >			  ## LPC_inv_pred_gain.c:91:40
    69f8:    d0 e9 18 00       	r1_r0 = d[sp+24]			  ## LPC_inv_pred_gain.c:51:5
    69fc:    89 bf             	r1 = r0 >>> 0x1f			  ## LPC_inv_pred_gain.c:51:5
    69fe:    d0 e9 19 00       	d[sp+24] = r1_r0			  ## LPC_inv_pred_gain.c:51:5
    6a02:    04 22             	r4 = [sp+8]			  ## LPC_inv_pred_gain.c:51:5
    6a04:    32 e1 ff 4f       	r2 = r4 + -0x1
    6a08:    f8 e8 74 01       	r0 = sp + 372
    6a0c:    d8 ec 0a 02       	r0 = [r0+r2<<2]
    6a10:    c1 ff 9e ef ff 00 	r1 = 0xffef9e <RAM_LIMIT_H+0xE5EF9E : ffef9e >
    6a16:    01 d8             	r1 += r0  #
    6a18:    82 22             		 [sp+8] = r2
    6a1a:    82 fd 27 02       	ifs (r2 < 0x1) goto 0x4e <wtgv2_silk_NLSF2A+0x4F6 : 6a6c >			  ## LPC_inv_pred_gain.c:51:5
    6a1e:    c2 ff 3c df ff 01 	r2 = 0x1ffdf3c <RAM_LIMIT_H+0x1E5DF3C : 1ffdf3c >
    6a24:    48 ff 00 12 93 fe 	if (r1 > r2) goto -0x2da <wtgv2_silk_NLSF2A+0x1DA : 6750 >
    6a2a:    00 a7             	r0 = r0 << 0x7			  ## LPC_inv_pred_gain.c:58:19
    6a2c:    a0 e0 00 00       	r0 = 0x0 - r0			  ## LPC_inv_pred_gain.c:58:18
    6a30:    d0 e9 39 00       	d[sp+56] = r1_r0
    6a34:    f8 e1 00 10       	r1_r0 = r0 * r0 (s)			  ## LPC_inv_pred_gain.c:61:24
    6a38:    a2 e0 80 14       	r2 = 0x40000000 - r1			  ## LPC_inv_pred_gain.c:61:24
    6a3c:    d0 e9 18 80       	r9_r8 = d[sp+24]
    6a40:    f0 e1 20 69       	r6 = r2 * r9			  ## LPC_inv_pred_gain.c:67:23
    6a44:    f8 e1 20 08       	r1_r0 = r2 * r8 (u)			  ## LPC_inv_pred_gain.c:67:23
    6a48:    16 18             	r6 += r1			  ## LPC_inv_pred_gain.c:67:23
    6a4a:    ab bf             	r3 = r2 >>> 0x1f			  ## LPC_inv_pred_gain.c:67:23
    6a4c:    f0 e1 30 78       	r7 = r3 * r8			  ## LPC_inv_pred_gain.c:67:23
    6a50:    e9 1d             	r1 = r6 + r7			  ## LPC_inv_pred_gain.c:67:23
    6a52:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## LPC_inv_pred_gain.c:67:23
    6a56:    76 e1 03 00       	r6 = r0 & 0xFFFFFFFC			  ## LPC_inv_pred_gain.c:67:23
    6a5a:    c0 ff 6e a3 01 00 	r0 = 0x1a36e <sine_long_1024+0x16E : 1a36e >
    6a60:    d0 e9 19 60       	d[sp+24] = r7_r6
    6a64:    4a ff 00 60 7b fe 	ifs (r6 >= r0) goto -0x30a <wtgv2_silk_NLSF2A+0x1EA : 6760 >
    6a6a:    37 92             	goto -0x31c <wtgv2_silk_NLSF2A+0x1DA : 6750 >
    6a6c:    43 20             	r3 = 0x0
    6a6e:    c0 ff 3c df ff 01 	r0 = 0x1ffdf3c <RAM_LIMIT_H+0x1E5DF3C : 1ffdf3c >			  ## LPC_inv_pred_gain.c:99:33
    6a74:    00 ec 1f 10       	if (r1 > r0) goto 0x3e <wtgv2_silk_NLSF2A+0x540 : 6ab6 >			  ## LPC_inv_pred_gain.c:99:33
    6a78:    d4 e9 74 01       	r0 = [sp+372]			  ## LPC_inv_pred_gain.c:104:15
    6a7c:    00 a7             	r0 = r0 << 0x7			  ## LPC_inv_pred_gain.c:104:15
    6a7e:    a0 e0 00 00       	r0 = 0x0 - r0			  ## LPC_inv_pred_gain.c:104:14
    6a82:    f8 e1 00 10       	r1_r0 = r0 * r0 (s)			  ## LPC_inv_pred_gain.c:107:20
    6a86:    a2 e0 80 14       	r2 = 0x40000000 - r1			  ## LPC_inv_pred_gain.c:107:20
    6a8a:    d0 e9 18 80       	r9_r8 = d[sp+24]
    6a8e:    f0 e1 20 69       	r6 = r2 * r9			  ## LPC_inv_pred_gain.c:111:19
    6a92:    f8 e1 20 08       	r1_r0 = r2 * r8 (u)			  ## LPC_inv_pred_gain.c:111:19
    6a96:    16 18             	r6 += r1			  ## LPC_inv_pred_gain.c:111:19
    6a98:    ab bf             	r3 = r2 >>> 0x1f			  ## LPC_inv_pred_gain.c:111:19
    6a9a:    f0 e1 30 28       	r2 = r3 * r8			  ## LPC_inv_pred_gain.c:111:19
    6a9e:    e1 1c             	r1 = r6 + r2			  ## LPC_inv_pred_gain.c:111:19
    6aa0:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## LPC_inv_pred_gain.c:111:19
    6aa4:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## LPC_inv_pred_gain.c:111:19
    6aa8:    43 20             	r3 = 0x0
    6aaa:    c1 ff 6e a3 01 00 	r1 = 0x1a36e <sine_long_1024+0x16E : 1a36e >			  ## LPC_inv_pred_gain.c:115:9
    6ab0:    10 ed 00 01       	ifs (r0 >= r1) {			  ## LPC_inv_pred_gain.c:115:9
    6ab4:    03 16             		r3 = r0
                               	}			  ## LPC_inv_pred_gain.c:115:9
    6ab6:    06 25             	r6 = [sp+20]
    6ab8:    0d ff 0f 60 1b fe 	ifs (r6 <= 0xf) goto -0x3ca <wtgv2_silk_NLSF2A+0x17E : 66f4 >
    6abe:    62 95             	sp += 0x1d4
    6ac0:    5f 04             	{pc, r15-r4} = [sp++]			  ## NLSF2A.c:140:1


wtgv2_silk_decode_parameters:
    6ac2:    7f 04             	[--sp] = {rets, r15-r4}			  ## decode_parameters.c:41:0
    6ac4:    c2 98             	sp += -0xa0			  ## decode_parameters.c:41:0
    6ac6:    c3 14             	r11 = 0			  ## decode_parameters.c:41:0
    6ac8:    44 21             	r4 = 0x1			  ## decode_parameters.c:48:43
    6aca:    b2 e8 02 00       	if (r2 != 0x2) {			  ## decode_parameters.c:48:43
    6ace:    44 20             		r4 = 0x0
                               	}			  ## decode_parameters.c:48:43
    6ad0:    02 f1 08 04       	r2 = r0 + 0x408  #			  ## decode_parameters.c:48:43
    6ad4:    80 23             		 [sp+12] = r0
    6ad6:    0c f1 74 20       	r12 = r2 + 0x74  #			  ## gain_quant.c:51:10
    6ada:    81 20             		 [sp] = r1			  ## gain_quant.c:51:10
    6adc:    0f e1 10 10       	r15 = r1 + 0x10			  ## gain_quant.c:51:10
    6ae0:    21 16             	r1 = r2			  ## gain_quant.c:51:10
    6ae2:    d0 ec 1c e0       	r14 = [r1+0xc]			  ## decode_parameters.c:48:73
    6ae6:    c0 ff 71 1c 1d 00 	r0 = 0x1d1c71 <RAM_LIMIT_H+0x31C70 : 1d1c70 >
    6aec:    4d f0 7f 0f       	r13 = 0xf7f  # <usb_code_size+0x4BA : f7e >
    6af0:    84 22             		 [sp+8] = r4
    6af2:    45 20             	r5 = 0x0
    6af4:    d4 e9 05 c0       	[sp+4] = r12
    6af8:    34 8b             	goto 0xd6 <wtgv2_silk_decode_parameters+0x10E : 6bd0 >
    6afa:    d8 ee c2 65       	r6 = b[r12+r5] (s)
    6afe:    90 e1 50 24       	r2 = r5 | r4			  ## gain_quant.c:52:20
    6b02:    02 4c             	if (r2 == 0) goto 0x18 <wtgv2_silk_decode_parameters+0x5A : 6b1c >			  ## gain_quant.c:52:20
    6b04:    32 f1 fc 6f       	r2 = r6 + -0x4  #			  ## gain_quant.c:57:32
    6b08:    1f 40             		 r7 = b[r1+0x0] (u)			  ## gain_quant.c:60:86
    6b0a:    26 a1             	r6 = r2 << 0x1			  ## gain_quant.c:62:30
    6b0c:    7b 17             	r3 = r7.b0 (s)			  ## gain_quant.c:60:86
    6b0e:    c3 28             	r3 += 0x8			  ## gain_quant.c:60:84
    6b10:    ee 1e             	r6 = r6 - r3			  ## gain_quant.c:62:56
    6b12:    92 ee 00 03       	ifs (r2 <= r3) {			  ## gain_quant.c:62:56
    6b16:    26 16             		r6 = r2
                               	}			  ## gain_quant.c:61:17
    6b18:    76 18             	r6 += r7			  ## gain_quant.c:61:17
    6b1a:    04 85             	goto 0xa <wtgv2_silk_decode_parameters+0x64 : 6b26 >			  ## gain_quant.c:61:17
    6b1c:    54 ee 10 20       	r2 = b[r1+0x0] (s)			  ## gain_quant.c:54:49
    6b20:    fa 30             	r2 += -0x10			  ## gain_quant.c:54:59
    6b22:    34 e4 61 62       	r6 = smax(r6, r2)			  ## SigProc_FIX.h:562:13
    6b26:    67 b8             	r7 = r6 << 0x18			  ## gain_quant.c:67:21
    6b28:    c1 14             	r9 = 0			  ## gain_quant.c:70:52
    6b2a:    42 20             	r2 = 0x0			  ## gain_quant.c:67:21
    6b2c:    37 ed 00 00       	ifs (r7 >= 0x0) {			  ## gain_quant.c:67:21
    6b30:    62 16             		r2 = r6
                               	}			  ## gain_quant.c:67:21
    6b32:    48 e0 3f 00       	r8 = 0x3f <os_bss_size+0x2 : 3e >			  ## gain_quant.c:67:21
    6b36:    a7 ee 7c 05       	ifs (r7 <= 0x3f000000) {			  ## gain_quant.c:67:21
    6b3a:    28 16             		r8 = r2
                               	}			  ## gain_quant.c:67:21
    6b3c:    82 15             	r3_r2 = r9_r8			  ## gain_quant.c:70:52
    6b3e:    d0 e1 08 23       	r3_r2 <<= 0x38			  ## gain_quant.c:70:52
    6b42:    d0 e1 08 2f       	r3_r2 >>>= 0x38			  ## gain_quant.c:70:52
    6b46:    f8 e1 20 30       	r3_r2 = r2 * r0 (s)			  ## gain_quant.c:70:52
    6b4a:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## gain_quant.c:70:52
    6b4e:    02 e1 2a 28       	r2 = r2 + 0x82a			  ## gain_quant.c:70:92
    6b52:    35 e4 21 6d       	r6 = smin(r2, r13)			  ## SigProc_FIX.h:552:13
    6b56:    52 ee 10 80       	b[r1+0x0] = r8			  ## gain_quant.c:67:19
    6b5a:    86 fd 36 00       	ifs (r6 < 0x0) goto 0x6c <wtgv2_silk_decode_parameters+0x108 : 6bca >			  ## gain_quant.c:67:19
    6b5e:    c2 ff ff ff ff 7f 	r2 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
    6b64:    29 16             	r9 = r2
    6b66:    42 e0 7e 0f       	r2 = 0xf7e <usb_code_size+0x4BA : f7e >			  ## SigProc_FIX.h:630:14
    6b6a:    02 ee 2e 60       	ifs (r6 > r2) goto 0x5c <wtgv2_silk_decode_parameters+0x108 : 6bca >			  ## SigProc_FIX.h:630:14
    6b6e:    e7 a7             	r7 = r6 >> 0x7
    6b70:    40 21             	r0 = 0x1			  ## SigProc_FIX.h:634:11
    6b72:    c8 e1 00 87       	r8 = r0 << r7			  ## SigProc_FIX.h:634:11
    6b76:    6a e1 7f 60       	r10 = r6 & 0x7F			  ## SigProc_FIX.h:635:24
    6b7a:    a2 e0 80 a0       	r2 = 0x80 - r10			  ## SigProc_FIX.h:642:15
    6b7e:    a2 1b             	r2 *= r10			  ## SigProc_FIX.h:642:15
    6b80:    40 e0 52 ff       	r0 = -0xae <RAM_LIMIT_H+0xFFFFFFFFFFE5FF52 : ffffffffffffff52 >			  ## SigProc_FIX.h:642:15
    6b84:    f8 e1 20 c0       	r13_r12 = r2 * r0 (u)			  ## SigProc_FIX.h:642:15
    6b88:    b4 e0 d2 d2       	r13 = r13 - r2			  ## SigProc_FIX.h:642:15
    6b8c:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## SigProc_FIX.h:642:15
    6b90:    b4 e0 c0 2a       	r2 = r12 + r10			  ## SigProc_FIX.h:642:15
    6b94:    b8 e0 d0 3b       	r3 = r13 + r11 + c			  ## SigProc_FIX.h:642:15
    6b98:    4d e0 7f 0f       	r13 = 0xf7f <usb_code_size+0x4BA : f7e >			  ## SigProc_FIX.h:642:15
    6b9c:    0c ff ff 67 09 00 	ifs (r6 > 0x7ff) goto 0x12 <wtgv2_silk_decode_parameters+0xF2 : 6bb4 >			  ## SigProc_FIX.h:636:9
    6ba2:    d4 e9 04 c0       	r12 = [sp+4]
    6ba6:    c0 ff 71 1c 1d 00 	r0 = 0x1d1c71 <RAM_LIMIT_H+0x31C70 : 1d1c70 >
    6bac:    72 da             	r2 <<= r7  #			  ## SigProc_FIX.h:638:15
    6bae:    04 22             		 r4 = [sp+8]			  ## SigProc_FIX.h:638:15
    6bb0:    aa a7             	r2 = r2 >>> 0x7			  ## SigProc_FIX.h:638:15
    6bb2:    04 89             	goto 0x12 <wtgv2_silk_decode_parameters+0x104 : 6bc6 >			  ## SigProc_FIX.h:638:15
    6bb4:    d4 e9 04 c0       	r12 = [sp+4]
    6bb8:    c0 ff 71 1c 1d 00 	r0 = 0x1d1c71 <RAM_LIMIT_H+0x31C70 : 1d1c70 >
    6bbe:    c0 f1 87 6c       	r6 = r8 >>> 0x7  #			  ## SigProc_FIX.h:642:15
    6bc2:    04 22             		 r4 = [sp+8]
    6bc4:    62 1b             	r2 *= r6			  ## SigProc_FIX.h:642:15
    6bc6:    b4 e0 20 98       	r9 = r2 + r8
    6bca:    d8 ec fb 95       	[r15+r5<<2] = r9			  ## gain_quant.c:70:23
    6bce:    c5 21             	r5 += 0x1			  ## gain_quant.c:51:32
    6bd0:    8e ed 93 51       	ifs (r5 < r14) goto -0xda <wtgv2_silk_decode_parameters+0x38 : 6afa >
    6bd4:    40 f0 1c 01       	r0 = 0x11c  # <var_bss_size+0x10 : 11c >			  ## decode_parameters.c:53:75
    6bd8:    02 23             		 r2 = [sp+12]			  ## decode_parameters.c:53:75
    6bda:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## decode_parameters.c:53:75
    6bde:    1e 16             	r14 = r1
    6be0:    54 ee 1c 37       	r3 = b[r1+0x7c] (s)			  ## NLSF_decode.c:78:56
    6be4:    e8 90             	r0 = sp + 112			  ## NLSF_decode.c:78:56
    6be6:    f8 e8 90 10       	r1 = sp + 144			  ## NLSF_decode.c:78:56
    6bea:    bf ea 47 f9       	call -0xd72 <wtgv2_silk_NLSF_unpack : 5e7c >			  ## NLSF_decode.c:78:5
    6bee:    54 ed 24 a0       	r10 = h[r2+0x4] (s)			  ## NLSF_decode.c:78:5
    6bf2:    54 ed 22 f0       	r15 = h[r2+0x2] (s)			  ## NLSF_decode.c:46:14
    6bf6:    c0 e1 af bd       	r11 = r10 >>> 0x1f
    6bfa:    31 e1 ff ff       	r1 = r15 + -0x1			  ## NLSF_decode.c:46:10
    6bfe:    c5 14             	r13 = 0
    6c00:    45 e0 85 04       	r5 = 0x485 <WOLASynthesisFilter_Float_M64_m4_r1+0x80 : 484 >
    6c04:    46 20             	r6 = 0x0
    6c06:    14 83             	goto 0x46 <wtgv2_silk_decode_parameters+0x18C : 6c4e >
    6c08:    00 23             	r0 = [sp+12]			  ## NLSF_decode.c:48:20
    6c0a:    10 18             	r0 += r1			  ## NLSF_decode.c:48:20
    6c0c:    d8 ee 02 05       	r0 = b[r0+r5] (s)			  ## NLSF_decode.c:48:20
    6c10:    f8 e8 90 30       	r3 = sp + 144			  ## NLSF_decode.c:48:20
    6c14:    d8 ee 30 41       	r4 = b[r3+r1] (u)			  ## NLSF_decode.c:47:20
    6c18:    03 aa             	r3 = r0 << 0xa			  ## NLSF_decode.c:48:20
    6c1a:    ee 17             	r6 = r6.l (s)			  ## NLSF_decode.c:47:20
    6c1c:    64 1b             	r4 *= r6			  ## NLSF_decode.c:47:20
    6c1e:    c0 e1 48 cc       	r12 = r4 >>> 0x8			  ## NLSF_decode.c:47:20
    6c22:    80 fd 03 02       	ifs (r0 < 0x1) goto 0x6 <wtgv2_silk_decode_parameters+0x16A : 6c2c >			  ## NLSF_decode.c:49:13
    6c26:    36 e1 9a 3f       	r6 = r3 + -0x66			  ## NLSF_decode.c:50:23
    6c2a:    04 85             	goto 0xa <wtgv2_silk_decode_parameters+0x174 : 6c36 >
    6c2c:    46 e1 66 30       	r6 = r3 | 0x66			  ## NLSF_decode.c:52:23
    6c30:    30 e8 00 00       	if (r0 == 0x0) {
    6c34:    36 16             		r6 = r3
                               	}			  ## NLSF_decode.c:51:20
    6c36:    f8 e1 60 9a       	r9_r8 = r6 * r10 (s)			  ## NLSF_decode.c:54:20
    6c3a:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## NLSF_decode.c:54:20
    6c3e:    b4 e0 80 6c       	r6 = r8 + r12			  ## NLSF_decode.c:54:20
    6c42:    b8 e0 90 7d       	r7 = r9 + r13 + c			  ## NLSF_decode.c:54:20
    6c46:    c8 90             	r0 = sp + 80
    6c48:    d8 ed 09 61       	h[r0+r1<<1] = r6			  ## NLSF_decode.c:55:20
    6c4c:    f9 3f             	r1 += -0x1			  ## NLSF_decode.c:46:5
    6c4e:    01 fd db 01       	ifs (r1 >= 0x0) goto -0x4a <wtgv2_silk_decode_parameters+0x146 : 6c08 >
    6c52:    54 ee ec 07       	r0 = b[r14+0x7c] (s)			  ## NLSF_decode.c:84:44
    6c56:    f0 db             	r0 *= r15  #			  ## NLSF_decode.c:84:61
    6c58:    21 62             		 r1 = [r2+0x8] 			  ## NLSF_decode.c:84:31
    6c5a:    01 d8             	r1 += r0  #			  ## NLSF_decode.c:84:20
    6c5c:    23 63             		 r3 = [r2+0xc] 			  ## NLSF_decode.c:85:31
    6c5e:    00 a1             	r0 = r0 << 0x1			  ## NLSF_decode.c:85:20
    6c60:    03 18             	r3 += r0			  ## NLSF_decode.c:85:20
    6c62:    44 20             	r4 = 0x0
    6c64:    04 99             	goto 0x32 <wtgv2_silk_decode_parameters+0x1D6 : 6c98 >
    6c66:    c8 90             	r0 = sp + 80
    6c68:    d8 ed 0a 04       	r0 = h[r0+r4<<1] (s)			  ## NLSF_decode.c:87:24
    6c6c:    d8 ed 3a 54       	r5 = h[r3+r4<<1] (s)			  ## NLSF_decode.c:87:24
    6c70:    d8 ee 10 64       	r6 = b[r1+r4] (u)			  ## NLSF_decode.c:87:24
    6c74:    00 ae             	r0 = r0 << 0xe			  ## NLSF_decode.c:87:24
    6c76:    f4 e1 01 05       	r0 = r0 / r5 (s)			  ## NLSF_decode.c:87:24
    6c7a:    65 a7             	r5 = r6 << 0x7			  ## NLSF_decode.c:87:24
    6c7c:    50 18             	r0 += r5			  ## NLSF_decode.c:87:24
    6c7e:    05 16             	r5 = r0			  ## NLSF_decode.c:88:38
    6c80:    b0 ee 00 00       	ifs (r0 <= 0x0) {			  ## NLSF_decode.c:88:38
    6c84:    45 20             		r5 = 0x0
                               	}			  ## NLSF_decode.c:88:38
    6c86:    46 e0 ff 7f       	r6 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## NLSF_decode.c:88:38
    6c8a:    a0 ed 00 0c       	ifs (r0 < 0x8000) {			  ## NLSF_decode.c:88:38
    6c8e:    56 16             		r6 = r5
                               	}			  ## NLSF_decode.c:88:26
    6c90:    a8 90             	r0 = sp + 48			  ## NLSF_decode.c:88:26
    6c92:    d8 ed 09 64       	h[r0+r4<<1] = r6			  ## NLSF_decode.c:88:24
    6c96:    c4 21             	r4 += 0x1			  ## NLSF_decode.c:86:40
    6c98:    8f ed e5 41       	ifs (r4 < r15) goto -0x36 <wtgv2_silk_decode_parameters+0x1A4 : 6c66 >
    6c9c:    3a f1 ff ff       	r10 = r15 + -0x1  #
    6ca0:    21 69             		 r1 = [r2+0x24] 			  ## NLSF_decode.c:92:54
    6ca2:    c0 e1 a1 00       	r0 = r10 << 0x1
    6ca6:    aa 90             	r2 = sp + 48
    6ca8:    b4 e0 20 80       	r8 = r2 + r0
    6cac:    c5 14             	r13 = 0
    6cae:    34 93             	goto 0xe6 <wtgv2_silk_decode_parameters+0x2D4 : 6d96 >
    6cb0:    54 ed 10 90       	r9 = h[r1+0x0] (s)			  ## NLSF_stabilize.c:65:38
    6cb4:    d9 e9 30 00       	r0 = h[sp+48] (s)			  ## NLSF_stabilize.c:65:24
    6cb8:    b4 e0 02 49       	r4 = r0 - r9			  ## NLSF_stabilize.c:65:36
    6cbc:    45 21             	r5 = 0x1
    6cbe:    43 20             	r3 = 0x0
    6cc0:    04 91             	goto 0x22 <wtgv2_silk_decode_parameters+0x222 : 6ce4 >
    6cc2:    aa 90             	r2 = sp + 48
    6cc4:    d8 ed 2a 65       	r6 = h[r2+r5<<1] (s)			  ## NLSF_stabilize.c:69:24
    6cc8:    d8 ed 1a 25       	r2 = h[r1+r5<<1] (s)			  ## NLSF_stabilize.c:69:56
    6ccc:    88 17             	r0 = r0.l (s)			  ## NLSF_stabilize.c:69:40
    6cce:    60 1e             	r0 = r6 - r0			  ## NLSF_stabilize.c:69:54
    6cd0:    82 1e             	r2 = r0 - r2			  ## NLSF_stabilize.c:69:36
    6cd2:    57 16             	r7 = r5			  ## NLSF_stabilize.c:70:17
    6cd4:    12 ed 00 44       	ifs (r2 >= r4) {			  ## NLSF_stabilize.c:70:17
    6cd8:    37 16             		r7 = r3			  ## NLSF_stabilize.c:70:17
    6cda:    42 16             		r2 = r4
                               	}			  ## NLSF_stabilize.c:70:17
    6cdc:    c5 21             	r5 += 0x1			  ## NLSF_stabilize.c:68:32
    6cde:    60 16             	r0 = r6			  ## NLSF_stabilize.c:69:40
    6ce0:    73 16             	r3 = r7			  ## NLSF_stabilize.c:69:40
    6ce2:    24 16             	r4 = r2			  ## NLSF_stabilize.c:69:40
    6ce4:    8a ee ed 51       	ifs (r5 <= r10) goto -0x26 <wtgv2_silk_decode_parameters+0x200 : 6cc2 >
    6ce8:    54 ed 80 00       	r0 = h[r8+0x0] (s)			  ## NLSF_stabilize.c:76:36
    6cec:    d8 ed 1a 6f       	r6 = h[r1+r15<<1] (s)			  ## NLSF_stabilize.c:76:52
    6cf0:    a0 e0 00 0c       	r0 = 0x8000 - r0			  ## NLSF_stabilize.c:76:50
    6cf4:    80 1f             	r0 = r0 - r6			  ## NLSF_stabilize.c:76:32
    6cf6:    f5 16             	r5 = r15			  ## NLSF_stabilize.c:77:13
    6cf8:    10 ed 00 44       	ifs (r0 >= r4) {
    6cfc:    35 16             		r5 = r3			  ## NLSF_stabilize.c:77:13
    6cfe:    40 16             		r0 = r4
                               	}			  ## NLSF_stabilize.c:77:13
    6d00:    70 fe a8 fe       	ifs (r0 > -0x1) goto 0x150 <wtgv2_silk_decode_parameters+0x392 : 6e54 >
    6d04:    05 46             	if (r5 == 0) goto 0xc <wtgv2_silk_decode_parameters+0x250 : 6d12 >
    6d06:    8f e8 07 50       	if (r5 != r15) goto 0xe <wtgv2_silk_decode_parameters+0x256 : 6d18 >
    6d0a:    a0 e0 00 6c       	r0 = 0x8000 - r6			  ## NLSF_stabilize.c:95:41
    6d0e:    84 16             	r4 = r8			  ## NLSF_stabilize.c:95:41
    6d10:    14 9f             	goto 0x7e <wtgv2_silk_decode_parameters+0x2CE : 6d90 >			  ## NLSF_stabilize.c:95:41
    6d12:    d8 e9 31 90       	h[sp+48] = r9			  ## NLSF_stabilize.c:91:25
    6d16:    14 9d             	goto 0x7a <wtgv2_silk_decode_parameters+0x2D0 : 6d92 >			  ## NLSF_stabilize.c:91:25
    6d18:    42 20             	r2 = 0x0
    6d1a:    47 20             	r7 = 0x0
    6d1c:    04 84             	goto 0x8 <wtgv2_silk_decode_parameters+0x264 : 6d26 >
    6d1e:    d8 ed 1a 02       	r0 = h[r1+r2<<1] (s)			  ## NLSF_stabilize.c:101:35
    6d22:    07 18             	r7 += r0			  ## NLSF_stabilize.c:101:32
    6d24:    c2 21             	r2 += 0x1			  ## NLSF_stabilize.c:100:33
    6d26:    85 ed fa 21       	ifs (r2 < r5) goto -0xc <wtgv2_silk_decode_parameters+0x25C : 6d1e >
    6d2a:    d8 ed 1a c5       	r12 = h[r1+r5<<1] (s)			  ## NLSF_stabilize.c:103:31
    6d2e:    b9 e1 40 c0       	r9 = uextra(r12, p:0x0, l:0x10)			  ## NLSF_stabilize.c:103:31
    6d32:    60 e0 00 2c       	r2 = 0x8000
    6d36:    f0 16             	r0 = r15
    6d38:    04 84             	goto 0x8 <wtgv2_silk_decode_parameters+0x280 : 6d42 >
    6d3a:    d8 ed 1a 30       	r3 = h[r1+r0<<1] (s)			  ## NLSF_stabilize.c:108:35
    6d3e:    aa 1e             	r2 = r2 - r3			  ## NLSF_stabilize.c:108:32
    6d40:    f8 3f             	r0 += -0x1			  ## NLSF_stabilize.c:107:33
    6d42:    05 ee fa 01       	ifs (r0 > r5) goto -0xc <wtgv2_silk_decode_parameters+0x278 : 6d3a >
    6d46:    3b e1 ff 5f       	r11 = r5 + -0x1
    6d4a:    ac 90             	r4 = sp + 48
    6d4c:    d8 ed 4a 0b       	r0 = h[r4+r11<<1] (s)
    6d50:    53 a1             	r3 = r5 << 0x1
    6d52:    dc ed 42 33       	r3 = h[++r4=r3] (s)
    6d56:    30 18             	r0 += r3
    6d58:    c0 e1 c1 3c       	r3 = r12 >>> 0x1			  ## NLSF_stabilize.c:103:31
    6d5c:    ad 1e             	r5 = r2 - r3			  ## NLSF_stabilize.c:110:28
    6d5e:    73 18             	r3 += r7			  ## NLSF_stabilize.c:103:28
    6d60:    62 e1 01 00       	r2 = r0 & 0x1			  ## NLSF_stabilize.c:103:28
    6d64:    88 a1             	r0 = r0 >>> 0x1			  ## NLSF_stabilize.c:103:28
    6d66:    02 18             	r2 += r0			  ## NLSF_stabilize.c:103:28
    6d68:    85 ee 06 30       	ifs (r3 <= r5) goto 0xc <wtgv2_silk_decode_parameters+0x2B6 : 6d78 >			  ## NLSF_stabilize.c:113:43
    6d6c:    30 16             	r0 = r3			  ## NLSF_stabilize.c:113:43
    6d6e:    92 ee 00 03       	ifs (r2 <= r3) {			  ## NLSF_stabilize.c:113:43
    6d72:    34 e4 21 05       		r0 = smax(r2, r5)
                               	}			  ## NLSF_stabilize.c:113:43
    6d76:    04 85             	goto 0xa <wtgv2_silk_decode_parameters+0x2C0 : 6d82 >			  ## NLSF_stabilize.c:113:43
    6d78:    50 16             	r0 = r5			  ## NLSF_stabilize.c:113:43
    6d7a:    92 ee 00 05       	ifs (r2 <= r5) {			  ## NLSF_stabilize.c:113:43
    6d7e:    34 e4 21 03       		r0 = smax(r2, r3)
                               	}			  ## NLSF_stabilize.c:113:43
    6d82:    c0 e1 c1 28       	r2 = r12 >> 0x1			  ## NLSF_stabilize.c:115:47
    6d86:    80 1e             	r0 = r0 - r2			  ## NLSF_stabilize.c:115:45
    6d88:    aa 90             	r2 = sp + 48			  ## NLSF_stabilize.c:115:45
    6d8a:    d8 ed 29 0b       	h[r2+r11<<1] = r0			  ## NLSF_stabilize.c:115:27
    6d8e:    90 18             	r0 += r9			  ## NLSF_stabilize.c:116:41
    6d90:    c8 60             	h[r4+0x0] = r0
    6d92:    0d e1 01 d0       	r13 = r13 + 0x1			  ## NLSF_stabilize.c:60:45
    6d96:    8d fe 8b 27       	ifs (r13 <= 0x13) goto -0xea <wtgv2_silk_decode_parameters+0x1EE : 6cb0 >
    6d9a:    8d f8 5b 28       	if (r13 != 0x14) goto 0xb6 <wtgv2_silk_decode_parameters+0x392 : 6e54 >
    6d9e:    42 21             	r2 = 0x1
    6da0:    43 20             	r3 = 0x0
    6da2:    04 96             	goto 0x2c <wtgv2_silk_decode_parameters+0x30E : 6dd0 >
    6da4:    a8 90             	r0 = sp + 48
    6da6:    d8 ed 0a 42       	r4 = h[r0+r2<<1] (s)			  ## sort.c:100:17
    6daa:    35 16             	r5 = r3			  ## sort.c:100:17
    6dac:    04 84             	goto 0x8 <wtgv2_silk_decode_parameters+0x2F4 : 6db6 >			  ## sort.c:100:17
    6dae:    c6 22             	r6 += 0x2			  ## sort.c:102:24
    6db0:    d8 ed 69 05       	h[r6+r5<<1] = r0			  ## sort.c:102:24
    6db4:    fd 3f             	r5 += -0x1			  ## sort.c:101:9
    6db6:    85 fd 05 00       	ifs (r5 < 0x0) goto 0xa <wtgv2_silk_decode_parameters+0x302 : 6dc4 >
    6dba:    ae 90             	r6 = sp + 48
    6dbc:    d8 ed 6a 05       	r0 = h[r6+r5<<1] (s)			  ## sort.c:101:49
    6dc0:    80 ed f5 41       	ifs (r4 < r0) goto -0x16 <wtgv2_silk_decode_parameters+0x2EC : 6dae >			  ## sort.c:101:49
    6dc4:    a8 90             	r0 = sp + 48
    6dc6:    c0 22             	r0 += 0x2			  ## sort.c:104:20
    6dc8:    d8 ed 09 45       	h[r0+r5<<1] = r4			  ## sort.c:104:20
    6dcc:    c3 21             	r3 += 0x1			  ## sort.c:99:5
    6dce:    c2 21             	r2 += 0x1			  ## sort.c:99:25
    6dd0:    8f ed e8 21       	ifs (r2 < r15) goto -0x30 <wtgv2_silk_decode_parameters+0x2E2 : 6da4 >
    6dd4:    54 ed 10 00       	r0 = h[r1+0x0] (s)			  ## NLSF_stabilize.c:129:50
    6dd8:    d9 e9 30 20       	r2 = h[sp+48] (s)			  ## NLSF_stabilize.c:129:37
    6ddc:    34 e4 21 40       	r4 = smax(r2, r0)			  ## SigProc_FIX.h:562:13
    6de0:    d8 e9 31 40       	h[sp+48] = r4			  ## NLSF_stabilize.c:129:21
    6de4:    42 21             	r2 = 0x1
    6de6:    43 e0 00 80       	r3 = -0x8000 <RAM_LIMIT_H+0xFFFFFFFFFFE58000 : ffffffffffff8000 >
    6dea:    04 93             	goto 0x26 <wtgv2_silk_decode_parameters+0x350 : 6e12 >
    6dec:    d8 ed 1a 02       	r0 = h[r1+r2<<1] (s)			  ## NLSF_stabilize.c:133:54
    6df0:    05 1d             	r5 = r0 + r4			  ## NLSF_stabilize.c:133:54
    6df2:    34 e4 51 03       	r0 = smax(r5, r3)			  ## NLSF_stabilize.c:133:54
    6df6:    8c 17             	r4 = r0.l (s)			  ## NLSF_stabilize.c:133:54
    6df8:    40 e0 ff 7f       	r0 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## NLSF_stabilize.c:133:54
    6dfc:    a5 ed 00 0c       	ifs (r5 < 0x8000) {			  ## NLSF_stabilize.c:133:54
    6e00:    40 16             		r0 = r4
                               	}			  ## NLSF_stabilize.c:133:54
    6e02:    ad 90             	r5 = sp + 48
    6e04:    d8 ed 5a 42       	r4 = h[r5+r2<<1] (s)			  ## NLSF_stabilize.c:133:41
    6e08:    34 e4 41 40       	r4 = smax(r4, r0)			  ## SigProc_FIX.h:562:13
    6e0c:    d8 ed 59 42       	h[r5+r2<<1] = r4			  ## NLSF_stabilize.c:133:25
    6e10:    c2 21             	r2 += 0x1			  ## NLSF_stabilize.c:132:29
    6e12:    8f ed eb 21       	ifs (r2 < r15) goto -0x2a <wtgv2_silk_decode_parameters+0x32A : 6dec >
    6e16:    d8 ed 1a 0f       	r0 = h[r1+r15<<1] (s)			  ## NLSF_stabilize.c:136:64
    6e1a:    54 ed 80 20       	r2 = h[r8+0x0] (s)			  ## NLSF_stabilize.c:136:39
    6e1e:    a0 e0 00 0c       	r0 = 0x8000 - r0			  ## NLSF_stabilize.c:136:62
    6e22:    35 e4 21 20       	r2 = smin(r2, r0)			  ## SigProc_FIX.h:544:13
    6e26:    50 ed 81 20       	h[r8+0x0] = r2			  ## NLSF_stabilize.c:136:23
    6e2a:    f9 3e             	r1 += -0x2			  ## NLSF_stabilize.c:139:14
    6e2c:    a8 90             	r0 = sp + 48			  ## NLSF_stabilize.c:139:14
    6e2e:    33 e1 fc 0f       	r3 = r0 + -0x4			  ## NLSF_stabilize.c:139:14
    6e32:    04 8c             	goto 0x18 <wtgv2_silk_decode_parameters+0x38A : 6e4c >			  ## NLSF_stabilize.c:139:14
    6e34:    d8 ed 1a 0f       	r0 = h[r1+r15<<1] (s)			  ## NLSF_stabilize.c:140:70
    6e38:    d8 ed 3a 4f       	r4 = h[r3+r15<<1] (s)			  ## NLSF_stabilize.c:140:41
    6e3c:    aa 17             	r2 = r2.l (s)			  ## NLSF_stabilize.c:140:54
    6e3e:    20 1e             	r0 = r2 - r0			  ## NLSF_stabilize.c:140:68
    6e40:    35 e4 41 20       	r2 = smin(r4, r0)			  ## SigProc_FIX.h:544:13
    6e44:    d8 ed 39 2f       	h[r3+r15<<1] = r2			  ## NLSF_stabilize.c:140:25
    6e48:    3f e1 ff ff       	r15 = r15 + -0x1			  ## NLSF_stabilize.c:139:9
    6e4c:    30 e1 fe ff       	r0 = r15 + -0x2			  ## NLSF_stabilize.c:139:25
    6e50:    00 fd f0 01       	ifs (r0 >= 0x0) goto -0x20 <wtgv2_silk_decode_parameters+0x372 : 6e34 >			  ## NLSF_stabilize.c:139:25
    6e54:    e5 16             	r5 = r14
    6e56:    d4 e9 00 90       	r9 = [sp]
    6e5a:    06 f1 40 90       	r6 = r9 + 0x40  #			  ## decode_parameters.c:56:24
    6e5e:    52 67             		 r2 = [r5+0x1c] 			  ## decode_parameters.c:56:72
    6e60:    a9 90             	r1 = sp + 48			  ## decode_parameters.c:56:72
    6e62:    60 16             	r0 = r6			  ## decode_parameters.c:56:5
    6e64:    bf ea 87 fb       	call -0x8f2 <wtgv2_silk_NLSF2A : 6576 >			  ## decode_parameters.c:56:5
    6e68:    40 e0 12 01       	r0 = 0x112 <var_bss_size+0x6 : 112 >			  ## decode_parameters.c:60:16
    6e6c:    d4 e9 0c a0       	r10 = [sp+12]			  ## decode_parameters.c:60:16
    6e70:    d8 ec aa 10       	r1 = [r10+r0<<2]			  ## decode_parameters.c:60:16
    6e74:    00 e1 20 90       	r0 = r9 + 0x20			  ## decode_parameters.c:56:35
    6e78:    04 e1 98 a4       	r4 = r10 + 0x498			  ## decode_parameters.c:56:35
    6e7c:    81 f8 03 02       	if (r1 != 0x1) goto 0x6 <wtgv2_silk_decode_parameters+0x3C4 : 6e86 >			  ## decode_parameters.c:60:9
    6e80:    41 24             	r1 = 0x4			  ## decode_parameters.c:61:42
    6e82:    c9 43             	b[r4+0x3] = r1			  ## decode_parameters.c:61:42
    6e84:    04 9d             	goto 0x3a <wtgv2_silk_decode_parameters+0x3FE : 6ec0 >			  ## decode_parameters.c:61:42
    6e86:    54 ee 53 19       	r1 = b[r5+0x93] (s)
    6e8a:    01 fe 19 06       	ifs (r1 > 0x3) goto 0x32 <wtgv2_silk_decode_parameters+0x3FE : 6ec0 >
    6e8e:    03 f1 20 50       	r3 = r5 + 0x20  #			  ## decode_parameters.c:42:16
    6e92:    52 67             		 r2 = [r5+0x1c] 			  ## decode_parameters.c:42:16
    6e94:    45 20             	r5 = 0x0			  ## decode_parameters.c:42:16
    6e96:    04 8d             	goto 0x1a <wtgv2_silk_decode_parameters+0x3F0 : 6eb2 >			  ## decode_parameters.c:42:16
    6e98:    d8 ed 3a 65       	r6 = h[r3+r5<<1] (s)			  ## decode_parameters.c:68:31
    6e9c:    af 90             	r7 = sp + 48			  ## decode_parameters.c:68:31
    6e9e:    d8 ed 7a 75       	r7 = h[r7+r5<<1] (s)			  ## decode_parameters.c:68:58
    6ea2:    f7 1f             	r7 = r7 - r6			  ## decode_parameters.c:68:58
    6ea4:    17 1b             	r7 *= r1			  ## decode_parameters.c:68:58
    6ea6:    f7 a2             	r7 = r7 >> 0x2			  ## decode_parameters.c:68:58
    6ea8:    76 18             	r6 += r7			  ## decode_parameters.c:68:56
    6eaa:    8f 90             	r7 = sp + 16			  ## decode_parameters.c:68:56
    6eac:    d8 ed 79 65       	h[r7+r5<<1] = r6			  ## decode_parameters.c:68:29
    6eb0:    c5 21             	r5 += 0x1			  ## decode_parameters.c:67:44
    6eb2:    82 ed f1 51       	ifs (r5 < r2) goto -0x1e <wtgv2_silk_decode_parameters+0x3D6 : 6e98 >
    6eb6:    89 90             	r1 = sp + 16
    6eb8:    bf ea 5d fb       	call -0x946 <wtgv2_silk_NLSF2A : 6576 >			  ## decode_parameters.c:73:9
    6ebc:    e6 16             	r6 = r14			  ## decode_parameters.c:73:9
    6ebe:    04 87             	goto 0xe <wtgv2_silk_decode_parameters+0x40C : 6ece >			  ## decode_parameters.c:73:9
    6ec0:    51 67             	r1 = [r5+0x1c] 			  ## decode_parameters.c:76:9
    6ec2:    12 a1             	r2 = r1 << 0x1			  ## decode_parameters.c:76:9
    6ec4:    61 16             	r1 = r6			  ## decode_parameters.c:76:9
    6ec6:    80 ff 70 d2 ff ff 	call -0x2d90 <memmove : 413c >			  ## decode_parameters.c:76:9
    6ecc:    56 16             	r6 = r5			  ## decode_parameters.c:76:9
    6ece:    00 f1 20 60       	r0 = r6 + 0x20  #			  ## decode_parameters.c:79:5
    6ed2:    61 67             		 r1 = [r6+0x1c] 			  ## decode_parameters.c:79:5
    6ed4:    12 a1             	r2 = r1 << 0x1			  ## decode_parameters.c:79:5
    6ed6:    a9 90             	r1 = sp + 48			  ## decode_parameters.c:79:5
    6ed8:    80 ff 5e d2 ff ff 	call -0x2da2 <memmove : 413c >			  ## decode_parameters.c:79:5
    6ede:    48 41             	r0 = b[r4+0x1] (u)			  ## decode_parameters.c:82:24
    6ee0:    80 f8 14 04       	if (r0 != 0x2) goto 0x28 <wtgv2_silk_decode_parameters+0x44A : 6f0c >			  ## decode_parameters.c:82:9
    6ee4:    64 61             	r4 = [r6+0x4] 			  ## decode_parameters.c:88:114
    6ee6:    54 ee 60 29       	r2 = b[r6+0x90] (s)			  ## decode_parameters.c:88:74
    6eea:    54 ed 6e 58       	r5 = h[r6+0x8e] (s)			  ## decode_parameters.c:88:49
    6eee:    d0 ec 6c 80       	r8 = [r6+0xc]			  ## decode_parameters.c:88:129
    6ef2:    84 f8 1e 10       	if (r4 != 0x8) goto 0x3c <wtgv2_silk_decode_parameters+0x470 : 6f32 >			  ## decode_pitch.c:51:9
    6ef6:    b8 e8 04 60       	if (r8 != 0x4) {
    6efa:    c3 ff 0e 80 00 00 		r3 = 0x800e <wtgv2wtgv2silk_CB_lags_stage2_10_ms : 800e >
    6f00:    41 23             		r1 = 0x3
                               	} else {
    6f02:    c3 ff e2 7f 00 00 		r3 = 0x7fe2 <wtgv2silk_CB_lags_stage2 : 7fe2 >
    6f08:    41 2b             		r1 = 0xb
                               	}
    6f0a:    04 9d             	goto 0x3a <wtgv2_silk_decode_parameters+0x484 : 6f46 >
    6f0c:    60 63             	r0 = [r6+0xc] 			  ## decode_parameters.c:106:9
    6f0e:    02 a2             	r2 = r0 << 0x2			  ## decode_parameters.c:106:9
    6f10:    41 20             	r1 = 0x0			  ## decode_parameters.c:106:9
    6f12:    45 20             	r5 = 0x0			  ## decode_parameters.c:106:9
    6f14:    90 16             	r0 = r9			  ## decode_parameters.c:106:9
    6f16:    80 ff 0a d3 ff ff 	call -0x2cf6 <memset : 4226 >			  ## decode_parameters.c:106:9
    6f1c:    00 f1 60 90       	r0 = r9 + 0x60  #			  ## decode_parameters.c:107:9
    6f20:    61 63             		 r1 = [r6+0xc] 			  ## decode_parameters.c:107:9
    6f22:    e2 e1 0a 10       	r2 = r1 * 0xA			  ## decode_parameters.c:107:9
    6f26:    41 20             	r1 = 0x0			  ## decode_parameters.c:107:9
    6f28:    80 ff f8 d2 ff ff 	call -0x2d08 <memset : 4226 >			  ## decode_parameters.c:107:9
    6f2e:    cd 44             	b[r4+0x4] = r5			  ## decode_parameters.c:108:34
    6f30:    24 95             	goto 0xaa <wtgv2_silk_decode_parameters+0x51A : 6fdc >			  ## decode_parameters.c:108:34
    6f32:    b8 e8 04 60       	if (r8 != 0x4) {
    6f36:    c3 ff 9c 80 00 00 		r3 = 0x809c <wtgv2wtgv2silk_CB_lags_stage3_10_ms : 809c >
    6f3c:    41 2c             		r1 = 0xc
                               	} else {
    6f3e:    c3 ff 14 80 00 00 		r3 = 0x8014 <wtgv2silk_CB_lags_stage3 : 8014 >
    6f44:    49 22             		r1 = 0x22
                               	}
    6f46:    32 18             	r2 += r3			  ## decode_pitch.c:75:10
    6f48:    40 b0             	r0 = r4 << 0x10			  ## decode_pitch.c:71:15
    6f4a:    8b af             	r3 = r0 >>> 0xf			  ## decode_pitch.c:71:15
    6f4c:    35 18             	r5 += r3			  ## decode_pitch.c:73:19
    6f4e:    c8 17             	r0 = r4.l (s)			  ## decode_pitch.c:71:15
    6f50:    e0 e1 12 00       	r0 = r0 * 0x12			  ## decode_pitch.c:72:15
    6f54:    46 20             	r6 = 0x0
    6f56:    04 95             	goto 0x2a <wtgv2_silk_decode_parameters+0x4C0 : 6f82 >
    6f58:    de ee 22 41       	r4 = b[r2++=r1] (s)			  ## decode_pitch.c:76:33
    6f5c:    57 1d             	r7 = r5 + r4			  ## decode_pitch.c:76:31
    6f5e:    d8 ec 9b 76       	[r9+r6<<2] = r7			  ## decode_pitch.c:76:25
    6f62:    80 ee 06 30       	ifs (r3 <= r0) goto 0xc <wtgv2_silk_decode_parameters+0x4B0 : 6f72 >			  ## decode_pitch.c:77:27
    6f66:    34 16             	r4 = r3			  ## decode_pitch.c:77:27
    6f68:    97 ee 00 03       	ifs (r7 <= r3) {			  ## decode_pitch.c:77:27
    6f6c:    34 e4 71 40       		r4 = smax(r7, r0)
                               	}			  ## decode_pitch.c:77:27
    6f70:    04 85             	goto 0xa <wtgv2_silk_decode_parameters+0x4BA : 6f7c >			  ## decode_pitch.c:77:27
    6f72:    04 16             	r4 = r0			  ## decode_pitch.c:77:27
    6f74:    97 ee 00 00       	ifs (r7 <= r0) {			  ## decode_pitch.c:77:27
    6f78:    34 e4 71 43       		r4 = smax(r7, r3)
                               	}			  ## decode_pitch.c:77:27
    6f7c:    d8 ec 9b 46       	[r9+r6<<2] = r4			  ## decode_pitch.c:77:25
    6f80:    c6 21             	r6 += 0x1			  ## decode_pitch.c:75:32
    6f82:    88 ed e9 61       	ifs (r6 < r8) goto -0x2e <wtgv2_silk_decode_parameters+0x496 : 6f58 >
    6f86:    e2 16             	r2 = r14
    6f88:    54 ee 24 09       	r0 = b[r2+0x94] (s)			  ## decode_parameters.c:91:22
    6f8c:    c1 ff ec 76 00 00 	r1 = 0x76ec <wtgv2_LTP_vq_ptrs_Q7 : 76ec >			  ## decode_parameters.c:91:22
    6f92:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## decode_parameters.c:91:22
    6f96:    02 f1 60 90       	r2 = r9 + 0x60  #			  ## decode_parameters.c:93:14
    6f9a:    21 63             		 r1 = [r2+0xc] 			  ## decode_parameters.c:93:14
    6f9c:    43 20             	r3 = 0x0			  ## decode_parameters.c:93:14
    6f9e:    48 e0 80 04       	r8 = 0x480 <WOLASynthesisFilter_Float_M64_m4_r1+0x7C : 480 >			  ## decode_parameters.c:93:14
    6fa2:    04 93             	goto 0x26 <wtgv2_silk_decode_parameters+0x508 : 6fca >			  ## decode_parameters.c:93:14
    6fa4:    b4 e0 a0 53       	r5 = r10 + r3			  ## decode_parameters.c:94:18
    6fa8:    d8 ee 52 58       	r5 = b[r5+r8] (s)			  ## decode_parameters.c:94:18
    6fac:    e5 e1 05 50       	r5 = r5 * 0x5
    6fb0:    05 18             	r5 += r0			  ## decode_parameters.c:95:18
    6fb2:    46 20             	r6 = 0x0			  ## decode_parameters.c:95:18
    6fb4:    27 16             	r7 = r2			  ## decode_parameters.c:95:18
    6fb6:    04 85             	goto 0xa <wtgv2_silk_decode_parameters+0x500 : 6fc2 >			  ## decode_parameters.c:95:18
    6fb8:    d8 ee 52 46       	r4 = b[r5+r6] (s)			  ## decode_parameters.c:96:63
    6fbc:    44 a7             	r4 = r4 << 0x7			  ## decode_parameters.c:96:63
    6fbe:    f4 06             	h[r7++=0x2] = r4			  ## decode_parameters.c:96:61
    6fc0:    c6 21             	r6 += 0x1			  ## decode_parameters.c:95:41
    6fc2:    86 f8 f9 0b       	if (r6 != 0x5) goto -0xe <wtgv2_silk_decode_parameters+0x4F6 : 6fb8 >
    6fc6:    c2 2a             	r2 += 0xa			  ## decode_parameters.c:93:9
    6fc8:    c3 21             	r3 += 0x1			  ## decode_parameters.c:93:43
    6fca:    81 ed eb 31       	ifs (r3 < r1) goto -0x2a <wtgv2_silk_decode_parameters+0x4E2 : 6fa4 >
    6fce:    54 ee e5 09       	r0 = b[r14+0x95] (s)			  ## decode_parameters.c:103:14
    6fd2:    c1 ff f8 76 00 00 	r1 = 0x76f8 <wtgv2silk_LTPScales_table_Q14 : 76f8 >			  ## decode_parameters.c:104:36
    6fd8:    d8 ed 1a 50       	r5 = h[r1+r0<<1] (s)			  ## decode_parameters.c:104:36
    6fdc:    d0 ec 99 58       	[r9+0x88] = r5
    6fe0:    22 88             	sp += 0xa0
    6fe2:    5f 04             	{pc, r15-r4} = [sp++]			  ## decode_parameters.c:111:1


wtgv2_silk_decode_frame:
    6fe4:    7f 04             	[--sp] = {rets, r15-r4}			  ## decode_frame.c:52:0
    6fe6:    f0 e8 5c 1d       	sp += -0x2a4			  ## decode_frame.c:52:0
    6fea:    04 16             	r4 = r0			  ## decode_frame.c:52:0
    6fec:    0b e1 a0 44       	r11 = r4 + 0x4a0			  ## decode_frame.c:52:0
    6ff0:    d0 ec b0 c1       	r12 = [r11+0x10]			  ## decode_frame.c:55:5
    6ff4:    a0 e0 8c c0       	r0 = 0x8C - r12			  ## decode_frame.c:58:5
    6ff8:    60 e1 8b 00       	r0 = r0 & 0x8B			  ## decode_frame.c:58:5
    6ffc:    b4 e0 c0 50       	r5 = r12 + r0			  ## decode_frame.c:58:5
    7000:    00 e1 8c 50       	r0 = r5 + 0x8c			  ## decode_frame.c:58:5
    7004:    07 e1 04 44       	r7 = r4 + 0x404			  ## decode_frame.c:58:5
    7008:    d0 ec 74 d1       	r13 = [r7+0x14]			  ## decode_frame.c:57:16
    700c:    d0 ec b1 01       	[r11+0x10] = r0			  ## decode_frame.c:58:5
    7010:    c7 14             	r15 = 0			  ## decode_frame.c:58:5
    7012:    d0 ec 59 f8       	[r5+0x88] = r15			  ## decode_frame.c:59:30
    7016:    40 e0 15 01       	r0 = 0x115 <var_bss_size+0x8 : 114 >			  ## decode_frame.c:78:62
    701a:    d8 ec 4a e0       	r14 = [r4+r0<<2]			  ## decode_frame.c:78:62
    701e:    38 16             	r8 = r3			  ## decode_frame.c:78:62
    7020:    29 16             	r9 = r2
    7022:    16 16             	r6 = r1
    7024:    d4 e9 dc a2       	r10 = [sp+732]
    7028:    d4 e9 d8 32       	r3 = [sp+728]
    702c:    d4 e9 01 a0       	[sp] = r10			  ## decode_frame.c:78:9
    7030:    40 16             	r0 = r4			  ## decode_frame.c:78:9
    7032:    e2 16             	r2 = r14			  ## decode_frame.c:78:9
    7034:    bf ea 60 f7       	call -0x1140 <wtgv2_silk_decode_indices : 5ef8 >			  ## decode_frame.c:78:9
    7038:    54 ee 76 39       	r3 = b[r7+0x96] (s)			  ## decode_frame.c:84:17
    703c:    54 ee 75 29       	r2 = b[r7+0x95] (s)			  ## decode_frame.c:83:55
    7040:    70 65             	r0 = [r7+0x14] 			  ## decode_frame.c:84:56
    7042:    f8 e8 06 e0       	r14 = sp + 6			  ## decode_frame.c:84:56
    7046:    60 d6             	r0 = r6  #			  ## decode_frame.c:83:9
    7048:    80 20             		 [sp] = r0			  ## decode_frame.c:83:9
    704a:    e1 16             	r1 = r14			  ## decode_frame.c:83:9
    704c:    bf ea 90 f8       	call -0xee0 <wtgv2_silk_decode_pulses : 6170 >			  ## decode_frame.c:83:9
    7050:    40 15             	r1_r0 = r5_r4			  ## decode_frame.c:89:9
    7052:    a2 16             	r2 = r10			  ## decode_frame.c:89:9
    7054:    bf ea 35 fd       	call -0x596 <wtgv2_silk_decode_parameters : 6ac2 >			  ## decode_frame.c:89:9
    7058:    40 15             	r1_r0 = r5_r4			  ## decode_frame.c:94:9
    705a:    92 16             	r2 = r9			  ## decode_frame.c:94:9
    705c:    e3 16             	r3 = r14			  ## decode_frame.c:94:9
    705e:    bf ea ea f2       	call -0x1a2c <wtgv2_silk_decode_core : 5636 >			  ## decode_frame.c:94:9
    7062:    d0 ec b1 f0       	[r11+0x0] = r15			  ## decode_frame.c:98:24
    7066:    54 ee 75 09       	r0 = b[r7+0x95] (s)			  ## decode_frame.c:99:33
    706a:    d0 ec b5 00       	[r11+0x4] = r0			  ## decode_frame.c:99:31
    706e:    40 e0 12 01       	r0 = 0x112 <var_bss_size+0x6 : 112 >			  ## decode_frame.c:103:16
    7072:    d8 ec 4b f0       	[r4+r0<<2] = r15			  ## decode_frame.c:103:40
    7076:    31 f1 fc 5f       	r1 = r5 + -0x4  #			  ## decode_frame.c:110:22
    707a:    70 64             		 r0 = [r7+0x10] 			  ## decode_frame.c:110:48
    707c:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## decode_frame.c:110:22
    7080:    f0 60             	[r7+0x0] = r0			  ## decode_frame.c:110:20
    7082:    d0 ec 81 d0       	[r8+0x0] = r13			  ## decode_frame.c:113:9
    7086:    40 20             	r0 = 0x0			  ## decode_frame.c:116:5
    7088:    d0 ec b1 c1       	[r11+0x10] = r12			  ## decode_frame.c:115:5
    708c:    f0 e8 a4 02       	sp += 0x2a4			  ## decode_frame.c:115:5
    7090:    5f 04             	{pc, r15-r4} = [sp++]			  ## decode_frame.c:116:5


get_wtgv2dec_ops:
    7092:    c0 ff ac 76 00 00 	r0 = 0x76ac <wtg2dec_context : 76ac >			  ## silk_decmaintest.c:340:0
    7098:    80 00             	rts			  ## silk_decmaintest.c:341:2


wtgv2_silk_InitDecoder:
    709a:    7a 04             	[--sp] = {rets, r10-r4}			  ## dec_API.c:44:0
    709c:    04 16             	r4 = r0			  ## dec_API.c:44:0
    709e:    45 20             	r5 = 0x0			  ## dec_API.c:44:0
    70a0:    48 e0 12 01       	r8 = 0x112 <var_bss_size+0x6 : 112 >			  ## dec_API.c:44:0
    70a4:    49 e0 01 00       	r9 = 0x1 <mem_code_size : 0 >			  ## dec_API.c:44:0
    70a8:    4a e0 2a 01       	r10 = 0x12a <var_bss_size+0x1E : 12a >			  ## dec_API.c:44:0
    70ac:    47 24             	r7 = 0x4			  ## dec_API.c:44:0
    70ae:    04 90             	goto 0x20 <wtgv2_silk_InitDecoder+0x36 : 70d0 >			  ## dec_API.c:44:0
    70b0:    4e 1d             	r6 = r4 + r5			  ## init_decoder.c:43:5
    70b2:    68 84             	r0 = r6 + 0x4			  ## init_decoder.c:43:5
    70b4:    41 20             	r1 = 0x0			  ## init_decoder.c:43:5
    70b6:    42 e0 1c 0c       	r2 = 0xc1c <usb_code_size+0x158 : c1c >			  ## init_decoder.c:43:5
    70ba:    80 ff 66 d1 ff ff 	call -0x2e9a <memset : 4226 >			  ## init_decoder.c:43:5
    70c0:    d8 ec 6b 98       	[r6+r8<<2] = r9			  ## init_decoder.c:46:36
    70c4:    40 ea 80 6b       	[r6+0x0] = 0x10000			  ## init_decoder.c:47:26
    70c8:    d8 ec 6b 7a       	[r6+r10<<2] = r7			  ## init_decoder.c:48:17
    70cc:    05 e1 20 5c       	r5 = r5 + 0xc20			  ## dec_API.c:48:5
    70d0:    21 ff 42 5e ed ff 	if (r5 != 0xc20) goto -0x26 <wtgv2_silk_InitDecoder+0x16 : 70b0 >
    70d6:    5a 04             	{pc, r10-r4} = [sp++]


wtgv2ec_dec_init:
    70d8:    75 04             	[--sp] = {rets, r5, r4}			  ## entdec.c:33:0
    70da:    04 16             	r4 = r0			  ## entdec.c:33:0
    70dc:    24 eb 06 00       	[r4+] = {r2, r1}			  ## entdec.c:34:16
    70e0:    45 20             	r5 = 0x0			  ## entdec.c:34:16
    70e2:    c5 62             	[r4+0x8] = r5			  ## entdec.c:36:21
    70e4:    c5 63             	[r4+0xc] = r5			  ## entdec.c:37:23
    70e6:    c5 64             	[r4+0x10] = r5			  ## entdec.c:38:22
    70e8:    45 ea 09 40       	[r4+0x14] = 0x9			  ## entdec.c:42:24
    70ec:    c5 66             	[r4+0x18] = r5			  ## entdec.c:44:17
    70ee:    47 ea 80 40       	[r4+0x1c] = 0x80			  ## entdec.c:45:16
    70f2:    bf ea 84 f6       	call -0x12f8 <ec_read_byte : 5dfe >			  ## entdec.c:46:18
    70f6:    c0 6a             	[r4+0x28] = r0			  ## entdec.c:46:16
    70f8:    88 a1             	r0 = r0 >>> 0x1			  ## entdec.c:47:47
    70fa:    88 d9             	r0 = ~r0  #			  ## entdec.c:47:29
    70fc:    41 67             		 r1 = [r4+0x1c] 			  ## entdec.c:47:25
    70fe:    10 18             	r0 += r1			  ## entdec.c:47:33
    7100:    40 d6             	r0 = r4  #			  ## entdec.c:50:5
    7102:    c0 68             		 [r4+0x20] = r0			  ## entdec.c:47:16
    7104:    c5 6b             	[r4+0x2c] = r5			  ## entdec.c:48:18
    7106:    bf ea 87 f6       	call -0x12f2 <wtgv2ec_dec_normalize : 5e18 >			  ## entdec.c:50:5
    710a:    55 04             	{pc, r5, r4} = [sp++]			  ## entdec.c:51:1


wtgv2_silk_decoder_set_fs:
    710c:    7a 04             	[--sp] = {rets, r10-r4}			  ## decoder_set_fs.c:62:0
    710e:    2a 16             	r10 = r2			  ## decoder_set_fs.c:62:0
    7110:    b7 e1 41 20       	r7 = sextra(r2, p:0x0, l:0x10)			  ## decoder_set_fs.c:69:27
    7114:    e2 e1 05 70       	r2 = r7 * 0x5			  ## decoder_set_fs.c:69:27
    7118:    05 e1 04 04       	r5 = r0 + 0x404			  ## decoder_set_fs.c:69:27
    711c:    d2 66             	[r5+0x18] = r2			  ## decoder_set_fs.c:69:25
    711e:    52 64             	r2 = [r5+0x10] 			  ## decoder_set_fs.c:70:20
    7120:    ae d7             	r6 = r2.l (s)  #			  ## decoder_set_fs.c:70:20
    7122:    d3 63             		 [r5+0xc] = r3			  ## decoder_set_fs.c:74:22
    7124:    e4 f1 a0 7a       	r4 = r7 * 0x50000  #			  ## decoder_set_fs.c:70:20
    7128:    53 62             		 r3 = [r5+0x8] 			  ## decoder_set_fs.c:77:16
    712a:    cc b0             	r4 = r4 >>> 0x10			  ## decoder_set_fs.c:70:20
    712c:    f0 e1 60 84       	r8 = r6 * r4			  ## decoder_set_fs.c:70:20
    7130:    8a e8 03 30       	if (r3 != r10) goto 0x6 <wtgv2_silk_decoder_set_fs+0x2E : 713a >
    7134:    54 65             	r4 = [r5+0x14] 			  ## decoder_set_fs.c:77:59
    7136:    04 e8 58 80       	if (r8 == r4) goto 0xb0 <wtgv2_silk_decoder_set_fs+0xDE : 71ea >			  ## decoder_set_fs.c:77:59
    713a:    d0 ec 10 93       	r9 = [r1+0x30]
    713e:    8a f8 07 10       	if (r10 != 0x8) goto 0xe <wtgv2_silk_decoder_set_fs+0x44 : 7150 >			  ## decoder_set_fs.c:78:13
    7142:    b2 e8 04 10       	if (r2 != 0x4) {
    7146:    06 e1 6c 90       		r6 = r9 + 0x6c
                               	} else {			  ## decoder_set_fs.c:82:45
    714a:    06 e1 61 90       		r6 = r9 + 0x61
                               	}			  ## decoder_set_fs.c:80:45
    714e:    04 86             	goto 0xc <wtgv2_silk_decoder_set_fs+0x50 : 715c >			  ## decoder_set_fs.c:80:45
    7150:    b2 e8 04 10       	if (r2 != 0x4) {
    7154:    06 e1 91 90       		r6 = r9 + 0x91
                               	} else {			  ## decoder_set_fs.c:88:45
    7158:    06 e1 6f 90       		r6 = r9 + 0x6f
                               	}			  ## decoder_set_fs.c:86:45
    715c:    02 e1 48 04       	r2 = r0 + 0x448
    7160:    a6 62             	[r2+0x8] = r6
    7162:    0a e8 3e 30       	if (r3 == r10) goto 0x7c <wtgv2_silk_decoder_set_fs+0xD6 : 71e2 >
    7166:    e3 e1 14 70       	r3 = r7 * 0x14			  ## decoder_set_fs.c:92:37
    716a:    44 f1 04 a0       	r4 = r10 | 0x4  #			  ## decoder_set_fs.c:93:29
    716e:    d3 67             		 [r5+0x1c] = r3			  ## decoder_set_fs.c:92:35
    7170:    03 e1 34 91       	r3 = r9 + 0x134			  ## decoder_set_fs.c:92:35
    7174:    84 f8 08 18       	if (r4 != 0xc) goto 0x10 <wtgv2_silk_decoder_set_fs+0x7C : 7188 >			  ## decoder_set_fs.c:93:29
    7178:    48 ea 0a 50       	[r5+0x20] = 0xA			  ## decoder_set_fs.c:94:34
    717c:    06 e1 40 30       	r6 = r3 + 0x40			  ## decoder_set_fs.c:99:38
    7180:    c7 ff 90 85 01 00 	r7 = 0x18590 <wtgv2_silk_NLSF_CB_NB_MB : 18590 >			  ## decoder_set_fs.c:99:38
    7186:    04 89             	goto 0x12 <wtgv2_silk_decoder_set_fs+0x8E : 719a >			  ## decoder_set_fs.c:99:38
    7188:    48 ea 10 50       	[r5+0x20] = 0x10			  ## decoder_set_fs.c:102:34
    718c:    06 e1 c8 30       	r6 = r3 + 0xc8			  ## decoder_set_fs.c:107:38
    7190:    03 e1 88 30       	r3 = r3 + 0x88			  ## decoder_set_fs.c:106:39
    7194:    c7 ff 18 78 00 00 	r7 = 0x7818 <wtgv2_NLSF_CB_WB : 7818 >			  ## decoder_set_fs.c:106:39
    719a:    a7 6a             	[r2+0x28] = r7			  ## decoder_set_fs.c:105:38
    719c:    a3 6b             	[r2+0x2c] = r3			  ## decoder_set_fs.c:106:37
    719e:    a6 6c             	[r2+0x30] = r6			  ## decoder_set_fs.c:106:37
    71a0:    0a f8 05 18       	if (r10 == 0xc) goto 0xa <wtgv2_silk_decoder_set_fs+0xA2 : 71ae >			  ## decoder_set_fs.c:111:17
    71a4:    8a f8 06 20       	if (r10 != 0x10) goto 0xc <wtgv2_silk_decoder_set_fs+0xA8 : 71b4 >
    71a8:    11 6c             	r1 = [r1+0x30] 			  ## decoder_set_fs.c:112:62
    71aa:    c1 2a             	r1 += 0xa			  ## decoder_set_fs.c:112:50
    71ac:    04 86             	goto 0xc <wtgv2_silk_decoder_set_fs+0xAE : 71ba >			  ## decoder_set_fs.c:112:50
    71ae:    11 6c             	r1 = [r1+0x30] 			  ## decoder_set_fs.c:114:62
    71b0:    c1 24             	r1 += 0x4			  ## decoder_set_fs.c:114:50
    71b2:    04 83             	goto 0x6 <wtgv2_silk_decoder_set_fs+0xAE : 71ba >			  ## decoder_set_fs.c:114:50
    71b4:    8a f8 02 10       	if (r10 != 0x8) goto 0x4 <wtgv2_silk_decoder_set_fs+0xB0 : 71bc >
    71b8:    11 6c             	r1 = [r1+0x30] 			  ## decoder_set_fs.c:116:62
    71ba:    a1 61             	[r2+0x4] = r1
    71bc:    40 ea 01 20       	[r2+0x0] = 0x1			  ## decoder_set_fs.c:121:44
    71c0:    40 ea 64 50       	[r5+0x0] = 0x64			  ## decoder_set_fs.c:122:44
    71c4:    41 2a             	r1 = 0xa			  ## decoder_set_fs.c:123:44
    71c6:    41 f0 29 01       	r1 = 0x129  # <var_bss_size+0x1C : 128 >			  ## decoder_set_fs.c:124:20
    71ca:    d9 44             		 b[r5+0x4] = r1			  ## decoder_set_fs.c:123:44
    71cc:    42 20             	r2 = 0x0			  ## decoder_set_fs.c:123:44
    71ce:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## decoder_set_fs.c:124:44
    71d2:    00 e1 44 01       	r0 = r0 + 0x144			  ## decoder_set_fs.c:126:13
    71d6:    41 20             	r1 = 0x0			  ## decoder_set_fs.c:125:13
    71d8:    42 e0 c0 02       	r2 = 0x2c0 <ROM_RAM_SIZE+0xC0 : 2c0 >			  ## decoder_set_fs.c:125:13
    71dc:    80 ff 44 d0 ff ff 	call -0x2fbc <memset : 4226 >			  ## decoder_set_fs.c:125:13
    71e2:    d0 ec 59 a0       	[r5+0x8] = r10			  ## decoder_set_fs.c:129:29
    71e6:    d0 ec 55 81       	[r5+0x14] = r8			  ## decoder_set_fs.c:130:29
    71ea:    40 20             	r0 = 0x0			  ## decoder_set_fs.c:136:5
    71ec:    5a 04             	{pc, r10-r4} = [sp++]			  ## decoder_set_fs.c:136:5


wtgv2_silk_Decode:
    71ee:    7f 04             	[--sp] = {rets, r15-r4}			  ## dec_API.c:67:0
    71f0:    e2 98             	sp += -0x20			  ## dec_API.c:67:0
    71f2:    19 16             	r9 = r1			  ## dec_API.c:67:0
    71f4:    0c 16             	r12 = r0			  ## dec_API.c:67:0
    71f6:    04 e1 04 04       	r4 = r0 + 0x404			  ## dec_API.c:67:0
    71fa:    03 4c             	if (r3 == 0) goto 0x18 <wtgv2_silk_Decode+0x26 : 7214 >			  ## dec_API.c:67:0
    71fc:    00 e1 50 40       	r0 = r4 + 0x50			  ## dec_API.c:68:19
    7200:    41 20             	r1 = 0x0			  ## dec_API.c:68:19
    7202:    43 20             	r3 = 0x0			  ## dec_API.c:68:19
    7204:    04 84             	goto 0x8 <wtgv2_silk_Decode+0x20 : 720e >
    7206:    d8 ec 03 13       	[r0+r3] = r1			  ## dec_API.c:88:47
    720a:    03 e1 20 3c       	r3 = r3 + 0xc20			  ## dec_API.c:87:9
    720e:    21 ff 42 3e f9 ff 	if (r3 != 0xc20) goto -0xe <wtgv2_silk_Decode+0x18 : 7206 >
    7214:    d0 ec 40 05       	r0 = [r4+0x50]			  ## dec_API.c:92:28
    7218:    0b f1 08 90       	r11 = r9 + 0x8  #			  ## dec_API.c:92:28
    721c:    07 35             		 r7 = [sp+84]			  ## dec_API.c:92:28
    721e:    84 26             	[sp+24] = r4			  ## dec_API.c:92:9
    7220:    82 25             	[sp+20] = r2			  ## dec_API.c:92:9
    7222:    30 59             	if (r0 == 0) goto 0xf2 <wtgv2_silk_Decode+0x128 : 7316 >			  ## dec_API.c:92:9
    7224:    d0 ec 90 00       	r0 = [r9+0x0]			  ## dec_API.c:123:44
    7228:    41 e0 08 03       	r1 = 0x308 <ROM_RAM_SIZE+0x108 : 308 >			  ## dec_API.c:123:12
    722c:    d8 ec cb 01       	[r12+r1<<2] = r0			  ## dec_API.c:123:30
    7230:    d0 ec 94 00       	r0 = [r9+0x4]			  ## dec_API.c:124:44
    7234:    c1 21             	r1 += 0x1			  ## dec_API.c:124:12
    7236:    d8 ec cb 01       	[r12+r1<<2] = r0			  ## dec_API.c:124:30
    723a:    d0 ec b0 00       	r0 = [r11+0x0]			  ## dec_API.c:126:21
    723e:    20 e1 c0 00       	r0 = r0 + -0x1f40			  ## dec_API.c:126:72
    7242:    44 e0 38 ff       	r4 = -0xc8 <RAM_LIMIT_H+0xFFFFFFFFFFE5FF38 : ffffffffffffff38 >			  ## dec_API.c:126:72
    7246:    28 ff fa 0d 9f 00 	if (r0 > 0x1f40) goto 0x13e <wtgv2_silk_Decode+0x19C : 738a >			  ## dec_API.c:126:72
    724c:    4e f0 1a 01       	r14 = 0x11a  # <var_bss_size+0xE : 11a >
    7250:    00 37             		 r0 = [sp+92]
    7252:    80 24             	[sp+16] = r0
    7254:    00 36             	r0 = [sp+88]
    7256:    80 23             	[sp+12] = r0			  ## dec_API.c:68:19
    7258:    00 26             	r0 = [sp+24]			  ## dec_API.c:68:19
    725a:    0b e1 60 00       	r11 = r0 + 0x60			  ## dec_API.c:68:19
    725e:    45 20             	r5 = 0x0			  ## dec_API.c:68:19
    7260:    14 87             	goto 0x4e <wtgv2_silk_Decode+0xC2 : 72b0 >			  ## dec_API.c:68:19
    7262:    e0 e1 42 5e       	r0 = r5 * 0xC20
    7266:    b4 e0 c0 60       	r6 = r12 + r0
    726a:    04 e1 58 64       	r4 = r6 + 0x458
    726e:    c0 14             	r8 = 0
    7270:    bf 16             	r15 = r11
    7272:    04 84             	goto 0x8 <wtgv2_silk_Decode+0x8E : 727c >
    7274:    d8 ec f5 d0       	[r15++=0x4] = r13			  ## dec_API.c:136:51
    7278:    08 e1 01 80       	r8 = r8 + 0x1			  ## dec_API.c:135:67
    727c:    4d f0 01 00       	r13 = 0x1  # <mem_code_size : 0 >
    7280:    71 67             		 r1 = [r7+0x1c] 			  ## entdec.c:61:16
    7282:    72 68             	r2 = [r7+0x20] 			  ## entdec.c:62:16
    7284:    90 a1             	r0 = r1 >> 0x1			  ## entdec.c:63:11
    7286:    12 e9 00 00       	if (r2 >= r0) {
    728a:    c5 14             		r13 = 0
                               	}			  ## entdec.c:64:13
    728c:    d0 ec 40 a0       	r10 = [r4+0x0]			  ## dec_API.c:135:48
    7290:    12 e9 00 80       	if (r2 >= r0) {			  ## dec_API.c:135:48
    7294:    22 1e             		r2 = r2 - r0			  ## entdec.c:65:29
    7296:    f2 68             		[r7+0x20] = r2			  ## entdec.c:65:25
    7298:    10 1e             		r0 = r1 - r0
                               	}			  ## entdec.c:66:30
    729a:    70 d6             	r0 = r7  #			  ## entdec.c:67:5
    729c:    f0 67             		 [r7+0x1c] = r0			  ## entdec.c:66:16
    729e:    bf ea bb f5       	call -0x148a <wtgv2ec_dec_normalize : 5e18 >			  ## entdec.c:67:5
    72a2:    8a ed e7 81       	ifs (r8 < r10) goto -0x32 <wtgv2_silk_Decode+0x86 : 7274 >
    72a6:    d8 ec 6b de       	[r6+r14<<2] = r13			  ## dec_API.c:138:42
    72aa:    0b e1 20 bc       	r11 = r11 + 0xc20			  ## dec_API.c:134:9
    72ae:    c5 21             	r5 += 0x1			  ## dec_API.c:134:29
    72b0:    85 f8 d7 03       	if (r5 != 0x1) goto -0x52 <wtgv2_silk_Decode+0x74 : 7262 >			  ## dec_API.c:134:9
    72b4:    05 26             	r5 = [sp+24]
    72b6:    00 e1 68 50       	r0 = r5 + 0x68			  ## dec_API.c:68:19
    72ba:    41 20             	r1 = 0x0			  ## dec_API.c:68:19
    72bc:    42 20             	r2 = 0x0			  ## dec_API.c:68:19
    72be:    04 84             	goto 0x8 <wtgv2_silk_Decode+0xDA : 72c8 >
    72c0:    d8 ec 03 12       	[r0+r2] = r1			  ## dec_API.c:142:13
    72c4:    02 e1 20 2c       	r2 = r2 + 0xc20			  ## dec_API.c:141:9
    72c8:    21 ff 42 2e f9 ff 	if (r2 != 0xc20) goto -0xe <wtgv2_silk_Decode+0xD2 : 72c0 >
    72ce:    44 20             	r4 = 0x0
    72d0:    71 d6             	r1 = r7  #			  ## dec_API.c:150:12
    72d2:    84 21             		 [sp+4] = r4			  ## dec_API.c:150:12
    72d4:    8b 9c             	r3 = sp + 28			  ## dec_API.c:150:12
    72d6:    00 25             	r0 = [sp+20]			  ## dec_API.c:150:12
    72d8:    c0 d6             	r0 = r12  #			  ## dec_API.c:150:12
    72da:    80 20             		 [sp] = r0			  ## dec_API.c:150:12
    72dc:    02 23             	r2 = [sp+12]			  ## dec_API.c:150:12
    72de:    bf ea 81 fe       	call -0x2fe <wtgv2_silk_decode_frame : 6fe4 >			  ## dec_API.c:150:12
    72e2:    d4 eb 01 50       	[r5+0x50] += 0x1			  ## dec_API.c:152:38
    72e6:    00 27             	r0 = [sp+28]			  ## dec_API.c:157:20
    72e8:    01 24             	r1 = [sp+16]			  ## dec_API.c:157:18
    72ea:    40 f0 29 01       	r0 = 0x129  # <var_bss_size+0x1C : 128 >			  ## dec_API.c:160:28
    72ee:    90 60             		 [r1+0x0] = r0			  ## dec_API.c:157:18
    72f0:    d8 ec ca 10       	r1 = [r12+r0<<2]			  ## dec_API.c:160:28
    72f4:    40 20             	r0 = 0x0			  ## dec_API.c:160:28
    72f6:    81 f8 0b 04       	if (r1 != 0x2) goto 0x16 <wtgv2_silk_Decode+0x122 : 7310 >			  ## dec_API.c:160:28
    72fa:    50 62             	r0 = [r5+0x8] 			  ## dec_API.c:162:96
    72fc:    f8 38             	r0 += -0x8			  ## dec_API.c:162:103
    72fe:    70 f1 03 00       	r0 = r0 & 0xFFFFFFFC  #			  ## dec_API.c:162:109
    7302:    51 60             		 r1 = [r5+0x0] 			  ## dec_API.c:162:55
    7304:    c2 ff 80 84 01 00 	r2 = 0x18480 <nvram_boot_tag+0x8 : 18480 >			  ## dec_API.c:162:65
    730a:    d8 ec 02 02       	r0 = [r0+r2]			  ## dec_API.c:162:65
    730e:    10 1b             	r0 *= r1			  ## dec_API.c:162:63
    7310:    d0 ec 95 01       	[r9+0x14] = r0
    7314:    14 9a             	goto 0x74 <wtgv2_silk_Decode+0x19C : 738a >
    7316:    45 20             	r5 = 0x0
    7318:    4d e0 16 01       	r13 = 0x116 <var_bss_size+0xA : 116 >
    731c:    4e e0 05 01       	r14 = 0x105 <os_code_size+0x5A : 104 >
    7320:    cf ff 80 88 00 00 	r15 = 0x8880 <f2_function+0x60 : 8880 >
    7326:    c6 16             	r6 = r12
    7328:    14 8b             	goto 0x56 <wtgv2_silk_Decode+0x192 : 7380 >
    732a:    d0 ec 90 21       	r2 = [r9+0x10]			  ## dec_API.c:95:29
    732e:    41 22             	r1 = 0x2
    7330:    40 21             	r0 = 0x1
    7332:    02 4f             	if (r2 == 0) goto 0x1e <wtgv2_silk_Decode+0x164 : 7352 >
    7334:    02 f8 0d 14       	if (r2 == 0xa) goto 0x1a <wtgv2_silk_Decode+0x164 : 7352 >
    7338:    02 f8 06 78       	if (r2 == 0x3c) goto 0xc <wtgv2_silk_Decode+0x15A : 7348 >
    733c:    02 f8 07 50       	if (r2 == 0x28) goto 0xe <wtgv2_silk_Decode+0x160 : 734e >
    7340:    82 f8 21 28       	if (r2 != 0x14) goto 0x42 <wtgv2_silk_Decode+0x198 : 7386 >
    7344:    41 24             	r1 = 0x4
    7346:    04 85             	goto 0xa <wtgv2_silk_Decode+0x164 : 7352 >
    7348:    41 24             	r1 = 0x4
    734a:    40 23             	r0 = 0x3
    734c:    04 82             	goto 0x4 <wtgv2_silk_Decode+0x164 : 7352 >
    734e:    41 24             	r1 = 0x4
    7350:    40 22             	r0 = 0x2
    7352:    d8 ec 6b 0d       	[r6+r13<<2] = r0
    7356:    d8 ec 6b 1e       	[r6+r14<<2] = r1
    735a:    d0 ec 9c 00       	r0 = [r9+0xc]			  ## dec_API.c:114:40
    735e:    88 aa             	r0 = r0 >>> 0xa			  ## dec_API.c:114:59
    7360:    44 e0 38 ff       	r4 = -0xc8 <RAM_LIMIT_H+0xFFFFFFFFFFE5FF38 : ffffffffffffff38 >			  ## dec_API.c:114:59
    7364:    00 fc 11 1e       	if (r0 > 0xf) goto 0x22 <wtgv2_silk_Decode+0x19C : 738a >			  ## dec_API.c:114:59
    7368:    94 e1 f2 10       	r1 = r15 & (1 << r0)
    736c:    01 4e             	if (r1 == 0) goto 0x1c <wtgv2_silk_Decode+0x19C : 738a >
    736e:    d0 ec 98 30       	r3 = [r9+0x8]			  ## dec_API.c:118:104
    7372:    0a 81             	r2 = r0 + 0x1			  ## dec_API.c:114:67
    7374:    60 15             	r1_r0 = r7_r6			  ## dec_API.c:118:20
    7376:    bf ea c9 fe       	call -0x26e <wtgv2_silk_decoder_set_fs : 710c >			  ## dec_API.c:118:20
    737a:    06 e1 20 6c       	r6 = r6 + 0xc20			  ## dec_API.c:93:9
    737e:    c5 21             	r5 += 0x1			  ## dec_API.c:93:29
    7380:    85 fe d3 01       	ifs (r5 <= 0x0) goto -0x5a <wtgv2_silk_Decode+0x13C : 732a >
    7384:    a7 8f             	goto -0x162 <wtgv2_silk_Decode+0x36 : 7224 >
    7386:    44 e0 35 ff       	r4 = -0xcb <RAM_LIMIT_H+0xFFFFFFFFFFE5FF34 : ffffffffffffff34 >
    738a:    40 16             	r0 = r4			  ## dec_API.c:169:1
    738c:    02 88             	sp += 0x20			  ## dec_API.c:169:1
    738e:    5f 04             	{pc, r15-r4} = [sp++]			  ## dec_API.c:169:1


wtgv2_dec_run:
    7390:    7b 04             	[--sp] = {rets, r11-r4}			  ## silk_decmaintest.c:203:0
    7392:    e2 9b             	sp += -0x14			  ## silk_decmaintest.c:203:0
    7394:    45 20             	r5 = 0x0			  ## silk_decmaintest.c:203:0
    7396:    04 d6             	r4 = r0  #			  ## silk_decmaintest.c:203:0
    7398:    85 24             		 [sp+16] = r5			  ## silk_decmaintest.c:204:6
    739a:    17 e1 14 40       	r7 = r4 + 0x1014
    739e:    08 f1 80 4c       	r8 = r4 + 0xc80  #
    73a2:    7a 64             		 r2 = h[r7+0x8] (u)			  ## silk_decmaintest.c:210:15
    73a4:    02 51             	if (r2 == 0) goto 0x22 <wtgv2_dec_run+0x38 : 73c8 >			  ## silk_decmaintest.c:210:15
    73a6:    79 65             	r1 = h[r7+0xa] (u)			  ## silk_decmaintest.c:213:73
    73a8:    73 61             	r3 = [r7+0x4] 			  ## silk_decmaintest.c:212:57
    73aa:    d0 ec 80 01       	r0 = [r8+0x10]			  ## silk_decmaintest.c:213:66
    73ae:    d0 ec 8c 61       	r6 = [r8+0x1c]			  ## silk_decmaintest.c:213:39
    73b2:    31 18             	r1 += r3			  ## silk_decmaintest.c:213:73
    73b4:    c6 00             	call r6			  ## silk_decmaintest.c:213:19
    73b6:    79 65             	r1 = h[r7+0xa] (u)			  ## silk_decmaintest.c:214:21
    73b8:    01 18             	r1 += r0			  ## silk_decmaintest.c:214:21
    73ba:    f9 65             	h[r7+0xa] = r1			  ## silk_decmaintest.c:214:21
    73bc:    79 64             	r1 = h[r7+0x8] (u)			  ## silk_decmaintest.c:215:26
    73be:    10 1e             	r0 = r1 - r0			  ## silk_decmaintest.c:215:26
    73c0:    81 d7             	r1 = r0.l (u)  #
    73c2:    f8 64             		 h[r7+0x8] = r0			  ## silk_decmaintest.c:215:26
    73c4:    81 f8 a9 00       	if (r1 != 0x0) goto 0x152 <wtgv2_dec_run+0x18A : 751a >			  ## silk_decmaintest.c:215:26
    73c8:    06 e1 84 4d       	r6 = r4 + 0xd84
    73cc:    68 41             	r0 = b[r6+0x1] (u)			  ## silk_decmaintest.c:222:15
    73ce:    80 46             	if (r0 != 0) goto 0xc <wtgv2_dec_run+0x4C : 73dc >			  ## silk_decmaintest.c:222:15
    73d0:    40 21             	r0 = 0x1			  ## silk_decmaintest.c:224:24
    73d2:    40 d6             	r0 = r4  #			  ## silk_decmaintest.c:225:3
    73d4:    e8 41             		 b[r6+0x1] = r0			  ## silk_decmaintest.c:224:24
    73d6:    80 ff e2 01 00 00 	call 0x1e2 <wtgv2_type_check : 75be >			  ## silk_decmaintest.c:225:3
    73dc:    0b e1 28 4c       	r11 = r4 + 0xc28
    73e0:    55 ed ba 26       	r2 = h[r11+0x16a] (s)			  ## silk_decmaintest.c:228:15
    73e4:    c2 14             	r10 = 0			  ## silk_decmaintest.c:228:15
    73e6:    02 fe 25 9e       	ifs (r2 > 0x4f) goto 0x4a <wtgv2_dec_run+0xA4 : 7434 >			  ## silk_decmaintest.c:228:15
    73ea:    09 e1 80 b0       	r9 = r11 + 0x80
    73ee:    43 20             	r3 = 0x0
    73f0:    02 4c             	if (r2 == 0) goto 0x18 <wtgv2_dec_run+0x7A : 740a >
    73f2:    55 ed b8 06       	r0 = h[r11+0x168] (s)			  ## silk_decmaintest.c:232:32
    73f6:    b4 e0 90 10       	r1 = r9 + r0			  ## silk_decmaintest.c:232:32
    73fa:    90 16             	r0 = r9			  ## silk_decmaintest.c:232:4
    73fc:    80 ff 3a cd ff ff 	call -0x32c6 <memmove : 413c >			  ## silk_decmaintest.c:232:4
    7402:    40 20             	r0 = 0x0			  ## silk_decmaintest.c:233:25
    7404:    e8 66             	h[r6+0xc] = r0			  ## silk_decmaintest.c:233:25
    7406:    55 ed ba 36       	r3 = h[r11+0x16a] (s)			  ## silk_decmaintest.c:234:3
    740a:    d0 ec 80 01       	r0 = [r8+0x10]			  ## silk_decmaintest.c:236:53
    740e:    d0 ec 84 51       	r5 = [r8+0x14]			  ## silk_decmaintest.c:236:27
    7412:    b4 f0 90 23       	r2 = r9 + r3  #			  ## silk_decmaintest.c:236:77
    7416:    61 61             		 r1 = [r6+0x4] 			  ## silk_decmaintest.c:236:68
    7418:    53 30             	r3 = 0x50			  ## silk_decmaintest.c:236:7
    741a:    d4 e9 01 a0       	[sp] = r10			  ## silk_decmaintest.c:236:7
    741e:    c5 00             	call r5			  ## silk_decmaintest.c:236:7
    7420:    69 67             	r1 = h[r6+0xe] (u)			  ## silk_decmaintest.c:236:7
    7422:    00 fe 03 00       	ifs (r0 > 0x0) goto 0x6 <wtgv2_dec_run+0x9C : 742c >
    7426:    4a e0 01 00       	r10 = 0x1 <mem_code_size : 0 >
    742a:    31 5a             	if (r1 == 0) goto 0xf4 <wtgv2_dec_run+0x190 : 7520 >
    742c:    68 e8 04 60       	[r6+0x4] += r0			  ## silk_decmaintest.c:246:19
    7430:    12 1c             	r2 = r1 + r0			  ## silk_decmaintest.c:247:30
    7432:    ea 67             	h[r6+0xe] = r2			  ## silk_decmaintest.c:247:30
    7434:    55 ed b8 06       	r0 = h[r11+0x168] (s)			  ## silk_decmaintest.c:251:13
    7438:    41 1c             	r1 = r4 + r0			  ## silk_decmaintest.c:251:22
    743a:    43 e0 a8 0c       	r3 = 0xca8 <usb_code_size+0x1E4 : ca8 >			  ## silk_decmaintest.c:251:22
    743e:    d8 ee 10 53       	r5 = b[r1+r3] (u)			  ## silk_decmaintest.c:251:13
    7442:    59 81             	r1 = r5 + 0x1			  ## silk_decmaintest.c:253:45
    7444:    ab 17             	r3 = r2.l (s)			  ## silk_decmaintest.c:253:6
    7446:    81 ee 21 30       	ifs (r3 <= r1) goto 0x42 <wtgv2_dec_run+0xFC : 748c >			  ## silk_decmaintest.c:253:6
    744a:    c0 21             	r0 += 0x1			  ## silk_decmaintest.c:255:23
    744c:    31 f1 ff 2f       	r1 = r2 + -0x1  #			  ## silk_decmaintest.c:256:29
    7450:    e8 66             		 h[r6+0xc] = r0			  ## silk_decmaintest.c:255:23
    7452:    88 d7             	r0 = r0.l (s)  #			  ## silk_decmaintest.c:257:43
    7454:    e9 67             		 h[r6+0xe] = r1			  ## silk_decmaintest.c:256:29
    7456:    40 18             	r0 += r4			  ## silk_decmaintest.c:251:22
    7458:    01 e1 a8 0c       	r1 = r0 + 0xca8			  ## silk_decmaintest.c:257:43
    745c:    09 e1 18 b0       	r9 = r11 + 0x18			  ## silk_decmaintest.c:257:30
    7460:    52 30             	r2 = 0x50			  ## silk_decmaintest.c:257:3
    7462:    90 16             	r0 = r9			  ## silk_decmaintest.c:257:3
    7464:    bf ea 38 fe       	call -0x390 <wtgv2ec_dec_init : 70d8 >			  ## silk_decmaintest.c:257:3
    7468:    00 e1 ac 44       	r0 = r4 + 0x4ac			  ## silk_decmaintest.c:257:3
    746c:    05 5a             	if (r5 == 0) goto 0x34 <wtgv2_dec_run+0x112 : 74a2 >			  ## silk_decmaintest.c:257:3
    746e:    40 ea 00 00       	[r0+0x0] = 0x0			  ## silk_decmaintest.c:266:50
    7472:    55 ed b8 a6       	r10 = h[r11+0x168] (s)			  ## silk_decmaintest.c:267:35
    7476:    b4 e0 40 0a       	r0 = r4 + r10			  ## silk_decmaintest.c:251:22
    747a:    01 e1 a8 0c       	r1 = r0 + 0xca8			  ## silk_decmaintest.c:267:35
    747e:    00 e1 c8 80       	r0 = r8 + 0xc8			  ## silk_decmaintest.c:267:20
    7482:    4a 3c             	r2 = 0x3c			  ## silk_decmaintest.c:267:4
    7484:    80 ff b2 cc ff ff 	call -0x334e <memmove : 413c >			  ## silk_decmaintest.c:267:4
    748a:    04 95             	goto 0x2a <wtgv2_dec_run+0x126 : 74b6 >			  ## silk_decmaintest.c:267:4
    748c:    60 62             	r0 = [r6+0x8] 			  ## silk_decmaintest.c:307:33
    748e:    61 61             	r1 = [r6+0x4] 			  ## silk_decmaintest.c:307:16
    7490:    55 20             	r5 = 0x40			  ## silk_decmaintest.c:307:16
    7492:    00 ed 42 10       	ifs (r1 >= r0) goto 0x84 <wtgv2_dec_run+0x18A : 751a >
    7496:    ba e8 00 00       	if (r10 != 0x0) {
    749a:    4a e0 48 00       		r10 = 0x48
                               	} <os_bss_size+0xC : 48 >			  ## silk_decmaintest.c:317:2
    749e:    a5 16             	r5 = r10
    74a0:    14 9c             	goto 0x78 <wtgv2_dec_run+0x18A : 751a >
    74a2:    40 ea 01 00       	[r0+0x0] = 0x1			  ## silk_decmaintest.c:261:50
    74a6:    01 e1 c8 80       	r1 = r8 + 0xc8			  ## silk_decmaintest.c:262:52
    74aa:    4a 3c             	r2 = 0x3c			  ## silk_decmaintest.c:262:4
    74ac:    90 16             	r0 = r9			  ## silk_decmaintest.c:262:4
    74ae:    bf ea 13 fe       	call -0x3da <wtgv2ec_dec_init : 70d8 >			  ## silk_decmaintest.c:262:4
    74b2:    50 ed 6c a0       	r10 = h[r6+0xc] (u)			  ## silk_decmaintest.c:262:4
    74b6:    b1 d6             	r1 = r11  #			  ## silk_decmaintest.c:273:13
    74b8:    68 67             		 r0 = h[r6+0xe] (u)			  ## silk_decmaintest.c:270:30
    74ba:    08 1f             	r0 = r0 - r5			  ## silk_decmaintest.c:270:30
    74bc:    b4 f0 a0 05       	r0 = r10 + r5  #			  ## silk_decmaintest.c:271:24
    74c0:    e8 67             		 h[r6+0xe] = r0			  ## silk_decmaintest.c:270:30
    74c2:    e8 66             	h[r6+0xc] = r0			  ## silk_decmaintest.c:271:24
    74c4:    88 90             	r0 = sp + 16			  ## silk_decmaintest.c:271:24
    74c6:    80 22             	[sp+8] = r0			  ## silk_decmaintest.c:273:13
    74c8:    68 90             	r0 = r6 + 0x10			  ## silk_decmaintest.c:273:120
    74ca:    40 d6             	r0 = r4  #			  ## silk_decmaintest.c:273:13
    74cc:    80 21             		 [sp+4] = r0			  ## silk_decmaintest.c:273:13
    74ce:    d4 e9 01 90       	[sp] = r9			  ## silk_decmaintest.c:273:13
    74d2:    42 20             	r2 = 0x0			  ## silk_decmaintest.c:273:13
    74d4:    43 21             	r3 = 0x1			  ## silk_decmaintest.c:273:13
    74d6:    45 20             	r5 = 0x0			  ## silk_decmaintest.c:273:13
    74d8:    bf ea 89 fe       	call -0x2ee <wtgv2_silk_Decode : 71ee >			  ## silk_decmaintest.c:273:13
    74dc:    00 24             	r0 = [sp+16]			  ## silk_decmaintest.c:274:16
    74de:    72 60             	r2 = [r7+0x0] 			  ## silk_decmaintest.c:279:29
    74e0:    03 a1             	r3 = r0 << 0x1			  ## silk_decmaintest.c:278:39
    74e2:    32 d8             	r2 += r3  #			  ## silk_decmaintest.c:279:29
    74e4:    71 61             		 r1 = [r7+0x4] 			  ## silk_decmaintest.c:278:30
    74e6:    fa 3e             	r2 += -0x2			  ## silk_decmaintest.c:279:20
    74e8:    04 a2             	r4 = r0 << 0x2			  ## silk_decmaintest.c:278:51
    74ea:    13 1d             	r3 = r1 + r4			  ## silk_decmaintest.c:278:30
    74ec:    fb 3e             	r3 += -0x2			  ## silk_decmaintest.c:278:21
    74ee:    04 85             	goto 0xa <wtgv2_dec_run+0x16A : 74fa >
    74f0:    2e 06             	r6 = h[r2++=-0x2] (u)			  ## silk_decmaintest.c:283:15
    74f2:    be 60             	h[r3+0x0] = r6			  ## silk_decmaintest.c:284:15
    74f4:    be 7f             	h[r3+-0x2] = r6			  ## silk_decmaintest.c:285:15
    74f6:    fb 3c             	r3 += -0x4			  ## silk_decmaintest.c:281:4
    74f8:    c5 21             	r5 += 0x1			  ## silk_decmaintest.c:281:32
    74fa:    80 ed f9 51       	ifs (r5 < r0) goto -0xe <wtgv2_dec_run+0x160 : 74f0 >
    74fe:    50 ee 80 60       	r6 = b[r8+0x0] (u)			  ## silk_decmaintest.c:290:16
    7502:    d0 ec 80 01       	r0 = [r8+0x10]			  ## silk_decmaintest.c:290:16
    7506:    d0 ec 8c 31       	r3 = [r8+0x1c]
    750a:    42 16             	r2 = r4			  ## silk_decmaintest.c:299:4
    750c:    c3 00             	call r3			  ## silk_decmaintest.c:299:4
    750e:    45 20             	r5 = 0x0
    7510:    b6 e8 00 80       	if (r6 != 0x0) {
    7514:    f8 65             		h[r7+0xa] = r0			  ## silk_decmaintest.c:294:22
    7516:    40 1e             		r0 = r4 - r0			  ## silk_decmaintest.c:295:36
    7518:    f8 64             		h[r7+0x8] = r0
                               	}			  ## silk_decmaintest.c:295:27
    751a:    50 16             	r0 = r5			  ## silk_decmaintest.c:318:1
    751c:    02 85             	sp += 0x14			  ## silk_decmaintest.c:318:1
    751e:    5b 04             	{pc, r11-r4} = [sp++]			  ## silk_decmaintest.c:318:1
    7520:    55 20             	r5 = 0x40
    7522:    f7 9b             	goto -0xa <wtgv2_dec_run+0x18A : 751a >


wtgv2_init:
    7524:    77 04             	[--sp] = {rets, r7-r4}			  ## silk_decmaintest.c:167:0
    7526:    04 15             	r5_r4 = r1_r0			  ## silk_decmaintest.c:167:0
    7528:    41 20             	r1 = 0x0			  ## silk_decmaintest.c:168:2
    752a:    42 e0 20 10       	r2 = 0x1020 <WOLASynthesisFilter_Float_M128_m4_r1+0x1C : 1020 >			  ## silk_decmaintest.c:168:2
    752e:    46 20             	r6 = 0x0
    7530:    80 ff f0 cc ff ff 	call -0x3310 <memset : 4226 >			  ## silk_decmaintest.c:168:2
    7536:    40 16             	r0 = r4			  ## silk_decmaintest.c:172:12
    7538:    80 ff 5c fb ff ff 	call -0x4a4 <wtgv2_silk_InitDecoder : 709a >			  ## silk_decmaintest.c:172:12
    753e:    40 e0 80 3e       	r0 = 0x3e80 <STFT_Win_FixHalf_M256_D80+0x7C : 3e80 >			  ## silk_decmaintest.c:174:37
    7542:    01 e1 28 4c       	r1 = r4 + 0xc28
    7546:    42 f0 05 04       	r2 = 0x405  # <WOLASynthesisFilter_Float_M64_m4_r1 : 404 >			  ## silk_decmaintest.c:182:11
    754a:    90 62             		 [r1+0x8] = r0			  ## silk_decmaintest.c:174:37
    754c:    40 f0 06 04       	r0 = 0x406  # <WOLASynthesisFilter_Float_M64_m4_r1+0x2 : 406 >			  ## silk_decmaintest.c:181:11
    7550:    90 63             		 [r1+0xc] = r0			  ## silk_decmaintest.c:175:41
    7552:    44 ea 14 10       	[r1+0x10] = 0x14			  ## silk_decmaintest.c:176:37
    7556:    47 21             	r7 = 0x1			  ## silk_decmaintest.c:177:35
    7558:    97 60             	[r1+0x0] = r7			  ## silk_decmaintest.c:177:35
    755a:    97 61             	[r1+0x4] = r7			  ## silk_decmaintest.c:178:40
    755c:    06 f1 b4 44       	r6 = r4 + 0x4b4  #			  ## silk_decmaintest.c:181:67
    7560:    96 65             		 [r1+0x14] = r6			  ## silk_decmaintest.c:179:35
    7562:    d8 ec 4b 60       	[r4+r0<<2] = r6			  ## silk_decmaintest.c:181:18
    7566:    00 e1 84 41       	r0 = r4 + 0x184			  ## silk_decmaintest.c:182:59
    756a:    d8 ec 4b 02       	[r4+r2<<2] = r0			  ## silk_decmaintest.c:182:19
    756e:    00 e1 68 10       	r0 = r1 + 0x68			  ## silk_decmaintest.c:184:27
    7572:    10 97             	rep 0x4 0x18 {			  ## silk_decmaintest.c:184:2
    7574:    51 07             		r1 = b[r5++=0x1] (u)			  ## silk_decmaintest.c:184:2
    7576:    81 07             		b[r0++=0x1] = r1
                               	}			  ## silk_decmaintest.c:184:2
    7578:    05 e1 70 4c       	r5 = r4 + 0xc70
    757c:    50 68             	r0 = [r5+0x20] 			  ## silk_decmaintest.c:186:68
    757e:    51 6c             	r1 = [r5+0x30] 			  ## silk_decmaintest.c:186:38
    7580:    c1 00             	call r1			  ## silk_decmaintest.c:186:18
    7582:    41 e0 63 03       	r1 = 0x363 <ROM_RAM_SIZE+0x162 : 362 >			  ## silk_decmaintest.c:186:11
    7586:    d8 ec 4b 01       	[r4+r1<<2] = r0			  ## silk_decmaintest.c:186:16
    758a:    40 e0 2c 01       	r0 = 0x12c <var_bss_size+0x20 : 12c >			  ## silk_decmaintest.c:188:40
    758e:    d8 ec 4b 60       	[r4+r0<<2] = r6			  ## silk_decmaintest.c:188:53
    7592:    40 f0 22 56       	r0 = 0x5622  # <wtgv2_silk_LPC_analysis_filter+0xD2 : 5622 >			  ## silk_decmaintest.c:191:23
    7596:    d7 66             		 [r5+0x18] = r7			  ## silk_decmaintest.c:190:24
    7598:    40 f0 40 1f       	r0 = 0x1f40  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x73C : 1f40 >			  ## silk_decmaintest.c:192:23
    759c:    d8 6a             		 h[r5+0x14] = r0			  ## silk_decmaintest.c:191:23
    759e:    d8 6b             	h[r5+0x16] = r0			  ## silk_decmaintest.c:192:23
    75a0:    c0 ff 88 8a 01 00 	r0 = 0x18a88 <icdf_global_table : 18a88 >			  ## silk_decmaintest.c:197:49
    75a6:    01 e1 9d 00       	r1 = r0 + 0x9d			  ## silk_decmaintest.c:195:49
    75aa:    50 ec 51 00       	d[r5+0x0] = r1_r0			  ## silk_decmaintest.c:194:34
    75ae:    01 e1 a5 00       	r1 = r0 + 0xa5			  ## silk_decmaintest.c:196:49
    75b2:    01 f1 b5 00       	r1 = r0 + 0xb5  #			  ## silk_decmaintest.c:197:49
    75b6:    d1 62             		 [r5+0x8] = r1			  ## silk_decmaintest.c:196:49
    75b8:    40 20             	r0 = 0x0			  ## silk_decmaintest.c:199:2
    75ba:    d1 63             	[r5+0xc] = r1			  ## silk_decmaintest.c:197:49
    75bc:    57 04             	{pc, r7-r4} = [sp++]			  ## silk_decmaintest.c:199:2


wtgv2_type_check:
    75be:    78 04             	[--sp] = {rets, r8-r4}			  ## silk_decmaintest.c:94:0
    75c0:    e2 9e             	sp += -0x8			  ## silk_decmaintest.c:94:0
    75c2:    04 16             	r4 = r0			  ## silk_decmaintest.c:94:0
    75c4:    05 e1 84 4c       	r5 = r4 + 0xc84			  ## silk_decmaintest.c:94:0
    75c8:    06 f1 84 4d       	r6 = r4 + 0xd84  #			  ## silk_decmaintest.c:94:0
    75cc:    50 63             		 r0 = [r5+0xc] 			  ## silk_decmaintest.c:100:59
    75ce:    48 f0 01 00       	r8 = 0x1  # <mem_code_size : 0 >			  ## silk_decmaintest.c:100:13
    75d2:    57 64             		 r7 = [r5+0x10] 			  ## silk_decmaintest.c:100:33
    75d4:    61 61             	r1 = [r6+0x4] 			  ## silk_decmaintest.c:100:74
    75d6:    42 20             	r2 = 0x0			  ## silk_decmaintest.c:100:74
    75d8:    82 20             	[sp] = r2			  ## silk_decmaintest.c:100:13
    75da:    8a 87             	r2 = sp + 7			  ## silk_decmaintest.c:100:13
    75dc:    43 21             	r3 = 0x1			  ## silk_decmaintest.c:100:13
    75de:    c7 00             	call r7			  ## silk_decmaintest.c:100:13
    75e0:    80 fd 26 02       	ifs (r0 < 0x1) goto 0x4c <wtgv2_type_check+0x72 : 7630 >
    75e4:    52 ee 61 80       	b[r6+0x1] = r8			  ## silk_decmaintest.c:106:23
    75e8:    d0 ec 65 80       	[r6+0x4] = r8			  ## silk_decmaintest.c:107:18
    75ec:    dc e9 07 30       	r3 = b[sp+7] (u)			  ## silk_decmaintest.c:108:16
    75f0:    72 e1 f8 30       	r2 = r3 & 0xFFFFFF07			  ## silk_decmaintest.c:108:23
    75f4:    c0 ff e0 76 00 00 	r0 = 0x76e0 <sr_tab : 76e0 >			  ## silk_decmaintest.c:122:25
    75fa:    d8 ed 08 12       	r1 = h[r0+r2<<1] (u)			  ## silk_decmaintest.c:122:25
    75fe:    b0 a4             	r0 = r3 >> 0x4			  ## silk_decmaintest.c:118:18
    7600:    de e9 07 00       	b[sp+7] = r0			  ## silk_decmaintest.c:118:9
    7604:    e0 f1 fa 0d       	r0 = r0 * 0x1F40  #			  ## silk_decmaintest.c:123:29
    7608:    d9 60             		 h[r5+0x0] = r1			  ## silk_decmaintest.c:122:23
    760a:    d8 61             	h[r5+0x2] = r0			  ## silk_decmaintest.c:123:23
    760c:    40 2a             	r0 = 0xa			  ## silk_decmaintest.c:123:23
    760e:    33 ea 08 00       	if ((r3 & 0x8) != 0) {			  ## silk_decmaintest.c:123:23
    7612:    40 34             		r0 = 0x14
                               	}			  ## silk_decmaintest.c:123:23
    7614:    35 e1 fe 2f       	r5 = r2 + -0x2			  ## silk_decmaintest.c:125:26
    7618:    03 e1 30 4c       	r3 = r4 + 0xc30			  ## silk_decmaintest.c:125:26
    761c:    85 f9 0a 06       	if (r5 < 0x3) goto 0x14 <wtgv2_type_check+0x76 : 7634 >			  ## silk_decmaintest.c:125:6
    7620:    82 f8 0e 0a       	if (r2 != 0x5) goto 0x1c <wtgv2_type_check+0x82 : 7640 >			  ## silk_decmaintest.c:129:8
    7624:    40 e0 e0 2e       	r0 = 0x2ee0 <WOLASynthesisFilter_Float_M256_m4_r1+0x6DC : 2ee0 >
    7628:    41 f0 34 0c       	r1 = 0xc34  # <usb_code_size+0x170 : c34 >
    762c:    b0 60             		 [r3+0x0] = r0			  ## silk_decmaintest.c:131:40
    762e:    04 8c             	goto 0x18 <wtgv2_type_check+0x8A : 7648 >			  ## silk_decmaintest.c:131:40
    7630:    40 22             	r0 = 0x2
    7632:    04 8d             	goto 0x1a <wtgv2_type_check+0x90 : 764e >
    7634:    46 e0 80 3e       	r6 = 0x3e80 <STFT_Win_FixHalf_M256_D80+0x7C : 3e80 >			  ## silk_decmaintest.c:150:39
    7638:    67 16             	r7 = r6			  ## silk_decmaintest.c:150:39
    763a:    50 ec 31 60       	d[r3+0x0] = r7_r6			  ## silk_decmaintest.c:150:39
    763e:    04 82             	goto 0x4 <wtgv2_type_check+0x86 : 7644 >			  ## silk_decmaintest.c:150:39
    7640:    b1 60             	[r3+0x0] = r1			  ## silk_decmaintest.c:136:40
    7642:    b1 61             	[r3+0x4] = r1			  ## silk_decmaintest.c:137:44
    7644:    41 e0 38 0c       	r1 = 0xc38 <usb_code_size+0x174 : c38 >
    7648:    d8 ec 43 01       	[r4+r1] = r0
    764c:    40 20             	r0 = 0x0
    764e:    02 82             	sp += 0x8
    7650:    58 04             	{pc, r8-r4} = [sp++]			  ## silk_decmaintest.c:161:1


get_dec_inf:
    7652:    00 e1 84 0c       	r0 = r0 + 0xc84			  ## silk_decmaintest.c:82:0
    7656:    80 00             	rts			  ## silk_decmaintest.c:84:2


get_time:
    7658:    40 20             	r0 = 0x0			  ## silk_decmaintest.c:46:0
    765a:    80 00             	rts			  ## silk_decmaintest.c:47:2


get_bp_inf:
    765c:    80 00             	rts			  ## silk_decmaintest.c:52:0


need_buf:
    765e:    40 e0 20 10       	r0 = 0x1020 <WOLASynthesisFilter_Float_M128_m4_r1+0x1C : 1020 >			  ## silk_decmaintest.c:20:0
    7662:    80 00             	rts			  ## silk_decmaintest.c:21:2


need_rdbuf_size:
    7664:    40 2a             	r0 = 0xa			  ## silk_decmaintest.c:58:0
    7666:    80 00             	rts			  ## silk_decmaintest.c:59:2


need_bpbuf_size:
    7668:    40 24             	r0 = 0x4			  ## silk_decmaintest.c:64:0
    766a:    80 00             	rts			  ## silk_decmaintest.c:65:2


set_step:
    766c:    80 00             	rts			  ## silk_decmaintest.c:70:0


set_err_info:
    766e:    80 00             	rts			  ## silk_decmaintest.c:76:0


g729_dec_config:
    7670:    00 ff 03 13 08 00 	if (r1 == 0x303) goto 0x10 <g729_dec_config+0x16 : 7686 >			  ## silk_decmaintest.c:26:0
    7676:    31 e8 80 80       	if (r1 == 0x80) {
    767a:    21 60             		r1 = [r2+0x0] 			  ## silk_decmaintest.c:31:46
    767c:    42 e0 80 0c       		r2 = 0xc80 <usb_code_size+0x1BC : c80 >			  ## silk_decmaintest.c:31:21
    7680:    d8 ee 01 12       		b[r0+r2] = r1
                               	}			  ## silk_decmaintest.c:31:33
    7684:    04 8c             	goto 0x18 <g729_dec_config+0x2E : 769e >			  ## silk_decmaintest.c:31:33
    7686:    00 e1 70 0c       	r0 = r0 + 0xc70
    768a:    01 f1 9d 20       	r1 = r2 + 0x9d  #			  ## silk_decmaintest.c:37:103
    768e:    82 60             		 [r0+0x0] = r2			  ## silk_decmaintest.c:36:44
    7690:    01 f1 a5 20       	r1 = r2 + 0xa5  #			  ## silk_decmaintest.c:38:103
    7694:    81 61             		 [r0+0x4] = r1			  ## silk_decmaintest.c:37:59
    7696:    01 f1 b5 20       	r1 = r2 + 0xb5  #			  ## silk_decmaintest.c:39:61
    769a:    81 62             		 [r0+0x8] = r1			  ## silk_decmaintest.c:38:59
    769c:    81 63             	[r0+0xc] = r1			  ## silk_decmaintest.c:39:59
    769e:    40 20             	r0 = 0x0			  ## silk_decmaintest.c:41:2
    76a0:    80 00             	rts			  ## silk_decmaintest.c:41:2
    76a2:    00 00             	nop


wtgv2silk_Quantization_Offsets_Q10:
    76a4:	 64 00 f0 00 20 00 64 00         d... .d.


wtg2dec_context:
    76ac:	 b4 80 00 00 24 75 00 00         ....$u..
    76b4:	 be 75 00 00 90 73 00 00         .u...s..
    76bc:	 52 76 00 00 58 76 00 00         Rv..Xv..
    76c4:	 5c 76 00 00 5e 76 00 00         \v..^v..
    76cc:	 64 76 00 00 68 76 00 00         dv..hv..
    76d4:	 6c 76 00 00 6e 76 00 00         lv..nv..
    76dc:	 70 76 00 00                     pv..


sr_tab:
    76e0:	 40 1f e0 2e 80 3e 22 56         @....>"V
    76e8:	 c0 5d 11 2b                     .].+


wtgv2_LTP_vq_ptrs_Q7:
    76ec:	 fe 76 00 00 26 77 00 00         .v..&w..
    76f4:	 76 77 00 00                     vw..


wtgv2silk_LTPScales_table_Q14:
    76f8:	 cd 3c 00 30 00 20               .<.0. 


wtgv2_LTP_gain_vq_0:
    76fe:	 04 06 18 07 05 00 00 02         ........
    7706:	 00 00 0c 1c 29 0d fc f7         ....)...
    770e:	 0f 2a 19 0e 01 fe 3e 29         .*....>)
    7716:	 f7 f6 25 41 fc 03 fa 04         ..%A....
    771e:	 42 07 f8 10 0e 26 fd 21         B....&.!


wtgv2_LTP_gain_vq_1:
    7726:	 0d 16 27 17 0c ff 24 40         ..'...$@
    772e:	 1b fa f9 0a 37 2b 11 01         ....7+..
    7736:	 01 08 01 01 06 f5 4a 35         ......J5
    773e:	 f7 f4 37 4c f4 08 fd 03         ..7L....
    7746:	 5d 1b fc 1a 27 3b 03 f8         ]...';..
    774e:	 02 00 4d 0b 09 f8 16 2c         ..M....,
    7756:	 fa 07 28 09 1a 03 09 f9         ..(.....
    775e:	 14 65 f9 04 03 f8 2a 1a         .e....*.
    7766:	 00 f1 21 44 02 17 fe 37         ..!D...7
    776e:	 2e fe 0f 03 ff 15 10 29         .......)


wtgv2_LTP_gain_vq_2:
    7776:	 fa 1b 3d 27 05 f5 2a 58         ..='..*X
    777e:	 04 01 fe 3c 41 06 fc ff         ...<A...
    7786:	 fb 49 38 01 f7 13 5e 1d         .I8...^.
    778e:	 f7 00 0c 63 06 04 08 ed         ...c....
    7796:	 66 2e f3 03 02 0d 03 02         f.......
    779e:	 09 eb 54 48 ee f5 2e 68         ..TH...h
    77a6:	 ea 08 12 26 30 17 00 f0         ...&0...
    77ae:	 46 53 eb 0b 05 f5 75 16         FS....u.
    77b6:	 f8 fa 17 75 f4 03 03 f8         ...u....
    77be:	 5f 1c 04 f6 0f 4d 3c f1         _....M<.
    77c6:	 ff 04 7c 02 fc 03 26 54         ..|...&T
    77ce:	 18 e7 02 0d 2a 0d 1f 15         ....*...
    77d6:	 fc 38 2e ff ff 23 4f f3         .8...#O.
    77de:	 13 f9 41 58 f7 f2 14 04         ..AX....
    77e6:	 51 31 e3 14 00 4b 03 ef         Q1...K..
    77ee:	 05 f7 2c 5c f8 01 fd 16         ..,\....
    77f6:	 45 1f fa 5f 29 f4 05 27         E.._)..'
    77fe:	 43 10 fc 01 00 fa 78 37         C.....x7
    7806:	 dc f3 2c 7a 04 e8 51 05         ..,z..Q.
    780e:	 0b 03 07 02 00 09 0a 58         .......X
    7816:	 00 00                           ..


wtgv2_NLSF_CB_WB:
    7818:	 20 00 10 00 66 26 ab 01          ...f&..
    7820:	 40 78 00 00 40 7a 00 00         @x..@z..
    7828:	 00 00 00 00 40 7e 00 00         ....@~..
    7830:	 5e 7e 00 00 00 00 00 00         ^~......
    7838:	 5e 7f 00 00 a6 7f 00 00         ^.......


wtgv2_NLSF_CB1_WB_Q8:
    7840:	 07 17 26 36 45 55 64 74         ..&6EUdt
    7848:	 83 93 a2 b2 c1 d0 df ef         ........
    7850:	 0d 19 29 37 45 53 62 70         ..)7ESbp
    7858:	 7f 8e 9d ab bb cb dc ec         ........
    7860:	 0f 15 22 33 3d 4e 5c 6a         .."3=N\j
    7868:	 7e 88 98 a7 b9 cd e1 f0         ~.......
    7870:	 0a 15 24 32 3f 4f 5f 6e         ..$2?O_n
    7878:	 7e 8d 9d ad bd cd dd ed         ~.......
    7880:	 11 14 25 33 3b 4e 59 6b         ..%3;NYk
    7888:	 7b 86 96 a4 b8 cd e0 f0         {.......
    7890:	 0a 0f 20 33 43 51 60 70         .. 3CQ`p
    7898:	 81 8e 9e ad bd cc dc ec         ........
    78a0:	 08 15 25 33 41 4f 62 71         ..%3AObq
    78a8:	 7e 8a 9b a8 b3 c0 d1 da         ~.......
    78b0:	 0c 0f 22 37 3f 4e 57 6c         .."7?NWl
    78b8:	 76 83 94 a7 b9 cb db ec         v.......
    78c0:	 10 13 20 24 38 4f 5b 6c         .. $8O[l
    78c8:	 76 88 9a ab ba cc dc ed         v.......
    78d0:	 0b 1c 2b 3a 4a 59 69 78         ..+:JYix
    78d8:	 87 96 a5 b4 c4 d3 e2 f1         ........
    78e0:	 06 10 21 2e 3c 4b 5c 6b         ..!.<K\k
    78e8:	 7b 89 9c a9 b9 c7 d6 e1         {.......
    78f0:	 0b 13 1e 2c 39 4a 59 69         ...,9JYi
    78f8:	 79 87 98 a9 ba ca da ea         y.......
    7900:	 0c 13 1d 2e 39 47 58 64         ....9GXd
    7908:	 78 84 94 a5 b6 c7 d8 e9         x.......
    7910:	 11 17 23 2e 38 4d 5c 6a         ..#.8M\j
    7918:	 7b 86 98 a7 b9 cc de ed         {.......
    7920:	 0e 11 2d 35 3f 4b 59 6b         ..-5?KYk
    7928:	 73 84 97 ab bc ce dd f0         s.......
    7930:	 09 10 1d 28 38 47 58 67         ...(8GXg
    7938:	 77 89 9a ab bd cd de ed         w.......
    7940:	 10 13 24 30 39 4c 57 69         ..$09LWi
    7948:	 76 84 96 a7 b9 ca da ec         v.......
    7950:	 0c 11 1d 36 47 51 5e 68         ...6GQ^h
    7958:	 7e 88 95 a4 b6 c9 dd ed         ~.......
    7960:	 0f 1c 2f 3e 4f 61 73 81         ../>Oas.
    7968:	 8e 9b a8 b4 c2 d0 df ee         ........
    7970:	 08 0e 1e 2d 3e 4e 5e 6f         ...->N^o
    7978:	 7f 8f 9f af c0 cf df ef         ........
    7980:	 11 1e 31 3e 4f 5c 6b 77         ..1>O\kw
    7988:	 84 91 a0 ae be cc dc eb         ........
    7990:	 0e 13 24 2d 3d 4c 5b 6c         ..$-=L[l
    7998:	 79 8a 9a ac bd cd de ee         y.......
    79a0:	 0c 12 1f 2d 3c 4c 5b 6b         ...-<L[k
    79a8:	 7b 8a 9a ab bb cc dd ec         {.......
    79b0:	 0d 11 1f 2b 35 46 53 67         ...+5FSg
    79b8:	 72 83 95 a7 b9 cb dc ed         r.......
    79c0:	 11 16 23 2a 3a 4e 5d 6e         ..#*:N]n
    79c8:	 7d 8b 9b aa bc ce e0 f0         }.......
    79d0:	 08 0f 22 32 43 53 63 73         .."2CScs
    79d8:	 83 92 a2 b2 c1 d1 e0 ef         ........
    79e0:	 0d 10 29 42 49 56 5f 6f         ..)BIV_o
    79e8:	 80 89 96 a3 b7 ce e1 f1         ........
    79f0:	 11 19 25 34 3f 4b 5c 66         ..%4?K\f
    79f8:	 77 84 90 a0 af bf d4 e7         w.......
    7a00:	 13 1f 31 41 53 64 75 85         ..1ASdu.
    7a08:	 93 a1 ae bb c8 d5 e3 f2         ........
    7a10:	 12 1f 34 44 58 67 75 7e         ..4DXgu~
    7a18:	 8a 95 a3 b1 c0 cf df ef         ........
    7a20:	 10 1d 2f 3d 4c 5a 6a 77         ../=LZjw
    7a28:	 85 93 a1 b0 c1 d1 e0 f0         ........
    7a30:	 0f 15 23 32 3d 49 56 61         ..#2=IVa
    7a38:	 6e 77 81 8d af c6 da ed         nw......


wtgv2_NLSF_CB1_WB_Wght_Q9:
    7a40:	 49 0e 6d 0b 6d 0b 6d 0b         I.m.m.m.
    7a48:	 6d 0b 6d 0b 6d 0b 6d 0b         m.m.m.m.
    7a50:	 6d 0b 6d 0b 6d 0b 6d 0b         m.m.m.m.
    7a58:	 93 0b 93 0b 6d 0b 1e 0b         ....m...
    7a60:	 90 0c 0d 0c 9c 0b f0 0b         ........
    7a68:	 f0 0b c2 0b c2 0b c2 0b         ........
    7a70:	 93 0b 93 0b c2 0b 9c 0b         ........
    7a78:	 48 0b 1e 0b 1e 0b a6 0a         H.......
    7a80:	 50 0f ae 0f a5 0b 87 0c         P.......
    7a88:	 87 0c 76 0b f0 0b 1e 0b         ..v.....
    7a90:	 32 0c ac 0c 6d 0b 1e 0b         2...m...
    7a98:	 3c 0a f9 09 dc 0a 6d 0b         <.....m.
    7aa0:	 bc 0d 7d 0c c2 0b 1f 0c         ..}.....
    7aa8:	 cb 0b 48 0b 6d 0b 6d 0b         ..H.m.m.
    7ab0:	 6d 0b 6d 0b 48 0b 48 0b         m.m.H.H.
    7ab8:	 48 0b 48 0b 48 0b c1 0a         H.H.H...
    7ac0:	 be 13 be 13 76 0b f5 0d         ....v...
    7ac8:	 39 0d f0 0b 0d 0c e9 0a         9.......
    7ad0:	 58 0c 58 0c 9c 0b 1e 0b         X.X.....
    7ad8:	 d1 09 ec 09 c1 0a 48 0b         ......H.
    7ae0:	 4c 11 35 10 8c 0a c1 0a         L.5.....
    7ae8:	 9c 0b c2 0b 6d 0b 1e 0b         ....m...
    7af0:	 a5 0b cb 0b 6d 0b 6d 0b         ....m.m.
    7af8:	 6d 0b 6d 0b 48 0b a6 0a         m.m.H...
    7b00:	 24 0e cb 0b 9c 0b f0 0b         $.......
    7b08:	 f0 0b 39 0b f6 0a f0 0b         ..9.....
    7b10:	 90 0c e7 0b a5 0b db 0c         ........
    7b18:	 db 0c a5 0b ee 0c af 0b         ........
    7b20:	 6b 14 96 13 ec 09 0a 0d         k.......
    7b28:	 c6 0d 39 0d 7d 0c 16 0c         ..9.}...
    7b30:	 30 0d a5 0b 8c 0a 57 0a         0.....W.
    7b38:	 7f 0a e9 0a 1e 0b 71 0a         ......q.
    7b40:	 d9 13 36 14 07 12 4c 11         ..6...L.
    7b48:	 9c 09 51 0b e7 0b 87 0c         ..Q.....
    7b50:	 61 0c 7f 0a b4 0a 48 0b         a.....H.
    7b58:	 1e 0b e9 0a 1e 0b 8c 0a         ........
    7b60:	 32 0c 48 0b 93 0b 6d 0b         2.H...m.
    7b68:	 6d 0b 6d 0b 6d 0b 93 0b         m.m.m...
    7b70:	 93 0b 93 0b 93 0b 6d 0b         ......m.
    7b78:	 6d 0b 93 0b 93 0b 93 0b         m.......
    7b80:	 6a 10 87 0c a5 0b 1f 0c         j.......
    7b88:	 c2 0b 48 0b 48 0b 6d 0b         ..H.H.m.
    7b90:	 9c 0b 39 0b 64 0b cb 0b         ..9.d...
    7b98:	 9c 0b c2 0b 7d 0c 39 0b         ....}.9.
    7ba0:	 b0 0e b0 0e ac 0c 1f 0c         ........
    7ba8:	 a5 0b 48 0b 6d 0b 48 0b         ..H.m.H.
    7bb0:	 9c 0b 76 0b e9 0a e9 0a         ..v.....
    7bb8:	 1e 0b 48 0b 48 0b 64 0a         ..H.H.d.
    7bc0:	 0e 0f ae 0f 87 0c 32 0c         ......2.
    7bc8:	 ac 0c 76 0b e7 0b 93 0b         ..v.....
    7bd0:	 93 0b 0d 0c 1e 0b e9 0a         ........
    7bd8:	 e9 0a e9 0a e9 0a 14 0a         ........
    7be0:	 05 0f f0 0f 1d 0d bc 0d         ........
    7be8:	 16 0c b4 0a c2 0b 76 0b         ......v.
    7bf0:	 32 0c 0d 0c 1e 0b 1e 0b         2.......
    7bf8:	 57 0a 57 0a 1e 0b f6 0a         W.W.....
    7c00:	 1b 14 1e 13 99 0c 05 0f         ........
    7c08:	 71 0d 61 0c 51 0b 55 0d         q.a.Q.U.
    7c10:	 7b 0d 8c 0a 14 0a 71 0a         {.....q.
    7c18:	 b4 0a 1e 0b f6 0a c1 0a         ........
    7c20:	 0d 10 cd 0e db 0c 58 0c         ......X.
    7c28:	 6d 0b 48 0b 48 0b 6d 0b         m.H.H.m.
    7c30:	 e9 0a b4 0a e9 0a b4 0a         ........
    7c38:	 e9 0a 1e 0b 48 0b f6 0a         ....H...
    7c40:	 d9 13 be 13 e7 0b d9 0d         ........
    7c48:	 ac 0c f0 0b 0d 0c 80 0b         ........
    7c50:	 1f 0c 51 0b b4 0a b4 0a         ..Q.....
    7c58:	 b4 0a 1e 0b e9 0a 3c 0a         ......<.
    7c60:	 d5 10 d5 10 2c 0b df 09         ....,...
    7c68:	 87 0c 30 0d 30 0d 03 0c         ..0.0...
    7c70:	 03 0c 30 0d f0 0b 1e 0b         ..0.....
    7c78:	 57 0a 14 0a a6 0a c1 0a         W.......
    7c80:	 f0 0b 64 0b f6 0a 48 0b         ..d...H.
    7c88:	 b4 0a 7f 0a 51 0b 1f 0c         ....Q...
    7c90:	 4e 0c 4e 0c 90 0c 61 0c         N.N...a.
    7c98:	 f0 0b c2 0b 93 0b 1e 0b         ........
    7ca0:	 17 11 2a 0f 6d 0b 48 0b         ..*.m.H.
    7ca8:	 1e 0b 48 0b 1e 0b 1e 0b         ..H.....
    7cb0:	 48 0b 48 0b 48 0b 1e 0b         H.H.H...
    7cb8:	 48 0b 6d 0b 48 0b 1e 0b         H.m.H...
    7cc0:	 a5 0b 64 0b 64 0b a5 0b         ..d.d...
    7cc8:	 a5 0b f0 0b 32 0c 90 0c         ....2...
    7cd0:	 4e 0c f0 0b c2 0b 9c 0b         N.......
    7cd8:	 9c 0b 9c 0b 6d 0b b4 0a         ....m...
    7ce0:	 85 10 35 10 ee 0c 13 0d         ..5.....
    7ce8:	 6d 0b 93 0b 48 0b a5 0b         m...H...
    7cf0:	 a5 0b 1e 0b e9 0a b4 0a         ........
    7cf8:	 1e 0b 1e 0b 1e 0b e9 0a         ........
    7d00:	 f0 0f ae 0f 1f 0c c2 0b         ........
    7d08:	 6d 0b 6d 0b 6d 0b 48 0b         m.m.m.H.
    7d10:	 6d 0b 6d 0b 1e 0b 1e 0b         m.m.....
    7d18:	 1e 0b e9 0a 48 0b dc 0a         ....H...
    7d20:	 07 12 df 11 61 0c 71 0d         ....a.q.
    7d28:	 87 0c a5 0b 51 0b de 0b         ....Q...
    7d30:	 32 0c b4 0a 7f 0a 7f 0a         2.......
    7d38:	 7f 0a b4 0a e9 0a 8c 0a         ........
    7d40:	 35 10 ad 10 cd 0e 49 0e         5.....I.
    7d48:	 a6 0a dc 0a 48 0b 48 0b         ....H.H.
    7d50:	 c2 0b 9c 0b 6d 0b 1e 0b         ....m...
    7d58:	 7f 0a 7f 0a e9 0a 48 0b         ......H.
    7d60:	 77 10 e2 0d c1 0a 1e 0b         w.......
    7d68:	 1e 0b 48 0b 48 0b 48 0b         ..H.H.H.
    7d70:	 6d 0b 6d 0b 48 0b 6d 0b         m.m.H.m.
    7d78:	 6d 0b 6d 0b 93 0b 48 0b         m.m...H.
    7d80:	 36 14 39 13 d5 08 68 0d         6.9...h.
    7d88:	 cd 0e 97 0d 13 0d 1e 0b         ........
    7d90:	 ee 0c 97 0d 4e 0c 51 0b         ....N.Q.
    7d98:	 9c 09 b7 09 c1 0a 6d 0b         ......m.
    7da0:	 7b 0d 65 0e 32 0c 7d 0c         {.e.2.}.
    7da8:	 1d 0d e7 0b 87 0c 87 0c         ........
    7db0:	 a5 0b 90 0c 0d 0c 6d 0b         ......m.
    7db8:	 6d 0b 7f 0a ec 09 82 09         m.......
    7dc0:	 a5 0b c2 0b e9 0a e9 0a         ........
    7dc8:	 b4 0a e9 0a 1e 0b 9c 0b         ........
    7dd0:	 f0 0b 1f 0c 4e 0c 4e 0c         ....N.N.
    7dd8:	 4e 0c 1f 0c c2 0b c2 0b         N.......
    7de0:	 80 0b 39 0b 7f 0a a6 0a         ..9.....
    7de8:	 dc 0a c2 0b 68 0d d9 0d         ....h...
    7df0:	 1d 0d ac 0c f0 0b c2 0b         ........
    7df8:	 93 0b 6d 0b 48 0b 1e 0b         ..m.H...
    7e00:	 cb 0b 80 0b 51 0b c2 0b         ....Q...
    7e08:	 c2 0b 9c 0b cb 0b 1f 0c         ........
    7e10:	 f0 0b f0 0b c2 0b 48 0b         ......H.
    7e18:	 1e 0b 6d 0b 6d 0b 48 0b         ..m.m.H.
    7e20:	 50 0f 7f 0f c2 0b 7d 0c         P.....}.
    7e28:	 1d 0d 90 0c db 0c db 0c         ........
    7e30:	 97 0d 78 0e 71 0d a6 0a         ..x.q...
    7e38:	 85 08 9c 09 14 0a 2f 0a         ....../.


silk_NLSF_PRED_WB_Q8:
    7e40:	 af 94 a0 b0 b2 ad ae a4         ........
    7e48:	 b1 ae c4 b6 c6 c0 b6 44         .......D
    7e50:	 3e 42 3c 48 75 55 5a 76         >B<HuUZv
    7e58:	 88 97 8e a0 8e 9b               ......


silk_NLSF_CB2_SELECT_WB:
    7e5e:	 00 00 00 00 00 00 00 01         ........
    7e66:	 64 66 66 44 44 24 22 60         dffDD$"`
    7e6e:	 a4 6b 9e b9 b4 b9 8b 66         .k.....f
    7e76:	 40 42 24 22 22 00 01 20         @B$"".. 
    7e7e:	 d0 8b 8d bf 98 b9 9b 68         .......h
    7e86:	 60 ab 68 a6 66 66 66 84         `.h.fff.
    7e8e:	 01 00 00 00 00 10 10 00         ........
    7e96:	 50 6d 4e 6b b9 8b 67 65         PmNk..ge
    7e9e:	 d0 d4 8d 8b ad 99 7b 67         ......{g
    7ea6:	 24 00 00 00 00 00 00 01         $.......
    7eae:	 30 00 00 00 00 00 00 20         0...... 
    7eb6:	 44 87 7b 77 77 67 45 62         D.{wwgEb
    7ebe:	 44 67 78 76 76 66 47 62         DgxvvfGb
    7ec6:	 86 88 9d b8 b6 99 8b 86         ........
    7ece:	 d0 a8 f8 4b bd 8f 79 6b         ...K..yk
    7ed6:	 20 31 22 22 22 00 11 02          1"""...
    7ede:	 d2 eb 8b 7b b9 89 69 86         ...{..i.
    7ee6:	 62 87 68 b6 64 b7 ab 86         b.h.d...
    7eee:	 64 46 44 46 42 42 22 83         dFDFBB".
    7ef6:	 40 a6 66 44 24 02 01 00         @.fD$...
    7efe:	 86 a6 66 44 22 22 42 84         ..fD""B.
    7f06:	 d4 f6 9e 8b 6b 6b 57 66         ....kkWf
    7f0e:	 64 db 7d 7a 89 76 67 84         d.}z.vg.
    7f16:	 72 87 89 69 ab 6a 32 22         r..i.j2"
    7f1e:	 a4 d6 8d 8f b9 97 79 67         ......yg
    7f26:	 c0 22 00 00 00 00 00 01         ."......
    7f2e:	 d0 6d 4a bb 86 f9 9f 89         .mJ.....
    7f36:	 66 6e 9a 76 57 65 77 65         fn.vWewe
    7f3e:	 00 02 00 24 24 42 44 23         ...$$BD#
    7f46:	 60 a4 66 64 24 00 02 21         `.fd$..!
    7f4e:	 a7 8a ae 66 64 54 02 02         ...fdT..
    7f56:	 64 6b 78 77 24 c5 18 00         dkxw$...


silk_NLSF_CB2_BITS_WB_Q5:
    7f5e:	 ff ff ff 9c 04 9a ff ff         ........
    7f66:	 ff ff ff e3 66 0f 5c ff         ....f.\.
    7f6e:	 ff ff ff ff d5 53 18 48         .....S.H
    7f76:	 ec ff ff ff ff 96 4c 21         ......L!
    7f7e:	 3f d6 ff ff ff be 79 4d         ?.....yM
    7f86:	 2b 37 b9 ff ff ff f5 89         +7......
    7f8e:	 47 2b 3b 8b ff ff ff ff         G+;.....
    7f96:	 83 42 32 42 6b c2 ff ff         .B2Bk...
    7f9e:	 a6 74 4c 37 35 7d ff ff         .tL75}..


silk_NLSF_DELTA_MIN_WB_Q15:
    7fa6:	 64 00 03 00 28 00 03 00         d...(...
    7fae:	 03 00 03 00 05 00 0e 00         ........
    7fb6:	 0e 00 0a 00 0b 00 03 00         ........
    7fbe:	 08 00 09 00 07 00 03 00         ........
    7fc6:	 5b 01                           [.


wtgv2_silk_NLSF2A.ordering16:
    7fc8:	 00 0f 08 07 04 0b 0c 03         ........
    7fd0:	 02 0d 0a 05 06 09 0e 01         ........


wtgv2_silk_NLSF2A.ordering10:
    7fd8:	 00 09 06 03 04 05 08 01         ........
    7fe0:	 02 07                           ..


wtgv2silk_CB_lags_stage2:
    7fe2:	 00 02 ff ff ff 00 00 01         ........
    7fea:	 01 00 01 00 01 00 00 00         ........
    7ff2:	 00 00 01 00 00 00 00 00         ........
    7ffa:	 01 00 00 00 01 00 00 00         ........
    8002:	 00 00 ff 02 01 00 01 01         ........
    800a:	 00 00 ff ff                     ....


wtgv2wtgv2silk_CB_lags_stage2_10_ms:
    800e:	 00 01 00 00 00 01               ......


wtgv2silk_CB_lags_stage3:
    8014:	 00 00 01 ff 00 01 ff 00         ........
    801c:	 ff 01 fe 02 fe fe 02 fd         ........
    8024:	 02 03 fd fc 03 fc 04 04         ........
    802c:	 fb 05 fa fb 06 f9 06 05         ........
    8034:	 08 f7 00 00 01 00 00 00         ........
    803c:	 00 00 00 00 ff 01 00 00         ........
    8044:	 01 ff 00 01 ff ff 01 ff         ........
    804c:	 02 01 ff 02 fe fe 02 fe         ........
    8054:	 02 02 03 fd 00 01 00 00         ........
    805c:	 00 00 00 00 01 00 01 00         ........
    8064:	 00 01 ff 01 00 00 02 01         ........
    806c:	 ff 02 ff ff 02 ff 02 02         ........
    8074:	 ff 03 fe fe fe 03 00 01         ........
    807c:	 00 00 01 00 01 ff 02 ff         ........
    8084:	 02 ff 02 03 fe 03 fe fe         ........
    808c:	 04 04 fd 05 fd fc 06 fc         ........
    8094:	 06 05 fb 08 fa fb f9 09         ........


wtgv2wtgv2silk_CB_lags_stage3_10_ms:
    809c:	 00 00 01 ff 01 ff 02 fe         ........
    80a4:	 02 fe 03 fd 00 01 00 01         ........
    80ac:	 ff 02 ff 02 fe 03 fe 03         ........
    80b4:	 77 74 67 56 32 00               wtgV2.


sha256ProcessBlock:
    80ba:    7f 04             	[--sp] = {rets, r15-r4}			  ## sha256.c:237:0
    80bc:    e2 9e             	sp += -0x8			  ## sha256.c:237:0
    80be:    0d f1 20 00       	r13 = r0 + 0x20  #			  ## sha256.c:256:10
    80c2:    01 67             		 r1 = [r0+0x1c] 			  ## sha256.c:250:13
    80c4:    81 21             	[sp+4] = r1			  ## sha256.c:249:13
    80c6:    d0 ec 08 e1       	r14 = [r0+0x18]			  ## sha256.c:249:13
    80ca:    02 65             	r2 = [r0+0x14] 			  ## sha256.c:248:13
    80cc:    d0 ec 00 c1       	r12 = [r0+0x10]			  ## sha256.c:247:13
    80d0:    d0 ec 0c 90       	r9 = [r0+0xc]			  ## sha256.c:246:13
    80d4:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## sha256.c:245:13
    80d8:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## sha256.c:244:13
    80dc:    d0 ec 00 b0       	r11 = [r0+0x0]			  ## sha256.c:243:13
    80e0:    80 20             	[sp] = r0
    80e2:    41 20             	r1 = 0x0
    80e4:    04 87             	goto 0xe <sha256ProcessBlock+0x3A : 80f4 >
    80e6:    d8 ec da 31       	r3 = [r13+r1<<2]			  ## sha256.c:257:16
    80ea:    70 e0 00 33       	r3 = rev8(r3)			  ## endian.c:58:12
    80ee:    d8 ec db 31       	[r13+r1<<2] = r3			  ## sha256.c:257:14
    80f2:    c1 21             	r1 += 0x1			  ## sha256.c:256:26
    80f4:    81 f8 f7 21       	if (r1 != 0x10) goto -0x12 <sha256ProcessBlock+0x2C : 80e6 >			  ## sha256.c:256:5
    80f8:    41 20             	r1 = 0x0
    80fa:    04 9d             	goto 0x3a <sha256ProcessBlock+0x7C : 8136 >
    80fc:    00 20             	r0 = [sp]			  ## sha256.c:262:16
    80fe:    0b 1c             	r3 = r0 + r1			  ## sha256.c:262:16
    8100:    04 e1 20 30       	r4 = r3 + 0x20			  ## sha256.c:262:16
    8104:    45 69             	r5 = [r4+0x24] 			  ## sha256.c:262:35
    8106:    47 60             	r7 = [r4+0x0] 			  ## sha256.c:262:66
    8108:    75 d8             	r5 += r7  #			  ## sha256.c:262:33
    810a:    46 6e             		 r6 = [r4+0x38] 			  ## sha256.c:262:16
    810c:    e7 aa             	r7 = r6 >> 0xa			  ## sha256.c:262:16
    810e:    c4 f1 63 81       	r8 = r6 <> 0x13  #			  ## sha256.c:262:16
    8112:    44 61             		 r4 = [r4+0x4] 			  ## sha256.c:262:46
    8114:    90 e1 71 78       	r7 = r7 ^ r8			  ## sha256.c:262:16
    8118:    c4 e1 61 61       	r6 = r6 <> 0x11			  ## sha256.c:262:16
    811c:    7e 19             	r6 ^= r7			  ## sha256.c:262:16
    811e:    65 18             	r5 += r6			  ## sha256.c:262:44
    8120:    c6 a3             	r6 = r4 >> 0x3			  ## sha256.c:262:46
    8122:    c4 e1 42 71       	r7 = r4 <> 0x12			  ## sha256.c:262:46
    8126:    7e 19             	r6 ^= r7			  ## sha256.c:262:46
    8128:    c4 e1 47 40       	r4 = r4 <> 0x7			  ## sha256.c:262:46
    812c:    6c 19             	r4 ^= r6			  ## sha256.c:262:46
    812e:    54 18             	r4 += r5			  ## sha256.c:262:64
    8130:    d0 ec 31 46       	[r3+0x60] = r4			  ## sha256.c:262:14
    8134:    c1 24             	r1 += 0x4			  ## sha256.c:261:5
    8136:    91 f8 e1 81       	if (r1 != 0xc0) goto -0x3e <sha256ProcessBlock+0x42 : 80fc >			  ## sha256.c:261:5
    813a:    43 20             	r3 = 0x0
    813c:    c8 ff 30 8a 00 00 	r8 = 0x8a30 <k : 8a30 >
    8142:    14 8e             	goto 0x5c <sha256ProcessBlock+0xE6 : 81a0 >
    8144:    90 e1 42 6f       	r6 = r4 & r15			  ## sha256.c:269:29
    8148:    90 e1 40 7f       	r7 = r4 | r15			  ## sha256.c:269:29
    814c:    90 e1 72 7a       	r7 = r7 & r10			  ## sha256.c:269:29
    8150:    76 19             	r6 |= r7			  ## sha256.c:269:29
    8152:    c4 e1 ad 70       	r7 = r10 <> 0xd			  ## sha256.c:269:17
    8156:    c4 e1 a2 50       	r5 = r10 <> 0x2			  ## sha256.c:269:17
    815a:    7d 19             	r5 ^= r7			  ## sha256.c:269:17
    815c:    c4 e1 a6 71       	r7 = r10 <> 0x16			  ## sha256.c:269:17
    8160:    7d 19             	r5 ^= r7			  ## sha256.c:269:17
    8162:    b4 e0 60 b5       	r11 = r6 + r5			  ## sha256.c:269:27
    8166:    90 e1 e2 62       	r6 = r14 & r2			  ## sha256.c:268:33
    816a:    90 e1 13 72       	r7 = r1 & ~r2			  ## sha256.c:268:33
    816e:    90 f1 70 c6       	r12 = r7 | r6  #			  ## sha256.c:268:33
    8172:    06 21             		 r6 = [sp+4]			  ## sha256.c:268:19
    8174:    c4 e1 2b 70       	r7 = r2 <> 0xb			  ## sha256.c:268:21
    8178:    c4 e1 26 00       	r0 = r2 <> 0x6			  ## sha256.c:268:21
    817c:    78 19             	r0 ^= r7			  ## sha256.c:268:21
    817e:    c4 e1 29 71       	r7 = r2 <> 0x19			  ## sha256.c:268:21
    8182:    78 19             	r0 ^= r7			  ## sha256.c:268:21
    8184:    d8 ec 8a 73       	r7 = [r8+r3<<2]			  ## sha256.c:268:47
    8188:    d8 ec da 53       	r5 = [r13+r3<<2]			  ## sha256.c:268:54
    818c:    60 d8             	r0 += r6  #			  ## sha256.c:268:19
    818e:    81 21             		 [sp+4] = r1			  ## sha256.c:268:19
    8190:    c0 18             	r0 += r12			  ## sha256.c:268:31
    8192:    70 18             	r0 += r7			  ## sha256.c:268:45
    8194:    50 18             	r0 += r5			  ## sha256.c:268:52
    8196:    0b 18             	r11 += r0			  ## sha256.c:279:19
    8198:    b4 e0 00 c9       	r12 = r0 + r9			  ## sha256.c:275:15
    819c:    c3 21             	r3 += 0x1			  ## sha256.c:266:26
    819e:    49 16             	r9 = r4
    81a0:    e1 16             	r1 = r14
    81a2:    2e 16             	r14 = r2
    81a4:    c2 16             	r2 = r12
    81a6:    f4 16             	r4 = r15
    81a8:    af 16             	r15 = r10
    81aa:    ba 16             	r10 = r11
    81ac:    83 f8 ca 81       	if (r3 != 0x40) goto -0x6c <sha256ProcessBlock+0x8A : 8144 >
    81b0:    00 20             	r0 = [sp]
    81b2:    68 e8 00 0a       	[r0+0x0] += r10			  ## sha256.c:283:19
    81b6:    68 e8 04 0f       	[r0+0x4] += r15			  ## sha256.c:284:19
    81ba:    68 e8 08 04       	[r0+0x8] += r4			  ## sha256.c:285:19
    81be:    68 e8 0c 09       	[r0+0xc] += r9			  ## sha256.c:286:19
    81c2:    68 e8 10 02       	[r0+0x10] += r2			  ## sha256.c:287:19
    81c6:    68 e8 14 0e       	[r0+0x14] += r14			  ## sha256.c:288:19
    81ca:    68 e8 18 01       	[r0+0x18] += r1			  ## sha256.c:289:19
    81ce:    01 21             	r1 = [sp+4]			  ## sha256.c:290:19
    81d0:    68 e8 1c 01       	[r0+0x1c] += r1			  ## sha256.c:290:19
    81d4:    02 82             	sp += 0x8			  ## sha256.c:290:19
    81d6:    5f 04             	{pc, r15-r4} = [sp++]			  ## sha256.c:291:1


sha256Update:
    81d8:    d9 e8 f0 37       	[--sp] = {rets, r13, r12, r10-r4}			  ## sha256.c:164:0
    81dc:    24 16             	r4 = r2			  ## sha256.c:164:0
    81de:    15 16             	r5 = r1			  ## sha256.c:164:0
    81e0:    06 16             	r6 = r0			  ## sha256.c:164:0
    81e2:    07 e1 20 61       	r7 = r6 + 0x120			  ## sha256.c:164:0
    81e6:    0a e1 20 60       	r10 = r6 + 0x20			  ## sha256.c:164:0
    81ea:    14 83             	goto 0x46 <sha256Update+0x5A : 8232 >			  ## sha256.c:164:0
    81ec:    71 60             	r1 = [r7+0x0] 			  ## sha256.c:168:17
    81ee:    b4 e0 a0 01       	r0 = r10 + r1			  ## sha256.c:171:32
    81f2:    a1 e0 40 10       	r1 = 0x40 - r1			  ## sha256.c:168:17
    81f6:    35 e4 41 81       	r8 = smin(r4, r1)			  ## sha256.c:168:17
    81fa:    51 16             	r1 = r5			  ## sha256.c:171:9
    81fc:    82 16             	r2 = r8			  ## sha256.c:171:9
    81fe:    80 ff 38 bf ff ff 	call -0x40c8 <memmove : 413c >			  ## sha256.c:171:9
    8204:    70 60             	r0 = [r7+0x0] 			  ## sha256.c:174:23
    8206:    80 18             	r0 += r8			  ## sha256.c:174:23
    8208:    c0 f1 8f 9d       	r9 = r8 >>> 0x1f  #			  ## sha256.c:175:31
    820c:    f0 60             		 [r7+0x0] = r0			  ## sha256.c:174:23
    820e:    51 ec 64 22       	r3_r2 = d[r6+0x124]			  ## sha256.c:175:28
    8212:    b4 e0 20 c8       	r12 = r2 + r8			  ## sha256.c:175:28
    8216:    b8 e0 30 d9       	r13 = r3 + r9 + c			  ## sha256.c:175:28
    821a:    51 ec 65 c2       	d[r6+0x124] = r13_r12			  ## sha256.c:175:28
    821e:    b4 e0 42 48       	r4 = r4 - r8			  ## sha256.c:179:16
    8222:    85 18             	r5 += r8			  ## sha256.c:177:28
    8224:    80 f8 05 80       	if (r0 != 0x40) goto 0xa <sha256Update+0x5A : 8232 >
    8228:    60 16             	r0 = r6			  ## sha256.c:184:13
    822a:    bf ea 46 ff       	call -0x174 <sha256ProcessBlock : 80ba >			  ## sha256.c:184:13
    822e:    40 ea 00 70       	[r7+0x0] = 0x0			  ## sha256.c:186:27
    8232:    04 fd db 03       	ifs (r4 >= 0x1) goto -0x4a <sha256Update+0x14 : 81ec >
    8236:    d5 e8 f0 37       	{pc, r13, r12, r10-r4} = [sp++]			  ## sha256.c:189:1


sha256Final:
    823a:    78 04             	[--sp] = {rets, r8-r4}			  ## sha256.c:199:0
    823c:    04 16             	r4 = r0			  ## sha256.c:199:0
    823e:    d1 ec 40 02       	r0 = [r4+0x120]			  ## sha256.c:208:29
    8242:    18 16             	r8 = r1			  ## sha256.c:208:29
    8244:    49 38             	r1 = 0x38
    8246:    30 ed 38 00       	ifs (r0 >= 0x38) {
    824a:    59 38             		r1 = 0x78
                               	}			  ## sha256.c:208:19
    824c:    05 e1 58 40       	r5 = r4 + 0x58			  ## sha256.c:208:19
    8250:    50 ec 5c 6c       	r7_r6 = d[r5+0xcc]			  ## sha256.c:205:26
    8254:    12 1e             	r2 = r1 - r0			  ## sha256.c:205:26
    8256:    c1 ff f0 89 00 00 	r1 = 0x89f0 <padding : 89f0 >			  ## sha256.c:210:5
    825c:    40 16             	r0 = r4			  ## sha256.c:210:5
    825e:    51 9c             	call -0x88 <sha256Update : 81d8 >			  ## sha256.c:210:5
    8260:    60 15             	r1_r0 = r7_r6			  ## sha256.c:213:22
    8262:    d0 e1 0d 09       	r1_r0 >>= 0x1d			  ## sha256.c:213:22
    8266:    70 e0 00 00       	r0 = rev8(r0)			  ## endian.c:58:12
    826a:    d0 60             	[r5+0x0] = r0			  ## sha256.c:213:20
    826c:    60 a3             	r0 = r6 << 0x3			  ## sha256.c:214:22
    826e:    70 e0 00 00       	r0 = rev8(r0)			  ## endian.c:58:12
    8272:    40 d6             	r0 = r4  #			  ## sha256.c:217:5
    8274:    d0 61             		 [r5+0x4] = r0			  ## sha256.c:214:20
    8276:    bf ea 20 ff       	call -0x1c0 <sha256ProcessBlock : 80ba >			  ## sha256.c:217:5
    827a:    40 20             	r0 = 0x0
    827c:    04 87             	goto 0xe <sha256Final+0x52 : 828c >
    827e:    d8 ec 4a 10       	r1 = [r4+r0<<2]			  ## sha256.c:221:25
    8282:    70 e0 00 11       	r1 = rev8(r1)			  ## endian.c:58:12
    8286:    d8 ec 4b 10       	[r4+r0<<2] = r1			  ## sha256.c:221:23
    828a:    c0 21             	r0 += 0x1			  ## sha256.c:220:25
    828c:    80 f8 f7 11       	if (r0 != 0x8) goto -0x12 <sha256Final+0x44 : 827e >
    8290:    08 f8 04 00       	if (r8 == 0x0) goto 0x8 <sha256Final+0x62 : 829c >
    8294:    20 9f             	rep 0x6 0x20 {			  ## sha256.c:226:9
    8296:    40 07             		r0 = b[r4++=0x1] (u)			  ## sha256.c:226:9
    8298:    d2 ee 81 00       		b[r8++=0x1] = r0
                               	}			  ## sha256.c:226:9
    829c:    58 04             	{pc, r8-r4} = [sp++]			  ## sha256.c:228:1


hmacCompute:
    829e:    7b 04             	[--sp] = {rets, r11-r4}			  ## hmac.c:87:0
    82a0:    82 9c             	sp += -0x190			  ## hmac.c:87:0
    82a2:    2a 16             	r10 = r2			  ## hmac.c:87:0
    82a4:    15 16             	r5 = r1			  ## hmac.c:87:0
    82a6:    01 16             	r1 = r0			  ## hmac.c:87:0
    82a8:    c0 ff 30 8b 00 00 	r0 = 0x8b30 <sha256HashAlgo : 8b30 >			  ## hmac.c:125:19
    82ae:    38 d6             	r8 = r3  #
    82b0:    80 20             		 [sp] = r0			  ## hmac.c:125:19
    82b2:    85 fd 36 82       	ifs (r5 < 0x41) goto 0x6c <hmacCompute+0x84 : 8322 >			  ## hmac.c:128:9
    82b6:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <RAM_LIMIT_H+0x69EFE666 : 6a09e666 >			  ## sha256.c:140:19
    82bc:    80 21             	[sp+4] = r0			  ## sha256.c:140:19
    82be:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <RAM_LIMIT_H+0xBB4DAE84 : bb67ae84 >			  ## sha256.c:141:19
    82c4:    80 22             	[sp+8] = r0			  ## sha256.c:141:19
    82c6:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <RAM_LIMIT_H+0x3C54F372 : 3c6ef372 >			  ## sha256.c:142:19
    82cc:    80 23             	[sp+12] = r0			  ## sha256.c:142:19
    82ce:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <RAM_LIMIT_H+0xA535F53A : a54ff53a >			  ## sha256.c:143:19
    82d4:    80 24             	[sp+16] = r0			  ## sha256.c:143:19
    82d6:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <RAM_LIMIT_H+0x50F4527E : 510e527e >			  ## sha256.c:144:19
    82dc:    80 25             	[sp+20] = r0			  ## sha256.c:144:19
    82de:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <RAM_LIMIT_H+0x9AEB688C : 9b05688c >			  ## sha256.c:145:19
    82e4:    80 26             	[sp+24] = r0			  ## sha256.c:145:19
    82e6:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <RAM_LIMIT_H+0x1F69D9AA : 1f83d9aa >			  ## sha256.c:146:19
    82ec:    80 27             	[sp+28] = r0			  ## sha256.c:146:19
    82ee:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <RAM_LIMIT_H+0x5BC6CD18 : 5be0cd18 >			  ## sha256.c:147:19
    82f4:    80 28             	[sp+32] = r0			  ## sha256.c:147:19
    82f6:    44 20             	r4 = 0x0			  ## sha256.c:147:19
    82f8:    d4 e9 25 41       	[sp+292] = r4			  ## sha256.c:150:19
    82fc:    42 20             	r2 = 0x0			  ## sha256.c:152:24
    82fe:    43 20             	r3 = 0x0			  ## sha256.c:152:24
    8300:    d0 e9 29 21       	d[sp+296] = r3_r2			  ## sha256.c:152:24
    8304:    8f 80             	r7 = sp + 0			  ## sha256.c:152:24
    8306:    7e 84             	r6 = r7 + 0x4			  ## hmac.c:130:20
    8308:    60 16             	r0 = r6			  ## hmac.c:132:9
    830a:    52 16             	r2 = r5			  ## hmac.c:132:9
    830c:    bf ea 64 ff       	call -0x138 <sha256Update : 81d8 >			  ## hmac.c:132:9
    8310:    01 e1 30 71       	r1 = r7 + 0x130			  ## hmac.c:134:43
    8314:    60 16             	r0 = r6			  ## hmac.c:134:9
    8316:    41 91             	call -0xde <sha256Final : 823a >			  ## hmac.c:134:9
    8318:    00 e1 50 71       	r0 = r7 + 0x150			  ## hmac.c:136:29
    831c:    00 87             	rep 0x2 0x8 {			  ## hmac.c:136:9
    831e:    84 05             		[r0++=0x4] = r4
                               	}			  ## hmac.c:136:9
    8320:    04 8f             	goto 0x1e <hmacCompute+0xA2 : 8340 >			  ## hmac.c:136:9
    8322:    88 80             	r0 = sp + 0
    8324:    06 e1 30 01       	r6 = r0 + 0x130			  ## hmac.c:139:9
    8328:    60 16             	r0 = r6			  ## hmac.c:139:9
    832a:    52 16             	r2 = r5			  ## hmac.c:139:9
    832c:    80 ff 0a be ff ff 	call -0x41f6 <memmove : 413c >			  ## hmac.c:139:9
    8332:    68 1d             	r0 = r6 + r5			  ## hmac.c:141:29
    8334:    a2 e0 40 50       	r2 = 0x40 - r5			  ## hmac.c:141:61
    8338:    41 20             	r1 = 0x0			  ## hmac.c:141:9
    833a:    80 ff e6 be ff ff 	call -0x411a <memset : 4226 >			  ## hmac.c:141:9
    8340:    d4 e9 b4 91       	r9 = [sp+436]
    8344:    88 80             	r0 = sp + 0
    8346:    00 e1 30 01       	r0 = r0 + 0x130			  ## hmac.c:122:9
    834a:    41 20             	r1 = 0x0			  ## hmac.c:122:9
    834c:    04 87             	goto 0xe <hmacCompute+0xBE : 835c >			  ## hmac.c:122:9
    834e:    d8 ee 00 21       	r2 = b[r0+r1] (u)			  ## hmac.c:146:25
    8352:    52 e1 36 20       	r2 = r2 ^ 0x36			  ## hmac.c:146:25
    8356:    d8 ee 01 21       	b[r0+r1] = r2			  ## hmac.c:146:25
    835a:    c1 21             	r1 += 0x1			  ## hmac.c:145:39
    835c:    81 f8 f7 81       	if (r1 != 0x40) goto -0x12 <hmacCompute+0xB0 : 834e >
    8360:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <RAM_LIMIT_H+0x69EFE666 : 6a09e666 >			  ## sha256.c:140:19
    8366:    80 21             	[sp+4] = r0			  ## sha256.c:140:19
    8368:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <RAM_LIMIT_H+0xBB4DAE84 : bb67ae84 >			  ## sha256.c:141:19
    836e:    80 22             	[sp+8] = r0			  ## sha256.c:141:19
    8370:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <RAM_LIMIT_H+0x3C54F372 : 3c6ef372 >			  ## sha256.c:142:19
    8376:    80 23             	[sp+12] = r0			  ## sha256.c:142:19
    8378:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <RAM_LIMIT_H+0xA535F53A : a54ff53a >			  ## sha256.c:143:19
    837e:    80 24             	[sp+16] = r0			  ## sha256.c:143:19
    8380:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <RAM_LIMIT_H+0x50F4527E : 510e527e >			  ## sha256.c:144:19
    8386:    80 25             	[sp+20] = r0			  ## sha256.c:144:19
    8388:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <RAM_LIMIT_H+0x9AEB688C : 9b05688c >			  ## sha256.c:145:19
    838e:    80 26             	[sp+24] = r0			  ## sha256.c:145:19
    8390:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <RAM_LIMIT_H+0x1F69D9AA : 1f83d9aa >			  ## sha256.c:146:19
    8396:    80 27             	[sp+28] = r0			  ## sha256.c:146:19
    8398:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <RAM_LIMIT_H+0x5BC6CD18 : 5be0cd18 >			  ## sha256.c:147:19
    839e:    80 28             	[sp+32] = r0			  ## sha256.c:147:19
    83a0:    44 20             	r4 = 0x0			  ## sha256.c:147:19
    83a2:    d4 e9 25 41       	[sp+292] = r4			  ## sha256.c:150:19
    83a6:    40 20             	r0 = 0x0			  ## sha256.c:152:24
    83a8:    41 20             	r1 = 0x0			  ## sha256.c:152:24
    83aa:    d0 e9 29 01       	d[sp+296] = r1_r0			  ## sha256.c:152:24
    83ae:    f8 e8 00 b0       	r11 = sp + 0			  ## sha256.c:152:24
    83b2:    07 e1 04 b0       	r7 = r11 + 0x4			  ## hmac.c:150:16
    83b6:    05 e1 30 b1       	r5 = r11 + 0x130			  ## hmac.c:152:40
    83ba:    52 20             	r2 = 0x40			  ## hmac.c:152:5
    83bc:    70 16             	r0 = r7			  ## hmac.c:152:5
    83be:    51 16             	r1 = r5			  ## hmac.c:152:5
    83c0:    bf ea 0a ff       	call -0x1ec <sha256Update : 81d8 >			  ## hmac.c:152:5
    83c4:    a1 d6             	r1 = r10  #			  ## hmac.c:168:5
    83c6:    00 20             		 r0 = [sp]			  ## hmac.c:166:37
    83c8:    70 d6             	r0 = r7  #			  ## hmac.c:168:5
    83ca:    03 68             		 r3 = [r0+0x20] 			  ## hmac.c:168:11
    83cc:    82 16             	r2 = r8			  ## hmac.c:168:5
    83ce:    c3 00             	call r3			  ## hmac.c:168:5
    83d0:    08 f1 70 b1       	r8 = r11 + 0x170  #			  ## hmac.c:185:39
    83d4:    06 20             		 r6 = [sp]			  ## hmac.c:183:37
    83d6:    70 d6             	r0 = r7  #			  ## hmac.c:185:5
    83d8:    62 69             		 r2 = [r6+0x24] 			  ## hmac.c:185:11
    83da:    81 16             	r1 = r8			  ## hmac.c:185:5
    83dc:    c2 00             	call r2			  ## hmac.c:185:5
    83de:    04 87             	goto 0xe <hmacCompute+0x150 : 83ee >
    83e0:    d8 ee 50 04       	r0 = b[r5+r4] (u)			  ## hmac.c:189:25
    83e4:    50 e1 6a 00       	r0 = r0 ^ 0x6A			  ## hmac.c:189:25
    83e8:    d8 ee 51 04       	b[r5+r4] = r0			  ## hmac.c:189:25
    83ec:    c4 21             	r4 += 0x1			  ## hmac.c:188:39
    83ee:    60 64             	r0 = [r6+0x10] 			  ## hmac.c:188:27
    83f0:    80 e9 f6 41       	if (r4 < r0) goto -0x14 <hmacCompute+0x142 : 83e0 >			  ## hmac.c:188:27
    83f4:    70 d6             	r0 = r7  #			  ## hmac.c:193:5
    83f6:    61 67             		 r1 = [r6+0x1c] 			  ## hmac.c:193:11
    83f8:    c1 00             	call r1			  ## hmac.c:193:5
    83fa:    70 d6             	r0 = r7  #			  ## hmac.c:195:5
    83fc:    62 64             		 r2 = [r6+0x10] 			  ## hmac.c:195:60
    83fe:    51 d6             	r1 = r5  #			  ## hmac.c:195:5
    8400:    63 68             		 r3 = [r6+0x20] 			  ## hmac.c:195:11
    8402:    c3 00             	call r3			  ## hmac.c:195:5
    8404:    70 d6             	r0 = r7  #			  ## hmac.c:197:5
    8406:    62 65             		 r2 = [r6+0x14] 			  ## hmac.c:197:63
    8408:    81 d6             	r1 = r8  #			  ## hmac.c:197:5
    840a:    63 68             		 r3 = [r6+0x20] 			  ## hmac.c:197:11
    840c:    c3 00             	call r3			  ## hmac.c:197:5
    840e:    70 d6             	r0 = r7  #			  ## hmac.c:199:5
    8410:    62 69             		 r2 = [r6+0x24] 			  ## hmac.c:199:11
    8412:    81 16             	r1 = r8			  ## hmac.c:199:5
    8414:    c2 00             	call r2			  ## hmac.c:199:5
    8416:    b9 e8 00 c0       	if (r9 != 0x0) {
    841a:    62 65             		r2 = [r6+0x14] 			  ## hmac.c:203:47
    841c:    90 16             		r0 = r9			  ## hmac.c:203:9
    841e:    81 16             		r1 = r8			  ## hmac.c:203:9
    8420:    80 ff 16 bd ff ff 		call -0x42ea
                               	} <memmove : 413c >			  ## hmac.c:203:9
    8426:    62 84             	sp += 0x190			  ## hmac.c:203:9
    8428:    5b 04             	{pc, r11-r4} = [sp++]			  ## hmac.c:203:9


sha256Compute:
    842a:    77 04             	[--sp] = {rets, r7-r4}			  ## sha256.c:108:0
    842c:    a2 95             	sp += -0x12c			  ## sha256.c:108:0
    842e:    24 16             	r4 = r2			  ## sha256.c:108:0
    8430:    12 16             	r2 = r1			  ## sha256.c:108:0
    8432:    01 16             	r1 = r0			  ## sha256.c:108:0
    8434:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <RAM_LIMIT_H+0x69EFE666 : 6a09e666 >			  ## sha256.c:140:19
    843a:    80 20             	[sp] = r0			  ## sha256.c:140:19
    843c:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <RAM_LIMIT_H+0xBB4DAE84 : bb67ae84 >			  ## sha256.c:141:19
    8442:    80 21             	[sp+4] = r0			  ## sha256.c:141:19
    8444:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <RAM_LIMIT_H+0x3C54F372 : 3c6ef372 >			  ## sha256.c:142:19
    844a:    80 22             	[sp+8] = r0			  ## sha256.c:142:19
    844c:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <RAM_LIMIT_H+0xA535F53A : a54ff53a >			  ## sha256.c:143:19
    8452:    80 23             	[sp+12] = r0			  ## sha256.c:143:19
    8454:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <RAM_LIMIT_H+0x50F4527E : 510e527e >			  ## sha256.c:144:19
    845a:    80 24             	[sp+16] = r0			  ## sha256.c:144:19
    845c:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <RAM_LIMIT_H+0x9AEB688C : 9b05688c >			  ## sha256.c:145:19
    8462:    80 25             	[sp+20] = r0			  ## sha256.c:145:19
    8464:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <RAM_LIMIT_H+0x1F69D9AA : 1f83d9aa >			  ## sha256.c:146:19
    846a:    80 26             	[sp+24] = r0			  ## sha256.c:146:19
    846c:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <RAM_LIMIT_H+0x5BC6CD18 : 5be0cd18 >			  ## sha256.c:147:19
    8472:    80 27             	[sp+28] = r0			  ## sha256.c:147:19
    8474:    40 20             	r0 = 0x0			  ## sha256.c:147:19
    8476:    d4 e9 21 01       	[sp+288] = r0			  ## sha256.c:150:19
    847a:    46 20             	r6 = 0x0			  ## sha256.c:152:24
    847c:    47 20             	r7 = 0x0			  ## sha256.c:152:24
    847e:    d0 e9 25 61       	d[sp+292] = r7_r6			  ## sha256.c:152:24
    8482:    8d 80             	r5 = sp + 0			  ## sha256.c:152:24
    8484:    50 16             	r0 = r5			  ## sha256.c:121:5
    8486:    bf ea a7 fe       	call -0x2b2 <sha256Update : 81d8 >			  ## sha256.c:121:5
    848a:    50 16             	r0 = r5			  ## sha256.c:123:5
    848c:    41 16             	r1 = r4			  ## sha256.c:123:5
    848e:    bf ea d4 fe       	call -0x258 <sha256Final : 823a >			  ## sha256.c:123:5
    8492:    40 21             	r0 = 0x1			  ## sha256.c:129:1
    8494:    42 8b             	sp += 0x12c			  ## sha256.c:129:1
    8496:    57 04             	{pc, r7-r4} = [sp++]			  ## sha256.c:129:1


sha256Init:
    8498:    c1 ff 67 e6 09 6a 	r1 = 0x6a09e667 <RAM_LIMIT_H+0x69EFE666 : 6a09e666 >			  ## sha256.c:138:0
    849e:    81 60             	[r0+0x0] = r1			  ## sha256.c:140:19
    84a0:    c1 ff 85 ae 67 bb 	r1 = 0xbb67ae85 <RAM_LIMIT_H+0xBB4DAE84 : bb67ae84 >			  ## sha256.c:141:19
    84a6:    81 61             	[r0+0x4] = r1			  ## sha256.c:141:19
    84a8:    c1 ff 72 f3 6e 3c 	r1 = 0x3c6ef372 <RAM_LIMIT_H+0x3C54F372 : 3c6ef372 >			  ## sha256.c:142:19
    84ae:    81 62             	[r0+0x8] = r1			  ## sha256.c:142:19
    84b0:    c1 ff 3a f5 4f a5 	r1 = 0xa54ff53a <RAM_LIMIT_H+0xA535F53A : a54ff53a >			  ## sha256.c:143:19
    84b6:    81 63             	[r0+0xc] = r1			  ## sha256.c:143:19
    84b8:    c1 ff 7f 52 0e 51 	r1 = 0x510e527f <RAM_LIMIT_H+0x50F4527E : 510e527e >			  ## sha256.c:144:19
    84be:    81 64             	[r0+0x10] = r1			  ## sha256.c:144:19
    84c0:    c1 ff 8c 68 05 9b 	r1 = 0x9b05688c <RAM_LIMIT_H+0x9AEB688C : 9b05688c >			  ## sha256.c:145:19
    84c6:    81 65             	[r0+0x14] = r1			  ## sha256.c:145:19
    84c8:    c1 ff ab d9 83 1f 	r1 = 0x1f83d9ab <RAM_LIMIT_H+0x1F69D9AA : 1f83d9aa >			  ## sha256.c:146:19
    84ce:    81 66             	[r0+0x18] = r1			  ## sha256.c:146:19
    84d0:    c1 ff 19 cd e0 5b 	r1 = 0x5be0cd19 <RAM_LIMIT_H+0x5BC6CD18 : 5be0cd18 >			  ## sha256.c:147:19
    84d6:    81 67             	[r0+0x1c] = r1			  ## sha256.c:147:19
    84d8:    41 20             	r1 = 0x0			  ## sha256.c:147:19
    84da:    d1 ec 01 12       	[r0+0x120] = r1			  ## sha256.c:150:19
    84de:    42 20             	r2 = 0x0			  ## sha256.c:152:24
    84e0:    43 20             	r3 = 0x0			  ## sha256.c:152:24
    84e2:    51 ec 05 22       	d[r0+0x124] = r3_r2			  ## sha256.c:152:24
    84e6:    80 00             	rts			  ## sha256.c:153:1


f1_hash_function:
    84e8:    76 04             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:14:0
    84ea:    e2 8a             	sp += -0x58			  ## Crypto_hash.c:14:0
    84ec:    ac 87             	r4 = sp + 39			  ## Crypto_hash.c:14:0
    84ee:    45 16             	r5 = r4			  ## Crypto_hash.c:20:5
    84f0:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:20:5
    84f2:    06 07             		r6 = b[r0++=0x1] (u)			  ## Crypto_hash.c:20:5
    84f4:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:20:5
    84f6:    48 98             	r0 = r4 + 0x18			  ## Crypto_hash.c:21:20
    84f8:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:21:5
    84fa:    15 07             		r5 = b[r1++=0x1] (u)			  ## Crypto_hash.c:21:5
    84fc:    85 07             		b[r0++=0x1] = r5
                               	}			  ## Crypto_hash.c:21:5
    84fe:    38 40             	r0 = b[r3+0x0] (u)			  ## Crypto_hash.c:23:42
    8500:    de e9 57 00       	b[sp+87] = r0			  ## Crypto_hash.c:23:40
    8504:    8d 87             	r5 = sp + 7			  ## Crypto_hash.c:23:40
    8506:    41 30             	r1 = 0x10			  ## Crypto_hash.c:24:5
    8508:    4b 31             	r3 = 0x31			  ## Crypto_hash.c:24:5
    850a:    20 d6             	r0 = r2  #			  ## Crypto_hash.c:24:5
    850c:    85 20             		 [sp] = r5			  ## Crypto_hash.c:24:5
    850e:    42 16             	r2 = r4			  ## Crypto_hash.c:24:5
    8510:    80 ff 88 fd ff ff 	call -0x278 <hmacCompute : 829e >			  ## Crypto_hash.c:24:5
    8516:    00 3a             	r0 = [sp+104]
    8518:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:26:5
    851a:    51 07             		r1 = b[r5++=0x1] (u)			  ## Crypto_hash.c:26:5
    851c:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:26:5
    851e:    02 96             	sp += 0x58
    8520:    56 04             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:27:1


g_hash_function:
    8522:    76 04             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:30:0
    8524:    c2 9c             	sp += -0x90			  ## Crypto_hash.c:30:0
    8526:    cc 80             	r4 = sp + 64			  ## Crypto_hash.c:30:0
    8528:    45 16             	r5 = r4			  ## Crypto_hash.c:35:5
    852a:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:35:5
    852c:    06 07             		r6 = b[r0++=0x1] (u)			  ## Crypto_hash.c:35:5
    852e:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:35:5
    8530:    48 98             	r0 = r4 + 0x18			  ## Crypto_hash.c:36:20
    8532:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:36:5
    8534:    15 07             		r5 = b[r1++=0x1] (u)			  ## Crypto_hash.c:36:5
    8536:    85 07             		b[r0++=0x1] = r5
                               	}			  ## Crypto_hash.c:36:5
    8538:    00 e1 30 40       	r0 = r4 + 0x30			  ## Crypto_hash.c:37:20
    853c:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:37:5
    853e:    21 07             		r1 = b[r2++=0x1] (u)			  ## Crypto_hash.c:37:5
    8540:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:37:5
    8542:    00 e1 40 40       	r0 = r4 + 0x40			  ## Crypto_hash.c:38:35
    8546:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:38:5
    8548:    31 07             		r1 = b[r3++=0x1] (u)			  ## Crypto_hash.c:38:5
    854a:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:38:5
    854c:    8d 80             	r5 = sp + 0
    854e:    51 30             	r1 = 0x50			  ## Crypto_hash.c:39:5
    8550:    40 16             	r0 = r4			  ## Crypto_hash.c:39:5
    8552:    52 16             	r2 = r5			  ## Crypto_hash.c:39:5
    8554:    80 ff d0 fe ff ff 	call -0x130 <sha256Compute : 842a >			  ## Crypto_hash.c:39:5
    855a:    20 28             	r0 = [sp+160]
    855c:    59 9c             	r1 = r5 + 0x1c			  ## Crypto_hash.c:41:27
    855e:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:41:5
    8560:    12 07             		r2 = b[r1++=0x1] (u)			  ## Crypto_hash.c:41:5
    8562:    82 07             		b[r0++=0x1] = r2
                               	}			  ## Crypto_hash.c:41:5
    8564:    22 84             	sp += 0x90			  ## Crypto_hash.c:41:5
    8566:    56 04             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:42:1


f2_hash_function:
    8568:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:45:0
    856a:    e2 8b             	sp += -0x54			  ## Crypto_hash.c:45:0
    856c:    24 16             	r4 = r2			  ## Crypto_hash.c:45:0
    856e:    aa 84             	r2 = sp + 36			  ## Crypto_hash.c:45:0
    8570:    2d 88             	r5 = r2 + 0x8			  ## Crypto_hash.c:49:5
    8572:    1e 88             	r6 = r1 + 0x8			  ## Crypto_hash.c:49:5
    8574:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:49:5
    8576:    67 07             		r7 = b[r6++=0x1] (u)			  ## Crypto_hash.c:49:5
    8578:    d7 07             		b[r5++=0x1] = r7
                               	}			  ## Crypto_hash.c:49:5
    857a:    25 16             	r5 = r2			  ## Crypto_hash.c:49:5
    857c:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:49:5
    857e:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:49:5
    8580:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:49:5
    8582:    29 90             	r1 = r2 + 0x10			  ## Crypto_hash.c:50:20
    8584:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:50:5
    8586:    45 07             		r5 = b[r4++=0x1] (u)			  ## Crypto_hash.c:50:5
    8588:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:50:5
    858a:    01 f1 20 20       	r1 = r2 + 0x20  #			  ## Crypto_hash.c:51:20
    858e:    04 3a             		 r4 = [sp+104]			  ## Crypto_hash.c:51:20
    8590:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:51:5
    8592:    35 07             		r5 = b[r3++=0x1] (u)			  ## Crypto_hash.c:51:5
    8594:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:51:5
    8596:    03 f1 24 20       	r3 = r2 + 0x24  #			  ## Crypto_hash.c:52:20
    859a:    01 3b             		 r1 = [sp+108]			  ## Crypto_hash.c:52:20
    859c:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:52:5
    859e:    45 07             		r5 = b[r4++=0x1] (u)			  ## Crypto_hash.c:52:5
    85a0:    b5 07             		b[r3++=0x1] = r5
                               	}			  ## Crypto_hash.c:52:5
    85a2:    03 e1 2a 20       	r3 = r2 + 0x2a			  ## Crypto_hash.c:53:20
    85a6:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:53:5
    85a8:    14 07             		r4 = b[r1++=0x1] (u)			  ## Crypto_hash.c:53:5
    85aa:    b4 07             		b[r3++=0x1] = r4
                               	}			  ## Crypto_hash.c:53:5
    85ac:    8c 84             	r4 = sp + 4			  ## Crypto_hash.c:53:5
    85ae:    41 38             	r1 = 0x18			  ## Crypto_hash.c:54:5
    85b0:    4b 30             	r3 = 0x30			  ## Crypto_hash.c:54:5
    85b2:    84 20             	[sp] = r4			  ## Crypto_hash.c:54:5
    85b4:    80 ff e4 fc ff ff 	call -0x31c <hmacCompute : 829e >			  ## Crypto_hash.c:54:5
    85ba:    00 3c             	r0 = [sp+112]
    85bc:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:55:5
    85be:    41 07             		r1 = b[r4++=0x1] (u)			  ## Crypto_hash.c:55:5
    85c0:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:55:5
    85c2:    02 95             	sp += 0x54
    85c4:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:56:1


f3_hash_function:
    85c6:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:67:0
    85c8:    e2 87             	sp += -0x64			  ## Crypto_hash.c:67:0
    85ca:    24 16             	r4 = r2			  ## Crypto_hash.c:67:0
    85cc:    aa 84             	r2 = sp + 36			  ## Crypto_hash.c:67:0
    85ce:    2d 88             	r5 = r2 + 0x8			  ## Crypto_hash.c:71:5
    85d0:    1e 88             	r6 = r1 + 0x8			  ## Crypto_hash.c:71:5
    85d2:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:71:5
    85d4:    67 07             		r7 = b[r6++=0x1] (u)			  ## Crypto_hash.c:71:5
    85d6:    d7 07             		b[r5++=0x1] = r7
                               	}			  ## Crypto_hash.c:71:5
    85d8:    25 16             	r5 = r2			  ## Crypto_hash.c:71:5
    85da:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:71:5
    85dc:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:71:5
    85de:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:71:5
    85e0:    29 90             	r1 = r2 + 0x10			  ## Crypto_hash.c:72:20
    85e2:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:72:5
    85e4:    45 07             		r5 = b[r4++=0x1] (u)			  ## Crypto_hash.c:72:5
    85e6:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:72:5
    85e8:    01 f1 20 20       	r1 = r2 + 0x20  #			  ## Crypto_hash.c:73:20
    85ec:    04 3e             		 r4 = [sp+120]			  ## Crypto_hash.c:73:20
    85ee:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:73:5
    85f0:    35 07             		r5 = b[r3++=0x1] (u)			  ## Crypto_hash.c:73:5
    85f2:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:73:5
    85f4:    01 f1 30 20       	r1 = r2 + 0x30  #			  ## Crypto_hash.c:74:20
    85f8:    03 3f             		 r3 = [sp+124]			  ## Crypto_hash.c:74:20
    85fa:    10 82             	rep 0x4 0x3 {			  ## Crypto_hash.c:74:5
    85fc:    45 07             		r5 = b[r4++=0x1] (u)			  ## Crypto_hash.c:74:5
    85fe:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:74:5
    8600:    04 f1 33 20       	r4 = r2 + 0x33  #			  ## Crypto_hash.c:75:20
    8604:    21 20             		 r1 = [sp+128]			  ## Crypto_hash.c:75:20
    8606:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:75:5
    8608:    35 07             		r5 = b[r3++=0x1] (u)			  ## Crypto_hash.c:75:5
    860a:    c5 07             		b[r4++=0x1] = r5
                               	}			  ## Crypto_hash.c:75:5
    860c:    03 e1 39 20       	r3 = r2 + 0x39			  ## Crypto_hash.c:76:20
    8610:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:76:5
    8612:    14 07             		r4 = b[r1++=0x1] (u)			  ## Crypto_hash.c:76:5
    8614:    b4 07             		b[r3++=0x1] = r4
                               	}			  ## Crypto_hash.c:76:5
    8616:    8c 84             	r4 = sp + 4			  ## Crypto_hash.c:76:5
    8618:    41 38             	r1 = 0x18			  ## Crypto_hash.c:77:5
    861a:    4b 3f             	r3 = 0x3f			  ## Crypto_hash.c:77:5
    861c:    84 20             	[sp] = r4			  ## Crypto_hash.c:77:5
    861e:    80 ff 7a fc ff ff 	call -0x386 <hmacCompute : 829e >			  ## Crypto_hash.c:77:5
    8624:    20 21             	r0 = [sp+132]
    8626:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:78:5
    8628:    41 07             		r1 = b[r4++=0x1] (u)			  ## Crypto_hash.c:78:5
    862a:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:78:5
    862c:    02 99             	sp += 0x64
    862e:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:79:1


h2_hash_function:
    8630:    76 04             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:86:0
    8632:    e2 97             	sp += -0x24			  ## Crypto_hash.c:86:0
    8634:    34 16             	r4 = r3			  ## Crypto_hash.c:86:0
    8636:    25 16             	r5 = r2			  ## Crypto_hash.c:86:0
    8638:    12 16             	r2 = r1			  ## Crypto_hash.c:86:0
    863a:    8e 84             	r6 = sp + 4			  ## Crypto_hash.c:86:0
    863c:    49 20             	r1 = 0x20			  ## Crypto_hash.c:89:5
    863e:    43 24             	r3 = 0x4			  ## Crypto_hash.c:89:5
    8640:    86 20             	[sp] = r6			  ## Crypto_hash.c:89:5
    8642:    80 ff 56 fc ff ff 	call -0x3aa <hmacCompute : 829e >			  ## Crypto_hash.c:89:5
    8648:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:91:5
    864a:    5a 40             		 r2 = b[r5+0x0] (u)			  ## Crypto_hash.c:91:24
    864c:    61 16             	r1 = r6			  ## Crypto_hash.c:91:5
    864e:    80 ff e8 ba ff ff 	call -0x4518 <memmove : 413c >			  ## Crypto_hash.c:91:5
    8654:    02 89             	sp += 0x24
    8656:    56 04             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:92:1


h3_hash_function:
    8658:    76 04             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:101:0
    865a:    e2 91             	sp += -0x3c			  ## Crypto_hash.c:101:0
    865c:    ac 84             	r4 = sp + 36			  ## Crypto_hash.c:101:0
    865e:    45 16             	r5 = r4			  ## Crypto_hash.c:105:5
    8660:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:105:5
    8662:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:105:5
    8664:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:105:5
    8666:    49 84             	r1 = r4 + 0x4			  ## Crypto_hash.c:106:20
    8668:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:106:5
    866a:    25 07             		r5 = b[r2++=0x1] (u)			  ## Crypto_hash.c:106:5
    866c:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:106:5
    866e:    01 33             	r1 = [sp+76]
    8670:    4a 8a             	r2 = r4 + 0xa			  ## Crypto_hash.c:107:20
    8672:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:107:5
    8674:    35 07             		r5 = b[r3++=0x1] (u)			  ## Crypto_hash.c:107:5
    8676:    a5 07             		b[r2++=0x1] = r5
                               	}			  ## Crypto_hash.c:107:5
    8678:    4a 90             	r2 = r4 + 0x10			  ## Crypto_hash.c:108:20
    867a:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:108:5
    867c:    13 07             		r3 = b[r1++=0x1] (u)			  ## Crypto_hash.c:108:5
    867e:    a3 07             		b[r2++=0x1] = r3
                               	}			  ## Crypto_hash.c:108:5
    8680:    8d 84             	r5 = sp + 4			  ## Crypto_hash.c:108:5
    8682:    41 30             	r1 = 0x10			  ## Crypto_hash.c:109:5
    8684:    43 38             	r3 = 0x18			  ## Crypto_hash.c:109:5
    8686:    42 d6             	r2 = r4  #			  ## Crypto_hash.c:109:5
    8688:    85 20             		 [sp] = r5			  ## Crypto_hash.c:109:5
    868a:    80 ff 0e fc ff ff 	call -0x3f2 <hmacCompute : 829e >			  ## Crypto_hash.c:109:5
    8690:    00 34             	r0 = [sp+80]
    8692:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:110:5
    8694:    51 07             		r1 = b[r5++=0x1] (u)			  ## Crypto_hash.c:110:5
    8696:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:110:5
    8698:    02 8f             	sp += 0x3c
    869a:    56 04             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:111:1


h4_hash_function:
    869c:    76 04             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:120:0
    869e:    e2 93             	sp += -0x34			  ## Crypto_hash.c:120:0
    86a0:    ac 84             	r4 = sp + 36			  ## Crypto_hash.c:120:0
    86a2:    45 16             	r5 = r4			  ## Crypto_hash.c:124:5
    86a4:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:124:5
    86a6:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:124:5
    86a8:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:124:5
    86aa:    49 84             	r1 = r4 + 0x4			  ## Crypto_hash.c:125:20
    86ac:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:125:5
    86ae:    25 07             		r5 = b[r2++=0x1] (u)			  ## Crypto_hash.c:125:5
    86b0:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:125:5
    86b2:    49 8a             	r1 = r4 + 0xa			  ## Crypto_hash.c:126:20
    86b4:    10 85             	rep 0x4 0x6 {			  ## Crypto_hash.c:126:5
    86b6:    32 07             		r2 = b[r3++=0x1] (u)			  ## Crypto_hash.c:126:5
    86b8:    92 07             		b[r1++=0x1] = r2
                               	}			  ## Crypto_hash.c:126:5
    86ba:    8d 84             	r5 = sp + 4
    86bc:    41 30             	r1 = 0x10			  ## Crypto_hash.c:127:5
    86be:    43 30             	r3 = 0x10			  ## Crypto_hash.c:127:5
    86c0:    42 d6             	r2 = r4  #			  ## Crypto_hash.c:127:5
    86c2:    85 20             		 [sp] = r5			  ## Crypto_hash.c:127:5
    86c4:    80 ff d4 fb ff ff 	call -0x42c <hmacCompute : 829e >			  ## Crypto_hash.c:127:5
    86ca:    00 31             	r0 = [sp+68]
    86cc:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:128:5
    86ce:    51 07             		r1 = b[r5++=0x1] (u)			  ## Crypto_hash.c:128:5
    86d0:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:128:5
    86d2:    02 8d             	sp += 0x34
    86d4:    56 04             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:129:1


h5_hash_function:
    86d6:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:137:0
    86d8:    e2 8f             	sp += -0x44			  ## Crypto_hash.c:137:0
    86da:    ac 84             	r4 = sp + 36			  ## Crypto_hash.c:137:0
    86dc:    4d 88             	r5 = r4 + 0x8			  ## Crypto_hash.c:141:5
    86de:    1e 88             	r6 = r1 + 0x8			  ## Crypto_hash.c:141:5
    86e0:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:141:5
    86e2:    67 07             		r7 = b[r6++=0x1] (u)			  ## Crypto_hash.c:141:5
    86e4:    d7 07             		b[r5++=0x1] = r7
                               	}			  ## Crypto_hash.c:141:5
    86e6:    45 16             	r5 = r4			  ## Crypto_hash.c:141:5
    86e8:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:141:5
    86ea:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:141:5
    86ec:    d6 07             		b[r5++=0x1] = r6
                               	}			  ## Crypto_hash.c:141:5
    86ee:    49 90             	r1 = r4 + 0x10			  ## Crypto_hash.c:142:20
    86f0:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:142:5
    86f2:    25 07             		r5 = b[r2++=0x1] (u)			  ## Crypto_hash.c:142:5
    86f4:    95 07             		b[r1++=0x1] = r5
                               	}			  ## Crypto_hash.c:142:5
    86f6:    35 16             	r5 = r3
    86f8:    8e 84             	r6 = sp + 4
    86fa:    41 30             	r1 = 0x10			  ## Crypto_hash.c:143:5
    86fc:    4b 20             	r3 = 0x20			  ## Crypto_hash.c:143:5
    86fe:    42 d6             	r2 = r4  #			  ## Crypto_hash.c:143:5
    8700:    86 20             		 [sp] = r6			  ## Crypto_hash.c:143:5
    8702:    80 ff 96 fb ff ff 	call -0x46a <hmacCompute : 829e >			  ## Crypto_hash.c:143:5
    8708:    10 8f             	rep 0x4 0x10 {			  ## Crypto_hash.c:144:5
    870a:    60 07             		r0 = b[r6++=0x1] (u)			  ## Crypto_hash.c:144:5
    870c:    d0 07             		b[r5++=0x1] = r0
                               	}			  ## Crypto_hash.c:144:5
    870e:    02 91             	sp += 0x44
    8710:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:145:1


g_function:
    8712:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:149:0
    8714:    e2 8a             	sp += -0x58			  ## Crypto_hash.c:149:0
    8716:    cc 80             	r4 = sp + 64			  ## Crypto_hash.c:149:0
    8718:    46 16             	r6 = r4			  ## Crypto_hash.c:154:5
    871a:    ad 88             	r5 = sp + 40			  ## Crypto_hash.c:154:5
    871c:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:154:5
    871e:    07 07             		r7 = b[r0++=0x1] (u)			  ## Crypto_hash.c:154:5
    8720:    e7 07             		b[r6++=0x1] = r7
                               	}			  ## Crypto_hash.c:154:5
    8722:    50 16             	r0 = r5			  ## Crypto_hash.c:155:5
    8724:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:155:5
    8726:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:155:5
    8728:    86 07             		b[r0++=0x1] = r6
                               	}			  ## Crypto_hash.c:155:5
    872a:    8e 98             	r6 = sp + 24
    872c:    68 88             	r0 = r6 + 0x8			  ## Crypto_hash.c:156:5
    872e:    29 88             	r1 = r2 + 0x8			  ## Crypto_hash.c:156:5
    8730:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:156:5
    8732:    17 07             		r7 = b[r1++=0x1] (u)			  ## Crypto_hash.c:156:5
    8734:    87 07             		b[r0++=0x1] = r7
                               	}			  ## Crypto_hash.c:156:5
    8736:    60 16             	r0 = r6			  ## Crypto_hash.c:156:5
    8738:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:156:5
    873a:    21 07             		r1 = b[r2++=0x1] (u)			  ## Crypto_hash.c:156:5
    873c:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:156:5
    873e:    8f 88             	r7 = sp + 8
    8740:    78 88             	r0 = r7 + 0x8			  ## Crypto_hash.c:157:5
    8742:    39 88             	r1 = r3 + 0x8			  ## Crypto_hash.c:157:5
    8744:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:157:5
    8746:    12 07             		r2 = b[r1++=0x1] (u)			  ## Crypto_hash.c:157:5
    8748:    82 07             		b[r0++=0x1] = r2
                               	}			  ## Crypto_hash.c:157:5
    874a:    70 16             	r0 = r7			  ## Crypto_hash.c:157:5
    874c:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:157:5
    874e:    31 07             		r1 = b[r3++=0x1] (u)			  ## Crypto_hash.c:157:5
    8750:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:157:5
    8752:    41 38             	r1 = 0x18			  ## Crypto_hash.c:158:5
    8754:    40 16             	r0 = r4			  ## Crypto_hash.c:158:5
    8756:    80 ff 64 52 00 00 	call 0x5264 <endian_change : d9c0 >			  ## Crypto_hash.c:158:5
    875c:    41 38             	r1 = 0x18			  ## Crypto_hash.c:159:5
    875e:    50 16             	r0 = r5			  ## Crypto_hash.c:159:5
    8760:    80 ff 5a 52 00 00 	call 0x525a <endian_change : d9c0 >			  ## Crypto_hash.c:159:5
    8766:    41 30             	r1 = 0x10			  ## Crypto_hash.c:160:5
    8768:    60 16             	r0 = r6			  ## Crypto_hash.c:160:5
    876a:    80 ff 50 52 00 00 	call 0x5250 <endian_change : d9c0 >			  ## Crypto_hash.c:160:5
    8770:    41 30             	r1 = 0x10			  ## Crypto_hash.c:161:5
    8772:    70 16             	r0 = r7			  ## Crypto_hash.c:161:5
    8774:    80 ff 46 52 00 00 	call 0x5246 <endian_change : d9c0 >			  ## Crypto_hash.c:161:5
    877a:    88 84             	r0 = sp + 4			  ## Crypto_hash.c:161:5
    877c:    40 d5             	r1_r0 = r5_r4  #			  ## Crypto_hash.c:164:5
    877e:    80 20             		 [sp] = r0			  ## Crypto_hash.c:164:5
    8780:    62 15             	r3_r2 = r7_r6			  ## Crypto_hash.c:164:5
    8782:    bf ea ce fe       	call -0x264 <g_hash_function : 8522 >			  ## Crypto_hash.c:164:5
    8786:    dc e9 06 00       	r0 = b[sp+6] (u)			  ## Crypto_hash.c:165:26
    878a:    dc e9 07 10       	r1 = b[sp+7] (u)			  ## Crypto_hash.c:165:16
    878e:    dc e9 05 20       	r2 = b[sp+5] (u)			  ## Crypto_hash.c:165:42
    8792:    dc e9 04 30       	r3 = b[sp+4] (u)			  ## Crypto_hash.c:165:59
    8796:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:165:23
    879a:    a1 e1 20 28       	r1 <= insert(r2, p:0x10, l:0x8)			  ## Crypto_hash.c:165:39
    879e:    a1 e1 20 3c       	r1 <= insert(r3, p:0x18, l:0x8)			  ## Crypto_hash.c:165:56
    87a2:    c0 ff 40 42 0f 00 	r0 = 0xf4240 <$data.__3 : f4240 >			  ## Crypto_hash.c:166:14
    87a8:    f4 e1 10 20       	r2 = r1 / r0 (u)			  ## Crypto_hash.c:166:14
    87ac:    20 1b             	r0 *= r2			  ## Crypto_hash.c:166:14
    87ae:    10 1e             	r0 = r1 - r0			  ## Crypto_hash.c:166:14
    87b0:    02 96             	sp += 0x58
    87b2:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:167:5


f1_function:
    87b4:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:172:0
    87b6:    e2 8e             	sp += -0x48			  ## Crypto_hash.c:172:0
    87b8:    ac 90             	r4 = sp + 48			  ## Crypto_hash.c:172:0
    87ba:    46 16             	r6 = r4			  ## Crypto_hash.c:177:5
    87bc:    8d 98             	r5 = sp + 24			  ## Crypto_hash.c:177:5
    87be:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:177:5
    87c0:    07 07             		r7 = b[r0++=0x1] (u)			  ## Crypto_hash.c:177:5
    87c2:    e7 07             		b[r6++=0x1] = r7
                               	}			  ## Crypto_hash.c:177:5
    87c4:    50 16             	r0 = r5			  ## Crypto_hash.c:178:5
    87c6:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:178:5
    87c8:    16 07             		r6 = b[r1++=0x1] (u)			  ## Crypto_hash.c:178:5
    87ca:    86 07             		b[r0++=0x1] = r6
                               	}			  ## Crypto_hash.c:178:5
    87cc:    8e 88             	r6 = sp + 8
    87ce:    68 88             	r0 = r6 + 0x8			  ## Crypto_hash.c:179:5
    87d0:    29 88             	r1 = r2 + 0x8			  ## Crypto_hash.c:179:5
    87d2:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:179:5
    87d4:    17 07             		r7 = b[r1++=0x1] (u)			  ## Crypto_hash.c:179:5
    87d6:    87 07             		b[r0++=0x1] = r7
                               	}			  ## Crypto_hash.c:179:5
    87d8:    60 16             	r0 = r6			  ## Crypto_hash.c:179:5
    87da:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:179:5
    87dc:    21 07             		r1 = b[r2++=0x1] (u)			  ## Crypto_hash.c:179:5
    87de:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:179:5
    87e0:    38 40             	r0 = b[r3+0x0] (u)			  ## Crypto_hash.c:180:5
    87e2:    de e9 07 00       	b[sp+7] = r0			  ## Crypto_hash.c:180:5
    87e6:    41 38             	r1 = 0x18			  ## Crypto_hash.c:181:5
    87e8:    40 16             	r0 = r4			  ## Crypto_hash.c:181:5
    87ea:    80 ff d0 51 00 00 	call 0x51d0 <endian_change : d9c0 >			  ## Crypto_hash.c:181:5
    87f0:    41 38             	r1 = 0x18			  ## Crypto_hash.c:182:5
    87f2:    50 16             	r0 = r5			  ## Crypto_hash.c:182:5
    87f4:    80 ff c6 51 00 00 	call 0x51c6 <endian_change : d9c0 >			  ## Crypto_hash.c:182:5
    87fa:    41 30             	r1 = 0x10			  ## Crypto_hash.c:183:5
    87fc:    60 16             	r0 = r6			  ## Crypto_hash.c:183:5
    87fe:    80 ff bc 51 00 00 	call 0x51bc <endian_change : d9c0 >			  ## Crypto_hash.c:183:5
    8804:    40 d5             	r1_r0 = r5_r4  #			  ## Crypto_hash.c:185:5
    8806:    07 37             		 r7 = [sp+92]			  ## Crypto_hash.c:185:5
    8808:    8b 87             	r3 = sp + 7			  ## Crypto_hash.c:185:5
    880a:    62 d6             	r2 = r6  #			  ## Crypto_hash.c:185:5
    880c:    87 20             		 [sp] = r7			  ## Crypto_hash.c:185:5
    880e:    bf ea 6b fe       	call -0x32a <f1_hash_function : 84e8 >			  ## Crypto_hash.c:185:5
    8812:    41 30             	r1 = 0x10			  ## Crypto_hash.c:186:5
    8814:    70 16             	r0 = r7			  ## Crypto_hash.c:186:5
    8816:    80 ff a4 51 00 00 	call 0x51a4 <endian_change : d9c0 >			  ## Crypto_hash.c:186:5
    881c:    02 92             	sp += 0x48			  ## Crypto_hash.c:186:5
    881e:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:187:1


f2_function:
    8820:    79 04             	[--sp] = {rets, r9-r4}			  ## Crypto_hash.c:190:0
    8822:    e2 8a             	sp += -0x58			  ## Crypto_hash.c:190:0
    8824:    c4 ff 62 74 6c 6b 	r4 = 0x6b6c7462 <RAM_LIMIT_H+0x6B527462 : 6b6c7462 >			  ## Crypto_hash.c:194:8
    882a:    f8 e8 40 80       	r8 = sp + 64			  ## Crypto_hash.c:194:8
    882e:    84 d6             	r4 = r8  #			  ## Crypto_hash.c:197:5
    8830:    84 27             		 [sp+28] = r4			  ## Crypto_hash.c:194:8
    8832:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:197:5
    8834:    05 07             		r5 = b[r0++=0x1] (u)			  ## Crypto_hash.c:197:5
    8836:    c5 07             		b[r4++=0x1] = r5
                               	}			  ## Crypto_hash.c:197:5
    8838:    f8 e8 30 90       	r9 = sp + 48
    883c:    00 e1 08 90       	r0 = r9 + 0x8			  ## Crypto_hash.c:198:5
    8840:    1c 88             	r4 = r1 + 0x8			  ## Crypto_hash.c:198:5
    8842:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:198:5
    8844:    45 07             		r5 = b[r4++=0x1] (u)			  ## Crypto_hash.c:198:5
    8846:    85 07             		b[r0++=0x1] = r5
                               	}			  ## Crypto_hash.c:198:5
    8848:    90 16             	r0 = r9			  ## Crypto_hash.c:198:5
    884a:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:198:5
    884c:    14 07             		r4 = b[r1++=0x1] (u)			  ## Crypto_hash.c:198:5
    884e:    84 07             		b[r0++=0x1] = r4
                               	}			  ## Crypto_hash.c:198:5
    8850:    ae 80             	r6 = sp + 32
    8852:    68 88             	r0 = r6 + 0x8			  ## Crypto_hash.c:199:5
    8854:    29 88             	r1 = r2 + 0x8			  ## Crypto_hash.c:199:5
    8856:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:199:5
    8858:    14 07             		r4 = b[r1++=0x1] (u)			  ## Crypto_hash.c:199:5
    885a:    84 07             		b[r0++=0x1] = r4
                               	}			  ## Crypto_hash.c:199:5
    885c:    60 16             	r0 = r6			  ## Crypto_hash.c:199:5
    885e:    8f 94             	r7 = sp + 20			  ## Crypto_hash.c:199:5
    8860:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:199:5
    8862:    21 07             		r1 = b[r2++=0x1] (u)			  ## Crypto_hash.c:199:5
    8864:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:199:5
    8866:    70 16             	r0 = r7			  ## Crypto_hash.c:200:5
    8868:    31 16             	r1 = r3			  ## Crypto_hash.c:200:5
    886a:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:200:5
    886c:    12 07             		r2 = b[r1++=0x1] (u)			  ## Crypto_hash.c:200:5
    886e:    82 07             		b[r0++=0x1] = r2
                               	}			  ## Crypto_hash.c:200:5
    8870:    38 45             	r0 = b[r3+0x5] (u)			  ## Crypto_hash.c:200:5
    8872:    39 44             	r1 = b[r3+0x4] (u)			  ## Crypto_hash.c:200:5
    8874:    a1 f1 60 04       	r1 <= insert(r0, p:0x8, l:0x18)  #			  ## Crypto_hash.c:200:5
    8878:    02 3d             		 r2 = [sp+116]			  ## Crypto_hash.c:200:5
    887a:    8c 8c             	r4 = sp + 12			  ## Crypto_hash.c:200:5
    887c:    d8 e9 19 10       	h[sp+24] = r1			  ## Crypto_hash.c:200:5
    8880:    40 16             	r0 = r4			  ## Crypto_hash.c:201:5
    8882:    21 16             	r1 = r2			  ## Crypto_hash.c:201:5
    8884:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:201:5
    8886:    13 07             		r3 = b[r1++=0x1] (u)			  ## Crypto_hash.c:201:5
    8888:    83 07             		b[r0++=0x1] = r3
                               	}			  ## Crypto_hash.c:201:5
    888a:    28 45             	r0 = b[r2+0x5] (u)			  ## Crypto_hash.c:201:5
    888c:    29 44             	r1 = b[r2+0x4] (u)			  ## Crypto_hash.c:201:5
    888e:    a1 e1 60 04       	r1 <= insert(r0, p:0x8, l:0x18)			  ## Crypto_hash.c:201:5
    8892:    d8 e9 11 10       	h[sp+16] = r1			  ## Crypto_hash.c:201:5
    8896:    41 38             	r1 = 0x18			  ## Crypto_hash.c:203:5
    8898:    80 16             	r0 = r8			  ## Crypto_hash.c:203:5
    889a:    80 ff 20 51 00 00 	call 0x5120 <endian_change : d9c0 >			  ## Crypto_hash.c:203:5
    88a0:    41 30             	r1 = 0x10			  ## Crypto_hash.c:204:5
    88a2:    90 16             	r0 = r9			  ## Crypto_hash.c:204:5
    88a4:    80 ff 16 51 00 00 	call 0x5116 <endian_change : d9c0 >			  ## Crypto_hash.c:204:5
    88aa:    41 30             	r1 = 0x10			  ## Crypto_hash.c:205:5
    88ac:    60 16             	r0 = r6			  ## Crypto_hash.c:205:5
    88ae:    80 ff 0c 51 00 00 	call 0x510c <endian_change : d9c0 >			  ## Crypto_hash.c:205:5
    88b4:    41 26             	r1 = 0x6			  ## Crypto_hash.c:206:5
    88b6:    70 16             	r0 = r7			  ## Crypto_hash.c:206:5
    88b8:    80 ff 02 51 00 00 	call 0x5102 <endian_change : d9c0 >			  ## Crypto_hash.c:206:5
    88be:    41 26             	r1 = 0x6			  ## Crypto_hash.c:207:5
    88c0:    40 16             	r0 = r4			  ## Crypto_hash.c:207:5
    88c2:    80 ff f8 50 00 00 	call 0x50f8 <endian_change : d9c0 >			  ## Crypto_hash.c:207:5
    88c8:    80 d5             	r1_r0 = r9_r8  #			  ## Crypto_hash.c:208:5
    88ca:    05 3e             		 r5 = [sp+120]			  ## Crypto_hash.c:208:5
    88cc:    d0 e9 05 40       	d[sp+4] = r5_r4			  ## Crypto_hash.c:208:5
    88d0:    8b 9c             	r3 = sp + 28			  ## Crypto_hash.c:208:5
    88d2:    62 d6             	r2 = r6  #			  ## Crypto_hash.c:208:5
    88d4:    87 20             		 [sp] = r7			  ## Crypto_hash.c:208:5
    88d6:    bf ea 47 fe       	call -0x372 <f2_hash_function : 8568 >			  ## Crypto_hash.c:208:5
    88da:    41 30             	r1 = 0x10			  ## Crypto_hash.c:209:5
    88dc:    50 16             	r0 = r5			  ## Crypto_hash.c:209:5
    88de:    80 ff dc 50 00 00 	call 0x50dc <endian_change : d9c0 >			  ## Crypto_hash.c:209:5
    88e4:    02 96             	sp += 0x58			  ## Crypto_hash.c:209:5
    88e6:    59 04             	{pc, r9-r4} = [sp++]			  ## Crypto_hash.c:210:1


f3_function:
    88e8:    7b 04             	[--sp] = {rets, r11-r4}			  ## Crypto_hash.c:213:0
    88ea:    e2 85             	sp += -0x6c			  ## Crypto_hash.c:213:0
    88ec:    f8 e8 54 80       	r8 = sp + 84			  ## Crypto_hash.c:213:0
    88f0:    84 16             	r4 = r8			  ## Crypto_hash.c:221:5
    88f2:    10 97             	rep 0x4 0x18 {			  ## Crypto_hash.c:221:5
    88f4:    05 07             		r5 = b[r0++=0x1] (u)			  ## Crypto_hash.c:221:5
    88f6:    c5 07             		b[r4++=0x1] = r5
                               	}			  ## Crypto_hash.c:221:5
    88f8:    f8 e8 44 90       	r9 = sp + 68
    88fc:    00 e1 08 90       	r0 = r9 + 0x8			  ## Crypto_hash.c:222:5
    8900:    1c 88             	r4 = r1 + 0x8			  ## Crypto_hash.c:222:5
    8902:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:222:5
    8904:    45 07             		r5 = b[r4++=0x1] (u)			  ## Crypto_hash.c:222:5
    8906:    85 07             		b[r0++=0x1] = r5
                               	}			  ## Crypto_hash.c:222:5
    8908:    90 16             	r0 = r9			  ## Crypto_hash.c:222:5
    890a:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:222:5
    890c:    14 07             		r4 = b[r1++=0x1] (u)			  ## Crypto_hash.c:222:5
    890e:    84 07             		b[r0++=0x1] = r4
                               	}			  ## Crypto_hash.c:222:5
    8910:    f8 e8 34 a0       	r10 = sp + 52
    8914:    00 e1 08 a0       	r0 = r10 + 0x8			  ## Crypto_hash.c:223:5
    8918:    29 88             	r1 = r2 + 0x8			  ## Crypto_hash.c:223:5
    891a:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:223:5
    891c:    14 07             		r4 = b[r1++=0x1] (u)			  ## Crypto_hash.c:223:5
    891e:    84 07             		b[r0++=0x1] = r4
                               	}			  ## Crypto_hash.c:223:5
    8920:    a0 16             	r0 = r10			  ## Crypto_hash.c:223:5
    8922:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:223:5
    8924:    21 07             		r1 = b[r2++=0x1] (u)			  ## Crypto_hash.c:223:5
    8926:    81 07             		b[r0++=0x1] = r1
                               	}			  ## Crypto_hash.c:223:5
    8928:    f8 e8 24 b0       	r11 = sp + 36
    892c:    00 f1 08 b0       	r0 = r11 + 0x8  #			  ## Crypto_hash.c:224:5
    8930:    21 24             		 r1 = [sp+144]			  ## Crypto_hash.c:224:5
    8932:    3a 88             	r2 = r3 + 0x8			  ## Crypto_hash.c:224:5
    8934:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:224:5
    8936:    24 07             		r4 = b[r2++=0x1] (u)			  ## Crypto_hash.c:224:5
    8938:    84 07             		b[r0++=0x1] = r4
                               	}			  ## Crypto_hash.c:224:5
    893a:    b0 16             	r0 = r11			  ## Crypto_hash.c:224:5
    893c:    10 87             	rep 0x4 0x8 {			  ## Crypto_hash.c:224:5
    893e:    32 07             		r2 = b[r3++=0x1] (u)			  ## Crypto_hash.c:224:5
    8940:    82 07             		b[r0++=0x1] = r2
                               	}			  ## Crypto_hash.c:224:5
    8942:    18 42             	r0 = b[r1+0x2] (u)			  ## Crypto_hash.c:225:5
    8944:    de e9 22 00       	b[sp+34] = r0			  ## Crypto_hash.c:225:5
    8948:    18 41             	r0 = b[r1+0x1] (u)			  ## Crypto_hash.c:225:5
    894a:    19 40             	r1 = b[r1+0x0] (u)			  ## Crypto_hash.c:225:5
    894c:    a1 f1 60 04       	r1 <= insert(r0, p:0x8, l:0x18)  #			  ## Crypto_hash.c:225:5
    8950:    22 25             		 r2 = [sp+148]			  ## Crypto_hash.c:225:5
    8952:    8c 98             	r4 = sp + 24			  ## Crypto_hash.c:225:5
    8954:    d8 e9 21 10       	h[sp+32] = r1			  ## Crypto_hash.c:225:5
    8958:    40 16             	r0 = r4			  ## Crypto_hash.c:226:5
    895a:    21 16             	r1 = r2			  ## Crypto_hash.c:226:5
    895c:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:226:5
    895e:    13 07             		r3 = b[r1++=0x1] (u)			  ## Crypto_hash.c:226:5
    8960:    83 07             		b[r0++=0x1] = r3
                               	}			  ## Crypto_hash.c:226:5
    8962:    28 45             	r0 = b[r2+0x5] (u)			  ## Crypto_hash.c:226:5
    8964:    29 44             	r1 = b[r2+0x4] (u)			  ## Crypto_hash.c:226:5
    8966:    a1 f1 60 04       	r1 <= insert(r0, p:0x8, l:0x18)  #			  ## Crypto_hash.c:226:5
    896a:    22 26             		 r2 = [sp+152]			  ## Crypto_hash.c:226:5
    896c:    8d 90             	r5 = sp + 16			  ## Crypto_hash.c:226:5
    896e:    d8 e9 1d 10       	h[sp+28] = r1			  ## Crypto_hash.c:226:5
    8972:    50 16             	r0 = r5			  ## Crypto_hash.c:227:5
    8974:    21 16             	r1 = r2			  ## Crypto_hash.c:227:5
    8976:    10 83             	rep 0x4 0x4 {			  ## Crypto_hash.c:227:5
    8978:    13 07             		r3 = b[r1++=0x1] (u)			  ## Crypto_hash.c:227:5
    897a:    83 07             		b[r0++=0x1] = r3
                               	}			  ## Crypto_hash.c:227:5
    897c:    28 45             	r0 = b[r2+0x5] (u)			  ## Crypto_hash.c:227:5
    897e:    29 44             	r1 = b[r2+0x4] (u)			  ## Crypto_hash.c:227:5
    8980:    a1 e1 60 04       	r1 <= insert(r0, p:0x8, l:0x18)			  ## Crypto_hash.c:227:5
    8984:    d8 e9 15 10       	h[sp+20] = r1			  ## Crypto_hash.c:227:5
    8988:    41 38             	r1 = 0x18			  ## Crypto_hash.c:229:5
    898a:    80 16             	r0 = r8			  ## Crypto_hash.c:229:5
    898c:    80 ff 2e 50 00 00 	call 0x502e <endian_change : d9c0 >			  ## Crypto_hash.c:229:5
    8992:    41 30             	r1 = 0x10			  ## Crypto_hash.c:230:5
    8994:    90 16             	r0 = r9			  ## Crypto_hash.c:230:5
    8996:    80 ff 24 50 00 00 	call 0x5024 <endian_change : d9c0 >			  ## Crypto_hash.c:230:5
    899c:    41 30             	r1 = 0x10			  ## Crypto_hash.c:231:5
    899e:    a0 16             	r0 = r10			  ## Crypto_hash.c:231:5
    89a0:    80 ff 1a 50 00 00 	call 0x501a <endian_change : d9c0 >			  ## Crypto_hash.c:231:5
    89a6:    41 30             	r1 = 0x10			  ## Crypto_hash.c:232:5
    89a8:    b0 16             	r0 = r11			  ## Crypto_hash.c:232:5
    89aa:    80 ff 10 50 00 00 	call 0x5010 <endian_change : d9c0 >			  ## Crypto_hash.c:232:5
    89b0:    ae 80             	r6 = sp + 32			  ## Crypto_hash.c:232:5
    89b2:    41 23             	r1 = 0x3			  ## Crypto_hash.c:233:5
    89b4:    60 16             	r0 = r6			  ## Crypto_hash.c:233:5
    89b6:    80 ff 04 50 00 00 	call 0x5004 <endian_change : d9c0 >			  ## Crypto_hash.c:233:5
    89bc:    41 26             	r1 = 0x6			  ## Crypto_hash.c:234:5
    89be:    40 16             	r0 = r4			  ## Crypto_hash.c:234:5
    89c0:    80 ff fa 4f 00 00 	call 0x4ffa <endian_change : d9c0 >			  ## Crypto_hash.c:234:5
    89c6:    41 26             	r1 = 0x6			  ## Crypto_hash.c:235:5
    89c8:    50 16             	r0 = r5			  ## Crypto_hash.c:235:5
    89ca:    80 ff f0 4f 00 00 	call 0x4ff0 <endian_change : d9c0 >			  ## Crypto_hash.c:235:5
    89d0:    80 d5             	r1_r0 = r9_r8  #			  ## Crypto_hash.c:236:5
    89d2:    27 27             		 r7 = [sp+156]			  ## Crypto_hash.c:236:5
    89d4:    a2 d5             	r3_r2 = r11_r10  #			  ## Crypto_hash.c:236:5
    89d6:    87 23             		 [sp+12] = r7			  ## Crypto_hash.c:236:5
    89d8:    d0 e9 05 40       	d[sp+4] = r5_r4			  ## Crypto_hash.c:236:5
    89dc:    86 20             	[sp] = r6			  ## Crypto_hash.c:236:5
    89de:    bf ea f2 fd       	call -0x41c <f3_hash_function : 85c6 >			  ## Crypto_hash.c:236:5
    89e2:    41 30             	r1 = 0x10			  ## Crypto_hash.c:237:5
    89e4:    70 16             	r0 = r7			  ## Crypto_hash.c:237:5
    89e6:    80 ff d4 4f 00 00 	call 0x4fd4 <endian_change : d9c0 >			  ## Crypto_hash.c:237:5
    89ec:    02 9b             	sp += 0x6c			  ## Crypto_hash.c:237:5
    89ee:    5b 04             	{pc, r11-r4} = [sp++]			  ## Crypto_hash.c:238:1


padding:
    89f0:	 80 00 00 00 00 00 00 00         ........
    89f8:	 00 00 00 00 00 00 00 00         ........
    8a00:	 00 00 00 00 00 00 00 00         ........
    8a08:	 00 00 00 00 00 00 00 00         ........
    8a10:	 00 00 00 00 00 00 00 00         ........
    8a18:	 00 00 00 00 00 00 00 00         ........
    8a20:	 00 00 00 00 00 00 00 00         ........
    8a28:	 00 00 00 00 00 00 00 00         ........


k:
    8a30:	 98 2f 8a 42 91 44 37 71         ./.B.D7q
    8a38:	 cf fb c0 b5 a5 db b5 e9         ........
    8a40:	 5b c2 56 39 f1 11 f1 59         [.V9...Y
    8a48:	 a4 82 3f 92 d5 5e 1c ab         ..?..^..
    8a50:	 98 aa 07 d8 01 5b 83 12         .....[..
    8a58:	 be 85 31 24 c3 7d 0c 55         ..1$.}.U
    8a60:	 74 5d be 72 fe b1 de 80         t].r....
    8a68:	 a7 06 dc 9b 74 f1 9b c1         ....t...
    8a70:	 c1 69 9b e4 86 47 be ef         .i...G..
    8a78:	 c6 9d c1 0f cc a1 0c 24         .......$
    8a80:	 6f 2c e9 2d aa 84 74 4a         o,.-..tJ
    8a88:	 dc a9 b0 5c da 88 f9 76         ...\...v
    8a90:	 52 51 3e 98 6d c6 31 a8         RQ>.m.1.
    8a98:	 c8 27 03 b0 c7 7f 59 bf         .'....Y.
    8aa0:	 f3 0b e0 c6 47 91 a7 d5         ....G...
    8aa8:	 51 63 ca 06 67 29 29 14         Qc..g)).
    8ab0:	 85 0a b7 27 38 21 1b 2e         ...'8!..
    8ab8:	 fc 6d 2c 4d 13 0d 38 53         .m,M..8S
    8ac0:	 54 73 0a 65 bb 0a 6a 76         Ts.e..jv
    8ac8:	 2e c9 c2 81 85 2c 72 92         .....,r.
    8ad0:	 a1 e8 bf a2 4b 66 1a a8         ....Kf..
    8ad8:	 70 8b 4b c2 a3 51 6c c7         p.K..Ql.
    8ae0:	 19 e8 92 d1 24 06 99 d6         ....$...
    8ae8:	 85 35 0e f4 70 a0 6a 10         .5..p.j.
    8af0:	 16 c1 a4 19 08 6c 37 1e         .....l7.
    8af8:	 4c 77 48 27 b5 bc b0 34         LwH'...4
    8b00:	 b3 0c 1c 39 4a aa d8 4e         ...9J..N
    8b08:	 4f ca 9c 5b f3 6f 2e 68         O..[.o.h
    8b10:	 ee 82 8f 74 6f 63 a5 78         ...toc.x
    8b18:	 14 78 c8 84 08 02 c7 8c         .x......
    8b20:	 fa ff be 90 eb 6c 50 a4         .....lP.
    8b28:	 f7 a3 f9 be f2 78 71 c6         .....xq.


sha256HashAlgo:
    8b30:	 0d f6 01 00 58 8b 00 00         ....X...
    8b38:	 09 00 00 00 2c 01 00 00         ....,...
    8b40:	 40 00 00 00 20 00 00 00         @... ...
    8b48:	 2a 84 00 00 98 84 00 00         *.......
    8b50:	 d8 81 00 00 3a 82 00 00         ....:...


sha256Oid:
    8b58:	 60 86 48 01 65 03 04 02         `.H.e...
    8b60:	 01 00                           ..


vli_isZero:
    8b62:    41 20             	r1 = 0x0			  ## uECC.c:515:0
    8b64:    01 fc 06 0a       	if (r1 > 0x5) goto 0xc <vli_isZero+0x12 : 8b74 >			  ## uECC.c:515:0
    8b68:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## uECC.c:518:13
    8b6c:    c1 21             	r1 += 0x1			  ## uECC.c:517:33
    8b6e:    72 5a             	if (r2 == 0) goto -0xc <vli_isZero+0x2 : 8b64 >
    8b70:    40 20             	r0 = 0x0
    8b72:    80 00             	rts			  ## uECC.c:523:1
    8b74:    40 21             	r0 = 0x1
    8b76:    80 00             	rts			  ## uECC.c:523:1


vli_bytesToNative:
    8b78:    76 04             	[--sp] = {rets, r6-r4}			  ## uECC.c:2247:0
    8b7a:    42 20             	r2 = 0x0			  ## uECC.c:2247:0
    8b7c:    04 8e             	goto 0x1c <vli_bytesToNative+0x22 : 8b9a >			  ## uECC.c:2247:0
    8b7e:    93 1c             	r3 = r1 + r2			  ## uECC.c:2251:32
    8b80:    c3 34             	r3 += 0x14			  ## uECC.c:2251:32
    8b82:    3c 40             	r4 = b[r3+0x0] (u)			  ## uECC.c:2251:22
    8b84:    3d 41             	r5 = b[r3+0x1] (u)			  ## uECC.c:2251:51
    8b86:    3e 42             	r6 = b[r3+0x2] (u)			  ## uECC.c:2252:22
    8b88:    44 b8             	r4 = r4 << 0x18			  ## uECC.c:2251:41
    8b8a:    a4 f1 20 58       	r4 <= insert(r5, p:0x10, l:0x8)  #			  ## uECC.c:2251:48
    8b8e:    3b 43             		 r3 = b[r3+0x3] (u)			  ## uECC.c:2252:49
    8b90:    a4 e1 20 64       	r4 <= insert(r6, p:0x8, l:0x8)			  ## uECC.c:2251:77
    8b94:    43 19             	r3 |= r4			  ## uECC.c:2252:47
    8b96:    83 05             	[r0++=0x4] = r3			  ## uECC.c:2251:19
    8b98:    fa 3c             	r2 += -0x4			  ## uECC.c:2249:5
    8b9a:    f2 f8 f0 d1       	if (r2 != -0x18) goto -0x20 <vli_bytesToNative+0x6 : 8b7e >
    8b9e:    56 04             	{pc, r6-r4} = [sp++]			  ## uECC.c:2254:1


vli_add:
    8ba0:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:623:0
    8ba2:    44 20             	r4 = 0x0			  ## uECC.c:623:0
    8ba4:    43 20             	r3 = 0x0			  ## uECC.c:623:0
    8ba6:    04 90             	goto 0x20 <vli_add+0x28 : 8bc8 >			  ## uECC.c:623:0
    8ba8:    d8 ec 1a 54       	r5 = [r1+r4<<2]			  ## uECC.c:627:27
    8bac:    d8 ec 2a 64       	r6 = [r2+r4<<2]			  ## uECC.c:627:37
    8bb0:    df 1c             	r7 = r5 + r3			  ## uECC.c:627:35
    8bb2:    76 18             	r6 += r7			  ## uECC.c:627:46
    8bb4:    d8 ec 0b 64       	[r0+r4<<2] = r6			  ## uECC.c:631:19
    8bb8:    47 21             	r7 = 0x1			  ## uECC.c:631:19
    8bba:    16 e9 00 05       	if (r6 >= r5) {			  ## uECC.c:631:19
    8bbe:    47 20             		r7 = 0x0
                               	}			  ## uECC.c:629:26
    8bc0:    96 e8 00 05       	if (r6 != r5) {			  ## uECC.c:629:26
    8bc4:    73 16             		r3 = r7
                               	}			  ## uECC.c:628:13
    8bc6:    c4 21             	r4 += 0x1			  ## uECC.c:626:33
    8bc8:    84 f8 ee 0d       	if (r4 != 0x6) goto -0x24 <vli_add+0x8 : 8ba8 >
    8bcc:    30 16             	r0 = r3			  ## uECC.c:633:5
    8bce:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:633:5


vli_set:
    8bd0:    42 20             	r2 = 0x0			  ## uECC.c:570:0
    8bd2:    04 85             	goto 0xa <vli_set+0xE : 8bde >			  ## uECC.c:570:0
    8bd4:    d8 ec 1a 32       	r3 = [r1+r2<<2]			  ## uECC.c:573:19
    8bd8:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## uECC.c:573:17
    8bdc:    c2 21             	r2 += 0x1			  ## uECC.c:572:33
    8bde:    82 f8 f9 0d       	if (r2 != 0x6) goto -0xe <vli_set+0x4 : 8bd4 >
    8be2:    80 00             	rts			  ## uECC.c:575:1


vli_clear:
    8be4:    41 20             	r1 = 0x0			  ## uECC.c:504:0
    8be6:    42 20             	r2 = 0x0			  ## uECC.c:504:0
    8be8:    04 83             	goto 0x6 <vli_clear+0xC : 8bf0 >			  ## uECC.c:504:0
    8bea:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## uECC.c:507:16
    8bee:    c2 21             	r2 += 0x1			  ## uECC.c:506:33
    8bf0:    82 f8 fb 0d       	if (r2 != 0x6) goto -0xa <vli_clear+0x6 : 8bea >
    8bf4:    80 00             	rts			  ## uECC.c:509:1


muladd:
    8bf6:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:660:0
    8bf8:    37 60             	r7 = [r3+0x0] 			  ## uECC.c:688:40
    8bfa:    26 60             	r6 = [r2+0x0] 			  ## uECC.c:688:66
    8bfc:    64 15             	r5_r4 = r7_r6
    8bfe:    fc e1 10 40       	r5_r4 += r1 * r0 (u)
    8c02:    c0 1f             	r0 = r4 - r6
    8c04:    b8 e0 52 07       	r0 = r5 - r7 - !c
    8c08:    64 e0 00 15       	r1 = psr
    8c0c:    40 21             	r0 = 0x1
    8c0e:    31 ea 02 00       	if ((r1 & 0x2) != 0) {
    8c12:    40 20             		r0 = 0x0
                               	}
    8c14:    01 25             	r1 = [sp+20]
    8c16:    68 e8 00 10       	[r1+0x0] += r0			  ## uECC.c:690:9
    8c1a:    b5 60             	[r3+0x0] = r5			  ## uECC.c:691:9
    8c1c:    a4 60             	[r2+0x0] = r4			  ## uECC.c:692:9
    8c1e:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:694:1


vli_cmp:
    8c20:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:581:0
    8c22:    42 25             	r2 = 0x5			  ## uECC.c:581:0
    8c24:    82 fd 0b 00       	ifs (r2 < 0x0) goto 0x16 <vli_cmp+0x1E : 8c3e >			  ## uECC.c:581:0
    8c28:    d8 ec 1a 32       	r3 = [r1+r2<<2]			  ## uECC.c:584:23
    8c2c:    d8 ec 0a 42       	r4 = [r0+r2<<2]			  ## uECC.c:584:13
    8c30:    03 ec 07 40       	if (r4 > r3) goto 0xe <vli_cmp+0x22 : 8c42 >			  ## uECC.c:584:13
    8c34:    fa 3f             	r2 += -0x1			  ## uECC.c:583:38
    8c36:    03 e9 f5 41       	if (r4 >= r3) goto -0x16 <vli_cmp+0x4 : 8c24 >
    8c3a:    10 3f             	r0 = -0x1
    8c3c:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:591:1
    8c3e:    40 20             	r0 = 0x0
    8c40:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:591:1
    8c42:    40 21             	r0 = 0x1
    8c44:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:591:1


vli_sub:
    8c46:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:640:0
    8c48:    44 20             	r4 = 0x0			  ## uECC.c:640:0
    8c4a:    43 20             	r3 = 0x0			  ## uECC.c:640:0
    8c4c:    04 90             	goto 0x20 <vli_sub+0x28 : 8c6e >			  ## uECC.c:640:0
    8c4e:    d8 ec 2a 64       	r6 = [r2+r4<<2]			  ## uECC.c:644:38
    8c52:    d8 ec 1a 54       	r5 = [r1+r4<<2]			  ## uECC.c:644:28
    8c56:    d6 1f             	r6 = r5 - r6			  ## uECC.c:644:36
    8c58:    ee 1e             	r6 = r6 - r3			  ## uECC.c:644:47
    8c5a:    d8 ec 0b 64       	[r0+r4<<2] = r6			  ## uECC.c:648:19
    8c5e:    47 21             	r7 = 0x1			  ## uECC.c:648:19
    8c60:    96 ec 00 05       	if (r6 <= r5) {			  ## uECC.c:648:19
    8c64:    47 20             		r7 = 0x0
                               	}			  ## uECC.c:646:28
    8c66:    96 e8 00 05       	if (r6 != r5) {			  ## uECC.c:646:28
    8c6a:    73 16             		r3 = r7
                               	}			  ## uECC.c:645:13
    8c6c:    c4 21             	r4 += 0x1			  ## uECC.c:643:33
    8c6e:    84 f8 ee 0d       	if (r4 != 0x6) goto -0x24 <vli_sub+0x8 : 8c4e >
    8c72:    30 16             	r0 = r3			  ## uECC.c:650:5
    8c74:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:650:5


vli_modMult_fast:
    8c76:    7e 04             	[--sp] = {rets, r14-r4}			  ## uECC.c:1694:0
    8c78:    e2 8a             	sp += -0x58			  ## uECC.c:1694:0
    8c7a:    28 16             	r8 = r2			  ## uECC.c:1694:0
    8c7c:    15 16             	r5 = r1			  ## uECC.c:1694:0
    8c7e:    0a 16             	r10 = r0			  ## uECC.c:1694:0
    8c80:    c1 14             	r9 = 0			  ## uECC.c:1694:0
    8c82:    d4 e9 55 90       	[sp+84] = r9			  ## uECC.c:701:17
    8c86:    d4 e9 51 90       	[sp+80] = r9			  ## uECC.c:702:17
    8c8a:    d4 e9 4d 90       	[sp+76] = r9			  ## uECC.c:703:17
    8c8e:    4e e0 01 00       	r14 = 0x1 <mem_code_size : 0 >
    8c92:    8c 16             	r12 = r8
    8c94:    c3 14             	r11 = 0
    8c96:    c5 14             	r13 = 0
    8c98:    14 80             	goto 0x40 <vli_modMult_fast+0x64 : 8cda >
    8c9a:    44 20             	r4 = 0x0
    8c9c:    c7 16             	r7 = r12
    8c9e:    04 89             	goto 0x12 <vli_modMult_fast+0x3C : 8cb2 >
    8ca0:    d8 ec 5a 04       	r0 = [r5+r4<<2]			  ## uECC.c:709:20
    8ca4:    79 05             	r1 = [r7++=-0x4] 			  ## uECC.c:709:29
    8ca6:    ce 8c             	r6 = sp + 76			  ## uECC.c:709:29
    8ca8:    ca 94             	r2 = sp + 84
    8caa:    cb 90             	r3 = sp + 80
    8cac:    86 20             	[sp] = r6			  ## uECC.c:709:13
    8cae:    51 83             	call -0xba <muladd : 8bf6 >			  ## uECC.c:709:13
    8cb0:    c4 21             	r4 += 0x1			  ## uECC.c:708:29
    8cb2:    84 e8 f5 e1       	if (r14 != r4) goto -0x16 <vli_modMult_fast+0x2A : 8ca0 >
    8cb6:    0c f1 04 c0       	r12 = r12 + 0x4  #			  ## uECC.c:707:5
    8cba:    00 35             		 r0 = [sp+84]			  ## uECC.c:711:21
    8cbc:    d4 e9 50 b0       	r11 = [sp+80]			  ## uECC.c:712:14
    8cc0:    0e f1 01 e0       	r14 = r14 + 0x1  #			  ## uECC.c:707:5
    8cc4:    01 33             		 r1 = [sp+76]			  ## uECC.c:713:14
    8cc6:    8a 84             	r2 = sp + 4
    8cc8:    d8 ec 2b 0d       	[r2+r13<<2] = r0			  ## uECC.c:711:19
    8ccc:    d4 e9 55 b0       	[sp+84] = r11			  ## uECC.c:712:12
    8cd0:    0d f1 01 d0       	r13 = r13 + 0x1  #			  ## uECC.c:707:33
    8cd4:    81 34             		 [sp+80] = r1			  ## uECC.c:713:12
    8cd6:    d4 e9 4d 90       	[sp+76] = r9			  ## uECC.c:714:12
    8cda:    8d f8 de 0d       	if (r13 != 0x6) goto -0x44 <vli_modMult_fast+0x24 : 8c9a >
    8cde:    09 e1 14 80       	r9 = r8 + 0x14			  ## uECC.c:704:20
    8ce2:    4c e0 06 00       	r12 = 0x6 <WOLAAnalysisFilter_Float_M64_m4_r1+0x2 : 6 >			  ## uECC.c:704:20
    8ce6:    c0 14             	r8 = 0			  ## uECC.c:704:20
    8ce8:    04 9e             	goto 0x3c <vli_modMult_fast+0xB0 : 8d26 >
    8cea:    37 e1 fb cf       	r7 = r12 + -0x5			  ## uECC.c:717:26
    8cee:    94 16             	r4 = r9
    8cf0:    04 8a             	goto 0x14 <vli_modMult_fast+0x90 : 8d06 >
    8cf2:    d8 ec 5a 07       	r0 = [r5+r7<<2]			  ## uECC.c:718:20
    8cf6:    49 05             	r1 = [r4++=-0x4] 			  ## uECC.c:718:29
    8cf8:    ce 8c             	r6 = sp + 76			  ## uECC.c:718:29
    8cfa:    ca 94             	r2 = sp + 84
    8cfc:    cb 90             	r3 = sp + 80
    8cfe:    86 20             	[sp] = r6			  ## uECC.c:718:13
    8d00:    bf ea 79 ff       	call -0x10e <muladd : 8bf6 >			  ## uECC.c:718:13
    8d04:    c7 21             	r7 += 0x1			  ## uECC.c:717:56
    8d06:    87 f8 f4 0d       	if (r7 != 0x6) goto -0x18 <vli_modMult_fast+0x7C : 8cf2 >
    8d0a:    00 35             	r0 = [sp+84]			  ## uECC.c:720:21
    8d0c:    d4 e9 50 b0       	r11 = [sp+80]			  ## uECC.c:721:14
    8d10:    01 33             	r1 = [sp+76]			  ## uECC.c:722:14
    8d12:    8a 84             	r2 = sp + 4
    8d14:    d8 ec 2b 0c       	[r2+r12<<2] = r0			  ## uECC.c:720:19
    8d18:    d4 e9 55 b0       	[sp+84] = r11			  ## uECC.c:721:12
    8d1c:    0c f1 01 c0       	r12 = r12 + 0x1  #			  ## uECC.c:717:21
    8d20:    81 34             		 [sp+80] = r1			  ## uECC.c:722:12
    8d22:    d4 e9 4d 80       	[sp+76] = r8			  ## uECC.c:723:12
    8d26:    8c f8 e0 17       	if (r12 != 0xb) goto -0x40 <vli_modMult_fast+0x74 : 8cea >
    8d2a:    d4 e9 31 b0       	[sp+48] = r11			  ## uECC.c:725:32
    8d2e:    89 84             	r1 = sp + 4
    8d30:    a0 16             	r0 = r10			  ## uECC.c:982:5
    8d32:    bf ea 4d ff       	call -0x166 <vli_set : 8bd0 >			  ## uECC.c:982:5
    8d36:    c1 38             	r1 += 0x18			  ## uECC.c:984:19
    8d38:    ad 94             	r5 = sp + 52			  ## uECC.c:984:19
    8d3a:    50 16             	r0 = r5			  ## uECC.c:984:5
    8d3c:    bf ea 48 ff       	call -0x170 <vli_set : 8bd0 >			  ## uECC.c:984:5
    8d40:    a0 16             	r0 = r10			  ## uECC.c:985:13
    8d42:    a1 16             	r1 = r10			  ## uECC.c:985:13
    8d44:    52 16             	r2 = r5			  ## uECC.c:985:13
    8d46:    bf ea 2b ff       	call -0x1aa <vli_add : 8ba0 >			  ## uECC.c:985:13
    8d4a:    06 16             	r6 = r0			  ## uECC.c:985:13
    8d4c:    40 20             	r0 = 0x0			  ## uECC.c:987:12
    8d4e:    41 20             	r1 = 0x0			  ## uECC.c:987:12
    8d50:    d0 e9 35 00       	d[sp+52] = r1_r0			  ## uECC.c:987:12
    8d54:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## uECC.c:988:14
    8d58:    d0 e9 24 20       	r3_r2 = d[sp+36]			  ## uECC.c:990:14
    8d5c:    d0 e9 3d 00       	d[sp+60] = r1_r0			  ## uECC.c:988:12
    8d60:    d0 e9 45 20       	d[sp+68] = r3_r2			  ## uECC.c:990:12
    8d64:    a0 16             	r0 = r10			  ## uECC.c:992:14
    8d66:    a1 16             	r1 = r10			  ## uECC.c:992:14
    8d68:    52 16             	r2 = r5			  ## uECC.c:992:14
    8d6a:    bf ea 19 ff       	call -0x1ce <vli_add : 8ba0 >			  ## uECC.c:992:14
    8d6e:    84 dd             	r4 = r0 + r6  #			  ## uECC.c:992:11
    8d70:    01 2b             		 r1 = [sp+44]			  ## uECC.c:994:23
    8d72:    a0 d6             	r0 = r10  #			  ## uECC.c:997:14
    8d74:    81 2f             		 [sp+60] = r1			  ## uECC.c:994:21
    8d76:    81 2d             	[sp+52] = r1			  ## uECC.c:994:12
    8d78:    d4 e9 41 b0       	[sp+64] = r11			  ## uECC.c:995:21
    8d7c:    d4 e9 39 b0       	[sp+56] = r11			  ## uECC.c:995:12
    8d80:    41 20             	r1 = 0x0			  ## uECC.c:995:12
    8d82:    81 32             	[sp+72] = r1			  ## uECC.c:996:21
    8d84:    a1 d6             	r1 = r10  #			  ## uECC.c:997:14
    8d86:    81 31             		 [sp+68] = r1			  ## uECC.c:996:12
    8d88:    bf ea 0a ff       	call -0x1ec <vli_add : 8ba0 >			  ## uECC.c:997:14
    8d8c:    04 18             	r4 += r0			  ## uECC.c:997:11
    8d8e:    c5 ff 10 95 00 00 	r5 = 0x9510 <curve_p : 9510 >
    8d94:    04 85             	goto 0xa <vli_modMult_fast+0x12A : 8da0 >
    8d96:    a0 16             	r0 = r10			  ## uECC.c:1000:18
    8d98:    52 16             	r2 = r5			  ## uECC.c:1000:18
    8d9a:    bf ea 54 ff       	call -0x158 <vli_sub : 8c46 >			  ## uECC.c:1000:18
    8d9e:    44 1e             	r4 = r4 - r0			  ## uECC.c:1000:15
    8da0:    f4 5a             	if (r4 != 0) goto -0xc <vli_modMult_fast+0x120 : 8d96 >
    8da2:    50 16             	r0 = r5			  ## uECC.c:999:21
    8da4:    bf ea 3c ff       	call -0x188 <vli_cmp : 8c20 >			  ## uECC.c:999:21
    8da8:    80 f8 f5 03       	if (r0 != 0x1) goto -0x16 <vli_modMult_fast+0x120 : 8d96 >			  ## uECC.c:999:21
    8dac:    02 96             	sp += 0x58
    8dae:    5e 04             	{pc, r14-r4} = [sp++]			  ## uECC.c:1698:1


apply_z:
    8db0:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:1895:0
    8db2:    e2 9a             	sp += -0x18			  ## uECC.c:1895:0
    8db4:    24 16             	r4 = r2			  ## uECC.c:1895:0
    8db6:    15 16             	r5 = r1			  ## uECC.c:1895:0
    8db8:    06 16             	r6 = r0			  ## uECC.c:1895:0
    8dba:    8f 80             	r7 = sp + 0			  ## uECC.c:1895:0
    8dbc:    70 16             	r0 = r7			  ## uECC.c:1898:5
    8dbe:    41 16             	r1 = r4			  ## uECC.c:1898:5
    8dc0:    bf ea 59 ff       	call -0x14e <vli_modMult_fast : 8c76 >			  ## uECC.c:1898:5
    8dc4:    60 16             	r0 = r6			  ## uECC.c:1899:5
    8dc6:    61 16             	r1 = r6			  ## uECC.c:1899:5
    8dc8:    72 16             	r2 = r7			  ## uECC.c:1899:5
    8dca:    bf ea 54 ff       	call -0x158 <vli_modMult_fast : 8c76 >			  ## uECC.c:1899:5
    8dce:    70 16             	r0 = r7			  ## uECC.c:1900:5
    8dd0:    71 16             	r1 = r7			  ## uECC.c:1900:5
    8dd2:    42 16             	r2 = r4			  ## uECC.c:1900:5
    8dd4:    bf ea 4f ff       	call -0x162 <vli_modMult_fast : 8c76 >			  ## uECC.c:1900:5
    8dd8:    50 16             	r0 = r5			  ## uECC.c:1901:5
    8dda:    51 16             	r1 = r5			  ## uECC.c:1901:5
    8ddc:    72 16             	r2 = r7			  ## uECC.c:1901:5
    8dde:    bf ea 4a ff       	call -0x16c <vli_modMult_fast : 8c76 >			  ## uECC.c:1901:5
    8de2:    02 86             	sp += 0x18			  ## uECC.c:1901:5
    8de4:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:1902:1


vli_modAdd:
    8de6:    75 04             	[--sp] = {rets, r5, r4}			  ## uECC.c:821:0
    8de8:    04 16             	r4 = r0			  ## uECC.c:821:0
    8dea:    bf ea d9 fe       	call -0x24e <vli_add : 8ba0 >			  ## uECC.c:822:25
    8dee:    c5 ff 10 95 00 00 	r5 = 0x9510 <curve_p : 9510 >
    8df4:    80 45             	if (r0 != 0) goto 0xa <vli_modAdd+0x1A : 8e00 >
    8df6:    40 15             	r1_r0 = r5_r4			  ## uECC.c:823:18
    8df8:    bf ea 12 ff       	call -0x1dc <vli_cmp : 8c20 >			  ## uECC.c:823:18
    8dfc:    80 fd 05 00       	ifs (r0 < 0x0) goto 0xa <vli_modAdd+0x24 : 8e0a >			  ## uECC.c:823:18
    8e00:    40 16             	r0 = r4			  ## uECC.c:825:9
    8e02:    41 16             	r1 = r4			  ## uECC.c:825:9
    8e04:    52 16             	r2 = r5			  ## uECC.c:825:9
    8e06:    bf ea 1e ff       	call -0x1c4 <vli_sub : 8c46 >			  ## uECC.c:825:9
    8e0a:    55 04             	{pc, r5, r4} = [sp++]			  ## uECC.c:827:1


vli_modSub:
    8e0c:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:837:0
    8e0e:    04 16             	r4 = r0			  ## uECC.c:837:0
    8e10:    bf ea 19 ff       	call -0x1ce <vli_sub : 8c46 >			  ## uECC.c:838:28
    8e14:    b0 e8 00 c0       	if (r0 != 0x0) {
    8e18:    c2 ff 10 95 00 00 		r2 = 0x9510 <curve_p : 9510 >			  ## uECC.c:842:9
    8e1e:    40 16             		r0 = r4			  ## uECC.c:842:9
    8e20:    41 16             		r1 = r4			  ## uECC.c:842:9
    8e22:    bf ea bd fe       		call -0x286
                               	} <vli_add : 8ba0 >			  ## uECC.c:842:9
    8e26:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:844:1


vli_rshift1:
    8e28:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:607:0
    8e2a:    09 98             	r1 = r0 + 0x18			  ## uECC.c:611:9
    8e2c:    42 20             	r2 = 0x0
    8e2e:    04 86             	goto 0xc <vli_rshift1+0x14 : 8e3c >
    8e30:    13 7f             	r3 = [r1+-0x4] 			  ## uECC.c:613:28
    8e32:    b4 a1             	r4 = r3 >> 0x1			  ## uECC.c:614:22
    8e34:    42 19             	r2 |= r4			  ## uECC.c:614:28
    8e36:    92 7f             	[r1+-0x4] = r2			  ## uECC.c:614:14
    8e38:    f9 3c             	r1 += -0x4			  ## uECC.c:612:15
    8e3a:    32 bf             	r2 = r3 << 0x1f			  ## uECC.c:615:22
    8e3c:    00 ec f8 11       	if (r1 > r0) goto -0x10 <vli_rshift1+0x8 : 8e30 >
    8e40:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:617:1


XYcZ_addC:
    8e42:    7a 04             	[--sp] = {rets, r10-r4}			  ## uECC.c:1965:0
    8e44:    e2 8e             	sp += -0x48			  ## uECC.c:1965:0
    8e46:    37 16             	r7 = r3			  ## uECC.c:1965:0
    8e48:    25 16             	r5 = r2			  ## uECC.c:1965:0
    8e4a:    18 16             	r8 = r1			  ## uECC.c:1965:0
    8e4c:    09 16             	r9 = r0			  ## uECC.c:1965:0
    8e4e:    f8 e8 30 a0       	r10 = sp + 48			  ## uECC.c:1965:0
    8e52:    a0 16             	r0 = r10			  ## uECC.c:1971:5
    8e54:    51 16             	r1 = r5			  ## uECC.c:1971:5
    8e56:    92 16             	r2 = r9			  ## uECC.c:1971:5
    8e58:    61 99             	call -0x4e <vli_modSub : 8e0c >			  ## uECC.c:1971:5
    8e5a:    a0 16             	r0 = r10			  ## uECC.c:1972:5
    8e5c:    a1 16             	r1 = r10			  ## uECC.c:1972:5
    8e5e:    a2 16             	r2 = r10			  ## uECC.c:1972:5
    8e60:    bf ea 09 ff       	call -0x1ee <vli_modMult_fast : 8c76 >			  ## uECC.c:1972:5
    8e64:    90 16             	r0 = r9			  ## uECC.c:1973:5
    8e66:    91 16             	r1 = r9			  ## uECC.c:1973:5
    8e68:    a2 16             	r2 = r10			  ## uECC.c:1973:5
    8e6a:    bf ea 04 ff       	call -0x1f8 <vli_modMult_fast : 8c76 >			  ## uECC.c:1973:5
    8e6e:    50 16             	r0 = r5			  ## uECC.c:1974:5
    8e70:    51 16             	r1 = r5			  ## uECC.c:1974:5
    8e72:    a2 16             	r2 = r10			  ## uECC.c:1974:5
    8e74:    bf ea ff fe       	call -0x202 <vli_modMult_fast : 8c76 >			  ## uECC.c:1974:5
    8e78:    a0 16             	r0 = r10			  ## uECC.c:1975:5
    8e7a:    71 16             	r1 = r7			  ## uECC.c:1975:5
    8e7c:    82 16             	r2 = r8			  ## uECC.c:1975:5
    8e7e:    51 93             	call -0x9a <vli_modAdd : 8de6 >			  ## uECC.c:1975:5
    8e80:    70 16             	r0 = r7			  ## uECC.c:1976:5
    8e82:    71 16             	r1 = r7			  ## uECC.c:1976:5
    8e84:    82 16             	r2 = r8			  ## uECC.c:1976:5
    8e86:    61 82             	call -0x7c <vli_modSub : 8e0c >			  ## uECC.c:1976:5
    8e88:    8c 98             	r4 = sp + 24			  ## uECC.c:1976:5
    8e8a:    40 15             	r1_r0 = r5_r4			  ## uECC.c:1978:5
    8e8c:    92 16             	r2 = r9			  ## uECC.c:1978:5
    8e8e:    51 9e             	call -0x84 <vli_modSub : 8e0c >			  ## uECC.c:1978:5
    8e90:    80 16             	r0 = r8			  ## uECC.c:1979:5
    8e92:    81 16             	r1 = r8			  ## uECC.c:1979:5
    8e94:    42 16             	r2 = r4			  ## uECC.c:1979:5
    8e96:    bf ea ee fe       	call -0x224 <vli_modMult_fast : 8c76 >			  ## uECC.c:1979:5
    8e9a:    40 16             	r0 = r4			  ## uECC.c:1980:5
    8e9c:    91 16             	r1 = r9			  ## uECC.c:1980:5
    8e9e:    52 16             	r2 = r5			  ## uECC.c:1980:5
    8ea0:    51 82             	call -0xbc <vli_modAdd : 8de6 >			  ## uECC.c:1980:5
    8ea2:    50 16             	r0 = r5			  ## uECC.c:1981:5
    8ea4:    71 16             	r1 = r7			  ## uECC.c:1981:5
    8ea6:    72 16             	r2 = r7			  ## uECC.c:1981:5
    8ea8:    bf ea e5 fe       	call -0x236 <vli_modMult_fast : 8c76 >			  ## uECC.c:1981:5
    8eac:    50 16             	r0 = r5			  ## uECC.c:1982:5
    8eae:    51 16             	r1 = r5			  ## uECC.c:1982:5
    8eb0:    42 16             	r2 = r4			  ## uECC.c:1982:5
    8eb2:    51 8c             	call -0xa8 <vli_modSub : 8e0c >			  ## uECC.c:1982:5
    8eb4:    8e 80             	r6 = sp + 0			  ## uECC.c:1982:5
    8eb6:    60 16             	r0 = r6			  ## uECC.c:1984:5
    8eb8:    91 16             	r1 = r9			  ## uECC.c:1984:5
    8eba:    52 16             	r2 = r5			  ## uECC.c:1984:5
    8ebc:    51 87             	call -0xb2 <vli_modSub : 8e0c >			  ## uECC.c:1984:5
    8ebe:    70 16             	r0 = r7			  ## uECC.c:1985:5
    8ec0:    71 16             	r1 = r7			  ## uECC.c:1985:5
    8ec2:    62 16             	r2 = r6			  ## uECC.c:1985:5
    8ec4:    bf ea d7 fe       	call -0x252 <vli_modMult_fast : 8c76 >			  ## uECC.c:1985:5
    8ec8:    70 16             	r0 = r7			  ## uECC.c:1986:5
    8eca:    71 16             	r1 = r7			  ## uECC.c:1986:5
    8ecc:    82 16             	r2 = r8			  ## uECC.c:1986:5
    8ece:    41 9e             	call -0xc4 <vli_modSub : 8e0c >			  ## uECC.c:1986:5
    8ed0:    60 16             	r0 = r6			  ## uECC.c:1988:5
    8ed2:    a1 16             	r1 = r10			  ## uECC.c:1988:5
    8ed4:    a2 16             	r2 = r10			  ## uECC.c:1988:5
    8ed6:    bf ea ce fe       	call -0x264 <vli_modMult_fast : 8c76 >			  ## uECC.c:1988:5
    8eda:    60 16             	r0 = r6			  ## uECC.c:1989:5
    8edc:    61 16             	r1 = r6			  ## uECC.c:1989:5
    8ede:    42 16             	r2 = r4			  ## uECC.c:1989:5
    8ee0:    41 95             	call -0xd6 <vli_modSub : 8e0c >			  ## uECC.c:1989:5
    8ee2:    40 16             	r0 = r4			  ## uECC.c:1990:5
    8ee4:    61 16             	r1 = r6			  ## uECC.c:1990:5
    8ee6:    92 16             	r2 = r9			  ## uECC.c:1990:5
    8ee8:    41 91             	call -0xde <vli_modSub : 8e0c >			  ## uECC.c:1990:5
    8eea:    40 16             	r0 = r4			  ## uECC.c:1991:5
    8eec:    41 16             	r1 = r4			  ## uECC.c:1991:5
    8eee:    a2 16             	r2 = r10			  ## uECC.c:1991:5
    8ef0:    bf ea c1 fe       	call -0x27e <vli_modMult_fast : 8c76 >			  ## uECC.c:1991:5
    8ef4:    80 16             	r0 = r8			  ## uECC.c:1992:5
    8ef6:    41 16             	r1 = r4			  ## uECC.c:1992:5
    8ef8:    82 16             	r2 = r8			  ## uECC.c:1992:5
    8efa:    41 88             	call -0xf0 <vli_modSub : 8e0c >			  ## uECC.c:1992:5
    8efc:    90 16             	r0 = r9			  ## uECC.c:1994:5
    8efe:    61 16             	r1 = r6			  ## uECC.c:1994:5
    8f00:    bf ea 66 fe       	call -0x334 <vli_set : 8bd0 >			  ## uECC.c:1994:5
    8f04:    02 92             	sp += 0x48			  ## uECC.c:1994:5
    8f06:    5a 04             	{pc, r10-r4} = [sp++]			  ## uECC.c:1995:1


XYcZ_add:
    8f08:    78 04             	[--sp] = {rets, r8-r4}			  ## uECC.c:1935:0
    8f0a:    e2 9a             	sp += -0x18			  ## uECC.c:1935:0
    8f0c:    36 16             	r6 = r3			  ## uECC.c:1935:0
    8f0e:    24 16             	r4 = r2			  ## uECC.c:1935:0
    8f10:    18 16             	r8 = r1			  ## uECC.c:1935:0
    8f12:    07 16             	r7 = r0			  ## uECC.c:1935:0
    8f14:    8d 80             	r5 = sp + 0			  ## uECC.c:1935:0
    8f16:    50 16             	r0 = r5			  ## uECC.c:1939:5
    8f18:    41 16             	r1 = r4			  ## uECC.c:1939:5
    8f1a:    72 16             	r2 = r7			  ## uECC.c:1939:5
    8f1c:    bf ea 76 ff       	call -0x114 <vli_modSub : 8e0c >			  ## uECC.c:1939:5
    8f20:    50 16             	r0 = r5			  ## uECC.c:1940:5
    8f22:    51 16             	r1 = r5			  ## uECC.c:1940:5
    8f24:    52 16             	r2 = r5			  ## uECC.c:1940:5
    8f26:    bf ea a6 fe       	call -0x2b4 <vli_modMult_fast : 8c76 >			  ## uECC.c:1940:5
    8f2a:    70 16             	r0 = r7			  ## uECC.c:1941:5
    8f2c:    71 16             	r1 = r7			  ## uECC.c:1941:5
    8f2e:    52 16             	r2 = r5			  ## uECC.c:1941:5
    8f30:    bf ea a1 fe       	call -0x2be <vli_modMult_fast : 8c76 >			  ## uECC.c:1941:5
    8f34:    40 16             	r0 = r4			  ## uECC.c:1942:5
    8f36:    41 16             	r1 = r4			  ## uECC.c:1942:5
    8f38:    52 16             	r2 = r5			  ## uECC.c:1942:5
    8f3a:    bf ea 9c fe       	call -0x2c8 <vli_modMult_fast : 8c76 >			  ## uECC.c:1942:5
    8f3e:    60 16             	r0 = r6			  ## uECC.c:1943:5
    8f40:    61 16             	r1 = r6			  ## uECC.c:1943:5
    8f42:    82 16             	r2 = r8			  ## uECC.c:1943:5
    8f44:    bf ea 62 ff       	call -0x13c <vli_modSub : 8e0c >			  ## uECC.c:1943:5
    8f48:    50 16             	r0 = r5			  ## uECC.c:1944:5
    8f4a:    61 16             	r1 = r6			  ## uECC.c:1944:5
    8f4c:    62 16             	r2 = r6			  ## uECC.c:1944:5
    8f4e:    bf ea 92 fe       	call -0x2dc <vli_modMult_fast : 8c76 >			  ## uECC.c:1944:5
    8f52:    50 16             	r0 = r5			  ## uECC.c:1946:5
    8f54:    51 16             	r1 = r5			  ## uECC.c:1946:5
    8f56:    72 16             	r2 = r7			  ## uECC.c:1946:5
    8f58:    bf ea 58 ff       	call -0x150 <vli_modSub : 8e0c >			  ## uECC.c:1946:5
    8f5c:    50 16             	r0 = r5			  ## uECC.c:1947:5
    8f5e:    51 16             	r1 = r5			  ## uECC.c:1947:5
    8f60:    42 16             	r2 = r4			  ## uECC.c:1947:5
    8f62:    bf ea 53 ff       	call -0x15a <vli_modSub : 8e0c >			  ## uECC.c:1947:5
    8f66:    40 16             	r0 = r4			  ## uECC.c:1948:5
    8f68:    41 16             	r1 = r4			  ## uECC.c:1948:5
    8f6a:    72 16             	r2 = r7			  ## uECC.c:1948:5
    8f6c:    bf ea 4e ff       	call -0x164 <vli_modSub : 8e0c >			  ## uECC.c:1948:5
    8f70:    80 16             	r0 = r8			  ## uECC.c:1949:5
    8f72:    81 16             	r1 = r8			  ## uECC.c:1949:5
    8f74:    42 16             	r2 = r4			  ## uECC.c:1949:5
    8f76:    bf ea 7e fe       	call -0x304 <vli_modMult_fast : 8c76 >			  ## uECC.c:1949:5
    8f7a:    40 16             	r0 = r4			  ## uECC.c:1950:5
    8f7c:    71 16             	r1 = r7			  ## uECC.c:1950:5
    8f7e:    52 16             	r2 = r5			  ## uECC.c:1950:5
    8f80:    bf ea 44 ff       	call -0x178 <vli_modSub : 8e0c >			  ## uECC.c:1950:5
    8f84:    60 16             	r0 = r6			  ## uECC.c:1951:5
    8f86:    61 16             	r1 = r6			  ## uECC.c:1951:5
    8f88:    42 16             	r2 = r4			  ## uECC.c:1951:5
    8f8a:    bf ea 74 fe       	call -0x318 <vli_modMult_fast : 8c76 >			  ## uECC.c:1951:5
    8f8e:    60 16             	r0 = r6			  ## uECC.c:1952:5
    8f90:    61 16             	r1 = r6			  ## uECC.c:1952:5
    8f92:    82 16             	r2 = r8			  ## uECC.c:1952:5
    8f94:    bf ea 3a ff       	call -0x18c <vli_modSub : 8e0c >			  ## uECC.c:1952:5
    8f98:    40 15             	r1_r0 = r5_r4			  ## uECC.c:1954:5
    8f9a:    bf ea 19 fe       	call -0x3ce <vli_set : 8bd0 >			  ## uECC.c:1954:5
    8f9e:    02 86             	sp += 0x18			  ## uECC.c:1954:5
    8fa0:    58 04             	{pc, r8-r4} = [sp++]			  ## uECC.c:1955:1


EccPoint_mult:
    8fa2:    7e 04             	[--sp] = {rets, r14-r4}			  ## uECC.c:2002:0
    8fa4:    c2 84             	sp += -0xf0			  ## uECC.c:2002:0
    8fa6:    35 16             	r5 = r3			  ## uECC.c:2002:0
    8fa8:    2c 16             	r12 = r2			  ## uECC.c:2002:0
    8faa:    1d 16             	r13 = r1			  ## uECC.c:2002:0
    8fac:    08 16             	r8 = r0			  ## uECC.c:2002:0
    8fae:    c8 88             	r0 = sp + 72			  ## uECC.c:2002:0
    8fb0:    0e e1 18 00       	r14 = r0 + 0x18			  ## uECC.c:2010:13
    8fb4:    e0 16             	r0 = r14			  ## uECC.c:2010:5
    8fb6:    bf ea 0b fe       	call -0x3ea <vli_set : 8bd0 >			  ## uECC.c:2010:5
    8fba:    88 98             	r0 = sp + 24			  ## uECC.c:2010:5
    8fbc:    0b e1 18 00       	r11 = r0 + 0x18			  ## uECC.c:2011:13
    8fc0:    09 e1 18 10       	r9 = r1 + 0x18			  ## uECC.c:2011:20
    8fc4:    b0 16             	r0 = r11			  ## uECC.c:2011:5
    8fc6:    91 16             	r1 = r9			  ## uECC.c:2011:5
    8fc8:    bf ea 02 fe       	call -0x3fc <vli_set : 8bd0 >			  ## uECC.c:2011:5
    8fcc:    e8 98             	r0 = sp + 120
    8fce:    05 44             	if (r5 == 0) goto 0x8 <EccPoint_mult+0x36 : 8fd8 >			  ## uECC.c:1912:9
    8fd0:    51 16             	r1 = r5			  ## uECC.c:1913:9
    8fd2:    bf ea fd fd       	call -0x406 <vli_set : 8bd0 >			  ## uECC.c:1913:9
    8fd6:    04 84             	goto 0x8 <EccPoint_mult+0x3E : 8fe0 >			  ## uECC.c:1913:9
    8fd8:    bf ea 04 fe       	call -0x3f8 <vli_clear : 8be4 >			  ## uECC.c:1915:9
    8fdc:    40 21             	r0 = 0x1			  ## uECC.c:1916:14
    8fde:    80 3e             	[sp+120] = r0			  ## uECC.c:1916:14
    8fe0:    c8 88             	r0 = sp + 72
    8fe2:    e1 16             	r1 = r14			  ## uECC.c:1919:5
    8fe4:    bf ea f4 fd       	call -0x418 <vli_set : 8bd0 >			  ## uECC.c:1919:5
    8fe8:    88 98             	r0 = sp + 24			  ## uECC.c:1919:5
    8fea:    b1 16             	r1 = r11			  ## uECC.c:1920:5
    8fec:    bf ea f0 fd       	call -0x420 <vli_set : 8bd0 >			  ## uECC.c:1920:5
    8ff0:    ed 98             	r5 = sp + 120			  ## uECC.c:1920:5
    8ff2:    e0 16             	r0 = r14			  ## uECC.c:1922:5
    8ff4:    52 16             	r2 = r5			  ## uECC.c:1922:5
    8ff6:    bf ea db fe       	call -0x24a <apply_z : 8db0 >			  ## uECC.c:1922:5
    8ffa:    50 16             	r0 = r5			  ## uECC.c:1852:9
    8ffc:    bf ea b1 fd       	call -0x49e <vli_isZero : 8b62 >			  ## uECC.c:1852:9
    9000:    ca ff 10 95 00 00 	r10 = 0x9510 <curve_p : 9510 >			  ## uECC.c:1852:9
    9006:    b0 5f             	if (r0 != 0) goto 0xfe <EccPoint_mult+0x164 : 9106 >			  ## uECC.c:1852:9
    9008:    f8 e8 a8 50       	r5 = sp + 168
    900c:    50 16             	r0 = r5			  ## uECC.c:1856:5
    900e:    b1 16             	r1 = r11			  ## uECC.c:1856:5
    9010:    b2 16             	r2 = r11			  ## uECC.c:1856:5
    9012:    bf ea 30 fe       	call -0x3a0 <vli_modMult_fast : 8c76 >			  ## uECC.c:1856:5
    9016:    f8 e8 90 00       	r0 = sp + 144			  ## uECC.c:1856:5
    901a:    e1 16             	r1 = r14			  ## uECC.c:1857:5
    901c:    52 16             	r2 = r5			  ## uECC.c:1857:5
    901e:    bf ea 2a fe       	call -0x3ac <vli_modMult_fast : 8c76 >			  ## uECC.c:1857:5
    9022:    50 16             	r0 = r5			  ## uECC.c:1858:5
    9024:    51 16             	r1 = r5			  ## uECC.c:1858:5
    9026:    52 16             	r2 = r5			  ## uECC.c:1858:5
    9028:    bf ea 25 fe       	call -0x3b6 <vli_modMult_fast : 8c76 >			  ## uECC.c:1858:5
    902c:    ed 98             	r5 = sp + 120			  ## uECC.c:1858:5
    902e:    b0 16             	r0 = r11			  ## uECC.c:1859:5
    9030:    b1 16             	r1 = r11			  ## uECC.c:1859:5
    9032:    52 16             	r2 = r5			  ## uECC.c:1859:5
    9034:    bf ea 1f fe       	call -0x3c2 <vli_modMult_fast : 8c76 >			  ## uECC.c:1859:5
    9038:    50 16             	r0 = r5			  ## uECC.c:1860:5
    903a:    51 16             	r1 = r5			  ## uECC.c:1860:5
    903c:    52 16             	r2 = r5			  ## uECC.c:1860:5
    903e:    bf ea 1a fe       	call -0x3cc <vli_modMult_fast : 8c76 >			  ## uECC.c:1860:5
    9042:    e0 16             	r0 = r14			  ## uECC.c:1862:5
    9044:    e1 16             	r1 = r14			  ## uECC.c:1862:5
    9046:    52 16             	r2 = r5			  ## uECC.c:1862:5
    9048:    bf ea cd fe       	call -0x266 <vli_modAdd : 8de6 >			  ## uECC.c:1862:5
    904c:    50 16             	r0 = r5			  ## uECC.c:1863:5
    904e:    51 16             	r1 = r5			  ## uECC.c:1863:5
    9050:    52 16             	r2 = r5			  ## uECC.c:1863:5
    9052:    bf ea c8 fe       	call -0x270 <vli_modAdd : 8de6 >			  ## uECC.c:1863:5
    9056:    50 16             	r0 = r5			  ## uECC.c:1864:5
    9058:    e1 16             	r1 = r14			  ## uECC.c:1864:5
    905a:    52 16             	r2 = r5			  ## uECC.c:1864:5
    905c:    bf ea d6 fe       	call -0x254 <vli_modSub : 8e0c >			  ## uECC.c:1864:5
    9060:    e0 16             	r0 = r14			  ## uECC.c:1865:5
    9062:    e1 16             	r1 = r14			  ## uECC.c:1865:5
    9064:    52 16             	r2 = r5			  ## uECC.c:1865:5
    9066:    bf ea 06 fe       	call -0x3f4 <vli_modMult_fast : 8c76 >			  ## uECC.c:1865:5
    906a:    50 16             	r0 = r5			  ## uECC.c:1867:5
    906c:    e1 16             	r1 = r14			  ## uECC.c:1867:5
    906e:    e2 16             	r2 = r14			  ## uECC.c:1867:5
    9070:    bf ea b9 fe       	call -0x28e <vli_modAdd : 8de6 >			  ## uECC.c:1867:5
    9074:    e0 16             	r0 = r14			  ## uECC.c:1868:5
    9076:    e1 16             	r1 = r14			  ## uECC.c:1868:5
    9078:    52 16             	r2 = r5			  ## uECC.c:1868:5
    907a:    bf ea b4 fe       	call -0x298 <vli_modAdd : 8de6 >			  ## uECC.c:1868:5
    907e:    50 ee e0 00       	r0 = b[r14+0x0] (u)			  ## uECC.c:1869:9
    9082:    50 e8 04 02       	if ((r0 & 0x1) != 0) goto 0x8 <EccPoint_mult+0xEC : 908e >			  ## uECC.c:1869:9
    9086:    e0 16             	r0 = r14			  ## uECC.c:1874:9
    9088:    bf ea ce fe       	call -0x264 <vli_rshift1 : 8e28 >			  ## uECC.c:1874:9
    908c:    04 8d             	goto 0x1a <EccPoint_mult+0x106 : 90a8 >			  ## uECC.c:1874:9
    908e:    e0 16             	r0 = r14			  ## uECC.c:1870:31
    9090:    e1 16             	r1 = r14			  ## uECC.c:1870:31
    9092:    a2 16             	r2 = r10			  ## uECC.c:1870:31
    9094:    bf ea 84 fd       	call -0x4f8 <vli_add : 8ba0 >			  ## uECC.c:1870:31
    9098:    05 16             	r5 = r0			  ## uECC.c:1870:31
    909a:    e0 16             	r0 = r14			  ## uECC.c:1871:9
    909c:    bf ea c4 fe       	call -0x278 <vli_rshift1 : 8e28 >			  ## uECC.c:1871:9
    90a0:    50 bf             	r0 = r5 << 0x1f			  ## uECC.c:1872:39
    90a2:    c9 88             	r1 = sp + 72			  ## uECC.c:1872:39
    90a4:    64 e8 2c 10       	[r1+0x2c] |= r0			  ## uECC.c:1872:28
    90a8:    ed 98             	r5 = sp + 120
    90aa:    50 16             	r0 = r5			  ## uECC.c:1878:5
    90ac:    e1 16             	r1 = r14			  ## uECC.c:1878:5
    90ae:    e2 16             	r2 = r14			  ## uECC.c:1878:5
    90b0:    bf ea e1 fd       	call -0x43e <vli_modMult_fast : 8c76 >			  ## uECC.c:1878:5
    90b4:    f8 e8 90 70       	r7 = sp + 144			  ## uECC.c:1878:5
    90b8:    50 16             	r0 = r5			  ## uECC.c:1879:5
    90ba:    51 16             	r1 = r5			  ## uECC.c:1879:5
    90bc:    72 16             	r2 = r7			  ## uECC.c:1879:5
    90be:    bf ea a5 fe       	call -0x2b6 <vli_modSub : 8e0c >			  ## uECC.c:1879:5
    90c2:    50 16             	r0 = r5			  ## uECC.c:1880:5
    90c4:    51 16             	r1 = r5			  ## uECC.c:1880:5
    90c6:    72 16             	r2 = r7			  ## uECC.c:1880:5
    90c8:    bf ea a0 fe       	call -0x2c0 <vli_modSub : 8e0c >			  ## uECC.c:1880:5
    90cc:    70 16             	r0 = r7			  ## uECC.c:1881:5
    90ce:    71 16             	r1 = r7			  ## uECC.c:1881:5
    90d0:    52 16             	r2 = r5			  ## uECC.c:1881:5
    90d2:    bf ea 9b fe       	call -0x2ca <vli_modSub : 8e0c >			  ## uECC.c:1881:5
    90d6:    e0 16             	r0 = r14			  ## uECC.c:1882:5
    90d8:    e1 16             	r1 = r14			  ## uECC.c:1882:5
    90da:    72 16             	r2 = r7			  ## uECC.c:1882:5
    90dc:    bf ea cb fd       	call -0x46a <vli_modMult_fast : 8c76 >			  ## uECC.c:1882:5
    90e0:    f8 e8 a8 70       	r7 = sp + 168			  ## uECC.c:1882:5
    90e4:    70 16             	r0 = r7			  ## uECC.c:1883:5
    90e6:    e1 16             	r1 = r14			  ## uECC.c:1883:5
    90e8:    72 16             	r2 = r7			  ## uECC.c:1883:5
    90ea:    bf ea 8f fe       	call -0x2e2 <vli_modSub : 8e0c >			  ## uECC.c:1883:5
    90ee:    e0 16             	r0 = r14			  ## uECC.c:1885:5
    90f0:    51 16             	r1 = r5			  ## uECC.c:1885:5
    90f2:    bf ea 6d fd       	call -0x526 <vli_set : 8bd0 >			  ## uECC.c:1885:5
    90f6:    50 16             	r0 = r5			  ## uECC.c:1886:5
    90f8:    b1 16             	r1 = r11			  ## uECC.c:1886:5
    90fa:    bf ea 69 fd       	call -0x52e <vli_set : 8bd0 >			  ## uECC.c:1886:5
    90fe:    b0 16             	r0 = r11			  ## uECC.c:1887:5
    9100:    71 16             	r1 = r7			  ## uECC.c:1887:5
    9102:    bf ea 65 fd       	call -0x536 <vli_set : 8bd0 >			  ## uECC.c:1887:5
    9106:    c8 88             	r0 = sp + 72
    9108:    89 98             	r1 = sp + 24
    910a:    ea 98             	r2 = sp + 120
    910c:    bf ea 50 fe       	call -0x360 <apply_z : 8db0 >			  ## uECC.c:1924:5
    9110:    6d 3f             	r5 = 0xbf
    9112:    14 87             	goto 0x4e <EccPoint_mult+0x1C0 : 9162 >
    9114:    61 e1 1f 50       	r1 = r5 & 0x1F			  ## uECC.c:530:72
    9118:    40 21             	r0 = 0x1			  ## uECC.c:530:72
    911a:    c8 e1 00 11       	r1 = r0 << r1			  ## uECC.c:530:64
    911e:    da a5             	r2 = r5 >>> 0x5			  ## uECC.c:530:21
    9120:    d8 ec ca 22       	r2 = [r12+r2<<2]			  ## uECC.c:530:13
    9124:    43 21             	r3 = 0x1			  ## uECC.c:2019:24
    9126:    12 ea 00 01       	if ((r2 & r1) == 0) {			  ## uECC.c:2019:24
    912a:    43 20             		r3 = 0x0
                               	}			  ## uECC.c:2019:24
    912c:    e6 e1 18 30       	r6 = r3 * 0x18			  ## uECC.c:2019:19
    9130:    cb 88             	r3 = sp + 72			  ## uECC.c:2019:19
    9132:    b4 e0 30 b6       	r11 = r3 + r6			  ## uECC.c:2019:19
    9136:    8c 98             	r4 = sp + 24			  ## uECC.c:2019:19
    9138:    c7 1d             	r7 = r4 + r6			  ## uECC.c:2019:31
    913a:    12 ea 80 01       	if ((r2 & r1) != 0) {			  ## uECC.c:2019:31
    913e:    40 20             		r0 = 0x0
                               	}			  ## uECC.c:2018:14
    9140:    e0 e1 18 00       	r0 = r0 * 0x18			  ## uECC.c:2019:43
    9144:    36 1c             	r6 = r3 + r0			  ## uECC.c:2019:43
    9146:    04 18             	r4 += r0			  ## uECC.c:2019:51
    9148:    b0 16             	r0 = r11			  ## uECC.c:2019:9
    914a:    71 16             	r1 = r7			  ## uECC.c:2019:9
    914c:    62 16             	r2 = r6			  ## uECC.c:2019:9
    914e:    43 16             	r3 = r4			  ## uECC.c:2019:9
    9150:    bf ea 77 fe       	call -0x312 <XYcZ_addC : 8e42 >			  ## uECC.c:2019:9
    9154:    60 16             	r0 = r6			  ## uECC.c:2020:9
    9156:    41 16             	r1 = r4			  ## uECC.c:2020:9
    9158:    b2 16             	r2 = r11			  ## uECC.c:2020:9
    915a:    73 16             	r3 = r7			  ## uECC.c:2020:9
    915c:    bf ea d4 fe       	call -0x258 <XYcZ_add : 8f08 >			  ## uECC.c:2020:9
    9160:    fd 3f             	r5 += -0x1			  ## uECC.c:2017:34
    9162:    05 fd d7 03       	ifs (r5 >= 0x1) goto -0x52 <EccPoint_mult+0x172 : 9114 >
    9166:    d0 ec c0 00       	r0 = [r12+0x0]			  ## uECC.c:530:13
    916a:    60 e1 01 00       	r0 = r0 & 0x1			  ## uECC.c:530:46
    916e:    e1 e1 18 00       	r1 = r0 * 0x18			  ## uECC.c:2024:15
    9172:    cd 88             	r5 = sp + 72			  ## uECC.c:2024:15
    9174:    5f 1c             	r7 = r5 + r1			  ## uECC.c:2024:15
    9176:    8a 98             	r2 = sp + 24			  ## uECC.c:2024:15
    9178:    2c 1c             	r4 = r2 + r1			  ## uECC.c:2024:27
    917a:    38 20             	r0 ^= 0x1			  ## uECC.c:2023:10
    917c:    e0 e1 18 00       	r0 = r0 * 0x18			  ## uECC.c:2024:39
    9180:    b4 e0 50 b0       	r11 = r5 + r0			  ## uECC.c:2024:39
    9184:    b4 e0 20 c0       	r12 = r2 + r0			  ## uECC.c:2024:47
    9188:    70 16             	r0 = r7			  ## uECC.c:2024:5
    918a:    41 16             	r1 = r4			  ## uECC.c:2024:5
    918c:    b2 16             	r2 = r11			  ## uECC.c:2024:5
    918e:    c3 16             	r3 = r12			  ## uECC.c:2024:5
    9190:    bf ea 57 fe       	call -0x352 <XYcZ_addC : 8e42 >			  ## uECC.c:2024:5
    9194:    8e 80             	r6 = sp + 0			  ## uECC.c:2024:5
    9196:    60 16             	r0 = r6			  ## uECC.c:2027:5
    9198:    e1 16             	r1 = r14			  ## uECC.c:2027:5
    919a:    52 16             	r2 = r5			  ## uECC.c:2027:5
    919c:    bf ea 36 fe       	call -0x394 <vli_modSub : 8e0c >			  ## uECC.c:2027:5
    91a0:    60 16             	r0 = r6			  ## uECC.c:2028:5
    91a2:    61 16             	r1 = r6			  ## uECC.c:2028:5
    91a4:    42 16             	r2 = r4			  ## uECC.c:2028:5
    91a6:    bf ea 66 fd       	call -0x534 <vli_modMult_fast : 8c76 >			  ## uECC.c:2028:5
    91aa:    60 16             	r0 = r6			  ## uECC.c:2029:5
    91ac:    61 16             	r1 = r6			  ## uECC.c:2029:5
    91ae:    d2 16             	r2 = r13			  ## uECC.c:2029:5
    91b0:    bf ea 61 fd       	call -0x53e <vli_modMult_fast : 8c76 >			  ## uECC.c:2029:5
    91b4:    60 16             	r0 = r6			  ## uECC.c:1728:9
    91b6:    bf ea d4 fc       	call -0x658 <vli_isZero : 8b62 >			  ## uECC.c:1728:9
    91ba:    00 44             	if (r0 == 0) goto 0x8 <EccPoint_mult+0x222 : 91c4 >			  ## uECC.c:1728:9
    91bc:    88 80             	r0 = sp + 0
    91be:    bf ea 11 fd       	call -0x5de <vli_clear : 8be4 >			  ## uECC.c:1729:9
    91c2:    54 85             	goto 0x14a <EccPoint_mult+0x36C : 930e >			  ## uECC.c:1729:9
    91c4:    f8 e8 a8 00       	r0 = sp + 168
    91c8:    89 80             	r1 = sp + 0
    91ca:    bf ea 01 fd       	call -0x5fe <vli_set : 8bd0 >			  ## uECC.c:1733:5
    91ce:    f8 e8 90 00       	r0 = sp + 144			  ## uECC.c:1733:5
    91d2:    a1 16             	r1 = r10			  ## uECC.c:1734:5
    91d4:    bf ea fc fc       	call -0x608 <vli_set : 8bd0 >			  ## uECC.c:1734:5
    91d8:    f8 e8 d8 50       	r5 = sp + 216			  ## uECC.c:1734:5
    91dc:    50 16             	r0 = r5			  ## uECC.c:1735:5
    91de:    bf ea 01 fd       	call -0x5fe <vli_clear : 8be4 >			  ## uECC.c:1735:5
    91e2:    40 21             	r0 = 0x1			  ## uECC.c:1736:10
    91e4:    f8 e8 c0 d0       	r13 = sp + 192			  ## uECC.c:1736:10
    91e8:    d0 d6             	r0 = r13  #			  ## uECC.c:1737:5
    91ea:    a0 36             		 [sp+216] = r0			  ## uECC.c:1736:10
    91ec:    bf ea fa fc       	call -0x60c <vli_clear : 8be4 >			  ## uECC.c:1737:5
    91f0:    44 81             	goto 0x102 <EccPoint_mult+0x352 : 92f4 >			  ## uECC.c:1737:5
    91f2:    dc e9 a8 10       	r1 = b[sp+168] (u)			  ## uECC.c:1740:13
    91f6:    51 e8 05 02       	if ((r1 & 0x1) != 0) goto 0xa <EccPoint_mult+0x262 : 9204 >			  ## uECC.c:1740:13
    91fa:    f8 e8 a8 00       	r0 = sp + 168
    91fe:    bf ea 13 fe       	call -0x3da <vli_rshift1 : 8e28 >			  ## uECC.c:1741:13
    9202:    14 8a             	goto 0x54 <EccPoint_mult+0x2B6 : 9258 >			  ## uECC.c:1741:13
    9204:    dc e9 90 10       	r1 = b[sp+144] (u)			  ## uECC.c:1749:20
    9208:    51 e8 05 02       	if ((r1 & 0x1) != 0) goto 0xa <EccPoint_mult+0x274 : 9216 >			  ## uECC.c:1749:20
    920c:    f8 e8 90 00       	r0 = sp + 144
    9210:    bf ea 0a fe       	call -0x3ec <vli_rshift1 : 8e28 >			  ## uECC.c:1750:13
    9214:    24 98             	goto 0xb0 <EccPoint_mult+0x324 : 92c6 >			  ## uECC.c:1750:13
    9216:    80 fd 37 02       	ifs (r0 < 0x1) goto 0x6e <EccPoint_mult+0x2E6 : 9288 >			  ## uECC.c:1758:20
    921a:    f8 e8 a8 10       	r1 = sp + 168
    921e:    f8 e8 90 20       	r2 = sp + 144
    9222:    10 16             	r0 = r1			  ## uECC.c:1759:13
    9224:    bf ea 0f fd       	call -0x5e2 <vli_sub : 8c46 >			  ## uECC.c:1759:13
    9228:    10 16             	r0 = r1			  ## uECC.c:1760:13
    922a:    bf ea fd fd       	call -0x406 <vli_rshift1 : 8e28 >			  ## uECC.c:1760:13
    922e:    f8 e8 d8 00       	r0 = sp + 216			  ## uECC.c:1760:13
    9232:    f8 e8 c0 10       	r1 = sp + 192			  ## uECC.c:1760:13
    9236:    bf ea f3 fc       	call -0x61a <vli_cmp : 8c20 >			  ## uECC.c:1761:17
    923a:    70 fe 06 fe       	ifs (r0 > -0x1) goto 0xc <EccPoint_mult+0x2A8 : 924a >			  ## uECC.c:1761:17
    923e:    f8 e8 d8 00       	r0 = sp + 216
    9242:    01 16             	r1 = r0			  ## uECC.c:1762:17
    9244:    a2 16             	r2 = r10			  ## uECC.c:1762:17
    9246:    bf ea ab fc       	call -0x6aa <vli_add : 8ba0 >			  ## uECC.c:1762:17
    924a:    f8 e8 d8 00       	r0 = sp + 216
    924e:    f8 e8 c0 20       	r2 = sp + 192
    9252:    01 16             	r1 = r0			  ## uECC.c:1764:13
    9254:    bf ea f7 fc       	call -0x612 <vli_sub : 8c46 >			  ## uECC.c:1764:13
    9258:    dc e9 d8 00       	r0 = b[sp+216] (u)
    925c:    50 e8 05 02       	if ((r0 & 0x1) != 0) goto 0xa <EccPoint_mult+0x2C8 : 926a >
    9260:    f8 e8 d8 00       	r0 = sp + 216
    9264:    bf ea e0 fd       	call -0x440 <vli_rshift1 : 8e28 >
    9268:    24 85             	goto 0x8a <EccPoint_mult+0x352 : 92f4 >
    926a:    f8 e8 d8 10       	r1 = sp + 216
    926e:    10 16             	r0 = r1
    9270:    a2 16             	r2 = r10
    9272:    bf ea 95 fc       	call -0x6d6 <vli_add : 8ba0 >
    9276:    06 16             	r6 = r0
    9278:    10 16             	r0 = r1
    927a:    bf ea d5 fd       	call -0x456 <vli_rshift1 : 8e28 >
    927e:    b6 e8 00 00       	if (r6 != 0x0) {
    9282:    05 ef 00 54       		[r5+0x14] |= 0x80000000
                               	}
    9286:    14 96             	goto 0x6c <EccPoint_mult+0x352 : 92f4 >
    9288:    f8 e8 90 10       	r1 = sp + 144
    928c:    f8 e8 a8 20       	r2 = sp + 168
    9290:    10 16             	r0 = r1			  ## uECC.c:1773:13
    9292:    bf ea d8 fc       	call -0x650 <vli_sub : 8c46 >			  ## uECC.c:1773:13
    9296:    10 16             	r0 = r1			  ## uECC.c:1774:13
    9298:    bf ea c6 fd       	call -0x474 <vli_rshift1 : 8e28 >			  ## uECC.c:1774:13
    929c:    f8 e8 c0 00       	r0 = sp + 192			  ## uECC.c:1774:13
    92a0:    f8 e8 d8 10       	r1 = sp + 216			  ## uECC.c:1774:13
    92a4:    bf ea bc fc       	call -0x688 <vli_cmp : 8c20 >			  ## uECC.c:1775:17
    92a8:    70 fe 06 fe       	ifs (r0 > -0x1) goto 0xc <EccPoint_mult+0x316 : 92b8 >			  ## uECC.c:1775:17
    92ac:    f8 e8 c0 00       	r0 = sp + 192
    92b0:    01 16             	r1 = r0			  ## uECC.c:1776:17
    92b2:    a2 16             	r2 = r10			  ## uECC.c:1776:17
    92b4:    bf ea 74 fc       	call -0x718 <vli_add : 8ba0 >			  ## uECC.c:1776:17
    92b8:    f8 e8 c0 00       	r0 = sp + 192
    92bc:    f8 e8 d8 20       	r2 = sp + 216
    92c0:    01 16             	r1 = r0			  ## uECC.c:1778:13
    92c2:    bf ea c0 fc       	call -0x680 <vli_sub : 8c46 >			  ## uECC.c:1778:13
    92c6:    dc e9 c0 00       	r0 = b[sp+192] (u)
    92ca:    50 e8 05 02       	if ((r0 & 0x1) != 0) goto 0xa <EccPoint_mult+0x336 : 92d8 >
    92ce:    f8 e8 c0 00       	r0 = sp + 192
    92d2:    bf ea a9 fd       	call -0x4ae <vli_rshift1 : 8e28 >
    92d6:    04 8e             	goto 0x1c <EccPoint_mult+0x352 : 92f4 >
    92d8:    f8 e8 c0 10       	r1 = sp + 192
    92dc:    10 16             	r0 = r1
    92de:    a2 16             	r2 = r10
    92e0:    bf ea 5e fc       	call -0x744 <vli_add : 8ba0 >
    92e4:    06 16             	r6 = r0
    92e6:    10 16             	r0 = r1
    92e8:    bf ea 9e fd       	call -0x4c4 <vli_rshift1 : 8e28 >
    92ec:    b6 e8 00 00       	if (r6 != 0x0) {
    92f0:    05 ef 00 d4       		[r13+0x14] |= 0x80000000
                               	}
    92f4:    f8 e8 a8 00       	r0 = sp + 168
    92f8:    f8 e8 90 10       	r1 = sp + 144
    92fc:    bf ea 90 fc       	call -0x6e0 <vli_cmp : 8c20 >			  ## uECC.c:1738:25
    9300:    80 f8 77 01       	if (r0 != 0x0) goto -0x112 <EccPoint_mult+0x250 : 91f2 >
    9304:    88 80             	r0 = sp + 0
    9306:    f8 e8 d8 10       	r1 = sp + 216
    930a:    bf ea 61 fc       	call -0x73e <vli_set : 8bd0 >			  ## uECC.c:1788:5
    930e:    8d 80             	r5 = sp + 0
    9310:    50 16             	r0 = r5			  ## uECC.c:2031:5
    9312:    51 16             	r1 = r5			  ## uECC.c:2031:5
    9314:    92 16             	r2 = r9			  ## uECC.c:2031:5
    9316:    bf ea ae fc       	call -0x6a4 <vli_modMult_fast : 8c76 >			  ## uECC.c:2031:5
    931a:    50 16             	r0 = r5			  ## uECC.c:2032:5
    931c:    51 16             	r1 = r5			  ## uECC.c:2032:5
    931e:    72 16             	r2 = r7			  ## uECC.c:2032:5
    9320:    bf ea a9 fc       	call -0x6ae <vli_modMult_fast : 8c76 >			  ## uECC.c:2032:5
    9324:    b0 16             	r0 = r11			  ## uECC.c:2035:5
    9326:    c1 16             	r1 = r12			  ## uECC.c:2035:5
    9328:    72 16             	r2 = r7			  ## uECC.c:2035:5
    932a:    43 16             	r3 = r4			  ## uECC.c:2035:5
    932c:    bf ea ec fd       	call -0x428 <XYcZ_add : 8f08 >			  ## uECC.c:2035:5
    9330:    cc 88             	r4 = sp + 72			  ## uECC.c:2035:5
    9332:    8e 98             	r6 = sp + 24			  ## uECC.c:2035:5
    9334:    40 16             	r0 = r4			  ## uECC.c:2036:5
    9336:    61 16             	r1 = r6			  ## uECC.c:2036:5
    9338:    52 16             	r2 = r5			  ## uECC.c:2036:5
    933a:    bf ea 39 fd       	call -0x58e <apply_z : 8db0 >			  ## uECC.c:2036:5
    933e:    80 16             	r0 = r8			  ## uECC.c:2038:5
    9340:    41 16             	r1 = r4			  ## uECC.c:2038:5
    9342:    bf ea 45 fc       	call -0x776 <vli_set : 8bd0 >			  ## uECC.c:2038:5
    9346:    c0 38             	r0 += 0x18			  ## uECC.c:2039:13
    9348:    61 16             	r1 = r6			  ## uECC.c:2039:5
    934a:    bf ea 41 fc       	call -0x77e <vli_set : 8bd0 >			  ## uECC.c:2039:5
    934e:    22 9c             	sp += 0xf0			  ## uECC.c:2039:5
    9350:    5e 04             	{pc, r14-r4} = [sp++]			  ## uECC.c:2040:1


vli_nativeToBytes:
    9352:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:2235:0
    9354:    42 20             	r2 = 0x0			  ## uECC.c:2235:0
    9356:    04 8c             	goto 0x18 <vli_nativeToBytes+0x1E : 9370 >			  ## uECC.c:2235:0
    9358:    84 dc             	r4 = r0 + r2  #			  ## uECC.c:2239:20
    935a:    1b 43             		 r3 = b[r1+0x3] (u)			  ## uECC.c:2239:20
    935c:    5a ee 44 31       	b[++r4=0x14] = r3			  ## uECC.c:2239:18
    9360:    1b 61             	r3 = h[r1+0x2] (u)			  ## uECC.c:2240:20
    9362:    cb 41             	b[r4+0x1] = r3			  ## uECC.c:2240:18
    9364:    13 60             	r3 = [r1+0x0] 			  ## uECC.c:2241:20
    9366:    b3 a8             	r3 = r3 >> 0x8			  ## uECC.c:2241:30
    9368:    cb 42             	b[r4+0x2] = r3			  ## uECC.c:2241:18
    936a:    13 05             	r3 = [r1++=0x4] 			  ## uECC.c:2242:20
    936c:    cb 43             	b[r4+0x3] = r3			  ## uECC.c:2242:18
    936e:    fa 3c             	r2 += -0x4			  ## uECC.c:2237:5
    9370:    f2 f8 f2 d1       	if (r2 != -0x18) goto -0x1c <vli_nativeToBytes+0x6 : 9358 >
    9374:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:2244:1


EccPoint_isZero:
    9376:    10 04             	[--sp] = rets			  ## uECC.c:1796:0
    9378:    03 16             	r3 = r0			  ## uECC.c:1796:0
    937a:    bf ea f2 fb       	call -0x81c <vli_isZero : 8b62 >			  ## uECC.c:1797:13
    937e:    30 e8 00 40       	if (r0 == 0x0) {			  ## uECC.c:1797:13
    9382:    40 20             		r0 = 0x0			  ## uECC.c:1797:13
    9384:    00 04             		pc = [sp++]
                               	}			  ## uECC.c:1797:5
    9386:    38 98             	r0 = r3 + 0x18			  ## uECC.c:1797:48
    9388:    bf ea eb fb       	call -0x82a <vli_isZero : 8b62 >			  ## uECC.c:1797:37
    938c:    01 16             	r1 = r0			  ## uECC.c:1797:37
    938e:    40 21             	r0 = 0x1			  ## uECC.c:1797:34
    9390:    31 e8 00 00       	if (r1 == 0x0) {			  ## uECC.c:1797:34
    9394:    10 16             		r0 = r1
                               	}			  ## uECC.c:1797:34
    9396:    00 04             	pc = [sp++]			  ## uECC.c:1797:5


uECC_shared_secret:
    9398:    78 04             	[--sp] = {rets, r8-r4}			  ## uECC.c:2308:0
    939a:    c2 94             	sp += -0xb0			  ## uECC.c:2308:0
    939c:    06 16             	r6 = r0			  ## uECC.c:2308:0
    939e:    a8 98             	r0 = sp + 56			  ## uECC.c:2308:0
    93a0:    28 d6             	r8 = r2  #			  ## uECC.c:2308:0
    93a2:    80 26             		 [sp+24] = r0			  ## uECC.c:2313:26
    93a4:    a8 80             	r0 = sp + 32			  ## uECC.c:2313:26
    93a6:    13 d6             	r3 = r1  #
    93a8:    80 27             		 [sp+28] = r0			  ## uECC.c:2313:26
    93aa:    44 20             	r4 = 0x0
    93ac:    c7 ff 00 3b fd 00 	r7 = 0xfd3b00 <RAM_LIMIT_H+0xE33B00 : fd3b00 >
    93b2:    04 8f             	goto 0x1e <uECC_shared_secret+0x3A : 93d2 >
    93b4:    40 20             	r0 = 0x0
    93b6:    04 85             	goto 0xa <uECC_shared_secret+0x2A : 93c2 >
    93b8:    71 60             	r1 = [r7+0x0] 			  ## uECC.c:477:28
    93ba:    8a 80             	r2 = sp + 0			  ## uECC.c:477:28
    93bc:    d8 ee 21 10       	b[r2+r0] = r1			  ## uECC.c:477:17
    93c0:    c0 21             	r0 += 0x1			  ## uECC.c:476:36
    93c2:    80 f8 f9 31       	if (r0 != 0x18) goto -0xe <uECC_shared_secret+0x20 : 93b8 >
    93c6:    8d 80             	r5 = sp + 0
    93c8:    50 16             	r0 = r5			  ## uECC.c:2323:67
    93ca:    bf ea ca fb       	call -0x86c <vli_isZero : 8b62 >			  ## uECC.c:2323:67
    93ce:    00 44             	if (r0 == 0) goto 0x8 <uECC_shared_secret+0x40 : 93d8 >			  ## uECC.c:2323:67
    93d0:    c4 21             	r4 += 0x1			  ## uECC.c:2322:40
    93d2:    84 fc ef 7f       	if (r4 <= 0x3f) goto -0x22 <uECC_shared_secret+0x1C : 93b4 >
    93d6:    45 20             	r5 = 0x0
    93d8:    ac 98             	r4 = sp + 56
    93da:    40 16             	r0 = r4			  ## uECC.c:2329:5
    93dc:    31 16             	r1 = r3			  ## uECC.c:2329:5
    93de:    bf ea cb fb       	call -0x86a <vli_bytesToNative : 8b78 >			  ## uECC.c:2329:5
    93e2:    f8 e8 80 70       	r7 = sp + 128			  ## uECC.c:2329:5
    93e6:    70 16             	r0 = r7			  ## uECC.c:2330:5
    93e8:    61 16             	r1 = r6			  ## uECC.c:2330:5
    93ea:    bf ea c5 fb       	call -0x876 <vli_bytesToNative : 8b78 >			  ## uECC.c:2330:5
    93ee:    78 98             	r0 = r7 + 0x18			  ## uECC.c:2331:23
    93f0:    69 98             	r1 = r6 + 0x18			  ## uECC.c:2331:44
    93f2:    bf ea c1 fb       	call -0x87e <vli_bytesToNative : 8b78 >			  ## uECC.c:2331:5
    93f6:    c2 ff c8 94 00 00 	r2 = 0x94c8 <curve_n : 94c8 >			  ## uECC.c:2339:13
    93fc:    40 16             	r0 = r4			  ## uECC.c:2339:13
    93fe:    41 16             	r1 = r4			  ## uECC.c:2339:13
    9400:    bf ea ce fb       	call -0x864 <vli_add : 8ba0 >			  ## uECC.c:2339:13
    9404:    06 16             	r6 = r0			  ## uECC.c:2339:13
    9406:    a8 80             	r0 = sp + 32
    9408:    bf ea ca fb       	call -0x86c <vli_add : 8ba0 >			  ## uECC.c:2340:5
    940c:    44 21             	r4 = 0x1			  ## uECC.c:2340:5
    940e:    40 21             	r0 = 0x1			  ## uECC.c:2341:41
    9410:    b6 e8 00 00       	if (r6 != 0x0) {			  ## uECC.c:2341:41
    9414:    40 20             		r0 = 0x0
                               	}			  ## uECC.c:2341:41
    9416:    89 98             	r1 = sp + 24			  ## uECC.c:2341:41
    9418:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## uECC.c:2341:38
    941c:    ce 90             	r6 = sp + 80			  ## uECC.c:2341:38
    941e:    60 15             	r1_r0 = r7_r6			  ## uECC.c:2341:5
    9420:    53 16             	r3 = r5			  ## uECC.c:2341:5
    9422:    bf ea be fd       	call -0x484 <EccPoint_mult : 8fa2 >			  ## uECC.c:2341:5
    9426:    80 16             	r0 = r8			  ## uECC.c:2344:5
    9428:    61 16             	r1 = r6			  ## uECC.c:2344:5
    942a:    41 93             	call -0xda <vli_nativeToBytes : 9352 >			  ## uECC.c:2344:5
    942c:    60 16             	r0 = r6			  ## uECC.c:2345:13
    942e:    51 83             	call -0xba <EccPoint_isZero : 9376 >			  ## uECC.c:2345:13
    9430:    b0 e8 00 00       	if (r0 != 0x0) {			  ## uECC.c:2345:13
    9434:    44 20             		r4 = 0x0
                               	}			  ## uECC.c:2345:12
    9436:    40 16             	r0 = r4			  ## uECC.c:2345:5
    9438:    22 8c             	sp += 0xb0			  ## uECC.c:2345:5
    943a:    58 04             	{pc, r8-r4} = [sp++]			  ## uECC.c:2345:5


uECC_compute_public_key:
    943c:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:2417:0
    943e:    e2 80             	sp += -0x80			  ## uECC.c:2417:0
    9440:    14 16             	r4 = r1			  ## uECC.c:2417:0
    9442:    01 16             	r1 = r0			  ## uECC.c:2417:0
    9444:    ad 90             	r5 = sp + 48			  ## uECC.c:2417:0
    9446:    50 16             	r0 = r5			  ## uECC.c:2421:5
    9448:    bf ea 96 fb       	call -0x8d4 <vli_bytesToNative : 8b78 >			  ## uECC.c:2421:5
    944c:    e8 88             	r0 = sp + 104			  ## uECC.c:2421:5
    944e:    80 32             	[sp+72] = r0			  ## uECC.c:2046:26
    9450:    c8 90             	r0 = sp + 80			  ## uECC.c:2046:26
    9452:    50 d6             	r0 = r5  #			  ## uECC.c:2050:9
    9454:    80 33             		 [sp+76] = r0			  ## uECC.c:2046:26
    9456:    bf ea 84 fb       	call -0x8f8 <vli_isZero : 8b62 >			  ## uECC.c:2050:9
    945a:    90 52             	if (r0 != 0) goto 0x64 <uECC_compute_public_key+0x84 : 94c0 >
    945c:    c5 ff c8 94 00 00 	r5 = 0x94c8 <curve_n : 94c8 >
    9462:    a9 90             	r1 = sp + 48
    9464:    50 16             	r0 = r5			  ## uECC.c:2061:9
    9466:    bf ea db fb       	call -0x84a <vli_cmp : 8c20 >			  ## uECC.c:2061:9
    946a:    80 f8 29 02       	if (r0 != 0x1) goto 0x52 <uECC_compute_public_key+0x84 : 94c0 >			  ## uECC.c:2061:9
    946e:    ee 88             	r6 = sp + 104
    9470:    a9 90             	r1 = sp + 48
    9472:    60 16             	r0 = r6			  ## uECC.c:2067:13
    9474:    52 16             	r2 = r5			  ## uECC.c:2067:13
    9476:    bf ea 93 fb       	call -0x8da <vli_add : 8ba0 >			  ## uECC.c:2067:13
    947a:    07 16             	r7 = r0			  ## uECC.c:2067:13
    947c:    c8 90             	r0 = sp + 80
    947e:    61 16             	r1 = r6			  ## uECC.c:2068:5
    9480:    bf ea 8e fb       	call -0x8e4 <vli_add : 8ba0 >			  ## uECC.c:2068:5
    9484:    45 20             	r5 = 0x0			  ## uECC.c:2068:5
    9486:    40 21             	r0 = 0x1			  ## uECC.c:2069:40
    9488:    b7 e8 00 00       	if (r7 != 0x0) {			  ## uECC.c:2069:40
    948c:    40 20             		r0 = 0x0
                               	}			  ## uECC.c:2069:40
    948e:    c9 88             	r1 = sp + 72			  ## uECC.c:2069:40
    9490:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## uECC.c:2069:37
    9494:    8e 80             	r6 = sp + 0			  ## uECC.c:2069:37
    9496:    c1 ff e0 94 00 00 	r1 = 0x94e0 <curve_G : 94e0 >			  ## uECC.c:2069:5
    949c:    43 20             	r3 = 0x0			  ## uECC.c:2069:5
    949e:    60 16             	r0 = r6			  ## uECC.c:2069:5
    94a0:    bf ea 7f fd       	call -0x502 <EccPoint_mult : 8fa2 >			  ## uECC.c:2069:5
    94a4:    60 16             	r0 = r6			  ## uECC.c:2072:9
    94a6:    bf ea 66 ff       	call -0x134 <EccPoint_isZero : 9376 >			  ## uECC.c:2072:9
    94aa:    80 4b             	if (r0 != 0) goto 0x16 <uECC_compute_public_key+0x86 : 94c2 >			  ## uECC.c:2072:9
    94ac:    8d 80             	r5 = sp + 0
    94ae:    40 15             	r1_r0 = r5_r4			  ## uECC.c:2427:5
    94b0:    bf ea 4f ff       	call -0x162 <vli_nativeToBytes : 9352 >			  ## uECC.c:2427:5
    94b4:    48 98             	r0 = r4 + 0x18			  ## uECC.c:2428:34
    94b6:    59 98             	r1 = r5 + 0x18			  ## uECC.c:2428:48
    94b8:    bf ea 4b ff       	call -0x16a <vli_nativeToBytes : 9352 >			  ## uECC.c:2428:5
    94bc:    45 21             	r5 = 0x1			  ## uECC.c:2428:5
    94be:    04 81             	goto 0x2 <uECC_compute_public_key+0x86 : 94c2 >			  ## uECC.c:2428:5
    94c0:    45 20             	r5 = 0x0
    94c2:    50 16             	r0 = r5			  ## uECC.c:2430:1
    94c4:    22 80             	sp += 0x80			  ## uECC.c:2430:1
    94c6:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:2430:1


curve_n:
    94c8:	 31 28 d2 b4 b1 c9 6b 14         1(....k.
    94d0:	 36 f8 de 99 ff ff ff ff         6.......
    94d8:	 ff ff ff ff ff ff ff ff         ........


curve_G:
    94e0:	 12 10 ff 82 fd 0a ff f4         ........
    94e8:	 00 88 a1 43 eb 20 bf 7c         ...C. .|
    94f0:	 f6 90 30 b0 0e a8 8d 18         ..0.....
    94f8:	 11 48 79 1e a1 77 f9 73         .Hy..w.s
    9500:	 d5 cd 24 6b ed 11 10 63         ..$k...c
    9508:	 78 da c8 ff 95 2b 19 07         x....+..


curve_p:
    9510:	 ff ff ff ff ff ff ff ff         ........
    9518:	 fe ff ff ff ff ff ff ff         ........
    9520:	 ff ff ff ff ff ff ff ff         ........


find_max_exp_index:
    9528:    88 17             	r0 = r0.l (s)			  ## bigint.c:1402:0
    952a:    f9 3c             	r1 += -0x4			  ## bigint.c:1405:17
    952c:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## bigint.c:1405:17
    9530:    60 e0 00 34       	r3 = 0x80000000
    9534:    41 20             	r1 = 0x0
    9536:    23 fb 06 00       	if ((r3 & r2) != 0) goto 0xc <find_max_exp_index+0x1E : 9546 >			  ## bigint.c:1410:13
    953a:    c1 21             	r1 += 0x1			  ## bigint.c:1415:18
    953c:    b3 a1             	r3 = r3 >> 0x1			  ## bigint.c:1414:15
    953e:    81 f8 fa 41       	if (r1 != 0x20) goto -0xc <find_max_exp_index+0xE : 9536 >
    9542:    10 3f             	r0 = -0x1
    9544:    80 00             	rts			  ## bigint.c:1418:1
    9546:    00 a5             	r0 = r0 << 0x5			  ## bigint.c:1411:42
    9548:    f8 3f             	r0 += -0x1			  ## bigint.c:1411:13
    954a:    08 1e             	r0 = r0 - r1			  ## bigint.c:1411:13
    954c:    80 00             	rts			  ## bigint.c:1418:1


trim:
    954e:    02 63             	r2 = [r0+0xc] 			  ## bigint.c:1463:0
    9550:    09 62             	r1 = h[r0+0x4] (u)			  ## bigint.c:1463:0
    9552:    fa 3c             	r2 += -0x4			  ## bigint.c:1463:0
    9554:    04 85             	goto 0xa <trim+0x12 : 9560 >			  ## bigint.c:1463:0
    9556:    d8 ec 2a 33       	r3 = [r2+r3<<2]			  ## bigint.c:1466:13
    955a:    83 45             	if (r3 != 0) goto 0xa <trim+0x18 : 9566 >			  ## bigint.c:1466:13
    955c:    f9 3f             	r1 += -0x1			  ## bigint.c:1467:17
    955e:    89 62             	h[r0+0x4] = r1			  ## bigint.c:1467:17
    9560:    9b 17             	r3 = r1.l (s)			  ## bigint.c:1466:23
    9562:    03 fd f8 05       	ifs (r3 >= 0x2) goto -0x10 <trim+0x8 : 9556 >			  ## bigint.c:1466:23
    9566:    80 00             	rts			  ## bigint.c:1470:5


more_comps:
    9568:    75 04             	[--sp] = {rets, r5, r4}			  ## bigint.c:1341:0
    956a:    04 15             	r5_r4 = r1_r0			  ## bigint.c:1341:0
    956c:    54 ed 44 20       	r2 = h[r4+0x4] (s)			  ## bigint.c:1347:13
    9570:    05 ed 09 20       	ifs (r2 >= r5) goto 0x12 <more_comps+0x1E : 9586 >
    9574:    40 63             	r0 = [r4+0xc] 			  ## bigint.c:1348:21
    9576:    21 a2             	r1 = r2 << 0x2			  ## bigint.c:1348:17
    9578:    10 18             	r0 += r1			  ## bigint.c:1348:17
    957a:    d1 1e             	r1 = r5 - r2			  ## bigint.c:1348:44
    957c:    12 a2             	r2 = r1 << 0x2			  ## bigint.c:1348:55
    957e:    41 20             	r1 = 0x0			  ## bigint.c:1348:9
    9580:    80 ff a0 ac ff ff 	call -0x5360 <memset : 4226 >			  ## bigint.c:1348:9
    9586:    cd 62             	h[r4+0x4] = r5			  ## bigint.c:1351:14
    9588:    55 04             	{pc, r5, r4} = [sp++]			  ## bigint.c:1352:1


bi_lshift:
    958a:    79 04             	[--sp] = {rets, r9-r4}			  ## bigint.c:210:0
    958c:    09 16             	r9 = r0			  ## bigint.c:210:0
    958e:    81 fd 4e 02       	ifs (r1 < 0x1) goto 0x9c <bi_lshift+0xA4 : 962e >			  ## bigint.c:210:0
    9592:    9b d9             	r3 = ~r1  #			  ## bigint.c:214:9
    9594:    02 63             		 r2 = [r0+0xc] 			  ## bigint.c:212:19
    9596:    54 ed 04 00       	r0 = h[r0+0x4] (s)			  ## bigint.c:212:25
    959a:    fa 3c             	r2 += -0x4			  ## bigint.c:212:16
    959c:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## bigint.c:212:16
    95a0:    b3 ee df 0f       	ifs (r3 <= -0x21) {
    95a4:    43 e0 df ff       		r3 = -0x21
                               	} <RAM_LIMIT_H+0xFFFFFFFFFFE5FFDE : ffffffffffffffde >			  ## bigint.c:214:9
    95a8:    13 18             	r3 += r1			  ## bigint.c:214:9
    95aa:    cb 20             	r3 += 0x20			  ## bigint.c:214:9
    95ac:    c0 e1 35 88       	r8 = r3 >> 0x5			  ## bigint.c:214:9
    95b0:    c0 e1 85 30       	r3 = r8 << 0x5			  ## bigint.c:214:9
    95b4:    9e 1e             	r6 = r1 - r3			  ## bigint.c:214:9
    95b6:    41 20             	r1 = 0x0			  ## bigint.c:214:9
    95b8:    60 e0 00 34       	r3 = 0x80000000			  ## bigint.c:214:9
    95bc:    04 84             	goto 0x8 <bi_lshift+0x3C : 95c6 >			  ## bigint.c:214:9
    95be:    23 fb 05 00       	if ((r3 & r2) != 0) goto 0xa <bi_lshift+0x42 : 95cc >
    95c2:    c1 21             	r1 += 0x1			  ## bigint.c:225:29
    95c4:    b3 a1             	r3 = r3 >> 0x1			  ## bigint.c:231:14
    95c6:    86 ed fa 11       	ifs (r1 < r6) goto -0xc <bi_lshift+0x34 : 95be >
    95ca:    04 85             	goto 0xa <bi_lshift+0x4C : 95d6 >
    95cc:    09 81             	r1 = r0 + 0x1			  ## bigint.c:228:35
    95ce:    90 16             	r0 = r9			  ## bigint.c:228:13
    95d0:    61 8b             	call -0x6a <more_comps : 9568 >			  ## bigint.c:228:13
    95d2:    50 ed 94 00       	r0 = h[r9+0x4] (u)
    95d6:    8f 17             	r7 = r0.l (s)
    95d8:    a0 e0 20 60       	r0 = 0x20 - r6			  ## bigint.c:233:26
    95dc:    41 20             	r1 = 0x0
    95de:    42 20             	r2 = 0x0
    95e0:    04 8c             	goto 0x18 <bi_lshift+0x70 : 95fa >
    95e2:    d0 ec 9c 30       	r3 = [r9+0xc]			  ## bigint.c:236:18
    95e6:    d8 ec 3a 52       	r5 = [r3+r2<<2]			  ## bigint.c:236:15
    95ea:    c8 e1 50 46       	r4 = r5 << r6			  ## bigint.c:237:21
    95ee:    41 19             	r1 |= r4			  ## bigint.c:238:21
    95f0:    d8 ec 3b 12       	[r3+r2<<2] = r1			  ## bigint.c:238:21
    95f4:    c8 e1 52 10       	r1 = r5 >> r0			  ## bigint.c:236:27
    95f8:    c2 21             	r2 += 0x1			  ## bigint.c:235:31
    95fa:    87 ed f2 21       	ifs (r2 < r7) goto -0x1c <bi_lshift+0x58 : 95e2 >
    95fe:    08 f8 16 00       	if (r8 == 0x0) goto 0x2c <bi_lshift+0xA4 : 962e >
    9602:    b4 e0 70 18       	r1 = r7 + r8			  ## bigint.c:854:31
    9606:    90 16             	r0 = r9			  ## bigint.c:854:5
    9608:    51 8f             	call -0xa2 <more_comps : 9568 >			  ## bigint.c:854:5
    960a:    d0 ec 9c 00       	r0 = [r9+0xc]			  ## bigint.c:856:15
    960e:    c0 e1 82 20       	r2 = r8 << 0x2			  ## bigint.c:859:5
    9612:    81 1c             	r1 = r0 + r2			  ## bigint.c:856:15
    9614:    f9 3c             	r1 += -0x4			  ## bigint.c:859:5
    9616:    33 e1 fc 0f       	r3 = r0 + -0x4			  ## bigint.c:859:5
    961a:    d8 ec 3a 47       	r4 = [r3+r7<<2]			  ## bigint.c:860:16
    961e:    d8 ec 1b 47       	[r1+r7<<2] = r4			  ## bigint.c:860:14
    9622:    07 ea fa ff       	if (--r7 != 0) goto -0xc <bi_lshift+0x90 : 961a >			  ## bigint.c:861:5
    9626:    41 20             	r1 = 0x0			  ## bigint.c:863:5
    9628:    80 ff f8 ab ff ff 	call -0x5408 <memset : 4226 >			  ## bigint.c:863:5
    962e:    59 04             	{pc, r9-r4} = [sp++]			  ## bigint.c:242:1


bi_rshift:
    9630:    79 04             	[--sp] = {rets, r9-r4}			  ## bigint.c:180:0
    9632:    81 fd 1c 02       	ifs (r1 < 0x1) goto 0x38 <bi_rshift+0x3E : 966e >			  ## bigint.c:180:0
    9636:    9a 19             	r2 = ~r1			  ## bigint.c:185:9
    9638:    b2 ee df 0f       	ifs (r2 <= -0x21) {			  ## bigint.c:185:9
    963c:    42 e0 df ff       		r2 = -0x21
                               	} <RAM_LIMIT_H+0xFFFFFFFFFFE5FFDE : ffffffffffffffde >			  ## bigint.c:185:9
    9640:    12 18             	r2 += r1			  ## bigint.c:185:9
    9642:    54 ed 04 60       	r6 = h[r0+0x4] (s)			  ## bigint.c:820:13
    9646:    03 f1 20 20       	r3 = r2 + 0x20  #			  ## bigint.c:185:9
    964a:    02 63             		 r2 = [r0+0xc] 			  ## bigint.c:821:20
    964c:    b4 a5             	r4 = r3 >> 0x5			  ## bigint.c:185:9
    964e:    65 1f             	r5 = r6 - r4			  ## bigint.c:820:23
    9650:    43 a5             	r3 = r4 << 0x5			  ## bigint.c:185:9
    9652:    85 fd 0e 02       	ifs (r5 < 0x1) goto 0x1c <bi_rshift+0x42 : 9672 >			  ## bigint.c:185:9
    9656:    b8 e1 40 60       	r8 = uextra(r6, p:0x0, l:0x10)			  ## bigint.c:820:18
    965a:    27 16             	r7 = r2			  ## bigint.c:820:18
    965c:    d8 ec 7a 64       	r6 = [r7+r4<<2]			  ## bigint.c:833:16
    9660:    fd 3f             	r5 += -0x1			  ## bigint.c:834:14
    9662:    f6 05             	[r7++=0x4] = r6			  ## bigint.c:833:14
    9664:    05 fe fa 01       	ifs (r5 > 0x0) goto -0xc <bi_rshift+0x2C : 965c >			  ## bigint.c:834:5
    9668:    b4 e0 82 44       	r4 = r8 - r4			  ## bigint.c:836:15
    966c:    04 85             	goto 0xa <bi_rshift+0x48 : 9678 >
    966e:    40 20             	r0 = 0x0
    9670:    59 04             	{pc, r9-r4} = [sp++]			  ## bigint.c:208:1
    9672:    40 ea 00 20       	[r2+0x0] = 0x0			  ## bigint.c:827:23
    9676:    44 21             	r4 = 0x1			  ## bigint.c:827:23
    9678:    99 de             	r1 = r1 - r3  #			  ## bigint.c:185:9
    967a:    8c 62             		 h[r0+0x4] = r4			  ## bigint.c:828:19
    967c:    43 20             	r3 = 0x0
    967e:    45 20             	r5 = 0x0
    9680:    04 85             	goto 0xa <bi_rshift+0x5C : 968c >
    9682:    46 21             	r6 = 0x1			  ## bigint.c:199:14
    9684:    a6 e1 fc 30       	r6 <= insert(r3, p:0x1, l:0x1f)			  ## bigint.c:199:14
    9688:    c5 21             	r5 += 0x1			  ## bigint.c:197:29
    968a:    63 16             	r3 = r6
    968c:    81 ed f9 51       	ifs (r5 < r1) goto -0xe <bi_rshift+0x52 : 9682 >			  ## bigint.c:197:5
    9690:    b8 e1 41 40       	r8 = sextra(r4, p:0x0, l:0x10)			  ## bigint.c:196:25
    9694:    c0 e1 82 50       	r5 = r8 << 0x2			  ## bigint.c:196:25
    9698:    52 18             	r2 += r5
    969a:    fa 3c             	r2 += -0x4
    969c:    a9 e0 20 10       	r9 = 0x20 - r1
    96a0:    86 14             	r7_r6 = 0
    96a2:    04 8a             	goto 0x14 <bi_rshift+0x88 : 96b8 >
    96a4:    c8 f1 70 79       	r7 = r7 << r9  #			  ## bigint.c:204:28
    96a8:    24 60             		 r4 = [r2+0x0] 			  ## bigint.c:202:15
    96aa:    c8 e1 42 51       	r5 = r4 >> r1			  ## bigint.c:203:17
    96ae:    75 19             	r5 |= r7			  ## bigint.c:204:19
    96b0:    90 f1 42 73       	r7 = r4 & r3  #			  ## bigint.c:202:23
    96b4:    ad 05             		 [r2++=-0x4] = r5			  ## bigint.c:204:19
    96b6:    c6 21             	r6 += 0x1			  ## bigint.c:201:31
    96b8:    88 ed f4 61       	ifs (r6 < r8) goto -0x18 <bi_rshift+0x74 : 96a4 >
    96bc:    bf ea 47 ff       	call -0x172 <trim : 954e >			  ## bigint.c:207:12
    96c0:    59 04             	{pc, r9-r4} = [sp++]			  ## bigint.c:208:1


bi_xor:
    96c2:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:119:0
    96c4:    04 15             	r5_r4 = r1_r0			  ## bigint.c:119:0
    96c6:    54 ed 54 00       	r0 = h[r5+0x4] (s)			  ## bigint.c:120:30
    96ca:    54 ed 44 10       	r1 = h[r4+0x4] (s)			  ## bigint.c:120:18
    96ce:    42 16             	r2 = r4			  ## bigint.c:120:13
    96d0:    91 ee 00 00       	ifs (r1 <= r0) {			  ## bigint.c:120:13
    96d4:    52 16             		r2 = r5
                               	}			  ## bigint.c:120:13
    96d6:    54 ed 24 60       	r6 = h[r2+0x4] (s)			  ## bigint.c:120:13
    96da:    91 ee 00 10       	ifs (r1 <= r0) {
    96de:    40 16             		r0 = r4
                               	} else {			  ## bigint.c:124:9
    96e0:    50 16             		r0 = r5
                               	}			  ## bigint.c:122:9
    96e2:    61 16             	r1 = r6			  ## bigint.c:122:9
    96e4:    bf ea 40 ff       	call -0x180 <more_comps : 9568 >			  ## bigint.c:122:9
    96e8:    30 e1 ff 6f       	r0 = r6 + -0x1			  ## bigint.c:120:9
    96ec:    04 89             	goto 0x12 <bi_xor+0x3E : 9700 >			  ## bigint.c:120:9
    96ee:    51 63             	r1 = [r5+0xc] 			  ## bigint.c:127:35
    96f0:    42 63             	r2 = [r4+0xc] 			  ## bigint.c:127:14
    96f2:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## bigint.c:127:30
    96f6:    03 a2             	r3 = r0 << 0x2			  ## bigint.c:127:30
    96f8:    32 18             	r2 += r3			  ## bigint.c:127:27
    96fa:    64 e8 01 21       	[r2+0x0] ^= r1			  ## bigint.c:127:27
    96fe:    f8 3f             	r0 += -0x1			  ## bigint.c:126:5
    9700:    f0 f8 f5 ff       	if (r0 != -0x1) goto -0x16 <bi_xor+0x2C : 96ee >
    9704:    40 16             	r0 = r4			  ## bigint.c:130:5
    9706:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:130:5


bi_free:
    9708:    01 53             	if (r1 == 0) goto 0x26 <bi_free+0x28 : 9730 >			  ## bigint.c:494:0
    970a:    12 63             	r2 = [r1+0xc] 			  ## bigint.c:497:27
    970c:    02 51             	if (r2 == 0) goto 0x22 <bi_free+0x28 : 9730 >			  ## bigint.c:497:27
    970e:    12 62             	r2 = [r1+0x8] 			  ## bigint.c:500:13
    9710:    c3 ff aa 55 ff 7f 	r3 = 0x7fff55aa <RAM_LIMIT_H+0x7FE555AA : 7fff55aa >			  ## bigint.c:500:18
    9716:    03 e8 0b 20       	if (r2 == r3) goto 0x16 <bi_free+0x28 : 9730 >			  ## bigint.c:500:18
    971a:    fa 3f             	r2 += -0x1			  ## bigint.c:504:9
    971c:    92 62             	[r1+0x8] = r2			  ## bigint.c:504:9
    971e:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <bi_free+0x28 : 9730 >			  ## bigint.c:504:9
    9722:    02 61             	r2 = [r0+0x4] 			  ## bigint.c:510:21
    9724:    92 60             	[r1+0x0] = r2			  ## bigint.c:510:14
    9726:    81 61             	[r0+0x4] = r1			  ## bigint.c:511:20
    9728:    cc eb 01 00       	[r0+0x30] += 0x1			  ## bigint.c:512:20
    972c:    cb eb ff 0f       	[r0+0x2c] += -0x1			  ## bigint.c:514:9
    9730:    80 00             	rts			  ## bigint.c:523:1


bi_poly_mod2:
    9732:    78 04             	[--sp] = {rets, r8-r4}			  ## bigint.c:60:0
    9734:    24 16             	r4 = r2			  ## bigint.c:60:0
    9736:    15 d6             	r5 = r1  #			  ## bigint.c:60:0
    9738:    42 63             		 r2 = [r4+0xc] 			  ## bigint.c:60:0
    973a:    08 d6             	r8 = r0  #			  ## bigint.c:60:0
    973c:    4b 62             		 r3 = h[r4+0x4] (u)			  ## bigint.c:61:18
    973e:    30 16             	r0 = r3			  ## bigint.c:61:18
    9740:    21 16             	r1 = r2			  ## bigint.c:61:18
    9742:    bf ea f1 fe       	call -0x21e <find_max_exp_index : 9528 >			  ## bigint.c:61:18
    9746:    07 16             	r7 = r0			  ## bigint.c:61:18
    9748:    14 82             	goto 0x44 <bi_poly_mod2+0x5C : 978e >
    974a:    50 16             	r0 = r5			  ## bigint.c:106:5
    974c:    bf ea ff fe       	call -0x202 <trim : 954e >			  ## bigint.c:106:5
    9750:    40 16             	r0 = r4			  ## bigint.c:107:5
    9752:    bf ea fc fe       	call -0x208 <trim : 954e >			  ## bigint.c:107:5
    9756:    51 63             	r1 = [r5+0xc] 			  ## bigint.c:107:5
    9758:    58 62             	r0 = h[r5+0x4] (u)			  ## bigint.c:108:10
    975a:    bf ea e5 fe       	call -0x236 <find_max_exp_index : 9528 >			  ## bigint.c:108:10
    975e:    06 d6             	r6 = r0  #			  ## bigint.c:108:10
    9760:    41 63             		 r1 = [r4+0xc] 			  ## bigint.c:108:10
    9762:    4a 62             	r2 = h[r4+0x4] (u)			  ## bigint.c:109:10
    9764:    20 16             	r0 = r2			  ## bigint.c:109:10
    9766:    bf ea df fe       	call -0x242 <find_max_exp_index : 9528 >			  ## bigint.c:109:10
    976a:    61 1e             	r1 = r6 - r0			  ## bigint.c:110:13
    976c:    81 fd 04 02       	ifs (r1 < 0x1) goto 0x8 <bi_poly_mod2+0x46 : 9778 >			  ## bigint.c:111:9
    9770:    40 16             	r0 = r4			  ## bigint.c:112:9
    9772:    bf ea 0a ff       	call -0x1ec <bi_lshift : 958a >			  ## bigint.c:112:9
    9776:    04 85             	goto 0xa <bi_poly_mod2+0x50 : 9782 >
    9778:    a1 e0 00 10       	r1 = 0x0 - r1			  ## bigint.c:114:30
    977c:    40 16             	r0 = r4			  ## bigint.c:114:15
    977e:    bf ea 57 ff       	call -0x152 <bi_rshift : 9630 >			  ## bigint.c:114:15
    9782:    50 16             	r0 = r5			  ## bigint.c:64:15
    9784:    41 16             	r1 = r4			  ## bigint.c:64:15
    9786:    41 9d             	call -0xc6 <bi_xor : 96c2 >			  ## bigint.c:64:15
    9788:    50 16             	r0 = r5			  ## bigint.c:65:9
    978a:    bf ea e0 fe       	call -0x240 <trim : 954e >			  ## bigint.c:65:9
    978e:    51 63             	r1 = [r5+0xc] 
    9790:    58 62             	r0 = h[r5+0x4] (u)			  ## bigint.c:62:12
    9792:    bf ea c9 fe       	call -0x26e <find_max_exp_index : 9528 >			  ## bigint.c:62:12
    9796:    07 ed d8 01       	ifs (r0 >= r7) goto -0x50 <bi_poly_mod2+0x18 : 974a >			  ## bigint.c:62:12
    979a:    80 16             	r0 = r8			  ## bigint.c:67:5
    979c:    41 16             	r1 = r4			  ## bigint.c:67:5
    979e:    51 94             	call -0x98 <bi_free : 9708 >			  ## bigint.c:67:5
    97a0:    50 16             	r0 = r5			  ## bigint.c:68:5
    97a2:    58 04             	{pc, r8-r4} = [sp++]			  ## bigint.c:68:5


alloc:
    97a4:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:1359:0
    97a6:    04 16             	r4 = r0			  ## bigint.c:1359:0
    97a8:    16 d6             	r6 = r1  #			  ## bigint.c:1359:0
    97aa:    45 61             		 r5 = [r4+0x4] 			  ## bigint.c:1363:14
    97ac:    05 48             	if (r5 == 0) goto 0x10 <alloc+0x1A : 97be >			  ## bigint.c:1363:9
    97ae:    50 60             	r0 = [r5+0x0] 			  ## bigint.c:1365:31
    97b0:    50 d6             	r0 = r5  #			  ## bigint.c:1375:9
    97b2:    c0 61             		 [r4+0x4] = r0			  ## bigint.c:1365:24
    97b4:    cc eb ff 4f       	[r4+0x30] += -0x1			  ## bigint.c:1366:24
    97b8:    bf ea d6 fe       	call -0x254 <more_comps : 9568 >			  ## bigint.c:1375:9
    97bc:    04 8a             	goto 0x14 <alloc+0x2E : 97d2 >			  ## bigint.c:1375:9
    97be:    45 6f             	r5 = [r4+0x3c] 			  ## bigint.c:1378:30
    97c0:    58 90             	r0 = r5 + 0x10			  ## bigint.c:1379:23
    97c2:    00 f1 48 50       	r0 = r5 + 0x48  #			  ## bigint.c:1381:23
    97c6:    d0 63             		 [r5+0xc] = r0			  ## bigint.c:1380:20
    97c8:    c0 6f             	[r4+0x3c] = r0			  ## bigint.c:1381:23
    97ca:    40 2e             	r0 = 0xe			  ## bigint.c:1382:24
    97cc:    d8 63             	h[r5+0x6] = r0			  ## bigint.c:1382:24
    97ce:    d0 eb 48 40       	[r4+0x40] += 0x48			  ## bigint.c:1383:23
    97d2:    50 d6             	r0 = r5  #			  ## bigint.c:1394:5
    97d4:    de 62             		 h[r5+0x4] = r6			  ## bigint.c:1387:15
    97d6:    42 ea 01 50       	[r5+0x8] = 0x1			  ## bigint.c:1388:15
    97da:    40 ea 00 50       	[r5+0x0] = 0x0			  ## bigint.c:1389:15
    97de:    cb eb 01 40       	[r4+0x2c] += 0x1			  ## bigint.c:1390:22
    97e2:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:1394:5


bi_poly_mul:
    97e4:    7b 04             	[--sp] = {rets, r11-r4}			  ## bigint.c:71:0
    97e6:    25 16             	r5 = r2			  ## bigint.c:71:0
    97e8:    08 d5             	r9_r8 = r1_r0  #			  ## bigint.c:71:0
    97ea:    52 63             		 r2 = [r5+0xc] 			  ## bigint.c:71:0
    97ec:    21 d6             	r1 = r2  #			  ## bigint.c:72:18
    97ee:    5b 62             		 r3 = h[r5+0x4] (u)			  ## bigint.c:72:18
    97f0:    30 16             	r0 = r3			  ## bigint.c:72:18
    97f2:    bf ea 99 fe       	call -0x2ce <find_max_exp_index : 9528 >			  ## bigint.c:72:18
    97f6:    0a 16             	r10 = r0			  ## bigint.c:72:18
    97f8:    86 14             	r7_r6 = 0
    97fa:    44 20             	r4 = 0x0
    97fc:    c3 14             	r11 = 0
    97fe:    14 88             	goto 0x50 <bi_poly_mul+0x6C : 9850 >
    9800:    50 63             	r0 = [r5+0xc] 			  ## bigint.c:80:18
    9802:    08 40             	r0 = b[r0+0x0] (u)			  ## bigint.c:80:13
    9804:    50 e8 1e 00       	if ((r0 & 0x1) == 0) goto 0x3c <bi_poly_mul+0x60 : 9844 >			  ## bigint.c:80:13
    9808:    07 49             	if (r7 == 0) goto 0x12 <bi_poly_mul+0x38 : 981c >
    980a:    61 1f             	r1 = r6 - r4			  ## bigint.c:89:17
    980c:    b0 16             	r0 = r11			  ## bigint.c:89:17
    980e:    bf ea bc fe       	call -0x288 <bi_lshift : 958a >			  ## bigint.c:89:17
    9812:    90 16             	r0 = r9			  ## bigint.c:91:23
    9814:    b1 16             	r1 = r11			  ## bigint.c:91:23
    9816:    bf ea 54 ff       	call -0x158 <bi_xor : 96c2 >			  ## bigint.c:91:23
    981a:    04 92             	goto 0x24 <bi_poly_mul+0x5C : 9840 >			  ## bigint.c:91:23
    981c:    90 16             	r0 = r9			  ## bigint.c:82:17
    981e:    61 16             	r1 = r6			  ## bigint.c:82:17
    9820:    bf ea b3 fe       	call -0x29a <bi_lshift : 958a >			  ## bigint.c:82:17
    9824:    54 ed 94 10       	r1 = h[r9+0x4] (s)			  ## bigint.c:545:30
    9828:    80 16             	r0 = r8			  ## bigint.c:545:19
    982a:    51 9c             	call -0x88 <alloc : 97a4 >			  ## bigint.c:545:19
    982c:    0b d6             	r11 = r0  #			  ## bigint.c:545:19
    982e:    00 63             		 r0 = [r0+0xc] 			  ## bigint.c:548:17
    9830:    d0 ec 9c 10       	r1 = [r9+0xc]			  ## bigint.c:548:28
    9834:    54 ed 94 20       	r2 = h[r9+0x4] (s)			  ## bigint.c:548:35
    9838:    22 a2             	r2 = r2 << 0x2			  ## bigint.c:548:44
    983a:    80 ff fc a8 ff ff 	call -0x5704 <memmove : 413c >			  ## bigint.c:548:5
    9840:    47 21             	r7 = 0x1
    9842:    64 16             	r4 = r6
    9844:    41 21             	r1 = 0x1			  ## bigint.c:95:15
    9846:    50 16             	r0 = r5			  ## bigint.c:95:15
    9848:    bf ea f2 fe       	call -0x21c <bi_rshift : 9630 >			  ## bigint.c:95:15
    984c:    05 16             	r5 = r0			  ## bigint.c:95:15
    984e:    c6 21             	r6 += 0x1			  ## bigint.c:79:54
    9850:    8a ee d6 61       	ifs (r6 <= r10) goto -0x54 <bi_poly_mul+0x1C : 9800 >
    9854:    80 16             	r0 = r8			  ## bigint.c:97:5
    9856:    b1 16             	r1 = r11			  ## bigint.c:97:5
    9858:    bf ea 56 ff       	call -0x154 <bi_free : 9708 >			  ## bigint.c:97:5
    985c:    51 16             	r1 = r5			  ## bigint.c:98:5
    985e:    bf ea 53 ff       	call -0x15a <bi_free : 9708 >			  ## bigint.c:98:5
    9862:    90 16             	r0 = r9			  ## bigint.c:99:5
    9864:    5b 04             	{pc, r11-r4} = [sp++]			  ## bigint.c:99:5


bi_wirte_to_byte:
    9866:    74 04             	[--sp] = {rets, r4}			  ## bigint.c:133:0
    9868:    54 ed 04 20       	r2 = h[r0+0x4] (s)			  ## bigint.c:134:29
    986c:    00 63             	r0 = [r0+0xc] 			  ## bigint.c:134:21
    986e:    23 a2             	r3 = r2 << 0x2			  ## bigint.c:134:27
    9870:    30 18             	r0 += r3			  ## bigint.c:134:27
    9872:    04 8d             	goto 0x1a <bi_wirte_to_byte+0x28 : 988e >			  ## bigint.c:134:27
    9874:    f8 3c             	r0 += -0x4
    9876:    43 20             	r3 = 0x0
    9878:    04 86             	goto 0xc <bi_wirte_to_byte+0x20 : 9886 >
    987a:    0c 43             	r4 = b[r0+0x3] (u)			  ## bigint.c:140:39
    987c:    d8 ee 11 43       	b[r1+r3] = r4			  ## bigint.c:140:20
    9880:    6c e8 00 08       	[r0+0x0] <<= 0x8			  ## bigint.c:141:18
    9884:    c3 21             	r3 += 0x1			  ## bigint.c:139:42
    9886:    83 f8 f8 09       	if (r3 != 0x4) goto -0x10 <bi_wirte_to_byte+0x14 : 987a >
    988a:    fa 3f             	r2 += -0x1			  ## bigint.c:144:13
    988c:    c1 24             	r1 += 0x4			  ## bigint.c:132:50
    988e:    02 fd f1 03       	ifs (r2 >= 0x1) goto -0x1e <bi_wirte_to_byte+0xE : 9874 >
    9892:    54 04             	{pc, r4} = [sp++]			  ## bigint.c:146:1


bi_read_from_byte:
    9894:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:148:0
    9896:    24 16             	r4 = r2			  ## bigint.c:148:0
    9898:    15 16             	r5 = r1			  ## bigint.c:148:0
    989a:    41 24             	r1 = 0x4			  ## bigint.c:148:0
    989c:    f4 e1 41 11       	r1 = r4 / r1 (s)			  ## bigint.c:149:34
    98a0:    41 81             	call -0xfe <alloc : 97a4 >			  ## bigint.c:149:19
    98a2:    06 16             	r6 = r0			  ## bigint.c:149:19
    98a4:    54 ed 64 00       	r0 = h[r6+0x4] (s)			  ## bigint.c:150:28
    98a8:    61 63             	r1 = [r6+0xc] 			  ## bigint.c:150:20
    98aa:    00 a2             	r0 = r0 << 0x2			  ## bigint.c:150:26
    98ac:    10 18             	r0 += r1			  ## bigint.c:150:26
    98ae:    04 8f             	goto 0x1e <bi_read_from_byte+0x3A : 98ce >			  ## bigint.c:150:26
    98b0:    f8 3c             	r0 += -0x4
    98b2:    41 20             	r1 = 0x0
    98b4:    42 20             	r2 = 0x0
    98b6:    04 86             	goto 0xc <bi_read_from_byte+0x30 : 98c4 >
    98b8:    d8 ee 50 32       	r3 = b[r5+r2] (u)			  ## bigint.c:157:20
    98bc:    a3 e1 60 14       	r3 <= insert(r1, p:0x8, l:0x18)			  ## bigint.c:157:17
    98c0:    c2 21             	r2 += 0x1			  ## bigint.c:155:42
    98c2:    31 16             	r1 = r3
    98c4:    82 f8 f8 09       	if (r2 != 0x4) goto -0x10 <bi_read_from_byte+0x24 : 98b8 >
    98c8:    81 60             	[r0+0x0] = r1			  ## bigint.c:159:14
    98ca:    fc 3c             	r4 += -0x4			  ## bigint.c:160:13
    98cc:    c5 24             	r5 += 0x4			  ## bigint.c:152:9
    98ce:    04 fd ef 03       	ifs (r4 >= 0x1) goto -0x22 <bi_read_from_byte+0x1C : 98b0 >
    98d2:    60 16             	r0 = r6			  ## bigint.c:162:5
    98d4:    bf ea 3b fe       	call -0x38a <trim : 954e >			  ## bigint.c:162:5
    98d8:    60 16             	r0 = r6			  ## bigint.c:163:5
    98da:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:163:5


bi_initialize:
    98dc:    75 04             	[--sp] = {rets, r5, r4}			  ## bigint.c:386:0
    98de:    04 16             	r4 = r0			  ## bigint.c:386:0
    98e0:    45 20             	r5 = 0x0			  ## bigint.c:386:0
    98e2:    00 90             	rep 0x2 0x11 {			  ## bigint.c:388:5
    98e4:    85 05             		[r0++=0x4] = r5
                               	}			  ## bigint.c:388:5
    98e6:    40 d6             	r0 = r4  #			  ## bigint.c:391:21
    98e8:    c1 6f             		 [r4+0x3c] = r1			  ## bigint.c:389:19
    98ea:    41 22             	r1 = 0x2			  ## bigint.c:391:21
    98ec:    bf ea 5a ff       	call -0x14c <alloc : 97a4 >			  ## bigint.c:391:21
    98f0:    c0 62             	[r4+0x8] = r0			  ## bigint.c:391:19
    98f2:    01 63             	r1 = [r0+0xc] 			  ## bigint.c:392:20
    98f4:    95 60             	[r1+0x0] = r5			  ## bigint.c:392:29
    98f6:    41 ea 01 10       	[r1+0x4] = 0x1			  ## bigint.c:393:29
    98fa:    c1 ff aa 55 ff 7f 	r1 = 0x7fff55aa <RAM_LIMIT_H+0x7FE555AA : 7fff55aa >			  ## bigint.c:467:14
    9900:    81 62             	[r0+0x8] = r1			  ## bigint.c:467:14
    9902:    55 04             	{pc, r5, r4} = [sp++]			  ## bigint.c:396:1


bi_terminate:
    9904:    10 04             	[--sp] = rets			  ## bigint.c:406:0
    9906:    01 62             	r1 = [r0+0x8] 			  ## bigint.c:407:25
    9908:    42 ea 01 10       	[r1+0x8] = 0x1			  ## bigint.c:484:14
    990c:    bf ea fc fe       	call -0x208 <bi_free : 9708 >			  ## bigint.c:408:5
    9910:    00 04             	pc = [sp++]			  ## bigint.c:415:1
    9912:    00 00             	nop


quantize_intervals_LF:
    9914:	 24 d9 ff ff dc 26 00 00         $....&..
    991c:	 a4 74 00 00 90 c2 00 00         .t......
    9924:	 be 10 01 00 46 5f 01 00         ....F_..
    992c:	 40 ae 01 00 c6 fd 01 00         @.......
    9934:	 f2 4d 02 00 da 9e 02 00         .M......
    993c:	 9a f0 02 00 48 43 03 00         ....HC..
    9944:	 00 97 03 00 d6 eb 03 00         ........
    994c:	 e6 41 04 00 48 99 04 00         .A..H...
    9954:	 16 f2 04 00 6c 4c 05 00         ....lL..
    995c:	 66 a8 05 00 1e 06 06 00         f.......
    9964:	 b2 65 06 00 42 c7 06 00         .e..B...
    996c:	 ee 2a 07 00 d8 90 07 00         .*......
    9974:	 28 f9 07 00 02 64 08 00         (....d..
    997c:	 90 d1 08 00 00 42 09 00         .....B..
    9984:	 82 b5 09 00 4c 2c 0a 00         ....L,..
    998c:	 96 a6 0a 00 9e 24 0b 00         .....$..
    9994:	 aa a6 0b 00 06 2d 0c 00         .....-..
    999c:	 02 b8 0c 00 fe 47 0d 00         .....G..
    99a4:	 60 dd 0d 00 98 78 0e 00         `....x..
    99ac:	 2c 1a 0f 00 aa c2 0f 00         ,.......
    99b4:	 bc 72 10 00 1e 2b 11 00         .r...+..
    99bc:	 ac ec 11 00 62 b8 12 00         ....b...
    99c4:	 6c 8f 13 00 24 73 14 00         l...$s..
    99cc:	 2c 65 15 00 7a 67 16 00         ,e..zg..
    99d4:	 6e 7c 17 00 fa a6 18 00         n|......
    99dc:	 d2 ea 19 00 aa 4c 1b 00         .....L..
    99e4:	 b0 d2 1c 00 28 85 1e 00         ....(...
    99ec:	 84 6f 20 00 36 a2 22 00         .o .6.".
    99f4:	 0e 36 25 00 e4 52 28 00         .6%..R(.
    99fc:	 06 3e 2c 00 e8 7c 31 00         .>,..|1.
    9a04:	 1e 29 39 00 62 33 45 00         .)9.b3E.
    9a0c:	 62 6d 56 00 d8 5f 6c 00         bmV.._l.
    9a14:	 b6 c3 87 00                     ....


invert_quantize_dither_factors_LF:
    9a18:	 dc 26 00 00 dc 26 00 00         .&...&..
    9a20:	 ea 26 00 00 04 27 00 00         .&...'..
    9a28:	 2a 27 00 00 5e 27 00 00         *'..^'..
    9a30:	 9e 27 00 00 ea 27 00 00         .'...'..
    9a38:	 42 28 00 00 a8 28 00 00         B(...(..
    9a40:	 18 29 00 00 96 29 00 00         .)...)..
    9a48:	 20 2a 00 00 b6 2a 00 00          *...*..
    9a50:	 5a 2b 00 00 0a 2c 00 00         Z+...,..
    9a58:	 c6 2c 00 00 90 2d 00 00         .,...-..
    9a60:	 68 2e 00 00 50 2f 00 00         h...P/..
    9a68:	 46 30 00 00 4a 31 00 00         F0..J1..
    9a70:	 62 32 00 00 8a 33 00 00         b2...3..
    9a78:	 c6 34 00 00 14 36 00 00         .4...6..
    9a80:	 7a 37 00 00 f6 38 00 00         z7...8..
    9a88:	 8c 3a 00 00 3e 3c 00 00         .:..><..
    9a90:	 0c 3e 00 00 fc 3f 00 00         .>...?..
    9a98:	 10 42 00 00 4c 44 00 00         .B..LD..
    9aa0:	 b2 46 00 00 4a 49 00 00         .F..JI..
    9aa8:	 18 4c 00 00 22 4f 00 00         .L.."O..
    9ab0:	 72 52 00 00 0e 56 00 00         rR...V..
    9ab8:	 04 5a 00 00 5e 5e 00 00         .Z..^^..
    9ac0:	 2e 63 00 00 88 68 00 00         .c...h..
    9ac8:	 82 6e 00 00 38 75 00 00         .n..8u..
    9ad0:	 d2 7c 00 00 7c 85 00 00         .|..|...
    9ad8:	 78 8f 00 00 14 9b 00 00         x.......
    9ae0:	 c2 a8 00 00 16 b9 00 00         ........
    9ae8:	 ee cc 00 00 8a e5 00 00         ........
    9af0:	 d2 04 01 00 e0 2d 01 00         .....-..
    9af8:	 fa 65 01 00 dc b6 01 00         .e......
    9b00:	 44 34 02 00 9e 0a 03 00         D4......
    9b08:	 98 a1 04 00 aa 68 07 00         .....h..
    9b10:	 56 d1 09 00 22 21 0c 00         V..."!..
    9b18:	 bc 42 0f 00                     .B..


quantize_dither_factors_LF:
    9b1c:	 00 00 00 00 04 00 00 00         ........
    9b24:	 07 00 00 00 0a 00 00 00         ........
    9b2c:	 0d 00 00 00 10 00 00 00         ........
    9b34:	 13 00 00 00 16 00 00 00         ........
    9b3c:	 1a 00 00 00 1c 00 00 00         ........
    9b44:	 20 00 00 00 23 00 00 00          ...#...
    9b4c:	 26 00 00 00 29 00 00 00         &...)...
    9b54:	 2c 00 00 00 2f 00 00 00         ,.../...
    9b5c:	 33 00 00 00 36 00 00 00         3...6...
    9b64:	 3a 00 00 00 3e 00 00 00         :...>...
    9b6c:	 41 00 00 00 46 00 00 00         A...F...
    9b74:	 4a 00 00 00 4f 00 00 00         J...O...
    9b7c:	 54 00 00 00 5a 00 00 00         T...Z...
    9b84:	 5f 00 00 00 66 00 00 00         _...f...
    9b8c:	 6d 00 00 00 74 00 00 00         m...t...
    9b94:	 7c 00 00 00 85 00 00 00         |.......
    9b9c:	 8f 00 00 00 9a 00 00 00         ........
    9ba4:	 a6 00 00 00 b4 00 00 00         ........
    9bac:	 c3 00 00 00 d4 00 00 00         ........
    9bb4:	 e7 00 00 00 fe 00 00 00         ........
    9bbc:	 17 01 00 00 34 01 00 00         ....4...
    9bc4:	 57 01 00 00 7f 01 00 00         W.......
    9bcc:	 ae 01 00 00 e7 01 00 00         ........
    9bd4:	 2b 02 00 00 7f 02 00 00         +.......
    9bdc:	 e7 02 00 00 6c 03 00 00         ....l...
    9be4:	 15 04 00 00 f6 04 00 00         ........
    9bec:	 27 06 00 00 d2 07 00 00         '.......
    9bf4:	 44 0a 00 00 07 0e 00 00         D.......
    9bfc:	 39 14 00 00 5a 1f 00 00         9...Z...
    9c04:	 97 35 00 00 bf 65 00 00         .5...e..
    9c0c:	 c5 b1 00 00 2b 9a 00 00         ....+...
    9c14:	 f3 93 00 00 67 c8 00 00         ....g...
    9c1c:	 00 00 00 00                     ....


quantize_factor_select_offset_LF:
    9c20:	 00 00 eb ff ed ff ef ff         ........
    9c28:	 f1 ff f4 ff f6 ff f8 ff         ........
    9c30:	 fa ff fc ff ff ff 01 00         ........
    9c38:	 03 00 06 00 08 00 0a 00         ........
    9c40:	 0d 00 0f 00 12 00 14 00         ........
    9c48:	 17 00 1a 00 1d 00 1f 00         ........
    9c50:	 22 00 25 00 28 00 2b 00         ".%.(.+.
    9c58:	 2f 00 32 00 35 00 39 00         /.2.5.9.
    9c60:	 3c 00 40 00 44 00 48 00         <.@.D.H.
    9c68:	 4c 00 50 00 55 00 59 00         L.P.U.Y.
    9c70:	 5e 00 63 00 69 00 6e 00         ^.c.i.n.
    9c78:	 74 00 7b 00 81 00 88 00         t.{.....
    9c80:	 90 00 98 00 a1 00 ab 00         ........
    9c88:	 b6 00 c2 00 cf 00 df 00         ........
    9c90:	 f1 00 07 01 23 01 48 01         ....#.H.
    9c98:	 7e 01 d3 01 0a 02 0a 02         ~.......
    9ca0:	 0a 02 00 00                     ....


hd_quantize_intervals_LF:
    9ca4:	 7c f6 ff ff 84 09 00 00         |.......
    9cac:	 8c 1c 00 00 94 2f 00 00         ...../..
    9cb4:	 9e 42 00 00 aa 55 00 00         .B...U..
    9cbc:	 b6 68 00 00 c6 7b 00 00         .h...{..
    9cc4:	 d6 8e 00 00 ea a1 00 00         ........
    9ccc:	 02 b5 00 00 1e c8 00 00         ........
    9cd4:	 3c db 00 00 60 ee 00 00         <...`...
    9cdc:	 88 01 01 00 b4 14 01 00         ........
    9ce4:	 e6 27 01 00 1e 3b 01 00         .'...;..
    9cec:	 5e 4e 01 00 a2 61 01 00         ^N...a..
    9cf4:	 ee 74 01 00 42 88 01 00         .t..B...
    9cfc:	 9c 9b 01 00 00 af 01 00         ........
    9d04:	 6c c2 01 00 e0 d5 01 00         l.......
    9d0c:	 5e e9 01 00 e4 fc 01 00         ^.......
    9d14:	 76 10 02 00 10 24 02 00         v....$..
    9d1c:	 b6 37 02 00 66 4b 02 00         .7..fK..
    9d24:	 22 5f 02 00 ea 72 02 00         "_...r..
    9d2c:	 be 86 02 00 9e 9a 02 00         ........
    9d34:	 8c ae 02 00 86 c2 02 00         ........
    9d3c:	 8e d6 02 00 a2 ea 02 00         ........
    9d44:	 c6 fe 02 00 fa 12 03 00         ........
    9d4c:	 3a 27 03 00 8a 3b 03 00         :'...;..
    9d54:	 ec 4f 03 00 5c 64 03 00         .O..\d..
    9d5c:	 dc 78 03 00 6e 8d 03 00         .x..n...
    9d64:	 10 a2 03 00 c4 b6 03 00         ........
    9d6c:	 8a cb 03 00 62 e0 03 00         ....b...
    9d74:	 4e f5 03 00 4a 0a 04 00         N...J...
    9d7c:	 5c 1f 04 00 80 34 04 00         \....4..
    9d84:	 ba 49 04 00 06 5f 04 00         .I..._..
    9d8c:	 68 74 04 00 e0 89 04 00         ht......
    9d94:	 6c 9f 04 00 10 b5 04 00         l.......
    9d9c:	 c8 ca 04 00 98 e0 04 00         ........
    9da4:	 80 f6 04 00 7e 0c 05 00         ....~...
    9dac:	 94 22 05 00 c4 38 05 00         ."...8..
    9db4:	 0c 4f 05 00 6c 65 05 00         .O..le..
    9dbc:	 e6 7b 05 00 7a 92 05 00         .{..z...
    9dc4:	 2a a9 05 00 f4 bf 05 00         *.......
    9dcc:	 d8 d6 05 00 d8 ed 05 00         ........
    9dd4:	 f6 04 06 00 2e 1c 06 00         ........
    9ddc:	 84 33 06 00 f8 4a 06 00         .3...J..
    9de4:	 8a 62 06 00 3a 7a 06 00         .b..:z..
    9dec:	 08 92 06 00 f6 a9 06 00         ........
    9df4:	 04 c2 06 00 32 da 06 00         ....2...
    9dfc:	 82 f2 06 00 f2 0a 07 00         ........
    9e04:	 84 23 07 00 38 3c 07 00         .#..8<..
    9e0c:	 10 55 07 00 0a 6e 07 00         .U...n..
    9e14:	 2a 87 07 00 6c a0 07 00         *...l...
    9e1c:	 d4 b9 07 00 62 d3 07 00         ....b...
    9e24:	 16 ed 07 00 f0 06 08 00         ........
    9e2c:	 f2 20 08 00 1c 3b 08 00         . ...;..
    9e34:	 70 55 08 00 ec 6f 08 00         pU...o..
    9e3c:	 90 8a 08 00 60 a5 08 00         ....`...
    9e44:	 5c c0 08 00 82 db 08 00         \.......
    9e4c:	 d6 f6 08 00 58 12 09 00         ....X...
    9e54:	 06 2e 09 00 e4 49 09 00         .....I..
    9e5c:	 f0 65 09 00 2c 82 09 00         .e..,...
    9e64:	 9a 9e 09 00 3a bb 09 00         ....:...
    9e6c:	 0c d8 09 00 10 f5 09 00         ........
    9e74:	 4a 12 0a 00 b8 2f 0a 00         J..../..
    9e7c:	 5c 4d 0a 00 38 6b 0a 00         \M..8k..
    9e84:	 4a 89 0a 00 96 a7 0a 00         J.......
    9e8c:	 1a c6 0a 00 da e4 0a 00         ........
    9e94:	 d4 03 0b 00 0c 23 0b 00         .....#..
    9e9c:	 80 42 0b 00 34 62 0b 00         .B..4b..
    9ea4:	 28 82 0b 00 5c a2 0b 00         (...\...
    9eac:	 d2 c2 0b 00 8c e3 0b 00         ........
    9eb4:	 8a 04 0c 00 cc 25 0c 00         .....%..
    9ebc:	 56 47 0c 00 2a 69 0c 00         VG..*i..
    9ec4:	 46 8b 0c 00 ac ad 0c 00         F.......
    9ecc:	 5e d0 0c 00 60 f3 0c 00         ^...`...
    9ed4:	 b0 16 0d 00 50 3a 0d 00         ....P:..
    9edc:	 44 5e 0d 00 8a 82 0d 00         D^......
    9ee4:	 26 a7 0d 00 1a cc 0d 00         &.......
    9eec:	 66 f1 0d 00 0e 17 0e 00         f.......
    9ef4:	 12 3d 0e 00 74 63 0e 00         .=..tc..
    9efc:	 36 8a 0e 00 5c b1 0e 00         6...\...
    9f04:	 e6 d8 0e 00 d6 00 0f 00         ........
    9f0c:	 2e 29 0f 00 f4 51 0f 00         .)...Q..
    9f14:	 26 7b 0f 00 c8 a4 0f 00         &{......
    9f1c:	 dc ce 0f 00 66 f9 0f 00         ....f...
    9f24:	 66 24 10 00 e2 4f 10 00         f$...O..
    9f2c:	 dc 7b 10 00 56 a8 10 00         .{..V...
    9f34:	 52 d5 10 00 d6 02 11 00         R.......
    9f3c:	 e4 30 11 00 7e 5f 11 00         .0..~_..
    9f44:	 aa 8e 11 00 6a be 11 00         ....j...
    9f4c:	 c4 ee 11 00 b8 1f 12 00         ........
    9f54:	 4e 51 12 00 88 83 12 00         NQ......
    9f5c:	 6a b6 12 00 fc e9 12 00         j.......
    9f64:	 40 1e 13 00 3a 53 13 00         @...:S..
    9f6c:	 f2 88 13 00 6c bf 13 00         ....l...
    9f74:	 ae f6 13 00 c0 2e 14 00         ........
    9f7c:	 a4 67 14 00 62 a1 14 00         .g..b...
    9f84:	 04 dc 14 00 8c 17 15 00         ........
    9f8c:	 06 54 15 00 76 91 15 00         .T..v...
    9f94:	 e6 cf 15 00 60 0f 16 00         ....`...
    9f9c:	 ec 4f 16 00 92 91 16 00         .O......
    9fa4:	 5e d4 16 00 5a 18 17 00         ^...Z...
    9fac:	 90 5d 17 00 0e a4 17 00         .]......
    9fb4:	 de eb 17 00 0e 35 18 00         .....5..
    9fbc:	 ae 7f 18 00 ca cb 18 00         ........
    9fc4:	 72 19 19 00 b8 68 19 00         r....h..
    9fcc:	 ac b9 19 00 64 0c 1a 00         ....d...
    9fd4:	 f2 60 1a 00 6a b7 1a 00         .`..j...
    9fdc:	 e6 0f 1b 00 7c 6a 1b 00         ....|j..
    9fe4:	 48 c7 1b 00 68 26 1c 00         H...h&..
    9fec:	 f8 87 1c 00 1c ec 1c 00         ........
    9ff4:	 f4 52 1d 00 aa bc 1d 00         .R......
    9ffc:	 68 29 1e 00 5a 99 1e 00         h)..Z...
    a004:	 b4 0c 1f 00 aa 83 1f 00         ........
    a00c:	 7e fe 1f 00 6c 7d 20 00         ~...l} .
    a014:	 c0 00 21 00 cc 88 21 00         ..!...!.
    a01c:	 e8 15 22 00 78 a8 22 00         ..".x.".
    a024:	 f0 40 23 00 ca df 23 00         .@#...#.
    a02c:	 9a 85 24 00 fe 32 25 00         ..$..2%.
    a034:	 b4 e8 25 00 8e a7 26 00         ..%...&.
    a03c:	 86 70 27 00 bc 44 28 00         .p'..D(.
    a044:	 82 25 29 00 6a 14 2a 00         .%).j.*.
    a04c:	 56 13 2b 00 8c 24 2c 00         V.+..$,.
    a054:	 d6 4a 2d 00 a8 89 2e 00         .J-.....
    a05c:	 60 e5 2f 00 98 63 31 00         `./..c1.
    a064:	 a0 0b 33 00 3c e7 34 00         ..3.<.4.
    a06c:	 ba 03 37 00 a2 73 39 00         ..7..s9.
    a074:	 08 51 3c 00 2a c0 3f 00         .Q<.*.?.
    a07c:	 52 ef 43 00 be 0b 49 00         R.C...I.
    a084:	 da 26 4f 00 18 2b 56 00         .&O..+V.
    a08c:	 10 fb 5d 00 06 8c 66 00         ..]...f.
    a094:	 28 e4 6f 00 20 12 7a 00         (.o. .z.
    a09c:	 88 28 85 00 48 3c 91 00         .(..H<..
    a0a4:	 54 64 9e 00                     Td..


exception_irq_handler:
    a0a8:    58 e9 2f 38       	[--sp] = {ssp, usp, icfg, psr, rets, retx, rete, reti}			  ## startup.S:105:0
    a0ac:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## startup.S:106:0
    a0b0:    64 e0 00 0e       	r0 = sp			  ## startup.S:107:0
    a0b4:    80 ff d8 01 00 00 	call 0x1d8 <exception_analyze : a292 >			  ## startup.S:108:0
    a0ba:    f7 9f             	goto -0x2 <exception_irq_handler+0x12 : a0ba >			  ## startup.S:110:0


the_debug_isr:
    a0bc:    d8 e8 01 00       	[--sp] = {r0}			  ## debug_stub.S:21:0
    a0c0:    64 e0 00 06       	r0 = cnum			  ## debug_stub.S:22:0
    a0c4:    20 e8 00 60       	if (r0 == 0x0) {			  ## debug_stub.S:23:0
    a0c8:    64 e0 00 0e       		r0 = sp			  ## debug_stub.S:24:0
    a0cc:    ee ff ec fc 19 00 		sp = 0x19fcec
                               	} else {			  ## debug_stub.S:25:0
    a0d2:    64 e0 00 0e       		r0 = sp			  ## debug_stub.S:26:0
    a0d6:    ee ff 68 fd 19 00 		sp = 0x19fd68
                               	}			  ## debug_stub.S:28:0
    a0dc:    58 e9 ff 7f       	[--sp] = {sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti}			  ## debug_stub.S:29:0
    a0e0:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## debug_stub.S:32:0
    a0e4:    01 60             	r1 = [r0+0x0] 			  ## debug_stub.S:52:0
    a0e6:    81 20             	[sp] = r1			  ## debug_stub.S:53:0
    a0e8:    08 84             	r0 = r0 + 0x4			  ## debug_stub.S:55:0
    a0ea:    80 3e             	[sp+120] = r0			  ## debug_stub.S:56:0
    a0ec:    64 e0 00 0e       	r0 = sp			  ## debug_stub.S:57:0
    a0f0:    64 e0 00 56       	r5 = cnum			  ## debug_stub.S:58:0
    a0f4:    e5 e1 00 5e       	r5 = r5 * 0x800			  ## debug_stub.S:59:0
    a0f8:    c1 ff 80 e0 ff 00 	r1 = 0xffe080 <RAM_LIMIT_H+0xE5E080 : ffe080 >			  ## debug_stub.S:60:0
    a0fe:    19 1d             	r1 = r1 + r5			  ## debug_stub.S:61:0
    a100:    90 61             	[r1+0x4] = r0			  ## debug_stub.S:62:0
    a102:    12 60             	r2 = [r1+0x0] 			  ## debug_stub.S:64:0
    a104:    ba 3f             	r2 &= 0x7fffffff			  ## debug_stub.S:65:0
    a106:    92 60             	[r1+0x0] = r2			  ## debug_stub.S:66:0
    a108:    4a 20             	r2 = 0x20			  ## debug_stub.S:69:0
    a10a:    00 00             	nop			  ## debug_stub.S:71:0
    a10c:    02 ea fd ff       	if (--r2 != 0) goto -0x6 <the_debug_isr+0x4E : a10a >			  ## debug_stub.S:72:0
    a110:    10 60             	r0 = [r1+0x0] 			  ## debug_stub.S:73:0
    a112:    50 e8 f9 f9       	if ((r0 & 0x80000000) == 0) goto -0xe <the_debug_isr+0x4C : a108 >			  ## debug_stub.S:75:0
    a116:    d4 e8 ff ff       	{r15-r0} = [sp++]			  ## debug_stub.S:78:0
    a11a:    50 e9 ff 7f       	{sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti} = [sp++]			  ## debug_stub.S:79:0
    a11e:    83 00             	rte			  ## debug_stub.S:81:0


_startup:
    a120:    80 14             	r1_r0 = 0			  ## startup.S:40:0
    a122:    82 14             	r3_r2 = 0			  ## startup.S:41:0
    a124:    84 14             	r5_r4 = 0			  ## startup.S:42:0
    a126:    86 14             	r7_r6 = 0			  ## startup.S:43:0
    a128:    88 14             	r9_r8 = 0			  ## startup.S:44:0
    a12a:    8a 14             	r11_r10 = 0			  ## startup.S:45:0
    a12c:    8c 14             	r13_r12 = 0			  ## startup.S:46:0
    a12e:    8e 14             	r15_r14 = 0			  ## startup.S:47:0
    a130:    64 e0 80 05       	psr = r0			  ## startup.S:49:0
    a134:    64 e0 80 01       	rete = r0			  ## startup.S:50:0
    a138:    64 e0 80 02       	retx = r0			  ## startup.S:51:0
    a13c:    64 e0 80 03       	rets = r0			  ## startup.S:52:0
    a140:    64 e0 80 00       	reti = r0			  ## startup.S:53:0
    a144:    64 e0 00 06       	r0 = cnum			  ## startup.S:55:0
    a148:    00 49             	if (r0 == 0) goto 0x12 <_cpu0_entry : a15c >			  ## startup.S:56:0
    a14a:    ed ff 94 fd 19 00 	ssp = 0x19fd94			  ## startup.S:58:0
    a150:    41 14             	sp = ssp			  ## startup.S:59:0
    a152:    ec ff a4 fd 19 00 	usp = 0x19fda4			  ## startup.S:60:0
    a158:    c0 ea 4a 12       	goto 0x2494 <run_cpu1 : c5f0 >			  ## startup.S:62:0


_cpu0_entry:
    a15c:    ed ff 20 0c 18 00 	ssp = 0x180c20			  ## startup.S:66:0
    a162:    41 14             	sp = ssp			  ## startup.S:67:0
    a164:    ec ff 20 10 18 00 	usp = 0x181020			  ## startup.S:68:0
    a16a:    80 ff 96 24 00 00 	call 0x2496 <switch_to_hrc_asm : c606 >			  ## startup.S:70:0
    a170:    e0 ff 78 a1 00 00 	reti = 0xa178			  ## startup.S:72:0
    a176:    81 00             	rti			  ## startup.S:73:0


_user_mode:
    a178:    80 ff 8c d4 00 00 	call 0xd48c <p11_boot : 1760a >			  ## startup.S:76:0
    a17e:    80 ff 9c 00 00 00 	call 0x9c <boot_poweroff : a220 >			  ## startup.S:77:0
    a184:    40 20             	r0 = 0x0			  ## startup.S:78:0
    a186:    c1 ff 20 08 18 00 	r1 = 0x180820 <stack_bss_begin : 180820 >			  ## startup.S:79:0
    a18c:    c2 ff 00 08 00 00 	r2 = 0x800 <stack_bss_size : 800 >			  ## startup.S:80:0
    a192:    a2 a2             	r2 = r2 >> 0x2			  ## startup.S:81:0
    a194:    02 03             	rep 0x2 r2 {			  ## startup.S:83:0
    a196:    90 05             		[r1++=0x4] = r0
                               	}			  ## startup.S:84:0
    a198:    02 fc fc 01       	if (r2 > 0x0) goto -0x8 <_user_mode+0x1C : a194 >			  ## startup.S:85:0
    a19c:    40 20             	r0 = 0x0			  ## startup.S:88:0
    a19e:    c1 ff c0 13 18 00 	r1 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## startup.S:89:0
    a1a4:    c2 ff 0c 01 00 00 	r2 = 0x10c <var_bss_size : 10c >			  ## startup.S:90:0
    a1aa:    a2 a2             	r2 = r2 >> 0x2			  ## startup.S:91:0
    a1ac:    02 03             	rep 0x2 r2 {			  ## startup.S:93:0
    a1ae:    90 05             		[r1++=0x4] = r0
                               	}			  ## startup.S:94:0
    a1b0:    02 fc fc 01       	if (r2 > 0x0) goto -0x8 <_user_mode+0x34 : a1ac >			  ## startup.S:95:0
    a1b4:    80 ff c6 02 00 00 	call 0x2c6 <p33_softflag_boot : a480 >			  ## startup.S:98:0
    a1ba:    c0 ea d5 10       	goto 0x21aa <main : c368 >			  ## startup.S:99:0


write_32:
    a1be:    42 20             	r2 = 0x0			  ## boot_poweroff.c:39:0
    a1c0:    04 84             	goto 0x8 <write_32+0xC : a1ca >			  ## boot_poweroff.c:39:0
    a1c2:    d8 ee 01 12       	b[r0+r2] = r1			  ## boot_poweroff.c:41:14
    a1c6:    c2 21             	r2 += 0x1			  ## boot_poweroff.c:40:29
    a1c8:    91 a8             	r1 = r1 >> 0x8			  ## boot_poweroff.c:42:11
    a1ca:    82 f8 fa 09       	if (r2 != 0x4) goto -0xc <write_32+0x4 : a1c2 >			  ## boot_poweroff.c:40:5
    a1ce:    80 00             	rts			  ## boot_poweroff.c:44:1


lp_signature_set:
    a1d0:    76 04             	[--sp] = {rets, r6-r4}			  ## boot_poweroff.c:57:0
    a1d2:    25 16             	r5 = r2			  ## boot_poweroff.c:57:0
    a1d4:    16 16             	r6 = r1			  ## boot_poweroff.c:57:0
    a1d6:    04 16             	r4 = r0			  ## boot_poweroff.c:57:0
    a1d8:    c0 ff fc 7f f2 00 	r0 = 0xf27ffc <RAM_LIMIT_H+0xD87FFC : f27ffc >			  ## boot_poweroff.c:65:5
    a1de:    41 16             	r1 = r4			  ## boot_poweroff.c:65:5
    a1e0:    71 8e             	call -0x24 <write_32 : a1be >			  ## boot_poweroff.c:65:5
    a1e2:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:66:5
    a1e4:    61 16             	r1 = r6			  ## boot_poweroff.c:66:5
    a1e6:    71 8b             	call -0x2a <write_32 : a1be >			  ## boot_poweroff.c:66:5
    a1e8:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:67:5
    a1ea:    51 16             	r1 = r5			  ## boot_poweroff.c:67:5
    a1ec:    71 88             	call -0x30 <write_32 : a1be >			  ## boot_poweroff.c:67:5
    a1ee:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:68:5
    a1f0:    31 16             	r1 = r3			  ## boot_poweroff.c:68:5
    a1f2:    71 85             	call -0x36 <write_32 : a1be >			  ## boot_poweroff.c:68:5
    a1f4:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:69:5
    a1f6:    c1 ff ef 27 12 ab 	r1 = 0xab1227ef <RAM_LIMIT_H+0xAAF827EE : ab1227ee >			  ## boot_poweroff.c:69:5
    a1fc:    71 80             	call -0x40 <write_32 : a1be >			  ## boot_poweroff.c:69:5
    a1fe:    68 2f             	r0 = 0xaf			  ## boot_poweroff.c:71:5
    a200:    c8 47             	b[r4+0x7] = r0			  ## boot_poweroff.c:71:5
    a202:    68 36             	r0 = 0xb6			  ## boot_poweroff.c:71:5
    a204:    c8 46             	b[r4+0x6] = r0			  ## boot_poweroff.c:71:5
    a206:    78 34             	r0 = 0xf4			  ## boot_poweroff.c:71:5
    a208:    c8 45             	b[r4+0x5] = r0			  ## boot_poweroff.c:71:5
    a20a:    70 26             	r0 = 0xc6			  ## boot_poweroff.c:71:5
    a20c:    c8 44             	b[r4+0x4] = r0			  ## boot_poweroff.c:71:5
    a20e:    70 39             	r0 = 0xd9			  ## boot_poweroff.c:71:5
    a210:    c8 43             	b[r4+0x3] = r0			  ## boot_poweroff.c:71:5
    a212:    70 2b             	r0 = 0xcb			  ## boot_poweroff.c:71:5
    a214:    c8 42             	b[r4+0x2] = r0			  ## boot_poweroff.c:71:5
    a216:    78 2c             	r0 = 0xec			  ## boot_poweroff.c:71:5
    a218:    c8 41             	b[r4+0x1] = r0			  ## boot_poweroff.c:71:5
    a21a:    68 3f             	r0 = 0xbf			  ## boot_poweroff.c:71:5
    a21c:    c8 40             	b[r4+0x0] = r0			  ## boot_poweroff.c:71:5
    a21e:    56 04             	{pc, r6-r4} = [sp++]			  ## boot_poweroff.c:72:1


boot_poweroff:
    a220:    74 04             	[--sp] = {rets, r4}			  ## boot_poweroff.c:74:0
    a222:    c4 ff c0 c0 f2 00 	r4 = 0xf2c0c0 <RAM_LIMIT_H+0xD8C0C0 : f2c0c0 >			  ## boot_poweroff.c:74:0
    a228:    40 60             	r0 = [r4+0x0] 			  ## boot_poweroff.c:75:14
    a22a:    50 e8 fd 29       	if ((r0 & 0x20) == 0) goto -0x6 <boot_poweroff+0x8 : a228 >			  ## boot_poweroff.c:75:5
    a22e:    20 e1 40 43       	r0 = r4 + -0x1cc0			  ## boot_poweroff.c:77:9
    a232:    00 60             	r0 = [r0+0x0] 			  ## boot_poweroff.c:77:9
    a234:    08 17             	r0 = r0.b0 (s)			  ## boot_poweroff.c:77:21
    a236:    80 fd 2b 00       	ifs (r0 < 0x0) goto 0x56 <boot_poweroff+0x70 : a290 >			  ## boot_poweroff.c:77:21
    a23a:    c0 ff ec 7f f2 00 	r0 = 0xf27fec <RAM_LIMIT_H+0xD87FEC : f27fec >			  ## boot_poweroff.c:81:9
    a240:    80 ff 3c d4 00 00 	call 0xd43c <read_32 : 17682 >			  ## boot_poweroff.c:81:9
    a246:    c1 ff ef 27 12 ab 	r1 = 0xab1227ef <RAM_LIMIT_H+0xAAF827EE : ab1227ee >			  ## boot_poweroff.c:81:33
    a24c:    81 e8 20 00       	if (r0 != r1) goto 0x40 <boot_poweroff+0x70 : a290 >			  ## boot_poweroff.c:81:33
    a250:    60 e0 7d 08       	r0 = 0xFD0000			  ## boot_poweroff.c:85:17
    a254:    00 60             	r0 = [r0+0x0] 			  ## boot_poweroff.c:85:17
    a256:    80 f8 1b 80       	if (r0 != 0x40) goto 0x36 <boot_poweroff+0x70 : a290 >			  ## boot_poweroff.c:85:17
    a25a:    40 68             	r0 = [r4+0x20] 			  ## boot_poweroff.c:89:11
    a25c:    50 e8 18 08       	if ((r0 & 0x2) == 0) goto 0x30 <boot_poweroff+0x70 : a290 >			  ## boot_poweroff.c:89:11
    a260:    c0 ff fc 7f f2 00 	r0 = 0xf27ffc <RAM_LIMIT_H+0xD87FFC : f27ffc >			  ## boot_poweroff.c:93:32
    a266:    80 ff 16 d4 00 00 	call 0xd416 <read_32 : 17682 >			  ## boot_poweroff.c:93:32
    a26c:    04 16             	r4 = r0			  ## boot_poweroff.c:93:32
    a26e:    c1 ff 78 84 01 00 	r1 = 0x18478 <nvram_boot_tag : 18478 >			  ## boot_poweroff.c:95:9
    a274:    42 28             	r2 = 0x8			  ## boot_poweroff.c:95:9
    a276:    80 ff 88 9e ff ff 	call -0x6178 <memcmp : 4104 >			  ## boot_poweroff.c:95:9
    a27c:    80 49             	if (r0 != 0) goto 0x12 <boot_poweroff+0x70 : a290 >			  ## boot_poweroff.c:95:9
    a27e:    50 35             	r0 = 0x55			  ## boot_poweroff.c:99:23
    a280:    c8 40             	b[r4+0x0] = r0			  ## boot_poweroff.c:99:23
    a282:    c0 ff f8 7f f2 00 	r0 = 0xf27ff8 <RAM_LIMIT_H+0xD87FF8 : f27ff8 >			  ## boot_poweroff.c:100:21
    a288:    80 ff f4 d3 00 00 	call 0xd3f4 <read_32 : 17682 >			  ## boot_poweroff.c:100:21
    a28e:    c0 00             	call r0			  ## boot_poweroff.c:101:5
    a290:    54 04             	{pc, r4} = [sp++]			  ## boot_poweroff.c:102:1


exception_analyze:
    a292:    c1 ff 80 fd 19 00 	r1 = 0x19fd80 <exception_irq_hook : 19fd80 >			  ## boot_init.c:42:0
    a298:    11 60             	r1 = [r1+0x0] 			  ## boot_init.c:43:9
    a29a:    b1 e8 00 00       	if (r1 != 0x0) {			  ## boot_init.c:43:9
    a29e:    c1 00             		call r1
                               	}			  ## boot_init.c:44:9
    a2a0:    80 ff 60 a2 ff ff 	call -0x5da0 <chip_reset : 4506 >			  ## boot_init.c:48:5


HWI_Install:
    a2a6:    77 04             	[--sp] = {rets, r7-r4}			  ## irq.c:60:0
    a2a8:    24 16             	r4 = r2			  ## irq.c:60:0
    a2aa:    c2 ff 00 fe 19 00 	r2 = 0x19fe00 <_IRQ_MEM_ADDR : 19fe00 >			  ## irq.c:64:5
    a2b0:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## irq.c:64:20
    a2b4:    01 a2             	r1 = r0 << 0x2			  ## irq.c:62:41
    a2b6:    65 e1 1c 10       	r5 = r1 & 0x1C			  ## irq.c:62:41
    a2ba:    41 2f             	r1 = 0xf			  ## irq.c:62:41
    a2bc:    c8 e1 10 65       	r6 = r1 << r5			  ## irq.c:69:35
    a2c0:    80 a1             	r0 = r0 >> 0x1			  ## irq.c:73:27
    a2c2:    67 e1 7c 00       	r7 = r0 & 0x7C			  ## irq.c:61:36
    a2c6:    80 ff 5e a2 ff ff 	call -0x5da2 <local_irq_disable : 452a >			  ## irq.c:67:5
    a2cc:    64 e0 00 06       	r0 = cnum			  ## hwi.h:185:5
    a2d0:    a7 e1 d4 05       	r7 <= insert(r0, p:0xb, l:0x15)			  ## irq.c:72:41
    a2d4:    c0 ff 40 f8 3f 00 	r0 = 0x3ff840 <RAM_LIMIT_H+0x25F840 : 3ff840 >			  ## irq.c:73:27
    a2da:    d8 ec 7a 10       	r1 = [r7+r0<<2]			  ## irq.c:73:27
    a2de:    90 e1 13 16       	r1 = r1 & ~r6			  ## irq.c:73:46
    a2e2:    42 a1             	r2 = r4 << 0x1			  ## irq.c:68:49
    a2e4:    62 e1 0e 20       	r2 = r2 & 0xE			  ## irq.c:68:49
    a2e8:    32 20             	r2 |= 0x1			  ## irq.c:68:55
    a2ea:    52 1a             	r2 <<= r5			  ## irq.c:70:39
    a2ec:    21 19             	r1 |= r2			  ## irq.c:73:58
    a2ee:    d8 ec 7b 10       	[r7+r0<<2] = r1			  ## irq.c:73:24
    a2f2:    80 ff 62 a2 ff ff 	call -0x5d9e <local_irq_enable : 455a >			  ## irq.c:75:5
    a2f8:    57 04             	{pc, r7-r4} = [sp++]			  ## irq.c:76:1


udelay:
    a2fa:    c1 ff 00 04 fd 00 	r1 = 0xfd0400 <RAM_LIMIT_H+0xE30400 : fd0400 >			  ## timer.c:10:0
    a300:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## timer.c:17:20
    a304:    41 ea 00 10       	[r1+0x4] = 0x0			  ## timer.c:18:20
    a308:    e0 e1 05 00       	r0 = r0 * 0x5			  ## timer.c:19:44
    a30c:    40 f0 11 10       	r0 = 0x1011  # <WOLASynthesisFilter_Float_M128_m4_r1+0xC : 1010 >			  ## timer.c:20:20
    a310:    90 62             		 [r1+0x8] = r0			  ## timer.c:19:20
    a312:    90 60             	[r1+0x0] = r0			  ## timer.c:20:20
    a314:    10 60             	r0 = [r1+0x0] 			  ## timer.c:21:24
    a316:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <udelay+0x1A : a314 >			  ## timer.c:21:5
    a31a:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## timer.c:22:20
    a31e:    80 00             	rts			  ## timer.c:24:1


io_cfg:
    a320:    02 fc 41 14       	if (r2 > 0xa) goto 0x82 <.GJTIE12_0_0_+0x74 : a3a6 >			  ## boot_init.c:89:0
    a324:    02 01             	tbb [r2]			  ## boot_init.c:89:0


.GJTIS12_0_0_:
    a326:    06     < 6 : 0x6 >
    a327:    0d     < 13 : 0xD >
    a328:    14     < 20 : 0x14 >
    a329:    1b     < 27 : 0x1B >
    a32a:    1e     < 30 : 0x1E >
    a32b:    21     < 33 : 0x21 >
    a32c:    24     < 36 : 0x24 >
    a32d:    27     < 39 : 0x27 >
    a32e:    2c     < 44 : 0x2C >
    a32f:    33     < 51 : 0x33 >
    a330:    38     < 56 : 0x38 >
    a331:    00     < 0 : 0x0 >
    a332:    66 e8 08 01       	[r0+0x8] |= 1 << r1			  ## boot_init.c:92:19
    a336:    66 e8 13 01       	[r0+0x10] &= ~(1 << r1)			  ## boot_init.c:93:19
    a33a:    66 e8 17 01       	[r0+0x14] &= ~(1 << r1)			  ## boot_init.c:94:19
    a33e:    80 00             	rts			  ## boot_init.c:155:1
    a340:    66 e8 10 01       	[r0+0x10] |= 1 << r1			  ## boot_init.c:97:19
    a344:    66 e8 17 01       	[r0+0x14] &= ~(1 << r1)			  ## boot_init.c:98:19
    a348:    66 e8 08 01       	[r0+0x8] |= 1 << r1			  ## boot_init.c:99:19
    a34c:    80 00             	rts			  ## boot_init.c:155:1
    a34e:    66 e8 14 01       	[r0+0x14] |= 1 << r1			  ## boot_init.c:102:19
    a352:    66 e8 13 01       	[r0+0x10] &= ~(1 << r1)			  ## boot_init.c:103:19
    a356:    66 e8 08 01       	[r0+0x8] |= 1 << r1			  ## boot_init.c:104:19
    a35a:    80 00             	rts			  ## boot_init.c:155:1
    a35c:    66 e8 03 01       	[r0+0x0] &= ~(1 << r1)			  ## boot_init.c:107:19
    a360:    04 8b             	goto 0x16 <.GJTIE12_0_0_+0x46 : a378 >			  ## boot_init.c:107:19
    a362:    66 e8 03 01       	[r0+0x0] &= ~(1 << r1)			  ## boot_init.c:113:19
    a366:    04 8d             	goto 0x1a <.GJTIE12_0_0_+0x50 : a382 >			  ## boot_init.c:113:19
    a368:    66 e8 03 01       	[r0+0x0] &= ~(1 << r1)			  ## boot_init.c:119:19
    a36c:    04 91             	goto 0x22 <.GJTIE12_0_0_+0x5E : a390 >			  ## boot_init.c:119:19
    a36e:    66 e8 03 01       	[r0+0x0] &= ~(1 << r1)			  ## boot_init.c:125:19
    a372:    04 93             	goto 0x26 <.GJTIE12_0_0_+0x68 : a39a >			  ## boot_init.c:125:19
    a374:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## boot_init.c:131:19
    a378:    66 e8 1b 01       	[r0+0x18] &= ~(1 << r1)
    a37c:    04 84             	goto 0x8 <.GJTIE12_0_0_+0x54 : a386 >
    a37e:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## boot_init.c:137:19
    a382:    66 e8 18 01       	[r0+0x18] |= 1 << r1
    a386:    66 e8 1f 01       	[r0+0x1c] &= ~(1 << r1)
    a38a:    04 8b             	goto 0x16 <.GJTIE12_0_0_+0x70 : a3a2 >
    a38c:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## boot_init.c:143:19
    a390:    66 e8 1b 01       	[r0+0x18] &= ~(1 << r1)
    a394:    04 84             	goto 0x8 <.GJTIE12_0_0_+0x6C : a39e >
    a396:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## boot_init.c:149:19
    a39a:    66 e8 18 01       	[r0+0x18] |= 1 << r1
    a39e:    66 e8 1c 01       	[r0+0x1c] |= 1 << r1
    a3a2:    66 e8 0b 01       	[r0+0x8] &= ~(1 << r1)
    a3a6:    80 00             	rts			  ## boot_init.c:155:1


osc_clk_init:
    a3a8:    c0 ff 20 19 fd 00 	r0 = 0xfd1920 <RAM_LIMIT_H+0xE31920 : fd1920 >			  ## clock.c:152:0
    a3ae:    c8 ef f8 0a       	[r0+0x20] &= 0xFFF83FFF			  ## clock.c:75:23
    a3b2:    08 ef 80 0a       	[r0+0x20] |= 0x40000			  ## clock.c:76:23
    a3b6:    41 e0 8a 1f       	r1 = 0x1f8a <WOLAAnalysisFilter_Float_M256_m4_r1+0x786 : 1f8a >			  ## clock.c:77:24
    a3ba:    81 62             	[r0+0x8] = r1			  ## clock.c:77:24
    a3bc:    c1 ff f3 f2 0f 00 	r1 = 0xff2f3 <$data.__3+0xB0B2 : ff2f2 >			  ## clock.c:78:24
    a3c2:    81 61             	[r0+0x4] = r1			  ## clock.c:78:24
    a3c4:    c1 ff d2 9c 19 3e 	r1 = 0x3e199cd2 <RAM_LIMIT_H+0x3DFF9CD2 : 3e199cd2 >			  ## clock.c:79:24
    a3ca:    81 60             	[r0+0x0] = r1			  ## clock.c:79:24
    a3cc:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## clock.c:80:23
    a3d0:    80 00             	rts			  ## clock.c:154:1


spi_cs_pu:
    a3d2:    76 04             	[--sp] = {rets, r6-r4}			  ## spi0.c:173:0
    a3d4:    c2 ff 10 53 fd 00 	r2 = 0xfd5310 <RAM_LIMIT_H+0xE35310 : fd5310 >			  ## spi0.c:173:0
    a3da:    80 f8 09 02       	if (r0 != 0x1) goto 0x12 <spi_cs_pu+0x1E : a3f0 >			  ## spi0.c:174:9
    a3de:    23 60             	r3 = [r2+0x0] 
    a3e0:    40 e1 08 30       	r0 = r3 | 0x8			  ## spi0.c:176:41
    a3e4:    74 e1 08 30       	r4 = r3 & 0xFFFFFFF7			  ## spi0.c:178:41
    a3e8:    43 28             	r3 = 0x8			  ## spi0.c:178:41
    a3ea:    35 e1 f8 2f       	r5 = r2 + -0x8			  ## spi0.c:178:41
    a3ee:    04 8d             	goto 0x1a <spi_cs_pu+0x38 : a40a >			  ## spi0.c:178:41
    a3f0:    d2 ec 20 20       	r2 = [r2+0x200]
    a3f4:    c6 ff 10 55 fd 00 	r6 = 0xfd5510 <RAM_LIMIT_H+0xE35510 : fd5510 >
    a3fa:    40 e1 10 20       	r0 = r2 | 0x10			  ## spi0.c:183:41
    a3fe:    74 e1 10 20       	r4 = r2 & 0xFFFFFFEF			  ## spi0.c:185:41
    a402:    43 30             	r3 = 0x10			  ## spi0.c:185:41
    a404:    35 e1 f8 6f       	r5 = r6 + -0x8			  ## spi0.c:185:41
    a408:    62 16             	r2 = r6			  ## spi0.c:185:41
    a40a:    31 e8 00 00       	if (r1 == 0x0) {
    a40e:    40 16             		r0 = r4
                               	}
    a410:    a0 60             	[r2+0x0] = r0
    a412:    64 e8 00 53       	[r5+0x0] |= r3
    a416:    56 04             	{pc, r6-r4} = [sp++]			  ## spi0.c:189:1


mdelay:
    a418:    10 04             	[--sp] = rets			  ## timer.c:27:0
    a41a:    02 16             	r2 = r0			  ## timer.c:27:0
    a41c:    04 85             	goto 0xa <mdelay+0x10 : a428 >			  ## timer.c:27:0
    a41e:    40 e0 e8 03       	r0 = 0x3e8 <ROM_RAM_SIZE+0x1E8 : 3e8 >			  ## timer.c:29:9
    a422:    bf ea 6a ff       	call -0x12c <udelay : a2fa >			  ## timer.c:29:9
    a426:    fa 3f             	r2 += -0x1			  ## timer.c:28:5
    a428:    f2 5a             	if (r2 != 0) goto -0xc <mdelay+0x6 : a41e >			  ## timer.c:28:5
    a42a:    00 04             	pc = [sp++]			  ## timer.c:31:1


flash_poweron:
    a42c:    76 04             	[--sp] = {rets, r6-r4}			  ## norflash.c:388:0
    a42e:    c6 ff 00 53 fd 00 	r6 = 0xfd5300 <RAM_LIMIT_H+0xE35300 : fd5300 >			  ## norflash.c:388:0
    a434:    14 d6             	r4 = r1  #			  ## norflash.c:388:0
    a436:    62 60             		 r2 = [r6+0x0] 			  ## norflash.c:393:19
    a438:    05 16             	r5 = r0
    a43a:    52 e8 20 22       	if ((r2 & 0x10) != 0) goto 0x40 <flash_poweron+0x52 : a47e >
    a43e:    35 ea 01 80       	if ((r5 & 0x1) != 0) {
    a442:    40 21             		r0 = 0x1			  ## norflash.c:397:9
    a444:    41 21             		r1 = 0x1			  ## norflash.c:397:9
    a446:    61 85             		call -0x76
                               	} <spi_cs_pu : a3d2 >			  ## norflash.c:397:9
    a448:    35 ea 02 80       	if ((r5 & 0x2) != 0) {			  ## norflash.c:397:9
    a44c:    40 22             		r0 = 0x2			  ## norflash.c:400:9
    a44e:    41 21             		r1 = 0x1			  ## norflash.c:400:9
    a450:    61 80             		call -0x80
                               	} <spi_cs_pu : a3d2 >			  ## norflash.c:400:9
    a452:    c5 ef 10 60       	[r6+0x14] &= 0xFFFFFFEF			  ## norflash.c:403:19
    a456:    04 ef 10 60       	[r6+0x10] |= 0x10			  ## norflash.c:404:19
    a45a:    02 ef 10 60       	[r6+0x8] |= 0x10			  ## norflash.c:405:19
    a45e:    c7 ef 10 60       	[r6+0x1c] &= 0xFFFFFFEF			  ## norflash.c:407:19
    a462:    c6 ef 10 60       	[r6+0x18] &= 0xFFFFFFEF			  ## norflash.c:408:19
    a466:    00 ef 10 60       	[r6+0x0] |= 0x10			  ## norflash.c:409:19
    a46a:    c2 ef 10 60       	[r6+0x8] &= 0xFFFFFFEF			  ## norflash.c:410:19
    a46e:    40 21             	r0 = 0x1			  ## norflash.c:412:5
    a470:    61 93             	call -0x5a <mdelay : a418 >			  ## norflash.c:412:5
    a472:    07 ef 10 60       	[r6+0x1c] |= 0x10			  ## norflash.c:414:19
    a476:    06 ef 10 60       	[r6+0x18] |= 0x10			  ## norflash.c:415:19
    a47a:    40 16             	r0 = r4			  ## norflash.c:416:5
    a47c:    61 8d             	call -0x66 <mdelay : a418 >			  ## norflash.c:416:5
    a47e:    56 04             	{pc, r6-r4} = [sp++]			  ## norflash.c:417:1


p33_softflag_boot:
    a480:    77 04             	[--sp] = {rets, r7-r4}			  ## boot_init.c:214:0
    a482:    64 e0 00 0b       	r0 = icfg			  ## boot_init.c:216:5
    a486:    30 29             	r0 |= 0x200			  ## boot_init.c:217:9
    a488:    64 e0 80 0b       	icfg = r0			  ## boot_init.c:218:5
    a48c:    80 ff 80 a0 ff ff 	call -0x5f80 <os_code_begin : 4512 >			  ## boot_init.c:220:5
    a492:    80 ff 92 a0 ff ff 	call -0x5f6e <local_irq_disable : 452a >			  ## boot_init.c:221:5
    a498:    80 ff bc a0 ff ff 	call -0x5f44 <local_irq_enable : 455a >			  ## boot_init.c:222:5
    a49e:    c0 ff 28 fc 19 00 	r0 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## clock.c:252:27
    a4a4:    45 23             	r5 = 0x3			  ## clock.c:246:28
    a4a6:    8d 41             	b[r0+0x1] = r5			  ## clock.c:246:28
    a4a8:    c1 ff 00 2d 31 01 	r1 = 0x1312d00 <RAM_LIMIT_H+0x1172D00 : 1312d00 >			  ## clock.c:250:28
    a4ae:    81 61             	[r0+0x4] = r1			  ## clock.c:250:28
    a4b0:    81 62             	[r0+0x8] = r1			  ## clock.c:252:27
    a4b2:    c0 ff 80 fd 19 00 	r0 = 0x19fd80 <exception_irq_hook : 19fd80 >			  ## boot_init.c:54:24
    a4b8:    46 20             	r6 = 0x0			  ## boot_init.c:54:24
    a4ba:    86 60             	[r0+0x0] = r6			  ## boot_init.c:54:24
    a4bc:    c1 ff a8 a0 00 00 	r1 = 0xa0a8 <exception_irq_handler : a0a8 >			  ## boot_init.c:55:5
    a4c2:    40 21             	r0 = 0x1			  ## boot_init.c:55:5
    a4c4:    42 27             	r2 = 0x7			  ## boot_init.c:55:5
    a4c6:    47 21             	r7 = 0x1			  ## boot_init.c:55:5
    a4c8:    bf ea ed fe       	call -0x226 <HWI_Install : a2a6 >			  ## boot_init.c:55:5
    a4cc:    c0 ff 00 e2 ff 00 	r0 = 0xffe200 <RAM_LIMIT_H+0xE5E200 : ffe200 >			  ## boot_init.c:56:24
    a4d2:    86 60             	[r0+0x0] = r6			  ## boot_init.c:56:24
    a4d4:    c0 ff c0 c0 f2 00 	r0 = 0xf2c0c0 <RAM_LIMIT_H+0xD8C0C0 : f2c0c0 >			  ## boot_init.c:56:24
    a4da:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:230:9
    a4dc:    c4 ff 18 fc 19 00 	r4 = 0x19fc18 <g_boot_soft_flag : 19fc18 >			  ## boot_init.c:230:9
    a4e2:    51 e8 12 3a       	if ((r1 & 0x80) != 0) goto 0x24 <p33_softflag_boot+0x8A : a50a >			  ## boot_init.c:230:9
    a4e6:    c6 62             	[r4+0x8] = r6			  ## boot_init.c:239:34
    a4e8:    01 68             	r1 = [r0+0x20] 			  ## boot_init.c:240:40
    a4ea:    c9 40             	b[r4+0x0] = r1			  ## boot_init.c:240:38
    a4ec:    02 69             	r2 = [r0+0x24] 			  ## boot_init.c:241:40
    a4ee:    02 f1 68 00       	r2 = r0 + 0x68  #			  ## boot_init.c:241:40
    a4f2:    ca 41             		 b[r4+0x1] = r2			  ## boot_init.c:241:38
    a4f4:    23 60             	r3 = [r2+0x0] 			  ## boot_init.c:242:40
    a4f6:    cb 42             	b[r4+0x2] = r3			  ## boot_init.c:242:38
    a4f8:    22 61             	r2 = [r2+0x4] 			  ## boot_init.c:243:40
    a4fa:    ca 43             	b[r4+0x3] = r2			  ## boot_init.c:243:38
    a4fc:    02 6a             	r2 = [r0+0x28] 			  ## boot_init.c:244:40
    a4fe:    ca 44             	b[r4+0x4] = r2			  ## boot_init.c:244:38
    a500:    b0 f1 04 11       	r0 = uextra(r1, p:0x2, l:0x1)  #			  ## boot_init.c:244:38
    a504:    06 6b             		 r6 = [r0+0x2c] 			  ## boot_init.c:245:40
    a506:    0d 81             	r5 = r0 + 0x1			  ## boot_init.c:245:40
    a508:    04 83             	goto 0x6 <p33_softflag_boot+0x90 : a510 >			  ## boot_init.c:245:40
    a50a:    c7 62             	[r4+0x8] = r7			  ## boot_init.c:231:34
    a50c:    ce 44             	b[r4+0x4] = r6			  ## boot_init.c:233:38
    a50e:    c6 60             	[r4+0x0] = r6			  ## boot_init.c:233:38
    a510:    ce 45             	b[r4+0x5] = r6
    a512:    c0 ff 24 fc 19 00 	r0 = 0x19fc24 <g_spi_boot_port : 19fc24 >			  ## boot_init.c:67:21
    a518:    8d 40             	b[r0+0x0] = r5			  ## boot_init.c:67:21
    a51a:    c3 ff 48 c2 f2 00 	r3 = 0xf2c248 <RAM_LIMIT_H+0xD8C248 : f2c248 >			  ## boot_init.c:67:21
    a520:    00 ef 30 30       	[r3+0x0] |= 0x30			  ## boot_init.c:250:5
    a524:    00 ef 40 30       	[r3+0x0] |= 0x40			  ## boot_init.c:251:5
    a528:    32 e1 b8 3d       	r2 = r3 + -0x248			  ## boot_init.c:251:5
    a52c:    00 ef 04 20       	[r2+0x0] |= 0x4			  ## boot_init.c:252:5
    a530:    0b ef 80 30       	[r3+0x2c] |= 0x80			  ## boot_init.c:256:5
    a534:    cb ef 40 30       	[r3+0x2c] &= 0xFFFFFFBF			  ## boot_init.c:257:5
    a538:    c3 ef 38 30       	[r3+0xc] &= 0xFFFFFFC7			  ## boot_init.c:258:5
    a53c:    cb ef 20 30       	[r3+0x2c] &= 0xFFFFFFDF			  ## boot_init.c:259:5
    a540:    40 62             	r0 = [r4+0x8] 			  ## boot_init.c:262:27
    a542:    90 47             	if (r0 != 0) goto 0x4e <p33_softflag_boot+0x112 : a592 >			  ## boot_init.c:262:27
    a544:    48 40             	r0 = b[r4+0x0] (u)			  ## boot_init.c:262:78
    a546:    50 e8 24 20       	if ((r0 & 0x10) == 0) goto 0x48 <p33_softflag_boot+0x112 : a592 >			  ## boot_init.c:262:78
    a54a:    30 61             	r0 = [r3+0x4] 			  ## boot_init.c:263:9
    a54c:    49 45             	r1 = b[r4+0x5] (u)			  ## boot_init.c:263:9
    a54e:    11 a1             	r1 = r1 << 0x1			  ## boot_init.c:263:9
    a550:    91 a4             	r1 = r1 >> 0x4			  ## boot_init.c:263:9
    a552:    a0 e1 10 12       	r0 <= insert(r1, p:0x4, l:0x4)			  ## boot_init.c:263:9
    a556:    b0 61             	[r3+0x4] = r0			  ## boot_init.c:263:9
    a558:    48 40             	r0 = b[r4+0x0] (u)			  ## boot_init.c:264:46
    a55a:    50 e8 0e 28       	if ((r0 & 0x20) == 0) goto 0x1c <p33_softflag_boot+0xFA : a57a >			  ## boot_init.c:264:46
    a55e:    c0 ef 04 20       	[r2+0x0] &= 0xFFFFFFFB			  ## boot_init.c:265:13
    a562:    00 ef 30 30       	[r3+0x0] |= 0x30			  ## boot_init.c:266:13
    a566:    20 60             	r0 = [r2+0x0] 			  ## boot_init.c:267:13
    a568:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## boot_init.c:267:13
    a56c:    30 20             	r0 |= 0x1			  ## boot_init.c:267:13
    a56e:    a0 60             	[r2+0x0] = r0			  ## boot_init.c:267:13
    a570:    70 28             	r0 = 0xc8			  ## boot_init.c:268:13
    a572:    bf ea c2 fe       	call -0x27c <udelay : a2fa >			  ## boot_init.c:268:13
    a576:    00 ef 04 20       	[r2+0x0] |= 0x4			  ## boot_init.c:269:13
    a57a:    c0 ef 30 30       	[r3+0x0] &= 0xFFFFFFCF			  ## boot_init.c:271:9
    a57e:    30 63             	r0 = [r3+0xc] 			  ## boot_init.c:272:9
    a580:    49 45             	r1 = b[r4+0x5] (u)			  ## boot_init.c:272:9
    a582:    a0 e1 0c 10       	r0 <= insert(r1, p:0x0, l:0x3)			  ## boot_init.c:272:9
    a586:    b0 63             	[r3+0xc] = r0			  ## boot_init.c:272:9
    a588:    70 28             	r0 = 0xc8			  ## boot_init.c:273:9
    a58a:    bf ea b6 fe       	call -0x294 <udelay : a2fa >			  ## boot_init.c:273:9
    a58e:    00 ef 30 30       	[r3+0x0] |= 0x30			  ## boot_init.c:274:9
    a592:    c0 ff 40 19 fd 00 	r0 = 0xfd1940 <RAM_LIMIT_H+0xE31940 : fd1940 >
    a598:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:277:5
    a59a:    71 e1 1e 10       	r1 = r1 & 0xFFFFFFE1			  ## boot_init.c:277:5
    a59e:    31 24             	r1 |= 0x10			  ## boot_init.c:277:5
    a5a0:    81 60             	[r0+0x0] = r1			  ## boot_init.c:277:5
    a5a2:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:278:5
    a5a4:    71 e1 f0 1f       	r1 = r1 & 0xFFFFFE1F			  ## boot_init.c:278:5
    a5a8:    31 28             	r1 |= 0x100			  ## boot_init.c:278:5
    a5aa:    81 60             	[r0+0x0] = r1			  ## boot_init.c:278:5
    a5ac:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:279:5
    a5ae:    71 e1 70 1d       	r1 = r1 & 0xFFFFC3FF			  ## boot_init.c:279:5
    a5b2:    31 2d             	r1 |= 0x2000			  ## boot_init.c:279:5
    a5b4:    81 60             	[r0+0x0] = r1			  ## boot_init.c:279:5
    a5b6:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:280:5
    a5b8:    71 e1 f0 1a       	r1 = r1 & 0xFFF87FFF			  ## boot_init.c:280:5
    a5bc:    31 32             	r1 |= 0x40000			  ## boot_init.c:280:5
    a5be:    e0 f0 33 0d       	r0 = r0 + 0x2CC0  #			  ## boot_init.c:280:5
    a5c2:    81 60             		 [r0+0x0] = r1			  ## boot_init.c:280:5
    a5c4:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:281:5
    a5c6:    71 e1 f0 14       	r1 = r1 & 0x87FFFFFF			  ## boot_init.c:281:5
    a5ca:    31 3e             	r1 |= 0x40000000			  ## boot_init.c:281:5
    a5cc:    00 f1 00 01       	r0 = r0 + 0x100  #			  ## boot_init.c:281:5
    a5d0:    81 60             		 [r0+0x0] = r1			  ## boot_init.c:281:5
    a5d2:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:282:5
    a5d4:    71 e1 f0 14       	r1 = r1 & 0x87FFFFFF			  ## boot_init.c:282:5
    a5d8:    31 3e             	r1 |= 0x40000000			  ## boot_init.c:282:5
    a5da:    81 60             	[r0+0x0] = r1			  ## boot_init.c:282:5
    a5dc:    48 40             	r0 = b[r4+0x0] (u)			  ## boot_init.c:284:42
    a5de:    50 e8 0c 02       	if ((r0 & 0x1) != 0) goto 0x18 <p33_softflag_boot+0x17A : a5fa >			  ## boot_init.c:284:42
    a5e2:    c0 ff 9d 15 8c 04 	r0 = 0x48c159d <RAM_LIMIT_H+0x472159C : 48c159c >			  ## wdt.c:5:18
    a5e8:    21 e1 00 28       	r1 = r2 + -0x1800			  ## wdt.c:5:18
    a5ec:    e0 f0 22 03       	r0 = r0 + 0x22222222  #			  ## wdt.c:6:18
    a5f0:    90 61             		 [r1+0x4] = r0			  ## wdt.c:5:18
    a5f2:    90 61             	[r1+0x4] = r0			  ## wdt.c:6:18
    a5f4:    40 ea 2c 10       	[r1+0x0] = 0x2C			  ## wdt.c:7:18
    a5f8:    48 40             	r0 = b[r4+0x0] (u)			  ## wdt.c:7:18
    a5fa:    30 ea 08 80       	if ((r0 & 0x8) != 0) {
    a5fe:    d1 ef 05 20       		[r2+0x44] &= 0xFFFFFFFA			  ## boot_init.c:290:21
    a602:    11 ef 01 20       		[r2+0x44] |= 0x1			  ## boot_init.c:291:21
    a606:    11 ef 04 20       		[r2+0x44] |= 0x4
                               	}			  ## boot_init.c:292:21
    a60a:    40 62             	r0 = [r4+0x8] 			  ## boot_init.c:311:26
    a60c:    a0 4c             	if (r0 != 0) goto 0x98 <p33_softflag_boot+0x226 : a6a6 >			  ## boot_init.c:311:26
    a60e:    48 42             	r0 = b[r4+0x2] (u)			  ## boot_init.c:159:56
    a610:    72 e1 f0 00       	r2 = r0 & 0xFFFFFF0F			  ## boot_init.c:159:25
    a614:    c0 ff 00 55 fd 00 	r0 = 0xfd5500 <RAM_LIMIT_H+0xE35500 : fd5500 >			  ## boot_init.c:159:5
    a61a:    41 22             	r1 = 0x2			  ## boot_init.c:159:5
    a61c:    bf ea 80 fe       	call -0x300 <io_cfg : a320 >			  ## boot_init.c:159:5
    a620:    49 42             	r1 = b[r4+0x2] (u)			  ## boot_init.c:160:56
    a622:    92 a4             	r2 = r1 >> 0x4			  ## boot_init.c:160:56
    a624:    41 23             	r1 = 0x3			  ## boot_init.c:160:5
    a626:    bf ea 7b fe       	call -0x30a <io_cfg : a320 >			  ## boot_init.c:160:5
    a62a:    49 43             	r1 = b[r4+0x3] (u)			  ## boot_init.c:161:56
    a62c:    72 e1 f0 10       	r2 = r1 & 0xFFFFFF0F			  ## boot_init.c:161:25
    a630:    41 24             	r1 = 0x4			  ## boot_init.c:161:5
    a632:    bf ea 75 fe       	call -0x316 <io_cfg : a320 >			  ## boot_init.c:161:5
    a636:    48 41             	r0 = b[r4+0x1] (u)			  ## boot_init.c:163:53
    a638:    82 a5             	r2 = r0 >> 0x5			  ## boot_init.c:163:53
    a63a:    c0 ff 00 57 fd 00 	r0 = 0xfd5700 <RAM_LIMIT_H+0xE35700 : fd5700 >			  ## boot_init.c:163:5
    a640:    41 20             	r1 = 0x0			  ## boot_init.c:163:5
    a642:    bf ea 6d fe       	call -0x326 <io_cfg : a320 >			  ## boot_init.c:163:5
    a646:    49 41             	r1 = b[r4+0x1] (u)			  ## boot_init.c:165:41
    a648:    72 e1 fc 10       	r2 = r1 & 0xFFFFFF03			  ## boot_init.c:165:5
    a64c:    00 e1 00 09       	r0 = r0 + 0x900			  ## boot_init.c:165:5
    a650:    02 f8 06 04       	if (r2 == 0x2) goto 0xc <p33_softflag_boot+0x1E0 : a660 >			  ## boot_init.c:165:5
    a654:    02 f8 09 02       	if (r2 == 0x1) goto 0x12 <p33_softflag_boot+0x1EA : a66a >
    a658:    82 50             	if (r2 != 0) goto 0x20 <p33_softflag_boot+0x1FA : a67a >
    a65a:    c0 ef 10 00       	[r0+0x0] &= 0xFFFFFFEF			  ## boot_init.c:167:9
    a65e:    04 87             	goto 0xe <p33_softflag_boot+0x1EE : a66e >			  ## boot_init.c:167:9
    a660:    c0 ef 10 00       	[r0+0x0] &= 0xFFFFFFEF			  ## boot_init.c:177:9
    a664:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:178:9
    a666:    31 26             	r1 |= 0x40			  ## boot_init.c:178:9
    a668:    04 84             	goto 0x8 <p33_softflag_boot+0x1F2 : a672 >			  ## boot_init.c:178:9
    a66a:    00 ef 10 00       	[r0+0x0] |= 0x10			  ## boot_init.c:172:9
    a66e:    01 60             	r1 = [r0+0x0] 
    a670:    b9 26             	r1 &= 0xffffffbf
    a672:    81 60             	[r0+0x0] = r1
    a674:    00 ef 04 00       	[r0+0x0] |= 0x4
    a678:    49 41             	r1 = b[r4+0x1] (u)
    a67a:    b1 e1 08 11       	r1 = uextra(r1, p:0x2, l:0x2)			  ## boot_init.c:183:5
    a67e:    01 f8 06 04       	if (r1 == 0x2) goto 0xc <p33_softflag_boot+0x20E : a68e >			  ## boot_init.c:183:5
    a682:    01 f8 09 02       	if (r1 == 0x1) goto 0x12 <p33_softflag_boot+0x218 : a698 >
    a686:    81 4f             	if (r1 != 0) goto 0x1e <p33_softflag_boot+0x226 : a6a6 >
    a688:    c0 ef 20 00       	[r0+0x0] &= 0xFFFFFFDF			  ## boot_init.c:185:9
    a68c:    04 87             	goto 0xe <p33_softflag_boot+0x21C : a69c >			  ## boot_init.c:185:9
    a68e:    c0 ef 20 00       	[r0+0x0] &= 0xFFFFFFDF			  ## boot_init.c:195:9
    a692:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:196:9
    a694:    31 27             	r1 |= 0x80			  ## boot_init.c:196:9
    a696:    04 84             	goto 0x8 <p33_softflag_boot+0x220 : a6a0 >			  ## boot_init.c:196:9
    a698:    00 ef 20 00       	[r0+0x0] |= 0x20			  ## boot_init.c:190:9
    a69c:    01 60             	r1 = [r0+0x0] 
    a69e:    b9 27             	r1 &= 0xffffff7f
    a6a0:    81 60             	[r0+0x0] = r1
    a6a2:    00 ef 08 00       	[r0+0x0] |= 0x8
    a6a6:    40 20             	r0 = 0x0
    a6a8:    01 e1 fc 30       	r1 = r3 + 0xfc
    a6ac:    90 60             	[r1+0x0] = r0			  ## boot_init.c:316:18
    a6ae:    90 64             	[r1+0x10] = r0			  ## boot_init.c:317:15
    a6b0:    90 63             	[r1+0xc] = r0			  ## boot_init.c:318:14
    a6b2:    40 21             	r0 = 0x1			  ## boot_init.c:320:5
    a6b4:    bf ea 21 fe       	call -0x3be <udelay : a2fa >			  ## boot_init.c:320:5
    a6b8:    bf ea 76 fe       	call -0x314 <osc_clk_init : a3a8 >			  ## boot_init.c:322:5
    a6bc:    40 62             	r0 = [r4+0x8] 			  ## boot_init.c:324:27
    a6be:    80 43             	if (r0 != 0) goto 0x6 <p33_softflag_boot+0x246 : a6c6 >			  ## boot_init.c:324:27
    a6c0:    48 40             	r0 = b[r4+0x0] (u)			  ## boot_init.c:324:77
    a6c2:    50 e8 1a 12       	if ((r0 & 0x4) != 0) goto 0x34 <p33_softflag_boot+0x27A : a6fa >			  ## boot_init.c:324:77
    a6c6:    40 21             	r0 = 0x1			  ## boot_init.c:327:9
    a6c8:    41 20             	r1 = 0x0
    a6ca:    bf ea af fe       	call -0x2a2 <flash_poweron : a42c >
    a6ce:    c0 ff 00 41 fd 00 	r0 = 0xfd4100 <RAM_LIMIT_H+0xE34100 : fd4100 >
    a6d4:    42 ea 00 00       	[r0+0x8] = 0x0			  ## boot_flash.c:61:24
    a6d8:    c1 ff ff ff 00 00 	r1 = 0xffff <.GJTIE291_0_0_+0x734 : fffe >			  ## boot_flash.c:62:24
    a6de:    81 61             	[r0+0x4] = r1			  ## boot_flash.c:62:24
    a6e0:    40 ea 80 00       	[r0+0x0] = 0x80			  ## boot_flash.c:63:24
    a6e4:    48 44             	r0 = b[r4+0x4] (u)			  ## boot_init.c:333:47
    a6e6:    80 a1             	r0 = r0 >> 0x1			  ## boot_init.c:333:47
    a6e8:    30 ea 03 c0       	if ((r0 & 0x3) != 0) {			  ## boot_init.c:333:47
    a6ec:    60 e1 03 00       		r0 = r0 & 0x3			  ## boot_init.c:333:47
    a6f0:    00 a1             		r0 = r0 << 0x1			  ## boot_init.c:334:18
    a6f2:    00 17             		r0 = r0.b0 (u)			  ## boot_init.c:334:18
    a6f4:    bf ea 90 fe       		call -0x2e0
                               	} <mdelay : a418 >			  ## boot_init.c:334:9
    a6f8:    57 04             	{pc, r7-r4} = [sp++]			  ## boot_init.c:336:1
    a6fa:    40 22             	r0 = 0x2			  ## boot_init.c:325:9
    a6fc:    f7 85             	goto -0x36 <p33_softflag_boot+0x248 : a6c8 >			  ## boot_init.c:325:9


change_capture_mode:
    a6fe:    c1 ff 00 05 fd 00 	r1 = 0xfd0500 <RAM_LIMIT_H+0xE30500 : fd0500 >			  ## uart_key.c:67:0
    a704:    40 ef 01 10       	[r1+0x0] ^= 0x1			  ## uart_key.c:68:18
    a708:    41 21             	r1 = 0x1			  ## uart_key.c:68:18
    a70a:    b0 e8 02 00       	if (r0 != 0x2) {			  ## uart_key.c:68:18
    a70e:    41 22             		r1 = 0x2
                               	}			  ## uart_key.c:70:14
    a710:    c0 ff c0 13 18 00 	r0 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## uart_key.c:70:14
    a716:    81 64             	[r0+0x10] = r1
    a718:    80 00             	rts			  ## uart_key.c:75:1


reset_status:
    a71a:    c0 ff c0 13 18 00 	r0 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## uart_key.c:90:0
    a720:    41 20             	r1 = 0x0			  ## uart_key.c:94:17
    a722:    89 61             	h[r0+0x2] = r1			  ## uart_key.c:91:13
    a724:    42 20             	r2 = 0x0			  ## uart_key.c:92:14
    a726:    43 20             	r3 = 0x0			  ## uart_key.c:92:14
    a728:    50 ec 05 21       	d[r0+0x14] = r3_r2			  ## uart_key.c:92:14
    a72c:    81 67             	[r0+0x1c] = r1			  ## uart_key.c:94:17
    a72e:    80 00             	rts			  ## uart_key.c:95:1


clk_get:
    a730:    76 04             	[--sp] = {rets, r6-r4}			  ## clock.c:257:0
    a732:    04 16             	r4 = r0			  ## clock.c:257:0
    a734:    c5 ff f0 eb 01 00 	r5 = 0x1ebf0 <silk_LTPscale_iCDF+0x3 : 1ebf0 >			  ## clock.c:257:0
    a73a:    51 16             	r1 = r5			  ## clock.c:258:9
    a73c:    80 ff b2 9b ff ff 	call -0x644e <strcmp : 42f4 >			  ## clock.c:258:9
    a742:    c6 ff 28 fc 19 00 	r6 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## clock.c:258:9
    a748:    00 52             	if (r0 == 0) goto 0x24 <clk_get+0x3E : a76e >			  ## clock.c:258:9
    a74a:    59 84             	r1 = r5 + 0x4			  ## clock.c:260:16
    a74c:    40 16             	r0 = r4			  ## clock.c:260:16
    a74e:    80 ff a0 9b ff ff 	call -0x6460 <strcmp : 42f4 >			  ## clock.c:260:16
    a754:    00 4e             	if (r0 == 0) goto 0x1c <clk_get+0x42 : a772 >			  ## clock.c:260:16
    a756:    59 99             	r1 = r5 + 0x19			  ## clock.c:262:16
    a758:    40 16             	r0 = r4			  ## clock.c:262:16
    a75a:    80 ff 94 9b ff ff 	call -0x646c <strcmp : 42f4 >			  ## clock.c:262:16
    a760:    b0 e8 00 10       	if (r0 != 0x0) {			  ## clock.c:262:16
    a764:    60 62             		r0 = [r6+0x8] 
                               	} else {			  ## clock.c:265:26
    a766:    c0 ff 00 36 6e 01 		r0 = 0x16e3600
                               	} <RAM_LIMIT_H+0x1543600 : 16e3600 >			  ## clock.c:262:16
    a76c:    56 04             	{pc, r6-r4} = [sp++]			  ## clock.c:262:16
    a76e:    68 88             	r0 = r6 + 0x8
    a770:    04 81             	goto 0x2 <clk_get+0x44 : a774 >
    a772:    68 84             	r0 = r6 + 0x4
    a774:    00 60             	r0 = [r0+0x0] 
    a776:    56 04             	{pc, r6-r4} = [sp++]			  ## clock.c:266:1


set_cap_timeout:
    a778:    74 04             	[--sp] = {rets, r4}			  ## boot_mode.c:32:0
    a77a:    c4 ff 00 06 fd 00 	r4 = 0xfd0600 <RAM_LIMIT_H+0xE30600 : fd0600 >			  ## boot_mode.c:32:0
    a780:    40 ea 80 4c       	[r4+0x0] = 0x4000			  ## boot_mode.c:33:17
    a784:    41 ea 00 40       	[r4+0x4] = 0x0			  ## boot_mode.c:34:17
    a788:    c0 ff f0 eb 01 00 	r0 = 0x1ebf0 <silk_LTPscale_iCDF+0x3 : 1ebf0 >			  ## boot_mode.c:35:26
    a78e:    61 90             	call -0x60 <clk_get : a730 >			  ## boot_mode.c:35:26
    a790:    60 e0 7a 1c       	r1 = 0xFA00			  ## boot_mode.c:35:46
    a794:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## boot_mode.c:35:46
    a798:    e0 e1 0a 00       	r0 = r0 * 0xA			  ## boot_mode.c:35:22
    a79c:    c0 62             	[r4+0x8] = r0			  ## boot_mode.c:35:17
    a79e:    00 ef 31 40       	[r4+0x0] |= 0x31			  ## boot_mode.c:36:17
    a7a2:    54 04             	{pc, r4} = [sp++]			  ## boot_mode.c:37:1


capture_isr:
    a7a4:    e9 04             	[--sp] = {psr, rets, reti}			  ## uart_key.c:105:0
    a7a6:    d8 e8 ff 03       	[--sp] = {r9-r0}			  ## uart_key.c:105:0
    a7aa:    c3 ff 00 05 fd 00 	r3 = 0xfd0500 <RAM_LIMIT_H+0xE30500 : fd0500 >			  ## uart_key.c:105:0
    a7b0:    00 ef 80 3c       	[r3+0x0] |= 0x4000			  ## uart_key.c:106:5
    a7b4:    31 62             	r1 = [r3+0x8] 			  ## uart_key.c:109:15
    a7b6:    c4 ff c0 13 18 00 	r4 = 0x1813c0 <var_bss_begin : 1813c0 >
    a7bc:    42 63             	r2 = [r4+0xc] 			  ## uart_key.c:112:21
    a7be:    95 de             	r5 = r1 - r2  #			  ## uart_key.c:112:19
    a7c0:    c1 63             		 [r4+0xc] = r1			  ## uart_key.c:113:13
    a7c2:    40 64             	r0 = [r4+0x10] 			  ## uart_key.c:120:27
    a7c4:    00 f8 28 04       	if (r0 == 0x2) goto 0x50 <capture_isr+0x74 : a818 >			  ## uart_key.c:120:9
    a7c8:    80 f8 29 02       	if (r0 != 0x1) goto 0x52 <capture_isr+0x7A : a81e >
    a7cc:    40 23             	r0 = 0x3			  ## uart_key.c:121:9
    a7ce:    41 97             	call -0xd2 <change_capture_mode : a6fe >			  ## uart_key.c:121:9
    a7d0:    40 65             	r0 = [r4+0x14] 			  ## uart_key.c:122:13
    a7d2:    10 45             	if (r0 == 0) goto 0x4a <capture_isr+0x7A : a81e >			  ## uart_key.c:122:13
    a7d4:    09 1d             	r1 = r0 + r5			  ## uart_key.c:127:25
    a7d6:    32 e1 18 1c       	r2 = r1 + -0x3e8			  ## uart_key.c:130:39
    a7da:    46 e0 99 3a       	r6 = 0x3a99 <STFT_Win_FixHalf_M512_D160+0x294 : 3a98 >			  ## uart_key.c:130:39
    a7de:    06 e9 19 20       	if (r2 >= r6) goto 0x32 <capture_isr+0x70 : a814 >			  ## uart_key.c:130:39
    a7e2:    42 66             	r2 = [r4+0x18] 			  ## uart_key.c:138:13
    a7e4:    12 41             	if (r2 == 0) goto 0x42 <capture_isr+0x84 : a828 >
    a7e6:    46 67             	r6 = [r4+0x1c] 			  ## uart_key.c:143:21
    a7e8:    16 18             	r6 += r1			  ## uart_key.c:143:21
    a7ea:    c6 67             	[r4+0x1c] = r6			  ## uart_key.c:143:21
    a7ec:    4f 61             	r7 = h[r4+0x2] (u)			  ## uart_key.c:144:17
    a7ee:    c7 21             	r7 += 0x1			  ## uart_key.c:144:17
    a7f0:    b4 f0 12 92       	r9 = r1 - r2  #			  ## uart_key.c:30:18
    a7f4:    cf 61             		 h[r4+0x2] = r7			  ## uart_key.c:144:17
    a7f6:    b4 e0 22 81       	r8 = r2 - r1			  ## uart_key.c:28:18
    a7fa:    92 ec 00 01       	if (r2 <= r1) {			  ## uart_key.c:28:18
    a7fe:    98 16             		r8 = r9
                               	}			  ## uart_key.c:27:9
    a800:    f1 17             	r1 = r7.l (u)			  ## uart_key.c:147:58
    a802:    f4 e1 60 11       	r1 = r6 / r1 (u)			  ## uart_key.c:147:56
    a806:    e1 e1 0a 10       	r1 = r1 * 0xA			  ## uart_key.c:147:67
    a80a:    5a 24             	r2 = 0x64			  ## uart_key.c:147:72
    a80c:    f4 e1 10 12       	r1 = r1 / r2 (u)			  ## uart_key.c:147:72
    a810:    81 ec 0c 80       	if (r8 <= r1) goto 0x18 <capture_isr+0x88 : a82c >			  ## uart_key.c:147:72
    a814:    41 82             	call -0xfc <reset_status : a71a >
    a816:    04 84             	goto 0x8 <capture_isr+0x7C : a820 >
    a818:    40 22             	r0 = 0x2			  ## uart_key.c:183:9
    a81a:    bf ea 70 ff       	call -0x120 <change_capture_mode : a6fe >			  ## uart_key.c:183:9
    a81e:    c5 65             	[r4+0x14] = r5
    a820:    d4 e8 ff 03       	{r9-r0} = [sp++]			  ## uart_key.c:188:1
    a824:    a9 04             	{psr, rets, reti} = [sp++]			  ## uart_key.c:188:1
    a826:    81 00             	rti			  ## uart_key.c:188:1
    a828:    c1 66             	[r4+0x18] = r1			  ## uart_key.c:139:24
    a82a:    f7 9a             	goto -0xc <capture_isr+0x7C : a820 >			  ## uart_key.c:139:24
    a82c:    e1 e1 03 50       	r1 = r5 * 0x3			  ## uart_key.c:154:28
    a830:    81 ec 09 00       	if (r0 <= r1) goto 0x12 <capture_isr+0xA2 : a846 >			  ## uart_key.c:154:28
    a834:    e1 e1 05 50       	r1 = r5 * 0x5			  ## uart_key.c:155:28
    a838:    01 e9 05 00       	if (r0 >= r1) goto 0xa <capture_isr+0xA2 : a846 >			  ## uart_key.c:155:28
    a83c:    49 62             	r1 = h[r4+0x4] (u)			  ## uart_key.c:157:28
    a83e:    40 21             	r0 = 0x1			  ## uart_key.c:157:28
    a840:    a0 e1 fc 10       	r0 <= insert(r1, p:0x1, l:0x1f)			  ## uart_key.c:157:46
    a844:    04 8a             	goto 0x14 <capture_isr+0xB6 : a85a >			  ## uart_key.c:157:46
    a846:    e1 e1 03 00       	r1 = r0 * 0x3			  ## uart_key.c:158:31
    a84a:    05 e9 e3 11       	if (r1 >= r5) goto -0x3a <capture_isr+0x70 : a814 >			  ## uart_key.c:158:31
    a84e:    e0 e1 05 00       	r0 = r0 * 0x5			  ## uart_key.c:159:30
    a852:    85 ec df 01       	if (r0 <= r5) goto -0x42 <capture_isr+0x70 : a814 >			  ## uart_key.c:159:30
    a856:    48 62             	r0 = h[r4+0x4] (u)			  ## uart_key.c:161:28
    a858:    00 a1             	r0 = r0 << 0x1			  ## uart_key.c:161:40
    a85a:    c8 62             	h[r4+0x4] = r0
    a85c:    41 f0 af 68       	r1 = 0x68af  # <wtgv2_silk_NLSF2A+0x338 : 68ae >			  ## uart_key.c:167:20
    a860:    48 62             		 r0 = h[r4+0x4] (u)			  ## uart_key.c:167:23
    a862:    81 e8 13 00       	if (r0 != r1) goto 0x26 <capture_isr+0xE8 : a88c >			  ## uart_key.c:167:13
    a866:    44 20             	r4 = 0x0
    a868:    e0 e0 a4 3c       	r0 = r3 + 0x5200
    a86c:    d1 ec 01 4c       	[r0+0x1c0] = r4			  ## uart_key.c:169:58
    a870:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## uart_key.c:170:51
    a874:    c2 ef 01 00       	[r0+0x8] &= 0xFFFFFFFE			  ## uart_key.c:171:51
    a878:    40 22             	r0 = 0x2			  ## uart_key.c:172:13
    a87a:    bf ea cd fd       	call -0x466 <mdelay : a418 >			  ## uart_key.c:172:13
    a87e:    40 ea 80 3c       	[r3+0x0] = 0x4000			  ## uart_key.c:79:18
    a882:    c0 ff 04 5c fd 00 	r0 = 0xfd5c04 <RAM_LIMIT_H+0xE35C04 : fd5c04 >			  ## uart_key.c:80:25
    a888:    84 60             	[r0+0x0] = r4			  ## uart_key.c:80:25
    a88a:    e7 8a             	goto -0x6c <capture_isr+0x7C : a820 >			  ## uart_key.c:80:25
    a88c:    40 68             	r0 = [r4+0x20] 			  ## uart_key.c:177:19
    a88e:    09 81             	r1 = r0 + 0x1			  ## uart_key.c:177:19
    a890:    c1 68             	[r4+0x20] = r1			  ## uart_key.c:177:19
    a892:    00 fc c4 c7       	if (r0 > 0x63) goto -0x78 <capture_isr+0x7A : a81e >			  ## uart_key.c:177:19
    a896:    bf ea 6f ff       	call -0x122 <set_cap_timeout : a778 >			  ## uart_key.c:178:13
    a89a:    e7 81             	goto -0x7e <capture_isr+0x7A : a81e >			  ## uart_key.c:178:13


set_timer3_captrue_dp:
    a89c:    c1 ff 00 60 fd 00 	r1 = 0xfd6000 <RAM_LIMIT_H+0xE36000 : fd6000 >			  ## clock.c:313:0
    a8a2:    00 ef 80 1d       	[r1+0x0] |= 0x1000			  ## clock.c:314:5
    a8a6:    c2 ff 00 18 fd 00 	r2 = 0xfd1800 <RAM_LIMIT_H+0xE31800 : fd1800 >			  ## clock.c:315:5
    a8ac:    00 ef 01 20       	[r2+0x0] |= 0x1			  ## clock.c:315:5
    a8b0:    00 50             	if (r0 == 0) goto 0x20 <set_timer3_captrue_dp+0x36 : a8d2 >			  ## clock.c:315:5
    a8b2:    00 ef 80 1f       	[r1+0x0] |= 0x100			  ## clock.c:317:9
    a8b6:    00 ef 00 1f       	[r1+0x0] |= 0x200			  ## clock.c:318:9
    a8ba:    00 ef 04 10       	[r1+0x0] |= 0x4			  ## clock.c:319:9
    a8be:    00 ef 08 10       	[r1+0x0] |= 0x8			  ## clock.c:320:9
    a8c2:    c0 ef 40 10       	[r1+0x0] &= 0xFFFFFFBF			  ## clock.c:321:9
    a8c6:    c0 ef 80 10       	[r1+0x0] &= 0xFFFFFF7F			  ## clock.c:322:9
    a8ca:    00 ef 10 10       	[r1+0x0] |= 0x10			  ## clock.c:323:9
    a8ce:    c0 ef 20 10       	[r1+0x0] &= 0xFFFFFFDF			  ## clock.c:324:9
    a8d2:    30 e1 0c 1c       	r0 = r1 + -0x3f4			  ## clock.c:327:25
    a8d6:    40 ea 2f 00       	[r0+0x0] = 0x2F			  ## clock.c:327:25
    a8da:    c9 ef 70 14       	[r1+0x24] &= 0xFFFFFFF			  ## clock.c:328:24
    a8de:    09 ef 40 15       	[r1+0x24] |= 0x30000000			  ## clock.c:329:24
    a8e2:    20 e1 00 2f       	r0 = r2 + -0x1100			  ## clock.c:331:20
    a8e6:    40 ea 80 0c       	[r0+0x0] = 0x4000			  ## clock.c:331:20
    a8ea:    80 00             	rts			  ## clock.c:332:1


check_key_type:
    a8ec:    41 e0 ef 16       	r1 = 0x16ef <WOLASynthesisFilter_Float_M128_m4_r1+0x6EA : 16ee >			  ## boot_mode.c:49:0
    a8f0:    10 e8 00 41       	if (r0 == r1) {			  ## boot_mode.c:50:9
    a8f4:    40 21             		r0 = 0x1			  ## boot_mode.c:50:9
    a8f6:    80 00             		rts
                               	}			  ## boot_mode.c:58:1
    a8f8:    41 e0 af 68       	r1 = 0x68af <wtgv2_silk_NLSF2A+0x338 : 68ae >			  ## boot_mode.c:58:1
    a8fc:    01 e8 07 00       	if (r0 == r1) goto 0xe <check_key_type+0x22 : a90e >			  ## boot_mode.c:58:1
    a900:    41 e0 7c 6b       	r1 = 0x6b7c <wtgv2_silk_decode_parameters+0xBA : 6b7c >
    a904:    90 e8 00 11       	if (r0 != r1) {
    a908:    40 20             		r0 = 0x0
                               	} else {
    a90a:    40 25             		r0 = 0x5
                               	}
    a90c:    80 00             	rts			  ## boot_mode.c:58:1
    a90e:    40 24             	r0 = 0x4
    a910:    80 00             	rts			  ## boot_mode.c:58:1


set_timer3_captrue_dp_disable:
    a912:    10 04             	[--sp] = rets			  ## clock.c:334:0
    a914:    c1 ff 00 07 fd 00 	r1 = 0xfd0700 <RAM_LIMIT_H+0xE30700 : fd0700 >			  ## clock.c:336:20
    a91a:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## clock.c:336:20
    a91e:    b0 e8 00 40       	if (r0 != 0x0) {			  ## clock.c:336:20
    a922:    e0 e0 b2 1c       		r0 = r1 + 0x5900			  ## clock.c:338:9
    a926:    c0 ef 10 00       		[r0+0x0] &= 0xFFFFFFEF
                               	}			  ## clock.c:338:9
    a92a:    80 ff fa 9b ff ff 	call -0x6406 <local_irq_disable : 452a >			  ## irq.c:120:5
    a930:    64 e0 00 06       	r0 = cnum			  ## hwi.h:185:5
    a934:    00 ab             	r0 = r0 << 0xb			  ## irq.c:121:41
    a936:    c1 ff 00 e1 ff 00 	r1 = 0xffe100 <RAM_LIMIT_H+0xE5E100 : ffe100 >			  ## irq.c:121:61
    a93c:    10 18             	r0 += r1			  ## irq.c:121:61
    a93e:    c0 ef 80 05       	[r0+0x0] &= 0xEFFFFFFF			  ## irq.c:122:24
    a942:    80 ff 12 9c ff ff 	call -0x63ee <local_irq_enable : 455a >			  ## irq.c:123:5
    a948:    00 04             	pc = [sp++]			  ## clock.c:341:1


wdt_clr:
    a94a:    c0 ff 9d 15 8c 04 	r0 = 0x48c159d <RAM_LIMIT_H+0x472159C : 48c159c >			  ## wdt.c:11:0
    a950:    c1 ff 00 a8 f2 00 	r1 = 0xf2a800 <RAM_LIMIT_H+0xD8A800 : f2a800 >			  ## wdt.c:12:18
    a956:    e0 f0 22 03       	r0 = r0 + 0x22222222  #			  ## wdt.c:13:18
    a95a:    90 61             		 [r1+0x4] = r0			  ## wdt.c:12:18
    a95c:    90 61             	[r1+0x4] = r0			  ## wdt.c:13:18
    a95e:    00 ef 80 1b       	[r1+0x0] |= 0x10000			  ## wdt.c:14:18
    a962:    80 00             	rts			  ## wdt.c:15:1


uart_set_dma_dir:
    a964:    75 04             	[--sp] = {rets, r5, r4}			  ## uart_upgrade.c:23:0
    a966:    00 4b             	if (r0 == 0) goto 0x16 <uart_set_dma_dir+0x1A : a97e >			  ## uart_upgrade.c:23:0
    a968:    10 2f             	r0 = -0x11			  ## uart_upgrade.c:23:0
    a96a:    c1 ff 04 20 fd 00 	r1 = 0xfd2004 <RAM_LIMIT_H+0xE32004 : fd2004 >			  ## uart_upgrade.c:23:0
    a970:    42 20             	r2 = 0x0			  ## uart_upgrade.c:23:0
    a972:    4b 31             	r3 = 0x31			  ## uart_upgrade.c:23:0
    a974:    44 21             	r4 = 0x1			  ## uart_upgrade.c:23:0
    a976:    c5 ff 08 57 fd 00 	r5 = 0xfd5708 <RAM_LIMIT_H+0xE35708 : fd5708 >			  ## uart_upgrade.c:23:0
    a97c:    04 8a             	goto 0x14 <uart_set_dma_dir+0x2E : a992 >			  ## uart_upgrade.c:23:0
    a97e:    10 3e             	r0 = -0x2			  ## uart_upgrade.c:23:0
    a980:    c1 ff 08 57 fd 00 	r1 = 0xfd5708 <RAM_LIMIT_H+0xE35708 : fd5708 >			  ## uart_upgrade.c:23:0
    a986:    62 3f             	r2 = 0x9f			  ## uart_upgrade.c:23:0
    a988:    43 20             	r3 = 0x0			  ## uart_upgrade.c:23:0
    a98a:    44 30             	r4 = 0x10			  ## uart_upgrade.c:23:0
    a98c:    c5 ff 04 20 fd 00 	r5 = 0xfd2004 <RAM_LIMIT_H+0xE32004 : fd2004 >			  ## uart_upgrade.c:23:0
    a992:    64 e8 00 54       	[r5+0x0] |= r4			  ## uart_upgrade.c:23:0
    a996:    c4 ff c0 58 fd 00 	r4 = 0xfd58c0 <RAM_LIMIT_H+0xE358C0 : fd58c0 >			  ## uart_upgrade.c:23:0
    a99c:    d3 ec 41 3d       	[r4+0x3d0] = r3			  ## uart_upgrade.c:23:0
    a9a0:    c2 60             	[r4+0x0] = r2			  ## uart_upgrade.c:23:0
    a9a2:    64 e8 02 10       	[r1+0x0] &= r0			  ## uart_upgrade.c:23:0
    a9a6:    55 04             	{pc, r5, r4} = [sp++]			  ## uart_upgrade.c:41:1


uart_rx_data:
    a9a8:    75 04             	[--sp] = {rets, r5, r4}			  ## uart_upgrade.c:61:0
    a9aa:    14 16             	r4 = r1			  ## uart_upgrade.c:61:0
    a9ac:    05 16             	r5 = r0			  ## uart_upgrade.c:61:0
    a9ae:    61 8d             	call -0x66 <wdt_clr : a94a >			  ## uart_upgrade.c:62:5
    a9b0:    40 21             	r0 = 0x1			  ## uart_upgrade.c:63:5
    a9b2:    61 98             	call -0x50 <uart_set_dma_dir : a964 >			  ## uart_upgrade.c:63:5
    a9b4:    c0 ff 00 20 fd 00 	r0 = 0xfd2000 <RAM_LIMIT_H+0xE32000 : fd2000 >			  ## uart_upgrade.c:63:5
    a9ba:    51 dd             	r1 = r5 + r4  #			  ## uart_upgrade.c:66:33
    a9bc:    85 67             		 [r0+0x1c] = r5			  ## uart_upgrade.c:65:18
    a9be:    c1 23             	r1 += 0x3			  ## uart_upgrade.c:66:40
    a9c0:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## uart_upgrade.c:66:49
    a9c4:    81 68             	[r0+0x20] = r1			  ## uart_upgrade.c:66:18
    a9c6:    84 69             	[r0+0x24] = r4			  ## uart_upgrade.c:68:17
    a9c8:    20 00             	csync			  ## uart_upgrade.c:69:5
    a9ca:    01 60             	r1 = [r0+0x0] 			  ## uart_upgrade.c:73:19
    a9cc:    51 e8 fd 71       	if ((r1 & 0x4000) == 0) goto -0x6 <uart_rx_data+0x22 : a9ca >			  ## uart_upgrade.c:73:13
    a9d0:    00 ef a0 0d       	[r0+0x0] |= 0x1400			  ## uart_upgrade.c:77:16
    a9d4:    55 04             	{pc, r5, r4} = [sp++]			  ## uart_upgrade.c:79:1


chip_crc16:
    a9d6:    c2 ff 00 35 fd 00 	r2 = 0xfd3500 <RAM_LIMIT_H+0xE33500 : fd3500 >			  ## crc.c:3:0
    a9dc:    41 ea 00 20       	[r2+0x4] = 0x0			  ## crc.c:5:17
    a9e0:    04 83             	goto 0x6 <chip_crc16+0x12 : a9e8 >			  ## crc.c:5:17
    a9e2:    03 07             	r3 = b[r0++=0x1] (u)			  ## crc.c:8:24
    a9e4:    a3 60             	[r2+0x0] = r3			  ## crc.c:8:22
    a9e6:    f9 3f             	r1 += -0x1			  ## crc.c:7:15
    a9e8:    f1 5c             	if (r1 != 0) goto -0x8 <chip_crc16+0xC : a9e2 >
    a9ea:    20 00             	csync			  ## crc.c:10:5
    a9ec:    20 61             	r0 = [r2+0x4] 			  ## crc.c:12:20
    a9ee:    80 17             	r0 = r0.l (u)			  ## crc.c:12:5
    a9f0:    80 00             	rts			  ## crc.c:12:5


uart_cmd_verify:
    a9f2:    74 04             	[--sp] = {rets, r4}			  ## uart_upgrade.c:114:0
    a9f4:    c0 ff 40 13 18 00 	r0 = 0x181340 <ut_cmd : 181340 >			  ## uart_upgrade.c:114:0
    a9fa:    50 ee 00 11       	r1 = b[r0+0x10] (u)			  ## uart_upgrade.c:115:18
    a9fe:    0c 4f             	r4 = b[r0+0xf] (u)			  ## uart_upgrade.c:115:18
    aa00:    a4 e1 20 14       	r4 <= insert(r1, p:0x8, l:0x8)			  ## uart_upgrade.c:115:18
    aa04:    34 e8 00 40       	if (r4 == 0x0) {			  ## uart_upgrade.c:115:18
    aa08:    40 20             		r0 = 0x0			  ## uart_upgrade.c:120:1
    aa0a:    54 04             		{pc, r4} = [sp++]
                               	}			  ## uart_upgrade.c:120:1
    aa0c:    c0 25             	r0 += 0x5			  ## uart_upgrade.c:116:30
    aa0e:    41 2a             	r1 = 0xa			  ## uart_upgrade.c:116:30
    aa10:    71 82             	call -0x3c <chip_crc16 : a9d6 >			  ## uart_upgrade.c:116:30
    aa12:    01 16             	r1 = r0			  ## uart_upgrade.c:116:30
    aa14:    40 21             	r0 = 0x1			  ## uart_upgrade.c:116:27
    aa16:    94 e8 00 01       	if (r4 != r1) {			  ## uart_upgrade.c:116:27
    aa1a:    40 20             		r0 = 0x0
                               	}			  ## uart_upgrade.c:116:27
    aa1c:    54 04             	{pc, r4} = [sp++]			  ## uart_upgrade.c:115:9


CrcDecode:
    aa1e:    77 04             	[--sp] = {rets, r7-r4}			  ## crc.c:28:0
    aa20:    c3 ff ff ff 00 00 	r3 = 0xffff <.GJTIE291_0_0_+0x734 : fffe >			  ## crc.c:36:17
    aa26:    c2 ff 00 35 fd 00 	r2 = 0xfd3500 <RAM_LIMIT_H+0xE33500 : fd3500 >
    aa2c:    a3 61             	[r2+0x4] = r3			  ## crc.c:36:17
    aa2e:    7b 3f             	r3 = 0xff			  ## crc.c:38:18
    aa30:    a3 60             	[r2+0x0] = r3			  ## crc.c:38:18
    aa32:    a3 60             	[r2+0x0] = r3			  ## crc.c:39:18
    aa34:    44 20             	r4 = 0x0			  ## crc.c:39:18
    aa36:    c3 ff 19 f6 01 00 	r3 = 0x1f619 <sin_win_tab2+0x224 : 1f618 >			  ## crc.c:39:18
    aa3c:    04 8f             	goto 0x1e <CrcDecode+0x3E : aa5c >			  ## crc.c:39:18
    aa3e:    46 17             	r6 = r4.b0 (u)			  ## crc.c:43:24
    aa40:    d8 ee 60 53       	r5 = b[r6+r3] (u)			  ## crc.c:43:24
    aa44:    a5 60             	[r2+0x0] = r5			  ## crc.c:43:22
    aa46:    20 00             	csync			  ## crc.c:49:9
    aa48:    0d 40             	r5 = b[r0+0x0] (u)			  ## crc.c:50:24
    aa4a:    27 61             	r7 = [r2+0x4] 			  ## crc.c:50:51
    aa4c:    7d 19             	r5 ^= r7			  ## crc.c:50:37
    aa4e:    85 07             	b[r0++=0x1] = r5			  ## crc.c:50:22
    aa50:    4d 81             	r5 = r4 + 0x1			  ## crc.c:45:14
    aa52:    44 20             	r4 = 0x0			  ## crc.c:45:13
    aa54:    b6 ec 0e 00       	if (r6 <= 0xe) {			  ## crc.c:45:13
    aa58:    54 16             		r4 = r5
                               	}			  ## crc.c:45:13
    aa5a:    f9 3f             	r1 += -0x1			  ## crc.c:42:15
    aa5c:    95 17             	r5 = r1.l (u)			  ## crc.c:42:5
    aa5e:    f5 4f             	if (r5 != 0) goto -0x22 <CrcDecode+0x20 : aa3e >			  ## crc.c:42:5
    aa60:    57 04             	{pc, r7-r4} = [sp++]			  ## crc.c:56:1


uart_recv_loader:
    aa62:    e2 9e             	sp += -0x8			  ## uart_upgrade.c:143:0
    aa64:    40 25             	r0 = 0x5			  ## uart_upgrade.c:146:5
    aa66:    44 25             	r4 = 0x5			  ## uart_upgrade.c:146:5
    aa68:    bf ea d6 fc       	call -0x654 <mdelay : a418 >			  ## uart_upgrade.c:146:5
    aa6c:    c6 ff e0 eb 01 00 	r6 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## uart_upgrade.c:146:5
    aa72:    50 ee 68 02       	r0 = b[r6+0x28] (u)			  ## uart_upgrade.c:57:5
    aa76:    61 69             	r1 = [r6+0x24] 			  ## uart_upgrade.c:57:5
    aa78:    de e9 04 00       	b[sp+4] = r0			  ## uart_upgrade.c:57:5
    aa7c:    81 20             	[sp] = r1			  ## uart_upgrade.c:57:5
    aa7e:    40 20             	r0 = 0x0			  ## uart_upgrade.c:45:5
    aa80:    bf ea 70 ff       	call -0x120 <uart_set_dma_dir : a964 >			  ## uart_upgrade.c:45:5
    aa84:    88 80             	r0 = sp + 0			  ## uart_upgrade.c:45:5
    aa86:    c5 ff 00 20 fd 00 	r5 = 0xfd2000 <RAM_LIMIT_H+0xE32000 : fd2000 >			  ## uart_upgrade.c:45:5
    aa8c:    d0 65             	[r5+0x14] = r0			  ## uart_upgrade.c:47:17
    aa8e:    d4 66             	[r5+0x18] = r4			  ## uart_upgrade.c:48:17
    aa90:    20 00             	csync			  ## uart_upgrade.c:49:5
    aa92:    50 60             	r0 = [r5+0x0] 			  ## uart_upgrade.c:50:19
    aa94:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <uart_recv_loader+0x30 : aa92 >			  ## uart_upgrade.c:50:5
    aa98:    00 ef 00 5d       	[r5+0x0] |= 0x2000			  ## uart_upgrade.c:52:16
    aa9c:    40 22             	r0 = 0x2			  ## uart_upgrade.c:149:5
    aa9e:    bf ea bb fc       	call -0x68a <mdelay : a418 >			  ## uart_upgrade.c:149:5
    aaa2:    c4 ff 40 13 18 00 	r4 = 0x181340 <ut_cmd : 181340 >			  ## uart_upgrade.c:149:5
    aaa8:    50 ee 42 01       	r0 = b[r4+0x12] (u)			  ## uart_upgrade.c:151:16
    aaac:    30 e8 00 40       	if (r0 == 0x0) {			  ## uart_upgrade.c:151:16
    aab0:    40 2a             		r0 = 0xa			  ## uart_upgrade.c:151:16
    aab2:    52 ee 42 01       		b[r4+0x12] = r0
                               	}			  ## uart_upgrade.c:152:21
    aab6:    41 e0 10 27       	r1 = 0x2710 <WOLAAnalysisFilter_Float_M256_m4_r1+0xF0C : 2710 >			  ## uart_upgrade.c:155:43
    aaba:    f0 e1 00 71       	r7 = r0 * r1			  ## uart_upgrade.c:155:43
    aabe:    00 e1 29 60       	r0 = r6 + 0x29			  ## uart_upgrade.c:155:19
    aac2:    bf ea 35 fe       	call -0x396 <clk_get : a730 >			  ## uart_upgrade.c:155:19
    aac6:    f4 e1 00 07       	r0 = r0 / r7 (u)			  ## uart_upgrade.c:155:28
    aaca:    80 a2             	r0 = r0 >> 0x2			  ## uart_upgrade.c:155:53
    aacc:    f8 3f             	r0 += -0x1			  ## uart_upgrade.c:155:57
    aace:    d0 62             	[r5+0x8] = r0			  ## uart_upgrade.c:155:16
    aad0:    bf ea 3b ff       	call -0x18a <wdt_clr : a94a >			  ## uart_upgrade.c:156:5
    aad4:    48 48             	r0 = b[r4+0x8] (u)			  ## uart_upgrade.c:157:25
    aad6:    4a 47             	r2 = b[r4+0x7] (u)			  ## uart_upgrade.c:157:25
    aad8:    a2 f1 20 04       	r2 <= insert(r0, p:0x8, l:0x8)  #			  ## uart_upgrade.c:157:25
    aadc:    48 45             		 r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:157:25
    aade:    50 ee 46 80       	r8 = b[r4+0x6] (u)			  ## uart_upgrade.c:157:25
    aae2:    a0 f1 20 84       	r0 <= insert(r8, p:0x8, l:0x8)  #			  ## uart_upgrade.c:157:25
    aae6:    4e 4c             		 r6 = b[r4+0xc] (u)			  ## uart_upgrade.c:157:38
    aae8:    a0 f1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)  #			  ## uart_upgrade.c:157:25
    aaec:    4f 4b             		 r7 = b[r4+0xb] (u)			  ## uart_upgrade.c:157:38
    aaee:    a7 f1 20 64       	r7 <= insert(r6, p:0x8, l:0x8)  #			  ## uart_upgrade.c:157:38
    aaf2:    4b 4a             		 r3 = b[r4+0xa] (u)			  ## uart_upgrade.c:157:38
    aaf4:    49 49             	r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:157:38
    aaf6:    a1 e1 20 34       	r1 <= insert(r3, p:0x8, l:0x8)			  ## uart_upgrade.c:157:38
    aafa:    a1 e1 40 78       	r1 <= insert(r7, p:0x10, l:0x10)			  ## uart_upgrade.c:157:38
    aafe:    bf ea 53 ff       	call -0x15a <uart_rx_data : a9a8 >			  ## uart_upgrade.c:157:5
    ab02:    40 ea 00 50       	[r5+0x0] = 0x0			  ## uart_upgrade.c:159:16
    ab06:    49 48             	r1 = b[r4+0x8] (u)			  ## uart_upgrade.c:161:57
    ab08:    4a 47             	r2 = b[r4+0x7] (u)			  ## uart_upgrade.c:161:57
    ab0a:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:57
    ab0e:    4b 46             		 r3 = b[r4+0x6] (u)			  ## uart_upgrade.c:161:57
    ab10:    48 45             	r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:161:57
    ab12:    a0 f1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:57
    ab16:    4b 4b             		 r3 = b[r4+0xb] (u)			  ## uart_upgrade.c:161:70
    ab18:    a0 f1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)  #			  ## uart_upgrade.c:161:57
    ab1c:    4a 4c             		 r2 = b[r4+0xc] (u)			  ## uart_upgrade.c:161:70
    ab1e:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:70
    ab22:    4d 4a             		 r5 = b[r4+0xa] (u)			  ## uart_upgrade.c:161:70
    ab24:    49 49             	r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:161:70
    ab26:    a1 f1 20 54       	r1 <= insert(r5, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:70
    ab2a:    4e 4e             		 r6 = b[r4+0xe] (u)			  ## uart_upgrade.c:161:16
    ab2c:    a1 f1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)  #			  ## uart_upgrade.c:161:70
    ab30:    4f 4d             		 r7 = b[r4+0xd] (u)			  ## uart_upgrade.c:161:16
    ab32:    bf ea 50 ff       	call -0x160 <chip_crc16 : a9d6 >			  ## uart_upgrade.c:161:31
    ab36:    a7 e1 20 64       	r7 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:161:16
    ab3a:    80 e8 20 70       	if (r7 != r0) goto 0x40 <uart_recv_loader+0x11C : ab7e >			  ## uart_upgrade.c:161:16
    ab3e:    50 ee 41 01       	r0 = b[r4+0x11] (u)			  ## uart_upgrade.c:173:16
    ab42:    50 e8 10 08       	if ((r0 & 0x2) == 0) goto 0x20 <uart_recv_loader+0x104 : ab66 >			  ## uart_upgrade.c:173:16
    ab46:    4a 48             	r2 = b[r4+0x8] (u)			  ## uart_upgrade.c:174:34
    ab48:    4b 47             	r3 = b[r4+0x7] (u)			  ## uart_upgrade.c:174:34
    ab4a:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## uart_upgrade.c:174:34
    ab4e:    4d 46             		 r5 = b[r4+0x6] (u)			  ## uart_upgrade.c:174:34
    ab50:    48 45             	r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:174:34
    ab52:    a0 f1 20 54       	r0 <= insert(r5, p:0x8, l:0x8)  #			  ## uart_upgrade.c:174:34
    ab56:    4e 4a             		 r6 = b[r4+0xa] (u)			  ## uart_upgrade.c:174:9
    ab58:    a0 f1 40 38       	r0 <= insert(r3, p:0x10, l:0x10)  #			  ## uart_upgrade.c:174:34
    ab5c:    49 49             		 r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:174:9
    ab5e:    a1 e1 20 64       	r1 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:174:9
    ab62:    bf ea 5c ff       	call -0x148 <CrcDecode : aa1e >			  ## uart_upgrade.c:174:9
    ab66:    48 48             	r0 = b[r4+0x8] (u)			  ## uart_upgrade.c:177:30
    ab68:    49 47             	r1 = b[r4+0x7] (u)			  ## uart_upgrade.c:177:30
    ab6a:    a1 f1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)  #			  ## uart_upgrade.c:177:30
    ab6e:    4a 46             		 r2 = b[r4+0x6] (u)			  ## uart_upgrade.c:177:30
    ab70:    40 d6             	r0 = r4  #			  ## uart_upgrade.c:177:5
    ab72:    4b 45             		 r3 = b[r4+0x5] (u)			  ## uart_upgrade.c:177:30
    ab74:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## uart_upgrade.c:177:30
    ab78:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## uart_upgrade.c:177:30
    ab7c:    c3 00             	call r3			  ## uart_upgrade.c:177:5
    ab7e:    80 ff 82 99 ff ff 	call -0x667e <chip_reset : 4506 >			  ## uart_upgrade.c:180:5


uart_upgrade_init:
    ab84:    76 04             	[--sp] = {rets, r6-r4}			  ## uart_upgrade.c:207:0
    ab86:    c1 ff 08 57 fd 00 	r1 = 0xfd5708 <RAM_LIMIT_H+0xE35708 : fd5708 >			  ## uart_upgrade.c:207:0
    ab8c:    05 ef 01 10       	[r1+0x14] |= 0x1			  ## uart_upgrade.c:210:43
    ab90:    02 ef 01 10       	[r1+0x8] |= 0x1			  ## uart_upgrade.c:211:43
    ab94:    c3 ef 01 10       	[r1+0xc] &= 0xFFFFFFFE			  ## uart_upgrade.c:212:43
    ab98:    00 ef 01 10       	[r1+0x0] |= 0x1			  ## uart_upgrade.c:213:43
    ab9c:    01 e1 88 15       	r1 = r1 + 0x588			  ## uart_upgrade.c:214:26
    aba0:    40 ea 31 10       	[r1+0x0] = 0x31			  ## uart_upgrade.c:214:26
    aba4:    c1 ff 20 00 fd 00 	r1 = 0xfd0020 <RAM_LIMIT_H+0xE30020 : fd0020 >			  ## uart_upgrade.c:214:26
    abaa:    c0 ef 40 1e       	[r1+0x0] &= 0xFFFFF3FF			  ## uart_upgrade.c:217:24
    abae:    00 ef 80 1e       	[r1+0x0] |= 0x400			  ## uart_upgrade.c:218:24
    abb2:    16 e1 e0 1f       	r6 = r1 + 0x1fe0			  ## uart_upgrade.c:218:24
    abb6:    40 ea 50 6d       	[r6+0x0] = 0x3400			  ## uart_upgrade.c:220:16
    abba:    05 16             	r5 = r0			  ## uart_upgrade.c:220:16
    abbc:    c4 ff 09 ec 01 00 	r4 = 0x1ec09 <ack_cmd+0x4 : 1ec08 >
    abc2:    40 16             	r0 = r4			  ## uart_upgrade.c:222:19
    abc4:    bf ea b4 fd       	call -0x498 <clk_get : a730 >			  ## uart_upgrade.c:222:19
    abc8:    60 e0 16 1c       	r1 = 0x9600			  ## uart_upgrade.c:222:36
    abcc:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:222:36
    abd0:    f8 3f             	r0 += -0x1			  ## uart_upgrade.c:222:40
    abd2:    e0 62             	[r6+0x8] = r0			  ## uart_upgrade.c:222:16
    abd4:    40 ea 43 60       	[r6+0x0] = 0x43			  ## uart_upgrade.c:224:16
    abd8:    00 ef 50 6d       	[r6+0x0] |= 0x3400			  ## uart_upgrade.c:225:16
    abdc:    15 41             	if (r5 == 0) goto 0x42 <uart_upgrade_init+0x9C : ac20 >			  ## uart_upgrade.c:225:16
    abde:    c1 ff 28 c8 00 00 	r1 = 0xc828 <uart_isr : c828 >			  ## uart_upgrade.c:234:9
    abe4:    40 2c             	r0 = 0xc			  ## uart_upgrade.c:234:9
    abe6:    42 23             	r2 = 0x3			  ## uart_upgrade.c:234:9
    abe8:    bf ea 5d fb       	call -0x946 <HWI_Install : a2a6 >			  ## uart_upgrade.c:234:9
    abec:    40 16             	r0 = r4			  ## uart_upgrade.c:236:28
    abee:    bf ea 9f fd       	call -0x4c2 <clk_get : a730 >			  ## uart_upgrade.c:236:28
    abf2:    41 e0 e8 03       	r1 = 0x3e8 <ROM_RAM_SIZE+0x1E8 : 3e8 >			  ## uart_upgrade.c:236:37
    abf6:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:236:37
    abfa:    e0 e1 05 00       	r0 = r0 * 0x5			  ## uart_upgrade.c:236:25
    abfe:    e0 64             	[r6+0x10] = r0			  ## uart_upgrade.c:236:21
    ac00:    40 21             	r0 = 0x1			  ## uart_upgrade.c:238:9
    ac02:    bf ea af fe       	call -0x2a2 <uart_set_dma_dir : a964 >			  ## uart_upgrade.c:238:9
    ac06:    00 ef 20 60       	[r6+0x0] |= 0x20			  ## uart_upgrade.c:240:20
    ac0a:    c0 ff 80 13 18 00 	r0 = 0x181380 <uart_dma_buffer : 181380 >			  ## uart_upgrade.c:110:18
    ac10:    e0 67             	[r6+0x1c] = r0			  ## uart_upgrade.c:109:18
    ac12:    d0 23             	r0 += 0x43			  ## uart_upgrade.c:110:18
    ac14:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## uart_upgrade.c:110:18
    ac18:    e0 68             	[r6+0x20] = r0			  ## uart_upgrade.c:110:18
    ac1a:    49 ea 40 60       	[r6+0x24] = 0x40			  ## uart_upgrade.c:111:17
    ac1e:    56 04             	{pc, r6-r4} = [sp++]			  ## uart_upgrade.c:269:1
    ac20:    c0 ff 84 c2 f2 00 	r0 = 0xf2c284 <RAM_LIMIT_H+0xD8C284 : f2c284 >			  ## uart_upgrade.c:251:21
    ac26:    00 ef 04 00       	[r0+0x0] |= 0x4			  ## uart_upgrade.c:251:21
    ac2a:    c0 ff 40 13 18 00 	r0 = 0x181340 <ut_cmd : 181340 >			  ## uart_upgrade.c:255:5
    ac30:    41 35             	r1 = 0x15			  ## uart_upgrade.c:255:5
    ac32:    bf ea b9 fe       	call -0x28e <uart_rx_data : a9a8 >			  ## uart_upgrade.c:255:5
    ac36:    bf ea dc fe       	call -0x248 <uart_cmd_verify : a9f2 >			  ## uart_upgrade.c:257:9
    ac3a:    80 43             	if (r0 != 0) goto 0x6 <uart_upgrade_init+0xBE : ac42 >			  ## uart_upgrade.c:257:9
    ac3c:    80 ff c4 98 ff ff 	call -0x673c <chip_reset : 4506 >			  ## uart_upgrade.c:268:5
    ac42:    bf ea 0e ff       	call -0x1e4 <uart_recv_loader : aa62 >			  ## uart_upgrade.c:266:5


check_usb_sof:
    ac46:    7f 04             	[--sp] = {rets, r15-r4}			  ## clock.c:344:0
    ac48:    c6 ff c0 13 18 00 	r6 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## clock.c:344:0
    ac4e:    47 20             	r7 = 0x0			  ## clock.c:344:0
    ac50:    c0 14             	r8 = 0			  ## clock.c:344:0
    ac52:    c1 14             	r9 = 0			  ## clock.c:344:0
    ac54:    ca ff 36 c6 00 00 	r10 = 0xc636 <tmr3_isr : c636 >			  ## clock.c:344:0
    ac5a:    c4 ff 00 07 fd 00 	r4 = 0xfd0700 <RAM_LIMIT_H+0xE30700 : fd0700 >			  ## clock.c:344:0
    ac60:    4b e0 12 04       	r11 = 0x412 <WOLASynthesisFilter_Float_M64_m4_r1+0xE : 412 >			  ## clock.c:344:0
    ac64:    cc ff f0 eb 01 00 	r12 = 0x1ebf0 <silk_LTPscale_iCDF+0x3 : 1ebf0 >			  ## clock.c:344:0
    ac6a:    4d e0 a0 0f       	r13 = 0xfa0 <usb_code_size+0x4DC : fa0 >			  ## clock.c:344:0
    ac6e:    35 e1 00 4f       	r5 = r4 + -0x100			  ## clock.c:344:0
    ac72:    4e e0 11 40       	r14 = 0x4011 <STFT_Win_FixHalf_M128_D80+0xC : 4010 >			  ## clock.c:344:0
    ac76:    0f 16             	r15 = r0			  ## clock.c:344:0
    ac78:    bf ea 67 fe       	call -0x332 <wdt_clr : a94a >			  ## clock.c:348:9
    ac7c:    e7 69             	[r6+0x24] = r7			  ## clock.c:353:25
    ac7e:    a1 d6             	r1 = r10  #			  ## clock.c:365:9
    ac80:    e7 6d             		 [r6+0x34] = r7			  ## clock.c:354:22
    ac82:    50 ec 69 82       	d[r6+0x28] = r9_r8			  ## clock.c:355:18
    ac86:    e7 6c             	[r6+0x30] = r7			  ## clock.c:357:19
    ac88:    40 27             	r0 = 0x7			  ## clock.c:365:9
    ac8a:    42 20             	r2 = 0x0			  ## clock.c:365:9
    ac8c:    bf ea 0b fb       	call -0x9ea <HWI_Install : a2a6 >			  ## clock.c:365:9
    ac90:    40 21             	r0 = 0x1			  ## clock.c:366:9
    ac92:    bf ea 03 fe       	call -0x3fa <set_timer3_captrue_dp : a89c >			  ## clock.c:366:9
    ac96:    c7 62             	[r4+0x8] = r7			  ## clock.c:368:24
    ac98:    c7 61             	[r4+0x4] = r7			  ## clock.c:369:24
    ac9a:    d0 ec 41 b0       	[r4+0x0] = r11			  ## clock.c:370:24
    ac9e:    c0 16             	r0 = r12			  ## clock.c:372:26
    aca0:    bf ea 46 fd       	call -0x574 <clk_get : a730 >			  ## clock.c:372:26
    aca4:    f4 e1 00 0d       	r0 = r0 / r13 (u)			  ## clock.c:372:45
    aca8:    d0 62             	[r5+0x8] = r0			  ## clock.c:372:24
    acaa:    d7 61             	[r5+0x4] = r7			  ## clock.c:373:24
    acac:    d0 ec 51 e0       	[r5+0x0] = r14			  ## clock.c:374:24
    acb0:    40 e0 e8 03       	r0 = 0x3e8 <ROM_RAM_SIZE+0x1E8 : 3e8 >
    acb4:    81 17             	r1 = r0.l (u)			  ## clock.c:383:9
    acb6:    01 4a             	if (r1 == 0) goto 0x14 <check_usb_sof+0x86 : accc >			  ## clock.c:383:9
    acb8:    00 ef 80 5c       	[r5+0x0] |= 0x4000			  ## clock.c:384:28
    acbc:    f8 3f             	r0 += -0x1			  ## clock.c:383:23
    acbe:    51 60             	r1 = [r5+0x0] 			  ## clock.c:386:32
    acc0:    99 17             	r1 = r1.l (s)			  ## clock.c:386:47
    acc2:    81 fd f7 01       	ifs (r1 < 0x0) goto -0x12 <check_usb_sof+0x6E : acb4 >			  ## clock.c:386:47
    acc6:    61 6d             	r1 = [r6+0x34] 			  ## clock.c:387:21
    acc8:    71 5a             	if (r1 == 0) goto -0xc <check_usb_sof+0x78 : acbe >			  ## clock.c:387:21
    acca:    04 8d             	goto 0x1a <check_usb_sof+0xA0 : ace6 >			  ## clock.c:387:21
    accc:    40 21             	r0 = 0x1			  ## clock.c:396:9
    acce:    bf ea 20 fe       	call -0x3c0 <set_timer3_captrue_dp_disable : a912 >			  ## clock.c:396:9
    acd2:    70 28             	r0 = 0xc8			  ## clock.c:398:9
    acd4:    bf ea a0 fb       	call -0x8c0 <mdelay : a418 >			  ## clock.c:398:9
    acd8:    30 e1 ff ff       	r0 = r15 + -0x1			  ## clock.c:408:19
    acdc:    61 ff ff f0 ca ff 	if ((r15 & 0xFF) != 0) goto -0x6c <check_usb_sof+0x30 : ac76 >			  ## clock.c:408:19
    ace2:    44 20             	r4 = 0x0
    ace4:    04 83             	goto 0x6 <check_usb_sof+0xA6 : acec >
    ace6:    40 ea 80 5c       	[r5+0x0] = 0x4000			  ## clock.c:388:36
    acea:    44 21             	r4 = 0x1			  ## clock.c:388:36
    acec:    40 21             	r0 = 0x1			  ## clock.c:419:5
    acee:    bf ea 10 fe       	call -0x3e0 <set_timer3_captrue_dp_disable : a912 >			  ## clock.c:419:5
    acf2:    40 16             	r0 = r4			  ## clock.c:421:1
    acf4:    5f 04             	{pc, r15-r4} = [sp++]			  ## clock.c:421:1


spi_port_io_init:
    acf6:    77 04             	[--sp] = {rets, r7-r4}			  ## spi0.c:31:0
    acf8:    c1 ff 28 fc 19 00 	r1 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## spi0.c:19:29
    acfe:    98 42             	b[r1+0x2] = r0			  ## spi0.c:19:29
    ad00:    c1 ff 14 60 fd 00 	r1 = 0xfd6014 <RAM_LIMIT_H+0xE36014 : fd6014 >			  ## spi0.c:19:29
    ad06:    c0 ef 00 1d       	[r1+0x0] &= 0xFFFFDFFF			  ## spi0.c:21:20
    ad0a:    12 60             	r2 = [r1+0x0] 			  ## spi0.c:21:20
    ad0c:    43 e1 80 2c       	r3 = r2 | 0x4000			  ## spi0.c:26:24
    ad10:    ba 2e             	r2 &= 0xffffbfff			  ## spi0.c:23:24
    ad12:    b0 e8 00 00       	if (r0 != 0x0) {			  ## spi0.c:23:24
    ad16:    32 16             		r2 = r3
                               	}			  ## spi0.c:22:9
    ad18:    92 60             	[r1+0x0] = r2			  ## spi0.c:22:9
    ad1a:    c0 ef 00 1c       	[r1+0x0] &= 0xFFFF7FFF			  ## spi0.c:22:9
    ad1e:    00 4c             	if (r0 == 0) goto 0x18 <spi_port_io_init+0x42 : ad38 >			  ## spi0.c:22:9
    ad20:    10 37             	r0 = -0x9
    ad22:    41 28             	r1 = 0x8
    ad24:    c2 ff 14 55 fd 00 	r2 = 0xfd5514 <RAM_LIMIT_H+0xE35514 : fd5514 >
    ad2a:    33 e1 fc 2f       	r3 = r2 + -0x4
    ad2e:    15 2f             	r5 = -0x11
    ad30:    34 e1 f4 2f       	r4 = r2 + -0xc
    ad34:    46 30             	r6 = 0x10
    ad36:    04 8b             	goto 0x16 <spi_port_io_init+0x58 : ad4e >
    ad38:    10 3b             	r0 = -0x5
    ad3a:    41 24             	r1 = 0x4
    ad3c:    c2 ff 14 53 fd 00 	r2 = 0xfd5314 <RAM_LIMIT_H+0xE35314 : fd5314 >
    ad42:    33 e1 fc 2f       	r3 = r2 + -0x4
    ad46:    15 37             	r5 = -0x9
    ad48:    34 e1 f4 2f       	r4 = r2 + -0xc
    ad4c:    46 28             	r6 = 0x8
    ad4e:    37 e1 ec 2f       	r7 = r2 + -0x14
    ad52:    64 e8 00 76       	[r7+0x0] |= r6
    ad56:    64 e8 02 45       	[r4+0x0] &= r5
    ad5a:    64 e8 02 35       	[r3+0x0] &= r5
    ad5e:    64 e8 02 25       	[r2+0x0] &= r5
    ad62:    c5 ff 08 53 fd 00 	r5 = 0xfd5308 <RAM_LIMIT_H+0xE35308 : fd5308 >
    ad68:    c2 ef 01 50       	[r5+0x8] &= 0xFFFFFFFE
    ad6c:    c3 ef 01 50       	[r5+0xc] &= 0xFFFFFFFE
    ad70:    c0 ef 01 50       	[r5+0x0] &= 0xFFFFFFFE
    ad74:    02 ef 02 50       	[r5+0x8] |= 0x2
    ad78:    c3 ef 02 50       	[r5+0xc] &= 0xFFFFFFFD
    ad7c:    00 ef 02 50       	[r5+0x0] |= 0x2
    ad80:    64 e8 00 31       	[r3+0x0] |= r1
    ad84:    64 e8 02 20       	[r2+0x0] &= r0
    ad88:    64 e8 00 41       	[r4+0x0] |= r1
    ad8c:    02 ef 40 50       	[r5+0x8] |= 0x40
    ad90:    c3 ef 40 50       	[r5+0xc] &= 0xFFFFFFBF
    ad94:    00 ef 40 50       	[r5+0x0] |= 0x40
    ad98:    57 04             	{pc, r7-r4} = [sp++]			  ## spi0.c:88:1


spi_get_port:
    ad9a:    c0 ff 28 fc 19 00 	r0 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## spi0.c:12:0
    ada0:    08 42             	r0 = b[r0+0x2] (u)			  ## spi0.c:14:12
    ada2:    80 00             	rts			  ## spi0.c:14:5


SPI0_cs:
    ada4:    76 04             	[--sp] = {rets, r6-r4}			  ## spi0.c:151:0
    ada6:    01 16             	r1 = r0			  ## spi0.c:151:0
    ada8:    71 98             	call -0x10 <spi_get_port : ad9a >			  ## spi0.c:152:16
    adaa:    c2 ff 00 53 fd 00 	r2 = 0xfd5300 <RAM_LIMIT_H+0xE35300 : fd5300 >
    adb0:    00 4d             	if (r0 == 0) goto 0x1a <SPI0_cs+0x28 : adcc >
    adb2:    d2 ec 20 20       	r2 = [r2+0x200]
    adb6:    c6 ff 00 55 fd 00 	r6 = 0xfd5500 <RAM_LIMIT_H+0xE35500 : fd5500 >
    adbc:    40 e1 10 20       	r0 = r2 | 0x10			  ## spi0.c:163:42
    adc0:    74 e1 10 20       	r4 = r2 & 0xFFFFFFEF			  ## spi0.c:165:42
    adc4:    13 2f             	r3 = -0x11			  ## spi0.c:165:42
    adc6:    6d 88             	r5 = r6 + 0x8			  ## spi0.c:165:42
    adc8:    62 16             	r2 = r6			  ## spi0.c:165:42
    adca:    04 87             	goto 0xe <SPI0_cs+0x36 : adda >			  ## spi0.c:165:42
    adcc:    23 60             	r3 = [r2+0x0] 
    adce:    40 e1 08 30       	r0 = r3 | 0x8			  ## spi0.c:156:42
    add2:    74 e1 08 30       	r4 = r3 & 0xFFFFFFF7			  ## spi0.c:158:42
    add6:    13 37             	r3 = -0x9			  ## spi0.c:158:42
    add8:    2d 88             	r5 = r2 + 0x8			  ## spi0.c:158:42
    adda:    31 e8 00 00       	if (r1 == 0x0) {
    adde:    40 16             		r0 = r4
                               	}
    ade0:    a0 60             	[r2+0x0] = r0
    ade2:    64 e8 02 53       	[r5+0x0] &= r3
    ade6:    56 04             	{pc, r6-r4} = [sp++]			  ## spi0.c:169:1


spi0_wait_ok:
    ade8:    c0 ff 00 1c fd 00 	r0 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## spi0.c:217:0
    adee:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:218:23
    adf0:    51 e8 fd 79       	if ((r1 & 0x8000) == 0) goto -0x6 <spi0_wait_ok+0x6 : adee >			  ## spi0.c:218:5
    adf4:    00 ef 80 0c       	[r0+0x0] |= 0x4000			  ## spi0.c:220:18
    adf8:    80 00             	rts			  ## spi0.c:220:18


SPI0_WriteByte:
    adfa:    10 04             	[--sp] = rets			  ## spi0.c:240:0
    adfc:    c1 ff 00 1c fd 00 	r1 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## spi0.c:240:0
    ae02:    c0 ef 80 1d       	[r1+0x0] &= 0xFFFFEFFF			  ## spi0.c:241:18
    ae06:    90 62             	[r1+0x8] = r0			  ## spi0.c:242:18
    ae08:    71 8f             	call -0x22 <spi0_wait_ok : ade8 >			  ## spi0.c:243:5
    ae0a:    00 04             	pc = [sp++]			  ## spi0.c:244:1


SPI0_ReadByte:
    ae0c:    10 04             	[--sp] = rets			  ## spi0.c:260:0
    ae0e:    c2 ff 00 1c fd 00 	r2 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## spi0.c:260:0
    ae14:    00 ef 80 2d       	[r2+0x0] |= 0x1000			  ## spi0.c:262:18
    ae18:    40 2a             	r0 = 0xa			  ## spi0.c:263:5
    ae1a:    bf ea 6e fa       	call -0xb24 <udelay : a2fa >			  ## spi0.c:263:5
    ae1e:    42 ea ff 20       	[r2+0x8] = 0xFF			  ## spi0.c:264:18
    ae22:    71 82             	call -0x3c <spi0_wait_ok : ade8 >			  ## spi0.c:265:5
    ae24:    20 62             	r0 = [r2+0x8] 			  ## spi0.c:266:25
    ae26:    00 17             	r0 = r0.b0 (u)			  ## spi0.c:268:5
    ae28:    00 04             	pc = [sp++]			  ## spi0.c:268:5


sd_fopenbyindex:
    ae2a:    76 04             	[--sp] = {rets, r6-r4}			  ## sdfile.c:83:0
    ae2c:    14 d6             	r4 = r1  #			  ## sdfile.c:83:0
    ae2e:    06 24             		 r6 = [sp+16]			  ## sdfile.c:83:0
    ae30:    00 a5             	r0 = r0 << 0x5			  ## sdfile.c:84:69
    ae32:    8d 1c             	r5 = r0 + r3			  ## sdfile.c:84:63
    ae34:    4b 20             	r3 = 0x20			  ## sdfile.c:84:5
    ae36:    20 16             	r0 = r2			  ## sdfile.c:84:5
    ae38:    52 16             	r2 = r5			  ## sdfile.c:84:5
    ae3a:    c6 00             	call r6			  ## sdfile.c:84:5
    ae3c:    48 82             	r0 = r4 + 0x2			  ## sdfile.c:85:28
    ae3e:    41 3e             	r1 = 0x1e			  ## sdfile.c:85:16
    ae40:    bf ea c9 fd       	call -0x46e <chip_crc16 : a9d6 >			  ## sdfile.c:85:16
    ae44:    00 44             	if (r0 == 0) goto 0x8 <sd_fopenbyindex+0x24 : ae4e >			  ## sdfile.c:85:16
    ae46:    4a 60             	r2 = h[r4+0x0] (u)			  ## sdfile.c:86:23
    ae48:    41 21             	r1 = 0x1			  ## sdfile.c:86:23
    ae4a:    00 e8 01 20       	if (r2 == r0) goto 0x2 <sd_fopenbyindex+0x26 : ae50 >			  ## sdfile.c:86:23
    ae4e:    41 20             	r1 = 0x0
    ae50:    10 16             	r0 = r1			  ## sdfile.c:93:1
    ae52:    56 04             	{pc, r6-r4} = [sp++]			  ## sdfile.c:93:1


nor_flash_send_addr:
    ae54:    10 04             	[--sp] = rets			  ## norflash.c:110:0
    ae56:    02 16             	r2 = r0			  ## norflash.c:110:0
    ae58:    b0 e1 20 28       	r0 = uextra(r2, p:0x10, l:0x8)			  ## norflash.c:111:5
    ae5c:    61 8e             	call -0x64 <SPI0_WriteByte : adfa >			  ## norflash.c:111:5
    ae5e:    b0 e1 20 24       	r0 = uextra(r2, p:0x8, l:0x8)			  ## norflash.c:112:5
    ae62:    61 8b             	call -0x6a <SPI0_WriteByte : adfa >			  ## norflash.c:112:5
    ae64:    20 17             	r0 = r2.b0 (u)			  ## norflash.c:113:5
    ae66:    61 89             	call -0x6e <SPI0_WriteByte : adfa >			  ## norflash.c:113:5
    ae68:    00 04             	pc = [sp++]			  ## norflash.c:114:1


SPI0_DmaRead:
    ae6a:    74 04             	[--sp] = {rets, r4}			  ## spi0.c:286:0
    ae6c:    c4 ff 00 1c fd 00 	r4 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## spi0.c:286:0
    ae72:    00 ef 80 4d       	[r4+0x0] |= 0x1000			  ## spi0.c:287:18
    ae76:    12 16             	r2 = r1			  ## spi0.c:287:18
    ae78:    03 16             	r3 = r0
    ae7a:    40 2a             	r0 = 0xa			  ## spi0.c:288:5
    ae7c:    bf ea 3d fa       	call -0xb86 <udelay : a2fa >			  ## spi0.c:288:5
    ae80:    c0 ef 40 4e       	[r4+0x0] &= 0xFFFFF3FF			  ## spi0.c:289:18
    ae84:    c3 63             	[r4+0xc] = r3			  ## spi0.c:291:18
    ae86:    c2 64             	[r4+0x10] = r2			  ## spi0.c:292:18
    ae88:    51 8f             	call -0xa2 <spi0_wait_ok : ade8 >			  ## spi0.c:294:5
    ae8a:    54 04             	{pc, r4} = [sp++]			  ## spi0.c:296:1


nor_flash_read:
    ae8c:    76 04             	[--sp] = {rets, r6-r4}			  ## norflash.c:131:0
    ae8e:    24 16             	r4 = r2			  ## norflash.c:131:0
    ae90:    15 16             	r5 = r1			  ## norflash.c:131:0
    ae92:    06 16             	r6 = r0			  ## norflash.c:131:0
    ae94:    40 20             	r0 = 0x0			  ## norflash.c:132:5
    ae96:    41 86             	call -0xf4 <SPI0_cs : ada4 >			  ## norflash.c:132:5
    ae98:    40 23             	r0 = 0x3			  ## norflash.c:133:5
    ae9a:    51 8f             	call -0xa2 <SPI0_WriteByte : adfa >			  ## norflash.c:133:5
    ae9c:    50 16             	r0 = r5			  ## norflash.c:134:5
    ae9e:    61 9a             	call -0x4c <nor_flash_send_addr : ae54 >			  ## norflash.c:134:5
    aea0:    60 16             	r0 = r6			  ## norflash.c:136:5
    aea2:    41 16             	r1 = r4			  ## norflash.c:136:5
    aea4:    71 82             	call -0x3c <SPI0_DmaRead : ae6a >			  ## norflash.c:136:5
    aea6:    40 21             	r0 = 0x1			  ## norflash.c:138:5
    aea8:    bf ea 7c ff       	call -0x108 <SPI0_cs : ada4 >			  ## norflash.c:138:5
    aeac:    56 04             	{pc, r6-r4} = [sp++]			  ## norflash.c:139:1


get_flash_file_key:
    aeae:    77 04             	[--sp] = {rets, r7-r4}			  ## sdfile.c:27:0
    aeb0:    14 16             	r4 = r1			  ## sdfile.c:27:0
    aeb2:    46 20             	r6 = 0x0			  ## sdfile.c:27:0
    aeb4:    05 d6             	r5 = r0  #			  ## sdfile.c:27:0
    aeb6:    ce 60             		 h[r4+0x0] = r6			  ## sdfile.c:28:16
    aeb8:    50 ee 51 02       	r0 = b[r5+0x21] (u)			  ## sdfile.c:30:5
    aebc:    50 ee 50 72       	r7 = b[r5+0x20] (u)			  ## sdfile.c:30:5
    aec0:    a7 e1 20 04       	r7 <= insert(r0, p:0x8, l:0x8)			  ## sdfile.c:30:5
    aec4:    49 20             	r1 = 0x20			  ## sdfile.c:31:25
    aec6:    50 16             	r0 = r5			  ## sdfile.c:31:25
    aec8:    bf ea 85 fd       	call -0x4f6 <chip_crc16 : a9d6 >			  ## sdfile.c:31:25
    aecc:    80 e8 26 70       	if (r7 != r0) goto 0x4c <get_flash_file_key+0x6E : af1c >			  ## sdfile.c:31:25
    aed0:    80 14             	r1_r0 = 0
    aed2:    04 84             	goto 0x8 <get_flash_file_key+0x2E : aedc >
    aed4:    d8 ee 50 21       	r2 = b[r5+r1] (u)			  ## sdfile.c:38:24
    aed8:    20 18             	r0 += r2			  ## sdfile.c:38:21
    aeda:    c1 21             	r1 += 0x1			  ## sdfile.c:37:30
    aedc:    81 f8 fa 21       	if (r1 != 0x10) goto -0xc <get_flash_file_key+0x26 : aed4 >
    aee0:    01 17             	r1 = r0.b0 (u)			  ## sdfile.c:40:21
    aee2:    42 e0 aa ff       	r2 = -0x56 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFAA : ffffffffffffffaa >			  ## sdfile.c:42:20
    aee6:    b1 ec df 00       	if (r1 <= 0xdf) {
    aeea:    02 16             		r2 = r0
                               	}			  ## sdfile.c:42:20
    aeec:    53 35             	r3 = 0x55			  ## sdfile.c:40:13
    aeee:    31 e9 11 00       	if (r1 >= 0x11) {			  ## sdfile.c:40:13
    aef2:    23 16             		r3 = r2
                               	}			  ## sdfile.c:40:13
    aef4:    58 8f             	r0 = r5 + 0xf			  ## sdfile.c:40:13
    aef6:    59 90             	r1 = r5 + 0x10			  ## sdfile.c:35:30
    aef8:    42 20             	r2 = 0x0			  ## sdfile.c:35:30
    aefa:    33 17             	r3 = r3.b0 (u)			  ## sdfile.c:35:30
    aefc:    04 8c             	goto 0x18 <get_flash_file_key+0x68 : af16 >			  ## sdfile.c:35:30
    aefe:    d8 ee 10 52       	r5 = b[r1+r2] (u)			  ## sdfile.c:46:18
    af02:    0e 07             	r6 = b[r0++=-0x1] (u)			  ## sdfile.c:46:31
    af04:    6d 19             	r5 ^= r6			  ## sdfile.c:46:28
    af06:    55 17             	r5 = r5.b0 (u)			  ## sdfile.c:46:28
    af08:    95 e9 00 83       	if (r5 < r3) {			  ## sdfile.c:46:28
    af0c:    4d 60             		r5 = h[r4+0x0] (u)			  ## sdfile.c:47:28
    af0e:    94 e1 50 52       		r5 = r5 | (1 << r2)			  ## sdfile.c:47:28
    af12:    cd 60             		h[r4+0x0] = r5
                               	}			  ## sdfile.c:47:28
    af14:    c2 21             	r2 += 0x1			  ## sdfile.c:45:30
    af16:    82 f8 f2 21       	if (r2 != 0x10) goto -0x1c <get_flash_file_key+0x50 : aefe >
    af1a:    46 21             	r6 = 0x1
    af1c:    60 16             	r0 = r6			  ## sdfile.c:52:1
    af1e:    57 04             	{pc, r7-r4} = [sp++]			  ## sdfile.c:52:1


dec_isd_cfg_ini:
    af20:    79 04             	[--sp] = {rets, r9-r4}			  ## sdfile.c:57:0
    af22:    e2 90             	sp += -0x40			  ## sdfile.c:57:0
    af24:    26 16             	r6 = r2			  ## sdfile.c:57:0
    af26:    18 16             	r8 = r1			  ## sdfile.c:57:0
    af28:    09 16             	r9 = r0			  ## sdfile.c:57:0
    af2a:    4f 22             	r7 = 0x22			  ## sdfile.c:57:0
    af2c:    04 81             	goto 0x2 <dec_isd_cfg_ini+0x10 : af30 >			  ## sdfile.c:57:0
    af2e:    47 18             	r7 += r4			  ## sdfile.c:77:16
    af30:    d8 ee 60 47       	r4 = b[r6+r7] (u)			  ## sdfile.c:63:9
    af34:    04 5d             	if (r4 == 0) goto 0x3a <dec_isd_cfg_ini+0x50 : af70 >			  ## sdfile.c:63:9
    af36:    14 f8 1b fe       	if (r4 == 0xff) goto 0x36 <dec_isd_cfg_ini+0x50 : af70 >
    af3a:    e8 1d             	r0 = r6 + r7			  ## sdfile.c:68:29
    af3c:    09 81             	r1 = r0 + 0x1			  ## sdfile.c:68:29
    af3e:    8d 80             	r5 = sp + 0			  ## sdfile.c:68:29
    af40:    52 20             	r2 = 0x40			  ## sdfile.c:68:9
    af42:    50 16             	r0 = r5			  ## sdfile.c:68:9
    af44:    80 ff f2 91 ff ff 	call -0x6e0e <memmove : 413c >			  ## sdfile.c:68:9
    af4a:    50 16             	r0 = r5			  ## sdfile.c:69:24
    af4c:    80 ff b0 94 ff ff 	call -0x6b50 <strlen : 4402 >			  ## sdfile.c:69:24
    af52:    70 18             	r0 += r7			  ## sdfile.c:69:22
    af54:    0f 82             	r7 = r0 + 0x2			  ## sdfile.c:70:16
    af56:    50 16             	r0 = r5			  ## sdfile.c:72:13
    af58:    91 16             	r1 = r9			  ## sdfile.c:72:13
    af5a:    80 ff 94 93 ff ff 	call -0x6c6c <strcmp : 42f4 >			  ## sdfile.c:72:13
    af60:    f0 46             	if (r0 != 0) goto -0x34 <dec_isd_cfg_ini+0xE : af2e >			  ## sdfile.c:72:13
    af62:    e9 1d             	r1 = r6 + r7			  ## sdfile.c:73:31
    af64:    80 16             	r0 = r8			  ## sdfile.c:73:13
    af66:    42 16             	r2 = r4			  ## sdfile.c:73:13
    af68:    80 ff ce 91 ff ff 	call -0x6e32 <memmove : 413c >			  ## sdfile.c:73:13
    af6e:    04 81             	goto 0x2 <dec_isd_cfg_ini+0x52 : af72 >			  ## sdfile.c:73:13
    af70:    44 20             	r4 = 0x0
    af72:    40 16             	r0 = r4			  ## sdfile.c:80:1
    af74:    02 90             	sp += 0x40			  ## sdfile.c:80:1
    af76:    59 04             	{pc, r9-r4} = [sp++]			  ## sdfile.c:80:1


doe:
    af78:    78 04             	[--sp] = {rets, r8-r4}			  ## crc.c:116:0
    af7a:    b3 e8 00 40       	if (r3 != 0x0) {			  ## crc.c:116:0
    af7e:    b3 a2             		r3 = r3 >> 0x2			  ## crc.c:106:19
    af80:    38 19             		r0 ^= r3
                               	}			  ## crc.c:106:25
    af82:    fa 3f             	r2 += -0x1			  ## crc.c:110:5
    af84:    b4 e1 20 04       	r4 = uextra(r0, p:0x8, l:0x8)			  ## crc.c:108:14
    af88:    48 e0 ef 01       	r8 = 0x1ef <_MASK_MEM_SIZE+0x4A : 1ee >			  ## crc.c:108:14
    af8c:    05 16             	r5 = r0			  ## crc.c:108:14
    af8e:    04 98             	goto 0x30 <doe+0x48 : afc0 >			  ## crc.c:108:14
    af90:    45 17             	r5 = r4.b0 (u)			  ## crc.c:89:33
    af92:    d6 a7             	r6 = r5 >> 0x7			  ## crc.c:89:33
    af94:    b5 e1 84 51       	r5 = uextra(r5, p:0x3, l:0x1)			  ## crc.c:92:19
    af98:    6d 19             	r5 ^= r6			  ## crc.c:92:19
    af9a:    07 17             	r7 = r0.b0 (u)			  ## crc.c:91:16
    af9c:    b3 e1 04 72       	r3 = uextra(r7, p:0x4, l:0x1)			  ## crc.c:93:18
    afa0:    a7 e1 60 44       	r7 <= insert(r4, p:0x8, l:0x18)			  ## crc.c:91:16
    afa4:    f4 a7             	r4 = r7 >> 0x7			  ## crc.c:91:14
    afa6:    90 e1 42 48       	r4 = r4 & r8			  ## crc.c:92:19
    afaa:    a4 e1 04 52       	r4 <= insert(r5, p:0x4, l:0x1)			  ## crc.c:92:19
    afae:    6b 19             	r3 ^= r6			  ## crc.c:93:18
    afb0:    00 a1             	r0 = r0 << 0x1			  ## crc.c:91:24
    afb2:    70 e1 21 00       	r0 = r0 & 0xFFFFFFDE			  ## crc.c:93:18
    afb6:    60 19             	r0 |= r6			  ## crc.c:93:18
    afb8:    a0 e1 84 32       	r0 <= insert(r3, p:0x5, l:0x1)			  ## crc.c:94:18
    afbc:    05 17             	r5 = r0.b0 (u)			  ## crc.c:98:12
    afbe:    fa 3f             	r2 += -0x1			  ## crc.c:110:5
    afc0:    1e 40             	r6 = b[r1+0x0] (u)
    afc2:    6d 19             	r5 ^= r6
    afc4:    95 07             	b[r1++=0x1] = r5
    afc6:    f2 44             	if (r2 != 0) goto -0x38 <doe+0x18 : af90 >
    afc8:    58 04             	{pc, r8-r4} = [sp++]			  ## crc.c:119:1


_jlfs_mount:
    afca:    79 04             	[--sp] = {rets, r9-r4}			  ## sdfile.c:146:0
    afcc:    c2 9f             	sp += -0x84			  ## sdfile.c:146:0
    afce:    36 16             	r6 = r3			  ## sdfile.c:146:0
    afd0:    28 d6             	r8 = r2  #			  ## sdfile.c:146:0
    afd2:    63 61             		 r3 = [r6+0x4] 			  ## sdfile.c:146:0
    afd4:    17 d6             	r7 = r1  #			  ## sdfile.c:146:0
    afd6:    65 60             		 r5 = [r6+0x0] 			  ## sdfile.c:146:0
    afd8:    09 d6             	r9 = r0  #			  ## sdfile.c:146:0
    afda:    64 63             		 r4 = [r6+0xc] 			  ## sdfile.c:146:0
    afdc:    52 d6             	r2 = r5  #			  ## sdfile.c:154:11
    afde:    84 20             		 [sp] = r4			  ## sdfile.c:154:11
    afe0:    c1 ff 34 fc 19 00 	r1 = 0x19fc34 <flash_head : 19fc34 >			  ## sdfile.c:154:11
    afe6:    40 20             	r0 = 0x0			  ## sdfile.c:154:11
    afe8:    44 20             	r4 = 0x0			  ## sdfile.c:154:11
    afea:    bf ea 1e ff       	call -0x1c4 <sd_fopenbyindex : ae2a >			  ## sdfile.c:154:11
    afee:    10 4c             	if (r0 == 0) goto 0x58 <_jlfs_mount+0x7E : b048 >			  ## sdfile.c:154:11
    aff0:    50 ec 60 20       	r3_r2 = d[r6+0x0]
    aff4:    65 63             	r5 = [r6+0xc] 
    aff6:    e9 84             	r1 = sp + 100
    aff8:    40 23             	r0 = 0x3			  ## sdfile.c:158:11
    affa:    85 20             	[sp] = r5			  ## sdfile.c:158:11
    affc:    bf ea 15 ff       	call -0x1d6 <sd_fopenbyindex : ae2a >			  ## sdfile.c:158:11
    b000:    10 43             	if (r0 == 0) goto 0x46 <_jlfs_mount+0x7E : b048 >
    b002:    00 3b             	r0 = [sp+108]			  ## sdfile.c:162:19
    b004:    c0 21             	r0 += 0x1			  ## sdfile.c:162:38
    b006:    ec 84             	r4 = sp + 100			  ## sdfile.c:162:38
    b008:    00 f9 21 04       	if (r0 >= 0x2) goto 0x42 <_jlfs_mount+0x84 : b04e >			  ## sdfile.c:162:38
    b00c:    60 61             	r0 = [r6+0x4] 			  ## sdfile.c:188:24
    b00e:    01 3a             	r1 = [sp+104]			  ## sdfile.c:188:46
    b010:    01 18             	r1 += r0			  ## sdfile.c:188:35
    b012:    8d 84             	r5 = sp + 4			  ## sdfile.c:188:35
    b014:    4a 20             	r2 = 0x20			  ## sdfile.c:189:5
    b016:    50 d6             	r0 = r5  #			  ## sdfile.c:189:5
    b018:    f1 60             		 [r7+0x0] = r1			  ## sdfile.c:188:16
    b01a:    bf ea 37 ff       	call -0x192 <nor_flash_read : ae8c >			  ## sdfile.c:189:5
    b01e:    b0 e1 40 90       	r0 = uextra(r9, p:0x0, l:0x10)			  ## sdfile.c:190:5
    b022:    4a 20             	r2 = 0x20			  ## sdfile.c:190:5
    b024:    43 20             	r3 = 0x0			  ## sdfile.c:190:5
    b026:    44 20             	r4 = 0x0			  ## sdfile.c:190:5
    b028:    51 16             	r1 = r5			  ## sdfile.c:190:5
    b02a:    51 86             	call -0xb4 <doe : af78 >			  ## sdfile.c:190:5
    b02c:    40 e1 02 50       	r0 = r5 | 0x2			  ## sdfile.c:191:28
    b030:    41 3e             	r1 = 0x1e			  ## sdfile.c:191:16
    b032:    bf ea d0 fc       	call -0x660 <chip_crc16 : a9d6 >			  ## sdfile.c:191:16
    b036:    00 48             	if (r0 == 0) goto 0x10 <_jlfs_mount+0x7E : b048 >			  ## sdfile.c:191:16
    b038:    d8 e9 04 10       	r1 = h[sp+4] (u)			  ## sdfile.c:192:28
    b03c:    11 e8 00 80       	if (r1 == r0) {			  ## sdfile.c:192:28
    b040:    00 22             		r0 = [sp+8]			  ## sdfile.c:195:27
    b042:    d0 ec 81 00       		[r8+0x0] = r0			  ## sdfile.c:195:17
    b046:    44 21             		r4 = 0x1
                               	}			  ## sdfile.c:195:17
    b048:    40 16             	r0 = r4			  ## sdfile.c:198:1
    b04a:    22 81             	sp += 0x84			  ## sdfile.c:198:1
    b04c:    59 04             	{pc, r9-r4} = [sp++]			  ## sdfile.c:198:1
    b04e:    50 ec 60 20       	r3_r2 = d[r6+0x0]
    b052:    65 63             	r5 = [r6+0xc] 
    b054:    c9 84             	r1 = sp + 68
    b056:    40 24             	r0 = 0x4			  ## sdfile.c:163:15
    b058:    85 20             	[sp] = r5			  ## sdfile.c:163:15
    b05a:    bf ea e6 fe       	call -0x234 <sd_fopenbyindex : ae2a >			  ## sdfile.c:163:15
    b05e:    60 56             	if (r0 == 0) goto -0x54 <_jlfs_mount+0x42 : b00c >
    b060:    c8 84             	r0 = sp + 68
    b062:    09 90             	r1 = r0 + 0x10			  ## sdfile.c:167:37
    b064:    c0 ff fb f5 01 00 	r0 = 0x1f5fb <sin_win_tab2+0x206 : 1f5fa >			  ## sdfile.c:167:13
    b06a:    80 ff 84 92 ff ff 	call -0x6d7c <strcmp : 42f4 >			  ## sdfile.c:167:13
    b070:    e0 4d             	if (r0 != 0) goto -0x66 <_jlfs_mount+0x42 : b00c >			  ## sdfile.c:167:13
    b072:    50 ec 60 20       	r3_r2 = d[r6+0x0]
    b076:    65 63             	r5 = [r6+0xc] 
    b078:    00 33             	r0 = [sp+76]			  ## sdfile.c:171:47
    b07a:    80 a5             	r0 = r0 >> 0x5			  ## sdfile.c:171:51
    b07c:    a9 84             	r1 = sp + 36			  ## sdfile.c:171:51
    b07e:    85 20             	[sp] = r5			  ## sdfile.c:171:15
    b080:    bf ea d3 fe       	call -0x25a <sd_fopenbyindex : ae2a >			  ## sdfile.c:171:15
    b084:    60 43             	if (r0 == 0) goto -0x7a <_jlfs_mount+0x42 : b00c >
    b086:    50 ec 60 20       	r3_r2 = d[r6+0x0]
    b08a:    40 62             	r0 = [r4+0x8] 			  ## sdfile.c:177:40
    b08c:    65 63             	r5 = [r6+0xc] 			  ## sdfile.c:177:40
    b08e:    d8 e9 2a 40       	r4 = h[sp+42] (u)			  ## sdfile.c:175:72
    b092:    80 a5             	r0 = r0 >> 0x5			  ## sdfile.c:177:44
    b094:    a9 84             	r1 = sp + 36			  ## sdfile.c:177:44
    b096:    85 20             	[sp] = r5			  ## sdfile.c:177:15
    b098:    bf ea c7 fe       	call -0x272 <sd_fopenbyindex : ae2a >			  ## sdfile.c:177:15
    b09c:    50 57             	if (r0 == 0) goto -0x92 <_jlfs_mount+0x42 : b00c >
    b09e:    d8 e9 2a 00       	r0 = h[sp+42] (u)			  ## sdfile.c:181:71
    b0a2:    80 17             	r0 = r0.l (u)			  ## sdfile.c:181:71
    b0a4:    c1 17             	r1 = r4.l (u)			  ## sdfile.c:181:71
    b0a6:    80 ec b1 11       	if (r1 <= r0) goto -0x9e <_jlfs_mount+0x42 : b00c >			  ## sdfile.c:181:71
    b0aa:    e8 84             	r0 = sp + 100
    b0ac:    c9 84             	r1 = sp + 68
    b0ae:    10 87             	rep 0x4 0x8 {			  ## sdfile.c:184:13
    b0b0:    12 05             		r2 = [r1++=0x4] 			  ## sdfile.c:184:13
    b0b2:    82 05             		[r0++=0x4] = r2
                               	}			  ## sdfile.c:184:13
    b0b4:    d7 8b             	goto -0xaa <_jlfs_mount+0x42 : b00c >			  ## sdfile.c:184:13


puts:
    b0b6:    75 04             	[--sp] = {rets, r5, r4}			  ## printf-stdarg.c:288:0
    b0b8:    04 16             	r4 = r0			  ## printf-stdarg.c:288:0
    b0ba:    c5 ff 7c fd 19 00 	r5 = 0x19fd7c <mask_putchar : 19fd7c >			  ## printf-stdarg.c:288:0
    b0c0:    04 82             	goto 0x4 <puts+0x10 : b0c6 >			  ## printf-stdarg.c:288:0
    b0c2:    08 17             	r0 = r0.b0 (s)			  ## uart.c:64:5
    b0c4:    c1 00             	call r1			  ## uart.c:64:5
    b0c6:    51 60             	r1 = [r5+0x0] 			  ## uart.c:64:5
    b0c8:    40 07             	r0 = b[r4++=0x1] (u)			  ## printf-stdarg.c:318:12
    b0ca:    f0 5b             	if (r0 != 0) goto -0xa <puts+0xC : b0c2 >
    b0cc:    40 2a             	r0 = 0xa			  ## uart.c:64:5
    b0ce:    c1 00             	call r1			  ## uart.c:64:5
    b0d0:    40 20             	r0 = 0x0			  ## printf-stdarg.c:326:5
    b0d2:    55 04             	{pc, r5, r4} = [sp++]			  ## printf-stdarg.c:326:5


skip_atoi:
    b0d4:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:18:0
    b0d6:    41 20             	r1 = 0x0			  ## printf-stdarg.c:18:0
    b0d8:    04 89             	goto 0x12 <skip_atoi+0x18 : b0ec >			  ## printf-stdarg.c:18:0
    b0da:    2b 81             	r3 = r2 + 0x1			  ## printf-stdarg.c:21:29
    b0dc:    e1 f1 0a 10       	r1 = r1 * 0xA  #			  ## printf-stdarg.c:21:15
    b0e0:    83 60             		 [r0+0x0] = r3			  ## printf-stdarg.c:21:29
    b0e2:    54 ee 20 20       	r2 = b[r2+0x0] (s)			  ## printf-stdarg.c:21:22
    b0e6:    21 18             	r1 += r2			  ## printf-stdarg.c:21:20
    b0e8:    f1 30             	r1 += -0x30			  ## printf-stdarg.c:21:33
    b0ea:    32 16             	r2 = r3			  ## printf-stdarg.c:20:12
    b0ec:    2b 40             	r3 = b[r2+0x0] (u)			  ## printf-stdarg.c:20:12
    b0ee:    f3 30             	r3 += -0x30			  ## printf-stdarg.c:20:12
    b0f0:    33 17             	r3 = r3.b0 (u)			  ## printf-stdarg.c:20:12
    b0f2:    83 fc f2 13       	if (r3 <= 0x9) goto -0x1c <skip_atoi+0x6 : b0da >			  ## printf-stdarg.c:20:12
    b0f6:    10 16             	r0 = r1			  ## printf-stdarg.c:23:5
    b0f8:    80 00             	rts			  ## printf-stdarg.c:23:5


printchar:
    b0fa:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:29:0
    b0fc:    00 49             	if (r0 == 0) goto 0x12 <printchar+0x16 : b110 >			  ## printf-stdarg.c:30:9
    b0fe:    04 60             	r4 = [r0+0x0] 
    b100:    01 43             	if (r1 == 0) goto 0x6 <printchar+0xE : b108 >
    b102:    43 20             	r3 = 0x0
    b104:    01 e9 0b 40       	if (r4 >= r1) goto 0x16 <printchar+0x24 : b11e >
    b108:    ca 40             	b[r4+0x0] = r2			  ## printf-stdarg.c:34:15
    b10a:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## printf-stdarg.c:35:9
    b10e:    04 86             	goto 0xc <printchar+0x22 : b11c >			  ## printf-stdarg.c:35:9
    b110:    c0 ff 7c fd 19 00 	r0 = 0x19fd7c <mask_putchar : 19fd7c >			  ## uart.c:64:5
    b116:    28 d7             	r0 = r2.b0 (s)  #			  ## uart.c:64:5
    b118:    01 60             		 r1 = [r0+0x0] 			  ## uart.c:64:5
    b11a:    c1 00             	call r1			  ## uart.c:64:5
    b11c:    43 21             	r3 = 0x1
    b11e:    30 16             	r0 = r3			  ## printf-stdarg.c:45:1
    b120:    54 04             	{pc, r4} = [sp++]			  ## printf-stdarg.c:45:1


prints:
    b122:    79 04             	[--sp] = {rets, r9-r4}			  ## printf-stdarg.c:57:0
    b124:    36 16             	r6 = r3			  ## printf-stdarg.c:57:0
    b126:    27 16             	r7 = r2			  ## printf-stdarg.c:57:0
    b128:    19 16             	r9 = r1			  ## printf-stdarg.c:57:0
    b12a:    05 16             	r5 = r0			  ## printf-stdarg.c:57:0
    b12c:    86 fd 1f 02       	ifs (r6 < 0x1) goto 0x3e <prints+0x4C : b16e >			  ## printf-stdarg.c:57:0
    b130:    01 27             	r1 = [sp+28]			  ## printf-stdarg.c:57:0
    b132:    40 20             	r0 = 0x0			  ## printf-stdarg.c:57:0
    b134:    04 81             	goto 0x2 <prints+0x16 : b138 >			  ## printf-stdarg.c:57:0
    b136:    c0 21             	r0 += 0x1			  ## printf-stdarg.c:64:13
    b138:    d8 ee 70 20       	r2 = b[r7+r0] (u)			  ## printf-stdarg.c:63:28
    b13c:    f2 5c             	if (r2 != 0) goto -0x8 <prints+0x14 : b136 >			  ## printf-stdarg.c:63:28
    b13e:    34 e4 61 20       	r2 = smax(r6, r0)			  ## printf-stdarg.c:71:13
    b142:    22 1e             	r2 = r2 - r0			  ## printf-stdarg.c:71:13
    b144:    13 a3             	r3 = r1 << 0x3			  ## printf-stdarg.c:71:13
    b146:    63 e1 10 30       	r3 = r3 & 0x10			  ## printf-stdarg.c:71:13
    b14a:    48 e1 20 30       	r8 = r3 | 0x20			  ## printf-stdarg.c:71:13
    b14e:    44 20             	r4 = 0x0
    b150:    51 e8 11 02       	if ((r1 & 0x1) != 0) goto 0x22 <prints+0x54 : b176 >
    b154:    82 fd 0f 02       	ifs (r2 < 0x1) goto 0x1e <prints+0x54 : b176 >
    b158:    66 1e             	r6 = r6 - r0			  ## printf-stdarg.c:69:19
    b15a:    50 16             	r0 = r5			  ## printf-stdarg.c:77:17
    b15c:    91 16             	r1 = r9			  ## printf-stdarg.c:77:17
    b15e:    82 16             	r2 = r8			  ## printf-stdarg.c:77:17
    b160:    61 8c             	call -0x68 <printchar : b0fa >			  ## printf-stdarg.c:77:17
    b162:    00 50             	if (r0 == 0) goto 0x20 <prints+0x62 : b184 >			  ## printf-stdarg.c:77:17
    b164:    fe 3f             	r6 += -0x1			  ## printf-stdarg.c:76:27
    b166:    c4 21             	r4 += 0x1			  ## printf-stdarg.c:80:13
    b168:    06 fe f7 01       	ifs (r6 > 0x0) goto -0x12 <prints+0x38 : b15a >
    b16c:    04 8b             	goto 0x16 <prints+0x62 : b184 >
    b16e:    44 20             	r4 = 0x0
    b170:    48 e0 20 00       	r8 = 0x20 <WOLAAnalysisFilter_Float_M64_m4_r1+0x1C : 20 >
    b174:    04 87             	goto 0xe <prints+0x62 : b184 >
    b176:    26 16             	r6 = r2
    b178:    04 85             	goto 0xa <prints+0x62 : b184 >
    b17a:    50 16             	r0 = r5			  ## printf-stdarg.c:84:13
    b17c:    91 16             	r1 = r9			  ## printf-stdarg.c:84:13
    b17e:    51 9d             	call -0x86 <printchar : b0fa >			  ## printf-stdarg.c:84:13
    b180:    00 44             	if (r0 == 0) goto 0x8 <prints+0x68 : b18a >			  ## printf-stdarg.c:84:13
    b182:    c4 21             	r4 += 0x1			  ## printf-stdarg.c:87:9
    b184:    d4 ee 71 20       	r2 = b[r7++=0x1] (s)			  ## printf-stdarg.c:83:12
    b188:    f2 58             	if (r2 != 0) goto -0x10 <prints+0x58 : b17a >
    b18a:    47 20             	r7 = 0x0
    b18c:    04 86             	goto 0xc <prints+0x78 : b19a >
    b18e:    50 16             	r0 = r5			  ## printf-stdarg.c:90:13
    b190:    91 16             	r1 = r9			  ## printf-stdarg.c:90:13
    b192:    82 16             	r2 = r8			  ## printf-stdarg.c:90:13
    b194:    51 92             	call -0x9c <printchar : b0fa >			  ## printf-stdarg.c:90:13
    b196:    00 44             	if (r0 == 0) goto 0x8 <prints+0x7E : b1a0 >			  ## printf-stdarg.c:90:13
    b198:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:89:5
    b19a:    e8 1d             	r0 = r6 + r7			  ## printf-stdarg.c:89:18
    b19c:    00 fd f7 03       	ifs (r0 >= 0x1) goto -0x12 <prints+0x6C : b18e >			  ## printf-stdarg.c:89:18
    b1a0:    c8 1f             	r0 = r4 - r7			  ## printf-stdarg.c:96:5
    b1a2:    59 04             	{pc, r9-r4} = [sp++]			  ## printf-stdarg.c:96:5


printi:
    b1a4:    7a 04             	[--sp] = {rets, r10-r4}			  ## printf-stdarg.c:103:0
    b1a6:    e2 9c             	sp += -0x10			  ## printf-stdarg.c:103:0
    b1a8:    d4 e9 38 a0       	r10 = [sp+56]			  ## printf-stdarg.c:103:0
    b1ac:    18 d6             	r8 = r1  #			  ## printf-stdarg.c:103:0
    b1ae:    04 2d             		 r4 = [sp+52]			  ## printf-stdarg.c:103:0
    b1b0:    09 16             	r9 = r0			  ## printf-stdarg.c:103:0
    b1b2:    12 5a             	if (r2 == 0) goto 0x74 <printi+0x84 : b228 >			  ## printf-stdarg.c:103:0
    b1b4:    00 2c             	r0 = [sp+48]			  ## printf-stdarg.c:103:0
    b1b6:    41 20             	r1 = 0x0			  ## printf-stdarg.c:103:0
    b1b8:    de e9 0f 10       	b[sp+15] = r1			  ## printf-stdarg.c:121:8
    b1bc:    41 21             	r1 = 0x1			  ## printf-stdarg.c:121:8
    b1be:    46 21             	r6 = 0x1			  ## printf-stdarg.c:115:17
    b1c0:    b3 e8 0a 00       	if (r3 != 0xa) {			  ## printf-stdarg.c:115:17
    b1c4:    46 20             		r6 = 0x0
                               	}			  ## printf-stdarg.c:115:17
    b1c6:    30 e8 00 00       	if (r0 == 0x0) {			  ## printf-stdarg.c:115:17
    b1ca:    01 16             		r1 = r0
                               	}			  ## printf-stdarg.c:115:9
    b1cc:    90 f1 62 01       	r0 = r6 & r1  #			  ## printf-stdarg.c:115:12
    b1d0:    07 2f             		 r7 = [sp+60]
    b1d2:    a6 e0 00 20       	r6 = 0x0 - r2			  ## printf-stdarg.c:117:13
    b1d6:    a1 bf             	r1 = r2 >> 0x1f			  ## printf-stdarg.c:115:28
    b1d8:    11 ea 00 00       	if ((r1 & r0) == 0) {			  ## printf-stdarg.c:115:28
    b1dc:    26 16             		r6 = r2
                               	}			  ## printf-stdarg.c:115:28
    b1de:    81 19             	r1 &= r0			  ## printf-stdarg.c:115:12
    b1e0:    88 84             	r0 = sp + 4			  ## printf-stdarg.c:115:12
    b1e2:    c0 2a             	r0 += 0xa			  ## printf-stdarg.c:115:12
    b1e4:    05 e1 c6 70       	r5 = r7 + 0xc6			  ## printf-stdarg.c:115:12
    b1e8:    04 8d             	goto 0x1a <printi+0x60 : b204 >			  ## printf-stdarg.c:115:12
    b1ea:    f4 e1 60 73       	r7 = r6 / r3 (u)			  ## printf-stdarg.c:124:15
    b1ee:    f0 e1 70 23       	r2 = r7 * r3			  ## printf-stdarg.c:124:15
    b1f2:    e6 1e             	r6 = r6 - r2			  ## printf-stdarg.c:124:15
    b1f4:    52 16             	r2 = r5			  ## printf-stdarg.c:125:13
    b1f6:    b6 ee 09 00       	ifs (r6 <= 0x9) {			  ## printf-stdarg.c:125:13
    b1fa:    42 20             		r2 = 0x0
                               	}			  ## printf-stdarg.c:125:13
    b1fc:    62 18             	r2 += r6			  ## printf-stdarg.c:125:13
    b1fe:    ca 30             	r2 += 0x30			  ## printf-stdarg.c:128:18
    b200:    76 d6             	r6 = r7  #			  ## printf-stdarg.c:128:18
    b202:    8a 07             		 b[r0++=-0x1] = r2			  ## printf-stdarg.c:128:14
    b204:    f6 52             	if (r6 != 0) goto -0x1c <printi+0x46 : b1ea >
    b206:    0f 81             	r7 = r0 + 0x1			  ## printf-stdarg.c:132:9
    b208:    46 20             	r6 = 0x0
    b20a:    01 5f             	if (r1 == 0) goto 0x3e <printi+0xA6 : b24a >
    b20c:    04 5b             	if (r4 == 0) goto 0x36 <printi+0xA0 : b244 >
    b20e:    5a e8 19 08       	if ((r10 & 0x2) == 0) goto 0x32 <printi+0xA0 : b244 >
    b212:    4a 2d             	r2 = 0x2d			  ## printf-stdarg.c:134:17
    b214:    90 16             	r0 = r9			  ## printf-stdarg.c:134:17
    b216:    81 16             	r1 = r8			  ## printf-stdarg.c:134:17
    b218:    bf ea 6f ff       	call -0x122 <printchar : b0fa >			  ## printf-stdarg.c:134:17
    b21c:    46 21             	r6 = 0x1			  ## printf-stdarg.c:134:17
    b21e:    30 e8 00 00       	if (r0 == 0x0) {
    b222:    06 16             		r6 = r0
                               	}			  ## printf-stdarg.c:134:17
    b224:    c4 1f             	r4 = r4 - r6			  ## printf-stdarg.c:134:17
    b226:    04 91             	goto 0x22 <printi+0xA6 : b24a >
    b228:    48 30             	r0 = 0x30			  ## printf-stdarg.c:110:22
    b22a:    de e9 04 00       	b[sp+4] = r0			  ## printf-stdarg.c:110:22
    b22e:    40 20             	r0 = 0x0			  ## printf-stdarg.c:110:22
    b230:    de e9 05 00       	b[sp+5] = r0			  ## printf-stdarg.c:111:22
    b234:    8a 84             	r2 = sp + 4			  ## printf-stdarg.c:111:22
    b236:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:112:16
    b23a:    90 16             	r0 = r9			  ## printf-stdarg.c:112:16
    b23c:    43 16             	r3 = r4			  ## printf-stdarg.c:112:16
    b23e:    bf ea 70 ff       	call -0x120 <prints : b122 >			  ## printf-stdarg.c:112:16
    b242:    04 8c             	goto 0x18 <printi+0xB8 : b25c >			  ## printf-stdarg.c:112:16
    b244:    49 2d             	r1 = 0x2d			  ## printf-stdarg.c:139:18
    b246:    07 d6             	r7 = r0  #			  ## printf-stdarg.c:139:18
    b248:    89 40             		 b[r0+0x0] = r1			  ## printf-stdarg.c:139:18
    b24a:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:143:17
    b24e:    90 16             	r0 = r9			  ## printf-stdarg.c:143:17
    b250:    81 16             	r1 = r8			  ## printf-stdarg.c:143:17
    b252:    72 16             	r2 = r7			  ## printf-stdarg.c:143:17
    b254:    43 16             	r3 = r4			  ## printf-stdarg.c:143:17
    b256:    bf ea 64 ff       	call -0x138 <prints : b122 >			  ## printf-stdarg.c:143:17
    b25a:    60 18             	r0 += r6			  ## printf-stdarg.c:143:15
    b25c:    02 84             	sp += 0x10
    b25e:    5a 04             	{pc, r10-r4} = [sp++]			  ## printf-stdarg.c:144:1


cvt:
    b260:    7f 04             	[--sp] = {rets, r15-r4}			  ## fcvt.c:42:0
    b262:    e2 9a             	sp += -0x18			  ## fcvt.c:42:0
    b264:    3d d6             	r13 = r3  #			  ## fcvt.c:42:0
    b266:    04 33             		 r4 = [sp+76]			  ## fcvt.c:42:0
    b268:    06 15             	r7_r6 = r1_r0			  ## fcvt.c:42:0
    b26a:    41 20             	r1 = 0x0			  ## fcvt.c:42:0
    b26c:    25 d6             	r5 = r2  #			  ## fcvt.c:42:0
    b26e:    c1 60             		 [r4+0x0] = r1			  ## fcvt.c:56:12
    b270:    82 14             	r3_r2 = 0			  ## fcvt.c:59:9
    b272:    71 16             	r1 = r7			  ## fcvt.c:59:9
    b274:    80 ff a6 cb 00 00 	call 0xcba6 <__ltdf2 : 17e20 >			  ## fcvt.c:59:9
    b27a:    b5 ee 00 00       	ifs (r5 <= 0x0) {
    b27e:    45 20             		r5 = 0x0
                               	}			  ## fcvt.c:47:9
    b280:    35 ed 3e 00       	ifs (r5 >= 0x3e) {
    b284:    4d 3e             		r5 = 0x3e
                               	}			  ## fcvt.c:51:9
    b286:    85 21             	[sp+4] = r5
    b288:    b0 ee ff 4f       	ifs (r0 <= -0x1) {
    b28c:    40 ea 01 40       		[r4+0x0] = 0x1			  ## fcvt.c:60:16
    b290:    3f 3f             		r7 ^= 0x80000000
                               	}			  ## fcvt.c:61:15
    b292:    d4 e9 54 c0       	r12 = [sp+84]
    b296:    60 d5             	r1_r0 = r7_r6  #			  ## fcvt.c:64:11
    b298:    05 34             		 r5 = [sp+80]			  ## fcvt.c:64:11
    b29a:    8a 90             	r2 = sp + 16
    b29c:    80 ff b0 8f ff ff 	call -0x7050 <modf : 4252 >			  ## fcvt.c:64:11
    b2a2:    08 15             	r9_r8 = r1_r0			  ## fcvt.c:64:11
    b2a4:    d0 e9 10 e0       	r15_r14 = d[sp+16]			  ## fcvt.c:67:9
    b2a8:    82 14             	r3_r2 = 0			  ## fcvt.c:67:9
    b2aa:    47 20             	r7 = 0x0			  ## fcvt.c:67:9
    b2ac:    e0 15             	r1_r0 = r15_r14			  ## fcvt.c:67:9
    b2ae:    80 ff 6a cb 00 00 	call 0xcb6a <__eqdf2 : 17e1e >			  ## fcvt.c:67:9
    b2b4:    20 4b             	if (r0 == 0) goto 0x96 <cvt+0xEC : b34c >			  ## fcvt.c:67:9
    b2b6:    d4 e9 01 d0       	[sp] = r13
    b2ba:    c5 14             	r13 = 0
    b2bc:    c7 ff 00 00 24 40 	r7 = 0x40240000 <RAM_LIMIT_H+0x400A0000 : 40240000 >
    b2c2:    c6 ff b8 1e 85 eb 	r6 = 0xeb851eb8 <RAM_LIMIT_H+0xEB6B1EB8 : eb851eb8 >
    b2c8:    c4 ff 51 b8 9e 3f 	r4 = 0x3f9eb851 <RAM_LIMIT_H+0x3F84B850 : 3f9eb850 >
    b2ce:    14 81             	goto 0x42 <cvt+0xB2 : b312 >
    b2d0:    42 20             	r2 = 0x0			  ## fcvt.c:71:26
    b2d2:    e0 15             	r1_r0 = r15_r14			  ## fcvt.c:71:26
    b2d4:    73 16             	r3 = r7			  ## fcvt.c:71:26
    b2d6:    80 ff 80 cb 00 00 	call 0xcb80 <__divdf3 : 17e5c >			  ## fcvt.c:71:26
    b2dc:    8a 90             	r2 = sp + 16			  ## fcvt.c:71:26
    b2de:    80 ff 6e 8f ff ff 	call -0x7092 <modf : 4252 >			  ## fcvt.c:71:18
    b2e4:    0a 15             	r11_r10 = r1_r0			  ## fcvt.c:71:18
    b2e6:    62 16             	r2 = r6			  ## fcvt.c:72:32
    b2e8:    43 16             	r3 = r4			  ## fcvt.c:72:32
    b2ea:    80 ff e8 c3 00 00 	call 0xc3e8 <__adddf3 : 176d8 >			  ## fcvt.c:72:32
    b2f0:    42 20             	r2 = 0x0			  ## fcvt.c:72:39
    b2f2:    73 16             	r3 = r7			  ## fcvt.c:72:39
    b2f4:    80 ff a8 ce 00 00 	call 0xcea8 <__muldf3 : 181a2 >			  ## fcvt.c:72:39
    b2fa:    80 ff 06 c7 00 00 	call 0xc706 <__fixdfsi : 17a06 >			  ## fcvt.c:72:22
    b300:    c8 30             	r0 += 0x30			  ## fcvt.c:72:45
    b302:    b4 e0 50 1d       	r1 = r5 + r13			  ## fcvt.c:72:20
    b306:    52 ee 1f 03       	b[r1+0x3f] = r0			  ## fcvt.c:72:20
    b30a:    d0 e9 10 e0       	r15_r14 = d[sp+16]			  ## fcvt.c:70:16
    b30e:    3d e1 ff df       	r13 = r13 + -0x1			  ## fcvt.c:70:9
    b312:    82 14             	r3_r2 = 0			  ## fcvt.c:70:19
    b314:    e0 15             	r1_r0 = r15_r14			  ## fcvt.c:70:19
    b316:    80 ff 06 cb 00 00 	call 0xcb06 <__nedf2 : 17e22 >			  ## fcvt.c:70:19
    b31c:    e0 59             	if (r0 != 0) goto -0x4e <cvt+0x70 : b2d0 >			  ## fcvt.c:70:9
    b31e:    d0 e9 09 a0       	d[sp+8] = r11_r10			  ## fcvt.c:71:16
    b322:    b4 e0 50 0d       	r0 = r5 + r13			  ## fcvt.c:45:16
    b326:    a7 e0 00 d0       	r7 = 0x0 - r13			  ## fcvt.c:45:16
    b32a:    46 20             	r6 = 0x0			  ## fcvt.c:45:16
    b32c:    04 86             	goto 0xc <cvt+0xDA : b33a >			  ## fcvt.c:45:16
    b32e:    81 1d             	r1 = r0 + r6			  ## fcvt.c:77:22
    b330:    50 ee 10 14       	r1 = b[r1+0x40] (u)			  ## fcvt.c:77:22
    b334:    d8 ee 51 16       	b[r5+r6] = r1			  ## fcvt.c:77:20
    b338:    c6 21             	r6 += 0x1			  ## fcvt.c:77:17
    b33a:    b4 e0 d0 16       	r1 = r13 + r6			  ## fcvt.c:76:19
    b33e:    d1 20             	r1 += 0x40			  ## fcvt.c:76:19
    b340:    81 fe f5 7f       	ifs (r1 <= 0x3f) goto -0x16 <cvt+0xCE : b32e >			  ## fcvt.c:76:19
    b344:    8a 15             	r11_r10 = r9_r8
    b346:    d4 e9 00 d0       	r13 = [sp]
    b34a:    14 83             	goto 0x46 <cvt+0x132 : b392 >
    b34c:    82 14             	r3_r2 = 0			  ## fcvt.c:79:16
    b34e:    80 15             	r1_r0 = r9_r8			  ## fcvt.c:79:16
    b350:    80 ff ce ca 00 00 	call 0xcace <__gtdf2 : 17e24 >			  ## fcvt.c:79:16
    b356:    80 fd 1a 02       	ifs (r0 < 0x1) goto 0x34 <cvt+0x12E : b38e >			  ## fcvt.c:79:16
    b35a:    47 21             	r7 = 0x1
    b35c:    c4 ff 00 00 24 40 	r4 = 0x40240000 <RAM_LIMIT_H+0x400A0000 : 40240000 >
    b362:    c6 ff 00 00 f0 3f 	r6 = 0x3ff00000 <RAM_LIMIT_H+0x3FD60000 : 3ff00000 >
    b368:    8a 15             	r11_r10 = r9_r8
    b36a:    42 20             	r2 = 0x0			  ## fcvt.c:80:26
    b36c:    a0 15             	r1_r0 = r11_r10			  ## fcvt.c:80:26
    b36e:    43 16             	r3 = r4			  ## fcvt.c:80:26
    b370:    80 ff 2c ce 00 00 	call 0xce2c <__muldf3 : 181a2 >			  ## fcvt.c:80:26
    b376:    08 15             	r9_r8 = r1_r0			  ## fcvt.c:80:26
    b378:    42 20             	r2 = 0x0			  ## fcvt.c:80:32
    b37a:    63 16             	r3 = r6			  ## fcvt.c:80:32
    b37c:    80 ff 9e ca 00 00 	call 0xca9e <__ltdf2 : 17e20 >			  ## fcvt.c:80:32
    b382:    ff 3f             	r7 += -0x1			  ## fcvt.c:80:9
    b384:    80 fd f0 01       	ifs (r0 < 0x0) goto -0x20 <cvt+0x108 : b368 >			  ## fcvt.c:80:9
    b388:    d0 e9 09 80       	d[sp+8] = r9_r8			  ## fcvt.c:80:20
    b38c:    04 81             	goto 0x2 <cvt+0x130 : b390 >			  ## fcvt.c:80:20
    b38e:    8a 15             	r11_r10 = r9_r8
    b390:    46 20             	r6 = 0x0
    b392:    d0 ec d1 70       	[r13+0x0] = r7			  ## fcvt.c:92:13
    b396:    bc e8 00 00       	if (r12 != 0x0) {			  ## fcvt.c:92:13
    b39a:    47 20             		r7 = 0x0
                               	}			  ## fcvt.c:92:13
    b39c:    58 d6             	r8 = r5  #
    b39e:    00 21             		 r0 = [sp+4]			  ## fcvt.c:88:9
    b3a0:    07 18             	r7 += r0			  ## fcvt.c:88:9
    b3a2:    87 fd 43 00       	ifs (r7 < 0x0) goto 0x86 <cvt+0x1CC : b42c >			  ## fcvt.c:88:9
    b3a6:    b4 e0 50 87       	r8 = r5 + r7			  ## fcvt.c:45:16
    b3aa:    c4 ff 00 00 24 40 	r4 = 0x40240000 <RAM_LIMIT_H+0x400A0000 : 40240000 >
    b3b0:    04 96             	goto 0x2c <cvt+0x17E : b3de >
    b3b2:    06 fe 16 7e       	ifs (r6 > 0x3f) goto 0x2c <cvt+0x182 : b3e2 >
    b3b6:    42 20             	r2 = 0x0			  ## fcvt.c:100:13
    b3b8:    a0 15             	r1_r0 = r11_r10			  ## fcvt.c:100:13
    b3ba:    43 16             	r3 = r4			  ## fcvt.c:100:13
    b3bc:    80 ff e0 cd 00 00 	call 0xcde0 <__muldf3 : 181a2 >			  ## fcvt.c:100:13
    b3c2:    8a 88             	r2 = sp + 8			  ## fcvt.c:100:13
    b3c4:    80 ff 88 8e ff ff 	call -0x7178 <modf : 4252 >			  ## fcvt.c:101:15
    b3ca:    0a 15             	r11_r10 = r1_r0			  ## fcvt.c:101:15
    b3cc:    d0 e9 08 00       	r1_r0 = d[sp+8]			  ## fcvt.c:102:24
    b3d0:    80 ff 30 c6 00 00 	call 0xc630 <__fixdfsi : 17a06 >			  ## fcvt.c:102:18
    b3d6:    c8 30             	r0 += 0x30			  ## fcvt.c:102:27
    b3d8:    d8 ee 51 06       	b[r5+r6] = r0			  ## fcvt.c:102:16
    b3dc:    c6 21             	r6 += 0x1			  ## fcvt.c:102:13
    b3de:    87 ee e8 61       	ifs (r6 <= r7) goto -0x30 <cvt+0x152 : b3b2 >
    b3e2:    87 fd 03 80       	ifs (r7 < 0x40) goto 0x6 <cvt+0x18C : b3ec >			  ## fcvt.c:105:9
    b3e6:    08 e1 3f 50       	r8 = r5 + 0x3f			  ## fcvt.c:106:9
    b3ea:    14 80             	goto 0x40 <cvt+0x1CC : b42c >
    b3ec:    50 ee 80 00       	r0 = b[r8+0x0] (u)			  ## fcvt.c:111:10
    b3f0:    c0 25             	r0 += 0x5			  ## fcvt.c:111:10
    b3f2:    52 ee 80 00       	b[r8+0x0] = r0			  ## fcvt.c:111:10
    b3f6:    48 30             	r0 = 0x30			  ## fcvt.c:111:10
    b3f8:    49 31             	r1 = 0x31			  ## fcvt.c:111:10
    b3fa:    82 16             	r2 = r8			  ## fcvt.c:111:10
    b3fc:    04 93             	goto 0x26 <cvt+0x1C4 : b424 >			  ## fcvt.c:111:10
    b3fe:    a8 40             	b[r2+0x0] = r0			  ## fcvt.c:114:14
    b400:    05 ec 0c 20       	if (r2 > r5) goto 0x18 <cvt+0x1BC : b41c >			  ## fcvt.c:114:14
    b404:    a9 40             	b[r2+0x0] = r1			  ## fcvt.c:119:18
    b406:    c0 eb 01 d0       	[r13+0x0] += 0x1			  ## fcvt.c:120:22
    b40a:    8c f8 0b 00       	if (r12 != 0x0) goto 0x16 <cvt+0x1C4 : b424 >			  ## fcvt.c:120:22
    b40e:    18 ec 00 05       	if (r8 > r5) {
    b412:    52 ee 80 00       		b[r8+0x0] = r0
                               	}			  ## fcvt.c:124:25
    b416:    08 e1 01 80       	r8 = r8 + 0x1			  ## fcvt.c:127:19
    b41a:    04 84             	goto 0x8 <cvt+0x1C4 : b424 >
    b41c:    2b 5f             	r3 = b[r2+-0x1] (u)			  ## fcvt.c:117:13
    b41e:    c3 21             	r3 += 0x1			  ## fcvt.c:117:13
    b420:    5b ee 2f 3f       	b[++r2=-0x1] = r3			  ## fcvt.c:117:13
    b424:    54 ee 20 30       	r3 = b[r2+0x0] (s)			  ## fcvt.c:113:12
    b428:    03 fd e9 75       	ifs (r3 >= 0x3a) goto -0x2e <cvt+0x19E : b3fe >			  ## fcvt.c:113:12
    b42c:    40 20             	r0 = 0x0
    b42e:    52 ee 80 00       	b[r8+0x0] = r0
    b432:    50 16             	r0 = r5			  ## fcvt.c:134:1
    b434:    02 86             	sp += 0x18			  ## fcvt.c:134:1
    b436:    5f 04             	{pc, r15-r4} = [sp++]			  ## fcvt.c:134:1


ecvtbuf:
    b438:    76 04             	[--sp] = {rets, r6-r4}			  ## fcvt.c:142:0
    b43a:    e2 9d             	sp += -0xc			  ## fcvt.c:142:0
    b43c:    04 28             	r4 = [sp+32]			  ## fcvt.c:142:0
    b43e:    05 27             	r5 = [sp+28]			  ## fcvt.c:142:0
    b440:    46 21             	r6 = 0x1			  ## fcvt.c:143:12
    b442:    86 22             	[sp+8] = r6			  ## fcvt.c:143:12
    b444:    84 21             	[sp+4] = r4			  ## fcvt.c:143:12
    b446:    85 20             	[sp] = r5			  ## fcvt.c:143:12
    b448:    bf ea 0a ff       	call -0x1ec <cvt : b260 >			  ## fcvt.c:143:12
    b44c:    02 83             	sp += 0xc
    b44e:    56 04             	{pc, r6-r4} = [sp++]			  ## fcvt.c:143:5


print:
    b450:    7f 04             	[--sp] = {rets, r15-r4}			  ## printf-stdarg.c:147:0
    b452:    c2 8f             	sp += -0xc4			  ## printf-stdarg.c:147:0
    b454:    1c d6             	r12 = r1  #			  ## printf-stdarg.c:147:0
    b456:    82 29             		 [sp+36] = r2			  ## printf-stdarg.c:147:0
    b458:    04 d6             	r4 = r0  #			  ## printf-stdarg.c:147:0
    b45a:    83 28             		 [sp+32] = r3			  ## printf-stdarg.c:147:0
    b45c:    e8 9b             	r0 = sp + 123			  ## printf-stdarg.c:147:0
    b45e:    c0 21             	r0 += 0x1			  ## printf-stdarg.c:147:0
    b460:    c2 d4             	r10 = 0  #			  ## printf-stdarg.c:147:0
    b462:    80 25             		 [sp+20] = r0			  ## printf-stdarg.c:147:0
    b464:    a8 8b             	r0 = sp + 43			  ## printf-stdarg.c:147:0
    b466:    c0 21             	r0 += 0x1			  ## printf-stdarg.c:147:0
    b468:    c6 d4             	r14 = 0  #			  ## printf-stdarg.c:147:0
    b46a:    80 26             		 [sp+24] = r0			  ## printf-stdarg.c:147:0
    b46c:    88 9e             	r0 = sp + 30			  ## printf-stdarg.c:147:0
    b46e:    80 24             	[sp+16] = r0			  ## printf-stdarg.c:147:0
    b470:    45 92             	goto 0x524 <.GJTIE56_0_0_+0x45C : b996 >			  ## printf-stdarg.c:147:0
    b472:    29 81             	r1 = r2 + 0x1			  ## printf-stdarg.c:154:13
    b474:    81 29             	[sp+36] = r1			  ## printf-stdarg.c:154:13
    b476:    28 41             	r0 = b[r2+0x1] (u)			  ## printf-stdarg.c:156:17
    b478:    00 f8 05 4a       	if (r0 == 0x25) goto 0xa <print+0x36 : b486 >			  ## printf-stdarg.c:156:17
    b47c:    00 f8 0b 5a       	if (r0 == 0x2d) goto 0x16 <print+0x46 : b496 >
    b480:    47 20             	r7 = 0x0
    b482:    80 50             	if (r0 != 0) goto 0x20 <print+0x54 : b4a4 >
    b484:    45 8f             	goto 0x51e <.GJTIE56_0_0_+0x46A : b9a4 >
    b486:    48 25             	r0 = 0x25
    b488:    0a 17             	r2 = r0.b0 (s)			  ## printf-stdarg.c:276:39
    b48a:    40 16             	r0 = r4			  ## printf-stdarg.c:276:19
    b48c:    c1 16             	r1 = r12			  ## printf-stdarg.c:276:19
    b48e:    bf ea 34 fe       	call -0x398 <printchar : b0fa >			  ## printf-stdarg.c:276:19
    b492:    0e 18             	r14 += r0
    b494:    24 92             	goto 0xa4 <.GJTIE56_0_0_ : b53a >
    b496:    29 82             	r1 = r2 + 0x2			  ## printf-stdarg.c:163:17
    b498:    81 29             	[sp+36] = r1			  ## printf-stdarg.c:163:17
    b49a:    47 21             	r7 = 0x1
    b49c:    04 83             	goto 0x6 <print+0x54 : b4a4 >
    b49e:    c1 21             	r1 += 0x1			  ## printf-stdarg.c:167:17
    b4a0:    81 29             	[sp+36] = r1			  ## printf-stdarg.c:167:17
    b4a2:    37 21             	r7 |= 0x2			  ## printf-stdarg.c:168:21
    b4a4:    1a 40             	r2 = b[r1+0x0] (u)			  ## printf-stdarg.c:166:20
    b4a6:    02 f8 fa 61       	if (r2 == 0x30) goto -0xc <print+0x4E : b49e >			  ## printf-stdarg.c:166:20
    b4aa:    30 e1 d0 2f       	r0 = r2 + -0x30			  ## printf-stdarg.c:172:17
    b4ae:    00 17             	r0 = r0.b0 (u)			  ## printf-stdarg.c:172:17
    b4b0:    15 3f             	r5 = -0x1			  ## printf-stdarg.c:172:17
    b4b2:    48 e0 ff ff       	r8 = -0x1 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >			  ## printf-stdarg.c:172:17
    b4b6:    00 fc 06 12       	if (r0 > 0x9) goto 0xc <print+0x76 : b4c6 >			  ## printf-stdarg.c:172:17
    b4ba:    a8 84             	r0 = sp + 36
    b4bc:    bf ea 0a fe       	call -0x3ec <skip_atoi : b0d4 >			  ## printf-stdarg.c:173:25
    b4c0:    08 d6             	r8 = r0  #			  ## printf-stdarg.c:173:25
    b4c2:    01 29             		 r1 = [sp+36]			  ## printf-stdarg.c:173:25
    b4c4:    1a 40             	r2 = b[r1+0x0] (u)			  ## printf-stdarg.c:173:25
    b4c6:    82 f8 0e 5c       	if (r2 != 0x2e) goto 0x1c <print+0x96 : b4e6 >
    b4ca:    1e 81             	r6 = r1 + 0x1			  ## printf-stdarg.c:178:17
    b4cc:    86 29             	[sp+36] = r6			  ## printf-stdarg.c:178:17
    b4ce:    18 41             	r0 = b[r1+0x1] (u)			  ## printf-stdarg.c:179:21
    b4d0:    32 e1 d0 0f       	r2 = r0 + -0x30			  ## printf-stdarg.c:179:21
    b4d4:    22 17             	r2 = r2.b0 (u)			  ## printf-stdarg.c:179:21
    b4d6:    02 fc 08 12       	if (r2 > 0x9) goto 0x10 <print+0x9A : b4ea >			  ## printf-stdarg.c:179:21
    b4da:    a8 84             	r0 = sp + 36
    b4dc:    bf ea fa fd       	call -0x40c <skip_atoi : b0d4 >			  ## printf-stdarg.c:180:33
    b4e0:    05 d6             	r5 = r0  #			  ## printf-stdarg.c:180:33
    b4e2:    06 29             		 r6 = [sp+36]			  ## printf-stdarg.c:180:33
    b4e4:    04 8a             	goto 0x14 <print+0xAA : b4fa >
    b4e6:    16 16             	r6 = r1			  ## printf-stdarg.c:260:78
    b4e8:    04 8c             	goto 0x18 <print+0xB2 : b502 >			  ## printf-stdarg.c:260:78
    b4ea:    80 f8 06 54       	if (r0 != 0x2a) goto 0xc <print+0xAA : b4fa >
    b4ee:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:183:33
    b4f0:    1e 82             	r6 = r1 + 0x2			  ## printf-stdarg.c:182:21
    b4f2:    86 29             	[sp+36] = r6			  ## printf-stdarg.c:182:21
    b4f4:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:183:33
    b4f6:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:183:33
    b4f8:    05 60             	r5 = [r0+0x0] 			  ## printf-stdarg.c:183:33
    b4fa:    b5 ee 00 00       	ifs (r5 <= 0x0) {
    b4fe:    45 20             		r5 = 0x0
                               	}
    b500:    6a 40             	r2 = b[r6+0x0] (u)
    b502:    30 e1 9d 2f       	r0 = r2 + -0x63			  ## printf-stdarg.c:193:17
    b506:    00 fc 22 2a       	if (r0 > 0x15) goto 0x44 <.GJTIE56_0_0_+0x14 : b54e >			  ## printf-stdarg.c:193:17
    b50a:    01 a1             	r1 = r0 << 0x1
    b50c:    11 01             	tbh [r1]


.GJTIL56_0_0_:
    b50e:    36 01     < 310 : 0x136 >
    b510:    42 01     < 322 : 0x142 >
    b512:    34 00     < 52 : 0x34 >
    b514:    34 00     < 52 : 0x34 >
    b516:    34 00     < 52 : 0x34 >
    b518:    16 00     < 22 : 0x16 >
    b51a:    16 00     < 22 : 0x16 >
    b51c:    16 00     < 22 : 0x16 >
    b51e:    16 00     < 22 : 0x16 >
    b520:    4f 01     < 335 : 0x14F >
    b522:    16 00     < 22 : 0x16 >
    b524:    16 00     < 22 : 0x16 >
    b526:    16 00     < 22 : 0x16 >
    b528:    1a 00     < 26 : 0x1A >
    b52a:    16 00     < 22 : 0x16 >
    b52c:    16 00     < 22 : 0x16 >
    b52e:    66 01     < 358 : 0x166 >
    b530:    16 00     < 22 : 0x16 >
    b532:    76 01     < 374 : 0x176 >
    b534:    16 00     < 22 : 0x16 >
    b536:    16 00     < 22 : 0x16 >
    b538:    1a 00     < 26 : 0x1A >
    b53a:    00 29             	r0 = [sp+36]			  ## printf-stdarg.c:152:26
    b53c:    0a 81             	r2 = r0 + 0x1			  ## printf-stdarg.c:152:26
    b53e:    82 29             	[sp+36] = r2			  ## printf-stdarg.c:152:26
    b540:    15 8a             	goto 0x454 <.GJTIE56_0_0_+0x45C : b996 >			  ## printf-stdarg.c:152:26
    b542:    00 28             	r0 = [sp+32]
    b544:    09 84             	r1 = r0 + 0x4
    b546:    81 28             	[sp+32] = r1
    b548:    02 60             	r2 = [r0+0x0] 
    b54a:    58 21             	r0 = 0x61
    b54c:    04 8e             	goto 0x1c <.GJTIE56_0_0_+0x30 : b56a >
    b54e:    02 f8 12 8a       	if (r2 == 0x45) goto 0x24 <.GJTIE56_0_0_+0x3C : b576 >
    b552:    02 f8 10 8e       	if (r2 == 0x47) goto 0x20 <.GJTIE56_0_0_+0x3C : b576 >
    b556:    00 ff 4c 20 60 01 	if (r2 == 0x4c) goto 0x2c0 <.GJTIE56_0_0_+0x2E2 : b81c >
    b55c:    82 f8 ed b1       	if (r2 != 0x58) goto -0x26 <.GJTIE56_0_0_ : b53a >
    b560:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:227:40
    b562:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:227:40
    b564:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:227:40
    b566:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:227:40
    b568:    50 21             	r0 = 0x41			  ## printf-stdarg.c:227:23
    b56a:    80 23             	[sp+12] = r0
    b56c:    87 22             	[sp+8] = r7
    b56e:    d4 e9 05 80       	[sp+4] = r8
    b572:    43 30             	r3 = 0x10
    b574:    a4 8c             	goto 0x298 <.GJTIE56_0_0_+0x2D4 : b80e >
    b576:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:260:37
    b578:    0a 88             	r2 = r0 + 0x8			  ## printf-stdarg.c:260:37
    b57a:    4f f1 04 70       	r15 = r7 | 0x4  #			  ## printf-stdarg.c:260:90
    b57e:    82 28             		 [sp+32] = r2			  ## printf-stdarg.c:260:37
    b580:    71 e1 02 f0       	r1 = r15 & 0xFFFFFFFD			  ## printf-stdarg.c:552:15
    b584:    37 ea 10 00       	if ((r7 & 0x10) != 0) {
    b588:    1f 16             		r15 = r1
                               	}			  ## printf-stdarg.c:551:9
    b58a:    50 ec 00 a0       	r11_r10 = d[r0+0x0]			  ## printf-stdarg.c:260:37
    b58e:    82 14             	r3_r2 = 0			  ## printf-stdarg.c:559:13
    b590:    a0 15             	r1_r0 = r11_r10			  ## printf-stdarg.c:559:13
    b592:    80 ff 88 c8 00 00 	call 0xc888 <__ltdf2 : 17e20 >			  ## printf-stdarg.c:559:13
    b598:    69 40             	r1 = b[r6+0x0] (u)			  ## printf-stdarg.c:260:77
    b59a:    70 fe 07 fe       	ifs (r0 > -0x1) goto 0xe <.GJTIE56_0_0_+0x72 : b5ac >			  ## printf-stdarg.c:559:13
    b59e:    5b e1 00 b4       	r11 = r11 ^ 0x80000000			  ## printf-stdarg.c:561:19
    b5a2:    38 e1 ff 8f       	r8 = r8 + -0x1			  ## printf-stdarg.c:562:18
    b5a6:    49 e0 2d 00       	r9 = 0x2d <WOLAAnalysisFilter_Float_M64_m4_r1+0x28 : 2c >
    b5aa:    04 8d             	goto 0x1a <.GJTIE56_0_0_+0x8C : b5c6 >
    b5ac:    2f ea 80 e0       	if ((r15 & 0x80) == 0) {
    b5b0:    b0 e1 85 f1       		r0 = sextra(r15, p:0x3, l:0x1)			  ## printf-stdarg.c:566:20
    b5b4:    08 18             		r8 += r0			  ## printf-stdarg.c:566:20
    b5b6:    c0 e1 f2 00       		r0 = r15 << 0x2			  ## printf-stdarg.c:566:20
    b5ba:    69 e1 20 00       		r9 = r0 & 0x20
                               	} else {			  ## printf-stdarg.c:566:20
    b5be:    38 e1 ff 8f       		r8 = r8 + -0x1			  ## printf-stdarg.c:565:18
    b5c2:    49 e0 2b 00       		r9 = 0x2b
                               	} <WOLAAnalysisFilter_Float_M64_m4_r1+0x26 : 2a >
    b5c6:    85 fd 09 00       	ifs (r5 < 0x0) goto 0x12 <.GJTIE56_0_0_+0xA2 : b5dc >
    b5ca:    4d e0 01 00       	r13 = 0x1 <mem_code_size : 0 >			  ## printf-stdarg.c:575:31
    b5ce:    b1 e8 67 00       	if (r1 != 0x67) {
    b5d2:    5d 16             		r13 = r5
                               	}			  ## printf-stdarg.c:575:31
    b5d4:    b5 e8 00 00       	if (r5 != 0x0) {			  ## printf-stdarg.c:575:31
    b5d8:    5d 16             		r13 = r5
                               	}			  ## printf-stdarg.c:575:31
    b5da:    04 82             	goto 0x4 <.GJTIE56_0_0_+0xA6 : b5e0 >			  ## printf-stdarg.c:575:31
    b5dc:    4d e0 06 00       	r13 = 0x6 <WOLAAnalysisFilter_Float_M64_m4_r1+0x2 : 6 >
    b5e0:    40 e1 02 10       	r0 = r1 | 0x2			  ## printf-stdarg.c:404:20
    b5e4:    30 e8 47 50       	if (r0 == 0x47) {
    b5e8:    c9 20             		r1 += 0x20			  ## printf-stdarg.c:406:13
    b5ea:    47 21             		r7 = 0x1
                               	} else {			  ## printf-stdarg.c:406:13
    b5ec:    47 20             		r7 = 0x0
                               	}
    b5ee:    10 17             	r0 = r1.b0 (u)
    b5f0:    a9 8b             	r1 = sp + 43
    b5f2:    d5 16             	r5 = r13
    b5f4:    00 f8 47 ca       	if (r0 == 0x65) goto 0x8e <.GJTIE56_0_0_+0x14C : b686 >
    b5f8:    00 f8 17 cc       	if (r0 == 0x66) goto 0x2e <.GJTIE56_0_0_+0xF0 : b62a >
    b5fc:    80 f8 9c ce       	if (r0 != 0x67) goto 0x138 <.GJTIE56_0_0_+0x1FE : b738 >
    b600:    e8 9b             	r0 = sp + 123
    b602:    d2 d6             	r2 = r13  #			  ## printf-stdarg.c:410:18
    b604:    80 21             		 [sp+4] = r0			  ## printf-stdarg.c:410:18
    b606:    f8 e8 bc 00       	r0 = sp + 188			  ## printf-stdarg.c:410:18
    b60a:    f8 e8 c0 30       	r3 = sp + 192
    b60e:    a0 d5             	r1_r0 = r11_r10  #			  ## printf-stdarg.c:410:18
    b610:    80 20             		 [sp] = r0			  ## printf-stdarg.c:410:18
    b612:    bf ea 11 ff       	call -0x1de <ecvtbuf : b438 >			  ## printf-stdarg.c:410:18
    b616:    20 30             	r0 = [sp+192]			  ## printf-stdarg.c:411:21
    b618:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## printf-stdarg.c:411:27
    b61c:    fd 3f             	r5 += -0x1			  ## printf-stdarg.c:412:56
    b61e:    f1 fd 32 f8       	ifs (r1 < -0x4) goto 0x64 <.GJTIE56_0_0_+0x14C : b686 >			  ## printf-stdarg.c:412:56
    b622:    05 ee 30 10       	ifs (r1 > r5) goto 0x60 <.GJTIE56_0_0_+0x14C : b686 >
    b626:    b4 e0 d2 50       	r5 = r13 - r0			  ## printf-stdarg.c:417:23
    b62a:    40 20             	r0 = 0x0			  ## fcvt.c:148:12
    b62c:    52 d6             	r2 = r5  #			  ## fcvt.c:148:12
    b62e:    80 22             		 [sp+8] = r0			  ## fcvt.c:148:12
    b630:    e8 9b             	r0 = sp + 123			  ## fcvt.c:148:12
    b632:    80 21             	[sp+4] = r0			  ## fcvt.c:148:12
    b634:    f8 e8 bc 00       	r0 = sp + 188			  ## fcvt.c:148:12
    b638:    f8 e8 c0 30       	r3 = sp + 192
    b63c:    a0 d5             	r1_r0 = r11_r10  #			  ## fcvt.c:148:12
    b63e:    80 20             		 [sp] = r0			  ## fcvt.c:148:12
    b640:    bf ea 0e fe       	call -0x3e4 <cvt : b260 >			  ## fcvt.c:148:12
    b644:    22 2f             	r2 = [sp+188]			  ## printf-stdarg.c:460:13
    b646:    a9 8b             	r1 = sp + 43
    b648:    b2 e8 00 80       	if (r2 != 0x0) {
    b64c:    49 2d             		r1 = 0x2d			  ## printf-stdarg.c:461:25
    b64e:    de e9 2b 10       		b[sp+43] = r1			  ## printf-stdarg.c:461:25
    b652:    01 26             		r1 = [sp+24]
                               	}			  ## printf-stdarg.c:461:25
    b654:    08 40             	r0 = b[r0+0x0] (u)			  ## printf-stdarg.c:463:13
    b656:    4e 2e             	r6 = 0x2e
    b658:    4f 30             	r7 = 0x30
    b65a:    00 f8 e9 00       	if (r0 == 0x0) goto 0x1d2 <.GJTIE56_0_0_+0x2F6 : b830 >
    b65e:    23 30             	r3 = [sp+192]			  ## printf-stdarg.c:464:17
    b660:    0b ff 01 30 3b 01 	ifs (r3 < 0x1) goto 0x276 <.GJTIE56_0_0_+0x3A2 : b8dc >
    b666:    42 20             	r2 = 0x0
    b668:    04 8c             	goto 0x18 <.GJTIE56_0_0_+0x148 : b682 >
    b66a:    23 30             	r3 = [sp+192]			  ## printf-stdarg.c:476:35
    b66c:    12 e8 00 83       	if (r2 == r3) {
    b670:    e8 9b             		r0 = sp + 123
    b672:    d8 ee 00 02       		r0 = b[r0+r2] (u)
    b676:    96 07             		b[r1++=0x1] = r6
                               	}			  ## printf-stdarg.c:477:37
    b678:    90 07             	b[r1++=0x1] = r0			  ## printf-stdarg.c:479:33
    b67a:    e8 9b             	r0 = sp + 123			  ## printf-stdarg.c:479:33
    b67c:    20 18             	r0 += r2			  ## printf-stdarg.c:479:30
    b67e:    08 41             	r0 = b[r0+0x1] (u)			  ## printf-stdarg.c:479:30
    b680:    c2 21             	r2 += 0x1			  ## printf-stdarg.c:476:29
    b682:    f0 53             	if (r0 != 0) goto -0x1a <.GJTIE56_0_0_+0x130 : b66a >
    b684:    24 99             	goto 0xb2 <.GJTIE56_0_0_+0x1FE : b738 >
    b686:    e8 9b             	r0 = sp + 123
    b688:    80 21             	[sp+4] = r0			  ## printf-stdarg.c:422:18
    b68a:    f8 e8 bc 00       	r0 = sp + 188			  ## printf-stdarg.c:422:18
    b68e:    5a 81             	r2 = r5 + 0x1			  ## printf-stdarg.c:422:43
    b690:    f8 e8 c0 30       	r3 = sp + 192			  ## printf-stdarg.c:422:43
    b694:    a0 d5             	r1_r0 = r11_r10  #			  ## printf-stdarg.c:422:18
    b696:    80 20             		 [sp] = r0			  ## printf-stdarg.c:422:18
    b698:    bf ea ce fe       	call -0x264 <ecvtbuf : b438 >			  ## printf-stdarg.c:422:18
    b69c:    22 2f             	r2 = [sp+188]			  ## printf-stdarg.c:424:13
    b69e:    a9 8b             	r1 = sp + 43
    b6a0:    b2 e8 00 80       	if (r2 != 0x0) {
    b6a4:    49 2d             		r1 = 0x2d			  ## printf-stdarg.c:425:25
    b6a6:    de e9 2b 10       		b[sp+43] = r1			  ## printf-stdarg.c:425:25
    b6aa:    01 26             		r1 = [sp+24]
                               	}			  ## printf-stdarg.c:425:25
    b6ac:    08 40             	r0 = b[r0+0x0] (u)			  ## printf-stdarg.c:427:23
    b6ae:    98 40             	b[r1+0x0] = r0			  ## printf-stdarg.c:427:21
    b6b0:    1e 81             	r6 = r1 + 0x1			  ## printf-stdarg.c:427:18
    b6b2:    35 ed 01 80       	ifs (r5 >= 0x1) {
    b6b6:    48 2e             		r0 = 0x2e			  ## printf-stdarg.c:429:25
    b6b8:    e8 40             		b[r6+0x0] = r0			  ## printf-stdarg.c:429:25
    b6ba:    1e 82             		r6 = r1 + 0x2
                               	}			  ## printf-stdarg.c:429:22
    b6bc:    60 d6             	r0 = r6  #			  ## printf-stdarg.c:431:9
    b6be:    01 25             		 r1 = [sp+20]			  ## printf-stdarg.c:431:9
    b6c0:    52 16             	r2 = r5			  ## printf-stdarg.c:431:9
    b6c2:    80 ff 74 8a ff ff 	call -0x758c <memmove : 413c >			  ## printf-stdarg.c:431:9
    b6c8:    50 25             	r0 = 0x45			  ## printf-stdarg.c:433:23
    b6ca:    37 e8 00 00       	if (r7 == 0x0) {			  ## printf-stdarg.c:433:23
    b6ce:    58 25             		r0 = 0x65
                               	}			  ## printf-stdarg.c:433:23
    b6d0:    65 18             	r5 += r6			  ## printf-stdarg.c:432:16
    b6d2:    82 d4             	r3_r2 = 0  #			  ## printf-stdarg.c:438:13
    b6d4:    d8 40             		 b[r5+0x0] = r0			  ## printf-stdarg.c:433:21
    b6d6:    a0 15             	r1_r0 = r11_r10			  ## printf-stdarg.c:438:13
    b6d8:    80 ff 44 c7 00 00 	call 0xc744 <__nedf2 : 17e22 >			  ## printf-stdarg.c:438:13
    b6de:    11 3f             	r1 = -0x1			  ## printf-stdarg.c:438:13
    b6e0:    30 e8 00 00       	if (r0 == 0x0) {			  ## printf-stdarg.c:438:13
    b6e4:    01 16             		r1 = r0
                               	}			  ## printf-stdarg.c:438:13
    b6e6:    22 30             	r2 = [sp+192]			  ## printf-stdarg.c:435:13
    b6e8:    30 e1 ff 2f       	r0 = r2 + -0x1			  ## printf-stdarg.c:442:25
    b6ec:    b2 e8 00 00       	if (r2 != 0x0) {
    b6f0:    01 16             		r1 = r0
                               	}			  ## printf-stdarg.c:435:13
    b6f2:    58 82             	r0 = r5 + 0x2
    b6f4:    b1 ee ff af       	ifs (r1 <= -0x1) {
    b6f8:    4a 2d             		r2 = 0x2d			  ## printf-stdarg.c:446:25
    b6fa:    da 41             		b[r5+0x1] = r2			  ## printf-stdarg.c:446:25
    b6fc:    a1 e0 00 10       		r1 = 0x0 - r1
                               	} else {			  ## printf-stdarg.c:447:19
    b700:    4a 2b             		r2 = 0x2b			  ## printf-stdarg.c:449:25
    b702:    da 41             		b[r5+0x1] = r2
                               	}			  ## printf-stdarg.c:449:25
    b704:    46 2a             	r6 = 0xa			  ## printf-stdarg.c:449:25
    b706:    f4 e1 11 26       	r2 = r1 / r6 (s)			  ## printf-stdarg.c:452:26
    b70a:    e3 e1 0a 20       	r3 = r2 * 0xA			  ## printf-stdarg.c:452:26
    b70e:    9b 1e             	r3 = r1 - r3			  ## printf-stdarg.c:452:26
    b710:    cb 30             	r3 += 0x30			  ## printf-stdarg.c:452:32
    b712:    f4 f1 21 36       	r3 = r2 / r6 (s)  #			  ## printf-stdarg.c:454:26
    b716:    8b 42             		 b[r0+0x2] = r3			  ## printf-stdarg.c:452:19
    b718:    e3 e1 0a 30       	r3 = r3 * 0xA			  ## printf-stdarg.c:454:26
    b71c:    aa 1e             	r2 = r2 - r3			  ## printf-stdarg.c:454:26
    b71e:    ca 30             	r2 += 0x30			  ## printf-stdarg.c:454:32
    b720:    8a 41             	b[r0+0x1] = r2			  ## printf-stdarg.c:454:19
    b722:    5a 24             	r2 = 0x64			  ## printf-stdarg.c:455:19
    b724:    f4 e1 11 12       	r1 = r1 / r2 (s)			  ## printf-stdarg.c:455:19
    b728:    f4 e1 11 26       	r2 = r1 / r6 (s)			  ## printf-stdarg.c:456:26
    b72c:    e2 e1 0a 20       	r2 = r2 * 0xA			  ## printf-stdarg.c:456:26
    b730:    91 1e             	r1 = r1 - r2			  ## printf-stdarg.c:456:26
    b732:    c9 30             	r1 += 0x30			  ## printf-stdarg.c:456:32
    b734:    d9 42             	b[r5+0x2] = r1			  ## printf-stdarg.c:456:19
    b736:    09 83             	r1 = r0 + 0x3			  ## printf-stdarg.c:457:16
    b738:    c2 14             	r10 = 0
    b73a:    52 ee 10 a0       	b[r1+0x0] = r10			  ## printf-stdarg.c:493:14
    b73e:    5f e8 89 28       	if ((r15 & 0x20) == 0) goto 0x112 <.GJTIE56_0_0_+0x31A : b854 >			  ## printf-stdarg.c:493:14
    b742:    8d f8 87 00       	if (r13 != 0x0) goto 0x10e <.GJTIE56_0_0_+0x31A : b854 >
    b746:    ad 8b             	r5 = sp + 43
    b748:    04 81             	goto 0x2 <.GJTIE56_0_0_+0x212 : b74c >
    b74a:    c5 21             	r5 += 0x1			  ## printf-stdarg.c:505:16
    b74c:    58 40             	r0 = b[r5+0x0] (u)			  ## printf-stdarg.c:498:12
    b74e:    30 5e             	if (r0 == 0) goto 0xfc <.GJTIE56_0_0_+0x312 : b84c >			  ## printf-stdarg.c:498:5
    b750:    00 f8 80 5c       	if (r0 == 0x2e) goto 0x100 <.GJTIE56_0_0_+0x31A : b854 >
    b754:    00 f8 02 8a       	if (r0 == 0x45) goto 0x4 <.GJTIE56_0_0_+0x222 : b75c >
    b758:    80 f8 f7 cb       	if (r0 != 0x65) goto -0x12 <.GJTIE56_0_0_+0x210 : b74a >
    b75c:    50 16             	r0 = r5			  ## printf-stdarg.c:509:17
    b75e:    80 ff 9e 8c ff ff 	call -0x7362 <strlen : 4402 >			  ## printf-stdarg.c:509:17
    b764:    04 85             	goto 0xa <.GJTIE56_0_0_+0x236 : b770 >
    b766:    51 16             	r1 = r5			  ## printf-stdarg.c:511:29
    b768:    dc ee 10 20       	r2 = b[++r1=r0] (u)			  ## printf-stdarg.c:511:29
    b76c:    9a 41             	b[r1+0x1] = r2			  ## printf-stdarg.c:511:27
    b76e:    f8 3f             	r0 += -0x1			  ## printf-stdarg.c:512:15
    b770:    00 fd f9 03       	ifs (r0 >= 0x1) goto -0xe <.GJTIE56_0_0_+0x22C : b766 >
    b774:    48 2e             	r0 = 0x2e			  ## printf-stdarg.c:515:18
    b776:    d8 40             	b[r5+0x0] = r0			  ## printf-stdarg.c:515:18
    b778:    34 8d             	goto 0xda <.GJTIE56_0_0_+0x31A : b854 >			  ## printf-stdarg.c:515:18
    b77a:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:252:32
    b77c:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:252:32
    b77e:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:252:32
    b780:    00 60             	r0 = [r0+0x0] 			  ## printf-stdarg.c:252:32
    b782:    de e9 1e 00       	b[sp+30] = r0			  ## printf-stdarg.c:252:24
    b786:    00 24             	r0 = [sp+16]			  ## printf-stdarg.c:253:24
    b788:    52 ee 01 a0       	b[r0+0x1] = r10			  ## printf-stdarg.c:253:24
    b78c:    8a 9e             	r2 = sp + 30			  ## printf-stdarg.c:253:24
    b78e:    87 20             	[sp] = r7			  ## printf-stdarg.c:254:23
    b790:    14 8e             	goto 0x5c <.GJTIE56_0_0_+0x2B4 : b7ee >			  ## printf-stdarg.c:254:23
    b792:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:199:40
    b794:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:199:40
    b796:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:199:40
    b798:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:199:40
    b79a:    58 21             	r0 = 0x61			  ## printf-stdarg.c:199:23
    b79c:    80 23             	[sp+12] = r0			  ## printf-stdarg.c:199:23
    b79e:    87 22             	[sp+8] = r7			  ## printf-stdarg.c:199:23
    b7a0:    d4 e9 05 80       	[sp+4] = r8			  ## printf-stdarg.c:199:23
    b7a4:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:199:23
    b7a6:    40 21             	r0 = 0x1			  ## printf-stdarg.c:199:23
    b7a8:    80 20             	[sp] = r0			  ## printf-stdarg.c:199:23
    b7aa:    14 93             	goto 0x66 <.GJTIE56_0_0_+0x2D8 : b812 >			  ## printf-stdarg.c:199:23
    b7ac:    68 41             	r0 = b[r6+0x1] (u)			  ## printf-stdarg.c:202:39
    b7ae:    00 f8 ab f0       	if (r0 == 0x78) goto 0x156 <.GJTIE56_0_0_+0x3CE : b908 >			  ## printf-stdarg.c:202:17
    b7b2:    00 f8 b4 d8       	if (r0 == 0x6c) goto 0x168 <.GJTIE56_0_0_+0x3E4 : b91e >
    b7b6:    00 f8 c2 ea       	if (r0 == 0x75) goto 0x184 <.GJTIE56_0_0_+0x404 : b93e >
    b7ba:    01 ff 64 00 bd fe 	if (r0 != 0x64) goto -0x286 <.GJTIE56_0_0_ : b53a >
    b7c0:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:203:40
    b7c2:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:203:40
    b7c4:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:203:40
    b7c6:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:203:40
    b7c8:    58 21             	r0 = 0x61			  ## printf-stdarg.c:203:23
    b7ca:    80 23             	[sp+12] = r0			  ## printf-stdarg.c:203:23
    b7cc:    87 22             	[sp+8] = r7			  ## printf-stdarg.c:203:23
    b7ce:    d4 e9 05 80       	[sp+4] = r8			  ## printf-stdarg.c:203:23
    b7d2:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:203:23
    b7d4:    40 21             	r0 = 0x1			  ## printf-stdarg.c:203:23
    b7d6:    80 20             	[sp] = r0			  ## printf-stdarg.c:203:23
    b7d8:    54 9e             	goto 0x17c <.GJTIE56_0_0_+0x41C : b956 >			  ## printf-stdarg.c:203:23
    b7da:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:194:44
    b7dc:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:194:44
    b7de:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:194:44
    b7e0:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:194:44
    b7e2:    87 20             	[sp] = r7			  ## printf-stdarg.c:195:23
    b7e4:    32 e8 00 00       	if (r2 == 0x0) {			  ## printf-stdarg.c:195:23
    b7e8:    c2 ff f4 f5 01 00 		r2 = 0x1f5f4
                               	} <sin_win_tab2+0x200 : 1f5f4 >			  ## printf-stdarg.c:195:40
    b7ee:    40 16             	r0 = r4
    b7f0:    c1 16             	r1 = r12
    b7f2:    83 16             	r3 = r8
    b7f4:    bf ea 95 fc       	call -0x6d6 <prints : b122 >
    b7f8:    27 8c             	goto -0x368 <print+0x42 : b492 >
    b7fa:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:236:40
    b7fc:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:236:40
    b7fe:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:236:40
    b800:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:236:40
    b802:    58 21             	r0 = 0x61			  ## printf-stdarg.c:236:23
    b804:    80 23             	[sp+12] = r0			  ## printf-stdarg.c:236:23
    b806:    87 22             	[sp+8] = r7			  ## printf-stdarg.c:236:23
    b808:    d4 e9 05 80       	[sp+4] = r8			  ## printf-stdarg.c:236:23
    b80c:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:236:23
    b80e:    d4 e9 01 a0       	[sp] = r10
    b812:    40 16             	r0 = r4
    b814:    c1 16             	r1 = r12
    b816:    bf ea c5 fc       	call -0x676 <printi : b1a4 >
    b81a:    17 9b             	goto -0x38a <print+0x42 : b492 >
    b81c:    68 41             	r0 = b[r6+0x1] (u)			  ## printf-stdarg.c:230:39
    b81e:    01 ff 58 00 8b fe 	if (r0 != 0x58) goto -0x2ea <.GJTIE56_0_0_ : b53a >			  ## printf-stdarg.c:230:39
    b824:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:231:40
    b826:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:231:40
    b828:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:231:40
    b82a:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:231:40
    b82c:    50 21             	r0 = 0x41			  ## printf-stdarg.c:231:23
    b82e:    34 91             	goto 0xe2 <.GJTIE56_0_0_+0x3D8 : b912 >			  ## printf-stdarg.c:231:23
    b830:    9f 40             	b[r1+0x0] = r7			  ## printf-stdarg.c:483:25
    b832:    18 81             	r0 = r1 + 0x1			  ## printf-stdarg.c:483:22
    b834:    85 fd 66 02       	ifs (r5 < 0x1) goto 0xcc <.GJTIE56_0_0_+0x3CA : b904 >
    b838:    52 d6             	r2 = r5  #
    b83a:    8e 40             		 b[r0+0x0] = r6			  ## printf-stdarg.c:485:29
    b83c:    18 82             	r0 = r1 + 0x2			  ## printf-stdarg.c:485:26
    b83e:    04 82             	goto 0x4 <.GJTIE56_0_0_+0x30A : b844 >
    b840:    87 07             	b[r0++=0x1] = r7			  ## printf-stdarg.c:487:33
    b842:    fa 3f             	r2 += -0x1			  ## printf-stdarg.c:486:17
    b844:    f2 5d             	if (r2 != 0) goto -0x6 <.GJTIE56_0_0_+0x306 : b840 >
    b846:    18 1d             	r0 = r1 + r5			  ## printf-stdarg.c:486:22
    b848:    09 82             	r1 = r0 + 0x2			  ## printf-stdarg.c:486:22
    b84a:    b7 96             	goto -0x114 <.GJTIE56_0_0_+0x1FE : b738 >			  ## printf-stdarg.c:486:22
    b84c:    48 2e             	r0 = 0x2e			  ## printf-stdarg.c:517:21
    b84e:    d8 40             	b[r5+0x0] = r0			  ## printf-stdarg.c:517:21
    b850:    52 ee 51 a0       	b[r5+0x1] = r10			  ## printf-stdarg.c:518:18
    b854:    a8 8b             	r0 = sp + 43
    b856:    80 ff a6 8b ff ff 	call -0x745a <strlen : 4402 >			  ## printf-stdarg.c:595:9
    b85c:    05 16             	r5 = r0			  ## printf-stdarg.c:595:9
    b85e:    b4 e0 82 75       	r7 = r8 - r5			  ## printf-stdarg.c:598:10
    b862:    61 ff 12 f0 0a 00 	if ((r15 & 0x12) != 0) goto 0x14 <.GJTIE56_0_0_+0x342 : b87c >
    b868:    04 86             	goto 0xc <.GJTIE56_0_0_+0x33C : b876 >
    b86a:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:599:51
    b86c:    41 20             	r1 = 0x0			  ## printf-stdarg.c:600:13
    b86e:    4a 20             	r2 = 0x20			  ## printf-stdarg.c:600:13
    b870:    40 16             	r0 = r4			  ## printf-stdarg.c:600:13
    b872:    bf ea 42 fc       	call -0x77c <printchar : b0fa >			  ## printf-stdarg.c:600:13
    b876:    07 fd f8 03       	ifs (r7 >= 0x1) goto -0x10 <.GJTIE56_0_0_+0x330 : b86a >
    b87a:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:544:46
    b87c:    b9 e8 00 c0       	if (r9 != 0x0) {
    b880:    41 20             		r1 = 0x0			  ## printf-stdarg.c:603:9
    b882:    40 16             		r0 = r4			  ## printf-stdarg.c:603:9
    b884:    92 16             		r2 = r9			  ## printf-stdarg.c:603:9
    b886:    bf ea 38 fc       		call -0x790
                               	} <printchar : b0fa >			  ## printf-stdarg.c:603:9
    b88a:    5f e8 10 22       	if ((r15 & 0x10) != 0) goto 0x20 <.GJTIE56_0_0_+0x374 : b8ae >			  ## printf-stdarg.c:603:9
    b88e:    c0 e1 f3 00       	r0 = r15 << 0x3			  ## printf-stdarg.c:556:9
    b892:    60 e1 10 00       	r0 = r0 & 0x10			  ## printf-stdarg.c:556:9
    b896:    46 e1 20 00       	r6 = r0 | 0x20			  ## printf-stdarg.c:556:9
    b89a:    04 86             	goto 0xc <.GJTIE56_0_0_+0x36E : b8a8 >			  ## printf-stdarg.c:556:9
    b89c:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:605:38
    b89e:    41 20             	r1 = 0x0			  ## printf-stdarg.c:606:13
    b8a0:    40 16             	r0 = r4			  ## printf-stdarg.c:606:13
    b8a2:    62 16             	r2 = r6			  ## printf-stdarg.c:606:13
    b8a4:    bf ea 29 fc       	call -0x7ae <printchar : b0fa >			  ## printf-stdarg.c:606:13
    b8a8:    07 fd f8 03       	ifs (r7 >= 0x1) goto -0x10 <.GJTIE56_0_0_+0x362 : b89c >
    b8ac:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:544:46
    b8ae:    46 20             	r6 = 0x0
    b8b0:    04 88             	goto 0x10 <.GJTIE56_0_0_+0x388 : b8c2 >
    b8b2:    a8 8b             	r0 = sp + 43
    b8b4:    d8 ee 02 26       	r2 = b[r0+r6] (s)			  ## printf-stdarg.c:609:27
    b8b8:    41 20             	r1 = 0x0			  ## printf-stdarg.c:609:9
    b8ba:    40 16             	r0 = r4			  ## printf-stdarg.c:609:9
    b8bc:    bf ea 1d fc       	call -0x7c6 <printchar : b0fa >			  ## printf-stdarg.c:609:9
    b8c0:    c6 21             	r6 += 0x1			  ## printf-stdarg.c:608:26
    b8c2:    85 ed f6 61       	ifs (r6 < r5) goto -0x14 <.GJTIE56_0_0_+0x378 : b8b2 >
    b8c6:    04 86             	goto 0xc <.GJTIE56_0_0_+0x39A : b8d4 >
    b8c8:    41 20             	r1 = 0x0			  ## printf-stdarg.c:612:9
    b8ca:    4a 20             	r2 = 0x20			  ## printf-stdarg.c:612:9
    b8cc:    40 16             	r0 = r4			  ## printf-stdarg.c:612:9
    b8ce:    bf ea 14 fc       	call -0x7d8 <printchar : b0fa >			  ## printf-stdarg.c:612:9
    b8d2:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:611:17
    b8d4:    07 fd f8 03       	ifs (r7 >= 0x1) goto -0x10 <.GJTIE56_0_0_+0x38E : b8c8 >
    b8d8:    4e 18             	r14 += r4			  ## printf-stdarg.c:260:20
    b8da:    17 8f             	goto -0x3a2 <.GJTIE56_0_0_ : b53a >
    b8dc:    9f 40             	b[r1+0x0] = r7			  ## printf-stdarg.c:465:29
    b8de:    9e 41             	b[r1+0x1] = r6			  ## printf-stdarg.c:466:29
    b8e0:    c1 22             	r1 += 0x2			  ## printf-stdarg.c:466:26
    b8e2:    42 20             	r2 = 0x0
    b8e4:    04 84             	goto 0x8 <.GJTIE56_0_0_+0x3B4 : b8ee >
    b8e6:    23 30             	r3 = [sp+192]
    b8e8:    d8 ee 11 72       	b[r1+r2] = r7			  ## printf-stdarg.c:468:33
    b8ec:    c2 21             	r2 += 0x1			  ## printf-stdarg.c:467:50
    b8ee:    a3 e0 00 30       	r3 = 0x0 - r3			  ## printf-stdarg.c:467:37
    b8f2:    83 ed f8 21       	ifs (r2 < r3) goto -0x10 <.GJTIE56_0_0_+0x3AC : b8e6 >			  ## printf-stdarg.c:467:17
    b8f6:    21 d8             	r1 += r2  #			  ## printf-stdarg.c:396:41
    b8f8:    02 25             		 r2 = [sp+20]			  ## printf-stdarg.c:470:24
    b8fa:    04 82             	goto 0x4 <.GJTIE56_0_0_+0x3C6 : b900 >
    b8fc:    90 07             	b[r1++=0x1] = r0			  ## printf-stdarg.c:471:33
    b8fe:    20 07             	r0 = b[r2++=0x1] (u)
    b900:    f0 5d             	if (r0 != 0) goto -0x6 <.GJTIE56_0_0_+0x3C2 : b8fc >
    b902:    87 9a             	goto -0x1cc <.GJTIE56_0_0_+0x1FE : b738 >
    b904:    01 16             	r1 = r0
    b906:    87 98             	goto -0x1d0 <.GJTIE56_0_0_+0x1FE : b738 >
    b908:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:222:40
    b90a:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:222:40
    b90c:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:222:40
    b90e:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:222:40
    b910:    58 21             	r0 = 0x61			  ## printf-stdarg.c:222:23
    b912:    80 23             	[sp+12] = r0
    b914:    87 22             	[sp+8] = r7
    b916:    d4 e9 05 80       	[sp+4] = r8
    b91a:    43 30             	r3 = 0x10
    b91c:    04 9a             	goto 0x34 <.GJTIE56_0_0_+0x418 : b952 >
    b91e:    68 42             	r0 = b[r6+0x2] (u)			  ## printf-stdarg.c:207:67
    b920:    80 f8 21 c8       	if (r0 != 0x64) goto 0x42 <.GJTIE56_0_0_+0x42C : b966 >			  ## printf-stdarg.c:207:17
    b924:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:208:40
    b926:    09 88             	r1 = r0 + 0x8			  ## printf-stdarg.c:208:40
    b928:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:208:40
    b92a:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:208:40
    b92c:    58 21             	r0 = 0x61			  ## printf-stdarg.c:208:23
    b92e:    80 23             	[sp+12] = r0			  ## printf-stdarg.c:208:23
    b930:    87 22             	[sp+8] = r7			  ## printf-stdarg.c:208:23
    b932:    d4 e9 05 80       	[sp+4] = r8			  ## printf-stdarg.c:208:23
    b936:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:208:23
    b938:    40 21             	r0 = 0x1			  ## printf-stdarg.c:208:23
    b93a:    80 20             	[sp] = r0			  ## printf-stdarg.c:208:23
    b93c:    14 84             	goto 0x48 <.GJTIE56_0_0_+0x44C : b986 >			  ## printf-stdarg.c:208:23
    b93e:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:240:40
    b940:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:240:40
    b942:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:240:40
    b944:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:240:40
    b946:    58 21             	r0 = 0x61			  ## printf-stdarg.c:240:23
    b948:    80 23             	[sp+12] = r0			  ## printf-stdarg.c:240:23
    b94a:    87 22             	[sp+8] = r7			  ## printf-stdarg.c:240:23
    b94c:    d4 e9 05 80       	[sp+4] = r8			  ## printf-stdarg.c:240:23
    b950:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:240:23
    b952:    d4 e9 01 a0       	[sp] = r10
    b956:    40 16             	r0 = r4
    b958:    c1 16             	r1 = r12
    b95a:    bf ea 23 fc       	call -0x7ba <printi : b1a4 >
    b95e:    a9 84             	r1 = sp + 36
    b960:    c0 eb 01 10       	[r1+0x0] += 0x1
    b964:    c6 96             	goto -0x4d4 <print+0x42 : b492 >
    b966:    68 42             	r0 = b[r6+0x2] (u)			  ## printf-stdarg.c:244:67
    b968:    01 ff 75 00 e6 fd 	if (r0 != 0x75) goto -0x434 <.GJTIE56_0_0_ : b53a >			  ## printf-stdarg.c:244:67
    b96e:    00 28             	r0 = [sp+32]			  ## printf-stdarg.c:245:40
    b970:    09 88             	r1 = r0 + 0x8			  ## printf-stdarg.c:245:40
    b972:    81 28             	[sp+32] = r1			  ## printf-stdarg.c:245:40
    b974:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:245:40
    b976:    58 21             	r0 = 0x61			  ## printf-stdarg.c:245:23
    b978:    80 23             	[sp+12] = r0			  ## printf-stdarg.c:245:23
    b97a:    87 22             	[sp+8] = r7			  ## printf-stdarg.c:245:23
    b97c:    d4 e9 05 80       	[sp+4] = r8			  ## printf-stdarg.c:245:23
    b980:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:245:23
    b982:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:245:23
    b986:    40 16             	r0 = r4
    b988:    c1 16             	r1 = r12
    b98a:    bf ea 0b fc       	call -0x7ea <printi : b1a4 >
    b98e:    a9 84             	r1 = sp + 36
    b990:    c0 eb 02 10       	[r1+0x0] += 0x2
    b994:    b6 9e             	goto -0x504 <print+0x42 : b492 >
    b996:    28 40             	r0 = b[r2+0x0] (u)			  ## printf-stdarg.c:152:12
    b998:    00 ff 25 00 6a fd 	if (r0 == 0x25) goto -0x52c <print+0x22 : b472 >			  ## printf-stdarg.c:152:5
    b99e:    01 ff 00 00 72 fd 	if (r0 != 0x0) goto -0x51c <print+0x38 : b488 >
    b9a4:    b4 e8 00 80       	if (r4 != 0x0) {
    b9a8:    40 60             		r0 = [r4+0x0] 			  ## printf-stdarg.c:280:10
    b9aa:    41 20             		r1 = 0x0			  ## printf-stdarg.c:280:15
    b9ac:    89 40             		b[r0+0x0] = r1
                               	}			  ## printf-stdarg.c:280:15
    b9ae:    e0 16             	r0 = r14			  ## printf-stdarg.c:283:5
    b9b0:    22 91             	sp += 0xc4			  ## printf-stdarg.c:283:5
    b9b2:    5f 04             	{pc, r15-r4} = [sp++]			  ## printf-stdarg.c:283:5


printf:
    b9b4:    61 04             	[--sp] = {r3-r1}			  ## printf-stdarg.c:331:0
    b9b6:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:331:0
    b9b8:    e2 9f             	sp += -0x4			  ## printf-stdarg.c:331:0
    b9ba:    8b 8c             	r3 = sp + 12			  ## printf-stdarg.c:331:0
    b9bc:    04 d6             	r4 = r0  #			  ## printf-stdarg.c:331:0
    b9be:    83 20             		 [sp] = r3			  ## printf-stdarg.c:335:5
    b9c0:    80 14             	r1_r0 = 0			  ## printf-stdarg.c:365:11
    b9c2:    42 16             	r2 = r4			  ## printf-stdarg.c:365:11
    b9c4:    bf ea 44 fd       	call -0x578 <print : b450 >			  ## printf-stdarg.c:365:11
    b9c8:    02 81             	sp += 0x4
    b9ca:    34 04             	{rets, r4} = [sp++]			  ## printf-stdarg.c:368:5
    b9cc:    02 83             	sp += 0xc			  ## printf-stdarg.c:368:5
    b9ce:    80 00             	rts			  ## printf-stdarg.c:368:5


sfc_boot:
    b9d0:    78 04             	[--sp] = {rets, r8-r4}			  ## sfc.c:138:0
    b9d2:    c3 ff 00 1c fd 00 	r3 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## sfc.c:138:0
    b9d8:    00 ef 08 30       	[r3+0x0] |= 0x8			  ## sfc.c:72:18
    b9dc:    c4 ff 14 60 fd 00 	r4 = 0xfd6014 <RAM_LIMIT_H+0xE36014 : fd6014 >			  ## sfc.c:72:18
    b9e2:    c0 ef 00 4a       	[r4+0x0] &= 0xFFF7FFFF			  ## sfc.c:73:20
    b9e6:    c0 ef 01 30       	[r3+0x0] &= 0xFFFFFFFE			  ## sfc.c:75:18
    b9ea:    27 16             	r7 = r2			  ## sfc.c:75:18
    b9ec:    15 16             	r5 = r1
    b9ee:    06 16             	r6 = r0
    b9f0:    bf ea d3 f9       	call -0xc5a <spi_get_port : ad9a >			  ## sfc.c:77:9
    b9f4:    c8 ff 29 ec 01 00 	r8 = 0x1ec29 <silk_uniform8_iCDF+0x7 : 1ec28 >			  ## sfc.c:77:9
    b9fa:    00 48             	if (r0 == 0) goto 0x10 <sfc_boot+0x3C : ba0c >			  ## sfc.c:77:9
    b9fc:    00 e1 58 80       	r0 = r8 + 0x58			  ## sfc.c:81:9
    ba00:    80 ff b0 f6 ff ff 	call -0x950 <puts : b0b6 >			  ## sfc.c:81:9
    ba06:    40 60             	r0 = [r4+0x0] 			  ## sfc.c:82:24
    ba08:    30 30             	r0 |= 0x10000			  ## sfc.c:82:24
    ba0a:    04 87             	goto 0xe <sfc_boot+0x4A : ba1a >			  ## sfc.c:82:24
    ba0c:    00 e1 4b 80       	r0 = r8 + 0x4b			  ## sfc.c:78:9
    ba10:    80 ff a0 f6 ff ff 	call -0x960 <puts : b0b6 >			  ## sfc.c:78:9
    ba16:    40 60             	r0 = [r4+0x0] 			  ## sfc.c:79:24
    ba18:    b8 30             	r0 &= 0xfffeffff			  ## sfc.c:79:24
    ba1a:    c0 60             	[r4+0x0] = r0
    ba1c:    c4 ff 00 02 fe 00 	r4 = 0xfe0200 <RAM_LIMIT_H+0xE40200 : fe0200 >
    ba22:    40 ea 70 48       	[r4+0x0] = 0xF00000			  ## sfc.c:85:17
    ba26:    40 ea 00 40       	[r4+0x0] = 0x0			  ## sfc.c:86:17
    ba2a:    c7 61             	[r4+0x4] = r7			  ## sfc.c:88:18
    ba2c:    06 f8 0c 04       	if (r6 == 0x2) goto 0x18 <sfc_boot+0x78 : ba48 >			  ## sfc.c:92:9
    ba30:    86 f8 14 08       	if (r6 != 0x4) goto 0x28 <sfc_boot+0x8C : ba5c >
    ba34:    05 f8 21 08       	if (r5 == 0x4) goto 0x42 <sfc_boot+0xAA : ba7a >
    ba38:    05 f8 23 18       	if (r5 == 0xc) goto 0x46 <sfc_boot+0xB2 : ba82 >
    ba3c:    85 f8 19 10       	if (r5 != 0x8) goto 0x32 <sfc_boot+0xA2 : ba72 >
    ba40:    c0 ff 81 05 26 00 	r0 = 0x260581 <RAM_LIMIT_H+0xC0580 : 260580 >
    ba46:    14 88             	goto 0x50 <sfc_boot+0xC8 : ba98 >
    ba48:    05 f8 1f 08       	if (r5 == 0x4) goto 0x3e <sfc_boot+0xBA : ba8a >
    ba4c:    05 f8 21 18       	if (r5 == 0xc) goto 0x42 <sfc_boot+0xC2 : ba92 >
    ba50:    85 f8 0f 10       	if (r5 != 0x8) goto 0x1e <sfc_boot+0xA2 : ba72 >
    ba54:    c0 ff 81 04 24 00 	r0 = 0x240481 <RAM_LIMIT_H+0xA0480 : 240480 >
    ba5a:    04 9e             	goto 0x3c <sfc_boot+0xC8 : ba98 >
    ba5c:    b5 e8 08 50       	if (r5 != 0x8) {
    ba60:    00 ef 08 40       		[r4+0x0] |= 0x8			  ## sfc.c:120:25
    ba64:    c0 ff 89 00 20 00 		r0 = 0x200089
                               	} else { <RAM_LIMIT_H+0x60088 : 200088 >			  ## sfc.c:120:25
    ba6a:    c0 ff 89 01 28 00 		r0 = 0x280189
                               	} <RAM_LIMIT_H+0xE0188 : 280188 >			  ## sfc.c:120:25
    ba70:    04 93             	goto 0x26 <sfc_boot+0xC8 : ba98 >			  ## sfc.c:120:25
    ba72:    c0 ff 81 00 20 00 	r0 = 0x200081 <RAM_LIMIT_H+0x60080 : 200080 >
    ba78:    04 8f             	goto 0x1e <sfc_boot+0xC8 : ba98 >
    ba7a:    c0 ff 81 03 28 00 	r0 = 0x280381 <RAM_LIMIT_H+0xE0380 : 280380 >
    ba80:    04 8b             	goto 0x16 <sfc_boot+0xC8 : ba98 >
    ba82:    c0 ff 81 07 26 00 	r0 = 0x260781 <RAM_LIMIT_H+0xC0780 : 260780 >
    ba88:    04 87             	goto 0xe <sfc_boot+0xC8 : ba98 >
    ba8a:    c0 ff 81 02 28 00 	r0 = 0x280281 <RAM_LIMIT_H+0xE0280 : 280280 >
    ba90:    04 83             	goto 0x6 <sfc_boot+0xC8 : ba98 >
    ba92:    c0 ff 81 06 24 00 	r0 = 0x240681 <RAM_LIMIT_H+0xA0680 : 240680 >
    ba98:    64 e8 00 40       	[r4+0x0] |= r0			  ## sfc.c:130:17
    ba9c:    80 d6             	r0 = r8  #			  ## sfc.c:132:5
    ba9e:    41 60             		 r1 = [r4+0x0] 			  ## sfc.c:132:33
    baa0:    80 ff 0e ff ff ff 	call -0xf2 <printf : b9b4 >			  ## sfc.c:132:5
    baa6:    00 f1 12 80       	r0 = r8 + 0x12  #			  ## sfc.c:133:5
    baaa:    41 65             		 r1 = [r4+0x14] 			  ## sfc.c:133:34
    baac:    80 ff 02 ff ff ff 	call -0xfe <printf : b9b4 >			  ## sfc.c:133:5
    bab2:    00 f1 09 80       	r0 = r8 + 0x9  #			  ## sfc.c:134:5
    bab6:    41 63             		 r1 = [r4+0xc] 			  ## sfc.c:134:33
    bab8:    80 ff f6 fe ff ff 	call -0x10a <printf : b9b4 >			  ## sfc.c:134:5
    babe:    58 04             	{pc, r8-r4} = [sp++]			  ## sfc.c:140:1


L1iWaitCmdDone:
    bac0:    20 00             	csync			  ## cache.c:89:0
    bac2:    00 ab             	r0 = r0 << 0xb			  ## cache.c:90:5
    bac4:    c1 ff 00 f9 3f 00 	r1 = 0x3ff900 <RAM_LIMIT_H+0x25F900 : 3ff900 >
    baca:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cache.c:91:30
    bace:    52 e8 fc f3       	if ((r2 & 0x40000000) != 0) goto -0x8 <L1iWaitCmdDone+0xA : baca >			  ## cache.c:91:5
    bad2:    80 00             	rts			  ## cache.c:92:1


q32DSP_testclr:
    bad4:    c0 ff 78 fd 19 00 	r0 = 0x19fd78 <l1i_lock : 19fd78 >			  ## hwi.h:164:0
    bada:    41 20             	r1 = 0x0			  ## hwi.h:166:5
    badc:    89 40             	b[r0+0x0] = r1			  ## hwi.h:166:5
    bade:    80 00             	rts			  ## hwi.h:173:1


IcuInitial:
    bae0:    74 04             	[--sp] = {rets, r4}			  ## cache.c:166:0
    bae2:    64 e0 00 06       	r0 = cnum			  ## hwi.h:185:5
    bae6:    e3 00             	cli r3			  ## hwi.h:115:5
    bae8:    c1 ff 78 fd 19 00 	r1 = 0x19fd78 <l1i_lock : 19fd78 >			  ## hwi.h:152:5
    baee:    b1 00             	testset b[r1]			  ## hwi.h:152:5
    baf0:    40 e8 fd ff       	ifeq goto -0x6 <IcuInitial+0x10 : baf0 >			  ## hwi.h:152:5
    baf4:    01 ab             	r1 = r0 << 0xb			  ## cache.c:94:35
    baf6:    c2 ff 04 f9 3f 00 	r2 = 0x3ff904 <RAM_LIMIT_H+0x25F904 : 3ff904 >			  ## cache.c:94:35
    bafc:    c4 ff 10 00 00 ca 	r4 = 0xca000010 <RAM_LIMIT_H+0xC9E60010 : ca000010 >			  ## cache.c:94:35
    bb02:    d8 ec 1b 42       	[r1+r2<<2] = r4			  ## cache.c:94:35
    bb06:    61 9c             	call -0x48 <L1iWaitCmdDone : bac0 >			  ## cache.c:94:35
    bb08:    71 85             	call -0x36 <q32DSP_testclr : bad4 >			  ## cache.c:94:35
    bb0a:    f3 00             	sti r3			  ## hwi.h:121:5
    bb0c:    64 e0 00 06       	r0 = cnum			  ## hwi.h:185:5
    bb10:    00 ab             	r0 = r0 << 0xb			  ## cache.c:155:5
    bb12:    c1 ff 00 e4 ff 00 	r1 = 0xffe400 <RAM_LIMIT_H+0xE5E400 : ffe400 >			  ## cache.c:94:35
    bb18:    10 18             	r0 += r1			  ## cache.c:155:5
    bb1a:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## cache.c:155:27
    bb1e:    54 04             	{pc, r4} = [sp++]			  ## cache.c:170:1


DcuWaitIdle:
    bb20:    20 00             	csync			  ## cache.c:267:0
    bb22:    c0 ff 00 05 ff 00 	r0 = 0xff0500 <RAM_LIMIT_H+0xE50500 : ff0500 >			  ## cache.c:268:5
    bb28:    01 60             	r1 = [r0+0x0] 			  ## cache.c:269:22
    bb2a:    71 fe fd ff       	ifs (r1 > -0x1) goto -0x6 <DcuWaitIdle+0x8 : bb28 >			  ## cache.c:269:5
    bb2e:    80 00             	rts			  ## cache.c:270:1


DcuInitial:
    bb30:    10 04             	[--sp] = rets			  ## cache.c:287:0
    bb32:    64 e0 00 06       	r0 = cnum			  ## hwi.h:185:5
    bb36:    80 5b             	if (r0 != 0) goto 0x36 <DcuInitial+0x3E : bb6e >
    bb38:    71 93             	call -0x1a <DcuWaitIdle : bb20 >			  ## cache.c:282:5
    bb3a:    c0 ff 00 05 ff 00 	r0 = 0xff0500 <RAM_LIMIT_H+0xE50500 : ff0500 >			  ## cache.c:282:5
    bb40:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## cache.c:283:17
    bb44:    c1 ff 00 f8 37 00 	r1 = 0x37f800 <RAM_LIMIT_H+0x1DF800 : 37f800 >			  ## cache.c:283:17
    bb4a:    02 e1 00 12       	r2 = r1 + 0x200
    bb4e:    43 20             	r3 = 0x0
    bb50:    04 81             	goto 0x2 <DcuInitial+0x24 : bb54 >
    bb52:    93 05             	[r1++=0x4] = r3			  ## cache.c:293:18
    bb54:    82 e9 fd 11       	if (r1 < r2) goto -0x6 <DcuInitial+0x22 : bb52 >			  ## cache.c:292:9
    bb58:    21 e1 00 26       	r1 = r2 + -0x1a00
    bb5c:    42 20             	r2 = 0x0
    bb5e:    04 81             	goto 0x2 <DcuInitial+0x32 : bb62 >
    bb60:    92 05             	[r1++=0x4] = r2			  ## cache.c:296:18
    bb62:    93 ab             	r3 = r1 >> 0xb			  ## cache.c:295:9
    bb64:    03 ff fd 36 fb ff 	if (r3 < 0x6fd) goto -0xa <DcuInitial+0x30 : bb60 >			  ## cache.c:295:9
    bb6a:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## cache.c:277:17
    bb6e:    00 04             	pc = [sp++]			  ## cache.c:300:1


LZ4_decompress_generic:
    bb70:    7f 04             	[--sp] = {rets, r15-r4}			  ## lz4.c:421:0
    bb72:    e2 95             	sp += -0x2c			  ## lz4.c:421:0
    bb74:    d4 e9 78 d0       	r13 = [sp+120]			  ## lz4.c:421:0
    bb78:    49 e0 01 00       	r9 = 0x1 <mem_code_size : 0 >			  ## lz4.c:421:0
    bb7c:    2d e9 80 0b       	if (r13 >= 0x10000) {			  ## lz4.c:421:0
    bb80:    c1 14             		r9 = 0
                               	}			  ## lz4.c:435:56
    bb82:    d4 e9 60 c0       	r12 = [sp+96]			  ## lz4.c:435:56
    bb86:    c6 16             	r6 = r12			  ## lz4.c:434:40
    bb88:    b6 e8 01 00       	if (r6 != 0x1) {			  ## lz4.c:434:40
    bb8c:    46 20             		r6 = 0x0
                               	}			  ## lz4.c:434:40
    bb8e:    04 3a             	r4 = [sp+104]			  ## lz4.c:434:40
    bb90:    b4 f0 10 84       	r8 = r1 + r4  #			  ## lz4.c:428:22
    bb94:    05 39             		 r5 = [sp+100]			  ## lz4.c:428:22
    bb96:    9f 1c             	r7 = r1 + r3			  ## lz4.c:426:27
    bb98:    b5 e8 00 40       	if (r5 != 0x0) {
    bb9c:    34 e1 f4 7f       		r4 = r7 + -0xc			  ## lz4.c:439:44
    bba0:    35 e4 80 84       		r8 = umin(r8, r4)
                               	}			  ## lz4.c:439:9
    bba4:    83 43             	if (r3 != 0) goto 0x6 <LZ4_decompress_generic+0x3C : bbac >			  ## lz4.c:439:9
    bba6:    01 ff 00 c0 11 01 	if (r12 != 0x0) goto 0x222 <LZ4_decompress_generic+0x25E : bdce >
    bbac:    90 f1 62 69       	r6 = r6 & r9  #			  ## lz4.c:435:43
    bbb0:    04 3d             		 r4 = [sp+116]			  ## lz4.c:435:43
    bbb2:    d4 d8             	r4 += r13  #			  ## lz4.c:430:57
    bbb4:    86 2a             		 [sp+40] = r6			  ## lz4.c:430:57
    bbb6:    84 dc             	r4 = r0 + r2  #			  ## lz4.c:423:33
    bbb8:    84 24             		 [sp+16] = r4			  ## lz4.c:423:33
    bbba:    4f e0 01 00       	r15 = 0x1 <mem_code_size : 0 >			  ## lz4.c:445:23
    bbbe:    bc e8 00 00       	if (r12 != 0x0) {			  ## lz4.c:445:23
    bbc2:    c7 14             		r15 = 0
                               	}			  ## lz4.c:445:23
    bbc4:    83 43             	if (r3 != 0) goto 0x6 <LZ4_decompress_generic+0x5C : bbcc >			  ## lz4.c:445:23
    bbc6:    01 ff 00 f0 0b 01 	if (r15 != 0x0) goto 0x216 <LZ4_decompress_generic+0x272 : bde2 >
    bbcc:    32 f1 f4 7f       	r2 = r7 + -0xc  #
    bbd0:    85 22             		 [sp+8] = r5
    bbd2:    35 e8 00 00       	if (r5 == 0x0) {
    bbd6:    28 16             		r8 = r2
                               	}
    bbd8:    d4 e9 70 a0       	r10 = [sp+112]
    bbdc:    39 f1 f1 4f       	r9 = r4 + -0xf  #
    bbe0:    02 3b             		 r2 = [sp+108]
    bbe2:    32 f1 f8 7f       	r2 = r7 + -0x8  #
    bbe6:    82 29             		 [sp+36] = r2
    bbe8:    3e f1 fb 4f       	r14 = r4 + -0x5  #
    bbec:    82 26             		 [sp+24] = r2
    bbee:    32 f1 fb 7f       	r2 = r7 + -0x5  #
    bbf2:    87 23             		 [sp+12] = r7
    bbf4:    32 f1 f8 4f       	r2 = r4 + -0x8  #
    bbf8:    82 28             		 [sp+32] = r2
    bbfa:    14 d6             	r4 = r1  #
    bbfc:    84 21             		 [sp+4] = r4
    bbfe:    06 d6             	r6 = r0  #
    bc00:    82 27             		 [sp+28] = r2
    bc02:    81 20             	[sp] = r1
    bc04:    80 25             	[sp+20] = r0
    bc06:    04 95             	goto 0x2a <LZ4_decompress_generic+0xC2 : bc32 >
    bc08:    17 03             	rep 0x4 r7 {			  ## lz4.c:323:5
    bc0a:    10 07             		r0 = b[r1++=0x1] (u)			  ## lz4.c:323:5
    bc0c:    d0 07             		b[r5++=0x1] = r0
                               	}			  ## lz4.c:323:5
    bc0e:    f7 5c             	if (r7 != 0) goto -0x8 <LZ4_decompress_generic+0x98 : bc08 >			  ## lz4.c:323:5
    bc10:    04 90             	goto 0x20 <LZ4_decompress_generic+0xC2 : bc32 >			  ## lz4.c:323:5
    bc12:    72 d6             	r2 = r7  #			  ## lz4.c:534:17
    bc14:    00 24             		 r0 = [sp+16]			  ## lz4.c:534:37
    bc16:    b4 e0 02 1b       	r1 = r0 - r11			  ## lz4.c:534:37
    bc1a:    50 16             	r0 = r5			  ## lz4.c:534:17
    bc1c:    80 ff 1a 85 ff ff 	call -0x7ae6 <memmove : 413c >			  ## lz4.c:534:17
    bc22:    04 87             	goto 0xe <LZ4_decompress_generic+0xC2 : bc32 >
    bc24:    40 16             	r0 = r4			  ## lz4.c:549:21
    bc26:    a1 16             	r1 = r10			  ## lz4.c:549:21
    bc28:    72 16             	r2 = r7			  ## lz4.c:549:21
    bc2a:    80 ff 0c 85 ff ff 	call -0x7af4 <memmove : 413c >			  ## lz4.c:549:21
    bc30:    74 18             	r4 += r7			  ## lz4.c:550:24
    bc32:    50 ee 60 b0       	r11 = b[r6+0x0] (u)			  ## lz4.c:456:32
    bc36:    c0 e1 b4 78       	r7 = r11 >> 0x4			  ## lz4.c:457:30
    bc3a:    69 81             	r1 = r6 + 0x1			  ## lz4.c:456:35
    bc3c:    87 f8 1d 1e       	if (r7 != 0xf) goto 0x3a <LZ4_decompress_generic+0x10A : bc7a >
    bc40:    47 2f             	r7 = 0xf
    bc42:    1e 81             	r6 = r1 + 0x1			  ## lz4.c:460:24
    bc44:    42 21             	r2 = 0x1
    bc46:    16 e9 00 09       	if (r6 >= r9) {
    bc4a:    42 20             		r2 = 0x0
                               	}			  ## lz4.c:462:22
    bc4c:    19 40             	r1 = b[r1+0x0] (u)			  ## lz4.c:460:21
    bc4e:    17 18             	r7 += r1			  ## lz4.c:461:24
    bc50:    91 f8 04 fe       	if (r1 != 0xff) goto 0x8 <LZ4_decompress_generic+0xEC : bc5c >
    bc54:    90 e1 20 2f       	r2 = r2 | r15			  ## lz4.c:462:22
    bc58:    61 16             	r1 = r6			  ## lz4.c:462:22
    bc5a:    f2 53             	if (r2 != 0) goto -0x1a <LZ4_decompress_generic+0xD2 : bc42 >
    bc5c:    8c f8 0e 02       	if (r12 != 0x1) goto 0x1c <LZ4_decompress_generic+0x10C : bc7c >
    bc60:    72 1d             	r2 = r7 + r4
    bc62:    41 21             	r1 = 0x1
    bc64:    12 e9 00 07       	if (r2 >= r7) {
    bc68:    41 20             		r1 = 0x0
                               	}
    bc6a:    b1 55             	if (r1 != 0) goto 0xea <LZ4_decompress_generic+0x1E6 : bd56 >
    bc6c:    f2 1d             	r2 = r7 + r6
    bc6e:    41 21             	r1 = 0x1
    bc70:    12 e9 00 07       	if (r2 >= r7) {
    bc74:    41 20             		r1 = 0x0
                               	}
    bc76:    01 42             	if (r1 == 0) goto 0x4 <LZ4_decompress_generic+0x10C : bc7c >
    bc78:    34 8e             	goto 0xdc <LZ4_decompress_generic+0x1E6 : bd56 >
    bc7a:    16 16             	r6 = r1
    bc7c:    cd 1d             	r5 = r4 + r7			  ## lz4.c:472:18
    bc7e:    0c f8 07 00       	if (r12 == 0x0) goto 0xe <LZ4_decompress_generic+0x120 : bc90 >			  ## lz4.c:473:27
    bc82:    08 ec 6d 50       	if (r5 > r8) goto 0xda <LZ4_decompress_generic+0x1F0 : bd60 >
    bc86:    e9 dd             	r1 = r6 + r7  #			  ## lz4.c:473:89
    bc88:    00 27             		 r0 = [sp+28]			  ## lz4.c:473:89
    bc8a:    80 ec 05 10       	if (r1 <= r0) goto 0xa <LZ4_decompress_generic+0x128 : bc98 >
    bc8e:    34 88             	goto 0xd0 <LZ4_decompress_generic+0x1F0 : bd60 >
    bc90:    00 26             	r0 = [sp+24]			  ## lz4.c:473:13
    bc92:    00 ec 65 50       	if (r5 > r0) goto 0xca <LZ4_decompress_generic+0x1F0 : bd60 >
    bc96:    e9 1d             	r1 = r6 + r7			  ## lz4.c:496:12
    bc98:    72 16             	r2 = r7			  ## lz4.c:323:5
    bc9a:    63 16             	r3 = r6			  ## lz4.c:323:5
    bc9c:    12 03             	rep 0x4 r2 {			  ## lz4.c:323:5
    bc9e:    30 07             		r0 = b[r3++=0x1] (u)			  ## lz4.c:323:5
    bca0:    c0 07             		b[r4++=0x1] = r0
                               	}			  ## lz4.c:323:5
    bca2:    f2 5c             	if (r2 != 0) goto -0x8 <LZ4_decompress_generic+0x12C : bc9c >			  ## lz4.c:323:5
    bca4:    18 41             	r0 = b[r1+0x1] (u)			  ## lz4.c:500:18
    bca6:    1a 40             	r2 = b[r1+0x0] (u)			  ## lz4.c:500:18
    bca8:    a2 e1 20 04       	r2 <= insert(r0, p:0x8, l:0x8)			  ## lz4.c:500:18
    bcac:    d1 1e             	r1 = r5 - r2			  ## lz4.c:502:20
    bcae:    b4 e0 10 0d       	r0 = r1 + r13			  ## lz4.c:503:31
    bcb2:    43 21             	r3 = 0x1			  ## lz4.c:503:31
    bcb4:    10 e9 00 0a       	if (r0 >= r10) {			  ## lz4.c:503:31
    bcb8:    43 20             		r3 = 0x0
                               	}			  ## lz4.c:503:31
    bcba:    e8 1d             	r0 = r6 + r7			  ## lz4.c:496:12
    bcbc:    0e 82             	r6 = r0 + 0x2			  ## lz4.c:501:12
    bcbe:    00 2a             	r0 = [sp+40]
    bcc0:    30 fb 49 00       	if ((r0 & r3) != 0) goto 0x92 <LZ4_decompress_generic+0x1E6 : bd56 >
    bcc4:    40 20             	r0 = 0x0
    bcc6:    d8 43             	b[r5+0x3] = r0			  ## lz4.c:234:30
    bcc8:    d8 42             	b[r5+0x2] = r0			  ## lz4.c:234:30
    bcca:    da 40             	b[r5+0x0] = r2			  ## lz4.c:234:30
    bccc:    a2 a8             	r2 = r2 >> 0x8			  ## lz4.c:234:30
    bcce:    70 f1 f0 b0       	r0 = r11 & 0xFFFFFF0F  #			  ## lz4.c:509:24
    bcd2:    da 41             		 b[r5+0x1] = r2			  ## lz4.c:234:30
    bcd4:    80 f8 13 1e       	if (r0 != 0xf) goto 0x26 <LZ4_decompress_generic+0x18E : bcfe >
    bcd8:    40 2f             	r0 = 0xf
    bcda:    63 16             	r3 = r6
    bcdc:    3e 81             	r6 = r3 + 0x1			  ## lz4.c:513:24
    bcde:    32 07             	r2 = b[r3++=0x1] (u)			  ## lz4.c:513:21
    bce0:    0c f8 02 00       	if (r12 == 0x0) goto 0x4 <LZ4_decompress_generic+0x178 : bce8 >			  ## lz4.c:513:21
    bce4:    0e ec 36 60       	if (r6 > r14) goto 0x6c <LZ4_decompress_generic+0x1E4 : bd54 >
    bce8:    20 18             	r0 += r2			  ## lz4.c:517:24
    bcea:    12 f8 f6 ff       	if (r2 == 0xff) goto -0x14 <LZ4_decompress_generic+0x16A : bcda >
    bcee:    0b 1d             	r3 = r0 + r5
    bcf0:    42 21             	r2 = 0x1
    bcf2:    13 e9 00 00       	if (r3 >= r0) {
    bcf6:    42 20             		r2 = 0x0
                               	}
    bcf8:    8c f8 01 02       	if (r12 != 0x1) goto 0x2 <LZ4_decompress_generic+0x18E : bcfe >
    bcfc:    92 4c             	if (r2 != 0) goto 0x58 <LZ4_decompress_generic+0x1E6 : bd56 >
    bcfe:    0f 84             	r7 = r0 + 0x4			  ## lz4.c:523:16
    bd00:    00 29             	r0 = [sp+36]			  ## lz4.c:526:36
    bd02:    80 f8 22 04       	if (r0 != 0x2) goto 0x44 <LZ4_decompress_generic+0x1DA : bd4a >			  ## lz4.c:526:36
    bd06:    0a ed 20 10       	ifs (r1 >= r10) goto 0x40 <LZ4_decompress_generic+0x1DA : bd4a >
    bd0a:    dc dd             	r4 = r5 + r7  #			  ## lz4.c:528:17
    bd0c:    00 28             		 r0 = [sp+32]			  ## lz4.c:528:17
    bd0e:    00 ec 22 40       	if (r4 > r0) goto 0x44 <LZ4_decompress_generic+0x1E6 : bd56 >
    bd12:    b4 e0 a2 b1       	r11 = r10 - r1			  ## lz4.c:532:46
    bd16:    8b ec 7c 71       	if (r7 <= r11) goto -0x108 <LZ4_decompress_generic+0xA2 : bc12 >
    bd1a:    b2 d6             	r2 = r11  #			  ## lz4.c:540:17
    bd1c:    00 24             		 r0 = [sp+16]			  ## lz4.c:540:36
    bd1e:    b4 e0 02 1b       	r1 = r0 - r11			  ## lz4.c:540:36
    bd22:    50 16             	r0 = r5			  ## lz4.c:540:17
    bd24:    80 ff 12 84 ff ff 	call -0x7bee <memmove : 413c >			  ## lz4.c:540:17
    bd2a:    b4 e0 72 7b       	r7 = r7 - r11			  ## lz4.c:539:48
    bd2e:    b4 e0 50 4b       	r4 = r5 + r11			  ## lz4.c:541:20
    bd32:    b4 e0 42 0a       	r0 = r4 - r10			  ## lz4.c:542:44
    bd36:    80 ec 75 71       	if (r7 <= r0) goto -0x116 <LZ4_decompress_generic+0xB4 : bc24 >			  ## lz4.c:542:21
    bd3a:    c8 1d             	r0 = r4 + r7			  ## lz4.c:543:49
    bd3c:    a1 16             	r1 = r10
    bd3e:    04 82             	goto 0x4 <LZ4_decompress_generic+0x1D4 : bd44 >
    bd40:    12 07             	r2 = b[r1++=0x1] (u)			  ## lz4.c:546:33
    bd42:    c2 07             	b[r4++=0x1] = r2			  ## lz4.c:546:31
    bd44:    80 e9 fc 41       	if (r4 < r0) goto -0x8 <LZ4_decompress_generic+0x1D0 : bd40 >
    bd48:    b7 94             	goto -0x118 <LZ4_decompress_generic+0xC2 : bc32 >
    bd4a:    dc dd             	r4 = r5 + r7  #			  ## lz4.c:557:18
    bd4c:    00 28             		 r0 = [sp+32]			  ## lz4.c:557:18
    bd4e:    80 ec 5b 41       	if (r4 <= r0) goto -0x14a <LZ4_decompress_generic+0x98 : bc08 >
    bd52:    04 81             	goto 0x2 <LZ4_decompress_generic+0x1E6 : bd56 >
    bd54:    36 16             	r6 = r3
    bd56:    00 25             	r0 = [sp+20]			  ## lz4.c:612:18
    bd58:    f8 3f             	r0 += -0x1			  ## lz4.c:612:18
    bd5a:    80 1f             	r0 = r0 - r6			  ## lz4.c:612:47
    bd5c:    02 8b             	sp += 0x2c
    bd5e:    5f 04             	{pc, r15-r4} = [sp++]			  ## lz4.c:613:1
    bd60:    00 22             	r0 = [sp+8]			  ## lz4.c:475:17
    bd62:    00 53             	if (r0 == 0) goto 0x26 <LZ4_decompress_generic+0x21A : bd8a >			  ## lz4.c:475:17
    bd64:    00 23             	r0 = [sp+12]
    bd66:    00 ec f6 51       	if (r5 > r0) goto -0x14 <LZ4_decompress_generic+0x1E6 : bd56 >
    bd6a:    b4 e0 60 87       	r8 = r6 + r7			  ## lz4.c:479:41
    bd6e:    0c f8 03 00       	if (r12 == 0x0) goto 0x6 <LZ4_decompress_generic+0x208 : bd78 >			  ## lz4.c:479:41
    bd72:    00 21             	r0 = [sp+4]
    bd74:    00 ec ef 81       	if (r8 > r0) goto -0x22 <LZ4_decompress_generic+0x1E6 : bd56 >
    bd78:    40 16             	r0 = r4			  ## lz4.c:490:13
    bd7a:    61 16             	r1 = r6			  ## lz4.c:490:13
    bd7c:    72 16             	r2 = r7			  ## lz4.c:490:13
    bd7e:    80 ff b8 83 ff ff 	call -0x7c48 <memmove : 413c >			  ## lz4.c:490:13
    bd84:    8c f8 14 00       	if (r12 != 0x0) goto 0x28 <LZ4_decompress_generic+0x240 : bdb0 >
    bd88:    04 9e             	goto 0x3c <LZ4_decompress_generic+0x256 : bdc6 >
    bd8a:    00 23             	r0 = [sp+12]
    bd8c:    8c f8 02 00       	if (r12 != 0x0) goto 0x4 <LZ4_decompress_generic+0x224 : bd94 >
    bd90:    80 e8 e1 51       	if (r5 != r0) goto -0x3e <LZ4_decompress_generic+0x1E6 : bd56 >
    bd94:    0c f8 0f 00       	if (r12 == 0x0) goto 0x1e <LZ4_decompress_generic+0x246 : bdb6 >
    bd98:    00 ec dd 51       	if (r5 > r0) goto -0x46 <LZ4_decompress_generic+0x1E6 : bd56 >
    bd9c:    e8 dd             	r0 = r6 + r7  #			  ## lz4.c:486:42
    bd9e:    01 21             		 r1 = [sp+4]			  ## lz4.c:486:42
    bda0:    81 e8 d9 01       	if (r0 != r1) goto -0x4e <LZ4_decompress_generic+0x1E6 : bd56 >			  ## lz4.c:486:42
    bda4:    40 16             	r0 = r4			  ## lz4.c:490:13
    bda6:    61 16             	r1 = r6			  ## lz4.c:490:13
    bda8:    72 16             	r2 = r7			  ## lz4.c:490:13
    bdaa:    80 ff 8c 83 ff ff 	call -0x7c74 <memmove : 413c >			  ## lz4.c:490:13
    bdb0:    00 20             	r0 = [sp]			  ## lz4.c:605:35
    bdb2:    50 1e             	r0 = r5 - r0			  ## lz4.c:605:35
    bdb4:    e7 93             	goto -0x5a <LZ4_decompress_generic+0x1EC : bd5c >			  ## lz4.c:605:35
    bdb6:    40 16             	r0 = r4			  ## lz4.c:490:13
    bdb8:    61 16             	r1 = r6			  ## lz4.c:490:13
    bdba:    72 16             	r2 = r7			  ## lz4.c:490:13
    bdbc:    80 ff 7a 83 ff ff 	call -0x7c86 <memmove : 413c >			  ## lz4.c:490:13
    bdc2:    b4 e0 60 87       	r8 = r6 + r7			  ## lz4.c:491:16
    bdc6:    00 25             	r0 = [sp+20]			  ## lz4.c:607:41
    bdc8:    b4 e0 82 00       	r0 = r8 - r0			  ## lz4.c:607:41
    bdcc:    e7 87             	goto -0x72 <LZ4_decompress_generic+0x1EC : bd5c >			  ## lz4.c:607:41
    bdce:    43 21             	r3 = 0x1
    bdd0:    82 f8 04 02       	if (r2 != 0x1) goto 0x8 <LZ4_decompress_generic+0x26C : bddc >
    bdd4:    09 40             	r1 = b[r0+0x0] (u)			  ## lz4.c:443:36
    bdd6:    31 e8 00 00       	if (r1 == 0x0) {
    bdda:    13 16             		r3 = r1
                               	}
    bddc:    a0 e0 00 30       	r0 = 0x0 - r3			  ## lz4.c:443:16
    bde0:    d7 9d             	goto -0x86 <LZ4_decompress_generic+0x1EC : bd5c >
    bde2:    09 40             	r1 = b[r0+0x0] (u)			  ## lz4.c:446:17
    bde4:    40 21             	r0 = 0x1			  ## lz4.c:446:17
    bde6:    b1 e8 00 00       	if (r1 != 0x0) {
    bdea:    10 3f             		r0 = -0x1
                               	}			  ## lz4.c:446:17
    bdec:    d7 97             	goto -0x92 <LZ4_decompress_generic+0x1EC : bd5c >			  ## lz4.c:446:17


LZ4_decompress_safe_continue:
    bdee:    77 04             	[--sp] = {rets, r7-r4}			  ## lz4.c:660:0
    bdf0:    e2 99             	sp += -0x1c			  ## lz4.c:660:0
    bdf2:    04 d6             	r4 = r0  #			  ## lz4.c:660:0
    bdf4:    06 2c             		 r6 = [sp+48]			  ## lz4.c:660:0
    bdf6:    25 d6             	r5 = r2  #			  ## lz4.c:660:0
    bdf8:    40 63             		 r0 = [r4+0xc] 			  ## lz4.c:660:0
    bdfa:    47 62             	r7 = [r4+0x8] 			  ## lz4.c:664:16
    bdfc:    05 e8 18 70       	if (r7 == r5) goto 0x30 <LZ4_decompress_safe_continue+0x42 : be30 >
    be00:    72 de             	r2 = r7 - r0  #			  ## lz4.c:675:48
    be02:    c0 61             		 [r4+0x4] = r0			  ## lz4.c:674:28
    be04:    c2 60             	[r4+0x0] = r2			  ## lz4.c:675:29
    be06:    80 26             	[sp+24] = r0			  ## lz4.c:676:18
    be08:    32 d6             	r2 = r3  #			  ## lz4.c:676:18
    be0a:    82 25             		 [sp+20] = r2			  ## lz4.c:676:18
    be0c:    63 d6             	r3 = r6  #			  ## lz4.c:676:18
    be0e:    85 24             		 [sp+16] = r5			  ## lz4.c:676:18
    be10:    40 22             	r0 = 0x2			  ## lz4.c:676:18
    be12:    80 23             	[sp+12] = r0			  ## lz4.c:676:18
    be14:    40 20             	r0 = 0x0			  ## lz4.c:676:18
    be16:    80 22             	[sp+8] = r0			  ## lz4.c:676:18
    be18:    80 21             	[sp+4] = r0			  ## lz4.c:676:18
    be1a:    40 21             	r0 = 0x1			  ## lz4.c:676:18
    be1c:    10 d6             	r0 = r1  #			  ## lz4.c:676:18
    be1e:    80 20             		 [sp] = r0			  ## lz4.c:676:18
    be20:    51 16             	r1 = r5			  ## lz4.c:676:18
    be22:    bf ea a5 fe       	call -0x2b6 <LZ4_decompress_generic : bb70 >			  ## lz4.c:676:18
    be26:    80 fd 1d 02       	ifs (r0 < 0x1) goto 0x3a <LZ4_decompress_safe_continue+0x76 : be64 >
    be2a:    51 dc             	r1 = r5 + r0  #			  ## lz4.c:683:42
    be2c:    c0 63             		 [r4+0xc] = r0			  ## lz4.c:682:27
    be2e:    04 99             	goto 0x32 <LZ4_decompress_safe_continue+0x74 : be62 >			  ## lz4.c:682:27
    be30:    04 eb 84 00       	{r7, r2} = [r4+]			  ## lz4.c:667:100
    be34:    50 de             	r0 = r5 - r0  #			  ## lz4.c:667:72
    be36:    87 26             		 [sp+24] = r7			  ## lz4.c:665:18
    be38:    32 d6             	r2 = r3  #			  ## lz4.c:665:18
    be3a:    82 25             		 [sp+20] = r2			  ## lz4.c:665:18
    be3c:    63 d6             	r3 = r6  #			  ## lz4.c:665:18
    be3e:    80 24             		 [sp+16] = r0			  ## lz4.c:665:18
    be40:    40 22             	r0 = 0x2			  ## lz4.c:665:18
    be42:    80 23             	[sp+12] = r0			  ## lz4.c:665:18
    be44:    40 20             	r0 = 0x0			  ## lz4.c:665:18
    be46:    80 22             	[sp+8] = r0			  ## lz4.c:665:18
    be48:    80 21             	[sp+4] = r0			  ## lz4.c:665:18
    be4a:    40 21             	r0 = 0x1			  ## lz4.c:665:18
    be4c:    10 d6             	r0 = r1  #			  ## lz4.c:665:18
    be4e:    80 20             		 [sp] = r0			  ## lz4.c:665:18
    be50:    51 16             	r1 = r5			  ## lz4.c:665:18
    be52:    bf ea 8d fe       	call -0x2e6 <LZ4_decompress_generic : bb70 >			  ## lz4.c:665:18
    be56:    80 fd 05 02       	ifs (r0 < 0x1) goto 0xa <LZ4_decompress_safe_continue+0x76 : be64 >
    be5a:    68 e8 0c 40       	[r4+0xc] += r0			  ## lz4.c:671:27
    be5e:    41 62             	r1 = [r4+0x8] 			  ## lz4.c:672:27
    be60:    01 18             	r1 += r0			  ## lz4.c:672:27
    be62:    c1 62             	[r4+0x8] = r1			  ## lz4.c:672:27
    be64:    02 87             	sp += 0x1c
    be66:    57 04             	{pc, r7-r4} = [sp++]			  ## lz4.c:687:1


Run_App:
    be68:    7f 04             	[--sp] = {rets, r15-r4}			  ## bankSwitch.c:15:0
    be6a:    c2 98             	sp += -0xa0			  ## bankSwitch.c:15:0
    be6c:    c1 ff 18 fc 19 00 	r1 = 0x19fc18 <g_boot_soft_flag : 19fc18 >			  ## boot_init.c:85:50
    be72:    08 d6             	r8 = r0  #			  ## boot_init.c:85:50
    be74:    19 44             		 r1 = b[r1+0x4] (u)			  ## boot_init.c:85:50
    be76:    51 e8 05 02       	if ((r1 & 0x1) != 0) goto 0xa <Run_App+0x1C : be84 >			  ## bankSwitch.c:23:9
    be7a:    0a e1 0c 00       	r10 = r0 + 0xc
    be7e:    0c e1 04 00       	r12 = r0 + 0x4
    be82:    54 8b             	goto 0x156 <Run_App+0x172 : bfda >
    be84:    50 ec 00 20       	r3_r2 = d[r0+0x0]
    be88:    05 63             	r5 = [r0+0xc] 
    be8a:    f8 e8 80 10       	r1 = sp + 128
    be8e:    40 22             	r0 = 0x2			  ## sdfile.c:110:11
    be90:    85 20             	[sp] = r5			  ## sdfile.c:110:11
    be92:    bf ea ca f7       	call -0x106c <sd_fopenbyindex : ae2a >			  ## sdfile.c:110:11
    be96:    0a e1 0c 80       	r10 = r8 + 0xc
    be9a:    0c e1 04 80       	r12 = r8 + 0x4
    be9e:    00 f8 9c 00       	if (r0 == 0x0) goto 0x138 <Run_App+0x172 : bfda >
    bea2:    d0 ec c0 10       	r1 = [r12+0x0]			  ## sdfile.c:115:31
    bea6:    22 21             	r2 = [sp+132]			  ## sdfile.c:115:49
    bea8:    21 d8             	r1 += r2  #			  ## sdfile.c:115:42
    beaa:    20 22             		 r0 = [sp+136]			  ## sdfile.c:114:30
    beac:    30 e9 00 02       	if (r0 >= 0x200) {			  ## sdfile.c:114:30
    beb0:    40 e0 00 02       		r0 = 0x200
                               	} <ROM_RAM_SIZE : 200 >			  ## sdfile.c:114:23
    beb4:    82 17             	r2 = r0.l (u)			  ## sdfile.c:115:5
    beb6:    c7 ff 40 11 18 00 	r7 = 0x181140 <ep2_dma_buffer : 181140 >			  ## sdfile.c:115:5
    bebc:    70 16             	r0 = r7			  ## sdfile.c:115:5
    bebe:    bf ea e5 f7       	call -0x1036 <nor_flash_read : ae8c >			  ## sdfile.c:115:5
    bec2:    cb ff c0 13 18 00 	r11 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## sdfile.c:115:5
    bec8:    01 e1 08 b0       	r1 = r11 + 0x8			  ## sdfile.c:115:5
    becc:    70 16             	r0 = r7			  ## sdfile.c:117:5
    bece:    bf ea ee f7       	call -0x1024 <get_flash_file_key : aeae >			  ## sdfile.c:117:5
    bed2:    40 20             	r0 = 0x0			  ## sdfile.c:120:5
    bed4:    41 20             	r1 = 0x0			  ## sdfile.c:120:5
    bed6:    d0 e9 79 00       	d[sp+120] = r1_r0			  ## sdfile.c:120:5
    beda:    d0 e9 71 00       	d[sp+112] = r1_r0			  ## sdfile.c:120:5
    bede:    c0 ff 09 f6 01 00 	r0 = 0x1f609 <sin_win_tab2+0x214 : 1f608 >			  ## sdfile.c:121:9
    bee4:    e9 90             	r1 = sp + 112			  ## sdfile.c:121:9
    bee6:    72 16             	r2 = r7			  ## sdfile.c:121:9
    bee8:    bf ea 1a f8       	call -0xfcc <dec_isd_cfg_ini : af20 >			  ## sdfile.c:121:9
    beec:    00 51             	if (r0 == 0) goto 0x22 <Run_App+0xA8 : bf10 >			  ## sdfile.c:121:9
    beee:    dc e9 70 00       	r0 = b[sp+112] (u)			  ## sdfile.c:122:31
    bef2:    dc e9 74 10       	r1 = b[sp+116] (u)			  ## sdfile.c:124:17
    bef6:    f0 30             	r0 += -0x30			  ## sdfile.c:122:42
    bef8:    52 ee b0 00       	b[r11+0x0] = r0			  ## sdfile.c:122:29
    befc:    f1 30             	r1 += -0x30			  ## sdfile.c:124:28
    befe:    40 24             	r0 = 0x4			  ## sdfile.c:124:28
    bf00:    42 28             	r2 = 0x8			  ## sdfile.c:124:9
    bf02:    b1 e8 01 00       	if (r1 != 0x1) {			  ## sdfile.c:124:9
    bf06:    42 24             		r2 = 0x4
                               	}			  ## sdfile.c:124:9
    bf08:    b1 e8 00 00       	if (r1 != 0x0) {			  ## sdfile.c:124:9
    bf0c:    20 16             		r0 = r2
                               	}			  ## sdfile.c:124:9
    bf0e:    04 84             	goto 0x8 <Run_App+0xB0 : bf18 >			  ## sdfile.c:124:9
    bf10:    40 22             	r0 = 0x2			  ## sdfile.c:136:29
    bf12:    52 ee b0 00       	b[r11+0x0] = r0			  ## sdfile.c:136:29
    bf16:    40 24             	r0 = 0x4			  ## sdfile.c:136:29
    bf18:    52 ee b1 00       	b[r11+0x1] = r0
    bf1c:    50 ed b8 00       	r0 = h[r11+0x8] (u)			  ## sdfile.c:222:23
    bf20:    44 20             	r4 = 0x0			  ## sdfile.c:222:23
    bf22:    83 d6             	r3 = r8  #			  ## sdfile.c:222:11
    bf24:    84 3b             		 [sp+108] = r4			  ## sdfile.c:220:9
    bf26:    84 3a             	[sp+104] = r4			  ## sdfile.c:221:9
    bf28:    e9 88             	r1 = sp + 104			  ## sdfile.c:221:9
    bf2a:    ea 8c             	r2 = sp + 108
    bf2c:    bf ea 4d f8       	call -0xf66 <_jlfs_mount : afca >			  ## sdfile.c:222:11
    bf30:    20 54             	if (r0 == 0) goto 0xa8 <Run_App+0x172 : bfda >
    bf32:    c7 ff 54 fc 19 00 	r7 = 0x19fc54 <uboot_2_sdk_info : 19fc54 >			  ## sdfile.c:229:30
    bf38:    70 16             	r0 = r7			  ## sdfile.c:226:5
    bf3a:    00 85             	rep 0x2 0x6 {			  ## sdfile.c:226:5
    bf3c:    84 05             		[r0++=0x4] = r4
                               	}			  ## sdfile.c:226:5
    bf3e:    d4 e9 6c 90       	r9 = [sp+108]			  ## sdfile.c:227:37
    bf42:    c0 ff 00 00 ff ff 	r0 = 0xffff0000 <RAM_LIMIT_H+0xFFE50000 : ffff0000 >			  ## sdfile.c:227:52
    bf48:    90 f1 92 50       	r5 = r9 & r0  #			  ## sdfile.c:227:52
    bf4c:    06 3a             		 r6 = [sp+104]			  ## sdfile.c:228:42
    bf4e:    f5 62             	[r7+0x8] = r5			  ## sdfile.c:227:35
    bf50:    50 ed b8 20       	r2 = h[r11+0x8] (u)			  ## sdfile.c:229:32
    bf54:    f6 61             	[r7+0x4] = r6			  ## sdfile.c:228:40
    bf56:    50 ee b1 10       	r1 = b[r11+0x1] (u)			  ## sdfile.c:240:35
    bf5a:    50 ee b0 00       	r0 = b[r11+0x0] (u)			  ## sdfile.c:240:14
    bf5e:    fa 66             	h[r7+0xc] = r2			  ## sdfile.c:229:30
    bf60:    c2 ff 34 fc 19 00 	r2 = 0x19fc34 <flash_head : 19fc34 >			  ## sdfile.c:230:30
    bf66:    f2 60             	[r7+0x0] = r2			  ## sdfile.c:230:30
    bf68:    42 20             	r2 = 0x0			  ## sdfile.c:240:5
    bf6a:    bf ea 31 fd       	call -0x59e <sfc_boot : b9d0 >			  ## sdfile.c:240:5
    bf6e:    a0 e0 c0 56       	r0 = 0x6000000 - r5			  ## sdfile.c:232:95
    bf72:    60 18             	r0 += r6			  ## sdfile.c:232:62
    bf74:    c5 ff 00 02 fe 00 	r5 = 0xfe0200 <RAM_LIMIT_H+0xE40200 : fe0200 >
    bf7a:    d0 64             	[r5+0x10] = r0			  ## sdfile.c:242:22
    bf7c:    bf ea b0 fd       	call -0x4a0 <IcuInitial : bae0 >			  ## sdfile.c:244:5
    bf80:    bf ea d6 fd       	call -0x454 <DcuInitial : bb30 >			  ## sdfile.c:245:5
    bf84:    50 ed b8 00       	r0 = h[r11+0x8] (u)			  ## sdfile.c:247:23
    bf88:    d0 67             	[r5+0x1c] = r0			  ## sdfile.c:247:21
    bf8a:    06 ef 01 50       	[r5+0x18] |= 0x1			  ## sdfile.c:248:21
    bf8e:    c6 ef 02 50       	[r5+0x18] &= 0xFFFFFFFD			  ## sdfile.c:249:21
    bf92:    64 e0 00 0b       	r0 = icfg			  ## sdfile.c:254:5
    bf96:    b8 28             	r0 &= 0xfffffeff			  ## sdfile.c:255:9
    bf98:    64 e0 80 0b       	icfg = r0			  ## sdfile.c:256:5
    bf9c:    c1 ff 00 fe 19 00 	r1 = 0x19fe00 <_IRQ_MEM_ADDR : 19fe00 >			  ## sdfile.c:256:5
    bfa2:    18 88             	r0 = r1 + 0x8			  ## sdfile.c:256:5
    bfa4:    60 00             	cli			  ## sdfile.c:257:5
    bfa6:    02 16             	r2 = r0			  ## sdfile.c:260:5
    bfa8:    73 16             	r3 = r7			  ## sdfile.c:260:5
    bfaa:    10 85             	rep 0x4 0x6 {			  ## sdfile.c:260:5
    bfac:    36 05             		r6 = [r3++=0x4] 			  ## sdfile.c:260:5
    bfae:    a6 05             		[r2++=0x4] = r6
                               	}			  ## sdfile.c:260:5
    bfb0:    03 f1 20 10       	r3 = r1 + 0x20  #
    bfb4:    72 60             		 r2 = [r7+0x0] 			  ## sdfile.c:263:41
    bfb6:    93 62             	[r1+0x8] = r3			  ## sdfile.c:262:16
    bfb8:    10 9f             	rep 0x4 0x20 {			  ## sdfile.c:263:5
    bfba:    21 07             		r1 = b[r2++=0x1] (u)			  ## sdfile.c:263:5
    bfbc:    b1 07             		b[r3++=0x1] = r1
                               	}			  ## sdfile.c:263:5
    bfbe:    c9 00             	call r9			  ## sdfile.c:264:15
    bfc0:    d4 60             	[r5+0x0] = r4			  ## sdfile.c:267:17
    bfc2:    c0 ff 00 1c fd 00 	r0 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## sdfile.c:267:17
    bfc8:    c0 ef 08 00       	[r0+0x0] &= 0xFFFFFFF7			  ## sdfile.c:270:18
    bfcc:    c1 ff 14 60 fd 00 	r1 = 0xfd6014 <RAM_LIMIT_H+0xE36014 : fd6014 >			  ## sdfile.c:271:20
    bfd2:    00 ef 00 1a       	[r1+0x0] |= 0x80000			  ## sdfile.c:271:20
    bfd6:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## sdfile.c:272:18
    bfda:    d0 ec c0 30       	r3 = [r12+0x0]
    bfde:    d0 ec 80 20       	r2 = [r8+0x0]
    bfe2:    d0 ec a0 50       	r5 = [r10+0x0]
    bfe6:    c9 88             	r1 = sp + 72
    bfe8:    40 21             	r0 = 0x1			  ## bankSwitch.c:27:10
    bfea:    85 20             	[sp] = r5			  ## bankSwitch.c:27:10
    bfec:    bf ea 1d f7       	call -0x11c6 <sd_fopenbyindex : ae2a >			  ## bankSwitch.c:27:10
    bff0:    30 59             	if (r0 == 0) goto 0xf2 <Run_App+0x27C : c0e4 >
    bff2:    ae 98             	r6 = sp + 56
    bff4:    cd 88             	r5 = sp + 72
    bff6:    17 3c             	r7 = -0x4
    bff8:    04 95             	goto 0x2a <Run_App+0x1BC : c024 >
    bffa:    d0 ec c0 10       	r1 = [r12+0x0]			  ## bankSwitch.c:37:57
    bffe:    52 61             	r2 = [r5+0x4] 			  ## bankSwitch.c:37:75
    c000:    d0 ec 80 00       	r0 = [r8+0x0]			  ## bankSwitch.c:37:35
    c004:    d0 ec a0 40       	r4 = [r10+0x0]			  ## bankSwitch.c:37:19
    c008:    12 18             	r2 += r1			  ## bankSwitch.c:37:68
    c00a:    a9 98             	r1 = sp + 56			  ## bankSwitch.c:37:68
    c00c:    43 30             	r3 = 0x10			  ## bankSwitch.c:37:13
    c00e:    c4 00             	call r4			  ## bankSwitch.c:37:13
    c010:    00 48             	if (r0 == 0) goto 0x10 <Run_App+0x1BA : c022 >			  ## bankSwitch.c:37:13
    c012:    a8 98             	r0 = sp + 56
    c014:    41 2e             	r1 = 0xe			  ## bankSwitch.c:38:19
    c016:    bf ea de f4       	call -0x1644 <chip_crc16 : a9d6 >			  ## bankSwitch.c:38:19
    c01a:    00 43             	if (r0 == 0) goto 0x6 <Run_App+0x1BA : c022 >			  ## bankSwitch.c:38:19
    c01c:    69 67             	r1 = h[r6+0xe] (u)			  ## bankSwitch.c:40:32
    c01e:    00 e8 03 10       	if (r1 == r0) goto 0x6 <Run_App+0x1C0 : c028 >			  ## bankSwitch.c:40:32
    c022:    c7 21             	r7 += 0x1			  ## bankSwitch.c:35:9
    c024:    f7 4a             	if (r7 != 0) goto -0x2c <Run_App+0x192 : bffa >
    c026:    24 9e             	goto 0xbc <Run_App+0x27C : c0e4 >
    c028:    50 61             	r0 = [r5+0x4] 			  ## bankSwitch.c:41:35
    c02a:    01 30             	r1 = [sp+64]			  ## bankSwitch.c:41:49
    c02c:    b4 f0 10 e0       	r14 = r1 + r0  #			  ## bankSwitch.c:41:40
    c030:    04 2f             		 r4 = [sp+60]			  ## bankSwitch.c:43:35
    c032:    dc e9 54 20       	r2 = b[sp+84] (u)			  ## bankSwitch.c:55:14
    c036:    d8 e9 3a 90       	r9 = h[sp+58] (u)			  ## bankSwitch.c:42:29
    c03a:    c8 88             	r0 = sp + 72
    c03c:    47 d6             	r7 = r4  #
    c03e:    80 21             		 [sp+4] = r0
    c040:    52 e8 0c 30       	if ((r2 & 0x40) == 0) goto 0x18 <Run_App+0x1F4 : c05c >
    c044:    d0 ec c0 10       	r1 = [r12+0x0]			  ## bankSwitch.c:56:68
    c048:    d0 ec 80 00       	r0 = [r8+0x0]			  ## bankSwitch.c:56:31
    c04c:    d0 ec a0 60       	r6 = [r10+0x0]			  ## bankSwitch.c:56:15
    c050:    b4 e0 10 2e       	r2 = r1 + r14			  ## bankSwitch.c:56:79
    c054:    a9 88             	r1 = sp + 40			  ## bankSwitch.c:56:79
    c056:    43 30             	r3 = 0x10			  ## bankSwitch.c:56:9
    c058:    c6 00             	call r6			  ## bankSwitch.c:56:9
    c05a:    07 2c             	r7 = [sp+48]			  ## bankSwitch.c:57:35
    c05c:    f8 e8 38 d0       	r13 = sp + 56
    c060:    16 3c             	r6 = -0x4
    c062:    cf ff 04 35 fd 00 	r15 = 0xfd3504 <RAM_LIMIT_H+0xE33504 : fd3504 >
    c068:    04 95             	goto 0x2a <Run_App+0x22C : c094 >
    c06a:    d0 ec c0 10       	r1 = [r12+0x0]			  ## bankSwitch.c:63:67
    c06e:    d0 ec 80 00       	r0 = [r8+0x0]			  ## bankSwitch.c:63:35
    c072:    d0 ec a0 b0       	r11 = [r10+0x0]			  ## bankSwitch.c:63:19
    c076:    b4 e0 10 2e       	r2 = r1 + r14			  ## bankSwitch.c:63:78
    c07a:    71 16             	r1 = r7			  ## bankSwitch.c:63:13
    c07c:    93 16             	r3 = r9			  ## bankSwitch.c:63:13
    c07e:    cb 00             	call r11			  ## bankSwitch.c:63:13
    c080:    00 48             	if (r0 == 0) goto 0x10 <Run_App+0x22A : c092 >			  ## bankSwitch.c:63:13
    c082:    d0 ec f0 00       	r0 = [r15+0x0]			  ## bankSwitch.c:72:27
    c086:    50 ed dc 10       	r1 = h[r13+0xc] (u)			  ## bankSwitch.c:75:24
    c08a:    80 17             	r0 = r0.l (u)			  ## bankSwitch.c:75:28
    c08c:    80 e8 01 10       	if (r1 != r0) goto 0x2 <Run_App+0x22A : c092 >			  ## bankSwitch.c:75:28
    c090:    80 43             	if (r0 != 0) goto 0x6 <Run_App+0x230 : c098 >
    c092:    c6 21             	r6 += 0x1			  ## bankSwitch.c:35:9
    c094:    f6 4a             	if (r6 != 0) goto -0x2c <Run_App+0x202 : c06a >
    c096:    14 86             	goto 0x4c <Run_App+0x27C : c0e4 >
    c098:    00 21             	r0 = [sp+4]			  ## bankSwitch.c:87:14
    c09a:    08 4c             	r0 = b[r0+0xc] (u)			  ## bankSwitch.c:87:14
    c09c:    50 e8 16 30       	if ((r0 & 0x40) == 0) goto 0x2c <Run_App+0x264 : c0cc >			  ## bankSwitch.c:87:14
    c0a0:    d0 e9 28 00       	r1_r0 = d[sp+40]			  ## bankSwitch.c:90:82
    c0a4:    10 d8             	r0 += r1  #			  ## lz4.c:645:50
    c0a6:    80 25             		 [sp+20] = r0			  ## lz4.c:644:23
    c0a8:    01 2c             	r1 = [sp+48]			  ## bankSwitch.c:93:91
    c0aa:    80 24             	[sp+16] = r0			  ## lz4.c:645:22
    c0ac:    42 20             	r2 = 0x0			  ## lz4.c:646:25
    c0ae:    43 20             	r3 = 0x0			  ## lz4.c:646:25
    c0b0:    d0 e9 09 20       	d[sp+8] = r3_r2			  ## lz4.c:646:25
    c0b4:    12 1f             	r2 = r1 - r4			  ## bankSwitch.c:93:101
    c0b6:    79 90             	r1 = r7 + 0x10			  ## bankSwitch.c:92:77
    c0b8:    33 f1 f0 9f       	r3 = r9 + -0x10  #			  ## bankSwitch.c:93:52
    c0bc:    82 20             		 [sp] = r2			  ## bankSwitch.c:92:24
    c0be:    88 88             	r0 = sp + 8			  ## bankSwitch.c:92:24
    c0c0:    42 16             	r2 = r4			  ## bankSwitch.c:92:24
    c0c2:    bf ea 94 fe       	call -0x2d8 <LZ4_decompress_safe_continue : bdee >			  ## bankSwitch.c:92:24
    c0c6:    01 2d             	r1 = [sp+52]			  ## bankSwitch.c:95:39
    c0c8:    81 e8 0c 00       	if (r0 != r1) goto 0x18 <Run_App+0x27C : c0e4 >
    c0cc:    64 e0 00 0b       	r0 = icfg			  ## bankSwitch.c:109:5
    c0d0:    b8 28             	r0 &= 0xfffffeff			  ## bankSwitch.c:110:9
    c0d2:    64 e0 80 0b       	icfg = r0			  ## bankSwitch.c:111:5
    c0d6:    60 00             	cli			  ## bankSwitch.c:112:5
    c0d8:    80 d6             	r0 = r8  #			  ## bankSwitch.c:115:5
    c0da:    51 61             		 r1 = [r5+0x4] 			  ## bankSwitch.c:115:57
    c0dc:    c2 ff 28 fc 19 00 	r2 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## bankSwitch.c:115:5
    c0e2:    c4 00             	call r4			  ## bankSwitch.c:115:5
    c0e4:    22 88             	sp += 0xa0
    c0e6:    5f 04             	{pc, r15-r4} = [sp++]			  ## bankSwitch.c:118:1


spi_unmount:
    c0e8:    77 04             	[--sp] = {rets, r7-r4}			  ## spi0.c:90:0
    c0ea:    c0 ff 00 1c fd 00 	r0 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## spi0.c:92:18
    c0f0:    40 ea 00 00       	[r0+0x0] = 0x0			  ## spi0.c:92:18
    c0f4:    bf ea 51 f6       	call -0x135e <spi_get_port : ad9a >			  ## spi0.c:96:16
    c0f8:    c1 ff 08 53 fd 00 	r1 = 0xfd5308 <RAM_LIMIT_H+0xE35308 : fd5308 >			  ## spi0.c:96:16
    c0fe:    c2 ef 01 10       	[r1+0x8] &= 0xFFFFFFFE			  ## spi0.c:96:16
    c102:    c3 ef 01 10       	[r1+0xc] &= 0xFFFFFFFE			  ## spi0.c:96:16
    c106:    00 ef 01 10       	[r1+0x0] |= 0x1			  ## spi0.c:96:16
    c10a:    c2 ef 02 10       	[r1+0x8] &= 0xFFFFFFFD			  ## spi0.c:96:16
    c10e:    c3 ef 02 10       	[r1+0xc] &= 0xFFFFFFFD			  ## spi0.c:96:16
    c112:    00 ef 02 10       	[r1+0x0] |= 0x2			  ## spi0.c:96:16
    c116:    00 49             	if (r0 == 0) goto 0x12 <spi_unmount+0x42 : c12a >
    c118:    40 30             	r0 = 0x10
    c11a:    12 2f             	r2 = -0x11
    c11c:    44 28             	r4 = 0x8
    c11e:    06 e1 00 12       	r6 = r1 + 0x200
    c122:    6b 8c             	r3 = r6 + 0xc
    c124:    17 37             	r7 = -0x9
    c126:    6d 88             	r5 = r6 + 0x8
    c128:    04 87             	goto 0xe <spi_unmount+0x50 : c138 >
    c12a:    40 28             	r0 = 0x8
    c12c:    12 37             	r2 = -0x9
    c12e:    44 24             	r4 = 0x4
    c130:    1b 8c             	r3 = r1 + 0xc
    c132:    17 3b             	r7 = -0x5
    c134:    1d 88             	r5 = r1 + 0x8
    c136:    16 16             	r6 = r1
    c138:    64 e8 02 57       	[r5+0x0] &= r7
    c13c:    64 e8 02 37       	[r3+0x0] &= r7
    c140:    64 e8 00 64       	[r6+0x0] |= r4
    c144:    c2 ef 40 10       	[r1+0x8] &= 0xFFFFFFBF
    c148:    c3 ef 40 10       	[r1+0xc] &= 0xFFFFFFBF
    c14c:    00 ef 40 10       	[r1+0x0] |= 0x40
    c150:    64 e8 02 32       	[r3+0x0] &= r2
    c154:    64 e8 00 50       	[r5+0x0] |= r0
    c158:    64 e8 00 60       	[r6+0x0] |= r0
    c15c:    57 04             	{pc, r7-r4} = [sp++]			  ## spi0.c:148:1


run_flash:
    c15e:    77 04             	[--sp] = {rets, r7-r4}			  ## boot_flash.c:74:0
    c160:    c6 ff 90 ec 01 00 	r6 = 0x1ec90 <spi_flash_io_nor : 1ec90 >			  ## boot_flash.c:74:0
    c166:    c4 ff 00 fc 19 00 	r4 = 0x19fc00 <spi_flash_io : 19fc00 >			  ## boot_flash.c:74:0
    c16c:    60 16             	r0 = r6			  ## boot_flash.c:78:5
    c16e:    41 16             	r1 = r4			  ## boot_flash.c:78:5
    c170:    10 83             	rep 0x4 0x4 {			  ## boot_flash.c:78:5
    c172:    02 05             		r2 = [r0++=0x4] 			  ## boot_flash.c:78:5
    c174:    92 05             		[r1++=0x4] = r2
                               	}			  ## boot_flash.c:78:5
    c176:    c0 ff 10 fc 19 00 	r0 = 0x19fc10 <spi_port : 19fc10 >			  ## boot_flash.c:80:27
    c17c:    07 60             	r7 = [r0+0x0] 			  ## boot_flash.c:80:27
    c17e:    c0 ff 00 02 fe 00 	r0 = 0xfe0200 <RAM_LIMIT_H+0xE40200 : fe0200 >			  ## spi0.c:193:17
    c184:    40 ea 00 00       	[r0+0x0] = 0x0			  ## spi0.c:193:17
    c188:    c5 ff 00 1c fd 00 	r5 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## spi0.c:193:17
    c18e:    40 ea 20 50       	[r5+0x0] = 0x20			  ## spi0.c:194:18
    c192:    70 60             	r0 = [r7+0x0] 			  ## spi0.c:197:28
    c194:    b0 e1 20 04       	r0 = uextra(r0, p:0x8, l:0x8)			  ## spi0.c:197:28
    c198:    d0 61             	[r5+0x4] = r0			  ## spi0.c:197:19
    c19a:    70 60             	r0 = [r7+0x0] 			  ## spi0.c:199:29
    c19c:    b0 e1 94 01       	r0 = uextra(r0, p:0x3, l:0x5)			  ## spi0.c:199:29
    c1a0:    bf ea a9 f5       	call -0x14ae <spi_port_io_init : acf6 >			  ## spi0.c:199:5
    c1a4:    72 60             	r2 = [r7+0x0] 			  ## spi0.c:203:16
    c1a6:    51 60             	r1 = [r5+0x0] 			  ## spi0.c:203:16
    c1a8:    c0 ff 14 60 fd 00 	r0 = 0xfd6014 <RAM_LIMIT_H+0xE36014 : fd6014 >			  ## spi0.c:203:16
    c1ae:    60 ff 07 20 05 00 	if ((r2 & 0x7) == 0) goto 0xa <run_flash+0x60 : c1be >			  ## spi0.c:203:9
    c1b4:    31 23             	r1 |= 0x8			  ## spi0.c:204:22
    c1b6:    d1 60             	[r5+0x0] = r1			  ## spi0.c:204:22
    c1b8:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:205:24
    c1ba:    b9 33             	r1 &= 0xfff7ffff			  ## spi0.c:205:24
    c1bc:    04 84             	goto 0x8 <run_flash+0x68 : c1c6 >			  ## spi0.c:205:24
    c1be:    b9 23             	r1 &= 0xfffffff7			  ## spi0.c:208:22
    c1c0:    d1 60             	[r5+0x0] = r1			  ## spi0.c:208:22
    c1c2:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:209:24
    c1c4:    31 33             	r1 |= 0x80000			  ## spi0.c:209:24
    c1c6:    81 60             	[r0+0x0] = r1
    c1c8:    00 ef 01 50       	[r5+0x0] |= 0x1			  ## spi0.c:212:18
    c1cc:    40 21             	r0 = 0x1			  ## spi0.c:213:5
    c1ce:    bf ea e9 f5       	call -0x142e <SPI0_cs : ada4 >			  ## spi0.c:213:5
    c1d2:    40 20             	r0 = 0x0			  ## norflash.c:221:5
    c1d4:    bf ea e6 f5       	call -0x1434 <SPI0_cs : ada4 >			  ## norflash.c:221:5
    c1d8:    68 2b             	r0 = 0xab			  ## norflash.c:223:5
    c1da:    bf ea 0e f6       	call -0x13e4 <SPI0_WriteByte : adfa >			  ## norflash.c:223:5
    c1de:    78 3f             	r0 = 0xff			  ## norflash.c:226:5
    c1e0:    bf ea 0b f6       	call -0x13ea <SPI0_WriteByte : adfa >			  ## norflash.c:226:5
    c1e4:    78 3f             	r0 = 0xff			  ## norflash.c:227:5
    c1e6:    bf ea 08 f6       	call -0x13f0 <SPI0_WriteByte : adfa >			  ## norflash.c:227:5
    c1ea:    78 3f             	r0 = 0xff			  ## norflash.c:228:5
    c1ec:    bf ea 05 f6       	call -0x13f6 <SPI0_WriteByte : adfa >			  ## norflash.c:228:5
    c1f0:    bf ea 0c f6       	call -0x13e8 <SPI0_ReadByte : ae0c >			  ## norflash.c:230:5
    c1f4:    40 21             	r0 = 0x1			  ## norflash.c:231:5
    c1f6:    bf ea d5 f5       	call -0x1456 <SPI0_cs : ada4 >			  ## norflash.c:231:5
    c1fa:    47 e0 6a ff       	r7 = -0x96 <RAM_LIMIT_H+0xFFFFFFFFFFE5FF6A : ffffffffffffff6a >
    c1fe:    04 92             	goto 0x24 <run_flash+0xC6 : c224 >
    c200:    40 20             	r0 = 0x0			  ## norflash.c:58:9
    c202:    bf ea cf f5       	call -0x1462 <SPI0_cs : ada4 >			  ## norflash.c:58:9
    c206:    40 25             	r0 = 0x5			  ## norflash.c:59:9
    c208:    bf ea f7 f5       	call -0x1412 <SPI0_WriteByte : adfa >			  ## norflash.c:59:9
    c20c:    bf ea fe f5       	call -0x1404 <SPI0_ReadByte : ae0c >			  ## norflash.c:60:19
    c210:    05 16             	r5 = r0			  ## norflash.c:60:19
    c212:    40 21             	r0 = 0x1			  ## norflash.c:61:9
    c214:    bf ea c6 f5       	call -0x1474 <SPI0_cs : ada4 >			  ## norflash.c:61:9
    c218:    55 e8 05 00       	if ((r5 & 0x1) == 0) goto 0xa <run_flash+0xC8 : c226 >			  ## norflash.c:61:9
    c21c:    40 21             	r0 = 0x1			  ## norflash.c:66:9
    c21e:    bf ea fb f0       	call -0x1e0a <mdelay : a418 >			  ## norflash.c:66:9
    c222:    c7 21             	r7 += 0x1			  ## norflash.c:66:9
    c224:    f7 4d             	if (r7 != 0) goto -0x26 <run_flash+0xA2 : c200 >
    c226:    40 20             	r0 = 0x0			  ## norflash.c:254:5
    c228:    45 20             	r5 = 0x0			  ## norflash.c:254:5
    c22a:    bf ea bb f5       	call -0x148a <SPI0_cs : ada4 >			  ## norflash.c:254:5
    c22e:    58 26             	r0 = 0x66			  ## norflash.c:255:5
    c230:    bf ea e3 f5       	call -0x143a <SPI0_WriteByte : adfa >			  ## norflash.c:255:5
    c234:    40 21             	r0 = 0x1			  ## norflash.c:257:5
    c236:    bf ea b5 f5       	call -0x1496 <SPI0_cs : ada4 >			  ## norflash.c:257:5
    c23a:    40 20             	r0 = 0x0			  ## norflash.c:259:5
    c23c:    bf ea b2 f5       	call -0x149c <SPI0_cs : ada4 >			  ## norflash.c:259:5
    c240:    60 39             	r0 = 0x99			  ## norflash.c:261:5
    c242:    bf ea da f5       	call -0x144c <SPI0_WriteByte : adfa >			  ## norflash.c:261:5
    c246:    40 21             	r0 = 0x1			  ## norflash.c:263:5
    c248:    bf ea ac f5       	call -0x14a8 <SPI0_cs : ada4 >			  ## norflash.c:263:5
    c24c:    40 22             	r0 = 0x2			  ## norflash.c:264:5
    c24e:    bf ea e3 f0       	call -0x1e3a <mdelay : a418 >			  ## norflash.c:264:5
    c252:    c5 61             	[r4+0x4] = r5			  ## boot_flash.c:82:29
    c254:    04 88             	goto 0x10 <run_flash+0x108 : c266 >			  ## boot_flash.c:82:29
    c256:    40 16             	r0 = r4			  ## boot_flash.c:85:9
    c258:    bf ea 06 fe       	call -0x3f4 <Run_App : be68 >			  ## boot_flash.c:85:9
    c25c:    68 90             	r0 = r6 + 0x10			  ## boot_flash.c:86:35
    c25e:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## boot_flash.c:86:35
    c262:    c0 61             	[r4+0x4] = r0			  ## boot_flash.c:86:33
    c264:    c5 21             	r5 += 0x1			  ## boot_flash.c:84:37
    c266:    85 f8 f6 0b       	if (r5 != 0x5) goto -0x14 <run_flash+0xF8 : c256 >
    c26a:    bf ea 3d ff       	call -0x186 <spi_unmount : c0e8 >			  ## boot_flash.c:89:5
    c26e:    57 04             	{pc, r7-r4} = [sp++]			  ## boot_flash.c:90:1


flash_poweroff:
    c270:    74 04             	[--sp] = {rets, r4}			  ## norflash.c:419:0
    c272:    c1 ff 00 53 fd 00 	r1 = 0xfd5300 <RAM_LIMIT_H+0xE35300 : fd5300 >			  ## norflash.c:419:0
    c278:    c7 ef 10 10       	[r1+0x1c] &= 0xFFFFFFEF			  ## norflash.c:420:19
    c27c:    c6 ef 10 10       	[r1+0x18] &= 0xFFFFFFEF			  ## norflash.c:421:19
    c280:    02 ef 10 10       	[r1+0x8] |= 0x10			  ## norflash.c:422:19
    c284:    c4 ef 10 10       	[r1+0x10] &= 0xFFFFFFEF			  ## norflash.c:423:19
    c288:    05 ef 10 10       	[r1+0x14] |= 0x10			  ## norflash.c:424:19
    c28c:    c0 ef 10 10       	[r1+0x0] &= 0xFFFFFFEF			  ## norflash.c:425:19
    c290:    04 16             	r4 = r0			  ## norflash.c:425:19
    c292:    40 21             	r0 = 0x1			  ## norflash.c:426:5
    c294:    bf ea c0 f0       	call -0x1e80 <mdelay : a418 >			  ## norflash.c:426:5
    c298:    34 ea 01 80       	if ((r4 & 0x1) != 0) {			  ## norflash.c:426:5
    c29c:    40 21             		r0 = 0x1			  ## norflash.c:428:9
    c29e:    41 20             		r1 = 0x0			  ## norflash.c:428:9
    c2a0:    bf ea 97 f0       		call -0x1ed2
                               	} <spi_cs_pu : a3d2 >			  ## norflash.c:428:9
    c2a4:    34 ea 02 80       	if ((r4 & 0x2) != 0) {			  ## norflash.c:428:9
    c2a8:    40 22             		r0 = 0x2			  ## norflash.c:431:9
    c2aa:    41 20             		r1 = 0x0			  ## norflash.c:431:9
    c2ac:    bf ea 91 f0       		call -0x1ede
                               	} <spi_cs_pu : a3d2 >			  ## norflash.c:431:9
    c2b0:    40 2a             	r0 = 0xa			  ## norflash.c:436:5
    c2b2:    bf ea b1 f0       	call -0x1e9e <mdelay : a418 >			  ## norflash.c:436:5
    c2b6:    54 04             	{pc, r4} = [sp++]			  ## norflash.c:437:1


delay:
    c2b8:    e2 9f             	sp += -0x4			  ## timer.c:34:0
    c2ba:    80 20             	[sp] = r0			  ## timer.c:34:0
    c2bc:    04 81             	goto 0x2 <delay+0x8 : c2c0 >			  ## timer.c:34:0
    c2be:    00 00             	nop			  ## timer.c:39:9
    c2c0:    00 20             	r0 = [sp]			  ## timer.c:38:16
    c2c2:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## timer.c:38:16
    c2c6:    81 20             	[sp] = r1			  ## timer.c:38:16
    c2c8:    f0 5a             	if (r0 != 0) goto -0xc <delay+0x6 : c2be >			  ## timer.c:38:16
    c2ca:    02 81             	sp += 0x4
    c2cc:    80 00             	rts			  ## timer.c:42:1


_pll_init:
    c2ce:    10 04             	[--sp] = rets			  ## clock.c:181:0
    c2d0:    c3 ff 00 46 fd 00 	r3 = 0xfd4600 <RAM_LIMIT_H+0xE34600 : fd4600 >			  ## clock.c:181:0
    c2d6:    44 ea 00 30       	[r3+0x10] = 0x0			  ## clock.c:137:19
    c2da:    40 e0 1f 01       	r0 = 0x11f <var_bss_size+0x12 : 11e >			  ## clock.c:138:19
    c2de:    b0 63             	[r3+0xc] = r0			  ## clock.c:138:19
    c2e0:    42 ea 5e 30       	[r3+0x8] = 0x5E			  ## clock.c:139:19
    c2e4:    c2 ff 28 fc 19 00 	r2 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## clock.c:205:27
    c2ea:    20 61             	r0 = [r2+0x4] 			  ## clock.c:140:21
    c2ec:    c1 ff 80 84 1e 00 	r1 = 0x1e8480 <RAM_LIMIT_H+0x48480 : 1e8480 >			  ## clock.c:140:21
    c2f2:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## clock.c:140:21
    c2f6:    f8 3e             	r0 += -0x2			  ## clock.c:140:21
    c2f8:    30 2b             	r0 |= 0x800			  ## clock.c:140:21
    c2fa:    b0 61             	[r3+0x4] = r0			  ## clock.c:140:19
    c2fc:    c0 ff 90 2d 89 40 	r0 = 0x40892d90 <RAM_LIMIT_H+0x406F2D90 : 40892d90 >			  ## clock.c:141:19
    c302:    b0 60             	[r3+0x0] = r0			  ## clock.c:141:19
    c304:    00 ef 01 30       	[r3+0x0] |= 0x1			  ## clock.c:142:18
    c308:    40 2a             	r0 = 0xa			  ## clock.c:143:5
    c30a:    bf ea f6 ef       	call -0x2014 <udelay : a2fa >			  ## clock.c:143:5
    c30e:    00 ef 02 30       	[r3+0x0] |= 0x2			  ## clock.c:144:18
    c312:    68 20             	r0 = 0xa0			  ## clock.c:145:5
    c314:    bf ea f1 ef       	call -0x201e <udelay : a2fa >			  ## clock.c:145:5
    c318:    03 ef 00 3f       	[r3+0xc] |= 0x200			  ## clock.c:146:18
    c31c:    c3 ff 18 00 fd 00 	r3 = 0xfd0018 <RAM_LIMIT_H+0xE30018 : fd0018 >			  ## clock.c:146:18
    c322:    c0 ef f0 30       	[r3+0x0] &= 0xFFFFFF0F			  ## clock.c:184:24
    c326:    00 ef 30 30       	[r3+0x0] |= 0x30			  ## clock.c:185:24
    c32a:    c0 ef 80 3f       	[r3+0x0] &= 0xFFFFFEFF			  ## clock.c:186:24
    c32e:    c0 ef 00 3f       	[r3+0x0] &= 0xFFFFFDFF			  ## clock.c:187:24
    c332:    c0 ef 80 3e       	[r3+0x0] &= 0xFFFFFBFF			  ## clock.c:188:24
    c336:    c2 ef 40 3f       	[r3+0x8] &= 0xFFFFFCFF			  ## clock.c:190:24
    c33a:    c1 ef 0f 30       	[r3+0x4] &= 0xFFFFFFF0			  ## clock.c:193:24
    c33e:    01 ef 03 30       	[r3+0x4] |= 0x3			  ## clock.c:194:24
    c342:    c1 ef f0 30       	[r3+0x4] &= 0xFFFFFF0F			  ## clock.c:195:24
    c346:    01 ef 40 30       	[r3+0x4] |= 0x40			  ## clock.c:196:24
    c34a:    40 2a             	r0 = 0xa			  ## clock.c:198:5
    c34c:    51 95             	call -0x96 <delay : c2b8 >			  ## clock.c:198:5
    c34e:    c1 ef e0 3e       	[r3+0x4] &= 0xFFFFF8FF			  ## clock.c:199:24
    c352:    20 00             	csync			  ## clock.c:200:5
    c354:    01 ef c0 3e       	[r3+0x4] |= 0x600			  ## clock.c:201:24
    c358:    20 00             	csync			  ## clock.c:202:5
    c35a:    40 2a             	r0 = 0xa			  ## clock.c:203:5
    c35c:    51 8d             	call -0xa6 <delay : c2b8 >			  ## clock.c:203:5
    c35e:    c0 ff 00 6c dc 02 	r0 = 0x2dc6c00 <RAM_LIMIT_H+0x2C26C00 : 2dc6c00 >			  ## clock.c:205:27
    c364:    a0 62             	[r2+0x8] = r0			  ## clock.c:205:27
    c366:    00 04             	pc = [sp++]			  ## clock.c:207:1


main:
    c368:    c0 ff 7c fd 19 00 	r0 = 0x19fd7c <mask_putchar : 19fd7c >			  ## main.c:72:0
    c36e:    c7 ff 18 fc 19 00 	r7 = 0x19fc18 <g_boot_soft_flag : 19fc18 >			  ## uart.c:57:18
    c374:    79 44             	r1 = b[r7+0x4] (u)			  ## boot_init.c:85:50
    c376:    c2 ff ee c5 00 00 	r2 = 0xc5ee <ut_empty : c5ee >			  ## uart.c:57:18
    c37c:    82 60             	[r0+0x0] = r2			  ## uart.c:57:18
    c37e:    ca ff c0 13 18 00 	r10 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## uart.c:57:18
    c384:    c8 ff 28 fc 19 00 	r8 = 0x19fc28 <boot_arg_list : 19fc28 >			  ## uart.c:57:18
    c38a:    51 e8 8c 02       	if ((r1 & 0x1) != 0) goto 0x118 <main+0x13E : c4a6 >			  ## uart.c:57:18
    c38e:    80 ff dc 80 ff ff 	call -0x7f24 <nvram_boot_state : 4470 >			  ## boot_mode.c:108:25
    c394:    04 16             	r4 = r0			  ## boot_mode.c:108:25
    c396:    b4 5b             	if (r4 != 0) goto 0xf6 <main+0x126 : c48e >
    c398:    c0 ff ff ff 00 00 	r0 = 0xffff <.GJTIE291_0_0_+0x734 : fffe >			  ## usb_key.c:47:16
    c39e:    50 ed a7 00       	h[r10+0x6] = r0			  ## usb_key.c:47:16
    c3a2:    c5 ff 00 60 fd 00 	r5 = 0xfd6000 <RAM_LIMIT_H+0xE36000 : fd6000 >			  ## usb_key.c:47:16
    c3a8:    00 ef 04 50       	[r5+0x0] |= 0x4			  ## usb_key.c:74:5
    c3ac:    00 ef 08 50       	[r5+0x0] |= 0x8			  ## usb_key.c:75:5
    c3b0:    00 ef 80 5f       	[r5+0x0] |= 0x100			  ## usb_key.c:77:5
    c3b4:    00 ef 00 5f       	[r5+0x0] |= 0x200			  ## usb_key.c:78:5
    c3b8:    c1 ff 8e c5 00 00 	r1 = 0xc58e <usb_key_isr : c58e >			  ## usb_key.c:81:5
    c3be:    40 27             	r0 = 0x7			  ## usb_key.c:81:5
    c3c0:    42 20             	r2 = 0x0			  ## usb_key.c:81:5
    c3c2:    44 20             	r4 = 0x0			  ## usb_key.c:81:5
    c3c4:    bf ea 6f ef       	call -0x2122 <HWI_Install : a2a6 >			  ## usb_key.c:81:5
    c3c8:    40 20             	r0 = 0x0			  ## usb_key.c:82:5
    c3ca:    bf ea 67 f2       	call -0x1b32 <set_timer3_captrue_dp : a89c >			  ## usb_key.c:82:5
    c3ce:    c0 ff 00 07 fd 00 	r0 = 0xfd0700 <RAM_LIMIT_H+0xE30700 : fd0700 >			  ## usb_key.c:82:5
    c3d4:    84 62             	[r0+0x8] = r4			  ## usb_key.c:84:20
    c3d6:    84 61             	[r0+0x4] = r4			  ## usb_key.c:85:20
    c3d8:    40 ea 12 00       	[r0+0x0] = 0x12			  ## usb_key.c:86:20
    c3dc:    39 f1 08 57       	r9 = r5 + -0x8f8  #			  ## usb_key.c:86:20
    c3e0:    78 41             		 r0 = b[r7+0x1] (u)			  ## uart_key.c:214:38
    c3e2:    20 ea 10 c0       	if ((r0 & 0x10) == 0) {			  ## uart_key.c:214:38
    c3e6:    c2 ef 01 90       		[r9+0x8] &= 0xFFFFFFFE			  ## uart_key.c:215:46
    c3ea:    03 ef 01 90       		[r9+0xc] |= 0x1			  ## uart_key.c:216:46
    c3ee:    00 ef 01 90       		[r9+0x0] |= 0x1			  ## uart_key.c:217:47
    c3f2:    01 ef 01 90       		[r9+0x4] |= 0x1
                               	}			  ## uart_key.c:218:47
    c3f6:    d0 ec ad 40       	[r10+0xc] = r4			  ## uart_key.c:194:13
    c3fa:    bf ea 8e f1       	call -0x1ce4 <reset_status : a71a >			  ## uart_key.c:195:5
    c3fe:    3b e1 04 5c       	r11 = r5 + -0x3fc			  ## uart_key.c:195:5
    c402:    40 ea 31 b0       	[r11+0x0] = 0x31			  ## uart_key.c:200:25
    c406:    c9 ef 70 5c       	[r5+0x24] &= 0xFFFF0FFF			  ## uart_key.c:201:24
    c40a:    09 ef 80 5d       	[r5+0x24] |= 0x1000			  ## uart_key.c:202:24
    c40e:    cc ff 00 05 fd 00 	r12 = 0xfd0500 <RAM_LIMIT_H+0xE30500 : fd0500 >			  ## uart_key.c:202:24
    c414:    40 ea 80 cc       	[r12+0x0] = 0x4000			  ## uart_key.c:204:18
    c418:    c1 ff a4 a7 00 00 	r1 = 0xa7a4 <capture_isr : a7a4 >			  ## uart_key.c:205:5
    c41e:    40 25             	r0 = 0x5			  ## uart_key.c:205:5
    c420:    42 20             	r2 = 0x0			  ## uart_key.c:205:5
    c422:    bf ea 40 ef       	call -0x2180 <HWI_Install : a2a6 >			  ## uart_key.c:205:5
    c426:    44 ea 01 a0       	[r10+0x10] = 0x1			  ## uart_key.c:206:15
    c42a:    d0 ec c5 40       	[r12+0x4] = r4			  ## uart_key.c:207:18
    c42e:    d0 ec c9 40       	[r12+0x8] = r4			  ## uart_key.c:208:18
    c432:    40 ea 42 c0       	[r12+0x0] = 0x42			  ## uart_key.c:209:18
    c436:    bf ea 9f f1       	call -0x1cc2 <set_cap_timeout : a778 >			  ## boot_mode.c:72:5
    c43a:    02 e1 00 c1       	r2 = r12 + 0x100			  ## boot_mode.c:72:5
    c43e:    20 60             	r0 = [r2+0x0] 			  ## boot_mode.c:40:21
    c440:    88 17             	r0 = r0.l (s)			  ## boot_mode.c:73:12
    c442:    80 fd 10 00       	ifs (r0 < 0x0) goto 0x20 <main+0xFE : c466 >			  ## boot_mode.c:73:12
    c446:    50 ed a6 00       	r0 = h[r10+0x6] (u)			  ## boot_mode.c:76:35
    c44a:    bf ea 4f f2       	call -0x1b62 <check_key_type : a8ec >			  ## boot_mode.c:76:20
    c44e:    00 f8 09 02       	if (r0 == 0x1) goto 0x12 <main+0xFC : c464 >
    c452:    50 ed a4 00       	r0 = h[r10+0x4] (u)			  ## boot_mode.c:83:35
    c456:    bf ea 49 f2       	call -0x1b6e <check_key_type : a8ec >			  ## boot_mode.c:83:20
    c45a:    04 16             	r4 = r0			  ## boot_mode.c:83:20
    c45c:    84 f8 ef 09       	if (r4 != 0x4) goto -0x22 <main+0xD6 : c43e >
    c460:    44 24             	r4 = 0x4
    c462:    04 81             	goto 0x2 <main+0xFE : c466 >
    c464:    44 21             	r4 = 0x1
    c466:    46 e0 00 40       	r6 = 0x4000 <STFT_Win_FixHalf_M256_D80+0x1FC : 4000 >			  ## boot_mode.c:44:17
    c46a:    c5 d4             	r13 = 0  #			  ## boot_mode.c:44:17
    c46c:    a6 60             		 [r2+0x0] = r6			  ## boot_mode.c:44:17
    c46e:    40 20             	r0 = 0x0			  ## usb_key.c:91:5
    c470:    bf ea 4f f2       	call -0x1b62 <set_timer3_captrue_dp_disable : a912 >			  ## usb_key.c:91:5
    c474:    00 ef 04 50       	[r5+0x0] |= 0x4			  ## usb_key.c:92:5
    c478:    00 ef 08 50       	[r5+0x0] |= 0x8			  ## usb_key.c:93:5
    c47c:    d0 ec c1 60       	[r12+0x0] = r6			  ## uart_key.c:79:18
    c480:    d0 ec b1 d0       	[r11+0x0] = r13			  ## uart_key.c:80:25
    c484:    78 41             	r0 = b[r7+0x1] (u)			  ## uart_key.c:231:38
    c486:    20 ea 10 00       	if ((r0 & 0x10) == 0) {			  ## uart_key.c:231:38
    c48a:    c3 ef 01 90       		[r9+0xc] &= 0xFFFFFFFE
                               	}			  ## uart_key.c:232:46
    c48e:    30 e1 ff 4f       	r0 = r4 + -0x1			  ## main.c:99:5
    c492:    80 f9 44 04       	if (r0 < 0x2) goto 0x88 <main+0x1B6 : c51e >			  ## main.c:99:5
    c496:    30 e1 fd 4f       	r0 = r4 + -0x3
    c49a:    00 fc 04 02       	if (r0 > 0x1) goto 0x8 <main+0x13E : c4a6 >
    c49e:    40 20             	r0 = 0x0			  ## main.c:104:9
    c4a0:    bf ea 70 f3       	call -0x1920 <uart_upgrade_init : ab84 >			  ## main.c:104:9
    c4a4:    14 9f             	goto 0x7e <main+0x1BC : c524 >			  ## main.c:104:9
    c4a6:    47 20             	r7 = 0x0
    c4a8:    52 ee 80 70       	b[r8+0x0] = r7			  ## main.c:34:31
    c4ac:    cc ff 24 fc 19 00 	r12 = 0x19fc24 <g_spi_boot_port : 19fc24 >			  ## main.c:34:31
    c4b2:    c5 ff 10 fc 19 00 	r5 = 0x19fc10 <spi_port : 19fc10 >			  ## main.c:34:31
    c4b8:    46 21             	r6 = 0x1			  ## main.c:34:31
    c4ba:    c9 ff 74 84 01 00 	r9 = 0x18474 <norflash_check_in.spi0_portb_config : 18474 >			  ## main.c:34:31
    c4c0:    cb ff 70 84 01 00 	r11 = 0x18470 <norflash_check_in.spi0_porta_config : 18470 >			  ## main.c:34:31
    c4c6:    04 82             	goto 0x4 <main+0x164 : c4cc >			  ## main.c:34:31
    c4c8:    bf ea 3f f2       	call -0x1b82 <wdt_clr : a94a >			  ## main.c:58:9
    c4cc:    50 ee c0 40       	r4 = b[r12+0x0] (u)			  ## boot_init.c:80:12
    c4d0:    54 e8 0c 00       	if ((r4 & 0x1) == 0) goto 0x18 <main+0x184 : c4ec >
    c4d4:    de 44             	b[r5+0x4] = r6			  ## boot_flash.c:106:24
    c4d6:    d0 ec 51 b0       	[r5+0x0] = r11			  ## boot_flash.c:107:32
    c4da:    40 21             	r0 = 0x1			  ## boot_flash.c:109:9
    c4dc:    41 2a             	r1 = 0xa			  ## boot_flash.c:109:9
    c4de:    bf ea a5 ef       	call -0x20b6 <flash_poweron : a42c >			  ## boot_flash.c:109:9
    c4e2:    bf ea 3c fe       	call -0x388 <run_flash : c15e >			  ## boot_flash.c:111:9
    c4e6:    40 21             	r0 = 0x1			  ## boot_flash.c:113:9
    c4e8:    bf ea c2 fe       	call -0x27c <flash_poweroff : c270 >			  ## boot_flash.c:113:9
    c4ec:    54 e8 0c 08       	if ((r4 & 0x2) == 0) goto 0x18 <main+0x1A0 : c508 >
    c4f0:    de 44             	b[r5+0x4] = r6			  ## boot_flash.c:124:24
    c4f2:    d0 ec 51 90       	[r5+0x0] = r9			  ## boot_flash.c:125:32
    c4f6:    40 22             	r0 = 0x2			  ## boot_flash.c:127:9
    c4f8:    41 2a             	r1 = 0xa			  ## boot_flash.c:127:9
    c4fa:    bf ea 97 ef       	call -0x20d2 <flash_poweron : a42c >			  ## boot_flash.c:127:9
    c4fe:    bf ea 2e fe       	call -0x3a4 <run_flash : c15e >			  ## boot_flash.c:129:9
    c502:    40 22             	r0 = 0x2			  ## boot_flash.c:131:9
    c504:    bf ea b4 fe       	call -0x298 <flash_poweroff : c270 >			  ## boot_flash.c:131:9
    c508:    37 e8 00 80       	if (r7 == 0x0) {
    c50c:    40 21             		r0 = 0x1			  ## main.c:48:13
    c50e:    47 21             		r7 = 0x1			  ## main.c:48:13
    c510:    bf ea 38 f3       		call -0x1990
                               	} <uart_upgrade_init : ab84 >			  ## main.c:48:13
    c514:    40 20             	r0 = 0x0			  ## main.c:53:19
    c516:    bf ea 96 f3       	call -0x18d4 <check_usb_sof : ac46 >			  ## main.c:53:19
    c51a:    60 56             	if (r0 == 0) goto -0x54 <main+0x160 : c4c8 >
    c51c:    04 83             	goto 0x6 <main+0x1BC : c524 >
    c51e:    40 23             	r0 = 0x3			  ## main.c:110:9
    c520:    bf ea 91 f3       	call -0x18de <check_usb_sof : ac46 >			  ## main.c:110:9
    c524:    c0 ff 54 c2 f2 00 	r0 = 0xf2c254 <RAM_LIMIT_H+0xD8C254 : f2c254 >
    c52a:    01 60             	r1 = [r0+0x0] 			  ## main.c:121:5
    c52c:    71 e1 07 10       	r1 = r1 & 0xFFFFFFF8			  ## main.c:121:5
    c530:    41 e1 06 10       	r1 = r1 | 0x6			  ## main.c:121:5
    c534:    43 f0 a0 0f       	r3 = 0xfa0  # <usb_code_size+0x4DC : fa0 >			  ## main.c:121:5
    c538:    81 60             		 [r0+0x0] = r1			  ## main.c:121:5
    c53a:    d0 ec a4 12       	r1 = [r10+0x24]			  ## main.c:121:5
    c53e:    41 ea 00 80       	[r8+0x4] = 0x0			  ## clock.c:166:28
    c542:    30 e1 60 10       	r0 = r1 + -0xfa0			  ## clock.c:168:10
    c546:    a2 e0 00 10       	r2 = 0x0 - r1			  ## clock.c:168:10
    c54a:    c1 ff 00 09 3d 00 	r1 = 0x3d0900 <RAM_LIMIT_H+0x230900 : 3d0900 >			  ## clock.c:168:10
    c550:    c4 ff 80 bb 00 00 	r4 = 0xbb80 <LZ4_decompress_generic+0x10 : bb80 >			  ## clock.c:168:10
    c556:    c5 ff 80 84 1e 00 	r5 = 0x1e8480 <RAM_LIMIT_H+0x48480 : 1e8480 >			  ## clock.c:168:10
    c55c:    04 85             	goto 0xa <main+0x200 : c568 >			  ## clock.c:168:10
    c55e:    51 18             	r1 += r5			  ## clock.c:168:5
    c560:    30 e1 30 08       	r0 = r0 + -0x7d0			  ## clock.c:168:5
    c564:    03 e1 d0 37       	r3 = r3 + 0x7d0			  ## clock.c:168:44
    c568:    04 ec 09 30       	if (r3 > r4) goto 0x12 <main+0x216 : c57e >
    c56c:    ae 1c             	r6 = r2 + r3			  ## clock.c:170:13
    c56e:    b6 ee ff 0f       	ifs (r6 <= -0x1) {			  ## clock.c:170:13
    c572:    06 16             		r6 = r0
                               	}			  ## clock.c:170:13
    c574:    0c ff e8 63 f2 ff 	ifs (r6 > 0x3e8) goto -0x1c <main+0x1F6 : c55e >			  ## clock.c:170:13
    c57a:    d0 ec 85 10       	[r8+0x4] = r1			  ## clock.c:171:36
    c57e:    bf ea a6 fe       	call -0x2b4 <_pll_init : c2ce >			  ## clock.c:225:5
    c582:    48 32             	r0 = 0x32			  ## clock.c:226:5
    c584:    bf ea 48 ef       	call -0x2170 <mdelay : a418 >			  ## clock.c:226:5
    c588:    80 ff 7a 82 ff ff 	call -0x7d86 <usb_slave_mode : 4808 >			  ## main.c:128:5


usb_key_isr:
    c58e:    e9 04             	[--sp] = {psr, rets, reti}			  ## usb_key.c:17:0
    c590:    60 04             	[--sp] = {r3-r0}			  ## usb_key.c:17:0
    c592:    c0 ff 00 07 fd 00 	r0 = 0xfd0700 <RAM_LIMIT_H+0xE30700 : fd0700 >			  ## usb_key.c:17:0
    c598:    00 ef 80 0c       	[r0+0x0] |= 0x4000			  ## usb_key.c:20:20
    c59c:    11 e1 00 01       	r1 = r0 + 0x1100			  ## usb_key.c:22:9
    c5a0:    11 60             	r1 = [r1+0x0] 			  ## usb_key.c:22:9
    c5a2:    c2 ff c0 13 18 00 	r2 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## usb_key.c:22:9
    c5a8:    b1 f1 04 18       	r1 = uextra(r1, p:0x10, l:0x1)  #			  ## usb_key.c:22:9
    c5ac:    2b 63             		 r3 = h[r2+0x6] (u)			  ## usb_key.c:22:9
    c5ae:    a1 e1 fc 30       	r1 <= insert(r3, p:0x1, l:0x1f)			  ## usb_key.c:22:9
    c5b2:    a9 63             	h[r2+0x6] = r1			  ## usb_key.c:22:9
    c5b4:    42 f0 ef 16       	r2 = 0x16ef  # <WOLASynthesisFilter_Float_M128_m4_r1+0x6EA : 16ee >			  ## usb_key.c:28:20
    c5b8:    29 63             		 r1 = h[r2+0x6] (u)			  ## usb_key.c:28:9
    c5ba:    82 e8 15 10       	if (r1 != r2) goto 0x2a <usb_key_isr+0x5A : c5e8 >			  ## usb_key.c:28:9
    c5be:    40 ea 80 0c       	[r0+0x0] = 0x4000			  ## usb_key.c:29:24
    c5c2:    40 20             	r0 = 0x0			  ## usb_key.c:29:24
    c5c4:    c1 ff b8 58 fd 00 	r1 = 0xfd58b8 <RAM_LIMIT_H+0xE358B8 : fd58b8 >			  ## usb_key.c:29:24
    c5ca:    90 61             	[r1+0x4] = r0			  ## usb_key.c:31:28
    c5cc:    00 f1 48 17       	r0 = r1 + 0x748  #			  ## usb_key.c:31:28
    c5d0:    90 60             		 [r1+0x0] = r0			  ## usb_key.c:32:28
    c5d2:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## usb_key.c:33:9
    c5d6:    c0 ef 02 00       	[r0+0x0] &= 0xFFFFFFFD			  ## usb_key.c:34:9
    c5da:    c0 ef 04 00       	[r0+0x0] &= 0xFFFFFFFB			  ## usb_key.c:35:9
    c5de:    c0 ef 08 00       	[r0+0x0] &= 0xFFFFFFF7			  ## usb_key.c:36:9
    c5e2:    40 22             	r0 = 0x2			  ## usb_key.c:37:9
    c5e4:    bf ea 18 ef       	call -0x21d0 <mdelay : a418 >			  ## usb_key.c:37:9
    c5e8:    40 04             	{r3-r0} = [sp++]			  ## usb_key.c:39:1
    c5ea:    a9 04             	{psr, rets, reti} = [sp++]			  ## usb_key.c:39:1
    c5ec:    81 00             	rti			  ## usb_key.c:39:1


ut_empty:
    c5ee:    80 00             	rts			  ## uart.c:19:0


run_cpu1:
    c5f0:    64 e0 00 06       	r0 = cnum			  ## irq.c:25:0
    c5f4:    a0 e0 3f 00       	r0 = 0x3F - r0			  ## irq.c:30:43
    c5f8:    c1 ff 00 fe 19 00 	r1 = 0x19fe00 <_IRQ_MEM_ADDR : 19fe00 >			  ## irq.c:30:32
    c5fe:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## irq.c:30:32
    c602:    c0 00             	call r0			  ## irq.c:31:5
    c604:    f7 9f             	goto -0x2 <run_cpu1+0x14 : c604 >			  ## irq.c:33:5


switch_to_hrc_asm:
    c606:    c0 ff 14 00 fd 00 	r0 = 0xfd0014 <RAM_LIMIT_H+0xE30014 : fd0014 >			  ## clock.c:231:0
    c60c:    01 ef 01 00       	[r0+0x4] |= 0x1			  ## clock.c:232:24
    c610:    20 00             	csync			  ## clock.c:233:5
    c612:    00 00             	nop			  ## clock.c:234:5
    c614:    00 00             	nop			  ## clock.c:235:5
    c616:    00 00             	nop			  ## clock.c:236:5
    c618:    01 62             	r1 = [r0+0x8] 			  ## clock.c:237:5
    c61a:    71 e1 e0 1e       	r1 = r1 & 0xFFFFF8FF			  ## clock.c:237:5
    c61e:    41 e1 40 1f       	r1 = r1 | 0x300			  ## clock.c:237:5
    c622:    81 62             	[r0+0x8] = r1			  ## clock.c:237:5
    c624:    20 00             	csync			  ## clock.c:238:5
    c626:    00 00             	nop			  ## clock.c:239:5
    c628:    00 00             	nop			  ## clock.c:240:5
    c62a:    00 00             	nop			  ## clock.c:241:5
    c62c:    41 e0 00 fc       	r1 = -0x400 <RAM_LIMIT_H+0xFFFFFFFFFFE5FC00 : fffffffffffffc00 >			  ## clock.c:242:23
    c630:    64 e8 02 01       	[r0+0x0] &= r1			  ## clock.c:242:23
    c634:    80 00             	rts			  ## clock.c:243:1


tmr3_isr:
    c636:    e9 04             	[--sp] = {psr, rets, reti}			  ## clock.c:279:0
    c638:    d8 e8 1f 00       	[--sp] = {r4-r0}			  ## clock.c:283:5
    c63c:    58 24             	r0 = 0x64			  ## clock.c:283:5
    c63e:    bf ea 3b fe       	call -0x38a <delay : c2b8 >			  ## clock.c:283:5
    c642:    c2 ff 00 07 fd 00 	r2 = 0xfd0700 <RAM_LIMIT_H+0xE30700 : fd0700 >			  ## clock.c:283:5
    c648:    00 ef 80 2c       	[r2+0x0] |= 0x4000			  ## clock.c:284:20
    c64c:    21 62             	r1 = [r2+0x8] 			  ## clock.c:286:30
    c64e:    c0 ff c0 13 18 00 	r0 = 0x1813c0 <var_bss_begin : 1813c0 >			  ## clock.c:286:30
    c654:    04 6a             	r4 = [r0+0x28] 			  ## clock.c:286:36
    c656:    11 df             	r1 = r1 - r4  #			  ## clock.c:286:34
    c658:    23 62             		 r3 = [r2+0x8] 			  ## clock.c:287:27
    c65a:    83 6a             	[r0+0x28] = r3			  ## clock.c:287:14
    c65c:    03 6b             	r3 = [r0+0x2c] 			  ## clock.c:294:21
    c65e:    34 e1 fc 3e       	r4 = r3 + -0x104			  ## clock.c:294:30
    c662:    84 ec 10 10       	if (r1 <= r4) goto 0x20 <tmr3_isr+0x50 : c686 >			  ## clock.c:294:30
    c666:    03 e1 04 31       	r3 = r3 + 0x104			  ## clock.c:294:62
    c66a:    03 e9 0c 10       	if (r1 >= r3) goto 0x18 <tmr3_isr+0x50 : c686 >			  ## clock.c:294:62
    c66e:    68 e8 24 01       	[r0+0x24] += r1			  ## clock.c:295:23
    c672:    03 6c             	r3 = [r0+0x30] 			  ## clock.c:297:16
    c674:    c3 21             	r3 += 0x1			  ## clock.c:297:16
    c676:    83 6c             	[r0+0x30] = r3			  ## clock.c:297:16
    c678:    33 e8 04 40       	if (r3 == 0x4) {			  ## clock.c:297:16
    c67c:    40 ea 80 2c       		[r2+0x0] = 0x4000			  ## clock.c:300:28
    c680:    4d ea 01 00       		[r0+0x34] = 0x1
                               	}			  ## clock.c:302:26
    c684:    04 83             	goto 0x6 <tmr3_isr+0x56 : c68c >			  ## clock.c:302:26
    c686:    42 20             	r2 = 0x0
    c688:    82 6c             	[r0+0x30] = r2			  ## clock.c:305:17
    c68a:    82 69             	[r0+0x24] = r2			  ## clock.c:306:23
    c68c:    81 6b             	[r0+0x2c] = r1			  ## clock.c:309:14
    c68e:    d4 e8 1f 00       	{r4-r0} = [sp++]			  ## clock.c:310:1
    c692:    a9 04             	{psr, rets, reti} = [sp++]			  ## clock.c:310:1
    c694:    81 00             	rti			  ## clock.c:310:1


sfc_suspend:
    c696:    20 00             	csync			  ## sfc.c:8:0
    c698:    c1 ff 00 f9 3f 00 	r1 = 0x3ff900 <RAM_LIMIT_H+0x25F900 : 3ff900 >			  ## sfc.c:10:5
    c69e:    64 e0 00 26       	r2 = cnum			  ## hwi.h:185:5
    c6a2:    22 ab             	r2 = r2 << 0xb			  ## sfc.c:10:5
    c6a4:    d8 ec 2a 21       	r2 = [r2+r1<<2]			  ## sfc.c:10:5
    c6a8:    72 fe f9 ff       	ifs (r2 > -0x1) goto -0xe <sfc_suspend+0x8 : c69e >			  ## sfc.c:10:5
    c6ac:    20 00             	csync			  ## sfc.c:11:5
    c6ae:    c1 ff 00 05 ff 00 	r1 = 0xff0500 <RAM_LIMIT_H+0xE50500 : ff0500 >			  ## sfc.c:11:5
    c6b4:    12 60             	r2 = [r1+0x0] 			  ## sfc.c:11:5
    c6b6:    72 fe fd ff       	ifs (r2 > -0x1) goto -0x6 <sfc_suspend+0x1E : c6b4 >			  ## sfc.c:11:5
    c6ba:    c1 ff 00 02 fe 00 	r1 = 0xfe0200 <RAM_LIMIT_H+0xE40200 : fe0200 >
    c6c0:    12 60             	r2 = [r1+0x0] 			  ## sfc.c:14:20
    c6c2:    82 fd fd 01       	ifs (r2 < 0x0) goto -0x6 <sfc_suspend+0x2A : c6c0 >			  ## sfc.c:14:5
    c6c6:    c0 ef 01 10       	[r1+0x0] &= 0xFFFFFFFE			  ## sfc.c:16:17
    c6ca:    b0 e8 00 40       	if (r0 != 0x0) {			  ## sfc.c:16:17
    c6ce:    c0 ff 00 1c fd 00 		r0 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## sfc.c:18:22
    c6d4:    00 ef 01 00       		[r0+0x0] |= 0x1
                               	}			  ## sfc.c:18:22
    c6d8:    80 00             	rts			  ## sfc.c:20:1


sfc_resume:
    c6da:    b0 e8 00 40       	if (r0 != 0x0) {			  ## sfc.c:23:0
    c6de:    c0 ff 00 1c fd 00 		r0 = 0xfd1c00 <RAM_LIMIT_H+0xE31C00 : fd1c00 >			  ## sfc.c:26:22
    c6e4:    c0 ef 01 00       		[r0+0x0] &= 0xFFFFFFFE
                               	}			  ## sfc.c:26:22
    c6e8:    c0 ff 00 02 fe 00 	r0 = 0xfe0200 <RAM_LIMIT_H+0xE40200 : fe0200 >			  ## sfc.c:28:17
    c6ee:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## sfc.c:28:17
    c6f2:    80 00             	rts			  ## sfc.c:31:1


DcuCmoRegion:
    c6f4:    74 04             	[--sp] = {rets, r4}			  ## cache.c:312:0
    c6f6:    0c 1c             	r4 = r0 + r1			  ## cache.c:323:14
    c6f8:    43 21             	r3 = 0x1			  ## cache.c:323:9
    c6fa:    24 ea 1f 00       	if ((r4 & 0x1F) == 0) {			  ## cache.c:323:9
    c6fe:    43 20             		r3 = 0x0
                               	}			  ## cache.c:323:9
    c700:    64 e1 1f 00       	r4 = r0 & 0x1F			  ## cache.c:314:32
    c704:    41 18             	r1 += r4			  ## cache.c:314:20
    c706:    91 a5             	r1 = r1 >> 0x5			  ## cache.c:322:21
    c708:    31 18             	r1 += r3			  ## cache.c:323:9
    c70a:    4b 20             	r3 = 0x20			  ## cache.c:326:5
    c70c:    11 03             	rep 0x4 r1 {			  ## cache.c:326:5
    c70e:    88 dc             		r0 = r0 + r3  #			  ## cache.c:326:5
    c710:    a0 60             			 [r2+0x0] = r0
                               	}			  ## cache.c:326:5
    c712:    f1 5c             	if (r1 != 0) goto -0x8 <DcuCmoRegion+0x18 : c70c >			  ## cache.c:326:5
    c714:    20 00             	csync			  ## cache.c:326:5
    c716:    22 00             	ssync			  ## cache.c:326:5
    c718:    54 04             	{pc, r4} = [sp++]			  ## cache.c:340:1


DcuFlushinvRegion:
    c71a:    10 04             	[--sp] = rets			  ## cache.c:394:0
    c71c:    c2 ff cc 05 ff 00 	r2 = 0xff05cc <RAM_LIMIT_H+0xE505CC : ff05cc >			  ## cache.c:395:5
    c722:    71 88             	call -0x30 <DcuCmoRegion : c6f4 >			  ## cache.c:395:5
    c724:    00 04             	pc = [sp++]			  ## cache.c:396:1


sfc_drop_cache:
    c726:    7a 04             	[--sp] = {rets, r10-r4}			  ## sfc.c:33:0
    c728:    18 16             	r8 = r1			  ## sfc.c:33:0
    c72a:    0a 16             	r10 = r0			  ## sfc.c:33:0
    c72c:    21 e9 80 1d       	if (r1 >= 0x1000) {			  ## sfc.c:33:0
    c730:    c6 ff 20 00 00 ca 		r6 = 0xca000020
                               	} else { <RAM_LIMIT_H+0xC9E60020 : ca000020 >			  ## sfc.c:33:0
    c736:    c6 ff 40 00 00 ca 		r6 = 0xca000040
                               	} <RAM_LIMIT_H+0xC9E60040 : ca000040 >			  ## sfc.c:33:0
    c73c:    10 18             	r0 += r1			  ## sfc.c:33:0
    c73e:    37 e1 ff 0f       	r7 = r0 + -0x1			  ## sfc.c:33:0
    c742:    45 20             	r5 = 0x0			  ## sfc.c:33:0
    c744:    c3 ff 00 e4 ff 00 	r3 = 0xffe400 <RAM_LIMIT_H+0xE5E400 : ffe400 >			  ## sfc.c:33:0
    c74a:    c9 ff 78 fd 19 00 	r9 = 0x19fd78 <l1i_lock : 19fd78 >			  ## sfc.c:33:0
    c750:    04 91             	goto 0x22 <sfc_drop_cache+0x4E : c774 >			  ## sfc.c:33:0
    c752:    e4 00             	cli r4			  ## hwi.h:115:5
    c754:    b9 00             	testset b[r9]			  ## hwi.h:152:5
    c756:    40 e8 fd ff       	ifeq goto -0x6 <sfc_drop_cache+0x30 : c756 >			  ## hwi.h:152:5
    c75a:    d0 ec 35 a1       	[r3+0x14] = r10			  ## cache.c:100:55
    c75e:    b7 66             	[r3+0x18] = r7			  ## cache.c:100:55
    c760:    50 d6             	r0 = r5  #			  ## cache.c:100:55
    c762:    b6 64             		 [r3+0x10] = r6			  ## cache.c:100:55
    c764:    bf ea ac f9       	call -0xca8 <L1iWaitCmdDone : bac0 >			  ## cache.c:100:55
    c768:    bf ea b4 f9       	call -0xc98 <q32DSP_testclr : bad4 >			  ## cache.c:100:55
    c76c:    f4 00             	sti r4			  ## hwi.h:121:5
    c76e:    03 e1 00 38       	r3 = r3 + 0x800			  ## cache.c:201:5
    c772:    c5 21             	r5 += 0x1			  ## cache.c:201:38
    c774:    85 f8 ed 05       	if (r5 != 0x2) goto -0x26 <sfc_drop_cache+0x2C : c752 >
    c778:    a0 16             	r0 = r10			  ## sfc.c:35:5
    c77a:    81 16             	r1 = r8			  ## sfc.c:35:5
    c77c:    61 8e             	call -0x64 <DcuFlushinvRegion : c71a >			  ## sfc.c:35:5
    c77e:    5a 04             	{pc, r10-r4} = [sp++]			  ## sfc.c:37:1


flush_dcache:
    c780:    10 04             	[--sp] = rets			  ## sfc.c:39:0
    c782:    c2 ff c8 05 ff 00 	r2 = 0xff05c8 <RAM_LIMIT_H+0xE505C8 : ff05c8 >			  ## cache.c:390:5
    c788:    51 95             	call -0x96 <DcuCmoRegion : c6f4 >			  ## cache.c:390:5
    c78a:    00 04             	pc = [sp++]			  ## sfc.c:42:1


flushinv_dcache:
    c78c:    10 04             	[--sp] = rets			  ## sfc.c:44:0
    c78e:    61 85             	call -0x76 <DcuFlushinvRegion : c71a >			  ## sfc.c:45:5
    c790:    00 04             	pc = [sp++]			  ## sfc.c:46:1


IcuWaitIdle:
    c792:    40 20             	r0 = 0x0			  ## cache.c:186:0
    c794:    c1 ff 00 f9 3f 00 	r1 = 0x3ff900 <RAM_LIMIT_H+0x25F900 : 3ff900 >			  ## cache.c:186:0
    c79a:    04 87             	goto 0xe <IcuWaitIdle+0x18 : c7aa >			  ## cache.c:186:0
    c79c:    20 00             	csync			  ## cache.c:80:5
    c79e:    02 ab             	r2 = r0 << 0xb			  ## cache.c:80:5
    c7a0:    d8 ec 2a 31       	r3 = [r2+r1<<2]			  ## cache.c:81:32
    c7a4:    73 fe fc ff       	ifs (r3 > -0x1) goto -0x8 <IcuWaitIdle+0xE : c7a0 >			  ## cache.c:81:5
    c7a8:    c0 21             	r0 += 0x1			  ## cache.c:187:38
    c7aa:    80 f8 f7 05       	if (r0 != 0x2) goto -0x12 <IcuWaitIdle+0xA : c79c >
    c7ae:    80 00             	rts			  ## cache.c:190:1


sprintf:
    c7b0:    62 04             	[--sp] = {r3, r2}			  ## printf-stdarg.c:373:0
    c7b2:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:373:0
    c7b4:    e2 9e             	sp += -0x8			  ## printf-stdarg.c:373:0
    c7b6:    14 d6             	r4 = r1  #			  ## printf-stdarg.c:373:0
    c7b8:    80 21             		 [sp+4] = r0			  ## printf-stdarg.c:373:0
    c7ba:    8b 90             	r3 = sp + 16			  ## printf-stdarg.c:373:0
    c7bc:    42 d6             	r2 = r4  #			  ## printf-stdarg.c:378:12
    c7be:    83 20             		 [sp] = r3			  ## printf-stdarg.c:376:5
    c7c0:    88 84             	r0 = sp + 4			  ## printf-stdarg.c:376:5
    c7c2:    41 20             	r1 = 0x0			  ## printf-stdarg.c:378:12
    c7c4:    bf ea 44 f6       	call -0x1378 <print : b450 >			  ## printf-stdarg.c:378:12
    c7c8:    02 82             	sp += 0x8
    c7ca:    34 04             	{rets, r4} = [sp++]			  ## printf-stdarg.c:378:5
    c7cc:    02 82             	sp += 0x8			  ## printf-stdarg.c:378:5
    c7ce:    80 00             	rts			  ## printf-stdarg.c:378:5


vprintf:
    c7d0:    10 04             	[--sp] = rets			  ## printf-stdarg.c:382:0
    c7d2:    02 15             	r3_r2 = r1_r0			  ## printf-stdarg.c:382:0
    c7d4:    80 14             	r1_r0 = 0			  ## printf-stdarg.c:385:12
    c7d6:    bf ea 3b f6       	call -0x138a <print : b450 >			  ## printf-stdarg.c:385:12
    c7da:    00 04             	pc = [sp++]			  ## printf-stdarg.c:387:5


norflash_read:
    c7dc:    78 04             	[--sp] = {rets, r8-r4}			  ## norflash.c:314:0
    c7de:    35 d6             	r5 = r3  #			  ## norflash.c:314:0
    c7e0:    08 44             		 r0 = b[r0+0x4] (u)			  ## norflash.c:318:19
    c7e2:    26 16             	r6 = r2
    c7e4:    14 16             	r4 = r1
    c7e6:    c8 ff 00 41 fd 00 	r8 = 0xfd4100 <RAM_LIMIT_H+0xE34100 : fd4100 >
    c7ec:    b0 e8 00 40       	if (r0 != 0x0) {
    c7f0:    42 ea 00 80       		[r8+0x8] = 0x0			  ## norflash.c:319:28
    c7f4:    40 ea 83 80       		[r8+0x0] = 0x83
                               	}			  ## norflash.c:320:28
    c7f8:    40 20             	r0 = 0x0			  ## norflash.c:324:5
    c7fa:    47 20             	r7 = 0x0			  ## norflash.c:324:5
    c7fc:    bf ea d2 f2       	call -0x1a5c <SPI0_cs : ada4 >			  ## norflash.c:324:5
    c800:    40 23             	r0 = 0x3			  ## norflash.c:326:5
    c802:    bf ea fa f2       	call -0x1a0c <SPI0_WriteByte : adfa >			  ## norflash.c:326:5
    c806:    60 16             	r0 = r6			  ## norflash.c:327:5
    c808:    bf ea 24 f3       	call -0x19b8 <nor_flash_send_addr : ae54 >			  ## norflash.c:327:5
    c80c:    30 e1 04 84       	r0 = r8 + -0xbfc			  ## norflash.c:330:17
    c810:    d1 d7             	r1 = r5.l (u)  #			  ## norflash.c:333:5
    c812:    87 60             		 [r0+0x0] = r7			  ## norflash.c:330:17
    c814:    40 16             	r0 = r4			  ## norflash.c:333:5
    c816:    bf ea 28 f3       	call -0x19b0 <SPI0_DmaRead : ae6a >			  ## norflash.c:333:5
    c81a:    40 21             	r0 = 0x1			  ## norflash.c:335:5
    c81c:    bf ea c2 f2       	call -0x1a7c <SPI0_cs : ada4 >			  ## norflash.c:335:5
    c820:    40 21             	r0 = 0x1			  ## norflash.c:341:5
    c822:    d0 ec 81 70       	[r8+0x0] = r7			  ## norflash.c:338:24
    c826:    58 04             	{pc, r8-r4} = [sp++]			  ## norflash.c:341:5


uart_isr:
    c828:    e9 04             	[--sp] = {psr, rets, reti}			  ## uart_upgrade.c:185:0
    c82a:    d8 e8 3f 00       	[--sp] = {r5-r0}			  ## uart_upgrade.c:185:0
    c82e:    c4 ff 00 20 fd 00 	r4 = 0xfd2000 <RAM_LIMIT_H+0xE32000 : fd2000 >			  ## uart_upgrade.c:185:0
    c834:    40 60             	r0 = [r4+0x0] 			  ## uart_upgrade.c:186:16
    c836:    50 e8 29 58       	if ((r0 & 0x800) == 0) goto 0x52 <uart_isr+0x64 : c88c >			  ## uart_upgrade.c:186:16
    c83a:    00 ef 80 40       	[r4+0x0] |= 0x80			  ## uart_upgrade.c:187:20
    c83e:    00 ef a0 4d       	[r4+0x0] |= 0x1400			  ## uart_upgrade.c:188:20
    c842:    20 00             	csync			  ## uart_upgrade.c:189:9
    c844:    40 6a             	r0 = [r4+0x28] 			  ## uart_upgrade.c:190:28
    c846:    42 20             	r2 = 0x0
    c848:    c0 ff 80 13 18 00 	r0 = 0x181380 <uart_dma_buffer : 181380 >
    c84e:    21 16             	r1 = r2
    c850:    01 fc 1c 7a       	if (r1 > 0x3d) goto 0x38 <uart_isr+0x64 : c88c >
    c854:    d8 ee 10 30       	r3 = b[r1+r0] (u)			  ## uart_upgrade.c:125:14
    c858:    1a 81             	r2 = r1 + 0x1			  ## uart_upgrade.c:125:14
    c85a:    83 f8 f8 ab       	if (r3 != 0x55) goto -0x10 <uart_isr+0x26 : c84e >			  ## uart_upgrade.c:125:14
    c85e:    13 1c             	r3 = r1 + r0			  ## uart_upgrade.c:125:37
    c860:    3b 41             	r3 = b[r3+0x1] (u)			  ## uart_upgrade.c:125:37
    c862:    93 f8 f4 55       	if (r3 != 0xaa) goto -0x18 <uart_isr+0x26 : c84e >			  ## uart_upgrade.c:125:37
    c866:    42 20             	r2 = 0x0
    c868:    c3 ff 40 13 18 00 	r3 = 0x181340 <ut_cmd : 181340 >
    c86e:    04 89             	goto 0x12 <uart_isr+0x5A : c882 >
    c870:    95 1c             	r5 = r1 + r2			  ## uart_upgrade.c:129:45
    c872:    cd 3f             	r5 += 0x3f			  ## uart_upgrade.c:129:45
    c874:    65 e1 3f 50       	r5 = r5 & 0x3F			  ## uart_upgrade.c:129:45
    c878:    d8 ee 50 50       	r5 = b[r5+r0] (u)			  ## uart_upgrade.c:129:30
    c87c:    d8 ee 21 53       	b[r2+r3] = r5			  ## uart_upgrade.c:129:28
    c880:    c2 21             	r2 += 0x1			  ## uart_upgrade.c:128:50
    c882:    82 f8 f5 2b       	if (r2 != 0x15) goto -0x16 <uart_isr+0x48 : c870 >
    c886:    bf ea b4 f0       	call -0x1e98 <uart_cmd_verify : a9f2 >			  ## uart_upgrade.c:137:20
    c88a:    80 44             	if (r0 != 0) goto 0x8 <uart_isr+0x6C : c894 >
    c88c:    d4 e8 3f 00       	{r5-r0} = [sp++]
    c890:    a9 04             	{psr, rets, reti} = [sp++]
    c892:    81 00             	rti
    c894:    c0 ef 20 40       	[r4+0x0] &= 0xFFFFFFDF			  ## uart_upgrade.c:194:24
    c898:    bf ea e3 f0       	call -0x1e3a <uart_recv_loader : aa62 >			  ## uart_upgrade.c:195:13


LZ4_setStreamDecode:
    c89c:    75 04             	[--sp] = {rets, r5, r4}			  ## lz4.c:642:0
    c89e:    03 16             	r3 = r0			  ## lz4.c:642:0
    c8a0:    90 dc             	r0 = r1 + r2  #			  ## lz4.c:645:50
    c8a2:    b2 63             		 [r3+0xc] = r2			  ## lz4.c:644:23
    c8a4:    b0 62             	[r3+0x8] = r0			  ## lz4.c:645:22
    c8a6:    44 20             	r4 = 0x0			  ## lz4.c:646:25
    c8a8:    45 20             	r5 = 0x0			  ## lz4.c:646:25
    c8aa:    40 21             	r0 = 0x1			  ## lz4.c:648:5
    c8ac:    50 ec 31 40       	d[r3+0x0] = r5_r4			  ## lz4.c:646:25
    c8b0:    55 04             	{pc, r5, r4} = [sp++]			  ## lz4.c:648:5


_sdk_mkey_lock:
    c8b2:    76 04             	[--sp] = {rets, r6-r4}			  ## crc.c:181:0
    c8b4:    e2 98             	sp += -0x20			  ## crc.c:181:0
    c8b6:    8d 80             	r5 = sp + 0			  ## crc.c:181:0
    c8b8:    04 16             	r4 = r0			  ## crc.c:181:0
    c8ba:    51 16             	r1 = r5			  ## crc.c:183:5
    c8bc:    10 9f             	rep 0x4 0x20 {			  ## crc.c:183:5
    c8be:    02 07             		r2 = b[r0++=0x1] (u)			  ## crc.c:183:5
    c8c0:    92 07             		b[r1++=0x1] = r2
                               	}			  ## crc.c:183:5
    c8c2:    51 d6             	r1 = r5  #			  ## crc.c:186:5
    c8c4:    06 24             		 r6 = [sp+16]			  ## crc.c:185:35
    c8c6:    e0 17             	r0 = r6.l (u)			  ## crc.c:186:5
    c8c8:    4a 20             	r2 = 0x20			  ## crc.c:186:5
    c8ca:    43 20             	r3 = 0x0			  ## crc.c:186:5
    c8cc:    bf ea 54 f3       	call -0x1958 <doe : af78 >			  ## crc.c:186:5
    c8d0:    86 24             	[sp+16] = r6			  ## crc.c:188:29
    c8d2:    58 86             	r0 = r5 + 0x6			  ## crc.c:190:41
    c8d4:    41 3a             	r1 = 0x1a			  ## crc.c:190:15
    c8d6:    bf ea 7e f0       	call -0x1f04 <chip_crc16 : a9d6 >			  ## crc.c:190:15
    c8da:    d8 e9 04 20       	r2 = h[sp+4] (u)			  ## crc.c:192:30
    c8de:    c1 ff 6c fc 19 00 	r1 = 0x19fc6c <puk : 19fc6c >			  ## crc.c:192:30
    c8e4:    90 e8 00 a2       	if (r0 != r2) {			  ## crc.c:192:30
    c8e8:    10 60             		r0 = [r1+0x0] 			  ## crc.c:193:27
    c8ea:    dc e9 07 20       		r2 = b[sp+7] (u)			  ## crc.c:193:33
    c8ee:    28 19             		r0 ^= r2
                               	} else {			  ## crc.c:193:31
    c8f0:    c0 ff 98 36 6c f3 		r0 = 0xf36c3698 <RAM_LIMIT_H+0xF3523698 : f36c3698 >			  ## crc.c:195:29
    c8f6:    48 19             		r0 ^= r4
                               	}			  ## crc.c:195:29
    c8f8:    64 d6             	r4 = r6  #			  ## crc.c:195:29
    c8fa:    03 20             		 r3 = [sp]			  ## crc.c:198:37
    c8fc:    90 60             	[r1+0x0] = r0			  ## crc.c:198:37
    c8fe:    c5 ff 4a 4b 59 53 	r5 = 0x53594b4a <RAM_LIMIT_H+0x533F4B4A : 53594b4a >			  ## crc.c:198:20
    c904:    c2 ff 00 3b fd 00 	r2 = 0xfd3b00 <RAM_LIMIT_H+0xE33B00 : fd3b00 >			  ## crc.c:198:20
    c90a:    93 e8 00 05       	if (r3 != r5) {			  ## crc.c:198:20
    c90e:    24 61             		r4 = [r2+0x4] 
                               	}			  ## crc.c:199:42
    c910:    dc e9 07 50       	r5 = b[sp+7] (u)			  ## crc.c:204:30
    c914:    35 e8 01 00       	if (r5 == 0x1) {			  ## crc.c:204:30
    c918:    63 16             		r3 = r6
                               	}			  ## crc.c:204:9
    c91a:    d8 e9 1e 60       	r6 = h[sp+30] (u)			  ## crc.c:210:25
    c91e:    48 19             	r0 ^= r4
    c920:    38 19             	r0 ^= r3
    c922:    90 60             	[r1+0x0] = r0
    c924:    b6 e8 0f c0       	if (r6 != 0xf) {
    c928:    22 60             		r2 = [r2+0x0] 			  ## crc.c:211:68
    c92a:    58 19             		r0 ^= r5			  ## crc.c:211:31
    c92c:    28 19             		r0 ^= r2			  ## crc.c:211:57
    c92e:    90 60             		[r1+0x0] = r0
                               	}			  ## crc.c:211:13
    c930:    02 88             	sp += 0x20			  ## crc.c:211:13
    c932:    56 04             	{pc, r6-r4} = [sp++]			  ## crc.c:215:1


logAprx_CORDIC_float:
    c934:    75 04             	[--sp] = {rets, r5, r4}			  ## MathApproximate_floatSpecialization_maskrom.c:15:0
    c936:    00 60             	r0 = [r0+0x0] 			  ## MathApproximate_floatSpecialization_maskrom.c:37:13
    c938:    c2 ff 18 72 31 3f 	r2 = 0x3f317218 <RAM_LIMIT_H+0x3F177218 : 3f317218 >			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c93e:    b3 e1 a0 0b       	r3 = uextra(r0, p:0x17, l:0x8)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c942:    b4 e1 5c 00       	r4 = uextra(r0, p:0x0, l:0x17)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c946:    34 37             	r4 |= 0x800000			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c948:    45 21             	r5 = 0x1			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c94a:    e3 21             	r3 += -0x7f			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c94c:    3f e5 8f 33       	r3 = itof(r3)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c950:    3f e5 32 32       	r3 = r3 * r2 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c954:    ff e1 17 44       	r5_r4 = copex(r5_r4) (0x17)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c958:    3f e5 8f 44       	r4 = itof(r4)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c95c:    f4 e0 40 46       	r4 = r4 - 0xC000000			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c960:    3f e5 40 03       	r0 = r4 + r3 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c964:    90 60             	[r1+0x0] = r0			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
    c966:    55 04             	{pc, r5, r4} = [sp++]			  ## MathApproximate_floatSpecialization_maskrom.c:41:1


expAprx_CORDIC_float:
    c968:    74 04             	[--sp] = {rets, r4}			  ## MathApproximate_floatSpecialization_maskrom.c:44:0
    c96a:    00 60             	r0 = [r0+0x0] 			  ## MathApproximate_floatSpecialization_maskrom.c:69:13
    c96c:    c4 ff 00 00 20 41 	r4 = 0x41200000 <RAM_LIMIT_H+0x41060000 : 41200000 >			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c972:    3f e5 45 30       	r3 = fmin(r4, r0)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c976:    54 e1 00 44       	r4 = r4 ^ 0x80000000			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c97a:    3f e5 46 33       	r3 = fmax(r4, r3)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c97e:    e3 e0 40 36       	r3 = r3 + 0xC000000			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c982:    3f e5 1f 23       	r2 = ftoi(r3) (trunc)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c986:    ff e1 0f 22       	r3_r2 = copex(r3_r2) (0xf)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c98a:    b4 e1 18 3d       	r4 = uextra(r3, p:0x1a, l:0x6)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c98e:    4c 98             	r4 = r4 + 0x18			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c990:    44 b7             	r4 = r4 << 0x17			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c992:    b3 e1 69 30       	r3 = sextra(r3, p:0x0, l:0x1a)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c996:    3f e5 8f 22       	r2 = itof(r2)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c99a:    3f e5 8f 33       	r3 = itof(r3)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c99e:    3f e5 22 23       	r2 = r2 * r3 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c9a2:    20 1f             	r0 = r2 - r4			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c9a4:    90 60             	[r1+0x0] = r0			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
    c9a6:    54 04             	{pc, r4} = [sp++]			  ## MathApproximate_floatSpecialization_maskrom.c:72:1


magnAprx_float:
    c9a8:    76 04             	[--sp] = {rets, r6-r4}			  ## MathApproximate_floatSpecialization_maskrom.c:75:0
    c9aa:    c2 ff 01 df 75 3f 	r2 = 0x3f75df01 <RAM_LIMIT_H+0x3F5BDF00 : 3f75df00 >			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9b0:    c3 ff b8 af cb 3e 	r3 = 0x3ecbafb8 <RAM_LIMIT_H+0x3EB1AFB8 : 3ecbafb8 >			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9b6:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9ba:    74 e1 00 44       	r4 = r4 & 0x7FFFFFFF			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9be:    75 e1 00 54       	r5 = r5 & 0x7FFFFFFF			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9c2:    3f e5 56 64       	r6 = fmax(r5, r4)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9c6:    3f e5 55 54       	r5 = fmin(r5, r4)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9ca:    3f e5 62 62       	r6 = r6 * r2 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9ce:    3f e5 57 63       	r6 += r5 * r3 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9d2:    96 60             	[r1+0x0] = r6			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
    c9d4:    56 04             	{pc, r6-r4} = [sp++]			  ## MathApproximate_floatSpecialization_maskrom.c:100:1


MatrixCopy_float_c_c:
    c9d6:    79 04             	[--sp] = {rets, r9-r4}			  ## Matrix_floatOperation_maskrom.c:10:0
    c9d8:    d0 ec 10 80       	r8 = [r1+0x0]			  ## Matrix_floatOperation_maskrom.c:17:5
    c9dc:    14 61             	r4 = [r1+0x4] 			  ## Matrix_floatOperation_maskrom.c:17:5
    c9de:    d0 ec 08 90       	r9 = [r0+0x8]			  ## Matrix_floatOperation_maskrom.c:17:5
    c9e2:    05 63             	r5 = [r0+0xc] 			  ## Matrix_floatOperation_maskrom.c:17:5
    c9e4:    c0 e1 93 90       	r9 = r9 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
    c9e8:    55 a3             	r5 = r5 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
    c9ea:    16 62             	r6 = [r1+0x8] 			  ## Matrix_floatOperation_maskrom.c:17:5
    c9ec:    17 63             	r7 = [r1+0xc] 			  ## Matrix_floatOperation_maskrom.c:17:5
    c9ee:    66 a3             	r6 = r6 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
    c9f0:    77 a3             	r7 = r7 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
    c9f2:    00 65             	r0 = [r0+0x14] 			  ## Matrix_floatOperation_maskrom.c:17:5
    c9f4:    11 65             	r1 = [r1+0x14] 			  ## Matrix_floatOperation_maskrom.c:17:5
    c9f6:    f2 e0 01 80       	r2 = r8 - 0x1			  ## Matrix_floatOperation_maskrom.c:17:5
    c9fa:    32 03             	rep 0x8 r2 {			  ## Matrix_floatOperation_maskrom.c:17:5
    c9fc:    5e ec 02 25       		r3_r2 = d[r0++=r5]			  ## Matrix_floatOperation_maskrom.c:17:5
    ca00:    5e ec 13 27       		d[r1++=r7] = r3_r2
                               	}			  ## Matrix_floatOperation_maskrom.c:17:5
    ca04:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <MatrixCopy_float_c_c+0x24 : c9fa >			  ## Matrix_floatOperation_maskrom.c:17:5
    ca08:    a5 e0 00 50       	r5 = 0x0 - r5			  ## Matrix_floatOperation_maskrom.c:17:5
    ca0c:    50 ec 00 20       	r3_r2 = d[r0+0x0]			  ## Matrix_floatOperation_maskrom.c:17:5
    ca10:    a7 e0 00 70       	r7 = 0x0 - r7			  ## Matrix_floatOperation_maskrom.c:17:5
    ca14:    50 ec 11 20       	d[r1+0x0] = r3_r2			  ## Matrix_floatOperation_maskrom.c:17:5
    ca18:    90 18             	r0 += r9			  ## Matrix_floatOperation_maskrom.c:17:5
    ca1a:    91 1d             	r1 = r1 + r6			  ## Matrix_floatOperation_maskrom.c:17:5
    ca1c:    04 ea eb ff       	if (--r4 != 0) goto -0x2a <MatrixCopy_float_c_c+0x20 : c9f6 >			  ## Matrix_floatOperation_maskrom.c:17:5
    ca20:    59 04             	{pc, r9-r4} = [sp++]			  ## Matrix_floatOperation_maskrom.c:66:1


MatrixCopy_float_f_f:
    ca22:    78 04             	[--sp] = {rets, r8-r4}			  ## Matrix_floatOperation_maskrom.c:69:0
    ca24:    17 60             	r7 = [r1+0x0] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca26:    13 61             	r3 = [r1+0x4] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca28:    d0 ec 08 80       	r8 = [r0+0x8]			  ## Matrix_floatOperation_maskrom.c:76:5
    ca2c:    04 63             	r4 = [r0+0xc] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca2e:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
    ca32:    44 a2             	r4 = r4 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
    ca34:    15 62             	r5 = [r1+0x8] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca36:    16 63             	r6 = [r1+0xc] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca38:    55 a2             	r5 = r5 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
    ca3a:    66 a2             	r6 = r6 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
    ca3c:    00 65             	r0 = [r0+0x14] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca3e:    11 65             	r1 = [r1+0x14] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca40:    f2 e0 01 70       	r2 = r7 - 0x1			  ## Matrix_floatOperation_maskrom.c:76:5
    ca44:    32 03             	rep 0x8 r2 {			  ## Matrix_floatOperation_maskrom.c:76:5
    ca46:    de ec 02 24       		r2 = [r0++=r4]			  ## Matrix_floatOperation_maskrom.c:76:5
    ca4a:    de ec 13 26       		[r1++=r6] = r2
                               	}			  ## Matrix_floatOperation_maskrom.c:76:5
    ca4e:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <MatrixCopy_float_f_f+0x22 : ca44 >			  ## Matrix_floatOperation_maskrom.c:76:5
    ca52:    a4 f0 00 40       	r4 = 0x0 - r4  #			  ## Matrix_floatOperation_maskrom.c:76:5
    ca56:    02 60             		 r2 = [r0+0x0] 			  ## Matrix_floatOperation_maskrom.c:76:5
    ca58:    a6 f0 00 60       	r6 = 0x0 - r6  #			  ## Matrix_floatOperation_maskrom.c:76:5
    ca5c:    92 60             		 [r1+0x0] = r2			  ## Matrix_floatOperation_maskrom.c:76:5
    ca5e:    80 18             	r0 += r8			  ## Matrix_floatOperation_maskrom.c:76:5
    ca60:    19 1d             	r1 = r1 + r5			  ## Matrix_floatOperation_maskrom.c:76:5
    ca62:    03 ea ed ff       	if (--r3 != 0) goto -0x26 <MatrixCopy_float_f_f+0x1E : ca40 >			  ## Matrix_floatOperation_maskrom.c:76:5
    ca66:    58 04             	{pc, r8-r4} = [sp++]			  ## Matrix_floatOperation_maskrom.c:123:1


MatrixEwMulAndSumOneDim_float_c_c_c_s0:
    ca68:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:10:0
    ca6a:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca6e:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca70:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca74:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca78:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca7c:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca80:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca84:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca88:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca8c:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca90:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca92:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca94:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca98:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca9c:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    ca9e:    f4 e0 01 e0       	r4 = r14 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caa2:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caa4:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caa6:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caaa:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caae:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cab2:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cab6:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caba:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cabe:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwMulAndSumOneDim_float_c_c_c_s0+0x3C : caa4 >			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cac2:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cac6:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caca:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cace:    3f e5 58 87       	r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cad2:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cad6:    3f e5 57 96       	r9 += r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cada:    aa e0 00 a0       	r10 = 0x0 - r10			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cade:    ac e0 00 c0       	r12 = 0x0 - r12			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cae2:    f0 18             	r0 += r15			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cae4:    b1 18             	r1 += r11			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    cae6:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caea:    03 ea d8 ff       	if (--r3 != 0) goto -0x50 <MatrixEwMulAndSumOneDim_float_c_c_c_s0+0x36 : ca9e >			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
    caee:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:89:1


MatrixEwMulAndSumOneDim_float_c_c_c_s1:
    caf0:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:92:0
    caf2:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    caf6:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    caf8:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cafc:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb00:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb04:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb08:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb0c:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb10:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb14:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb18:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb1a:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb1c:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb20:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb24:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb26:    f4 e0 01 30       	r4 = r3 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb2a:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb2c:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb2e:    5e ec 02 4f       		r5_r4 = d[r0++=r15]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb32:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb36:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb3a:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb3e:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb42:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb46:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwMulAndSumOneDim_float_c_c_c_s1+0x3C : cb2c >			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb4a:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb4e:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb52:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb56:    3f e5 58 87       	r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb5a:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb5e:    3f e5 57 96       	r9 += r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb62:    af e0 00 f0       	r15 = 0x0 - r15			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb66:    ab e0 00 b0       	r11 = 0x0 - r11			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb6a:    a0 18             	r0 += r10			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb6c:    c1 18             	r1 += r12			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb6e:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb72:    0e ea d8 ff       	if (--r14 != 0) goto -0x50 <MatrixEwMulAndSumOneDim_float_c_c_c_s1+0x36 : cb26 >			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
    cb76:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:171:1


MatrixEwMulAndSumOneDim_float_f_f_f_s0:
    cb78:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:174:0
    cb7a:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb7c:    04 60             	r4 = [r0+0x0] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb7e:    fc 3f             	r4 += -0x1			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb80:    d0 ec 1c b0       	r11 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb84:    c0 e1 b2 b4       	r11 = r11 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb88:    07 62             	r7 = [r0+0x8] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb8a:    7f a2             	r7 = r7 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb8c:    d0 ec 18 80       	r8 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb90:    c0 e1 82 84       	r8 = r8 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb94:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb98:    c0 e1 a2 a4       	r10 = r10 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cb9c:    d0 ec 04 f1       	r15 = [r0+0x14]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cba0:    16 65             	r6 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cba2:    d0 ec 24 90       	r9 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cba6:    c0 e1 92 94       	r9 = r9 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbaa:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbac:    f0 16             	r0 = r15			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbae:    61 16             	r1 = r6			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbb0:    de ec 02 da       	r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbb4:    de ec 12 eb       	r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbb8:    3f e5 d2 5e       	r5 = r13 * r14 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbbc:    4c 16             	r12 = r4			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbbe:    5c 03             	rep 0xc r12 {			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbc0:    de ec 02 da       		r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbc4:    de ec 12 eb       		r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbc8:    3f e5 d7 5e       		r5 += r13 * r14 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbcc:    0c fe f7 01       	ifs (r12 > 0x0) goto -0x12 <MatrixEwMulAndSumOneDim_float_f_f_f_s0+0x46 : cbbe >			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbd0:    7f d8             	r15 += r7  #			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbd2:    ad 08             		 [r2++=r9] = r5			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbd4:    86 18             	r6 += r8			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbd6:    03 ea e9 ff       	if (--r3 != 0) goto -0x2e <MatrixEwMulAndSumOneDim_float_f_f_f_s0+0x34 : cbac >			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
    cbda:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:253:1


MatrixEwMulAndSumOneDim_float_f_f_f_s1:
    cbdc:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:256:0
    cbde:    03 60             	r3 = [r0+0x0] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbe0:    04 61             	r4 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbe2:    fc 3f             	r4 += -0x1			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbe4:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbe8:    c0 e1 b2 b4       	r11 = r11 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbec:    07 63             	r7 = [r0+0xc] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbee:    7f a2             	r7 = r7 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbf0:    d0 ec 1c 80       	r8 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbf4:    c0 e1 82 84       	r8 = r8 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbf8:    d0 ec 08 a0       	r10 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cbfc:    c0 e1 a2 a4       	r10 = r10 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc00:    d0 ec 04 f1       	r15 = [r0+0x14]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc04:    16 65             	r6 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc06:    d0 ec 24 90       	r9 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc0a:    c0 e1 92 94       	r9 = r9 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc0e:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc10:    f0 16             	r0 = r15			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc12:    61 16             	r1 = r6			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc14:    de ec 02 da       	r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc18:    de ec 12 eb       	r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc1c:    3f e5 d2 5e       	r5 = r13 * r14 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc20:    4c 16             	r12 = r4			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc22:    5c 03             	rep 0xc r12 {			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc24:    de ec 02 da       		r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc28:    de ec 12 eb       		r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc2c:    3f e5 d7 5e       		r5 += r13 * r14 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc30:    0c fe f7 01       	ifs (r12 > 0x0) goto -0x12 <MatrixEwMulAndSumOneDim_float_f_f_f_s1+0x46 : cc22 >			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc34:    7f d8             	r15 += r7  #			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc36:    ad 08             		 [r2++=r9] = r5			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc38:    86 18             	r6 += r8			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc3a:    03 ea e9 ff       	if (--r3 != 0) goto -0x2e <MatrixEwMulAndSumOneDim_float_f_f_f_s1+0x34 : cc10 >			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
    cc3e:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:335:1


MatrixEwConjMulAndSumOneDim_float_c_c_c_s0:
    cc40:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:338:0
    cc42:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc46:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc48:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc4c:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc50:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc54:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc58:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc5c:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc60:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc64:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc68:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc6a:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc6c:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc70:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc74:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc76:    f4 e0 01 e0       	r4 = r14 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc7a:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc7c:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc7e:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc82:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc86:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc8a:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc8e:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc92:    3f e5 58 96       		r9 -= r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc96:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwConjMulAndSumOneDim_float_c_c_c_s0+0x3C : cc7c >			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc9a:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cc9e:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cca2:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    cca6:    3f e5 57 87       	r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccaa:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccae:    3f e5 58 96       	r9 -= r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccb2:    aa e0 00 a0       	r10 = 0x0 - r10			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccb6:    ac e0 00 c0       	r12 = 0x0 - r12			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccba:    f0 18             	r0 += r15			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccbc:    b1 18             	r1 += r11			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccbe:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccc2:    03 ea d8 ff       	if (--r3 != 0) goto -0x50 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s0+0x36 : cc76 >			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
    ccc6:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:417:1


MatrixEwConjMulAndSumOneDim_float_c_c_c_s1:
    ccc8:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:420:0
    ccca:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccce:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccd0:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccd4:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccd8:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccdc:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cce0:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cce4:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cce8:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccec:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccf0:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccf2:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccf4:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccf8:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccfc:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    ccfe:    f4 e0 01 30       	r4 = r3 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd02:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd04:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd06:    5e ec 02 4f       		r5_r4 = d[r0++=r15]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd0a:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd0e:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd12:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd16:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd1a:    3f e5 58 96       		r9 -= r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd1e:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1+0x3C : cd04 >			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd22:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd26:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd2a:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd2e:    3f e5 57 87       	r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd32:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd36:    3f e5 58 96       	r9 -= r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd3a:    af e0 00 f0       	r15 = 0x0 - r15			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd3e:    ab e0 00 b0       	r11 = 0x0 - r11			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd42:    a0 18             	r0 += r10			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd44:    c1 18             	r1 += r12			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd46:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd4a:    0e ea d8 ff       	if (--r14 != 0) goto -0x50 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1+0x36 : ccfe >			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
    cd4e:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:499:1


VecMeanSq_s16_f32:
    cd50:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
    cd52:    e2 9f             	sp += -0x4			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
    cd54:    81 20             	[sp] = r1			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
    cd56:    89 80             	r1 = sp + 0			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
    cd58:    06 60             	r6 = [r0+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd5a:    f2 f0 01 60       	r2 = r6 - 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd5e:    03 61             		 r3 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd60:    c0 f1 31 30       	r3 = r3 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd64:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd66:    de ed 02 43       	r4 = h[r0++=r3] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd6a:    3f e5 8f 44       	r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd6e:    3f e5 42 54       	r5 = r4 * r4 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd72:    3f e5 8f 66       	r6 = itof(r6)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd76:    52 03             	rep 0xc r2 {			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd78:    de ed 02 43       		r4 = h[r0++=r3] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd7c:    3f e5 8f 44       		r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd80:    3f e5 47 54       		r5 += r4 * r4 (f)
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd84:    f2 58             	if (r2 != 0) goto -0x10 <VecMeanSq_s16_f32+0x26 : cd76 >			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd86:    3f e5 53 56       	r5 = r5 / r6 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd8a:    95 60             	[r1+0x0] = r5			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
    cd8c:    02 81             	sp += 0x4
    cd8e:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:44:1


VecOverShift_s16_f32:
    cd90:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:47:0
    cd92:    13 64             	r3 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cd94:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cd98:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cd9c:    05 60             		 r5 = [r0+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cd9e:    17 60             	r7 = [r1+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cda0:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverShift_s16_f32+0x22 : cdb2 >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cda4:    f0 e1 80 67       	r6 = r8 * r7			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cda8:    b4 e0 62 68       	r6 = r6 - r8			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdac:    b3 1d             	r3 = r3 + r6			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdae:    a8 e0 00 80       	r8 = 0x0 - r8			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdb2:    7f 1f             	r7 = r7 - r5			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdb4:    85 1b             	r5 *= r8			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdb6:    3c 1d             	r4 = r3 + r5			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdb8:    17 03             	rep 0x4 r7 {			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdba:    45 08             		r5 = [r4++=r8] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdbc:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdbe:    f7 5c             	if (r7 != 0) goto -0x8 <VecOverShift_s16_f32+0x28 : cdb8 >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdc0:    04 64             	r4 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdc2:    d0 ec 04 90       	r9 = [r0+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdc6:    c0 f1 91 90       	r9 = r9 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdca:    07 60             		 r7 = [r0+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdcc:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverShift_s16_f32+0x4E : cdde >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdd0:    f0 e1 70 69       	r6 = r7 * r9			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdd4:    b4 e0 62 69       	r6 = r6 - r9			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdd8:    c4 1d             	r4 = r4 + r6			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdda:    a9 e0 00 90       	r9 = 0x0 - r9			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdde:    47 03             	rep 0xa r7 {			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cde0:    de ed 42 59       		r5 = h[r4++=r9] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cde4:    3f e5 8f 55       		r5 = itof(r5)			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cde8:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdea:    f7 59             	if (r7 != 0) goto -0xe <VecOverShift_s16_f32+0x4E : cdde >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
    cdec:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:107:1


VecMinus_s16_f32_f32:
    cdee:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:110:0
    cdf2:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    cdf6:    c0 f1 81 80       	r8 = r8 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    cdfa:    23 60             		 r3 = [r2+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    cdfc:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce00:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce04:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce06:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce0a:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce0e:    11 64             		 r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce10:    22 64             	r2 = [r2+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce12:    73 03             	rep 0x10 r3 {			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce14:    de ed 02 58       		r5 = h[r0++=r8] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce18:    3f e5 8f 55       		r5 = itof(r5)			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce1c:    94 08             		r4 = [r1++=r9] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce1e:    3f e5 51 54       		r5 = r5 - r4 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce22:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce24:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecMinus_s16_f32_f32+0x24 : ce12 >			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
    ce28:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:152:1


VectorCopy_f32_s16:
    ce2c:    75 04             	[--sp] = {rets, r5, r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:155:0
    ce2e:    02 61             	r2 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce30:    c0 f1 22 20       	r2 = r2 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce34:    14 60             		 r4 = [r1+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce36:    13 61             	r3 = [r1+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce38:    c0 f1 31 30       	r3 = r3 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce3c:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce3e:    11 64             	r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce40:    74 03             	rep 0x10 r4 {			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce42:    de ec 02 52       		r5 = [r0++=r2]			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce46:    3f e5 3f 55       		r5 = ftoi(r5) (floor)			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce4a:    78 e0 01 55       		r5 = sat16(r5) (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce4e:    de ed 11 53       		h[r1++=r3] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce52:    f4 56             	if (r4 != 0) goto -0x14 <VectorCopy_f32_s16+0x14 : ce40 >			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
    ce54:    55 04             	{pc, r5, r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:188:1


VecEleMul_s16_s16_f32:
    ce56:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:191:0
    ce58:    60 e0 7e 85       	r8 = 0x3F800000			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce5c:    04 63             	r4 = [r0+0xc] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce5e:    b3 e1 a0 8b       	r3 = uextra(r8, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce62:    33 1f             	r3 = r3 - r4			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce64:    a8 e1 a0 3b       	r8 <= insert(r3, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce68:    60 e0 7e 95       	r9 = 0x3F800000			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce6c:    14 63             	r4 = [r1+0xc] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce6e:    b3 e1 a0 9b       	r3 = uextra(r9, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce72:    33 1f             	r3 = r3 - r4			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce74:    a9 e1 a0 3b       	r9 <= insert(r3, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce78:    05 61             	r5 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce7a:    c0 f1 51 50       	r5 = r5 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce7e:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce80:    16 61             	r6 = [r1+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce82:    c0 f1 61 60       	r6 = r6 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce86:    11 64             		 r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce88:    23 60             	r3 = [r2+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce8a:    27 61             	r7 = [r2+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce8c:    c0 f1 72 70       	r7 = r7 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce90:    22 64             		 r2 = [r2+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce92:    f3 03             	rep 0x20 r3 {			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce94:    de ed 02 45       		r4 = h[r0++=r5] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce98:    de ed 12 36       		r3 = h[r1++=r6] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ce9c:    3f e5 8f 44       		r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    cea0:    3f e5 42 48       		r4 = r4 * r8 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    cea4:    3f e5 8f 33       		r3 = itof(r3)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    cea8:    3f e5 32 39       		r3 = r3 * r9 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ceac:    3f e5 42 43       		r4 = r4 * r3 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ceb0:    de ec 23 47       		[r2++=r7] = r4
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ceb4:    03 fe ed 01       	ifs (r3 > 0x0) goto -0x26 <VecEleMul_s16_s16_f32+0x3C : ce92 >			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
    ceb8:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:250:1


VecEleMul_f32_s16_f32:
    ceba:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:253:0
    cebc:    60 e0 7e 95       	r9 = 0x3F800000			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cec0:    b5 e1 a0 9b       	r5 = uextra(r9, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cec4:    14 63             	r4 = [r1+0xc] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cec6:    55 1f             	r5 = r5 - r4			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cec8:    a9 e1 a0 5b       	r9 <= insert(r5, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cecc:    06 61             	r6 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cece:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    ced2:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    ced4:    17 61             	r7 = [r1+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    ced6:    c0 f1 71 70       	r7 = r7 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    ceda:    11 64             		 r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cedc:    23 60             	r3 = [r2+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cede:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cee2:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cee6:    22 64             		 r2 = [r2+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cee8:    a3 03             	rep 0x16 r3 {			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    ceea:    de ed 12 47       		r4 = h[r1++=r7] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    ceee:    3f e5 8f 44       		r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cef2:    3f e5 42 49       		r4 = r4 * r9 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cef6:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cefa:    3f e5 42 45       		r4 = r4 * r5 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cefe:    2c 08             		[r2++=r8] = r4
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cf00:    03 fe f2 01       	ifs (r3 > 0x0) goto -0x1c <VecEleMul_f32_s16_f32+0x2E : cee8 >			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
    cf04:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:303:1


VectorSet_float_f_f:
    cf06:    74 04             	[--sp] = {rets, r4}			  ## Vector_floatOperation_maskrom.c:62:0
    cf08:    13 61             	r3 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:67:5
    cf0a:    33 a2             	r3 = r3 << 0x2			  ## Vector_floatOperation_maskrom.c:67:5
    cf0c:    12 60             	r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:67:5
    cf0e:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:67:5
    cf10:    04 60             	r4 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:67:5
    cf12:    12 03             	rep 0x4 r2 {			  ## Vector_floatOperation_maskrom.c:67:5
    cf14:    de ec 13 43       		[r1++=r3] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:67:5
    cf18:    02 fe fb 01       	ifs (r2 > 0x0) goto -0xa <VectorSet_float_f_f+0xC : cf12 >			  ## Vector_floatOperation_maskrom.c:67:5
    cf1c:    54 04             	{pc, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:88:1


VecMagRecAve_float_c_f_f:
    cf1e:    d9 e8 30 03       	[--sp] = {rets, r9, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:91:0
    cf22:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:131:13
    cf24:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:96:5
    cf28:    c0 e1 83 80       	r8 = r8 << 0x3			  ## Vector_floatOperation_maskrom.c:96:5
    cf2c:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:96:5
    cf30:    c0 e1 92 90       	r9 = r9 << 0x2			  ## Vector_floatOperation_maskrom.c:96:5
    cf34:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:96:5
    cf36:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:96:5
    cf38:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:96:5
    cf3a:    b3 03             	rep 0x18 r3 {			  ## Vector_floatOperation_maskrom.c:96:5
    cf3c:    5e ec 02 48       		r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:96:5
    cf40:    3f e5 42 44       		r4 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:96:5
    cf44:    3f e5 57 45       		r4 += r5 * r5 (f)			  ## Vector_floatOperation_maskrom.c:96:5
    cf48:    15 60             		r5 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:96:5
    cf4a:    3f e5 41 45       		r4 = r4 - r5 (f)			  ## Vector_floatOperation_maskrom.c:96:5
    cf4e:    3f e5 47 52       		r5 += r4 * r2 (f)			  ## Vector_floatOperation_maskrom.c:96:5
    cf52:    9d 08             		[r1++=r9] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:96:5
    cf54:    f3 52             	if (r3 != 0) goto -0x1c <VecMagRecAve_float_c_f_f+0x1C : cf3a >			  ## Vector_floatOperation_maskrom.c:96:5
    cf56:    d5 e8 30 03       	{pc, r9, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:133:1


VecMulScalar_float_c_f_c:
    cf5a:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:136:0
    cf5c:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:171:13
    cf5e:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:141:5
    cf60:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:141:5
    cf64:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:141:5
    cf66:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:141:5
    cf68:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:141:5
    cf6c:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:141:5
    cf6e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:141:5
    cf70:    73 03             	rep 0x10 r3 {			  ## Vector_floatOperation_maskrom.c:141:5
    cf72:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:141:5
    cf76:    3f e5 52 51       		r5 = r5 * r1 (f)			  ## Vector_floatOperation_maskrom.c:141:5
    cf7a:    3f e5 42 41       		r4 = r4 * r1 (f)			  ## Vector_floatOperation_maskrom.c:141:5
    cf7e:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:141:5
    cf82:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecMulScalar_float_c_f_c+0x16 : cf70 >			  ## Vector_floatOperation_maskrom.c:141:5
    cf86:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:173:1


VecConjEleMul_float_c_c_c:
    cf88:    7c 04             	[--sp] = {rets, r12-r4}			  ## Vector_floatOperation_maskrom.c:176:0
    cf8a:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:184:5
    cf8e:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:184:5
    cf92:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:184:5
    cf94:    d0 ec 14 c0       	r12 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:184:5
    cf98:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Vector_floatOperation_maskrom.c:184:5
    cf9c:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:184:5
    cf9e:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:184:5
    cfa0:    d0 ec 24 b0       	r11 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:184:5
    cfa4:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:184:5
    cfa8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:184:5
    cfaa:    d3 03             	rep 0x1c r3 {			  ## Vector_floatOperation_maskrom.c:184:5
    cfac:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:184:5
    cfb0:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Vector_floatOperation_maskrom.c:184:5
    cfb4:    3f e5 42 86       		r8 = r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:184:5
    cfb8:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:184:5
    cfbc:    3f e5 42 97       		r9 = r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:184:5
    cfc0:    3f e5 58 96       		r9 -= r5 * r6 (f)			  ## Vector_floatOperation_maskrom.c:184:5
    cfc4:    5e ec 23 8b       		d[r2++=r11] = r9_r8
                               	}			  ## Vector_floatOperation_maskrom.c:184:5
    cfc8:    f3 50             	if (r3 != 0) goto -0x20 <VecConjEleMul_float_c_c_c+0x22 : cfaa >			  ## Vector_floatOperation_maskrom.c:184:5
    cfca:    5c 04             	{pc, r12-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:227:1


VecPlus_float_f_f_f:
    cfcc:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:230:0
    cfd0:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:236:5
    cfd4:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:236:5
    cfd8:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:236:5
    cfda:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:236:5
    cfde:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:236:5
    cfe2:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:236:5
    cfe4:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:236:5
    cfe8:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:236:5
    cfec:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:236:5
    cfee:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:236:5
    cff0:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:236:5
    cff2:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:236:5
    cff4:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:236:5
    cff6:    3f e5 40 55       		r5 = r4 + r5 (f)			  ## Vector_floatOperation_maskrom.c:236:5
    cffa:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:236:5
    cffc:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecPlus_float_f_f_f+0x24 : cff0 >			  ## Vector_floatOperation_maskrom.c:236:5
    d000:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:271:1


VecDivide_float_c_f_c_f:
    d004:    7a 04             	[--sp] = {rets, r10-r4}			  ## Vector_floatOperation_maskrom.c:274:0
    d006:    d0 ec 30 80       	r8 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:320:13
    d00a:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:281:5
    d00c:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:281:5
    d00e:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:281:5
    d010:    d0 ec 14 a0       	r10 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:281:5
    d014:    c0 e1 a2 a0       	r10 = r10 << 0x2			  ## Vector_floatOperation_maskrom.c:281:5
    d018:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:281:5
    d01a:    24 60             	r4 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:281:5
    d01c:    d0 ec 24 90       	r9 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:281:5
    d020:    c0 e1 93 90       	r9 = r9 << 0x3			  ## Vector_floatOperation_maskrom.c:281:5
    d024:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:281:5
    d026:    a4 03             	rep 0x16 r4 {			  ## Vector_floatOperation_maskrom.c:281:5
    d028:    5e ec 02 63       		r7_r6 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:281:5
    d02c:    15 09             		r5 = [r1++=r10] 			  ## Vector_floatOperation_maskrom.c:281:5
    d02e:    3f e5 50 58       		r5 = r5 + r8 (f)			  ## Vector_floatOperation_maskrom.c:281:5
    d032:    3f e5 63 65       		r6 = r6 / r5 (f)			  ## Vector_floatOperation_maskrom.c:281:5
    d036:    3f e5 73 75       		r7 = r7 / r5 (f)			  ## Vector_floatOperation_maskrom.c:281:5
    d03a:    5e ec 23 69       		d[r2++=r9] = r7_r6
                               	}			  ## Vector_floatOperation_maskrom.c:281:5
    d03e:    f4 53             	if (r4 != 0) goto -0x1a <VecDivide_float_c_f_c_f+0x22 : d026 >			  ## Vector_floatOperation_maskrom.c:281:5
    d040:    5a 04             	{pc, r10-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:322:1


VecPlus_float_c_c_c:
    d042:    d9 e8 70 07       	[--sp] = {rets, r10-r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:325:0
    d046:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:331:5
    d04a:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:331:5
    d04e:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:331:5
    d050:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:331:5
    d054:    c0 f1 93 90       	r9 = r9 << 0x3  #			  ## Vector_floatOperation_maskrom.c:331:5
    d058:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:331:5
    d05a:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:331:5
    d05e:    c0 f1 a3 a0       	r10 = r10 << 0x3  #			  ## Vector_floatOperation_maskrom.c:331:5
    d062:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:331:5
    d064:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:331:5
    d066:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:331:5
    d068:    05 61             		r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:331:5
    d06a:    14 61             		r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:331:5
    d06c:    3f e5 40 55       		r5 = r4 + r5 (f)			  ## Vector_floatOperation_maskrom.c:331:5
    d070:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:331:5
    d072:    06 08             		r6 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:331:5
    d074:    3f e5 60 64       		r6 = r6 + r4 (f)			  ## Vector_floatOperation_maskrom.c:331:5
    d078:    a5 61             		[r2+0x4] = r5			  ## Vector_floatOperation_maskrom.c:331:5
    d07a:    2e 09             		[r2++=r10] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:331:5
    d07c:    f3 54             	if (r3 != 0) goto -0x18 <VecPlus_float_c_c_c+0x24 : d066 >			  ## Vector_floatOperation_maskrom.c:331:5
    d07e:    d5 e8 70 07       	{pc, r10-r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:372:1


VecConjMulRecAve_float_c_c_c_f:
    d082:    7d 04             	[--sp] = {rets, r13-r4}			  ## Vector_floatOperation_maskrom.c:375:0
    d084:    d0 ec 30 c0       	r12 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:430:13
    d088:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:383:5
    d08a:    55 a3             	r5 = r5 << 0x3			  ## Vector_floatOperation_maskrom.c:383:5
    d08c:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:383:5
    d08e:    d0 ec 14 d0       	r13 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:383:5
    d092:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Vector_floatOperation_maskrom.c:383:5
    d096:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:383:5
    d098:    24 60             	r4 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:383:5
    d09a:    23 61             	r3 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:383:5
    d09c:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:383:5
    d09e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:383:5
    d0a0:    5e ec 02 65       	r7_r6 = d[r0++=r5]			  ## Vector_floatOperation_maskrom.c:383:5
    d0a4:    5e ec 12 8d       	r9_r8 = d[r1++=r13]			  ## Vector_floatOperation_maskrom.c:383:5
    d0a8:    3f e5 62 a8       	r10 = r6 * r8 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0ac:    3f e5 77 a9       	r10 += r7 * r9 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0b0:    3f e5 62 b9       	r11 = r6 * r9 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0b4:    3f e5 78 b8       	r11 -= r7 * r8 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0b8:    50 ec 20 80       	r9_r8 = d[r2+0x0]			  ## Vector_floatOperation_maskrom.c:383:5
    d0bc:    3f e5 b1 b9       	r11 = r11 - r9 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0c0:    3f e5 a1 a8       	r10 = r10 - r8 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0c4:    3f e5 b7 9c       	r9 += r11 * r12 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0c8:    3f e5 a7 8c       	r8 += r10 * r12 (f)			  ## Vector_floatOperation_maskrom.c:383:5
    d0cc:    5e ec 23 83       	d[r2++=r3] = r9_r8			  ## Vector_floatOperation_maskrom.c:383:5
    d0d0:    04 ea e6 ff       	if (--r4 != 0) goto -0x34 <VecConjMulRecAve_float_c_c_c_f+0x1E : d0a0 >			  ## Vector_floatOperation_maskrom.c:383:5
    d0d4:    5d 04             	{pc, r13-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:432:1


VecGetMag_float_c_f:
    d0d6:    d9 e8 30 01       	[--sp] = {rets, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:435:0
    d0da:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:440:5
    d0dc:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:440:5
    d0de:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:440:5
    d0e0:    12 60             	r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:440:5
    d0e2:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:440:5
    d0e6:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:440:5
    d0ea:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:440:5
    d0ec:    62 03             	rep 0xe r2 {			  ## Vector_floatOperation_maskrom.c:440:5
    d0ee:    5e ec 02 43       		r5_r4 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:440:5
    d0f2:    3f e5 42 44       		r4 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:440:5
    d0f6:    3f e5 57 45       		r4 += r5 * r5 (f)			  ## Vector_floatOperation_maskrom.c:440:5
    d0fa:    1c 08             		[r1++=r8] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:440:5
    d0fc:    f2 57             	if (r2 != 0) goto -0x12 <VecGetMag_float_c_f+0x16 : d0ec >			  ## Vector_floatOperation_maskrom.c:440:5
    d0fe:    d5 e8 30 01       	{pc, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:469:1


VecMax_float_f_f:
    d102:    74 04             	[--sp] = {rets, r4}			  ## Vector_floatOperation_maskrom.c:472:0
    d104:    00 60             	r0 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:497:13
    d106:    12 61             	r2 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:475:5
    d108:    c0 f1 22 20       	r2 = r2 << 0x2  #			  ## Vector_floatOperation_maskrom.c:475:5
    d10c:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:475:5
    d10e:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:475:5
    d110:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:475:5
    d112:    14 60             		r4 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:475:5
    d114:    94 e9 80 10       		iff (r4 < r0) {			  ## Vector_floatOperation_maskrom.c:475:5
    d118:    de ec 13 02       			[r1++=r2] = r0
                               	} else {			  ## Vector_floatOperation_maskrom.c:475:5
    d11c:    91 1c             			r1 = r1 + r2
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:475:5
    d11e:    f3 58             	if (r3 != 0) goto -0x10 <VecMax_float_f_f+0xE : d110 >			  ## Vector_floatOperation_maskrom.c:475:5
    d120:    54 04             	{pc, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:499:1


VecRecAve_float_f_f_f:
    d122:    d9 e8 70 01       	[--sp] = {rets, r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:502:0
    d126:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:535:13
    d128:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:507:5
    d12c:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:507:5
    d130:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:507:5
    d132:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:507:5
    d134:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:507:5
    d138:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:507:5
    d13a:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:507:5
    d13c:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:507:5
    d13e:    04 08             		r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:507:5
    d140:    15 60             		r5 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:507:5
    d142:    3f e5 41 45       		r4 = r4 - r5 (f)			  ## Vector_floatOperation_maskrom.c:507:5
    d146:    3f e5 42 42       		r4 = r4 * r2 (f)			  ## Vector_floatOperation_maskrom.c:507:5
    d14a:    3f e5 50 54       		r5 = r5 + r4 (f)			  ## Vector_floatOperation_maskrom.c:507:5
    d14e:    de ec 13 56       		[r1++=r6] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:507:5
    d152:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecRecAve_float_f_f_f+0x1A : d13c >			  ## Vector_floatOperation_maskrom.c:507:5
    d156:    d5 e8 70 01       	{pc, r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:537:1


VecEleMul_float_f_f_f:
    d15a:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:540:0
    d15c:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:547:5
    d15e:    66 a2             	r6 = r6 << 0x2			  ## Vector_floatOperation_maskrom.c:547:5
    d160:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:547:5
    d162:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:547:5
    d164:    77 a2             	r7 = r7 << 0x2			  ## Vector_floatOperation_maskrom.c:547:5
    d166:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:547:5
    d168:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:547:5
    d16a:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:547:5
    d16e:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:547:5
    d172:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:547:5
    d174:    63 03             	rep 0xe r3 {			  ## Vector_floatOperation_maskrom.c:547:5
    d176:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_floatOperation_maskrom.c:547:5
    d17a:    de ec 12 47       		r4 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:547:5
    d17e:    3f e5 52 44       		r4 = r5 * r4 (f)			  ## Vector_floatOperation_maskrom.c:547:5
    d182:    2c 08             		[r2++=r8] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:547:5
    d184:    03 fe f6 01       	ifs (r3 > 0x0) goto -0x14 <VecEleMul_float_f_f_f+0x1A : d174 >			  ## Vector_floatOperation_maskrom.c:547:5
    d188:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:583:1


VecMagAndDiv_float_c_f_f_f:
    d18a:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:586:0
    d18c:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:629:13
    d18e:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:594:5
    d190:    c0 f1 53 50       	r5 = r5 << 0x3  #			  ## Vector_floatOperation_maskrom.c:594:5
    d194:    34 60             		 r4 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:594:5
    d196:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:594:5
    d198:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:594:5
    d19c:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:594:5
    d1a0:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:594:5
    d1a2:    d0 ec 34 90       	r9 = [r3+0x4]			  ## Vector_floatOperation_maskrom.c:594:5
    d1a6:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:594:5
    d1aa:    33 64             		 r3 = [r3+0x10] 			  ## Vector_floatOperation_maskrom.c:594:5
    d1ac:    b4 03             	rep 0x18 r4 {			  ## Vector_floatOperation_maskrom.c:594:5
    d1ae:    5e ec 02 65       		r7_r6 = d[r0++=r5]			  ## Vector_floatOperation_maskrom.c:594:5
    d1b2:    3f e5 62 66       		r6 = r6 * r6 (f)			  ## Vector_floatOperation_maskrom.c:594:5
    d1b6:    3f e5 77 67       		r6 += r7 * r7 (f)			  ## Vector_floatOperation_maskrom.c:594:5
    d1ba:    17 08             		r7 = [r1++=r8] 			  ## Vector_floatOperation_maskrom.c:594:5
    d1bc:    3f e5 70 72       		r7 = r7 + r2 (f)			  ## Vector_floatOperation_maskrom.c:594:5
    d1c0:    3f e5 63 67       		r6 = r6 / r7 (f)			  ## Vector_floatOperation_maskrom.c:594:5
    d1c4:    be 08             		[r3++=r9] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:594:5
    d1c6:    f4 52             	if (r4 != 0) goto -0x1c <VecMagAndDiv_float_c_f_f_f+0x22 : d1ac >			  ## Vector_floatOperation_maskrom.c:594:5
    d1c8:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:631:1


VecMin_float_f_f:
    d1ca:    74 04             	[--sp] = {rets, r4}			  ## Vector_floatOperation_maskrom.c:634:0
    d1cc:    00 60             	r0 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:659:13
    d1ce:    12 61             	r2 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:637:5
    d1d0:    c0 f1 22 20       	r2 = r2 << 0x2  #			  ## Vector_floatOperation_maskrom.c:637:5
    d1d4:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:637:5
    d1d6:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:637:5
    d1d8:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:637:5
    d1da:    14 60             		r4 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:637:5
    d1dc:    14 ee 80 10       		iff (r4 > r0) {			  ## Vector_floatOperation_maskrom.c:637:5
    d1e0:    de ec 13 02       			[r1++=r2] = r0
                               	} else {			  ## Vector_floatOperation_maskrom.c:637:5
    d1e4:    91 1c             			r1 = r1 + r2
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:637:5
    d1e6:    f3 58             	if (r3 != 0) goto -0x10 <VecMin_float_f_f+0xE : d1d8 >			  ## Vector_floatOperation_maskrom.c:637:5
    d1e8:    54 04             	{pc, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:661:1


VecMinus_float_f_f_f:
    d1ea:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:664:0
    d1ee:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:670:5
    d1f2:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:670:5
    d1f6:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:670:5
    d1f8:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:670:5
    d1fc:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:670:5
    d200:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:670:5
    d202:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:670:5
    d206:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:670:5
    d20a:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:670:5
    d20c:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:670:5
    d20e:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:670:5
    d210:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:670:5
    d212:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:670:5
    d214:    3f e5 51 54       		r5 = r5 - r4 (f)			  ## Vector_floatOperation_maskrom.c:670:5
    d218:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:670:5
    d21a:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMinus_float_f_f_f+0x24 : d20e >			  ## Vector_floatOperation_maskrom.c:670:5
    d21e:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:705:1


VecMean_float_f_f:
    d222:    d9 e8 30 01       	[--sp] = {rets, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:708:0
    d226:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:714:5
    d22a:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:714:5
    d22e:    03 60             		 r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:714:5
    d230:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:714:5
    d232:    f2 e0 01 30       	r2 = r3 - 0x1			  ## Vector_floatOperation_maskrom.c:714:5
    d236:    3f e5 8f 33       	r3 = itof(r3)			  ## Vector_floatOperation_maskrom.c:714:5
    d23a:    04 08             	r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:714:5
    d23c:    45 16             	r5 = r4			  ## Vector_floatOperation_maskrom.c:714:5
    d23e:    22 03             	rep 0x6 r2 {			  ## Vector_floatOperation_maskrom.c:714:5
    d240:    04 08             		r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:714:5
    d242:    3f e5 50 54       		r5 = r5 + r4 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:714:5
    d246:    f2 5b             	if (r2 != 0) goto -0xa <VecMean_float_f_f+0x1C : d23e >			  ## Vector_floatOperation_maskrom.c:714:5
    d248:    3f e5 53 53       	r5 = r5 / r3 (f)			  ## Vector_floatOperation_maskrom.c:714:5
    d24c:    95 60             	[r1+0x0] = r5			  ## Vector_floatOperation_maskrom.c:714:5
    d24e:    d5 e8 30 01       	{pc, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:743:1


VecEleMul_float_c_f_c:
    d252:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:746:0
    d254:    07 61             	r7 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:753:5
    d256:    77 a3             	r7 = r7 << 0x3			  ## Vector_floatOperation_maskrom.c:753:5
    d258:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:753:5
    d25a:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:753:5
    d25e:    c0 e1 92 90       	r9 = r9 << 0x2			  ## Vector_floatOperation_maskrom.c:753:5
    d262:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:753:5
    d264:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:753:5
    d266:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:753:5
    d26a:    c0 e1 83 80       	r8 = r8 << 0x3			  ## Vector_floatOperation_maskrom.c:753:5
    d26e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:753:5
    d270:    83 03             	rep 0x12 r3 {			  ## Vector_floatOperation_maskrom.c:753:5
    d272:    5e ec 02 47       		r5_r4 = d[r0++=r7]			  ## Vector_floatOperation_maskrom.c:753:5
    d276:    96 08             		r6 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:753:5
    d278:    3f e5 42 46       		r4 = r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:753:5
    d27c:    3f e5 52 56       		r5 = r5 * r6 (f)			  ## Vector_floatOperation_maskrom.c:753:5
    d280:    5e ec 23 48       		d[r2++=r8] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:753:5
    d284:    f3 55             	if (r3 != 0) goto -0x16 <VecEleMul_float_c_f_c+0x1E : d270 >			  ## Vector_floatOperation_maskrom.c:753:5
    d286:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:792:1


VecMeanSqu_float_c_f:
    d288:    d9 e8 70 01       	[--sp] = {rets, r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:795:0
    d28c:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:802:5
    d290:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:802:5
    d294:    03 60             		 r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:802:5
    d296:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:802:5
    d298:    f2 e0 01 30       	r2 = r3 - 0x1			  ## Vector_floatOperation_maskrom.c:802:5
    d29c:    3f e5 8f 33       	r3 = itof(r3)			  ## Vector_floatOperation_maskrom.c:802:5
    d2a0:    5e ec 02 48       	r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:802:5
    d2a4:    3f e5 42 64       	r6 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:802:5
    d2a8:    3f e5 57 65       	r6 += r5 * r5 (f)			  ## Vector_floatOperation_maskrom.c:802:5
    d2ac:    52 03             	rep 0xc r2 {			  ## Vector_floatOperation_maskrom.c:802:5
    d2ae:    5e ec 02 48       		r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:802:5
    d2b2:    3f e5 47 64       		r6 += r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:802:5
    d2b6:    3f e5 57 65       		r6 += r5 * r5 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:802:5
    d2ba:    f2 58             	if (r2 != 0) goto -0x10 <VecMeanSqu_float_c_f+0x24 : d2ac >			  ## Vector_floatOperation_maskrom.c:802:5
    d2bc:    3f e5 63 63       	r6 = r6 / r3 (f)			  ## Vector_floatOperation_maskrom.c:802:5
    d2c0:    96 60             	[r1+0x0] = r6			  ## Vector_floatOperation_maskrom.c:802:5
    d2c2:    d5 e8 70 01       	{pc, r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:835:1


VecCopy_float_f_f:
    d2c6:    75 04             	[--sp] = {rets, r5, r4}			  ## Vector_floatOperation_maskrom.c:838:0
    d2c8:    15 61             	r5 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:843:5
    d2ca:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:843:5
    d2ce:    04 61             		 r4 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:843:5
    d2d0:    c0 f1 42 40       	r4 = r4 << 0x2  #			  ## Vector_floatOperation_maskrom.c:843:5
    d2d4:    12 60             		 r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:843:5
    d2d6:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:843:5
    d2d8:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:843:5
    d2da:    32 03             	rep 0x8 r2 {			  ## Vector_floatOperation_maskrom.c:843:5
    d2dc:    de ec 02 34       		r3 = [r0++=r4]			  ## Vector_floatOperation_maskrom.c:843:5
    d2e0:    de ec 13 35       		[r1++=r5] = r3
                               	}			  ## Vector_floatOperation_maskrom.c:843:5
    d2e4:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VecCopy_float_f_f+0x14 : d2da >			  ## Vector_floatOperation_maskrom.c:843:5
    d2e8:    55 04             	{pc, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:868:1


VecMin_float_f_f_f:
    d2ea:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:871:0
    d2ee:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:877:5
    d2f2:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:877:5
    d2f6:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:877:5
    d2f8:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:877:5
    d2fc:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:877:5
    d300:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:877:5
    d302:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:877:5
    d306:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:877:5
    d30a:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:877:5
    d30c:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:877:5
    d30e:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:877:5
    d310:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:877:5
    d312:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:877:5
    d314:    3f e5 55 54       		r5 = fmin(r5, r4)			  ## Vector_floatOperation_maskrom.c:877:5
    d318:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:877:5
    d31a:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMin_float_f_f_f+0x24 : d30e >			  ## Vector_floatOperation_maskrom.c:877:5
    d31e:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:912:1


VecDivide_float_f_f_f_f:
    d322:    d9 e8 70 07       	[--sp] = {rets, r10-r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:915:0
    d326:    33 60             	r3 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:956:13
    d328:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:921:5
    d32c:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:921:5
    d330:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:921:5
    d332:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:921:5
    d336:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:921:5
    d33a:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:921:5
    d33c:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:921:5
    d340:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:921:5
    d344:    24 60             		 r4 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:921:5
    d346:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:921:5
    d348:    64 03             	rep 0xe r4 {			  ## Vector_floatOperation_maskrom.c:921:5
    d34a:    06 08             		r6 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:921:5
    d34c:    95 08             		r5 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:921:5
    d34e:    3f e5 50 53       		r5 = r5 + r3 (f)			  ## Vector_floatOperation_maskrom.c:921:5
    d352:    3f e5 63 65       		r6 = r6 / r5 (f)			  ## Vector_floatOperation_maskrom.c:921:5
    d356:    2e 09             		[r2++=r10] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:921:5
    d358:    04 fe f6 01       	ifs (r4 > 0x0) goto -0x14 <VecDivide_float_f_f_f_f+0x26 : d348 >			  ## Vector_floatOperation_maskrom.c:921:5
    d35c:    d5 e8 70 07       	{pc, r10-r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:958:1


VecCompBT_float_f_f_f:
    d360:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:961:0
    d362:    25 61             	r5 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:967:5
    d364:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:967:5
    d368:    26 60             		 r6 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:967:5
    d36a:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:967:5
    d36c:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:967:5
    d370:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:967:5
    d374:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:967:5
    d376:    14 61             	r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:967:5
    d378:    44 a2             	r4 = r4 << 0x2			  ## Vector_floatOperation_maskrom.c:967:5
    d37a:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:967:5
    d37c:    86 03             	rep 0x12 r6 {			  ## Vector_floatOperation_maskrom.c:967:5
    d37e:    07 08             		r7 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:967:5
    d380:    de ec 12 34       		r3 = [r1++=r4]			  ## Vector_floatOperation_maskrom.c:967:5
    d384:    17 ee 80 13       		iff (r7 > r3) {			  ## Vector_floatOperation_maskrom.c:967:5
    d388:    47 21             			r7 = 0x1
                               	} else {			  ## Vector_floatOperation_maskrom.c:967:5
    d38a:    47 20             			r7 = 0x0
                               	}			  ## Vector_floatOperation_maskrom.c:967:5
    d38c:    de ec 23 75       		[r2++=r5] = r7
                               	}			  ## Vector_floatOperation_maskrom.c:967:5
    d390:    f6 55             	if (r6 != 0) goto -0x16 <VecCompBT_float_f_f_f+0x1C : d37c >			  ## Vector_floatOperation_maskrom.c:967:5
    d392:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1008:1


VecCondCopy_float_f_f_f:
    d394:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:1011:0
    d396:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d398:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1017:5
    d39c:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d39e:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d3a0:    c0 f1 72 70       	r7 = r7 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1017:5
    d3a4:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d3a6:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d3a8:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d3aa:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1017:5
    d3ae:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1017:5
    d3b0:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1017:5
    d3b2:    de ec 12 46       		r4 = [r1++=r6]			  ## Vector_floatOperation_maskrom.c:1017:5
    d3b6:    24 e8 00 60       		if (r4 == 0x0) {			  ## Vector_floatOperation_maskrom.c:1017:5
    d3ba:    08 1d             			r0 = r0 + r5			  ## Vector_floatOperation_maskrom.c:1017:5
    d3bc:    aa 1d             			r2 = r2 + r7
                               	} else {			  ## Vector_floatOperation_maskrom.c:1017:5
    d3be:    de ec 02 45       			r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1017:5
    d3c2:    de ec 23 47       			[r2++=r7] = r4
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:1017:5
    d3c6:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecCondCopy_float_f_f_f+0x1C : d3b0 >			  ## Vector_floatOperation_maskrom.c:1017:5
    d3ca:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1058:1


VecMulScalar_float_f_f_f:
    d3cc:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1061:0
    d3ce:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1091:13
    d3d0:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1066:5
    d3d2:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1066:5
    d3d6:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1066:5
    d3d8:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1066:5
    d3dc:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1066:5
    d3de:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1066:5
    d3e0:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1066:5
    d3e2:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1066:5
    d3e4:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1066:5
    d3e8:    3f e5 42 41       		r4 = r4 * r1 (f)			  ## Vector_floatOperation_maskrom.c:1066:5
    d3ec:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1066:5
    d3f0:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecMulScalar_float_f_f_f+0x16 : d3e2 >			  ## Vector_floatOperation_maskrom.c:1066:5
    d3f4:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1093:1


VecPlusScalar_float_f_f_f:
    d3f6:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1096:0
    d3f8:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1126:13
    d3fa:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1101:5
    d3fc:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1101:5
    d400:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1101:5
    d402:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1101:5
    d406:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1101:5
    d408:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1101:5
    d40a:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1101:5
    d40c:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1101:5
    d40e:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1101:5
    d412:    3f e5 40 41       		r4 = r4 + r1 (f)			  ## Vector_floatOperation_maskrom.c:1101:5
    d416:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1101:5
    d41a:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecPlusScalar_float_f_f_f+0x16 : d40c >			  ## Vector_floatOperation_maskrom.c:1101:5
    d41e:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1128:1


VecMinScalar_float_f_f_f:
    d420:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1131:0
    d422:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1161:13
    d424:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1136:5
    d426:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1136:5
    d42a:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1136:5
    d42c:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1136:5
    d430:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1136:5
    d432:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1136:5
    d434:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1136:5
    d436:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1136:5
    d438:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1136:5
    d43c:    3f e5 41 41       		r4 = r4 - r1 (f)			  ## Vector_floatOperation_maskrom.c:1136:5
    d440:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1136:5
    d444:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecMinScalar_float_f_f_f+0x16 : d436 >			  ## Vector_floatOperation_maskrom.c:1136:5
    d448:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1163:1


VecOpposite_float_f_f:
    d44a:    75 04             	[--sp] = {rets, r5, r4}			  ## Vector_floatOperation_maskrom.c:1166:0
    d44c:    15 61             	r5 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1171:5
    d44e:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1171:5
    d452:    04 61             		 r4 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1171:5
    d454:    c0 f1 42 40       	r4 = r4 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1171:5
    d458:    12 60             		 r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1171:5
    d45a:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1171:5
    d45c:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1171:5
    d45e:    52 03             	rep 0xc r2 {			  ## Vector_floatOperation_maskrom.c:1171:5
    d460:    de ec 02 34       		r3 = [r0++=r4]			  ## Vector_floatOperation_maskrom.c:1171:5
    d464:    53 e1 00 34       		r3 = r3 ^ 0x80000000			  ## Vector_floatOperation_maskrom.c:1171:5
    d468:    de ec 13 35       		[r1++=r5] = r3
                               	}			  ## Vector_floatOperation_maskrom.c:1171:5
    d46c:    02 fe f7 01       	ifs (r2 > 0x0) goto -0x12 <VecOpposite_float_f_f+0x14 : d45e >			  ## Vector_floatOperation_maskrom.c:1171:5
    d470:    55 04             	{pc, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1197:1


VecEleMla_float_f_f_f:
    d472:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:1199:0
    d474:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1207:5
    d476:    66 a2             	r6 = r6 << 0x2			  ## Vector_floatOperation_maskrom.c:1207:5
    d478:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1207:5
    d47a:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1207:5
    d47c:    77 a2             	r7 = r7 << 0x2			  ## Vector_floatOperation_maskrom.c:1207:5
    d47e:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1207:5
    d480:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1207:5
    d482:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1207:5
    d486:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:1207:5
    d48a:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1207:5
    d48c:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1207:5
    d48e:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_floatOperation_maskrom.c:1207:5
    d492:    de ec 12 47       		r4 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:1207:5
    d496:    d0 ec 20 90       		r9 = [r2+0x0]			  ## Vector_floatOperation_maskrom.c:1207:5
    d49a:    3f e5 57 94       		r9 += r5 * r4 (f)			  ## Vector_floatOperation_maskrom.c:1207:5
    d49e:    de ec 23 98       		[r2++=r8] = r9
                               	}			  ## Vector_floatOperation_maskrom.c:1207:5
    d4a2:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecEleMla_float_f_f_f+0x1A : d48c >			  ## Vector_floatOperation_maskrom.c:1207:5
    d4a6:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1246:1


VecEleMla_float_c_c_c:
    d4a8:    7c 04             	[--sp] = {rets, r12-r4}			  ## Vector_floatOperation_maskrom.c:1249:0
    d4aa:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1257:5
    d4ae:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:1257:5
    d4b2:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1257:5
    d4b4:    d0 ec 14 c0       	r12 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1257:5
    d4b8:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Vector_floatOperation_maskrom.c:1257:5
    d4bc:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1257:5
    d4be:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1257:5
    d4c0:    d0 ec 24 b0       	r11 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1257:5
    d4c4:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:1257:5
    d4c8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1257:5
    d4ca:    f3 03             	rep 0x20 r3 {			  ## Vector_floatOperation_maskrom.c:1257:5
    d4cc:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:1257:5
    d4d0:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Vector_floatOperation_maskrom.c:1257:5
    d4d4:    50 ec 20 80       		r9_r8 = d[r2+0x0]			  ## Vector_floatOperation_maskrom.c:1257:5
    d4d8:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
    d4dc:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
    d4e0:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
    d4e4:    3f e5 57 96       		r9 += r5 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
    d4e8:    5e ec 23 8b       		d[r2++=r11] = r9_r8
                               	}			  ## Vector_floatOperation_maskrom.c:1257:5
    d4ec:    f3 4e             	if (r3 != 0) goto -0x24 <VecEleMla_float_c_c_c+0x22 : d4ca >			  ## Vector_floatOperation_maskrom.c:1257:5
    d4ee:    5c 04             	{pc, r12-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1301:1


VecMinus_float_c_c_c:
    d4f0:    d9 e8 70 07       	[--sp] = {rets, r10-r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:1304:0
    d4f4:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1310:5
    d4f8:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1310:5
    d4fc:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d4fe:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1310:5
    d502:    c0 f1 93 90       	r9 = r9 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1310:5
    d506:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d508:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1310:5
    d50c:    c0 f1 a3 a0       	r10 = r10 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1310:5
    d510:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d512:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d514:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1310:5
    d516:    05 61             		r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d518:    14 61             		r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d51a:    3f e5 51 54       		r5 = r5 - r4 (f)			  ## Vector_floatOperation_maskrom.c:1310:5
    d51e:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d520:    06 08             		r6 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1310:5
    d522:    3f e5 61 64       		r6 = r6 - r4 (f)			  ## Vector_floatOperation_maskrom.c:1310:5
    d526:    a5 61             		[r2+0x4] = r5			  ## Vector_floatOperation_maskrom.c:1310:5
    d528:    2e 09             		[r2++=r10] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:1310:5
    d52a:    f3 54             	if (r3 != 0) goto -0x18 <VecMinus_float_c_c_c+0x24 : d514 >			  ## Vector_floatOperation_maskrom.c:1310:5
    d52c:    d5 e8 70 07       	{pc, r10-r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1351:1


VecDotProduct_float_f_f_f:
    d530:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:1354:0
    d532:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1362:5
    d534:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1362:5
    d536:    66 a2             	r6 = r6 << 0x2			  ## Vector_floatOperation_maskrom.c:1362:5
    d538:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1362:5
    d53a:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1362:5
    d53c:    77 a2             	r7 = r7 << 0x2			  ## Vector_floatOperation_maskrom.c:1362:5
    d53e:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1362:5
    d540:    c0 14             	r8 = 0			  ## Vector_floatOperation_maskrom.c:1362:5
    d542:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1362:5
    d546:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1362:5
    d548:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_floatOperation_maskrom.c:1362:5
    d54c:    de ec 12 47       		r4 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:1362:5
    d550:    3f e5 57 84       		r8 += r5 * r4 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1362:5
    d554:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecDotProduct_float_f_f_f+0x16 : d546 >			  ## Vector_floatOperation_maskrom.c:1362:5
    d558:    d0 ec 21 80       	[r2+0x0] = r8			  ## Vector_floatOperation_maskrom.c:1362:5
    d55c:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1397:1


VecDotProduct_float_c_c_c:
    d55e:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:1400:0
    d560:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1408:5
    d562:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1408:5
    d566:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:1408:5
    d56a:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1408:5
    d56c:    d0 ec 14 b0       	r11 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1408:5
    d570:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:1408:5
    d574:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1408:5
    d576:    88 14             	r9_r8 = 0			  ## Vector_floatOperation_maskrom.c:1408:5
    d578:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1408:5
    d57c:    3f e5 8f 99       	r9 = itof(r9)			  ## Vector_floatOperation_maskrom.c:1408:5
    d580:    b3 03             	rep 0x18 r3 {			  ## Vector_floatOperation_maskrom.c:1408:5
    d582:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:1408:5
    d586:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Vector_floatOperation_maskrom.c:1408:5
    d58a:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1408:5
    d58e:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1408:5
    d592:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1408:5
    d596:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1408:5
    d59a:    f3 52             	if (r3 != 0) goto -0x1c <VecDotProduct_float_c_c_c+0x22 : d580 >			  ## Vector_floatOperation_maskrom.c:1408:5
    d59c:    50 ec 21 80       	d[r2+0x0] = r9_r8			  ## Vector_floatOperation_maskrom.c:1408:5
    d5a0:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1449:1


VecDotProduct_float_c_f_c:
    d5a2:    7a 04             	[--sp] = {rets, r10-r4}			  ## Vector_floatOperation_maskrom.c:1452:0
    d5a4:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1460:5
    d5a6:    07 61             	r7 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1460:5
    d5a8:    77 a3             	r7 = r7 << 0x3			  ## Vector_floatOperation_maskrom.c:1460:5
    d5aa:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1460:5
    d5ac:    d0 ec 14 a0       	r10 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1460:5
    d5b0:    c0 e1 a2 a0       	r10 = r10 << 0x2			  ## Vector_floatOperation_maskrom.c:1460:5
    d5b4:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1460:5
    d5b6:    88 14             	r9_r8 = 0			  ## Vector_floatOperation_maskrom.c:1460:5
    d5b8:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1460:5
    d5bc:    3f e5 8f 99       	r9 = itof(r9)			  ## Vector_floatOperation_maskrom.c:1460:5
    d5c0:    63 03             	rep 0xe r3 {			  ## Vector_floatOperation_maskrom.c:1460:5
    d5c2:    5e ec 02 47       		r5_r4 = d[r0++=r7]			  ## Vector_floatOperation_maskrom.c:1460:5
    d5c6:    16 09             		r6 = [r1++=r10] 			  ## Vector_floatOperation_maskrom.c:1460:5
    d5c8:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1460:5
    d5cc:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1460:5
    d5d0:    f3 57             	if (r3 != 0) goto -0x12 <VecDotProduct_float_c_f_c+0x1E : d5c0 >			  ## Vector_floatOperation_maskrom.c:1460:5
    d5d2:    50 ec 21 80       	d[r2+0x0] = r9_r8			  ## Vector_floatOperation_maskrom.c:1460:5
    d5d6:    5a 04             	{pc, r10-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1499:1


VecCopy_float_c_c:
    d5d8:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1502:0
    d5da:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1507:5
    d5dc:    c0 f1 33 30       	r3 = r3 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1507:5
    d5e0:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1507:5
    d5e2:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1507:5
    d5e4:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1507:5
    d5e8:    12 60             		 r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1507:5
    d5ea:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1507:5
    d5ec:    32 03             	rep 0x8 r2 {			  ## Vector_floatOperation_maskrom.c:1507:5
    d5ee:    5e ec 02 43       		r5_r4 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:1507:5
    d5f2:    5e ec 13 46       		d[r1++=r6] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:1507:5
    d5f6:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VecCopy_float_c_c+0x14 : d5ec >			  ## Vector_floatOperation_maskrom.c:1507:5
    d5fa:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1536:1


VecCopy_float_f_c:
    d5fc:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1539:0
    d5fe:    42 20             	r2 = 0x0			  ## Vector_floatOperation_maskrom.c:1545:5
    d600:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1545:5
    d602:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1545:5
    d606:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1545:5
    d608:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1545:5
    d60a:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1545:5
    d60e:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1545:5
    d610:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1545:5
    d612:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:1545:5
    d614:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1545:5
    d618:    92 61             		[r1+0x4] = r2			  ## Vector_floatOperation_maskrom.c:1545:5
    d61a:    de ec 13 46       		[r1++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1545:5
    d61e:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecCopy_float_f_c+0x16 : d612 >			  ## Vector_floatOperation_maskrom.c:1545:5
    d622:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1572:1


VecConjDotProduct_float_c_c_c:
    d624:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:1575:0
    d626:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1583:5
    d628:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1583:5
    d62c:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:1583:5
    d630:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1583:5
    d632:    d0 ec 14 b0       	r11 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1583:5
    d636:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:1583:5
    d63a:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1583:5
    d63c:    88 14             	r9_r8 = 0			  ## Vector_floatOperation_maskrom.c:1583:5
    d63e:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1583:5
    d642:    3f e5 8f 99       	r9 = itof(r9)			  ## Vector_floatOperation_maskrom.c:1583:5
    d646:    b3 03             	rep 0x18 r3 {			  ## Vector_floatOperation_maskrom.c:1583:5
    d648:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:1583:5
    d64c:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Vector_floatOperation_maskrom.c:1583:5
    d650:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1583:5
    d654:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1583:5
    d658:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1583:5
    d65c:    3f e5 58 96       		r9 -= r5 * r6 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1583:5
    d660:    f3 52             	if (r3 != 0) goto -0x1c <VecConjDotProduct_float_c_c_c+0x22 : d646 >			  ## Vector_floatOperation_maskrom.c:1583:5
    d662:    50 ec 21 80       	d[r2+0x0] = r9_r8			  ## Vector_floatOperation_maskrom.c:1583:5
    d666:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1624:1


VecNormalize_float_c_c_f:
    d668:    7c 04             	[--sp] = {rets, r12-r4}			  ## Vector_floatOperation_maskrom.c:1627:0
    d66a:    60 e0 7c 85       	r8 = 0x3F000000			  ## Vector_floatOperation_maskrom.c:1637:5
    d66e:    60 e0 7f 95       	r9 = 0x3FC00000			  ## Vector_floatOperation_maskrom.c:1637:5
    d672:    c4 ff df 59 37 5f 	r4 = 0x5f3759df <RAM_LIMIT_H+0x5F1D59DE : 5f3759de >			  ## Vector_floatOperation_maskrom.c:1637:5
    d678:    02 61             	r2 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1637:5
    d67a:    c0 f1 23 20       	r2 = r2 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1637:5
    d67e:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1637:5
    d680:    13 61             	r3 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1637:5
    d682:    c0 f1 33 30       	r3 = r3 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1637:5
    d686:    15 60             		 r5 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1637:5
    d688:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1637:5
    d68a:    5e ec 02 62       	r7_r6 = d[r0++=r2]			  ## Vector_floatOperation_maskrom.c:1637:5
    d68e:    3f e5 62 a6       	r10 = r6 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d692:    3f e5 77 a7       	r10 += r7 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d696:    3f e5 a2 b8       	r11 = r10 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d69a:    c0 e1 a1 ac       	r10 = r10 >>> 0x1			  ## Vector_floatOperation_maskrom.c:1637:5
    d69e:    b4 e0 42 aa       	r10 = r4 - r10			  ## Vector_floatOperation_maskrom.c:1637:5
    d6a2:    70 81             	rep 0x10 0x2 {			  ## Vector_floatOperation_maskrom.c:1637:5
    d6a4:    3f e5 b2 ca       		r12 = r11 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d6a8:    3f e5 c2 ca       		r12 = r12 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d6ac:    3f e5 91 cc       		r12 = r9 - r12 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d6b0:    3f e5 c2 aa       		r10 = r12 * r10 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1637:5
    d6b4:    3f e5 62 6a       	r6 = r6 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d6b8:    3f e5 72 7a       	r7 = r7 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
    d6bc:    5e ec 13 63       	d[r1++=r3] = r7_r6			  ## Vector_floatOperation_maskrom.c:1637:5
    d6c0:    05 ea e3 ff       	if (--r5 != 0) goto -0x3a <VecNormalize_float_c_c_f+0x22 : d68a >			  ## Vector_floatOperation_maskrom.c:1637:5
    d6c4:    5c 04             	{pc, r12-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1685:1


VecRecAve_float_c_c_f:
    d6c6:    d9 e8 70 0d       	[--sp] = {rets, r11, r10, r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:1688:0
    d6ca:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1724:13
    d6cc:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1693:5
    d6d0:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1693:5
    d6d4:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1693:5
    d6d6:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1693:5
    d6d8:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1693:5
    d6dc:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1693:5
    d6de:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1693:5
    d6e0:    d3 03             	rep 0x1c r3 {			  ## Vector_floatOperation_maskrom.c:1693:5
    d6e2:    5e ec 02 48       		r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:1693:5
    d6e6:    50 ec 10 a0       		r11_r10 = d[r1+0x0]			  ## Vector_floatOperation_maskrom.c:1693:5
    d6ea:    3f e5 41 4a       		r4 = r4 - r10 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
    d6ee:    3f e5 51 5b       		r5 = r5 - r11 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
    d6f2:    3f e5 47 a2       		r10 += r4 * r2 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
    d6f6:    3f e5 57 b2       		r11 += r5 * r2 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
    d6fa:    5e ec 13 a6       		d[r1++=r6] = r11_r10
                               	}			  ## Vector_floatOperation_maskrom.c:1693:5
    d6fe:    03 fe ef 01       	ifs (r3 > 0x0) goto -0x22 <VecRecAve_float_c_c_f+0x1A : d6e0 >			  ## Vector_floatOperation_maskrom.c:1693:5
    d702:    d5 e8 70 0d       	{pc, r11, r10, r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1726:1


VecOverlapShift_float_f_f_i:
    d706:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:1729:0
    d708:    13 64             	r3 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d70a:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1736:5
    d70e:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1736:5
    d712:    05 60             		 r5 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d714:    17 60             	r7 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d716:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverlapShift_float_f_f_i+0x22 : d728 >			  ## Vector_floatOperation_maskrom.c:1736:5
    d71a:    f0 e1 80 67       	r6 = r8 * r7			  ## Vector_floatOperation_maskrom.c:1736:5
    d71e:    b4 e0 62 68       	r6 = r6 - r8			  ## Vector_floatOperation_maskrom.c:1736:5
    d722:    b3 1d             	r3 = r3 + r6			  ## Vector_floatOperation_maskrom.c:1736:5
    d724:    a8 e0 00 80       	r8 = 0x0 - r8			  ## Vector_floatOperation_maskrom.c:1736:5
    d728:    7f 1f             	r7 = r7 - r5			  ## Vector_floatOperation_maskrom.c:1736:5
    d72a:    85 1b             	r5 *= r8			  ## Vector_floatOperation_maskrom.c:1736:5
    d72c:    3c 1d             	r4 = r3 + r5			  ## Vector_floatOperation_maskrom.c:1736:5
    d72e:    17 03             	rep 0x4 r7 {			  ## Vector_floatOperation_maskrom.c:1736:5
    d730:    45 08             		r5 = [r4++=r8] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d732:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:1736:5
    d734:    f7 5c             	if (r7 != 0) goto -0x8 <VecOverlapShift_float_f_f_i+0x28 : d72e >			  ## Vector_floatOperation_maskrom.c:1736:5
    d736:    04 64             	r4 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d738:    d0 ec 04 90       	r9 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1736:5
    d73c:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1736:5
    d740:    07 60             		 r7 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d742:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverlapShift_float_f_f_i+0x4E : d754 >			  ## Vector_floatOperation_maskrom.c:1736:5
    d746:    f0 e1 70 69       	r6 = r7 * r9			  ## Vector_floatOperation_maskrom.c:1736:5
    d74a:    b4 e0 62 69       	r6 = r6 - r9			  ## Vector_floatOperation_maskrom.c:1736:5
    d74e:    c4 1d             	r4 = r4 + r6			  ## Vector_floatOperation_maskrom.c:1736:5
    d750:    a9 e0 00 90       	r9 = 0x0 - r9			  ## Vector_floatOperation_maskrom.c:1736:5
    d754:    17 03             	rep 0x4 r7 {			  ## Vector_floatOperation_maskrom.c:1736:5
    d756:    c5 08             		r5 = [r4++=r9] 			  ## Vector_floatOperation_maskrom.c:1736:5
    d758:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:1736:5
    d75a:    f7 5c             	if (r7 != 0) goto -0x8 <VecOverlapShift_float_f_f_i+0x4E : d754 >			  ## Vector_floatOperation_maskrom.c:1736:5
    d75c:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1788:1


VecMax_float_f_f_f:
    d75e:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:1791:0
    d762:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1797:5
    d766:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1797:5
    d76a:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1797:5
    d76c:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1797:5
    d770:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1797:5
    d774:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1797:5
    d776:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1797:5
    d77a:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1797:5
    d77e:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1797:5
    d780:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1797:5
    d782:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:1797:5
    d784:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1797:5
    d786:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:1797:5
    d788:    3f e5 56 54       		r5 = fmax(r5, r4)			  ## Vector_floatOperation_maskrom.c:1797:5
    d78c:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:1797:5
    d78e:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMax_float_f_f_f+0x24 : d782 >			  ## Vector_floatOperation_maskrom.c:1797:5
    d792:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1832:1


VecConjEwMulAndDiv_float_c_c_f_f_c:
    d796:    7f 04             	[--sp] = {rets, r15-r4}			  ## Vector_floatOperation_maskrom.c:1835:0
    d798:    d0 ec 30 c0       	r12 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:1897:13
    d79c:    d4 e9 34 d0       	r13 = [sp+52]			  ## Vector_floatOperation_maskrom.c:1897:13
    d7a0:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1844:5
    d7a2:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:1844:5
    d7a4:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1844:5
    d7a6:    d0 ec 14 e0       	r14 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7aa:    c0 e1 e3 e0       	r14 = r14 << 0x3			  ## Vector_floatOperation_maskrom.c:1844:5
    d7ae:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1844:5
    d7b0:    d0 ec 24 f0       	r15 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7b4:    c0 e1 f2 f0       	r15 = r15 << 0x2			  ## Vector_floatOperation_maskrom.c:1844:5
    d7b8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1844:5
    d7ba:    d0 ec d0 50       	r5 = [r13+0x0]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7be:    d0 ec d4 40       	r4 = [r13+0x4]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7c2:    44 a3             	r4 = r4 << 0x3			  ## Vector_floatOperation_maskrom.c:1844:5
    d7c4:    d0 ec d0 d1       	r13 = [r13+0x10]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7c8:    5e ec 02 63       	r7_r6 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7cc:    5e ec 12 8e       	r9_r8 = d[r1++=r14]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7d0:    3f e5 62 a8       	r10 = r6 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7d4:    3f e5 77 a9       	r10 += r7 * r9 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7d8:    3f e5 62 b9       	r11 = r6 * r9 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7dc:    3f e5 78 b8       	r11 -= r7 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7e0:    de ec 22 8f       	r8 = [r2++=r15]			  ## Vector_floatOperation_maskrom.c:1844:5
    d7e4:    3f e5 80 8c       	r8 = r8 + r12 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7e8:    3f e5 b3 b8       	r11 = r11 / r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7ec:    3f e5 a3 a8       	r10 = r10 / r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
    d7f0:    5e ec d3 a4       	d[r13++=r4] = r11_r10			  ## Vector_floatOperation_maskrom.c:1844:5
    d7f4:    05 ea e8 ff       	if (--r5 != 0) goto -0x30 <VecConjEwMulAndDiv_float_c_c_f_f_c+0x32 : d7c8 >			  ## Vector_floatOperation_maskrom.c:1844:5
    d7f8:    5f 04             	{pc, r15-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1899:1


VecPlusMulScalar_float_c_c_f_c:
    d7fa:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:1902:0
    d7fc:    d0 ec 20 80       	r8 = [r2+0x0]			  ## Vector_floatOperation_maskrom.c:1947:13
    d800:    d0 ec 04 90       	r9 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1910:5
    d804:    c0 e1 93 90       	r9 = r9 << 0x3			  ## Vector_floatOperation_maskrom.c:1910:5
    d808:    32 60             	r2 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:1910:5
    d80a:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1910:5
    d80c:    d0 ec 14 a0       	r10 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1910:5
    d810:    c0 f1 a3 a0       	r10 = r10 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1910:5
    d814:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1910:5
    d816:    d0 ec 34 b0       	r11 = [r3+0x4]			  ## Vector_floatOperation_maskrom.c:1910:5
    d81a:    c0 f1 b3 b0       	r11 = r11 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1910:5
    d81e:    33 64             		 r3 = [r3+0x10] 			  ## Vector_floatOperation_maskrom.c:1910:5
    d820:    92 03             	rep 0x14 r2 {			  ## Vector_floatOperation_maskrom.c:1910:5
    d822:    5e ec 12 6a       		r7_r6 = d[r1++=r10]			  ## Vector_floatOperation_maskrom.c:1910:5
    d826:    5e ec 02 49       		r5_r4 = d[r0++=r9]			  ## Vector_floatOperation_maskrom.c:1910:5
    d82a:    3f e5 67 48       		r4 += r6 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1910:5
    d82e:    3f e5 77 58       		r5 += r7 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1910:5
    d832:    5e ec 33 4b       		d[r3++=r11] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:1910:5
    d836:    f2 54             	if (r2 != 0) goto -0x18 <VecPlusMulScalar_float_c_c_f_c+0x26 : d820 >			  ## Vector_floatOperation_maskrom.c:1910:5
    d838:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1949:1


VecMeanSq_float_f_f:
    d83a:    d9 e8 30 01       	[--sp] = {rets, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:1952:0
    d83e:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1959:5
    d842:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1959:5
    d846:    03 60             		 r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1959:5
    d848:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1959:5
    d84a:    f2 e0 01 30       	r2 = r3 - 0x1			  ## Vector_floatOperation_maskrom.c:1959:5
    d84e:    3f e5 8f 33       	r3 = itof(r3)			  ## Vector_floatOperation_maskrom.c:1959:5
    d852:    04 08             	r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1959:5
    d854:    3f e5 42 54       	r5 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:1959:5
    d858:    22 03             	rep 0x6 r2 {			  ## Vector_floatOperation_maskrom.c:1959:5
    d85a:    04 08             		r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1959:5
    d85c:    3f e5 47 54       		r5 += r4 * r4 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1959:5
    d860:    f2 5b             	if (r2 != 0) goto -0xa <VecMeanSq_float_f_f+0x1E : d858 >			  ## Vector_floatOperation_maskrom.c:1959:5
    d862:    3f e5 53 53       	r5 = r5 / r3 (f)			  ## Vector_floatOperation_maskrom.c:1959:5
    d866:    95 60             	[r1+0x0] = r5			  ## Vector_floatOperation_maskrom.c:1959:5
    d868:    d5 e8 30 01       	{pc, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1988:1


VecCondCopy_float_c_i_c:
    d86c:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:1990:0
    d86e:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1996:5
    d870:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1996:5
    d874:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1996:5
    d876:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1996:5
    d87a:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1996:5
    d87e:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1996:5
    d880:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1996:5
    d882:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1996:5
    d884:    c0 f1 72 70       	r7 = r7 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1996:5
    d888:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1996:5
    d88a:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1996:5
    d88c:    de ec 12 57       		r5 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:1996:5
    d890:    25 e8 00 60       		if (r5 == 0x0) {			  ## Vector_floatOperation_maskrom.c:1996:5
    d894:    80 1d             			r0 = r0 + r6			  ## Vector_floatOperation_maskrom.c:1996:5
    d896:    82 18             			r2 += r8
                               	} else {			  ## Vector_floatOperation_maskrom.c:1996:5
    d898:    5e ec 02 46       			r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:1996:5
    d89c:    5e ec 23 48       			d[r2++=r8] = r5_r4
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:1996:5
    d8a0:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecCondCopy_float_c_i_c+0x1E : d88a >			  ## Vector_floatOperation_maskrom.c:1996:5
    d8a4:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2037:1


VecEleMulAndDiv_float_f_f_f_f_f:
    d8a6:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:2040:0
    d8a8:    e2 9f             	sp += -0x4			  ## Vector_floatOperation_maskrom.c:2040:0
    d8aa:    d0 ec 30 80       	r8 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:2093:13
    d8ae:    03 2a             	r3 = [sp+40]			  ## Vector_floatOperation_maskrom.c:2093:13
    d8b0:    83 20             	[sp] = r3
    d8b2:    03 20             	r3 = [sp]			  ## Vector_floatOperation_maskrom.c:2048:5
    d8b4:    d0 ec 04 b0       	r11 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:2048:5
    d8b8:    c0 e1 b2 b0       	r11 = r11 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
    d8bc:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8be:    14 61             	r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8c0:    44 a2             	r4 = r4 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
    d8c2:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8c4:    35 60             	r5 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8c6:    d0 ec 34 90       	r9 = [r3+0x4]			  ## Vector_floatOperation_maskrom.c:2048:5
    d8ca:    c0 e1 92 90       	r9 = r9 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
    d8ce:    33 64             	r3 = [r3+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8d0:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:2048:5
    d8d4:    c0 e1 a2 a0       	r10 = r10 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
    d8d8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8da:    a5 03             	rep 0x16 r5 {			  ## Vector_floatOperation_maskrom.c:2048:5
    d8dc:    87 09             		r7 = [r0++=r11] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8de:    de ec 12 64       		r6 = [r1++=r4]			  ## Vector_floatOperation_maskrom.c:2048:5
    d8e2:    3f e5 72 76       		r7 = r7 * r6 (f)			  ## Vector_floatOperation_maskrom.c:2048:5
    d8e6:    26 09             		r6 = [r2++=r10] 			  ## Vector_floatOperation_maskrom.c:2048:5
    d8e8:    3f e5 60 68       		r6 = r6 + r8 (f)			  ## Vector_floatOperation_maskrom.c:2048:5
    d8ec:    3f e5 73 76       		r7 = r7 / r6 (f)			  ## Vector_floatOperation_maskrom.c:2048:5
    d8f0:    bf 08             		[r3++=r9] = r7
                               	}			  ## Vector_floatOperation_maskrom.c:2048:5
    d8f2:    05 fe f2 01       	ifs (r5 > 0x0) goto -0x1c <VecEleMulAndDiv_float_f_f_f_f_f+0x34 : d8da >			  ## Vector_floatOperation_maskrom.c:2048:5
    d8f6:    02 81             	sp += 0x4
    d8f8:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2095:1


VectorSet_float_f_c:
    d8fa:    00 60             	r0 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:2098:0
    d8fc:    13 61             	r3 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:2101:5
    d8fe:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:2101:5
    d900:    12 60             	r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2101:5
    d902:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:2101:5
    d904:    32 03             	rep 0x8 r2 {			  ## Vector_floatOperation_maskrom.c:2101:5
    d906:    41 ea 00 10       		[r1+0x4] = 0x0			  ## Vector_floatOperation_maskrom.c:2101:5
    d90a:    de ec 13 03       		[r1++=r3] = r0
                               	}			  ## Vector_floatOperation_maskrom.c:2101:5
    d90e:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VectorSet_float_f_c+0xA : d904 >			  ## Vector_floatOperation_maskrom.c:2101:5
    d912:    80 00             	rts			  ## Vector_floatOperation_maskrom.c:2120:1


VecDivScalar_float_f_f_f:
    d914:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:2123:0
    d916:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2153:13
    d918:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2128:5
    d91a:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:2128:5
    d91e:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2128:5
    d920:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:2128:5
    d924:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2128:5
    d926:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2128:5
    d928:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2128:5
    d92a:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:2128:5
    d92c:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:2128:5
    d930:    3f e5 43 41       		r4 = r4 / r1 (f)			  ## Vector_floatOperation_maskrom.c:2128:5
    d934:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:2128:5
    d938:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecDivScalar_float_f_f_f+0x16 : d92a >			  ## Vector_floatOperation_maskrom.c:2128:5
    d93c:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2155:1


VecDivScalar_float_c_f_c:
    d93e:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:2158:0
    d940:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2189:13
    d942:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2163:5
    d944:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2163:5
    d948:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2163:5
    d94a:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2163:5
    d94c:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2163:5
    d950:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2163:5
    d952:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2163:5
    d954:    73 03             	rep 0x10 r3 {			  ## Vector_floatOperation_maskrom.c:2163:5
    d956:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:2163:5
    d95a:    3f e5 53 51       		r5 = r5 / r1 (f)			  ## Vector_floatOperation_maskrom.c:2163:5
    d95e:    3f e5 43 41       		r4 = r4 / r1 (f)			  ## Vector_floatOperation_maskrom.c:2163:5
    d962:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:2163:5
    d966:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecDivScalar_float_c_f_c+0x16 : d954 >			  ## Vector_floatOperation_maskrom.c:2163:5
    d96a:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2191:1


VecPlusScalar_float_c_f_c:
    d96c:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:2194:0
    d96e:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2224:13
    d970:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2199:5
    d972:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2199:5
    d976:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2199:5
    d978:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2199:5
    d97a:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2199:5
    d97e:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2199:5
    d980:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2199:5
    d982:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:2199:5
    d984:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:2199:5
    d988:    3f e5 40 41       		r4 = r4 + r1 (f)			  ## Vector_floatOperation_maskrom.c:2199:5
    d98c:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:2199:5
    d990:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecPlusScalar_float_c_f_c+0x16 : d982 >			  ## Vector_floatOperation_maskrom.c:2199:5
    d994:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2226:1


VecMinScalar_float_c_f_c:
    d996:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:2229:0
    d998:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2259:13
    d99a:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2234:5
    d99c:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2234:5
    d9a0:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2234:5
    d9a2:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2234:5
    d9a4:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2234:5
    d9a8:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2234:5
    d9aa:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2234:5
    d9ac:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:2234:5
    d9ae:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:2234:5
    d9b2:    3f e5 41 41       		r4 = r4 - r1 (f)			  ## Vector_floatOperation_maskrom.c:2234:5
    d9b6:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:2234:5
    d9ba:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecMinScalar_float_c_f_c+0x16 : d9ac >			  ## Vector_floatOperation_maskrom.c:2234:5
    d9be:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2261:1


endian_change:
    d9c0:    76 04             	[--sp] = {rets, r6-r4}			  ## crc.c:128:0
    d9c2:    01 4f             	if (r1 == 0) goto 0x1e <endian_change+0x22 : d9e2 >			  ## crc.c:128:0
    d9c4:    32 e1 ff 1f       	r2 = r1 + -0x1			  ## crc.c:128:0
    d9c8:    91 a1             	r1 = r1 >> 0x1			  ## crc.c:128:0
    d9ca:    03 16             	r3 = r0			  ## crc.c:128:0
    d9cc:    04 89             	goto 0x12 <endian_change+0x20 : d9e0 >			  ## crc.c:128:0
    d9ce:    a4 d7             	r4 = r2.l (u)  #			  ## crc.c:137:22
    d9d0:    3d 40             		 r5 = b[r3+0x0] (u)			  ## crc.c:138:25
    d9d2:    d8 ee 00 64       	r6 = b[r0+r4] (u)			  ## crc.c:137:22
    d9d6:    d8 ee 01 54       	b[r0+r4] = r5			  ## crc.c:138:23
    d9da:    b6 07             	b[r3++=0x1] = r6			  ## crc.c:139:16
    d9dc:    fa 3f             	r2 += -0x1			  ## crc.c:136:5
    d9de:    f9 3f             	r1 += -0x1			  ## crc.c:136:5
    d9e0:    f1 56             	if (r1 != 0) goto -0x14 <endian_change+0xE : d9ce >
    d9e2:    56 04             	{pc, r6-r4} = [sp++]			  ## crc.c:142:1


get_sr_index:
    d9e4:    c2 ff 70 67 01 00 	r2 = 0x16770 <silk_encode_pulses+0x2FC : 16770 >			  ## aac_main.c:159:0
    d9ea:    41 20             	r1 = 0x0			  ## aac_main.c:160:12
    d9ec:    02 ec 36 00       	if (r0 > r2) goto 0x6c <get_sr_index+0x78 : da5c >			  ## aac_main.c:160:12
    d9f0:    c2 ff 7b 25 01 00 	r2 = 0x1257b <silk_find_pitch_lags_FIX+0x1C : 1257a >			  ## aac_main.c:161:12
    d9f6:    41 21             	r1 = 0x1			  ## aac_main.c:161:12
    d9f8:    02 ec 30 00       	if (r0 > r2) goto 0x60 <get_sr_index+0x78 : da5c >			  ## aac_main.c:161:12
    d9fc:    c2 ff 81 d8 00 00 	r2 = 0xd881 <VecCondCopy_float_c_i_c+0x14 : d880 >			  ## aac_main.c:162:12
    da02:    41 22             	r1 = 0x2			  ## aac_main.c:162:12
    da04:    02 ec 2a 00       	if (r0 > r2) goto 0x54 <get_sr_index+0x78 : da5c >			  ## aac_main.c:162:12
    da08:    c2 ff b8 b3 00 00 	r2 = 0xb3b8 <cvt+0x158 : b3b8 >			  ## aac_main.c:163:12
    da0e:    41 23             	r1 = 0x3			  ## aac_main.c:163:12
    da10:    02 ec 24 00       	if (r0 > r2) goto 0x48 <get_sr_index+0x78 : da5c >			  ## aac_main.c:163:12
    da14:    c2 ff bd 92 00 00 	r2 = 0x92bd <EccPoint_mult+0x31A : 92bc >			  ## aac_main.c:164:12
    da1a:    41 24             	r1 = 0x4			  ## aac_main.c:164:12
    da1c:    02 ec 1e 00       	if (r0 > r2) goto 0x3c <get_sr_index+0x78 : da5c >			  ## aac_main.c:164:12
    da20:    42 e0 40 6c       	r2 = 0x6c40 <wtgv2_silk_decode_parameters+0x17E : 6c40 >			  ## aac_main.c:165:12
    da24:    41 25             	r1 = 0x5			  ## aac_main.c:165:12
    da26:    02 ec 19 00       	if (r0 > r2) goto 0x32 <get_sr_index+0x78 : da5c >			  ## aac_main.c:165:12
    da2a:    42 e0 db 59       	r2 = 0x59db <wtgv2_silk_decode_core+0x3A4 : 59da >			  ## aac_main.c:166:12
    da2e:    41 26             	r1 = 0x6			  ## aac_main.c:166:12
    da30:    02 ec 14 00       	if (r0 > r2) goto 0x28 <get_sr_index+0x78 : da5c >			  ## aac_main.c:166:12
    da34:    42 e0 5e 49       	r2 = 0x495e <usb_slave_mode+0x156 : 495e >			  ## aac_main.c:167:12
    da38:    41 27             	r1 = 0x7			  ## aac_main.c:167:12
    da3a:    02 ec 0f 00       	if (r0 > r2) goto 0x1e <get_sr_index+0x78 : da5c >			  ## aac_main.c:167:12
    da3e:    82 a5             	r2 = r0 >> 0x5			  ## aac_main.c:168:6
    da40:    41 28             	r1 = 0x8			  ## aac_main.c:168:6
    da42:    32 fc 0b 60       	if (r2 > 0x1b0) goto 0x16 <get_sr_index+0x78 : da5c >			  ## aac_main.c:168:6
    da46:    42 e0 ed 2c       	r2 = 0x2ced <WOLASynthesisFilter_Float_M256_m4_r1+0x4E8 : 2cec >			  ## aac_main.c:169:12
    da4a:    41 29             	r1 = 0x9			  ## aac_main.c:169:12
    da4c:    02 ec 06 00       	if (r0 > r2) goto 0xc <get_sr_index+0x78 : da5c >			  ## aac_main.c:169:12
    da50:    42 e0 ae 24       	r2 = 0x24ae <WOLAAnalysisFilter_Float_M256_m4_r1+0xCAA : 24ae >			  ## aac_main.c:170:11
    da54:    41 2a             	r1 = 0xa			  ## aac_main.c:170:26
    da56:    90 ec 00 02       	if (r0 <= r2) {			  ## aac_main.c:170:26
    da5a:    41 2b             		r1 = 0xb
                               	}			  ## aac_main.c:170:26
    da5c:    10 17             	r0 = r1.b0 (u)			  ## aac_main.c:174:1
    da5e:    80 00             	rts			  ## aac_main.c:174:1


faad_mdct_init:
    da60:    89 60             	h[r0+0x0] = r1			  ## aac_main.c:114:0
    da62:    20 ff 00 1e 06 00 	if (r1 == 0x800) goto 0xc <faad_mdct_init+0x14 : da74 >			  ## aac_main.c:116:10
    da68:    a1 f8 08 00       	if (r1 != 0x100) goto 0x10 <faad_mdct_init+0x1C : da7c >
    da6c:    c2 ff 00 90 01 00 	r2 = 0x19000 <mdct_tab_256 : 19000 >
    da72:    04 83             	goto 0x6 <faad_mdct_init+0x1A : da7a >
    da74:    c2 ff 00 92 01 00 	r2 = 0x19200 <mdct_tab_2048 : 19200 >
    da7a:    82 6a             	[r0+0x28] = r2
    da7c:    91 a2             	r1 = r1 >> 0x2			  ## aac_main.c:131:19
    da7e:    89 62             	h[r0+0x4] = r1			  ## aac_main.c:131:15
    da80:    80 00             	rts			  ## aac_main.c:137:1


aac_decoder_open:
    da82:    78 04             	[--sp] = {rets, r8-r4}			  ## aac_main.c:222:0
    da84:    04 15             	r5_r4 = r1_r0			  ## aac_main.c:222:0
    da86:    46 20             	r6 = 0x0			  ## aac_main.c:222:0
    da88:    41 20             	r1 = 0x0			  ## aac_main.c:225:2
    da8a:    42 e0 24 3c       	r2 = 0x3c24 <STFT_Win_FixHalf_M256_D160+0x20 : 3c24 >			  ## aac_main.c:225:2
    da8e:    27 16             	r7 = r2
    da90:    80 ff 90 67 ff ff 	call -0x9870 <memset : 4226 >			  ## aac_main.c:225:2
    da96:    10 e1 f8 4b       	r0 = r4 + 0x1bf8			  ## aac_main.c:225:2
    da9a:    40 ea 80 0d       	[r0+0x0] = 0x1000			  ## aac_main.c:226:23
    da9e:    11 e1 84 46       	r1 = r4 + 0x1684			  ## aac_main.c:226:23
    daa2:    02 f1 00 4e       	r2 = r4 + 0xe00  #			  ## aac_main.c:213:21
    daa6:    94 6c             		 [r1+0x30] = r4			  ## aac_main.c:215:12
    daa8:    02 f1 44 4e       	r2 = r4 + 0xe44  #			  ## aac_main.c:216:53
    daac:    92 65             		 [r1+0x14] = r2			  ## aac_main.c:216:16
    daae:    18 f1 00 46       	r8 = r4 + 0x1600  #			  ## aac_main.c:216:16
    dab2:    92 66             		 [r1+0x18] = r2			  ## aac_main.c:217:16
    dab4:    52 60             	r2 = [r5+0x0] 			  ## aac_main.c:230:29
    dab6:    82 68             	[r0+0x20] = r2			  ## aac_main.c:230:15
    dab8:    52 61             	r2 = [r5+0x4] 			  ## aac_main.c:231:30
    daba:    82 69             	[r0+0x24] = r2			  ## aac_main.c:231:16
    dabc:    52 63             	r2 = [r5+0xc] 			  ## aac_main.c:232:31
    dabe:    42 f0 18 16       	r2 = 0x1618  # <WOLASynthesisFilter_Float_M128_m4_r1+0x614 : 1618 >			  ## aac_main.c:182:19
    dac2:    82 6a             		 [r0+0x28] = r2			  ## aac_main.c:232:17
    dac4:    43 22             	r3 = 0x2			  ## aac_main.c:182:33
    dac6:    d8 ee 41 32       	b[r4+r2] = r3			  ## aac_main.c:182:33
    daca:    c2 ff 44 ac 00 00 	r2 = 0xac44 <uart_upgrade_init+0xC0 : ac44 >			  ## aac_main.c:183:33
    dad0:    d0 ec 85 21       	[r8+0x14] = r2			  ## aac_main.c:183:33
    dad4:    42 e0 19 16       	r2 = 0x1619 <WOLASynthesisFilter_Float_M128_m4_r1+0x614 : 1618 >			  ## aac_main.c:184:19
    dad8:    d8 ee 41 62       	b[r4+r2] = r6			  ## aac_main.c:184:36
    dadc:    52 ee 80 60       	b[r8+0x0] = r6			  ## aac_main.c:185:32
    dae0:    42 e0 00 04       	r2 = 0x400 <ROM_RAM_SIZE+0x200 : 400 >			  ## aac_main.c:188:24
    dae4:    50 ed 8f 20       	h[r8+0xe] = r2			  ## aac_main.c:188:24
    dae8:    d0 ec 81 61       	[r8+0x10] = r6			  ## aac_main.c:189:18
    daec:    c8 2c             	r0 += 0x2c			  ## aac_main.c:192:45
    daee:    c8 dd             	r0 = r4 + r7  #			  ## aac_main.c:194:7
    daf0:    90 60             		 [r1+0x0] = r0			  ## aac_main.c:192:26
    daf2:    01 e1 06 80       	r1 = r8 + 0x6			  ## aac_main.c:194:7
    daf6:    42 20             	r2 = 0x0			  ## aac_main.c:194:7
    daf8:    44 20             	r4 = 0x0			  ## aac_main.c:194:7
    dafa:    04 91             	goto 0x22 <aac_decoder_open+0x9C : db1e >
    dafc:    d8 ee 11 64       	b[r1+r4] = r6			  ## aac_main.c:196:34
    db00:    95 1c             	r5 = r1 + r2			  ## aac_main.c:197:3
    db02:    05 e1 1e 56       	r5 = r5 + 0x61e			  ## aac_main.c:197:3
    db06:    47 a2             	r7 = r4 << 0x2			  ## aac_main.c:197:25
    db08:    17 18             	r7 += r1			  ## aac_main.c:197:25
    db0a:    03 e1 82 70       	r3 = r7 + 0x82			  ## aac_main.c:197:25
    db0e:    83 dc             	r3 = r0 + r2  #			  ## aac_main.c:198:3
    db10:    b5 60             		 [r3+0x0] = r5			  ## aac_main.c:197:25
    db12:    05 e1 8a 70       	r5 = r7 + 0x8a			  ## aac_main.c:198:28
    db16:    12 f1 00 20       	r2 = r2 + 0x1000  #			  ## aac_main.c:194:2
    db1a:    d3 60             		 [r5+0x0] = r3			  ## aac_main.c:198:28
    db1c:    c4 21             	r4 += 0x1			  ## aac_main.c:194:33
    db1e:    84 f8 ed 05       	if (r4 != 0x2) goto -0x26 <aac_decoder_open+0x7A : dafc >
    db22:    d0 ec 84 01       	r0 = [r8+0x14]			  ## aac_main.c:200:53
    db26:    bf ea 5d ff       	call -0x146 <get_sr_index : d9e4 >			  ## aac_main.c:200:23
    db2a:    52 ee 81 00       	b[r8+0x1] = r0			  ## aac_main.c:200:21
    db2e:    50 ed 8e 30       	r3 = h[r8+0xe] (u)			  ## aac_main.c:142:33
    db32:    00 e1 1c 80       	r0 = r8 + 0x1c			  ## aac_main.c:144:27
    db36:    41 20             	r1 = 0x0			  ## aac_main.c:144:27
    db38:    00 99             	rep 0x2 0x1a {			  ## aac_main.c:146:2
    db3a:    81 05             		[r0++=0x4] = r1
                               	}			  ## aac_main.c:146:2
    db3c:    b0 a2             	r0 = r3 >> 0x2			  ## aac_main.c:149:33
    db3e:    41 e0 fe 3f       	r1 = 0x3ffe <STFT_Win_FixHalf_M256_D80+0x1FA : 3ffe >			  ## aac_main.c:149:33
    db42:    81 19             	r1 &= r0			  ## aac_main.c:143:30
    db44:    00 e1 2c 80       	r0 = r8 + 0x2c			  ## aac_main.c:149:22
    db48:    41 8b             	call -0xea <faad_mdct_init : da60 >			  ## aac_main.c:149:2
    db4a:    00 e1 58 80       	r0 = r8 + 0x58			  ## aac_main.c:150:22
    db4e:    31 a1             	r1 = r3 << 0x1			  ## aac_main.c:150:34
    db50:    91 17             	r1 = r1.l (u)			  ## aac_main.c:150:2
    db52:    41 86             	call -0xf4 <faad_mdct_init : da60 >			  ## aac_main.c:150:2
    db54:    c0 ff 00 a2 01 00 	r0 = 0x1a200 <sine_long_1024 : 1a200 >			  ## aac_main.c:151:21
    db5a:    d0 ec 8d 01       	[r8+0x1c] = r0			  ## aac_main.c:151:21
    db5e:    c0 ff 00 b2 01 00 	r0 = 0x1b200 <sine_short_128 : 1b200 >			  ## aac_main.c:152:22
    db64:    d0 ec 85 02       	[r8+0x24] = r0			  ## aac_main.c:152:22
    db68:    c0 ff 00 b4 01 00 	r0 = 0x1b400 <kbd_long_1024 : 1b400 >			  ## aac_main.c:153:21
    db6e:    d0 ec 81 02       	[r8+0x20] = r0			  ## aac_main.c:153:21
    db72:    c1 ff 00 c4 01 00 	r1 = 0x1c400 <kbd_short_128 : 1c400 >			  ## aac_main.c:154:22
    db78:    40 20             	r0 = 0x0			  ## aac_main.c:234:2
    db7a:    d0 ec 89 12       	[r8+0x28] = r1			  ## aac_main.c:154:22
    db7e:    58 04             	{pc, r8-r4} = [sp++]			  ## aac_main.c:234:2


get_aac_ops:
    db80:    c0 ff 00 c6 01 00 	r0 = 0x1c600 <aac_decoder_ops : 1c600 >			  ## aac_main.c:545:0
    db86:    80 00             	rts			  ## aac_main.c:546:2


faad_getbits:
    db88:    76 04             	[--sp] = {rets, r6-r4}			  ## bits.c:100:0
    db8a:    02 62             	r2 = [r0+0x8] 			  ## bits.c:110:19
    db8c:    01 e9 1a 20       	if (r2 >= r1) goto 0x34 <faad_getbits+0x3C : dbc4 >			  ## bits.c:110:19
    db90:    03 61             	r3 = [r0+0x4] 			  ## bits.c:119:66
    db92:    04 60             	r4 = [r0+0x0] 			  ## bits.c:119:15
    db94:    83 60             	[r0+0x0] = r3			  ## bits.c:120:12
    db96:    05 64             	r5 = [r0+0x10] 			  ## bits.c:121:22
    db98:    56 60             	r6 = [r5+0x0] 			  ## bits.c:49:3
    db9a:    70 e0 00 66       	r6 = rev8(r6)			  ## bits.c:49:3
    db9e:    95 de             	r5 = r1 - r2  #			  ## bits.c:118:8
    dba0:    86 61             		 [r0+0x4] = r6			  ## bits.c:124:12
    dba2:    c4 eb 04 00       	[r0+0x10] += 0x4			  ## bits.c:125:11
    dba6:    46 21             	r6 = 0x1			  ## bits.c:119:26
    dba8:    c8 e1 60 22       	r2 = r6 << r2			  ## bits.c:119:26
    dbac:    fa 3f             	r2 += -0x1			  ## bits.c:119:44
    dbae:    c2 19             	r2 &= r4			  ## bits.c:119:20
    dbb0:    52 1a             	r2 <<= r5			  ## bits.c:119:50
    dbb2:    a4 f0 20 50       	r4 = 0x20 - r5  #			  ## bits.c:119:78
    dbb6:    05 62             		 r5 = [r0+0x8] 			  ## bits.c:126:17
    dbb8:    c3 1a             	r3 >>= r4			  ## bits.c:119:71
    dbba:    32 19             	r2 |= r3			  ## bits.c:119:59
    dbbc:    a1 e0 20 10       	r1 = 0x20 - r1			  ## bits.c:126:24
    dbc0:    1b 1d             	r3 = r1 + r5			  ## bits.c:126:17
    dbc2:    04 89             	goto 0x12 <faad_getbits+0x4E : dbd6 >			  ## bits.c:126:17
    dbc4:    2b de             	r3 = r2 - r1  #			  ## bits.c:114:18
    dbc6:    04 60             		 r4 = [r0+0x0] 			  ## bits.c:113:15
    dbc8:    a2 e0 20 20       	r2 = 0x20 - r2			  ## bits.c:113:27
    dbcc:    c8 e1 40 22       	r2 = r4 << r2			  ## bits.c:113:20
    dbd0:    a1 e0 20 10       	r1 = 0x20 - r1			  ## bits.c:113:52
    dbd4:    92 1a             	r2 >>= r1			  ## bits.c:113:45
    dbd6:    20 d6             	r0 = r2  #			  ## bits.c:128:2
    dbd8:    83 62             		 [r0+0x8] = r3			  ## bits.c:114:18
    dbda:    56 04             	{pc, r6-r4} = [sp++]			  ## bits.c:128:2


faad_get1bit:
    dbdc:    01 62             	r1 = [r0+0x8] 			  ## bits.c:136:0
    dbde:    01 47             	if (r1 == 0) goto 0xe <faad_get1bit+0x12 : dbee >			  ## bits.c:140:7
    dbe0:    f9 3f             	r1 += -0x1			  ## bits.c:142:17
    dbe2:    81 62             	[r0+0x8] = r1			  ## bits.c:142:17
    dbe4:    00 60             	r0 = [r0+0x0] 			  ## bits.c:143:23
    dbe6:    90 1a             	r0 >>= r1			  ## bits.c:143:28
    dbe8:    60 e1 01 00       	r0 = r0 & 0x1			  ## bits.c:143:46
    dbec:    80 00             	rts			  ## bits.c:157:2
    dbee:    01 61             	r1 = [r0+0x4] 			  ## bits.c:148:21
    dbf0:    81 60             	[r0+0x0] = r1			  ## bits.c:149:12
    dbf2:    02 64             	r2 = [r0+0x10] 			  ## bits.c:150:22
    dbf4:    23 60             	r3 = [r2+0x0] 			  ## bits.c:49:3
    dbf6:    70 e0 00 33       	r3 = rev8(r3)			  ## bits.c:49:3
    dbfa:    83 61             	[r0+0x4] = r3			  ## bits.c:151:12
    dbfc:    c4 eb 04 00       	[r0+0x10] += 0x4			  ## bits.c:152:11
    dc00:    42 ea 1f 00       	[r0+0x8] = 0x1F			  ## bits.c:153:17
    dc04:    90 bf             	r0 = r1 >> 0x1f			  ## bits.c:148:26
    dc06:    80 00             	rts			  ## bits.c:157:2


init_cpe:
    dc08:    76 04             	[--sp] = {rets, r6-r4}			  ## syntax.c:357:0
    dc0a:    04 16             	r4 = r0			  ## syntax.c:357:0
    dc0c:    10 e1 e4 46       	r0 = r4 + 0x16e4			  ## syntax.c:364:2
    dc10:    41 20             	r1 = 0x0			  ## syntax.c:364:2
    dc12:    42 e0 ec 04       	r2 = 0x4ec <alg_code_size+0x1C : 4ec >			  ## syntax.c:364:2
    dc16:    80 ff 0a 66 ff ff 	call -0x99f6 <memset : 4226 >			  ## syntax.c:364:2
    dc1c:    00 e1 00 4e       	r0 = r4 + 0xe00			  ## syntax.c:365:26
    dc20:    15 e1 50 49       	r5 = r4 + 0x1950			  ## syntax.c:365:26
    dc24:    11 f1 10 40       	r1 = r4 + 0x1010  #			  ## syntax.c:366:45
    dc28:    d0 60             		 [r5+0x0] = r0			  ## syntax.c:365:12
    dc2a:    16 e1 d0 4b       	r6 = r4 + 0x1bd0			  ## syntax.c:365:12
    dc2e:    42 f0 20 04       	r2 = 0x420  # <WOLASynthesisFilter_Float_M64_m4_r1+0x1C : 420 >			  ## syntax.c:369:2
    dc32:    e1 60             		 [r6+0x0] = r1			  ## syntax.c:366:12
    dc34:    41 20             	r1 = 0x0			  ## syntax.c:369:2
    dc36:    80 ff ea 65 ff ff 	call -0x9a16 <memset : 4226 >			  ## syntax.c:369:2
    dc3c:    40 e0 ba 05       	r0 = 0x5ba <alg_code_size+0xEA : 5ba >			  ## syntax.c:371:7
    dc40:    41 e0 6a 03       	r1 = 0x36a <ROM_RAM_SIZE+0x16A : 36a >			  ## syntax.c:372:16
    dc44:    d8 ec 4b 10       	[r4+r0<<2] = r1			  ## syntax.c:372:16
    dc48:    40 e0 24 2c       	r0 = 0x2c24 <WOLASynthesisFilter_Float_M256_m4_r1+0x420 : 2c24 >			  ## syntax.c:372:16
    dc4c:    40 18             	r0 += r4			  ## syntax.c:372:16
    dc4e:    e0 61             	[r6+0x4] = r0			  ## syntax.c:377:24
    dc50:    d0 61             	[r5+0x4] = r0			  ## syntax.c:377:12
    dc52:    09 8a             	r1 = r0 + 0xa			  ## syntax.c:377:68
    dc54:    e1 62             	[r6+0x8] = r1			  ## syntax.c:378:32
    dc56:    d1 62             	[r5+0x8] = r1			  ## syntax.c:378:16
    dc58:    09 92             	r1 = r0 + 0x12			  ## syntax.c:378:76
    dc5a:    00 f1 8a 00       	r0 = r0 + 0x8a  #			  ## syntax.c:379:75
    dc5e:    e1 63             		 [r6+0xc] = r1			  ## syntax.c:379:32
    dc60:    d1 63             	[r5+0xc] = r1			  ## syntax.c:379:16
    dc62:    e0 64             	[r6+0x10] = r0			  ## syntax.c:380:48
    dc64:    40 f0 ae 2d       	r0 = 0x2dae  # <WOLASynthesisFilter_Float_M256_m4_r1+0x5AA : 2dae >			  ## syntax.c:380:92
    dc68:    d0 64             		 [r5+0x10] = r0			  ## syntax.c:380:24
    dc6a:    40 18             	r0 += r4			  ## syntax.c:380:92
    dc6c:    e0 65             	[r6+0x14] = r0			  ## syntax.c:381:38
    dc6e:    40 f0 9e 2e       	r0 = 0x2e9e  # <WOLASynthesisFilter_Float_M256_m4_r1+0x69A : 2e9e >			  ## syntax.c:381:82
    dc72:    d0 65             		 [r5+0x14] = r0			  ## syntax.c:381:19
    dc74:    40 18             	r0 += r4			  ## syntax.c:381:82
    dc76:    e0 66             	[r6+0x18] = r0			  ## syntax.c:382:34
    dc78:    d0 66             	[r5+0x18] = r0			  ## syntax.c:382:17
    dc7a:    56 04             	{pc, r6-r4} = [sp++]			  ## syntax.c:383:1


ics_info:
    dc7c:    7f 04             	[--sp] = {rets, r15-r4}			  ## syntax.c:523:0
    dc7e:    e2 99             	sp += -0x1c			  ## syntax.c:523:0
    dc80:    2a 16             	r10 = r2			  ## syntax.c:523:0
    dc82:    1b 16             	r11 = r1			  ## syntax.c:523:0
    dc84:    0f 16             	r15 = r0			  ## syntax.c:523:0
    dc86:    a0 16             	r0 = r10			  ## syntax.c:527:21
    dc88:    51 89             	call -0xae <faad_get1bit : dbdc >			  ## syntax.c:527:21
    dc8a:    4f 20             	r7 = 0x20			  ## syntax.c:527:21
    dc8c:    00 43             	if (r0 == 0) goto 0x6 <ics_info+0x18 : dc94 >			  ## syntax.c:527:21
    dc8e:    70 16             	r0 = r7			  ## syntax.c:579:1
    dc90:    02 87             	sp += 0x1c			  ## syntax.c:579:1
    dc92:    5f 04             	{pc, r15-r4} = [sp++]			  ## syntax.c:579:1
    dc94:    41 22             	r1 = 0x2			  ## syntax.c:530:34
    dc96:    a0 16             	r0 = r10			  ## syntax.c:530:34
    dc98:    bf ea 76 ff       	call -0x114 <faad_getbits : db88 >			  ## syntax.c:530:34
    dc9c:    52 ee b0 00       	b[r11+0x0] = r0			  ## syntax.c:530:23
    dca0:    a0 16             	r0 = r10			  ## syntax.c:531:22
    dca2:    41 9c             	call -0xc8 <faad_get1bit : dbdc >			  ## syntax.c:531:22
    dca4:    52 ee b2 00       	b[r11+0x2] = r0			  ## syntax.c:531:20
    dca8:    50 ee b0 00       	r0 = b[r11+0x0] (u)			  ## syntax.c:533:11
    dcac:    80 f8 0d 04       	if (r0 != 0x2) goto 0x1a <ics_info+0x4E : dcca >			  ## syntax.c:533:6
    dcb0:    41 24             	r1 = 0x4			  ## syntax.c:535:27
    dcb2:    a0 16             	r0 = r10			  ## syntax.c:535:27
    dcb4:    bf ea 68 ff       	call -0x130 <faad_getbits : db88 >			  ## syntax.c:535:27
    dcb8:    52 ee b4 00       	b[r11+0x4] = r0			  ## syntax.c:535:16
    dcbc:    41 27             	r1 = 0x7			  ## syntax.c:536:41
    dcbe:    a0 16             	r0 = r10			  ## syntax.c:536:41
    dcc0:    bf ea 62 ff       	call -0x13c <faad_getbits : db88 >			  ## syntax.c:536:41
    dcc4:    52 ee ba 00       	b[r11+0xa] = r0			  ## syntax.c:536:30
    dcc8:    04 86             	goto 0xc <ics_info+0x5A : dcd6 >			  ## syntax.c:536:30
    dcca:    41 26             	r1 = 0x6			  ## syntax.c:539:27
    dccc:    a0 16             	r0 = r10			  ## syntax.c:539:27
    dcce:    bf ea 5b ff       	call -0x14a <faad_getbits : db88 >			  ## syntax.c:539:27
    dcd2:    52 ee b4 00       	b[r11+0x4] = r0			  ## syntax.c:539:16
    dcd6:    50 ee b0 e0       	r14 = b[r11+0x0] (u)			  ## specrec.c:62:15
    dcda:    50 ee f1 10       	r1 = b[r15+0x1] (u)			  ## specrec.c:60:31
    dcde:    0c e1 f8 b1       	r12 = r11 + 0x1f8			  ## specrec.c:60:31
    dce2:    08 e1 74 b2       	r8 = r11 + 0x274			  ## specrec.c:60:31
    dce6:    8e f9 04 04       	if (r14 < 0x2) goto 0x8 <ics_info+0x76 : dcf2 >			  ## specrec.c:60:31
    dcea:    0e f8 40 04       	if (r14 == 0x2) goto 0x80 <ics_info+0xF2 : dd6e >
    dcee:    8e f8 ce 07       	if (r14 != 0x3) goto -0x64 <ics_info+0x12 : dc8e >
    dcf2:    43 21             	r3 = 0x1
    dcf4:    52 ee b6 30       	b[r11+0x6] = r3			  ## specrec.c:66:20
    dcf8:    52 ee b8 30       	b[r11+0x8] = r3			  ## specrec.c:67:26
    dcfc:    52 ee bf 30       	b[r11+0xf] = r3			  ## specrec.c:68:56
    dd00:    50 ed fe 30       	r3 = h[r15+0xe] (u)			  ## specrec.c:70:17
    dd04:    b3 e8 00 14       	if (r3 != 0x400) {			  ## specrec.c:70:17
    dd08:    c3 ff 44 c8 01 00 		r3 = 0x1c844
                               	} else { <num_swb_960_window : 1c844 >			  ## specrec.c:71:4
    dd0e:    c3 ff 50 c8 01 00 		r3 = 0x1c850
                               	} <num_swb_1024_window : 1c850 >			  ## specrec.c:71:4
    dd14:    d8 ee 30 31       	r3 = b[r3+r1] (u)			  ## specrec.c:71:4
    dd18:    52 ee b5 30       	b[r11+0x5] = r3			  ## specrec.c:71:4
    dd1c:    58 ee b4 20       	r2 = b[++r11=0x4] (u)			  ## specrec.c:75:12
    dd20:    03 ec b5 21       	if (r2 > r3) goto -0x96 <ics_info+0x12 : dc8e >			  ## specrec.c:75:12
    dd24:    04 e1 04 c0       	r4 = r12 + 0x4			  ## specrec.c:58:10
    dd28:    45 20             	r5 = 0x0			  ## specrec.c:58:10
    dd2a:    c9 ff a4 cb 01 00 	r9 = 0x1cba4 <swb_offset_1024_window : 1cba4 >			  ## specrec.c:58:10
    dd30:    04 8d             	goto 0x1a <ics_info+0xD0 : dd4c >			  ## specrec.c:58:10
    dd32:    d8 ec 9a 71       	r7 = [r9+r1<<2]			  ## specrec.c:84:33
    dd36:    d8 ed 78 05       	r0 = h[r7+r5<<1] (u)			  ## specrec.c:84:33
    dd3a:    d0 ec 80 60       	r6 = [r8+0x0]			  ## specrec.c:84:9
    dd3e:    d8 ed 69 05       	h[r6+r5<<1] = r0			  ## specrec.c:84:31
    dd42:    d8 ed 78 05       	r0 = h[r7+r5<<1] (u)			  ## specrec.c:85:25
    dd46:    d8 ed 49 05       	h[r4+r5<<1] = r0			  ## specrec.c:85:23
    dd4a:    c5 21             	r5 += 0x1			  ## specrec.c:82:34
    dd4c:    85 e8 f1 31       	if (r3 != r5) goto -0x1e <ics_info+0xB6 : dd32 >
    dd50:    d0 ec 80 00       	r0 = [r8+0x0]			  ## specrec.c:87:8
    dd54:    50 ed fe 10       	r1 = h[r15+0xe] (u)			  ## specrec.c:87:53
    dd58:    d8 ed 09 13       	h[r0+r3<<1] = r1			  ## specrec.c:87:41
    dd5c:    50 ed fe 00       	r0 = h[r15+0xe] (u)			  ## specrec.c:88:45
    dd60:    d8 ed 49 03       	h[r4+r3<<1] = r0			  ## specrec.c:88:33
    dd64:    50 ed fe 00       	r0 = h[r15+0xe] (u)			  ## specrec.c:89:35
    dd68:    50 ed c1 00       	h[r12+0x0] = r0			  ## specrec.c:89:23
    dd6c:    44 95             	goto 0x12a <ics_info+0x21C : de98 >			  ## specrec.c:89:23
    dd6e:    40 28             	r0 = 0x8
    dd70:    52 ee b6 00       	b[r11+0x6] = r0			  ## specrec.c:93:20
    dd74:    c0 ff 5c c8 01 00 	r0 = 0x1c85c <num_swb_128_window : 1c85c >			  ## specrec.c:96:18
    dd7a:    d8 ee 10 30       	r3 = b[r1+r0] (u)			  ## specrec.c:96:18
    dd7e:    40 21             	r0 = 0x1			  ## specrec.c:96:18
    dd80:    52 ee b8 00       	b[r11+0x8] = r0			  ## specrec.c:94:26
    dd84:    52 ee bf 00       	b[r11+0xf] = r0			  ## specrec.c:95:56
    dd88:    52 ee b5 30       	b[r11+0x5] = r3			  ## specrec.c:96:16
    dd8c:    50 ee b4 00       	r0 = b[r11+0x4] (u)			  ## specrec.c:98:12
    dd90:    03 ec 7d 01       	if (r0 > r3) goto -0x106 <ics_info+0x12 : dc8e >			  ## specrec.c:98:12
    dd94:    00 f1 04 b0       	r0 = r11 + 0x4  #			  ## specrec.c:98:12
    dd98:    80 21             		 [sp+4] = r0			  ## specrec.c:98:12
    dd9a:    04 f1 04 c0       	r4 = r12 + 0x4  #			  ## specrec.c:58:10
    dd9e:    80 20             		 [sp] = r0			  ## specrec.c:58:10
    dda0:    45 20             	r5 = 0x0			  ## specrec.c:58:10
    dda2:    cd ff d4 cb 01 00 	r13 = 0x1cbd4 <swb_offset_128_window : 1cbd4 >			  ## specrec.c:58:10
    dda8:    04 87             	goto 0xe <ics_info+0x13C : ddb8 >			  ## specrec.c:58:10
    ddaa:    d8 ec da 01       	r0 = [r13+r1<<2]			  ## specrec.c:104:25
    ddae:    d8 ed 08 05       	r0 = h[r0+r5<<1] (u)			  ## specrec.c:104:25
    ddb2:    d8 ed 49 05       	h[r4+r5<<1] = r0			  ## specrec.c:104:23
    ddb6:    c5 21             	r5 += 0x1			  ## specrec.c:103:34
    ddb8:    85 e8 f7 31       	if (r3 != r5) goto -0x12 <ics_info+0x12E : ddaa >
    ddbc:    50 ed fe 00       	r0 = h[r15+0xe] (u)			  ## specrec.c:105:45
    ddc0:    80 a3             	r0 = r0 >> 0x3			  ## specrec.c:105:57
    ddc2:    d8 ed 49 03       	h[r4+r3<<1] = r0			  ## specrec.c:105:33
    ddc6:    50 ed fe 00       	r0 = h[r15+0xe] (u)			  ## specrec.c:106:35
    ddca:    80 a3             	r0 = r0 >> 0x3			  ## specrec.c:106:47
    ddcc:    50 ed c1 00       	h[r12+0x0] = r0			  ## specrec.c:106:23
    ddd0:    47 21             	r7 = 0x1
    ddd2:    45 26             	r5 = 0x6
    ddd4:    44 21             	r4 = 0x1
    ddd6:    04 92             	goto 0x24 <ics_info+0x180 : ddfc >
    ddd8:    50 ee ba 60       	r6 = b[r11+0xa] (u)			  ## specrec.c:109:8
    dddc:    94 e1 62 65       	r6 = r6 & (1 << r5)			  ## specrec.c:109:8
    dde0:    06 46             	if (r6 == 0) goto 0xc <ics_info+0x172 : ddee >			  ## specrec.c:109:8
    dde2:    46 17             	r6 = r4.b0 (u)			  ## specrec.c:115:30
    dde4:    b6 18             	r6 += r11			  ## specrec.c:115:5
    dde6:    68 4e             	r0 = b[r6+0xe] (u)			  ## specrec.c:115:58
    dde8:    c0 21             	r0 += 0x1			  ## specrec.c:115:58
    ddea:    e8 4e             	b[r6+0xe] = r0			  ## specrec.c:115:58
    ddec:    04 86             	goto 0xc <ics_info+0x17E : ddfa >			  ## specrec.c:115:58
    ddee:    c4 21             	r4 += 0x1			  ## specrec.c:111:28
    ddf0:    52 ee b8 40       	b[r11+0x8] = r4			  ## specrec.c:111:28
    ddf4:    46 17             	r6 = r4.b0 (u)			  ## specrec.c:112:30
    ddf6:    b6 18             	r6 += r11			  ## specrec.c:112:5
    ddf8:    ef 4e             	b[r6+0xe] = r7			  ## specrec.c:112:58
    ddfa:    fd 3f             	r5 += -0x1			  ## specrec.c:108:3
    ddfc:    f5 f8 ec ff       	if (r5 != -0x1) goto -0x28 <ics_info+0x15C : ddd8 >			  ## specrec.c:108:3
    de00:    d4 e9 09 e0       	[sp+8] = r14
    de04:    d4 e9 0d a0       	[sp+12] = r10
    de08:    30 e1 ff 3f       	r0 = r3 + -0x1			  ## specrec.c:58:13
    de0c:    44 17             	r4 = r4.b0 (u)			  ## specrec.c:58:13
    de0e:    c6 d4             	r14 = 0  #			  ## specrec.c:58:13
    de10:    84 25             		 [sp+20] = r4			  ## specrec.c:58:13
    de12:    c4 14             	r12 = 0			  ## specrec.c:58:13
    de14:    d4 e9 11 b0       	[sp+16] = r11			  ## specrec.c:58:13
    de18:    14 95             	goto 0x6a <ics_info+0x208 : de84 >			  ## specrec.c:58:13
    de1a:    b4 e0 b0 4c       	r4 = r11 + r12
    de1e:    c1 14             	r9 = 0
    de20:    d4 e9 19 e0       	[sp+24] = r14
    de24:    46 20             	r6 = 0x0
    de26:    04 9d             	goto 0x3a <ics_info+0x1E6 : de62 >
    de28:    10 e8 00 b9       	if (r0 == r9) {
    de2c:    50 ed fe 50       		r5 = h[r15+0xe] (u)			  ## specrec.c:130:25
    de30:    d8 ec da a1       		r10 = [r13+r1<<2]			  ## specrec.c:130:44
    de34:    c0 e1 53 b8       		r11 = r5 >> 0x3
                               	} else {			  ## specrec.c:130:37
    de38:    d8 ec da a1       		r10 = [r13+r1<<2]			  ## specrec.c:133:14
    de3c:    05 e1 02 a0       		r5 = r10 + 0x2			  ## specrec.c:133:14
    de40:    d8 ed 58 b9       		r11 = h[r5+r9<<1] (u)
                               	}			  ## specrec.c:133:14
    de44:    d0 ec 80 50       	r5 = [r8+0x0]			  ## specrec.c:137:10
    de48:    d8 ed a8 79       	r7 = h[r10+r9<<1] (u)			  ## specrec.c:137:10
    de4c:    4a 4f             	r2 = b[r4+0xf] (u)			  ## specrec.c:136:14
    de4e:    d8 ed 51 6e       	h[r5+r14] = r6			  ## specrec.c:137:41
    de52:    b4 e0 b2 57       	r5 = r11 - r7			  ## specrec.c:137:41
    de56:    52 1b             	r2 *= r5			  ## specrec.c:136:11
    de58:    26 18             	r6 += r2			  ## specrec.c:138:12
    de5a:    0e e1 02 e0       	r14 = r14 + 0x2			  ## specrec.c:126:4
    de5e:    09 e1 01 90       	r9 = r9 + 0x1			  ## specrec.c:126:35
    de62:    89 e8 e1 31       	if (r3 != r9) goto -0x3e <ics_info+0x1AC : de28 >
    de66:    d0 ec 80 20       	r2 = [r8+0x0]			  ## specrec.c:140:9
    de6a:    c0 e1 c5 40       	r4 = r12 << 0x5			  ## specrec.c:140:4
    de6e:    42 18             	r2 += r4			  ## specrec.c:140:4
    de70:    d8 ed 29 63       	h[r2+r3<<1] = r6			  ## specrec.c:140:38
    de74:    d4 e9 18 e0       	r14 = [sp+24]			  ## specrec.c:140:38
    de78:    0e e1 20 e0       	r14 = r14 + 0x20			  ## specrec.c:120:3
    de7c:    0c e1 01 c0       	r12 = r12 + 0x1			  ## specrec.c:120:44
    de80:    d4 e9 10 b0       	r11 = [sp+16]			  ## specrec.c:120:44
    de84:    04 25             	r4 = [sp+20]
    de86:    84 e8 c8 c1       	if (r12 != r4) goto -0x70 <ics_info+0x19E : de1a >
    de8a:    d4 e9 00 b0       	r11 = [sp]			  ## syntax.c:549:11
    de8e:    d4 e9 0c a0       	r10 = [sp+12]			  ## syntax.c:549:11
    de92:    d4 e9 08 e0       	r14 = [sp+8]			  ## syntax.c:549:11
    de96:    02 21             	r2 = [sp+4]			  ## syntax.c:549:11
    de98:    47 30             	r7 = 0x10
    de9a:    48 ff 00 23 f7 fe 	if (r2 > r3) goto -0x212 <ics_info+0x12 : dc8e >
    dea0:    47 20             	r7 = 0x0
    dea2:    00 ff 02 e0 f3 fe 	if (r14 == 0x2) goto -0x21a <ics_info+0x12 : dc8e >
    dea8:    a0 16             	r0 = r10			  ## syntax.c:555:33
    deaa:    bf ea 97 fe       	call -0x2d2 <faad_get1bit : dbdc >			  ## syntax.c:555:33
    deae:    60 ff 01 00 ed fe 	if ((r0 & 0x1) == 0) goto -0x226 <ics_info+0x12 : dc8e >			  ## syntax.c:555:33
    deb4:    50 ee f2 00       	r0 = b[r15+0x2] (u)			  ## syntax.c:557:18
    deb8:    01 ff 01 00 e8 fe 	if (r0 != 0x1) goto -0x230 <ics_info+0x12 : dc8e >			  ## syntax.c:557:18
    debe:    50 ee f1 10       	r1 = b[r15+0x1] (u)			  ## syntax.c:561:21
    dec2:    50 ee b0 40       	r4 = b[r11+0x0] (u)			  ## syntax.c:561:21
    dec6:    40 20             	r0 = 0x0			  ## syntax.c:561:21
    dec8:    b1 ec 0b 40       	if (r1 <= 0xb) {			  ## syntax.c:561:21
    decc:    c0 ff 54 d1 01 00 		r0 = 0x1d154 <pred_sfb_max : 1d154 >			  ## syntax.c:515:10
    ded2:    d8 ee 10 00       		r0 = b[r1+r0] (u)
                               	}			  ## syntax.c:515:10
    ded6:    14 e9 00 00       	if (r4 >= r0) {			  ## syntax.c:515:10
    deda:    04 16             		r4 = r0
                               	}			  ## syntax.c:561:21
    dedc:    a0 16             	r0 = r10			  ## syntax.c:563:10
    dede:    bf ea 7d fe       	call -0x306 <faad_get1bit : dbdc >			  ## syntax.c:563:10
    dee2:    30 ea 01 80       	if ((r0 & 0x1) != 0) {			  ## syntax.c:563:10
    dee6:    41 25             		r1 = 0x5			  ## syntax.c:566:28
    dee8:    a0 16             		r0 = r10			  ## syntax.c:566:28
    deea:    bf ea 4d fe       		call -0x366
                               	} <faad_getbits : db88 >			  ## syntax.c:566:28
    deee:    44 17             	r4 = r4.b0 (u)			  ## syntax.c:566:28
    def0:    45 20             	r5 = 0x0			  ## syntax.c:566:28
    def2:    04 84             	goto 0x8 <ics_info+0x280 : defc >			  ## syntax.c:566:28
    def4:    a0 16             	r0 = r10			  ## syntax.c:572:6
    def6:    bf ea 71 fe       	call -0x31e <faad_get1bit : dbdc >			  ## syntax.c:572:6
    defa:    c5 21             	r5 += 0x1			  ## syntax.c:569:35
    defc:    50 17             	r0 = r5.b0 (u)			  ## syntax.c:569:23
    defe:    84 e9 f9 01       	if (r0 < r4) goto -0xe <ics_info+0x278 : def4 >			  ## syntax.c:569:23
    df02:    67 85             	goto -0x276 <ics_info+0x12 : dc8e >			  ## syntax.c:569:23


huffman_scale_factor:
    df04:    78 04             	[--sp] = {rets, r8-r4}			  ## huffman.c:59:0
    df06:    48 f0 01 00       	r8 = 0x1  # <mem_code_size : 0 >			  ## huffman.c:59:0
    df0a:    02 62             		 r2 = [r0+0x8] 			  ## huffman.c:59:0
    df0c:    41 20             	r1 = 0x0			  ## huffman.c:59:0
    df0e:    c4 ff 34 c6 01 00 	r4 = 0x1c634 <Huffmancb_SCL : 1c634 >			  ## huffman.c:59:0
    df14:    04 91             	goto 0x22 <huffman_scale_factor+0x34 : df38 >			  ## huffman.c:59:0
    df16:    82 f9 02 06       	if (r2 < 0x3) goto 0x4 <huffman_scale_factor+0x1A : df1e >			  ## bits.c:83:7
    df1a:    fa 3e             	r2 += -0x2			  ## bits.c:85:18
    df1c:    04 8b             	goto 0x16 <huffman_scale_factor+0x30 : df34 >			  ## bits.c:85:18
    df1e:    02 61             	r2 = [r0+0x4] 			  ## bits.c:89:19
    df20:    82 60             	[r0+0x0] = r2			  ## bits.c:89:13
    df22:    02 64             	r2 = [r0+0x10] 			  ## bits.c:90:23
    df24:    23 60             	r3 = [r2+0x0] 			  ## bits.c:49:3
    df26:    70 e0 00 33       	r3 = rev8(r3)			  ## bits.c:49:3
    df2a:    83 61             	[r0+0x4] = r3			  ## bits.c:91:13
    df2c:    c4 eb 04 00       	[r0+0x10] += 0x4			  ## bits.c:92:12
    df30:    02 62             	r2 = [r0+0x8] 			  ## bits.c:93:18
    df32:    c2 3e             	r2 += 0x1e			  ## bits.c:93:18
    df34:    82 62             	[r0+0x8] = r2			  ## bits.c:85:18
    df36:    91 a2             	r1 = r1 >> 0x2			  ## huffman.c:73:16
    df38:    05 60             	r5 = [r0+0x0] 			  ## bits.c:73:16
    df3a:    02 f9 0e 04       	if (r2 >= 0x2) goto 0x1c <huffman_scale_factor+0x56 : df5a >			  ## bits.c:73:16
    df3e:    a7 f0 02 20       	r7 = 0x2 - r2  #			  ## bits.c:72:8
    df42:    06 61             		 r6 = [r0+0x4] 			  ## bits.c:73:67
    df44:    a3 e0 20 70       	r3 = 0x20 - r7			  ## bits.c:73:79
    df48:    c8 e1 62 33       	r3 = r6 >> r3			  ## bits.c:73:72
    df4c:    c8 e1 80 62       	r6 = r8 << r2			  ## bits.c:73:27
    df50:    fe 3f             	r6 += -0x1			  ## bits.c:73:45
    df52:    e5 19             	r5 &= r6			  ## bits.c:73:21
    df54:    75 1a             	r5 <<= r7			  ## bits.c:73:51
    df56:    35 19             	r5 |= r3			  ## bits.c:73:60
    df58:    04 84             	goto 0x8 <huffman_scale_factor+0x5E : df62 >			  ## bits.c:73:60
    df5a:    a6 e0 20 20       	r6 = 0x20 - r2			  ## bits.c:69:28
    df5e:    65 1a             	r5 <<= r6			  ## bits.c:69:21
    df60:    d5 be             	r5 = r5 >> 0x1e			  ## bits.c:69:46
    df62:    11 a3             	r1 = r1 << 0x3			  ## huffman.c:68:9
    df64:    41 18             	r1 += r4			  ## huffman.c:68:9
    df66:    d8 ed 18 15       	r1 = h[r1+r5<<1] (u)			  ## huffman.c:68:9
    df6a:    51 e8 d4 01       	if ((r1 & 0x1) == 0) goto -0x58 <huffman_scale_factor+0x12 : df16 >
    df6e:    51 e8 04 0a       	if ((r1 & 0x2) != 0) goto 0x8 <huffman_scale_factor+0x76 : df7a >
    df72:    82 f9 06 06       	if (r2 < 0x3) goto 0xc <huffman_scale_factor+0x7E : df82 >			  ## bits.c:83:7
    df76:    fa 3e             	r2 += -0x2			  ## bits.c:85:18
    df78:    04 9b             	goto 0x36 <huffman_scale_factor+0xAC : dfb0 >			  ## bits.c:85:18
    df7a:    82 f9 0e 04       	if (r2 < 0x2) goto 0x1c <huffman_scale_factor+0x96 : df9a >			  ## bits.c:83:7
    df7e:    fa 3f             	r2 += -0x1			  ## bits.c:85:18
    df80:    04 97             	goto 0x2e <huffman_scale_factor+0xAC : dfb0 >			  ## bits.c:85:18
    df82:    02 61             	r2 = [r0+0x4] 			  ## bits.c:89:19
    df84:    82 60             	[r0+0x0] = r2			  ## bits.c:89:13
    df86:    02 64             	r2 = [r0+0x10] 			  ## bits.c:90:23
    df88:    23 60             	r3 = [r2+0x0] 			  ## bits.c:49:3
    df8a:    70 e0 00 33       	r3 = rev8(r3)			  ## bits.c:49:3
    df8e:    83 61             	[r0+0x4] = r3			  ## bits.c:91:13
    df90:    c4 eb 04 00       	[r0+0x10] += 0x4			  ## bits.c:92:12
    df94:    02 62             	r2 = [r0+0x8] 			  ## bits.c:93:18
    df96:    c2 3e             	r2 += 0x1e			  ## bits.c:93:18
    df98:    04 8b             	goto 0x16 <huffman_scale_factor+0xAC : dfb0 >			  ## bits.c:93:18
    df9a:    02 61             	r2 = [r0+0x4] 			  ## bits.c:89:19
    df9c:    82 60             	[r0+0x0] = r2			  ## bits.c:89:13
    df9e:    02 64             	r2 = [r0+0x10] 			  ## bits.c:90:23
    dfa0:    23 60             	r3 = [r2+0x0] 			  ## bits.c:49:3
    dfa2:    70 e0 00 33       	r3 = rev8(r3)			  ## bits.c:49:3
    dfa6:    83 61             	[r0+0x4] = r3			  ## bits.c:91:13
    dfa8:    c4 eb 04 00       	[r0+0x10] += 0x4			  ## bits.c:92:12
    dfac:    02 62             	r2 = [r0+0x8] 			  ## bits.c:93:18
    dfae:    c2 3f             	r2 += 0x1f			  ## bits.c:93:18
    dfb0:    91 a2             	r1 = r1 >> 0x2			  ## huffman.c:94:9
    dfb2:    19 d7             	r1 = r1.b0 (s)  #			  ## huffman.c:94:2
    dfb4:    82 62             		 [r0+0x8] = r2			  ## bits.c:85:18
    dfb6:    10 16             	r0 = r1			  ## huffman.c:94:2
    dfb8:    58 04             	{pc, r8-r4} = [sp++]			  ## huffman.c:94:2


tns_data:
    dfba:    7f 04             	[--sp] = {rets, r15-r4}			  ## syntax.c:972:0
    dfbc:    e2 9d             	sp += -0xc			  ## syntax.c:972:0
    dfbe:    d0 ee 06 30       	r3 = b[r0++=0x6] (u)			  ## syntax.c:980:11
    dfc2:    25 d6             	r5 = r2  #
    dfc4:    80 21             		 [sp+4] = r0
    dfc6:    1f 16             	r15 = r1
    dfc8:    33 e8 02 b0       	if (r3 == 0x2) {
    dfcc:    4a e0 03 00       		r10 = 0x3 <mem_code_size+0x2 : 2 >
    dfd0:    4d e0 04 00       		r13 = 0x4 <WOLAAnalysisFilter_Float_M64_m4_r1 : 4 >
    dfd4:    40 21             		r0 = 0x1
                               	} else {
    dfd6:    4a e0 05 00       		r10 = 0x5 <WOLAAnalysisFilter_Float_M64_m4_r1 : 4 >
    dfda:    4d e0 06 00       		r13 = 0x6 <WOLAAnalysisFilter_Float_M64_m4_r1+0x2 : 6 >
    dfde:    40 22             		r0 = 0x2
                               	}
    dfe0:    80 20             	[sp] = r0
    dfe2:    41 20             	r1 = 0x0
    dfe4:    24 97             	goto 0xae <tns_data+0xDA : e094 >
    dfe6:    50 d6             	r0 = r5  #			  ## syntax.c:989:29
    dfe8:    81 22             		 [sp+8] = r1			  ## syntax.c:989:29
    dfea:    01 20             	r1 = [sp]			  ## syntax.c:989:29
    dfec:    bf ea cc fd       	call -0x468 <faad_getbits : db88 >			  ## syntax.c:989:29
    dff0:    d8 ee f1 04       	b[r15+r4] = r0			  ## syntax.c:989:18
    dff4:    60 ff ff 00 0a 00 	if ((r0 & 0xFF) == 0) goto 0x14 <tns_data+0x54 : e00e >			  ## syntax.c:989:18
    dffa:    b4 e0 f0 64       	r6 = r15 + r4			  ## syntax.c:993:9
    dffe:    50 16             	r0 = r5			  ## syntax.c:993:28
    e000:    bf ea ec fd       	call -0x428 <faad_get1bit : dbdc >			  ## syntax.c:993:28
    e004:    70 f1 fe 00       	r0 = r0 & 0xFFFFFF01  #			  ## syntax.c:993:46
    e008:    e8 48             		 b[r6+0x8] = r0			  ## syntax.c:993:26
    e00a:    0c e1 03 00       	r12 = r0 + 0x3			  ## syntax.c:993:26
    e00e:    c6 14             	r14 = 0
    e010:    14 99             	goto 0x72 <tns_data+0xCA : e084 >
    e012:    50 16             	r0 = r5			  ## syntax.c:1004:36
    e014:    d1 16             	r1 = r13			  ## syntax.c:1004:36
    e016:    bf ea b7 fd       	call -0x492 <faad_getbits : db88 >			  ## syntax.c:1004:36
    e01a:    41 a2             	r1 = r4 << 0x2			  ## syntax.c:1004:4
    e01c:    f1 18             	r1 += r15			  ## syntax.c:1004:4
    e01e:    97 1d             	r7 = r1 + r6			  ## syntax.c:1004:4
    e020:    52 ee 70 01       	b[r7+0x10] = r0			  ## syntax.c:1004:25
    e024:    50 16             	r0 = r5			  ## syntax.c:1005:35
    e026:    a1 16             	r1 = r10			  ## syntax.c:1005:35
    e028:    bf ea ae fd       	call -0x4a4 <faad_getbits : db88 >			  ## syntax.c:1005:35
    e02c:    79 16             	r9 = r7			  ## syntax.c:1005:24
    e02e:    5a ee 90 03       	b[++r9=0x30] = r0			  ## syntax.c:1005:24
    e032:    60 ff ff 00 24 00 	if ((r0 & 0xFF) == 0) goto 0x48 <tns_data+0xC6 : e080 >			  ## syntax.c:1005:24
    e038:    50 16             	r0 = r5			  ## syntax.c:1008:31
    e03a:    bf ea cf fd       	call -0x462 <faad_get1bit : dbdc >			  ## syntax.c:1008:31
    e03e:    52 ee 70 05       	b[r7+0x50] = r0			  ## syntax.c:1008:29
    e042:    50 16             	r0 = r5			  ## syntax.c:1009:35
    e044:    bf ea ca fd       	call -0x46c <faad_get1bit : dbdc >			  ## syntax.c:1009:35
    e048:    52 ee 70 07       	b[r7+0x70] = r0			  ## syntax.c:1009:33
    e04c:    b4 e0 c2 00       	r0 = r12 - r0			  ## syntax.c:1010:33
    e050:    07 17             	r7 = r0.b0 (u)
    e052:    c0 14             	r8 = 0
    e054:    04 8f             	goto 0x1e <tns_data+0xBA : e074 >
    e056:    50 16             	r0 = r5			  ## syntax.c:1017:39
    e058:    71 16             	r1 = r7			  ## syntax.c:1017:39
    e05a:    bf ea 95 fd       	call -0x4d6 <faad_getbits : db88 >			  ## syntax.c:1017:39
    e05e:    e1 e1 30 40       	r1 = r4 * 0x30			  ## syntax.c:1017:6
    e062:    f1 18             	r1 += r15			  ## syntax.c:1017:6
    e064:    e2 e1 0c 60       	r2 = r6 * 0xC			  ## syntax.c:1017:6
    e068:    21 18             	r1 += r2			  ## syntax.c:1017:6
    e06a:    b1 18             	r1 += r11			  ## syntax.c:1017:6
    e06c:    52 ee 10 09       	b[r1+0x90] = r0			  ## syntax.c:1017:28
    e070:    08 e1 01 80       	r8 = r8 + 0x1			  ## syntax.c:1015:43
    e074:    50 ee 90 00       	r0 = b[r9+0x0] (u)			  ## syntax.c:1015:21
    e078:    bb e1 20 80       	r11 = uextra(r8, p:0x0, l:0x8)			  ## syntax.c:1015:19
    e07c:    80 e9 eb b1       	if (r11 < r0) goto -0x2a <tns_data+0x9C : e056 >			  ## syntax.c:1015:19
    e080:    0e e1 01 e0       	r14 = r14 + 0x1			  ## syntax.c:1002:45
    e084:    d8 ee f0 04       	r0 = b[r15+r4] (u)			  ## syntax.c:1002:25
    e088:    b6 e1 20 e0       	r6 = uextra(r14, p:0x0, l:0x8)			  ## syntax.c:1002:18
    e08c:    80 e9 c1 61       	if (r6 < r0) goto -0x7e <tns_data+0x58 : e012 >			  ## syntax.c:1002:18
    e090:    01 22             	r1 = [sp+8]
    e092:    c1 21             	r1 += 0x1			  ## syntax.c:987:37
    e094:    14 d7             	r4 = r1.b0 (u)  #			  ## syntax.c:987:14
    e096:    00 21             		 r0 = [sp+4]			  ## syntax.c:987:23
    e098:    08 40             	r0 = b[r0+0x0] (u)			  ## syntax.c:987:23
    e09a:    80 e9 a4 41       	if (r4 < r0) goto -0xb8 <tns_data+0x2C : dfe6 >			  ## syntax.c:987:23
    e09e:    02 83             	sp += 0xc
    e0a0:    5f 04             	{pc, r15-r4} = [sp++]			  ## syntax.c:1022:1


individual_channel_stream:
    e0a2:    7f 04             	[--sp] = {rets, r15-r4}			  ## syntax.c:710:0
    e0a4:    e2 8c             	sp += -0x50			  ## syntax.c:710:0
    e0a6:    23 d6             	r3 = r2  #			  ## syntax.c:710:0
    e0a8:    83 32             		 [sp+72] = r3			  ## syntax.c:710:0
    e0aa:    18 d6             	r8 = r1  #			  ## syntax.c:710:0
    e0ac:    83 33             		 [sp+76] = r3			  ## syntax.c:710:0
    e0ae:    04 16             	r4 = r0			  ## syntax.c:710:0
    e0b0:    41 20             	r1 = 0x0			  ## syntax.c:716:2
    e0b2:    42 e0 00 08       	r2 = 0x800 <stack_bss_size : 800 >			  ## syntax.c:716:2
    e0b6:    30 16             	r0 = r3			  ## syntax.c:716:2
    e0b8:    80 ff 68 61 ff ff 	call -0x9e98 <memset : 4226 >			  ## syntax.c:716:2
    e0be:    10 e1 00 46       	r0 = r4 + 0x1600
    e0c2:    0f f1 c8 00       	r15 = r0 + 0xc8  #			  ## syntax.c:712:25
    e0c6:    80 30             		 [sp+64] = r0			  ## syntax.c:712:25
    e0c8:    41 28             	r1 = 0x8			  ## syntax.c:662:30
    e0ca:    f0 16             	r0 = r15			  ## syntax.c:662:30
    e0cc:    bf ea 5c fd       	call -0x548 <faad_getbits : db88 >			  ## syntax.c:662:30
    e0d0:    52 ee 8b 00       	b[r8+0xb] = r0			  ## syntax.c:662:19
    e0d4:    40 f0 e5 16       	r0 = 0x16e5  # <WOLASynthesisFilter_Float_M128_m4_r1+0x6E0 : 16e4 >			  ## syntax.c:664:12
    e0d8:    84 2e             		 [sp+56] = r4			  ## syntax.c:664:12
    e0da:    d8 ee 40 00       	r0 = b[r4+r0] (u)			  ## syntax.c:664:12
    e0de:    00 f8 86 00       	if (r0 == 0x0) goto 0x10c <individual_channel_stream+0x14C : e1ee >			  ## syntax.c:664:12
    e0e2:    50 ee 80 00       	r0 = b[r8+0x0] (u)			  ## syntax.c:802:11
    e0e6:    44 23             	r4 = 0x3			  ## syntax.c:803:3
    e0e8:    b0 e8 02 00       	if (r0 != 0x2) {			  ## syntax.c:803:3
    e0ec:    44 25             		r4 = 0x5
                               	}			  ## syntax.c:803:3
    e0ee:    40 21             	r0 = 0x1			  ## syntax.c:806:20
    e0f0:    40 1a             	r0 <<= r4			  ## syntax.c:806:20
    e0f2:    00 e1 ff 00       	r0 = r0 + 0xff			  ## syntax.c:806:34
    e0f6:    07 17             	r7 = r0.b0 (u)			  ## syntax.c:806:34
    e0f8:    00 e1 f8 81       	r0 = r8 + 0x1f8			  ## syntax.c:806:34
    e0fc:    80 2f             	[sp+60] = r0
    e0fe:    41 20             	r1 = 0x0
    e100:    50 ee 88 00       	r0 = b[r8+0x8] (u)			  ## syntax.c:810:23
    e104:    b9 e1 20 10       	r9 = uextra(r1, p:0x0, l:0x8)			  ## syntax.c:810:14
    e108:    05 e1 64 82       	r5 = r8 + 0x264			  ## syntax.c:810:14
    e10c:    00 e9 78 90       	if (r9 >= r0) goto 0xf0 <individual_channel_stream+0x15E : e200 >			  ## syntax.c:810:2
    e110:    c6 d4             	r14 = 0  #
    e112:    81 31             		 [sp+68] = r1
    e114:    46 20             	r6 = 0x0
    e116:    24 9a             	goto 0xb4 <individual_channel_stream+0x12A : e1cc >
    e118:    41 24             	r1 = 0x4			  ## syntax.c:827:34
    e11a:    f0 16             	r0 = r15			  ## syntax.c:827:34
    e11c:    bf ea 34 fd       	call -0x598 <faad_getbits : db88 >			  ## syntax.c:827:34
    e120:    ea f1 0f 90       	r10 = r9 * 0xF  #			  ## syntax.c:827:4
    e124:    51 63             		 r1 = [r5+0xc] 			  ## syntax.c:827:9
    e126:    a1 18             	r1 += r10			  ## syntax.c:827:4
    e128:    bd e1 20 e0       	r13 = uextra(r14, p:0x0, l:0x8)			  ## syntax.c:827:4
    e12c:    d8 ee 11 0d       	b[r1+r13] = r0			  ## syntax.c:827:23
    e130:    50 63             	r0 = [r5+0xc] 			  ## syntax.c:830:13
    e132:    b4 e0 00 1a       	r1 = r0 + r10			  ## syntax.c:830:8
    e136:    dc ee 10 0d       	r0 = b[++r1=r13] (u)			  ## syntax.c:830:8
    e13a:    00 f8 03 1a       	if (r0 == 0xd) goto 0x6 <individual_channel_stream+0xA2 : e144 >			  ## syntax.c:830:8
    e13e:    80 f8 05 18       	if (r0 != 0xc) goto 0xa <individual_channel_stream+0xAA : e14c >
    e142:    24 93             	goto 0xa6 <individual_channel_stream+0x148 : e1ea >
    e144:    40 21             	r0 = 0x1			  ## syntax.c:834:21
    e146:    52 ee 8c 00       	b[r8+0xc] = r0			  ## syntax.c:834:21
    e14a:    18 40             	r0 = b[r1+0x0] (u)			  ## syntax.c:834:21
    e14c:    b8 20             	r0 &= 0xfffffffe			  ## syntax.c:836:45
    e14e:    30 e8 0e 40       	if (r0 == 0xe) {			  ## syntax.c:836:45
    e152:    40 21             		r0 = 0x1			  ## syntax.c:837:18
    e154:    52 ee 8d 00       		b[r8+0xd] = r0
                               	}			  ## syntax.c:837:18
    e158:    c3 14             	r11 = 0			  ## syntax.c:837:18
    e15a:    04 84             	goto 0x8 <individual_channel_stream+0xC2 : e164 >			  ## syntax.c:837:18
    e15c:    b0 e1 40 b0       	r0 = uextra(r11, p:0x0, l:0x10)
    e160:    b4 e0 00 b7       	r11 = r0 + r7
    e164:    f0 16             	r0 = r15			  ## syntax.c:844:30
    e166:    41 16             	r1 = r4			  ## syntax.c:844:30
    e168:    bf ea 0e fd       	call -0x5e4 <faad_getbits : db88 >			  ## syntax.c:844:30
    e16c:    00 17             	r0 = r0.b0 (u)			  ## syntax.c:841:11
    e16e:    07 e8 f5 01       	if (r0 == r7) goto -0x16 <individual_channel_stream+0xBA : e15c >			  ## syntax.c:841:11
    e172:    50 ee 80 20       	r2 = b[r8+0x0] (u)			  ## syntax.c:849:13
    e176:    b0 18             	r0 += r11			  ## syntax.c:849:13
    e178:    80 17             	r0 = r0.l (u)			  ## syntax.c:849:13
    e17a:    b4 e0 00 1c       	r1 = r0 + r12			  ## syntax.c:849:13
    e17e:    40 2f             	r0 = 0xf			  ## syntax.c:849:13
    e180:    82 f8 05 04       	if (r2 != 0x2) goto 0xa <individual_channel_stream+0xEC : e18e >			  ## syntax.c:849:8
    e184:    0d fc 3a 1c       	if (r13 > 0xe) goto 0x74 <individual_channel_stream+0x15A : e1fc >
    e188:    81 fc 05 1e       	if (r1 <= 0xf) goto 0xa <individual_channel_stream+0xF4 : e196 >
    e18c:    14 97             	goto 0x6e <individual_channel_stream+0x15A : e1fc >
    e18e:    0d fc 35 64       	if (r13 > 0x32) goto 0x6a <individual_channel_stream+0x15A : e1fc >
    e192:    01 fc 33 66       	if (r1 > 0x33) goto 0x66 <individual_channel_stream+0x15A : e1fc >
    e196:    e2 f1 1e 90       	r2 = r9 * 0x1E  #			  ## syntax.c:863:4
    e19a:    50 65             		 r0 = [r5+0x14] 			  ## syntax.c:863:9
    e19c:    20 18             	r0 += r2			  ## syntax.c:863:4
    e19e:    d8 ed 09 cd       	h[r0+r13<<1] = r12			  ## syntax.c:863:26
    e1a2:    50 66             	r0 = [r5+0x18] 			  ## syntax.c:864:9
    e1a4:    20 18             	r0 += r2			  ## syntax.c:864:4
    e1a6:    d8 ed 09 1d       	h[r0+r13<<1] = r1			  ## syntax.c:864:24
    e1aa:    04 8a             	goto 0x14 <individual_channel_stream+0x11E : e1c0 >			  ## syntax.c:864:24
    e1ac:    52 63             	r2 = [r5+0xc] 			  ## syntax.c:868:32
    e1ae:    a2 18             	r2 += r10			  ## syntax.c:868:27
    e1b0:    d8 ee 20 2d       	r2 = b[r2+r13] (u)			  ## syntax.c:868:27
    e1b4:    b4 e0 80 3a       	r3 = r8 + r10			  ## syntax.c:868:5
    e1b8:    30 18             	r0 += r3			  ## syntax.c:868:5
    e1ba:    52 ee 0f 28       	b[r0+0x8f] = r2			  ## syntax.c:868:25
    e1be:    c6 21             	r6 += 0x1			  ## syntax.c:866:41
    e1c0:    60 17             	r0 = r6.b0 (u)			  ## syntax.c:866:18
    e1c2:    81 e9 f3 01       	if (r0 < r1) goto -0x1a <individual_channel_stream+0x10A : e1ac >			  ## syntax.c:866:18
    e1c6:    0e e1 01 e0       	r14 = r14 + 0x1			  ## syntax.c:872:5
    e1ca:    16 16             	r6 = r1			  ## syntax.c:872:5
    e1cc:    50 ee 84 00       	r0 = b[r8+0x4] (u)			  ## syntax.c:815:19
    e1d0:    bc e1 20 60       	r12 = uextra(r6, p:0x0, l:0x8)			  ## syntax.c:815:10
    e1d4:    80 e9 a0 c1       	if (r12 < r0) goto -0xc0 <individual_channel_stream+0x76 : e118 >			  ## syntax.c:815:10
    e1d8:    50 62             	r0 = [r5+0x8] 			  ## syntax.c:874:8
    e1da:    d8 ee 01 e9       	b[r0+r9] = r14			  ## syntax.c:874:19
    e1de:    50 ee 84 00       	r0 = b[r8+0x4] (u)			  ## syntax.c:878:17
    e1e2:    01 31             	r1 = [sp+68]			  ## syntax.c:878:17
    e1e4:    c1 21             	r1 += 0x1			  ## syntax.c:810:43
    e1e6:    00 e8 8b c1       	if (r12 == r0) goto -0xea <individual_channel_stream+0x5E : e100 >			  ## syntax.c:810:43
    e1ea:    48 20             	r0 = 0x20
    e1ec:    04 87             	goto 0xe <individual_channel_stream+0x15A : e1fc >
    e1ee:    81 d6             	r1 = r8  #			  ## syntax.c:666:17
    e1f0:    00 30             		 r0 = [sp+64]			  ## syntax.c:666:17
    e1f2:    f2 16             	r2 = r15			  ## syntax.c:666:17
    e1f4:    bf ea 42 fd       	call -0x57c <ics_info : dc7c >			  ## syntax.c:666:17
    e1f8:    00 f8 73 01       	if (r0 == 0x0) goto -0x11a <individual_channel_stream+0x40 : e0e2 >
    e1fc:    02 94             	sp += 0x50
    e1fe:    5f 04             	{pc, r15-r4} = [sp++]			  ## syntax.c:793:1
    e200:    50 ee 8b 40       	r4 = b[r8+0xb] (u)			  ## syntax.c:903:30
    e204:    3d e1 a6 4f       	r13 = r4 + -0x5a			  ## syntax.c:905:42
    e208:    8a 14             	r11_r10 = 0			  ## syntax.c:905:42
    e20a:    47 21             	r7 = 0x1			  ## syntax.c:905:42
    e20c:    c4 14             	r12 = 0
    e20e:    24 93             	goto 0xa6 <individual_channel_stream+0x214 : e2b6 >
    e210:    c6 14             	r14 = 0
    e212:    24 87             	goto 0x8e <individual_channel_stream+0x200 : e2a2 >
    e214:    e0 e1 0f 90       	r0 = r9 * 0xF			  ## syntax.c:911:12
    e218:    80 18             	r0 += r8			  ## syntax.c:911:12
    e21a:    60 18             	r0 += r6			  ## syntax.c:911:12
    e21c:    50 ee 0f 08       	r0 = b[r0+0x8f] (u)			  ## syntax.c:911:12
    e220:    31 e1 f2 0f       	r1 = r0 + -0xe			  ## syntax.c:911:4
    e224:    81 f9 0e 04       	if (r1 < 0x2) goto 0x1c <individual_channel_stream+0x1A2 : e244 >			  ## syntax.c:911:4
    e228:    00 55             	if (r0 == 0) goto 0x2a <individual_channel_stream+0x1B2 : e254 >
    e22a:    80 f8 15 1a       	if (r0 != 0xd) goto 0x2a <individual_channel_stream+0x1B6 : e258 >
    e22e:    60 ff ff 70 24 00 	if ((r7 & 0xFF) == 0) goto 0x48 <individual_channel_stream+0x1DA : e27c >			  ## syntax.c:928:9
    e234:    41 29             	r1 = 0x9			  ## syntax.c:931:19
    e236:    f0 16             	r0 = r15			  ## syntax.c:931:19
    e238:    bf ea a6 fc       	call -0x6b4 <faad_getbits : db88 >			  ## syntax.c:931:19
    e23c:    88 17             	r0 = r0.l (s)			  ## syntax.c:931:10
    e23e:    30 e1 00 0f       	r0 = r0 + -0x100			  ## syntax.c:931:39
    e242:    14 80             	goto 0x40 <individual_channel_stream+0x1E2 : e284 >			  ## syntax.c:931:39
    e244:    f0 16             	r0 = r15			  ## syntax.c:921:9
    e246:    bf ea 5d fe       	call -0x346 <huffman_scale_factor : df04 >			  ## syntax.c:921:9
    e24a:    b0 18             	r0 += r11			  ## syntax.c:922:23
    e24c:    3b e1 c4 0f       	r11 = r0 + -0x3c			  ## syntax.c:922:17
    e250:    b0 16             	r0 = r11			  ## syntax.c:922:17
    e252:    04 9e             	goto 0x3c <individual_channel_stream+0x1EE : e290 >			  ## syntax.c:922:17
    e254:    40 20             	r0 = 0x0
    e256:    04 9c             	goto 0x38 <individual_channel_stream+0x1EE : e290 >
    e258:    e0 e1 1e 90       	r0 = r9 * 0x1E			  ## syntax.c:945:5
    e25c:    80 18             	r0 += r8			  ## syntax.c:945:5
    e25e:    00 e1 08 01       	r0 = r0 + 0x108			  ## syntax.c:945:5
    e262:    d8 ed 09 a6       	h[r0+r6<<1] = r10			  ## syntax.c:945:32
    e266:    f0 16             	r0 = r15			  ## syntax.c:948:9
    e268:    bf ea 4c fe       	call -0x368 <huffman_scale_factor : df04 >			  ## syntax.c:948:9
    e26c:    40 18             	r0 += r4			  ## syntax.c:949:24
    e26e:    34 e1 c4 0f       	r4 = r0 + -0x3c			  ## syntax.c:949:18
    e272:    c1 17             	r1 = r4.l (u)			  ## syntax.c:949:18
    e274:    40 16             	r0 = r4			  ## syntax.c:949:18
    e276:    91 fc 0b fe       	if (r1 <= 0xff) goto 0x16 <individual_channel_stream+0x1EE : e290 >			  ## syntax.c:949:18
    e27a:    34 95             	goto 0xea <individual_channel_stream+0x2C4 : e366 >			  ## syntax.c:949:18
    e27c:    f0 16             	r0 = r15			  ## syntax.c:934:10
    e27e:    bf ea 41 fe       	call -0x37e <huffman_scale_factor : df04 >			  ## syntax.c:934:10
    e282:    f0 24             	r0 += -0x3c			  ## syntax.c:935:8
    e284:    b1 e1 40 d0       	r1 = uextra(r13, p:0x0, l:0x10)			  ## syntax.c:937:18
    e288:    b4 e0 00 d1       	r13 = r0 + r1			  ## syntax.c:937:18
    e28c:    47 20             	r7 = 0x0			  ## syntax.c:937:18
    e28e:    d0 16             	r0 = r13			  ## syntax.c:937:18
    e290:    e1 e1 1e 90       	r1 = r9 * 0x1E
    e294:    81 18             	r1 += r8
    e296:    01 e1 08 11       	r1 = r1 + 0x108
    e29a:    d8 ed 19 06       	h[r1+r6<<1] = r0
    e29e:    0e e1 01 e0       	r14 = r14 + 0x1			  ## syntax.c:909:40
    e2a2:    50 ee 84 00       	r0 = b[r8+0x4] (u)			  ## syntax.c:909:28
    e2a6:    b6 e1 20 e0       	r6 = uextra(r14, p:0x0, l:0x8)			  ## syntax.c:909:17
    e2aa:    80 e9 b3 61       	if (r6 < r0) goto -0x9a <individual_channel_stream+0x172 : e214 >			  ## syntax.c:909:17
    e2ae:    50 ee 88 00       	r0 = b[r8+0x8] (u)
    e2b2:    0c e1 01 c0       	r12 = r12 + 0x1			  ## syntax.c:907:43
    e2b6:    b9 e1 20 c0       	r9 = uextra(r12, p:0x0, l:0x8)			  ## syntax.c:907:14
    e2ba:    80 e9 a9 91       	if (r9 < r0) goto -0xae <individual_channel_stream+0x16E : e210 >			  ## syntax.c:907:14
    e2be:    f0 16             	r0 = r15			  ## syntax.c:685:34
    e2c0:    bf ea 8c fc       	call -0x6e8 <faad_get1bit : dbdc >			  ## syntax.c:685:34
    e2c4:    52 ee 8e 00       	b[r8+0xe] = r0			  ## syntax.c:685:32
    e2c8:    50 e8 25 00       	if ((r0 & 0x1) == 0) goto 0x4a <individual_channel_stream+0x274 : e316 >
    e2cc:    f0 d6             	r0 = r15  #			  ## syntax.c:586:31
    e2ce:    54 61             		 r4 = [r5+0x4] 			  ## syntax.c:687:40
    e2d0:    41 22             	r1 = 0x2			  ## syntax.c:586:31
    e2d2:    bf ea 59 fc       	call -0x74e <faad_getbits : db88 >			  ## syntax.c:586:31
    e2d6:    f0 d6             	r0 = r15  #			  ## syntax.c:587:34
    e2d8:    c8 40             		 b[r4+0x0] = r0			  ## syntax.c:586:20
    e2da:    41 26             	r1 = 0x6			  ## syntax.c:587:34
    e2dc:    bf ea 54 fc       	call -0x758 <faad_getbits : db88 >			  ## syntax.c:587:34
    e2e0:    02 d7             	r2 = r0.b0 (u)  #			  ## syntax.c:590:6
    e2e2:    c8 41             		 b[r4+0x1] = r0			  ## syntax.c:587:23
    e2e4:    50 ee 85 10       	r1 = b[r8+0x5] (u)			  ## syntax.c:590:29
    e2e8:    40 30             	r0 = 0x10			  ## syntax.c:590:29
    e2ea:    01 ec 87 21       	if (r2 > r1) goto -0xf2 <individual_channel_stream+0x15A : e1fc >			  ## syntax.c:590:29
    e2ee:    46 20             	r6 = 0x0
    e2f0:    04 8b             	goto 0x16 <individual_channel_stream+0x266 : e308 >
    e2f2:    41 25             	r1 = 0x5			  ## syntax.c:595:35
    e2f4:    f0 16             	r0 = r15			  ## syntax.c:595:35
    e2f6:    bf ea 47 fc       	call -0x772 <faad_getbits : db88 >			  ## syntax.c:595:35
    e2fa:    f0 d6             	r0 = r15  #			  ## syntax.c:596:32
    e2fc:    f8 42             		 b[r7+0x2] = r0			  ## syntax.c:595:24
    e2fe:    41 24             	r1 = 0x4			  ## syntax.c:596:32
    e300:    bf ea 42 fc       	call -0x77c <faad_getbits : db88 >			  ## syntax.c:596:32
    e304:    f8 46             	b[r7+0x6] = r0			  ## syntax.c:596:21
    e306:    c6 21             	r6 += 0x1			  ## syntax.c:593:42
    e308:    60 17             	r0 = r6.b0 (u)			  ## syntax.c:593:14
    e30a:    47 16             	r7 = r4			  ## syntax.c:593:18
    e30c:    de ee 70 10       	r1 = b[r7++=r0] (u)			  ## syntax.c:593:18
    e310:    c1 21             	r1 += 0x1			  ## syntax.c:593:36
    e312:    81 e9 ee 01       	if (r0 < r1) goto -0x24 <individual_channel_stream+0x250 : e2f2 >			  ## syntax.c:593:36
    e316:    f0 16             	r0 = r15			  ## syntax.c:692:32
    e318:    bf ea 60 fc       	call -0x740 <faad_get1bit : dbdc >			  ## syntax.c:692:32
    e31c:    52 ee 87 00       	b[r8+0x7] = r0			  ## syntax.c:692:30
    e320:    30 ea 01 c0       	if ((r0 & 0x1) != 0) {			  ## syntax.c:692:30
    e324:    51 60             		r1 = [r5+0x0] 			  ## syntax.c:695:24
    e326:    80 16             		r0 = r8			  ## syntax.c:695:4
    e328:    f2 16             		r2 = r15			  ## syntax.c:695:4
    e32a:    bf ea 46 fe       		call -0x374
                               	} <tns_data : dfba >			  ## syntax.c:695:4
    e32e:    f0 16             	r0 = r15			  ## syntax.c:699:36
    e330:    bf ea 54 fc       	call -0x758 <faad_get1bit : dbdc >			  ## syntax.c:699:36
    e334:    01 16             	r1 = r0			  ## syntax.c:699:36
    e336:    40 21             	r0 = 0x1			  ## syntax.c:699:36
    e338:    51 e8 60 03       	if ((r1 & 0x1) != 0) goto -0x140 <individual_channel_stream+0x15A : e1fc >			  ## syntax.c:699:36
    e33c:    00 30             	r0 = [sp+64]			  ## syntax.c:722:16
    e33e:    08 42             	r0 = b[r0+0x2] (u)			  ## syntax.c:722:16
    e340:    80 f9 09 22       	if (r0 < 0x11) goto 0x12 <individual_channel_stream+0x2B4 : e356 >			  ## syntax.c:722:16
    e344:    50 ee 87 00       	r0 = b[r8+0x7] (u)			  ## syntax.c:724:12
    e348:    b0 e8 00 c0       	if (r0 != 0x0) {			  ## syntax.c:724:12
    e34c:    51 60             		r1 = [r5+0x0] 			  ## syntax.c:725:24
    e34e:    80 16             		r0 = r8			  ## syntax.c:725:4
    e350:    f2 16             		r2 = r15			  ## syntax.c:725:4
    e352:    bf ea 32 fe       		call -0x39c
                               	} <tns_data : dfba >			  ## syntax.c:725:4
    e356:    c1 d4             	r9 = 0  #
    e358:    00 30             		 r0 = [sp+64]			  ## syntax.c:1035:30
    e35a:    08 67             	r0 = h[r0+0xe] (u)			  ## syntax.c:1035:30
    e35c:    80 a3             	r0 = r0 >> 0x3			  ## syntax.c:1035:42
    e35e:    80 23             	[sp+12] = r0			  ## syntax.c:1035:42
    e360:    40 20             	r0 = 0x0			  ## syntax.c:1035:42
    e362:    46 20             	r6 = 0x0
    e364:    e4 9f             	goto 0x3be <individual_channel_stream+0x682 : e724 >
    e366:    40 24             	r0 = 0x4
    e368:    a7 89             	goto -0x16e <individual_channel_stream+0x15A : e1fc >
    e36a:    01 d7             	r1 = r0.b0 (u)  #			  ## syntax.c:1042:7
    e36c:    00 23             		 r0 = [sp+12]			  ## syntax.c:1042:14
    e36e:    10 db             	r0 *= r1  #			  ## syntax.c:1042:14
    e370:    81 20             		 [sp] = r1			  ## syntax.c:1042:14
    e372:    c2 14             	r10 = 0
    e374:    d4 e9 09 90       	[sp+8] = r9
    e378:    d4 e9 05 b0       	[sp+4] = r11
    e37c:    e4 84             	goto 0x388 <individual_channel_stream+0x664 : e706 >
    e37e:    e2 f1 0f b0       	r2 = r11 * 0xF  #			  ## syntax.c:1046:14
    e382:    51 63             		 r1 = [r5+0xc] 			  ## syntax.c:1046:19
    e384:    21 18             	r1 += r2			  ## syntax.c:1046:14
    e386:    d8 ee 10 e7       	r14 = b[r1+r7] (u)			  ## syntax.c:1046:14
    e38a:    0e fc 1d 1e       	if (r14 > 0xf) goto 0x3a <individual_channel_stream+0x326 : e3c8 >			  ## syntax.c:1046:14
    e38e:    c1 ff 01 e0 00 00 	r1 = 0xe001 <tns_data+0x46 : e000 >
    e394:    94 e1 12 1e       	r1 = r1 & (1 << r14)
    e398:    01 57             	if (r1 == 0) goto 0x2e <individual_channel_stream+0x326 : e3c8 >
    e39a:    e4 f1 1e b0       	r4 = r11 * 0x1E  #			  ## syntax.c:1060:35
    e39e:    51 65             		 r1 = [r5+0x14] 			  ## syntax.c:1061:35
    e3a0:    41 d8             	r1 += r4  #			  ## syntax.c:1061:30
    e3a2:    52 66             		 r2 = [r5+0x18] 			  ## syntax.c:1060:40
    e3a4:    42 d8             	r2 += r4  #			  ## syntax.c:1060:35
    e3a6:    53 64             		 r3 = [r5+0x10] 			  ## syntax.c:1060:16
    e3a8:    d8 ed 28 27       	r2 = h[r2+r7<<1] (u)			  ## syntax.c:1060:11
    e3ac:    d8 ed 18 17       	r1 = h[r1+r7<<1] (u)			  ## syntax.c:1061:6
    e3b0:    c0 e1 b5 40       	r4 = r11 << 0x5			  ## syntax.c:1060:11
    e3b4:    43 18             	r3 += r4			  ## syntax.c:1060:11
    e3b6:    d8 ed 38 22       	r2 = h[r3+r2<<1] (u)			  ## syntax.c:1060:11
    e3ba:    d8 ed 38 11       	r1 = h[r3+r1<<1] (u)			  ## syntax.c:1061:6
    e3be:    20 18             	r0 += r2			  ## syntax.c:1060:56
    e3c0:    08 1e             	r0 = r0 - r1			  ## syntax.c:1060:7
    e3c2:    0a e1 01 a0       	r10 = r10 + 0x1			  ## syntax.c:1044:37
    e3c6:    c4 9f             	goto 0x33e <individual_channel_stream+0x664 : e706 >			  ## syntax.c:1044:37
    e3c8:    d4 e9 11 a0       	[sp+16] = r10
    e3cc:    41 22             	r1 = 0x2
    e3ce:    81 28             	[sp+32] = r1
    e3d0:    be ec 04 40       	if (r14 <= 0x4) {
    e3d4:    41 24             		r1 = 0x4
    e3d6:    81 28             		[sp+32] = r1
                               	}
    e3d8:    e3 f1 1e b0       	r3 = r11 * 0x1E  #			  ## syntax.c:1065:38
    e3dc:    52 65             		 r2 = [r5+0x14] 			  ## syntax.c:1065:43
    e3de:    32 d8             	r2 += r3  #			  ## syntax.c:1065:38
    e3e0:    51 64             		 r1 = [r5+0x10] 			  ## syntax.c:1065:19
    e3e2:    c0 f1 b5 30       	r3 = r11 << 0x5  #			  ## syntax.c:1065:14
    e3e6:    83 2a             		 [sp+40] = r3			  ## syntax.c:1065:14
    e3e8:    d8 ed 28 27       	r2 = h[r2+r7<<1] (u)			  ## syntax.c:1065:14
    e3ec:    13 d8             	r3 += r1  #			  ## syntax.c:1065:14
    e3ee:    83 29             		 [sp+36] = r3			  ## syntax.c:1065:14
    e3f0:    d8 ed 38 22       	r2 = h[r3+r2<<1] (u)			  ## syntax.c:1065:14
    e3f4:    43 e0 99 0f       	r3 = 0xf99 <usb_code_size+0x4D4 : f98 >			  ## syntax.c:1065:14
    e3f8:    c8 e1 32 9e       	r9 = r3 >> r14			  ## syntax.c:1065:14
    e3fc:    c0 e1 e3 30       	r3 = r14 << 0x3			  ## syntax.c:1065:14
    e400:    c4 ff 40 e5 01 00 	r4 = 0x1e540 <AACcodeBookDTable : 1e540 >			  ## syntax.c:1065:14
    e406:    43 18             	r3 += r4			  ## syntax.c:1065:14
    e408:    83 26             	[sp+24] = r3			  ## syntax.c:1065:14
    e40a:    87 25             	[sp+20] = r7			  ## syntax.c:1065:14
    e40c:    d4 e9 1d e0       	[sp+28] = r14			  ## syntax.c:1065:14
    e410:    b4 85             	goto 0x2ca <individual_channel_stream+0x63A : e6dc >			  ## syntax.c:1065:14
    e412:    0e fc 08 1e       	if (r14 > 0xf) goto 0x10 <individual_channel_stream+0x384 : e426 >
    e416:    c0 ff 01 e0 00 00 	r0 = 0xe001 <tns_data+0x46 : e000 >
    e41c:    94 e1 02 0e       	r0 = r0 & (1 << r14)
    e420:    01 ff 00 00 a0 01 	if (r0 != 0x0) goto 0x340 <individual_channel_stream+0x6C4 : e766 >
    e426:    82 2b             	[sp+44] = r2
    e428:    86 2c             	[sp+48] = r6
    e42a:    60 a1             	r0 = r6 << 0x1			  ## syntax.c:1071:56
    e42c:    02 26             	r2 = [sp+24]			  ## syntax.c:1071:56
    e42e:    50 ee 25 b0       	r11 = b[r2+0x5] (u)			  ## huffman.c:611:14
    e432:    01 2e             	r1 = [sp+56]
    e434:    1d f1 c8 16       	r13 = r1 + 0x16c8  #
    e438:    01 33             		 r1 = [sp+76]			  ## syntax.c:1071:56
    e43a:    d0 ec d8 40       	r4 = [r13+0x8]			  ## syntax.c:1071:56
    e43e:    d0 ec 20 e0       	r14 = [r2+0x0]			  ## huffman.c:438:46
    e442:    50 ee 26 a0       	r10 = b[r2+0x6] (u)			  ## huffman.c:610:21
    e446:    10 d8             	r0 += r1  #			  ## syntax.c:1071:56
    e448:    2a 44             		 r2 = b[r2+0x4] (u)			  ## huffman.c:609:19
    e44a:    80 31             	[sp+68] = r0			  ## huffman.c:612:17
    e44c:    40 21             	r0 = 0x1			  ## huffman.c:612:17
    e44e:    c8 e1 00 0b       	r0 = r0 << r11			  ## huffman.c:612:17
    e452:    80 2d             	[sp+52] = r0
    e454:    41 20             	r1 = 0x0
    e456:    04 97             	goto 0x2e <individual_channel_stream+0x3E4 : e486 >
    e458:    84 f9 02 06       	if (r4 < 0x3) goto 0x4 <individual_channel_stream+0x3BE : e460 >			  ## bits.c:83:7
    e45c:    fc 3e             	r4 += -0x2			  ## bits.c:85:18
    e45e:    04 90             	goto 0x20 <individual_channel_stream+0x3DE : e480 >			  ## bits.c:85:18
    e460:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:89:19
    e464:    d0 ec d1 00       	[r13+0x0] = r0			  ## bits.c:89:13
    e468:    d0 ec d0 01       	r0 = [r13+0x10]			  ## bits.c:90:23
    e46c:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    e46e:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    e472:    d0 ec d5 10       	[r13+0x4] = r1			  ## bits.c:91:13
    e476:    c4 eb 04 d0       	[r13+0x10] += 0x4			  ## bits.c:92:12
    e47a:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:93:18
    e47e:    0c 9e             	r4 = r0 + 0x1e			  ## bits.c:93:18
    e480:    d0 ec d9 40       	[r13+0x8] = r4			  ## bits.c:85:18
    e484:    e1 a2             	r1 = r6 >> 0x2			  ## huffman.c:447:16
    e486:    d0 ec d0 60       	r6 = [r13+0x0]			  ## bits.c:73:16
    e48a:    04 f9 10 04       	if (r4 >= 0x2) goto 0x20 <individual_channel_stream+0x40C : e4ae >			  ## bits.c:73:16
    e48e:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:73:67
    e492:    a3 e0 02 40       	r3 = 0x2 - r4			  ## bits.c:72:8
    e496:    ac e0 20 30       	r12 = 0x20 - r3			  ## bits.c:73:79
    e49a:    c8 e1 02 0c       	r0 = r0 >> r12			  ## bits.c:73:72
    e49e:    47 21             	r7 = 0x1			  ## bits.c:73:27
    e4a0:    47 1a             	r7 <<= r4			  ## bits.c:73:27
    e4a2:    ff 3f             	r7 += -0x1			  ## bits.c:73:45
    e4a4:    f6 19             	r6 &= r7			  ## bits.c:73:21
    e4a6:    c8 e1 60 33       	r3 = r6 << r3			  ## bits.c:73:51
    e4aa:    30 19             	r0 |= r3			  ## bits.c:73:60
    e4ac:    04 85             	goto 0xa <individual_channel_stream+0x416 : e4b8 >			  ## bits.c:73:60
    e4ae:    a0 e0 20 40       	r0 = 0x20 - r4			  ## bits.c:69:28
    e4b2:    c8 e1 60 00       	r0 = r6 << r0			  ## bits.c:69:21
    e4b6:    80 be             	r0 = r0 >> 0x1e			  ## bits.c:69:46
    e4b8:    11 a3             	r1 = r1 << 0x3			  ## huffman.c:442:9
    e4ba:    e1 18             	r1 += r14			  ## huffman.c:442:9
    e4bc:    d8 ed 18 60       	r6 = h[r1+r0<<1] (u)			  ## huffman.c:442:9
    e4c0:    56 e8 ca 01       	if ((r6 & 0x1) == 0) goto -0x6c <individual_channel_stream+0x3B6 : e458 >
    e4c4:    56 e8 06 0a       	if ((r6 & 0x2) != 0) goto 0xc <individual_channel_stream+0x432 : e4d4 >
    e4c8:    d4 e9 1c e0       	r14 = [sp+28]
    e4cc:    84 f9 08 06       	if (r4 < 0x3) goto 0x10 <individual_channel_stream+0x43E : e4e0 >			  ## bits.c:83:7
    e4d0:    fc 3e             	r4 += -0x2			  ## bits.c:85:18
    e4d2:    14 87             	goto 0x4e <individual_channel_stream+0x480 : e522 >			  ## bits.c:85:18
    e4d4:    d4 e9 1c e0       	r14 = [sp+28]
    e4d8:    84 f9 13 04       	if (r4 < 0x2) goto 0x26 <individual_channel_stream+0x460 : e502 >			  ## bits.c:83:7
    e4dc:    fc 3f             	r4 += -0x1			  ## bits.c:85:18
    e4de:    14 81             	goto 0x42 <individual_channel_stream+0x480 : e522 >			  ## bits.c:85:18
    e4e0:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:89:19
    e4e4:    d0 ec d1 00       	[r13+0x0] = r0			  ## bits.c:89:13
    e4e8:    d0 ec d0 01       	r0 = [r13+0x10]			  ## bits.c:90:23
    e4ec:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    e4ee:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    e4f2:    d0 ec d5 10       	[r13+0x4] = r1			  ## bits.c:91:13
    e4f6:    c4 eb 04 d0       	[r13+0x10] += 0x4			  ## bits.c:92:12
    e4fa:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:93:18
    e4fe:    0c 9e             	r4 = r0 + 0x1e			  ## bits.c:93:18
    e500:    04 90             	goto 0x20 <individual_channel_stream+0x480 : e522 >			  ## bits.c:93:18
    e502:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:89:19
    e506:    d0 ec d1 00       	[r13+0x0] = r0			  ## bits.c:89:13
    e50a:    d0 ec d0 01       	r0 = [r13+0x10]			  ## bits.c:90:23
    e50e:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    e510:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    e514:    d0 ec d5 10       	[r13+0x4] = r1			  ## bits.c:91:13
    e518:    c4 eb 04 d0       	[r13+0x10] += 0x4			  ## bits.c:92:12
    e51c:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:93:18
    e520:    0c 9f             	r4 = r0 + 0x1f			  ## bits.c:93:18
    e522:    00 2d             	r0 = [sp+52]
    e524:    3c e1 ff 0f       	r12 = r0 + -0x1			  ## huffman.c:612:26
    e528:    d0 ec d9 40       	[r13+0x8] = r4			  ## bits.c:85:18
    e52c:    e7 a2             	r7 = r6 >> 0x2			  ## huffman.c:462:8
    e52e:    06 31             	r6 = [sp+68]			  ## bits.c:169:11
    e530:    14 8c             	goto 0x58 <individual_channel_stream+0x4E8 : e58a >			  ## bits.c:169:11
    e532:    90 e1 72 0c       	r0 = r7 & r12			  ## huffman.c:618:21
    e536:    b4 e0 02 1a       	r1 = r0 - r10			  ## huffman.c:618:29
    e53a:    59 e8 22 00       	if ((r9 & 0x1) == 0) goto 0x44 <individual_channel_stream+0x4E0 : e582 >
    e53e:    11 41             	if (r1 == 0) goto 0x42 <individual_channel_stream+0x4E0 : e582 >
    e540:    04 49             	if (r4 == 0) goto 0x12 <individual_channel_stream+0x4B2 : e554 >			  ## bits.c:169:7
    e542:    fc 3f             	r4 += -0x1			  ## bits.c:171:17
    e544:    d0 ec d9 40       	[r13+0x8] = r4			  ## bits.c:171:17
    e548:    d0 ec d0 00       	r0 = [r13+0x0]			  ## bits.c:172:23
    e54c:    c0 1a             	r0 >>= r4			  ## bits.c:172:28
    e54e:    60 e1 01 00       	r0 = r0 & 0x1			  ## bits.c:172:46
    e552:    04 91             	goto 0x22 <individual_channel_stream+0x4D4 : e576 >			  ## bits.c:172:46
    e554:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:177:21
    e558:    d0 ec d1 00       	[r13+0x0] = r0			  ## bits.c:178:12
    e55c:    d0 ec d0 31       	r3 = [r13+0x10]			  ## bits.c:179:22
    e560:    34 60             	r4 = [r3+0x0] 			  ## bits.c:49:3
    e562:    70 e0 00 44       	r4 = rev8(r4)			  ## bits.c:49:3
    e566:    d0 ec d5 40       	[r13+0x4] = r4			  ## bits.c:180:12
    e56a:    c4 eb 04 d0       	[r13+0x10] += 0x4			  ## bits.c:181:11
    e56e:    44 3f             	r4 = 0x1f			  ## bits.c:181:11
    e570:    d0 ec d9 40       	[r13+0x8] = r4			  ## bits.c:182:17
    e574:    80 bf             	r0 = r0 >> 0x1f			  ## bits.c:177:26
    e576:    a3 e0 00 10       	r3 = 0x0 - r1			  ## huffman.c:623:38
    e57a:    30 e8 00 00       	if (r0 == 0x0) {			  ## huffman.c:623:38
    e57e:    13 16             		r3 = r1
                               	}			  ## huffman.c:623:12
    e580:    31 16             	r1 = r3
    e582:    c8 f1 73 7b       	r7 = r7 >>> r11  #			  ## huffman.c:619:8
    e586:    e1 06             		 h[r6++=0x2] = r1			  ## huffman.c:625:10
    e588:    fa 3f             	r2 += -0x1			  ## huffman.c:615:3
    e58a:    e2 53             	if (r2 != 0) goto -0x5a <individual_channel_stream+0x490 : e532 >
    e58c:    07 31             	r7 = [sp+68]
    e58e:    8e f8 9e 16       	if (r14 != 0xb) goto 0x13c <individual_channel_stream+0x62C : e6ce >
    e592:    54 ed 70 60       	r6 = h[r7+0x0] (s)			  ## huffman.c:563:8
    e596:    30 e4 00 06       	r0 = abs(r6)			  ## huffman.c:487:2
    e59a:    80 f8 49 20       	if (r0 != 0x10) goto 0x92 <individual_channel_stream+0x58E : e630 >
    e59e:    d0 ec d8 10       	r1 = [r13+0x8]			  ## bits.c:66:19
    e5a2:    d0 ec d0 00       	r0 = [r13+0x0]			  ## bits.c:73:16
    e5a6:    01 f9 0f 18       	if (r1 >= 0xc) goto 0x1e <individual_channel_stream+0x526 : e5c8 >
    e5aa:    d0 ec d4 20       	r2 = [r13+0x4]			  ## bits.c:73:67
    e5ae:    a3 e0 0c 10       	r3 = 0xC - r1			  ## bits.c:72:8
    e5b2:    a4 e0 20 30       	r4 = 0x20 - r3			  ## bits.c:73:79
    e5b6:    c2 1a             	r2 >>= r4			  ## bits.c:73:72
    e5b8:    44 21             	r4 = 0x1			  ## bits.c:73:27
    e5ba:    c8 e1 40 11       	r1 = r4 << r1			  ## bits.c:73:27
    e5be:    f9 3f             	r1 += -0x1			  ## bits.c:73:45
    e5c0:    90 19             	r0 &= r1			  ## bits.c:73:21
    e5c2:    30 1a             	r0 <<= r3			  ## bits.c:73:51
    e5c4:    20 19             	r0 |= r2			  ## bits.c:73:60
    e5c6:    04 84             	goto 0x8 <individual_channel_stream+0x52E : e5d0 >			  ## bits.c:73:60
    e5c8:    a1 e0 20 10       	r1 = 0x20 - r1			  ## bits.c:69:28
    e5cc:    10 1a             	r0 <<= r1			  ## bits.c:69:21
    e5ce:    80 b4             	r0 = r0 >> 0x14			  ## bits.c:69:46
    e5d0:    41 e0 ff 0f       	r1 = 0xfff <usb_code_size+0x53A : ffe >			  ## huffman.c:567:40
    e5d4:    18 19             	r0 ^= r1			  ## huffman.c:567:40
    e5d6:    80 e1 00 10       	r1 = clz(r0)			  ## huffman.c:548:2
    e5da:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:83:18
    e5de:    01 e1 f0 10       	r1 = r1 + 0xf0			  ## huffman.c:569:11
    e5e2:    14 17             	r4 = r1.b0 (u)			  ## huffman.c:570:22
    e5e4:    31 e1 fd 4f       	r1 = r4 + -0x3			  ## huffman.c:570:24
    e5e8:    81 ec 02 00       	if (r0 <= r1) goto 0x4 <individual_channel_stream+0x54E : e5f0 >			  ## bits.c:83:7
    e5ec:    08 1e             	r0 = r0 - r1			  ## bits.c:85:18
    e5ee:    04 92             	goto 0x24 <individual_channel_stream+0x572 : e614 >			  ## bits.c:85:18
    e5f0:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:89:19
    e5f4:    d0 ec d1 00       	[r13+0x0] = r0			  ## bits.c:89:13
    e5f8:    d0 ec d0 01       	r0 = [r13+0x10]			  ## bits.c:90:23
    e5fc:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    e5fe:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    e602:    d0 ec d5 10       	[r13+0x4] = r1			  ## bits.c:91:13
    e606:    c4 eb 04 d0       	[r13+0x10] += 0x4			  ## bits.c:92:12
    e60a:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:93:18
    e60e:    a1 e0 23 40       	r1 = 0x23 - r4			  ## bits.c:93:25
    e612:    10 18             	r0 += r1			  ## bits.c:93:18
    e614:    d0 ec d9 00       	[r13+0x8] = r0			  ## bits.c:85:18
    e618:    04 fc a7 18       	if (r4 > 0xc) goto 0x14e <individual_channel_stream+0x6C8 : e76a >			  ## bits.c:85:18
    e61c:    f0 16             	r0 = r15			  ## huffman.c:574:18
    e61e:    41 16             	r1 = r4			  ## huffman.c:574:18
    e620:    bf ea b2 fa       	call -0xa9c <faad_getbits : db88 >			  ## huffman.c:574:18
    e624:    94 e1 00 04       	r0 = r0 | (1 << r4)			  ## huffman.c:576:13
    e628:    80 e1 02 16       	r1 = zcmp(r6)			  ## huffman.c:480:2
    e62c:    10 1b             	r0 *= r1			  ## huffman.c:577:15
    e62e:    f8 60             	h[r7+0x0] = r0			  ## huffman.c:577:9
    e630:    5c ed 72 60       	r6 = h[++r7=0x2] (s)			  ## huffman.c:580:8
    e634:    30 e4 00 06       	r0 = abs(r6)			  ## huffman.c:487:2
    e638:    80 f8 49 20       	if (r0 != 0x10) goto 0x92 <individual_channel_stream+0x62C : e6ce >
    e63c:    d0 ec d8 10       	r1 = [r13+0x8]			  ## bits.c:66:19
    e640:    d0 ec d0 00       	r0 = [r13+0x0]			  ## bits.c:73:16
    e644:    01 f9 0f 18       	if (r1 >= 0xc) goto 0x1e <individual_channel_stream+0x5C4 : e666 >
    e648:    d0 ec d4 20       	r2 = [r13+0x4]			  ## bits.c:73:67
    e64c:    a3 e0 0c 10       	r3 = 0xC - r1			  ## bits.c:72:8
    e650:    a4 e0 20 30       	r4 = 0x20 - r3			  ## bits.c:73:79
    e654:    c2 1a             	r2 >>= r4			  ## bits.c:73:72
    e656:    44 21             	r4 = 0x1			  ## bits.c:73:27
    e658:    c8 e1 40 11       	r1 = r4 << r1			  ## bits.c:73:27
    e65c:    f9 3f             	r1 += -0x1			  ## bits.c:73:45
    e65e:    90 19             	r0 &= r1			  ## bits.c:73:21
    e660:    30 1a             	r0 <<= r3			  ## bits.c:73:51
    e662:    20 19             	r0 |= r2			  ## bits.c:73:60
    e664:    04 84             	goto 0x8 <individual_channel_stream+0x5CC : e66e >			  ## bits.c:73:60
    e666:    a1 e0 20 10       	r1 = 0x20 - r1			  ## bits.c:69:28
    e66a:    10 1a             	r0 <<= r1			  ## bits.c:69:21
    e66c:    80 b4             	r0 = r0 >> 0x14			  ## bits.c:69:46
    e66e:    41 e0 ff 0f       	r1 = 0xfff <usb_code_size+0x53A : ffe >			  ## huffman.c:584:40
    e672:    18 19             	r0 ^= r1			  ## huffman.c:584:40
    e674:    80 e1 00 10       	r1 = clz(r0)			  ## huffman.c:548:2
    e678:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:83:18
    e67c:    01 e1 f0 10       	r1 = r1 + 0xf0			  ## huffman.c:586:11
    e680:    14 17             	r4 = r1.b0 (u)			  ## huffman.c:587:22
    e682:    31 e1 fd 4f       	r1 = r4 + -0x3			  ## huffman.c:587:24
    e686:    81 ec 02 00       	if (r0 <= r1) goto 0x4 <individual_channel_stream+0x5EC : e68e >			  ## bits.c:83:7
    e68a:    08 1e             	r0 = r0 - r1			  ## bits.c:85:18
    e68c:    04 92             	goto 0x24 <individual_channel_stream+0x610 : e6b2 >			  ## bits.c:85:18
    e68e:    d0 ec d4 00       	r0 = [r13+0x4]			  ## bits.c:89:19
    e692:    d0 ec d1 00       	[r13+0x0] = r0			  ## bits.c:89:13
    e696:    d0 ec d0 01       	r0 = [r13+0x10]			  ## bits.c:90:23
    e69a:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    e69c:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    e6a0:    d0 ec d5 10       	[r13+0x4] = r1			  ## bits.c:91:13
    e6a4:    c4 eb 04 d0       	[r13+0x10] += 0x4			  ## bits.c:92:12
    e6a8:    d0 ec d8 00       	r0 = [r13+0x8]			  ## bits.c:93:18
    e6ac:    a1 e0 23 40       	r1 = 0x23 - r4			  ## bits.c:93:25
    e6b0:    10 18             	r0 += r1			  ## bits.c:93:18
    e6b2:    d0 ec d9 00       	[r13+0x8] = r0			  ## bits.c:85:18
    e6b6:    04 fc 58 18       	if (r4 > 0xc) goto 0xb0 <individual_channel_stream+0x6C8 : e76a >			  ## bits.c:85:18
    e6ba:    f0 16             	r0 = r15			  ## huffman.c:591:18
    e6bc:    41 16             	r1 = r4			  ## huffman.c:591:18
    e6be:    bf ea 63 fa       	call -0xb3a <faad_getbits : db88 >			  ## huffman.c:591:18
    e6c2:    94 e1 00 04       	r0 = r0 | (1 << r4)			  ## huffman.c:593:13
    e6c6:    80 e1 02 16       	r1 = zcmp(r6)			  ## huffman.c:480:2
    e6ca:    10 1b             	r0 *= r1			  ## huffman.c:594:15
    e6cc:    f8 60             	h[r7+0x0] = r0			  ## huffman.c:594:9
    e6ce:    03 28             	r3 = [sp+32]
    e6d0:    00 2b             	r0 = [sp+44]			  ## syntax.c:1066:58
    e6d2:    8a dc             	r2 = r0 + r3  #			  ## syntax.c:1066:58
    e6d4:    51 64             		 r1 = [r5+0x10] 			  ## syntax.c:1066:58
    e6d6:    00 2c             	r0 = [sp+48]			  ## syntax.c:1073:8
    e6d8:    30 d8             	r0 += r3  #			  ## syntax.c:1073:8
    e6da:    07 25             		 r7 = [sp+20]			  ## syntax.c:1073:8
    e6dc:    53 66             	r3 = [r5+0x18] 			  ## syntax.c:1066:39
    e6de:    04 2a             	r4 = [sp+40]			  ## syntax.c:1066:34
    e6e0:    43 d8             	r3 += r4  #			  ## syntax.c:1066:34
    e6e2:    04 29             		 r4 = [sp+36]			  ## syntax.c:1066:10
    e6e4:    d8 ed 38 37       	r3 = h[r3+r7<<1] (u)			  ## syntax.c:1066:10
    e6e8:    41 18             	r1 += r4			  ## syntax.c:1066:10
    e6ea:    d8 ed 18 13       	r1 = h[r1+r3<<1] (u)			  ## syntax.c:1066:10
    e6ee:    a2 17             	r2 = r2.l (u)			  ## syntax.c:1066:6
    e6f0:    86 17             	r6 = r0.l (u)			  ## syntax.c:1066:6
    e6f2:    43 ff 00 21 8d fe 	if (r2 < r1) goto -0x2e6 <individual_channel_stream+0x370 : e412 >			  ## syntax.c:1066:6
    e6f8:    d4 e9 08 90       	r9 = [sp+8]
    e6fc:    d4 e9 04 b0       	r11 = [sp+4]
    e700:    d4 e9 10 a0       	r10 = [sp+16]
    e704:    27 9e             	goto -0x344 <individual_channel_stream+0x320 : e3c2 >
    e706:    b7 f1 21 a0       	r7 = sextra(r10, p:0x0, l:0x8)  #			  ## syntax.c:1044:15
    e70a:    51 62             		 r1 = [r5+0x8] 			  ## syntax.c:1044:24
    e70c:    d8 ee 10 1b       	r1 = b[r1+r11] (u)			  ## syntax.c:1044:19
    e710:    4b ff 00 71 34 fe 	ifs (r7 < r1) goto -0x398 <individual_channel_stream+0x2DC : e37e >			  ## syntax.c:1044:19
    e716:    b4 f0 80 0b       	r0 = r8 + r11  #			  ## syntax.c:1079:13
    e71a:    01 20             		 r1 = [sp]			  ## syntax.c:1079:10
    e71c:    08 4f             	r0 = b[r0+0xf] (u)			  ## syntax.c:1079:13
    e71e:    10 18             	r0 += r1			  ## syntax.c:1079:10
    e720:    09 e1 01 90       	r9 = r9 + 0x1			  ## syntax.c:1040:43
    e724:    50 ee 88 10       	r1 = b[r8+0x8] (u)			  ## syntax.c:1040:23
    e728:    bb e1 20 90       	r11 = uextra(r9, p:0x0, l:0x8)			  ## syntax.c:1040:14
    e72c:    43 ff 00 b1 1c fe 	if (r11 < r1) goto -0x3c8 <individual_channel_stream+0x2C8 : e36a >			  ## syntax.c:1040:14
    e732:    00 2f             	r0 = [sp+60]			  ## syntax.c:1081:16
    e734:    8e 61             	h[r0+0x2] = r6			  ## syntax.c:1081:16
    e736:    50 ee 8e 00       	r0 = b[r8+0xe] (u)			  ## syntax.c:735:11
    e73a:    50 ee 80 90       	r9 = b[r8+0x0] (u)			  ## syntax.c:735:11
    e73e:    10 4e             	if (r0 == 0) goto 0x5c <individual_channel_stream+0x6FA : e79c >			  ## syntax.c:735:11
    e740:    40 22             	r0 = 0x2
    e742:    00 ff 02 90 5a fd 	if (r9 == 0x2) goto -0x54c <individual_channel_stream+0x15A : e1fc >
    e748:    50 61             	r0 = [r5+0x4] 			  ## pulse.c:37:29
    e74a:    09 41             	r1 = b[r0+0x1] (u)			  ## pulse.c:39:9
    e74c:    03 2f             	r3 = [sp+60]			  ## pulse.c:39:9
    e74e:    3a 84             	r2 = r3 + 0x4			  ## pulse.c:39:9
    e750:    d8 ed 28 11       	r1 = h[r2+r1<<1] (u)			  ## pulse.c:39:9
    e754:    3a 60             	r2 = h[r3+0x0] (u)			  ## pulse.c:39:9
    e756:    35 f4 10 42       	r4 = umin(r1, r2)  #			  ## pulse.c:39:9
    e75a:    03 30             		 r3 = [sp+64]			  ## syntax.c:739:57
    e75c:    50 ed 3e a0       	r10 = h[r3+0xe] (u)			  ## syntax.c:739:57
    e760:    0b 40             	r3 = b[r0+0x0] (u)
    e762:    45 20             	r5 = 0x0
    e764:    04 98             	goto 0x30 <individual_channel_stream+0x6F4 : e796 >
    e766:    40 2b             	r0 = 0xb
    e768:    a6 89             	goto -0x56e <individual_channel_stream+0x15A : e1fc >
    e76a:    40 2c             	r0 = 0xc
    e76c:    a6 87             	goto -0x572 <individual_channel_stream+0x15A : e1fc >
    e76e:    0f 1c             	r7 = r0 + r1			  ## pulse.c:43:14
    e770:    79 42             	r1 = b[r7+0x2] (u)			  ## pulse.c:43:14
    e772:    14 18             	r4 += r1			  ## pulse.c:43:11
    e774:    c6 17             	r6 = r4.l (u)			  ## pulse.c:43:11
    e776:    0a e9 ef 60       	if (r6 >= r10) goto 0x1de <individual_channel_stream+0x8B6 : e958 >			  ## pulse.c:43:11
    e77a:    79 46             	r1 = b[r7+0x6] (u)
    e77c:    02 33             	r2 = [sp+76]			  ## pulse.c:48:13
    e77e:    d8 ed 2a 76       	r7 = h[r2+r6<<1] (s)			  ## pulse.c:48:13
    e782:    a2 e0 00 10       	r2 = 0x0 - r1			  ## pulse.c:48:13
    e786:    b7 ee 00 00       	ifs (r7 <= 0x0) {			  ## pulse.c:48:13
    e78a:    21 16             		r1 = r2
                               	}			  ## pulse.c:48:13
    e78c:    71 d8             	r1 += r7  #			  ## pulse.c:48:13
    e78e:    02 33             		 r2 = [sp+76]			  ## pulse.c:48:13
    e790:    d8 ed 29 16       	h[r2+r6<<1] = r1			  ## pulse.c:48:13
    e794:    c5 21             	r5 += 0x1			  ## pulse.c:41:42
    e796:    51 17             	r1 = r5.b0 (u)			  ## pulse.c:41:17
    e798:    83 ec e9 11       	if (r1 <= r3) goto -0x2e <individual_channel_stream+0x6CC : e76e >			  ## pulse.c:41:17
    e79c:    40 f0 00 02       	r0 = 0x200  # <ROM_RAM_SIZE : 200 >			  ## specrec.c:238:3
    e7a0:    01 32             		 r1 = [sp+72]			  ## specrec.c:238:3
    e7a2:    42 20             	r2 = 0x0			  ## specrec.c:238:3
    e7a4:    10 03             	rep 0x4 r0 {			  ## specrec.c:238:3
    e7a6:    92 05             		[r1++=0x4] = r2			  ## specrec.c:238:3
    e7a8:    92 05             		[r1++=0x4] = r2
                               	}			  ## specrec.c:238:3
    e7aa:    f0 5c             	if (r0 != 0) goto -0x8 <individual_channel_stream+0x702 : e7a4 >			  ## specrec.c:238:3
    e7ac:    40 e0 c6 ff       	r0 = -0x3a <RAM_LIMIT_H+0xFFFFFFFFFFE5FFC6 : ffffffffffffffc6 >			  ## specrec.c:225:6
    e7b0:    80 2a             	[sp+40] = r0			  ## specrec.c:225:6
    e7b2:    b9 e8 02 40       	if (r9 != 0x2) {			  ## specrec.c:225:6
    e7b6:    f8 3e             		r0 += -0x2			  ## specrec.c:225:6
    e7b8:    80 2a             		[sp+40] = r0
                               	}			  ## specrec.c:225:6
    e7ba:    00 2f             	r0 = [sp+60]			  ## specrec.c:225:6
    e7bc:    c0 24             	r0 += 0x4			  ## specrec.c:225:6
    e7be:    80 d4             	r1_r0 = 0  #			  ## specrec.c:225:6
    e7c0:    80 28             		 [sp+32] = r0			  ## specrec.c:225:6
    e7c2:    80 2c             	[sp+48] = r0			  ## specrec.c:225:6
    e7c4:    04 32             	r4 = [sp+72]
    e7c6:    54 87             	goto 0x14e <individual_channel_stream+0x874 : e916 >
    e7c8:    50 ee 85 00       	r0 = b[r8+0x5] (u)			  ## specrec.c:263:22
    e7cc:    01 28             	r1 = [sp+32]			  ## specrec.c:263:22
    e7ce:    d8 ed 18 00       	r0 = h[r1+r0<<1] (u)			  ## specrec.c:263:22
    e7d2:    b4 f0 80 06       	r0 = r8 + r6  #			  ## specrec.c:263:22
    e7d6:    80 2f             		 [sp+60] = r0			  ## specrec.c:263:22
    e7d8:    80 30             	[sp+64] = r0			  ## specrec.c:263:22
    e7da:    40 20             	r0 = 0x0			  ## specrec.c:263:22
    e7dc:    05 2c             	r5 = [sp+48]			  ## specrec.c:263:22
    e7de:    86 2b             	[sp+44] = r6			  ## specrec.c:263:22
    e7e0:    44 8c             	goto 0x118 <individual_channel_stream+0x858 : e8fa >			  ## specrec.c:263:22
    e7e2:    12 a1             	r2 = r1 << 0x1			  ## specrec.c:268:17
    e7e4:    b4 f0 80 32       	r3 = r8 + r2  #			  ## specrec.c:268:17
    e7e8:    80 2d             		 [sp+52] = r0			  ## specrec.c:268:17
    e7ea:    51 ed 3c 2f       	r2 = h[r3+0x1fc] (u)			  ## specrec.c:268:17
    e7ee:    e6 e1 1e 60       	r6 = r6 * 0x1E			  ## specrec.c:273:8
    e7f2:    86 18             	r6 += r8			  ## specrec.c:273:8
    e7f4:    06 e1 08 61       	r6 = r6 + 0x108			  ## specrec.c:273:8
    e7f8:    d8 ed 6a 71       	r7 = h[r6+r1<<1] (s)			  ## specrec.c:273:8
    e7fc:    51 ed 3e 3f       	r3 = h[r3+0x1fe] (u)			  ## specrec.c:269:12
    e800:    46 20             	r6 = 0x0			  ## specrec.c:269:12
    e802:    41 20             	r1 = 0x0			  ## specrec.c:269:12
    e804:    b7 ec ff 40       	if (r7 <= 0xff) {			  ## specrec.c:269:12
    e808:    61 e1 03 70       		r1 = r7 & 0x3			  ## specrec.c:281:41
    e80c:    fe a2             		r6 = r7 >>> 0x2
                               	}			  ## specrec.c:280:40
    e80e:    51 e1 03 10       	r1 = r1 ^ 0x3			  ## specrec.c:283:29
    e812:    c0 ff 08 d1 01 00 	r0 = 0x1d108 <pow05_table : 1d108 >			  ## specrec.c:283:15
    e818:    d8 ec 0a d1       	r13 = [r0+r1<<2]			  ## specrec.c:283:15
    e81c:    b4 f0 32 b2       	r11 = r3 - r2  #			  ## specrec.c:269:37
    e820:    00 2c             		 r0 = [sp+48]			  ## specrec.c:286:16
    e822:    b4 f0 20 90       	r9 = r2 + r0  #			  ## specrec.c:286:16
    e826:    00 2a             		 r0 = [sp+40]			  ## specrec.c:284:8
    e828:    67 dc             	r7 = r6 + r0  #			  ## specrec.c:284:8
    e82a:    01 33             		 r1 = [sp+76]			  ## specrec.c:284:8
    e82c:    46 20             	r6 = 0x0
    e82e:    24 9d             	goto 0xba <individual_channel_stream+0x848 : e8ea >
    e830:    86 31             	[sp+68] = r6
    e832:    46 20             	r6 = 0x0
    e834:    24 90             	goto 0xa0 <individual_channel_stream+0x834 : e8d6 >
    e836:    d2 1d             	r2 = r5 + r6			  ## specrec.c:290:23
    e838:    a2 17             	r2 = r2.l (u)			  ## specrec.c:294:14
    e83a:    d8 ed 1a a2       	r10 = h[r1+r2<<1] (s)			  ## specrec.c:294:14
    e83e:    0a f8 49 00       	if (r10 == 0x0) goto 0x92 <individual_channel_stream+0x832 : e8d4 >
    e842:    3a ed 00 20       	ifs (r10 >= 0x0) {
    e846:    42 21             		r2 = 0x1
                               	} else {
    e848:    aa e0 00 a0       		r10 = 0x0 - r10			  ## specrec.c:306:12
    e84c:    12 3f             		r2 = -0x1
                               	}
    e84e:    b4 e0 90 36       	r3 = r9 + r6			  ## specrec.c:290:23
    e852:    2a fe 08 00       	ifs (r10 > 0x100) goto 0x10 <individual_channel_stream+0x7C4 : e866 >			  ## specrec.c:310:11
    e856:    c0 ff 04 cc 01 00 	r0 = 0x1cc04 <iq_table : 1cc04 >			  ## specrec.c:312:20
    e85c:    d8 ec 0a 0a       	r0 = [r0+r10<<2]			  ## specrec.c:312:20
    e860:    f0 e1 00 c2       	r12 = r0 * r2			  ## specrec.c:312:18
    e864:    14 90             	goto 0x60 <individual_channel_stream+0x824 : e8c6 >
    e866:    2c ff 00 ae 15 00 	ifs (r10 > 0x800) goto 0x2a <individual_channel_stream+0x7F4 : e896 >			  ## specrec.c:314:16
    e86c:    c0 e1 a3 08       	r0 = r10 >> 0x3			  ## specrec.c:316:13
    e870:    00 a2             	r0 = r0 << 0x2			  ## specrec.c:316:13
    e872:    c1 ff 04 cc 01 00 	r1 = 0x1cc04 <iq_table : 1cc04 >			  ## specrec.c:316:13
    e878:    dc ec 02 41       	r4 = [++r0=r1]			  ## specrec.c:316:13
    e87c:    00 61             	r0 = [r0+0x4] 			  ## specrec.c:317:13
    e87e:    00 1f             	r0 = r0 - r4			  ## specrec.c:318:39
    e880:    61 e1 07 a0       	r1 = r10 & 0x7			  ## specrec.c:318:30
    e884:    10 db             	r0 *= r1  #			  ## specrec.c:318:34
    e886:    01 33             		 r1 = [sp+76]			  ## specrec.c:318:34
    e888:    80 a3             	r0 = r0 >> 0x3			  ## specrec.c:318:45
    e88a:    40 d8             	r0 += r4  #			  ## specrec.c:318:51
    e88c:    04 32             		 r4 = [sp+72]			  ## specrec.c:318:51
    e88e:    20 1b             	r0 *= r2			  ## specrec.c:318:23
    e890:    c0 e1 04 c0       	r12 = r0 << 0x4			  ## specrec.c:318:23
    e894:    04 98             	goto 0x30 <individual_channel_stream+0x824 : e8c6 >
    e896:    c4 14             	r12 = 0
    e898:    2a ff 00 ad 14 00 	ifs (r10 >= 0x2000) goto 0x28 <individual_channel_stream+0x824 : e8c6 >
    e89e:    c0 e1 a6 08       	r0 = r10 >> 0x6			  ## specrec.c:322:13
    e8a2:    00 a2             	r0 = r0 << 0x2			  ## specrec.c:322:13
    e8a4:    c1 ff 04 cc 01 00 	r1 = 0x1cc04 <iq_table : 1cc04 >			  ## specrec.c:322:13
    e8aa:    dc ec 02 11       	r1 = [++r0=r1]			  ## specrec.c:322:13
    e8ae:    00 61             	r0 = [r0+0x4] 			  ## specrec.c:323:13
    e8b0:    08 1e             	r0 = r0 - r1			  ## specrec.c:324:41
    e8b2:    64 e1 3f a0       	r4 = r10 & 0x3F			  ## specrec.c:324:31
    e8b6:    40 db             	r0 *= r4  #			  ## specrec.c:324:36
    e8b8:    04 32             		 r4 = [sp+72]			  ## specrec.c:324:36
    e8ba:    80 a6             	r0 = r0 >> 0x6			  ## specrec.c:324:47
    e8bc:    10 d8             	r0 += r1  #			  ## specrec.c:324:53
    e8be:    01 33             		 r1 = [sp+76]			  ## specrec.c:324:53
    e8c0:    20 1b             	r0 *= r2			  ## specrec.c:324:24
    e8c2:    c0 e1 08 c0       	r12 = r0 << 0x8			  ## specrec.c:324:24
    e8c6:    f8 e1 c0 fd       	r15_r14 = r12 * r13 (s)			  ## specrec.c:338:8
    e8ca:    dc e1 03 e7       	r15_r14 ><= r7 (sat)			  ## specrec.c:338:8
    e8ce:    b0 17             	r0 = r3.l (u)			  ## specrec.c:347:7
    e8d0:    d8 ec 4b e0       	[r4+r0<<2] = r14			  ## specrec.c:347:21
    e8d4:    c6 21             	r6 += 0x1			  ## specrec.c:290:35
    e8d6:    e2 17             	r2 = r6.l (u)			  ## specrec.c:290:23
    e8d8:    b3 e1 40 b0       	r3 = uextra(r11, p:0x0, l:0x10)			  ## specrec.c:290:23
    e8dc:    82 e8 ab 31       	if (r3 != r2) goto -0xaa <individual_channel_stream+0x794 : e836 >			  ## specrec.c:290:23
    e8e0:    00 2f             	r0 = [sp+60]			  ## specrec.c:351:8
    e8e2:    09 d8             	r9 += r0  #			  ## specrec.c:351:8
    e8e4:    06 31             		 r6 = [sp+68]			  ## specrec.c:351:8
    e8e6:    b5 18             	r5 += r11			  ## specrec.c:287:4
    e8e8:    c6 21             	r6 += 0x1			  ## specrec.c:287:56
    e8ea:    63 d7             	r3 = r6.b0 (u)  #			  ## specrec.c:287:22
    e8ec:    00 30             		 r0 = [sp+64]			  ## specrec.c:287:24
    e8ee:    0a 4f             	r2 = b[r0+0xf] (u)			  ## specrec.c:287:24
    e8f0:    82 e9 9e 31       	if (r3 < r2) goto -0xc4 <individual_channel_stream+0x78E : e830 >			  ## specrec.c:287:24
    e8f4:    00 2d             	r0 = [sp+52]
    e8f6:    c0 21             	r0 += 0x1			  ## specrec.c:265:40
    e8f8:    06 2b             	r6 = [sp+44]			  ## specrec.c:265:40
    e8fa:    50 ee 84 20       	r2 = b[r8+0x4] (u)			  ## specrec.c:265:28
    e8fe:    01 17             	r1 = r0.b0 (u)			  ## specrec.c:265:17
    e900:    82 e9 6f 11       	if (r1 < r2) goto -0x122 <individual_channel_stream+0x740 : e7e2 >			  ## specrec.c:265:17
    e904:    00 30             	r0 = [sp+64]			  ## specrec.c:354:23
    e906:    08 4f             	r0 = b[r0+0xf] (u)			  ## specrec.c:354:23
    e908:    01 2f             	r1 = [sp+60]			  ## specrec.c:354:21
    e90a:    10 db             	r0 *= r1  #			  ## specrec.c:354:21
    e90c:    01 2c             		 r1 = [sp+48]			  ## specrec.c:354:10
    e90e:    01 18             	r1 += r0			  ## specrec.c:354:10
    e910:    81 2c             	[sp+48] = r1			  ## specrec.c:354:10
    e912:    01 29             	r1 = [sp+36]			  ## specrec.c:354:10
    e914:    c1 21             	r1 += 0x1			  ## specrec.c:261:43
    e916:    50 ee 88 00       	r0 = b[r8+0x8] (u)			  ## specrec.c:261:23
    e91a:    16 d7             	r6 = r1.b0 (u)  #			  ## specrec.c:261:14
    e91c:    81 29             		 [sp+36] = r1			  ## specrec.c:261:14
    e91e:    80 e9 53 61       	if (r6 < r0) goto -0x15a <individual_channel_stream+0x726 : e7c8 >			  ## specrec.c:261:14
    e922:    00 2e             	r0 = [sp+56]
    e924:    11 e1 0c 0c       	r1 = r0 + 0x1c0c
    e928:    12 61             	r2 = [r1+0x4] 			  ## syntax.c:758:14
    e92a:    40 20             	r0 = 0x0			  ## syntax.c:758:14
    e92c:    01 ff 01 20 65 fc 	if (r2 != 0x1) goto -0x736 <individual_channel_stream+0x15A : e1fc >			  ## syntax.c:758:14
    e932:    40 f0 00 04       	r0 = 0x400  # <ROM_RAM_SIZE+0x200 : 400 >			  ## syntax.c:773:3
    e936:    04 32             		 r4 = [sp+72]			  ## syntax.c:773:3
    e938:    42 20             	r2 = 0x0			  ## syntax.c:773:3
    e93a:    60 03             	rep 0xe r0 {			  ## syntax.c:773:3
    e93c:    43 05             		r3 = [r4++=0x4] 			  ## syntax.c:773:3
    e93e:    a3 ed 00 00       		ifs (r3 < 0x0) {			  ## syntax.c:773:3
    e942:    a3 e0 00 30       			r3 = 0x0 - r3
                               	}			  ## syntax.c:773:3
    e946:    bb aa             		r3 = r3 >>> 0xa			  ## syntax.c:773:3
    e948:    aa 1c             		r2 = r2 + r3
                               	}			  ## syntax.c:773:3
    e94a:    f0 57             	if (r0 != 0) goto -0x12 <individual_channel_stream+0x898 : e93a >			  ## syntax.c:773:3
    e94c:    68 e8 00 12       	[r1+0x0] += r2			  ## syntax.c:788:15
    e950:    c2 eb 01 10       	[r1+0x8] += 0x1			  ## syntax.c:789:23
    e954:    40 20             	r0 = 0x0			  ## syntax.c:789:23
    e956:    26 92             	goto -0x75c <individual_channel_stream+0x15A : e1fc >			  ## syntax.c:789:23
    e958:    40 2f             	r0 = 0xf
    e95a:    26 90             	goto -0x760 <individual_channel_stream+0x15A : e1fc >


tns_decode_frame:
    e95c:    7f 04             	[--sp] = {rets, r15-r4}			  ## tns.c:171:0
    e95e:    a2 8d             	sp += -0x14c			  ## tns.c:171:0
    e960:    0c 47             	r4 = b[r0+0x7] (u)			  ## tns.c:181:12
    e962:    00 ff 00 40 15 01 	if (r4 == 0x0) goto 0x22a <tns_decode_frame+0x236 : eb92 >
    e968:    05 d6             	r5 = r0  #
    e96a:    0e 40             		 r6 = b[r0+0x0] (u)			  ## tns.c:185:54
    e96c:    44 21             	r4 = 0x1			  ## tns.c:185:70
    e96e:    b6 e8 02 00       	if (r6 != 0x2) {			  ## tns.c:185:70
    e972:    44 20             		r4 = 0x0
                               	}			  ## tns.c:185:70
    e974:    46 e1 02 40       	r6 = r4 | 0x2			  ## tns.c:163:28
    e978:    b3 e8 03 00       	if (r3 != 0x3) {			  ## tns.c:163:28
    e97c:    46 16             		r6 = r4
                               	}			  ## tns.c:163:6
    e97e:    a6 e1 20 21       	r6 <= insert(r2, p:0x2, l:0x8)			  ## tns.c:165:9
    e982:    c0 ff 60 d1 01 00 	r0 = 0x1d160 <tns_sbf_max : 1d160 >			  ## tns.c:165:9
    e988:    d8 ee 60 00       	r0 = b[r6+r0] (u)			  ## tns.c:165:9
    e98c:    85 27             	[sp+28] = r5			  ## tns.c:165:9
    e98e:    5a 44             	r2 = b[r5+0x4] (u)			  ## tns.c:186:13
    e990:    d4 e9 80 31       	r3 = [sp+384]			  ## tns.c:186:13
    e994:    35 f4 00 02       	r0 = umin(r0, r2)  #			  ## tns.c:186:13
    e998:    83 22             		 [sp+8] = r3			  ## tns.c:186:13
    e99a:    f8 e8 e4 90       	r9 = sp + 228			  ## tns.c:186:13
    e99e:    0b f1 04 90       	r11 = r9 + 0x4  #			  ## tns.c:188:7
    e9a2:    80 25             		 [sp+20] = r0			  ## tns.c:188:7
    e9a4:    cf 90             	r7 = sp + 80			  ## tns.c:188:7
    e9a6:    0a e1 04 70       	r10 = r7 + 0x4			  ## tns.c:188:7
    e9aa:    00 e1 90 10       	r0 = r1 + 0x90			  ## tns.c:188:7
    e9ae:    80 21             	[sp+4] = r0
    e9b0:    43 20             	r3 = 0x0
    e9b2:    81 28             	[sp+32] = r1
    e9b4:    74 88             	goto 0x1d0 <tns_decode_frame+0x22A : eb86 >
    e9b6:    e0 f1 30 50       	r0 = r5 * 0x30  #			  ## tns.c:188:14
    e9ba:    04 21             		 r4 = [sp+4]			  ## tns.c:192:8
    e9bc:    53 a7             	r3 = r5 << 0x7			  ## tns.c:188:14
    e9be:    40 18             	r0 += r4			  ## tns.c:192:8
    e9c0:    80 29             	[sp+36] = r0			  ## tns.c:192:8
    e9c2:    30 a2             	r0 = r3 << 0x2			  ## tns.c:192:8
    e9c4:    2e 45             	r6 = b[r2+0x5] (u)			  ## tns.c:190:12
    e9c6:    02 22             	r2 = [sp+8]			  ## tns.c:192:8
    e9c8:    20 18             	r0 += r2			  ## tns.c:192:8
    e9ca:    18 dd             	r0 = r1 + r5  #			  ## tns.c:192:8
    e9cc:    80 24             		 [sp+16] = r0			  ## tns.c:192:8
    e9ce:    80 26             	[sp+24] = r0			  ## tns.c:192:8
    e9d0:    44 20             	r4 = 0x0			  ## tns.c:192:8
    e9d2:    85 2a             	[sp+40] = r5			  ## tns.c:192:8
    e9d4:    64 91             	goto 0x1a2 <tns_decode_frame+0x21C : eb78 >			  ## tns.c:192:8
    e9d6:    e0 f1 0c 20       	r0 = r2 * 0xC  #			  ## tns.c:192:15
    e9da:    03 29             		 r3 = [sp+36]			  ## tns.c:192:15
    e9dc:    30 18             	r0 += r3			  ## tns.c:192:15
    e9de:    53 a2             	r3 = r5 << 0x2			  ## tns.c:195:13
    e9e0:    13 18             	r3 += r1			  ## tns.c:195:13
    e9e2:    b4 e0 30 c2       	r12 = r3 + r2			  ## tns.c:195:13
    e9e6:    50 ee c0 23       	r2 = b[r12+0x30] (u)			  ## tns.c:196:16
    e9ea:    32 e9 0c 00       	if (r2 >= 0xc) {			  ## tns.c:196:16
    e9ee:    42 2c             		r2 = 0xc
                               	}			  ## tns.c:196:16
    e9f0:    e3 d7             	r3 = r6.l (u)  #			  ## tns.c:195:13
    e9f2:    84 2c             		 [sp+48] = r4			  ## tns.c:195:13
    e9f4:    50 ee c0 11       	r1 = b[r12+0x10] (u)			  ## tns.c:195:13
    e9f8:    3e 1e             	r6 = r3 - r1			  ## tns.c:195:13
    e9fa:    b6 ee 00 00       	ifs (r6 <= 0x0) {			  ## tns.c:195:13
    e9fe:    46 20             		r6 = 0x0
                               	}			  ## tns.c:195:13
    ea00:    82 30             	[sp+64] = r2			  ## tns.c:195:13
    ea02:    02 f8 b5 00       	if (r2 == 0x0) goto 0x16a <tns_decode_frame+0x214 : eb70 >			  ## tns.c:195:13
    ea06:    83 32             	[sp+72] = r3
    ea08:    01 26             	r1 = [sp+24]			  ## tns.c:200:31
    ea0a:    1b 48             	r3 = b[r1+0x8] (u)			  ## tns.c:200:31
    ea0c:    41 21             	r1 = 0x1			  ## tns.c:47:59
    ea0e:    b3 e8 00 00       	if (r3 != 0x0) {			  ## tns.c:47:59
    ea12:    41 20             		r1 = 0x0
                               	}			  ## tns.c:47:59
    ea14:    50 ee c0 37       	r3 = b[r12+0x70] (u)			  ## tns.c:47:17
    ea18:    33 a3             	r3 = r3 << 0x3			  ## tns.c:47:17
    ea1a:    c2 ff a8 e5 01 00 	r2 = 0x1e5a8 <tns_decode_coef.tns_coef_seek : 1e5a8 >			  ## tns.c:47:17
    ea20:    23 18             	r3 += r2			  ## tns.c:47:17
    ea22:    d8 ec 3a 81       	r8 = [r3+r1<<2]			  ## tns.c:47:17
    ea26:    01 30             	r1 = [sp+64]			  ## tns.c:65:7
    ea28:    a3 e0 00 10       	r3 = 0x0 - r1			  ## tns.c:65:7
    ea2c:    f8 e8 18 41       	r4 = sp + 280			  ## tns.c:65:7
    ea30:    04 85             	goto 0xa <tns_decode_frame+0xE0 : ea3c >			  ## tns.c:65:7
    ea32:    01 07             	r1 = b[r0++=0x1] (u)			  ## tns.c:67:13
    ea34:    d8 ec 8a 11       	r1 = [r8+r1<<2]			  ## tns.c:67:13
    ea38:    c1 05             	[r4++=0x4] = r1			  ## tns.c:67:11
    ea3a:    c3 21             	r3 += 0x1			  ## tns.c:65:2
    ea3c:    f3 5a             	if (r3 != 0) goto -0xc <tns_decode_frame+0xD6 : ea32 >
    ea3e:    60 f0 80 06       	r0 = 0x4000000  #			  ## tns.c:71:7
    ea42:    86 2b             		 [sp+44] = r6			  ## tns.c:71:7
    ea44:    4d f0 01 00       	r13 = 0x1  # <mem_code_size : 0 >			  ## tns.c:71:7
    ea48:    80 34             		 [sp+80] = r0			  ## tns.c:71:7
    ea4a:    43 20             	r3 = 0x0
    ea4c:    d4 e9 40 80       	r8 = [sp+64]
    ea50:    14 8c             	goto 0x58 <tns_decode_frame+0x14E : eaaa >
    ea52:    30 e1 ff df       	r0 = r13 + -0x1
    ea56:    41 24             	r1 = 0x4
    ea58:    34 16             	r4 = r3
    ea5a:    04 94             	goto 0x28 <tns_decode_frame+0x128 : ea84 >
    ea5c:    f8 e8 18 51       	r5 = sp + 280
    ea60:    d8 ec 5a 50       	r5 = [r5+r0<<2]			  ## tns.c:77:11
    ea64:    d8 ec 7a 64       	r6 = [r7+r4<<2]			  ## tns.c:77:11
    ea68:    d8 ec 72 21       	r2 = [r7+r1]			  ## tns.c:78:11
    ea6c:    60 e0 00 e7       	r14 = 0x2000000			  ## tns.c:77:11
    ea70:    c7 14             	r15 = 0			  ## tns.c:77:11
    ea72:    fc e1 60 f5       	r15_r14 += r6 * r5 (s)			  ## tns.c:77:11
    ea76:    d0 e1 0a e9       	r15_r14 >>= 0x1a			  ## tns.c:77:11
    ea7a:    e2 18             	r2 += r14			  ## tns.c:78:16
    ea7c:    d8 ec 93 21       	[r9+r1] = r2			  ## tns.c:78:9
    ea80:    c1 24             	r1 += 0x4			  ## tns.c:74:3
    ea82:    fc 3f             	r4 += -0x1			  ## tns.c:74:3
    ea84:    f4 4b             	if (r4 != 0) goto -0x2a <tns_decode_frame+0x100 : ea5c >			  ## tns.c:74:3
    ea86:    41 20             	r1 = 0x0
    ea88:    04 85             	goto 0xa <tns_decode_frame+0x138 : ea94 >
    ea8a:    d8 ec ba 21       	r2 = [r11+r1<<2]			  ## tns.c:82:11
    ea8e:    d8 ec ab 21       	[r10+r1<<2] = r2			  ## tns.c:82:9
    ea92:    c1 21             	r1 += 0x1			  ## tns.c:81:3
    ea94:    81 e8 f9 31       	if (r3 != r1) goto -0xe <tns_decode_frame+0x12E : ea8a >
    ea98:    f8 e8 18 11       	r1 = sp + 280
    ea9c:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## tns.c:84:10
    eaa0:    d8 ec 7b 0d       	[r7+r13<<2] = r0			  ## tns.c:84:8
    eaa4:    c3 21             	r3 += 0x1			  ## tns.c:72:2
    eaa6:    0d e1 01 d0       	r13 = r13 + 0x1			  ## tns.c:72:27
    eaaa:    88 ec d2 d1       	if (r13 <= r8) goto -0x5c <tns_decode_frame+0xF6 : ea52 >
    eaae:    03 25             	r3 = [sp+20]
    eab0:    00 32             	r0 = [sp+72]			  ## tns.c:206:10
    eab2:    35 f4 00 03       	r0 = umin(r0, r3)  #			  ## tns.c:206:10
    eab6:    01 27             		 r1 = [sp+28]			  ## tns.c:203:12
    eab8:    02 f1 fc 11       	r2 = r1 + 0x1fc  #			  ## tns.c:203:12
    eabc:    06 2b             		 r6 = [sp+44]			  ## tns.c:203:12
    eabe:    d8 ed 28 10       	r1 = h[r2+r0<<1] (u)			  ## tns.c:207:10
    eac2:    e0 17             	r0 = r6.l (u)			  ## tns.c:202:12
    eac4:    35 e4 00 03       	r0 = umin(r0, r3)			  ## tns.c:202:12
    eac8:    d8 ed 28 00       	r0 = h[r2+r0<<1] (u)			  ## tns.c:203:12
    eacc:    12 1e             	r2 = r1 - r0			  ## tns.c:210:15
    eace:    ad 17             	r5 = r2.l (s)			  ## tns.c:210:15
    ead0:    85 fd 4e 02       	ifs (r5 < 0x1) goto 0x9c <tns_decode_frame+0x214 : eb70 >			  ## tns.c:210:15
    ead4:    50 ee c0 c5       	r12 = b[r12+0x50] (u)			  ## tns.c:214:8
    ead8:    f8 e8 84 20       	r2 = sp + 132			  ## tns.c:214:8
    eadc:    44 20             	r4 = 0x0			  ## tns.c:214:8
    eade:    82 2d             	[sp+52] = r2			  ## tns.c:214:8
    eae0:    00 97             	rep 0x2 0x18 {			  ## tns.c:104:9
    eae2:    a4 05             		[r2++=0x4] = r4
                               	}			  ## tns.c:104:9
    eae4:    42 21             	r2 = 0x1			  ## tns.c:104:9
    eae6:    82 2f             	[sp+60] = r2			  ## tns.c:214:8
    eae8:    bc e8 00 40       	if (r12 != 0x0) {			  ## tns.c:214:8
    eaec:    12 3f             		r2 = -0x1			  ## tns.c:214:8
    eaee:    82 2f             		[sp+60] = r2
                               	}			  ## tns.c:214:8
    eaf0:    f9 3f             	r1 += -0x1			  ## tns.c:217:17
    eaf2:    bc e8 00 00       	if (r12 != 0x0) {			  ## tns.c:217:17
    eaf6:    10 16             		r0 = r1
                               	}			  ## tns.c:214:8
    eaf8:    80 d7             	r0 = r0.l (u)  #			  ## tns.c:223:37
    eafa:    01 24             		 r1 = [sp+16]			  ## tns.c:107:7
    eafc:    00 a2             	r0 = r0 << 0x2			  ## tns.c:107:7
    eafe:    10 d8             	r0 += r1  #			  ## tns.c:107:7
    eb00:    01 30             		 r1 = [sp+64]			  ## tns.c:107:7
    eb02:    f9 3f             	r1 += -0x1			  ## tns.c:107:7
    eb04:    81 2e             	[sp+56] = r1			  ## tns.c:107:7
    eb06:    d0 e9 49 20       	d[sp+72] = r3_r2			  ## tns.c:107:7
    eb0a:    14 8f             	goto 0x5e <tns_decode_frame+0x20E : eb6a >			  ## tns.c:107:7
    eb0c:    31 f1 ff 4f       	r1 = r4 + -0x1  #			  ## tns.c:140:14
    eb10:    85 31             		 [sp+68] = r5			  ## tns.c:140:14
    eb12:    1a 17             	r2 = r1.b0 (s)			  ## tns.c:140:14
    eb14:    d4 e9 38 c0       	r12 = [sp+56]			  ## tns.c:141:7
    eb18:    32 ed 00 00       	ifs (r2 >= 0x0) {			  ## tns.c:141:7
    eb1c:    1c 16             		r12 = r1
                               	}			  ## tns.c:141:7
    eb1e:    b1 f1 21 c0       	r1 = sextra(r12, p:0x0, l:0x8)  #			  ## tns.c:143:30
    eb22:    02 30             		 r2 = [sp+64]			  ## tns.c:143:30
    eb24:    b4 f0 10 d2       	r13 = r1 + r2  #			  ## tns.c:143:42
    eb28:    05 60             		 r5 = [r0+0x0] 			  ## tns.c:109:7
    eb2a:    4e 17             	r6 = r4.b0 (s)			  ## tns.c:114:19
    eb2c:    66 a2             	r6 = r6 << 0x2			  ## tns.c:114:19
    eb2e:    d4 e9 34 80       	r8 = [sp+52]			  ## tns.c:114:19
    eb32:    86 18             	r6 += r8			  ## tns.c:114:19
    eb34:    23 16             	r3 = r2			  ## tns.c:126:4
    eb36:    a4 16             	r4 = r10			  ## tns.c:126:4
    eb38:    60 e0 80 26       	r2 = 0x4000000			  ## tns.c:126:4
    eb3c:    d0 e9 48 e0       	r15_r14 = d[sp+72]			  ## tns.c:126:4
    eb40:    f8 e1 50 f2       	r15_r14 = r5 * r2 (s)			  ## tns.c:126:4
    eb44:    13 03             	rep 0x4 r3 {			  ## tns.c:126:4
    eb46:    61 ec 61 f4       		r15_r14 -= [r6 ++= 0x4]*[r4 ++= 0x4] (s)
                               	}			  ## tns.c:126:4
    eb4a:    d0 e1 0a ed       	r15_r14 >>>= 0x1a			  ## tns.c:126:4
    eb4e:    e5 16             	r5 = r14			  ## tns.c:126:4
    eb50:    d0 e9 49 e0       	d[sp+72] = r15_r14			  ## tns.c:143:51
    eb54:    d8 ec 8b 5d       	[r8+r13<<2] = r5			  ## tns.c:143:51
    eb58:    d8 ec 8b 51       	[r8+r1<<2] = r5			  ## tns.c:143:22
    eb5c:    c4 d6             	r4 = r12  #			  ## tns.c:143:22
    eb5e:    85 60             		 [r0+0x0] = r5			  ## tns.c:145:13
    eb60:    01 2f             	r1 = [sp+60]			  ## tns.c:107:2
    eb62:    11 a2             	r1 = r1 << 0x2			  ## tns.c:107:2
    eb64:    10 d8             	r0 += r1  #			  ## tns.c:107:2
    eb66:    05 31             		 r5 = [sp+68]			  ## tns.c:107:2
    eb68:    fd 3f             	r5 += -0x1			  ## tns.c:107:2
    eb6a:    d1 17             	r1 = r5.l (u)			  ## tns.c:107:2
    eb6c:    e1 4f             	if (r1 != 0) goto -0x62 <tns_decode_frame+0x1B0 : eb0c >			  ## tns.c:107:2
    eb6e:    06 2b             	r6 = [sp+44]
    eb70:    04 2c             	r4 = [sp+48]
    eb72:    c4 21             	r4 += 0x1			  ## tns.c:192:36
    eb74:    01 28             	r1 = [sp+32]			  ## tns.c:192:36
    eb76:    05 2a             	r5 = [sp+40]			  ## tns.c:192:36
    eb78:    d8 ee 10 05       	r0 = b[r1+r5] (u)			  ## tns.c:192:19
    eb7c:    42 17             	r2 = r4.b0 (u)			  ## tns.c:192:15
    eb7e:    80 e9 2a 21       	if (r2 < r0) goto -0x1ac <tns_decode_frame+0x7A : e9d6 >			  ## tns.c:192:15
    eb82:    03 23             	r3 = [sp+12]
    eb84:    c3 21             	r3 += 0x1			  ## tns.c:188:37
    eb86:    35 d7             	r5 = r3.b0 (u)  #			  ## tns.c:188:14
    eb88:    02 27             		 r2 = [sp+28]			  ## tns.c:188:14
    eb8a:    28 46             	r0 = b[r2+0x6] (u)			  ## tns.c:188:23
    eb8c:    83 23             	[sp+12] = r3			  ## tns.c:188:23
    eb8e:    80 e9 12 51       	if (r5 < r0) goto -0x1dc <tns_decode_frame+0x5A : e9b6 >			  ## tns.c:188:23
    eb92:    42 93             	sp += 0x14c
    eb94:    5f 04             	{pc, r15-r4} = [sp++]			  ## tns.c:226:1


_complex_ifft_wrap:
    eb96:    74 04             	[--sp] = {rets, r4}			  ## cfft.c:290:0
    eb98:    e2 9d             	sp += -0xc			  ## cfft.c:290:0
    eb9a:    44 20             	r4 = 0x0			  ## cfft.c:290:0
    eb9c:    c3 ff 00 19 1f 00 	r3 = 0x1f1900 <RAM_LIMIT_H+0x51900 : 1f1900 >			  ## cfft.c:290:0
    eba2:    b4 60             	[r3+0x0] = r4			  ## cfft.c:295:15
    eba4:    00 ef 80 3f       	[r3+0x0] |= 0x100			  ## cfft.c:296:15
    eba8:    44 21             	r4 = 0x1			  ## cfft.c:293:9
    ebaa:    91 e8 00 02       	if (r1 != r2) {			  ## cfft.c:293:9
    ebae:    44 20             		r4 = 0x0
                               	}			  ## cfft.c:293:9
    ebb0:    40 19             	r0 |= r4			  ## cfft.c:293:6
    ebb2:    d0 e9 01 00       	d[sp] = r1_r0			  ## cfft.c:298:17
    ebb6:    82 22             	[sp+8] = r2			  ## cfft.c:300:10
    ebb8:    88 80             	r0 = sp + 0			  ## cfft.c:300:10
    ebba:    40 f0 01 01       	r0 = 0x101  # <os_code_size+0x56 : 100 >			  ## cfft.c:302:15
    ebbe:    b0 61             		 [r3+0x4] = r0			  ## cfft.c:301:16
    ebc0:    b0 60             	[r3+0x0] = r0			  ## cfft.c:302:15
    ebc2:    30 60             	r0 = [r3+0x0] 			  ## cfft.c:304:19
    ebc4:    50 e8 fd 39       	if ((r0 & 0x80) == 0) goto -0x6 <_complex_ifft_wrap+0x2C : ebc2 >			  ## cfft.c:304:2
    ebc8:    00 ef 40 30       	[r3+0x0] |= 0x40			  ## cfft.c:306:15
    ebcc:    02 83             	sp += 0xc			  ## cfft.c:306:15
    ebce:    54 04             	{pc, r4} = [sp++]			  ## cfft.c:307:1


faad_imdct:
    ebd0:    7d 04             	[--sp] = {rets, r13-r4}			  ## mdct.c:360:0
    ebd2:    e2 9f             	sp += -0x4			  ## mdct.c:360:0
    ebd4:    2a d6             	r10 = r2  #			  ## mdct.c:360:0
    ebd6:    1a 60             		 r2 = h[r1+0x0] (u)			  ## mdct.c:366:24
    ebd8:    0b 16             	r11 = r0
    ebda:    33 a2             	r3 = r3 << 0x2			  ## mdct.c:371:15
    ebdc:    03 18             	r3 += r0			  ## mdct.c:362:29
    ebde:    00 e1 00 36       	r0 = r3 + 0x600			  ## mdct.c:371:15
    ebe2:    23 a1             	r3 = r2 << 0x1			  ## mdct.c:413:30
    ebe4:    c6 ff fc ff 01 00 	r6 = 0x1fffc <__stub_silk_ana_filt_bank_1 : 1fffc >			  ## mdct.c:367:18
    ebea:    e3 19             	r3 &= r6			  ## mdct.c:367:18
    ebec:    d0 ec 18 82       	r8 = [r1+0x28]			  ## mdct.c:364:26
    ebf0:    a3 d8             	r3 += r10  #
    ebf2:    80 20             		 [sp] = r0
    ebf4:    35 e1 fc 3f       	r5 = r3 + -0x4			  ## mdct.c:413:22
    ebf8:    c0 e1 22 98       	r9 = r2 >> 0x2			  ## mdct.c:368:18
    ebfc:    a4 16             	r4 = r10			  ## mdct.c:417:3
    ebfe:    86 15             	r7_r6 = r9_r8			  ## mdct.c:417:3
    ec00:    e7 03             	rep 0x1e r7 {			  ## mdct.c:417:3
    ec02:    61 e9 50 36       		r3_r2 = [r5 ++= 0x0]*[r6 ++= 0x4] (s)			  ## mdct.c:417:3
    ec06:    60 ec 40 36       		r3_r2 -= [r4 ++= 0x0]*[r6 ++= 0x0] (s)			  ## mdct.c:417:3
    ec0a:    6f e9 5e d6       		r13_r12 = [r5 ++= -0x8]*[r6 ++= -0x4] (s)			  ## mdct.c:417:3
    ec0e:    e2 e9 42 d6       		r13_r12 += [r4 ++= 0x8]*[r6 ++= 0x8] (s)			  ## mdct.c:417:3
    ec12:    d0 e1 0e 2d       		r3_r2 >>>= 0x1e			  ## mdct.c:417:3
    ec16:    d0 f1 0e cd       		r13_r12 >>>= 0x1e  #			  ## mdct.c:417:3
    ec1a:    82 05             			 [r0++=0x4] = r2			  ## mdct.c:417:3
    ec1c:    d8 ec 05 c0       		[r0++=0x4] = r12
                               	}			  ## mdct.c:417:3
    ec20:    f7 4f             	if (r7 != 0) goto -0x22 <faad_imdct+0x30 : ec00 >			  ## mdct.c:417:3
    ec22:    18 62             	r0 = h[r1+0x4] (u)			  ## cfft.c:320:11
    ec24:    b0 e8 00 12       	if (r0 != 0x200) {			  ## cfft.c:320:11
    ec28:    c1 ff 04 06 40 10 		r1 = 0x10400604
                               	} else { <RAM_LIMIT_H+0x10260604 : 10400604 >			  ## cfft.c:321:3
    ec2e:    c1 ff 24 09 00 22 		r1 = 0x22000924
                               	} <RAM_LIMIT_H+0x21E60924 : 22000924 >			  ## cfft.c:321:3
    ec34:    40 f0 02 07       	r0 = 0x702  # <alg_code_size+0x232 : 702 >			  ## cfft.c:330:13
    ec38:    04 20             		 r4 = [sp]			  ## cfft.c:330:13
    ec3a:    d8 ec ba 30       	r3 = [r11+r0<<2]			  ## cfft.c:330:13
    ec3e:    03 45             	if (r3 == 0) goto 0xa <faad_imdct+0x7A : ec4a >
    ec40:    10 16             	r0 = r1			  ## cfft.c:336:3
    ec42:    41 16             	r1 = r4			  ## cfft.c:336:3
    ec44:    a2 16             	r2 = r10			  ## cfft.c:336:3
    ec46:    c3 00             	call r3			  ## cfft.c:336:3
    ec48:    04 84             	goto 0x8 <faad_imdct+0x82 : ec52 >
    ec4a:    10 16             	r0 = r1			  ## cfft.c:332:3
    ec4c:    41 16             	r1 = r4			  ## cfft.c:332:3
    ec4e:    a2 16             	r2 = r10			  ## cfft.c:332:3
    ec50:    51 82             	call -0xbc <_complex_ifft_wrap : eb96 >			  ## cfft.c:332:3
    ec52:    c0 e1 93 00       	r0 = r9 << 0x3			  ## mdct.c:439:15
    ec56:    c1 ff f8 ff 03 00 	r1 = 0x3fff8 <text_size+0x1FFF8 : 3fff8 >			  ## mdct.c:439:15
    ec5c:    90 19             	r0 &= r1			  ## mdct.c:439:10
    ec5e:    40 18             	r0 += r4			  ## mdct.c:439:10
    ec60:    3b e1 fc 0f       	r11 = r0 + -0x4			  ## mdct.c:439:19
    ec64:    a1 16             	r1 = r10			  ## mdct.c:448:3
    ec66:    82 15             	r3_r2 = r9_r8			  ## mdct.c:448:3
    ec68:    40 16             	r0 = r4			  ## mdct.c:448:3
    ec6a:    73 03             	rep 0x10 r3 {			  ## mdct.c:448:3
    ec6c:    61 e9 11 58       		r5_r4 = [r1 ++= 0x4]*[r8 ++= 0x4] (s)			  ## mdct.c:448:3
    ec70:    61 ec 11 58       		r5_r4 -= [r1 ++= 0x4]*[r8 ++= 0x4] (s)			  ## mdct.c:448:3
    ec74:    d0 e1 09 4d       		r5_r4 >>>= 0x19			  ## mdct.c:448:3
    ec78:    d8 ec 09 40       		[r0++=0x8] = r4
                               	}			  ## mdct.c:448:3
    ec7c:    f3 56             	if (r3 != 0) goto -0x14 <faad_imdct+0x9A : ec6a >			  ## mdct.c:448:3
    ec7e:    93 16             	r3 = r9			  ## mdct.c:448:3
    ec80:    01 e1 04 a0       	r1 = r10 + 0x4			  ## mdct.c:448:3
    ec84:    28 16             	r8 = r2			  ## mdct.c:448:3
    ec86:    93 03             	rep 0x14 r3 {			  ## mdct.c:448:3
    ec88:    61 e9 1f 78       		r7_r6 = [r1 ++= -0x4]*[r8 ++= 0x4] (s)			  ## mdct.c:448:3
    ec8c:    e1 e9 13 78       		r7_r6 += [r1 ++= 0xc]*[r8 ++= 0x4] (s)			  ## mdct.c:448:3
    ec90:    d0 e1 09 6d       		r7_r6 >>>= 0x19			  ## mdct.c:448:3
    ec94:    a6 e0 00 60       		r6 = 0x0 - r6			  ## mdct.c:448:3
    ec98:    df ec b9 6f       		[r11++=-0x8] = r6
                               	}			  ## mdct.c:448:3
    ec9c:    f3 54             	if (r3 != 0) goto -0x18 <faad_imdct+0xB6 : ec86 >			  ## mdct.c:448:3
    ec9e:    02 81             	sp += 0x4
    eca0:    5d 04             	{pc, r13-r4} = [sp++]			  ## mdct.c:476:1


ifilter_bank:
    eca2:    7f 04             	[--sp] = {rets, r15-r4}			  ## filtbank.c:36:0
    eca4:    e2 9d             	sp += -0xc			  ## filtbank.c:36:0
    eca6:    15 e1 1c 06       	r5 = r0 + 0x161c			  ## filtbank.c:36:0
    ecaa:    08 ff 03 10 91 03 	if (r1 > 0x3) goto 0x722 <.GJTIE286_0_0_+0x6E8 : f3d2 >			  ## filtbank.c:36:0
    ecb0:    5c 88             	r4 = r5 + 0x8			  ## filtbank.c:58:17
    ecb2:    d8 ec 4a 73       	r7 = [r4+r3<<2]			  ## filtbank.c:59:22
    ecb6:    d8 ec 4a a2       	r10 = [r4+r2<<2]			  ## filtbank.c:58:17
    ecba:    d8 ec 5a d3       	r13 = [r5+r3<<2]			  ## filtbank.c:57:21
    ecbe:    d8 ec 5a c2       	r12 = [r5+r2<<2]			  ## filtbank.c:56:16
    ecc2:    d4 e9 48 b0       	r11 = [sp+72]
    ecc6:    0f d6             	r15 = r0  #
    ecc8:    02 31             		 r2 = [sp+68]
    ecca:    82 22             	[sp+8] = r2
    eccc:    d4 e9 40 90       	r9 = [sp+64]
    ecd0:    12 a1             	r2 = r1 << 0x1
    ecd2:    04 f1 00 06       	r4 = r0 + 0x600  #
    ecd6:    80 21             		 [sp+4] = r0
    ecd8:    08 e1 fc 0d       	r8 = r0 + 0xdfc
    ecdc:    0e e1 00 b9       	r14 = r11 + 0x900
    ece0:    12 01             	tbh [r2]


.GJTIL286_0_0_:
    ece2:    04 00     < 4 : 0x4 >
    ece4:    4d 00     < 77 : 0x4D >
    ece6:    ba 00     < 186 : 0xBA >
    ece8:    06 03     < 774 : 0x306 >
    ecea:    01 e1 3c 50       	r1 = r5 + 0x3c			  ## filtbank.c:65:27
    ecee:    43 20             	r3 = 0x0			  ## filtbank.c:65:3
    ecf0:    92 16             	r2 = r9			  ## filtbank.c:65:3
    ecf2:    bf ea 6d ff       	call -0x126 <faad_imdct : ebd0 >			  ## filtbank.c:65:3
    ecf6:    40 30             	r0 = 0x10			  ## filtbank.c:128:4
    ecf8:    b1 d6             	r1 = r11  #			  ## filtbank.c:128:4
    ecfa:    05 22             		 r5 = [sp+8]			  ## filtbank.c:128:4
    ecfc:    60 9f             	rep 0xe 0x20 {			  ## filtbank.c:128:4
    ecfe:    61 e9 8f 3d       		r3_r2 = [r8 ++= -0x4]*[r13 ++= 0x4] (s)			  ## filtbank.c:128:4
    ed02:    d0 f1 0e 2d       		r3_r2 >>>= 0x1e  #			  ## filtbank.c:128:4
    ed06:    14 05             			 r4 = [r1++=0x4] 			  ## filtbank.c:128:4
    ed08:    c4 1e             		r4 = r4 - r2			  ## filtbank.c:128:4
    ed0a:    d4 05             		[r5++=0x4] = r4
                               	}			  ## filtbank.c:128:4
    ed0c:    f8 3f             	r0 += -0x1			  ## filtbank.c:128:4
    ed0e:    00 fc f5 01       	if (r0 > 0x0) goto -0x16 <.GJTIE286_0_0_+0x12 : ecfc >			  ## filtbank.c:128:4
    ed12:    40 30             	r0 = 0x10			  ## filtbank.c:128:4
    ed14:    08 e1 04 80       	r8 = r8 + 0x4			  ## filtbank.c:128:4
    ed18:    60 9f             	rep 0xe 0x20 {			  ## filtbank.c:128:4
    ed1a:    61 e9 81 3d       		r3_r2 = [r8 ++= 0x4]*[r13 ++= 0x4] (s)			  ## filtbank.c:128:4
    ed1e:    d0 f1 0e 2d       		r3_r2 >>>= 0x1e  #			  ## filtbank.c:128:4
    ed22:    14 05             			 r4 = [r1++=0x4] 			  ## filtbank.c:128:4
    ed24:    c4 1c             		r4 = r4 + r2			  ## filtbank.c:128:4
    ed26:    d4 05             		[r5++=0x4] = r4
                               	}			  ## filtbank.c:128:4
    ed28:    f8 3f             	r0 += -0x1			  ## filtbank.c:128:4
    ed2a:    00 fc f5 01       	if (r0 > 0x0) goto -0x16 <.GJTIE286_0_0_+0x2E : ed18 >			  ## filtbank.c:128:4
    ed2e:    00 e1 fc cf       	r0 = r12 + 0xffc			  ## filtbank.c:153:20
    ed32:    45 28             	r5 = 0x8			  ## filtbank.c:156:4
    ed34:    b0 9f             	rep 0x18 0x20 {			  ## filtbank.c:156:4
    ed36:    6f e9 81 30       		r3_r2 = [r8 ++= 0x4]*[r0 ++= -0x4] (s)			  ## filtbank.c:156:4
    ed3a:    d0 e1 0e 2d       		r3_r2 >>>= 0x1e			  ## filtbank.c:156:4
    ed3e:    d8 ec b5 20       		[r11++=0x4] = r2			  ## filtbank.c:156:4
    ed42:    6f e9 81 30       		r3_r2 = [r8 ++= 0x4]*[r0 ++= -0x4] (s)			  ## filtbank.c:156:4
    ed46:    d0 e1 0e 2d       		r3_r2 >>>= 0x1e			  ## filtbank.c:156:4
    ed4a:    d8 ec b5 20       		[r11++=0x4] = r2
                               	}			  ## filtbank.c:156:4
    ed4e:    fd 3f             	r5 += -0x1			  ## filtbank.c:156:4
    ed50:    05 fc f0 01       	if (r5 > 0x0) goto -0x20 <.GJTIE286_0_0_+0x4A : ed34 >			  ## filtbank.c:156:4
    ed54:    45 28             	r5 = 0x8			  ## filtbank.c:156:4
    ed56:    38 e1 fc 8f       	r8 = r8 + -0x4			  ## filtbank.c:156:4
    ed5a:    b0 9f             	rep 0x18 0x20 {			  ## filtbank.c:156:4
    ed5c:    6f e9 8f 30       		r3_r2 = [r8 ++= -0x4]*[r0 ++= -0x4] (s)			  ## filtbank.c:156:4
    ed60:    d0 e1 0e 2d       		r3_r2 >>>= 0x1e			  ## filtbank.c:156:4
    ed64:    d8 ec b5 20       		[r11++=0x4] = r2			  ## filtbank.c:156:4
    ed68:    6f e9 8f 30       		r3_r2 = [r8 ++= -0x4]*[r0 ++= -0x4] (s)			  ## filtbank.c:156:4
    ed6c:    d0 e1 0e 2d       		r3_r2 >>>= 0x1e			  ## filtbank.c:156:4
    ed70:    d8 ec b5 20       		[r11++=0x4] = r2
                               	}			  ## filtbank.c:156:4
    ed74:    fd 3f             	r5 += -0x1			  ## filtbank.c:156:4
    ed76:    05 fc f0 01       	if (r5 > 0x0) goto -0x20 <.GJTIE286_0_0_+0x70 : ed5a >			  ## filtbank.c:156:4
    ed7a:    95 8b             	goto 0x656 <.GJTIE286_0_0_+0x6E8 : f3d2 >
    ed7c:    01 e1 3c 50       	r1 = r5 + 0x3c			  ## filtbank.c:211:27
    ed80:    43 20             	r3 = 0x0			  ## filtbank.c:211:3
    ed82:    47 20             	r7 = 0x0
    ed84:    92 16             	r2 = r9			  ## filtbank.c:211:3
    ed86:    bf ea 23 ff       	call -0x1ba <faad_imdct : ebd0 >			  ## filtbank.c:211:3
    ed8a:    40 f0 fc 07       	r0 = 0x7fc  # <alg_code_size+0x32C : 7fc >
    ed8e:    05 22             		 r5 = [sp+8]
    ed90:    41 e0 00 02       	r1 = 0x200 <ROM_RAM_SIZE : 200 >
    ed94:    14 83             	goto 0x46 <.GJTIE286_0_0_+0xF2 : eddc >
    ed96:    d8 ec 42 27       	r2 = [r4+r7]			  ## filtbank.c:216:4
    ed9a:    d8 ec d2 30       	r3 = [r13+r0]			  ## filtbank.c:216:4
    ed9e:    d8 ec b2 60       	r6 = [r11+r0]			  ## filtbank.c:217:31
    eda2:    a2 e0 00 20       	r2 = 0x0 - r2			  ## filtbank.c:216:4
    eda6:    f8 e1 30 32       	r3_r2 = r3 * r2 (s)			  ## filtbank.c:216:4
    edaa:    d0 e1 0e 29       	r3_r2 >>= 0x1e			  ## filtbank.c:216:4
    edae:    62 18             	r2 += r6			  ## filtbank.c:217:55
    edb0:    d8 ec 53 20       	[r5+r0] = r2			  ## filtbank.c:217:29
    edb4:    d8 ec 42 27       	r2 = [r4+r7]			  ## filtbank.c:218:4
    edb8:    b4 e0 d0 37       	r3 = r13 + r7			  ## filtbank.c:218:4
    edbc:    d8 ec 3a 31       	r3 = [r3+r1<<2]			  ## filtbank.c:218:4
    edc0:    b4 e0 b0 67       	r6 = r11 + r7			  ## filtbank.c:219:27
    edc4:    d8 ec 6a 61       	r6 = [r6+r1<<2]			  ## filtbank.c:219:27
    edc8:    f8 e1 30 32       	r3_r2 = r3 * r2 (s)			  ## filtbank.c:218:4
    edcc:    d0 e1 0e 29       	r3_r2 >>= 0x1e			  ## filtbank.c:218:4
    edd0:    62 18             	r2 += r6			  ## filtbank.c:219:47
    edd2:    db 1d             	r3 = r5 + r7			  ## filtbank.c:219:25
    edd4:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## filtbank.c:219:25
    edd8:    f8 3c             	r0 += -0x4			  ## filtbank.c:214:3
    edda:    c7 24             	r7 += 0x4			  ## filtbank.c:214:3
    eddc:    21 ff 00 7e da ff 	if (r7 != 0x800) goto -0x4c <.GJTIE286_0_0_+0xAC : ed96 >			  ## filtbank.c:214:3
    ede2:    00 f1 04 80       	r0 = r8 + 0x4  #			  ## filtbank.c:37:10
    ede6:    03 21             		 r3 = [sp+4]			  ## filtbank.c:37:10
    ede8:    41 20             	r1 = 0x0			  ## filtbank.c:37:10
    edea:    04 85             	goto 0xa <.GJTIE286_0_0_+0x10C : edf6 >			  ## filtbank.c:37:10
    edec:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## filtbank.c:225:17
    edf0:    d8 ec bb 21       	[r11+r1<<2] = r2			  ## filtbank.c:225:15
    edf4:    c1 21             	r1 += 0x1			  ## filtbank.c:224:30
    edf6:    b1 f8 f9 81       	if (r1 != 0x1c0) goto -0xe <.GJTIE286_0_0_+0x102 : edec >			  ## filtbank.c:224:3
    edfa:    10 e1 00 35       	r0 = r3 + 0x1500			  ## filtbank.c:37:10
    edfe:    41 e0 fc 08       	r1 = 0x8fc <WOLAAnalysisFilter_Float_M128_m4_r1+0xF8 : 8fc >			  ## filtbank.c:37:10
    ee02:    42 20             	r2 = 0x0			  ## filtbank.c:37:10
    ee04:    48 e0 40 fe       	r8 = -0x1c0 <RAM_LIMIT_H+0xFFFFFFFFFFE5FE40 : fffffffffffffe40 >			  ## filtbank.c:37:10
    ee08:    44 e0 c0 01       	r4 = 0x1c0 <_MASK_MEM_SIZE+0x1C : 1c0 >			  ## filtbank.c:37:10
    ee0c:    04 9a             	goto 0x34 <.GJTIE286_0_0_+0x158 : ee42 >			  ## filtbank.c:37:10
    ee0e:    d8 ec 02 62       	r6 = [r0+r2]			  ## filtbank.c:228:4
    ee12:    b4 e0 a0 71       	r7 = r10 + r1			  ## filtbank.c:228:4
    ee16:    d8 ec 7a 78       	r7 = [r7+r8<<2]			  ## filtbank.c:228:4
    ee1a:    f8 e1 70 76       	r7_r6 = r7 * r6 (s)			  ## filtbank.c:228:4
    ee1e:    d0 e1 0e 69       	r7_r6 >>= 0x1e			  ## filtbank.c:228:4
    ee22:    b4 e0 b0 32       	r3 = r11 + r2			  ## filtbank.c:229:26
    ee26:    d8 ec 3b 64       	[r3+r4<<2] = r6			  ## filtbank.c:229:26
    ee2a:    d8 ec 02 32       	r3 = [r0+r2]			  ## filtbank.c:230:4
    ee2e:    d8 ec a2 62       	r6 = [r10+r2]			  ## filtbank.c:230:4
    ee32:    f8 e1 60 73       	r7_r6 = r6 * r3 (s)			  ## filtbank.c:230:4
    ee36:    d0 e1 0e 69       	r7_r6 >>= 0x1e			  ## filtbank.c:230:4
    ee3a:    d8 ec b3 61       	[r11+r1] = r6			  ## filtbank.c:231:38
    ee3e:    c2 24             	r2 += 0x4			  ## filtbank.c:226:3
    ee40:    f9 3c             	r1 += -0x4			  ## filtbank.c:226:3
    ee42:    a2 f8 e4 01       	if (r2 != 0x100) goto -0x38 <.GJTIE286_0_0_+0x124 : ee0e >			  ## filtbank.c:226:3
    ee46:    80 14             	r1_r0 = 0
    ee48:    04 83             	goto 0x6 <.GJTIE286_0_0_+0x166 : ee50 >
    ee4a:    d8 ec eb 01       	[r14+r1<<2] = r0			  ## filtbank.c:234:35
    ee4e:    c1 21             	r1 += 0x1			  ## filtbank.c:233:30
    ee50:    b1 f8 fb 81       	if (r1 != 0x1c0) goto -0xa <.GJTIE286_0_0_+0x160 : ee4a >
    ee54:    55 9e             	goto 0x57c <.GJTIE286_0_0_+0x6E8 : f3d2 >
    ee56:    08 e1 10 50       	r8 = r5 + 0x10			  ## filtbank.c:239:27
    ee5a:    43 20             	r3 = 0x0			  ## filtbank.c:239:3
    ee5c:    46 20             	r6 = 0x0
    ee5e:    81 16             	r1 = r8			  ## filtbank.c:239:3
    ee60:    92 16             	r2 = r9			  ## filtbank.c:239:3
    ee62:    bf ea b5 fe       	call -0x296 <faad_imdct : ebd0 >			  ## filtbank.c:239:3
    ee66:    02 e1 00 92       	r2 = r9 + 0x200			  ## filtbank.c:240:44
    ee6a:    63 20             	r3 = 0x80			  ## filtbank.c:240:3
    ee6c:    f0 16             	r0 = r15			  ## filtbank.c:240:3
    ee6e:    81 16             	r1 = r8			  ## filtbank.c:240:3
    ee70:    bf ea ae fe       	call -0x2a4 <faad_imdct : ebd0 >			  ## filtbank.c:240:3
    ee74:    02 e1 00 94       	r2 = r9 + 0x400			  ## filtbank.c:241:44
    ee78:    43 e0 00 01       	r3 = 0x100 <os_code_size+0x56 : 100 >			  ## filtbank.c:241:3
    ee7c:    f0 16             	r0 = r15			  ## filtbank.c:241:3
    ee7e:    81 16             	r1 = r8			  ## filtbank.c:241:3
    ee80:    bf ea a6 fe       	call -0x2b4 <faad_imdct : ebd0 >			  ## filtbank.c:241:3
    ee84:    02 e1 00 96       	r2 = r9 + 0x600			  ## filtbank.c:242:44
    ee88:    43 e0 80 01       	r3 = 0x180 <var_bss_size+0x74 : 180 >			  ## filtbank.c:242:3
    ee8c:    f0 16             	r0 = r15			  ## filtbank.c:242:3
    ee8e:    81 16             	r1 = r8			  ## filtbank.c:242:3
    ee90:    bf ea 9e fe       	call -0x2c4 <faad_imdct : ebd0 >			  ## filtbank.c:242:3
    ee94:    02 e1 00 98       	r2 = r9 + 0x800			  ## filtbank.c:243:44
    ee98:    43 e0 00 02       	r3 = 0x200 <ROM_RAM_SIZE : 200 >			  ## filtbank.c:243:3
    ee9c:    f0 16             	r0 = r15			  ## filtbank.c:243:3
    ee9e:    81 16             	r1 = r8			  ## filtbank.c:243:3
    eea0:    bf ea 96 fe       	call -0x2d4 <faad_imdct : ebd0 >			  ## filtbank.c:243:3
    eea4:    02 e1 00 9a       	r2 = r9 + 0xa00			  ## filtbank.c:244:44
    eea8:    43 e0 80 02       	r3 = 0x280 <ROM_RAM_SIZE+0x80 : 280 >			  ## filtbank.c:244:3
    eeac:    f0 16             	r0 = r15			  ## filtbank.c:244:3
    eeae:    81 16             	r1 = r8			  ## filtbank.c:244:3
    eeb0:    bf ea 8e fe       	call -0x2e4 <faad_imdct : ebd0 >			  ## filtbank.c:244:3
    eeb4:    02 e1 00 9c       	r2 = r9 + 0xc00			  ## filtbank.c:245:44
    eeb8:    43 e0 00 03       	r3 = 0x300 <ROM_RAM_SIZE+0x100 : 300 >			  ## filtbank.c:245:3
    eebc:    f0 16             	r0 = r15			  ## filtbank.c:245:3
    eebe:    81 16             	r1 = r8			  ## filtbank.c:245:3
    eec0:    bf ea 86 fe       	call -0x2f4 <faad_imdct : ebd0 >			  ## filtbank.c:245:3
    eec4:    02 e1 00 9e       	r2 = r9 + 0xe00			  ## filtbank.c:246:44
    eec8:    43 e0 80 03       	r3 = 0x380 <ROM_RAM_SIZE+0x180 : 380 >			  ## filtbank.c:246:3
    eecc:    f0 16             	r0 = r15			  ## filtbank.c:246:3
    eece:    81 16             	r1 = r8			  ## filtbank.c:246:3
    eed0:    bf ea 7e fe       	call -0x304 <faad_imdct : ebd0 >			  ## filtbank.c:246:3
    eed4:    01 22             	r1 = [sp+8]			  ## filtbank.c:246:3
    eed6:    04 85             	goto 0xa <.GJTIE286_0_0_+0x1F8 : eee2 >			  ## filtbank.c:246:3
    eed8:    d8 ec ba 06       	r0 = [r11+r6<<2]			  ## filtbank.c:251:18
    eedc:    d8 ec 1b 06       	[r1+r6<<2] = r0			  ## filtbank.c:251:16
    eee0:    c6 21             	r6 += 0x1			  ## filtbank.c:250:30
    eee2:    b6 f8 f9 81       	if (r6 != 0x1c0) goto -0xe <.GJTIE286_0_0_+0x1EE : eed8 >			  ## filtbank.c:250:3
    eee6:    00 e1 00 71       	r0 = r7 + 0x100			  ## filtbank.c:37:10
    eeea:    41 20             	r1 = 0x0			  ## filtbank.c:37:10
    eeec:    42 e0 fc 07       	r2 = 0x7fc <alg_code_size+0x32C : 7fc >			  ## filtbank.c:37:10
    eef0:    48 e0 00 fe       	r8 = -0x200 <RAM_LIMIT_H+0xFFFFFFFFFFE5FE00 : fffffffffffffe00 >			  ## filtbank.c:37:10
    eef4:    49 e0 00 02       	r9 = 0x200 <ROM_RAM_SIZE : 200 >			  ## filtbank.c:37:10
    eef8:    14 85             	goto 0x4a <.GJTIE286_0_0_+0x25A : ef44 >
    eefa:    87 dc             	r7 = r0 + r2  #			  ## filtbank.c:255:4
    eefc:    05 22             		 r5 = [sp+8]
    eefe:    d8 ec 42 31       	r3 = [r4+r1]			  ## filtbank.c:255:4
    ef02:    d8 ec 7a 78       	r7 = [r7+r8<<2]			  ## filtbank.c:255:4
    ef06:    d8 ec b2 62       	r6 = [r11+r2]			  ## filtbank.c:256:41
    ef0a:    a3 e0 00 30       	r3 = 0x0 - r3			  ## filtbank.c:255:4
    ef0e:    f8 e1 70 d3       	r13_r12 = r7 * r3 (s)			  ## filtbank.c:255:4
    ef12:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:255:4
    ef16:    b4 e0 c0 36       	r3 = r12 + r6			  ## filtbank.c:256:75
    ef1a:    d8 ec 53 32       	[r5+r2] = r3			  ## filtbank.c:256:39
    ef1e:    d8 ec 42 31       	r3 = [r4+r1]			  ## filtbank.c:258:4
    ef22:    d8 ec 02 61       	r6 = [r0+r1]			  ## filtbank.c:258:4
    ef26:    b4 e0 b0 71       	r7 = r11 + r1			  ## filtbank.c:259:37
    ef2a:    d8 ec 7a 79       	r7 = [r7+r9<<2]			  ## filtbank.c:259:37
    ef2e:    f8 e1 60 d3       	r13_r12 = r6 * r3 (s)			  ## filtbank.c:258:4
    ef32:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:258:4
    ef36:    b4 e0 c0 37       	r3 = r12 + r7			  ## filtbank.c:259:67
    ef3a:    5e 1c             	r6 = r5 + r1			  ## filtbank.c:259:35
    ef3c:    d8 ec 6b 39       	[r6+r9<<2] = r3			  ## filtbank.c:259:35
    ef40:    fa 3c             	r2 += -0x4			  ## filtbank.c:253:3
    ef42:    c1 24             	r1 += 0x4			  ## filtbank.c:253:3
    ef44:    a1 f8 d9 01       	if (r1 != 0x100) goto -0x4e <.GJTIE286_0_0_+0x210 : eefa >			  ## filtbank.c:253:3
    ef48:    82 d4             	r3_r2 = 0  #
    ef4a:    00 21             		 r0 = [sp+4]			  ## filtbank.c:37:10
    ef4c:    09 f1 00 07       	r9 = r0 + 0x700  #			  ## filtbank.c:37:10
    ef50:    00 22             		 r0 = [sp+8]			  ## filtbank.c:37:10
    ef52:    08 e1 00 09       	r8 = r0 + 0x900			  ## filtbank.c:37:10
    ef56:    14 93             	goto 0x66 <.GJTIE286_0_0_+0x2D4 : efbe >			  ## filtbank.c:37:10
    ef58:    d8 ec a2 c2       	r12 = [r10+r2]			  ## filtbank.c:265:5
    ef5c:    b4 e0 90 63       	r6 = r9 + r3			  ## filtbank.c:265:5
    ef60:    d1 ec 6c 7f       	r7 = [r6+0x1fc]			  ## filtbank.c:265:5
    ef64:    d8 ec 92 12       	r1 = [r9+r2]			  ## filtbank.c:264:5
    ef68:    b4 e0 a0 53       	r5 = r10 + r3			  ## filtbank.c:264:5
    ef6c:    d1 ec 5c 0f       	r0 = [r5+0x1fc]			  ## filtbank.c:264:5
    ef70:    a7 e0 00 70       	r7 = 0x0 - r7			  ## filtbank.c:265:5
    ef74:    d8 ec e2 42       	r4 = [r14+r2]			  ## filtbank.c:268:42
    ef78:    f8 e1 c0 d7       	r13_r12 = r12 * r7 (s)			  ## filtbank.c:265:5
    ef7c:    fc e1 00 d1       	r13_r12 += r0 * r1 (s)			  ## filtbank.c:265:5
    ef80:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:266:5
    ef84:    b4 e0 c0 04       	r0 = r12 + r4			  ## filtbank.c:268:77
    ef88:    d8 ec 83 02       	[r8+r2] = r0			  ## filtbank.c:268:40
    ef8c:    d1 ec 6c 0f       	r0 = [r6+0x1fc]			  ## filtbank.c:272:5
    ef90:    d1 ec 5c 1f       	r1 = [r5+0x1fc]			  ## filtbank.c:272:5
    ef94:    d8 ec 92 42       	r4 = [r9+r2]			  ## filtbank.c:271:5
    ef98:    d8 ec a2 52       	r5 = [r10+r2]			  ## filtbank.c:271:5
    ef9c:    b4 e0 e0 63       	r6 = r14 + r3			  ## filtbank.c:275:46
    efa0:    d1 ec 6c 6f       	r6 = [r6+0x1fc]			  ## filtbank.c:275:46
    efa4:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## filtbank.c:272:5
    efa8:    fc e1 50 14       	r1_r0 += r5 * r4 (s)			  ## filtbank.c:272:5
    efac:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## filtbank.c:273:5
    efb0:    60 18             	r0 += r6			  ## filtbank.c:275:85
    efb2:    b4 e0 80 13       	r1 = r8 + r3			  ## filtbank.c:275:44
    efb6:    d1 ec 1d 0f       	[r1+0x1fc] = r0			  ## filtbank.c:275:44
    efba:    c2 24             	r2 += 0x4			  ## filtbank.c:261:3
    efbc:    fb 3c             	r3 += -0x4			  ## filtbank.c:261:3
    efbe:    e3 f8 cb 01       	if (r3 != -0x100) goto -0x6a <.GJTIE286_0_0_+0x26E : ef58 >			  ## filtbank.c:261:3
    efc2:    d4 e9 01 e0       	[sp] = r14
    efc6:    00 21             	r0 = [sp+4]			  ## filtbank.c:37:10
    efc8:    0c f1 00 09       	r12 = r0 + 0x900  #			  ## filtbank.c:37:10
    efcc:    00 22             		 r0 = [sp+8]			  ## filtbank.c:37:10
    efce:    08 e1 00 bb       	r8 = r11 + 0xb00			  ## filtbank.c:37:10
    efd2:    09 e1 00 0b       	r9 = r0 + 0xb00			  ## filtbank.c:37:10
    efd6:    43 20             	r3 = 0x0			  ## filtbank.c:37:10
    efd8:    44 20             	r4 = 0x0			  ## filtbank.c:37:10
    efda:    14 93             	goto 0x66 <.GJTIE286_0_0_+0x358 : f042 >			  ## filtbank.c:37:10
    efdc:    d8 ec a2 d3       	r13 = [r10+r3]			  ## filtbank.c:282:5
    efe0:    b4 e0 c0 64       	r6 = r12 + r4			  ## filtbank.c:282:5
    efe4:    d1 ec 6c 7f       	r7 = [r6+0x1fc]			  ## filtbank.c:282:5
    efe8:    d8 ec c2 13       	r1 = [r12+r3]			  ## filtbank.c:281:5
    efec:    b4 e0 a0 24       	r2 = r10 + r4			  ## filtbank.c:281:5
    eff0:    d1 ec 2c 0f       	r0 = [r2+0x1fc]			  ## filtbank.c:281:5
    eff4:    a7 e0 00 70       	r7 = 0x0 - r7			  ## filtbank.c:282:5
    eff8:    d8 ec 82 53       	r5 = [r8+r3]			  ## filtbank.c:285:42
    effc:    f8 e1 d0 f7       	r15_r14 = r13 * r7 (s)			  ## filtbank.c:282:5
    f000:    fc e1 00 f1       	r15_r14 += r0 * r1 (s)			  ## filtbank.c:282:5
    f004:    d0 e1 0e e9       	r15_r14 >>= 0x1e			  ## filtbank.c:283:5
    f008:    b4 e0 e0 05       	r0 = r14 + r5			  ## filtbank.c:285:77
    f00c:    d8 ec 93 03       	[r9+r3] = r0			  ## filtbank.c:285:40
    f010:    d1 ec 6c 0f       	r0 = [r6+0x1fc]			  ## filtbank.c:289:5
    f014:    d1 ec 2c 1f       	r1 = [r2+0x1fc]			  ## filtbank.c:289:5
    f018:    d8 ec c2 23       	r2 = [r12+r3]			  ## filtbank.c:288:5
    f01c:    d8 ec a2 53       	r5 = [r10+r3]			  ## filtbank.c:288:5
    f020:    b4 e0 80 64       	r6 = r8 + r4			  ## filtbank.c:292:46
    f024:    d1 ec 6c 6f       	r6 = [r6+0x1fc]			  ## filtbank.c:292:46
    f028:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## filtbank.c:289:5
    f02c:    fc e1 50 12       	r1_r0 += r5 * r2 (s)			  ## filtbank.c:289:5
    f030:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## filtbank.c:290:5
    f034:    60 18             	r0 += r6			  ## filtbank.c:292:85
    f036:    b4 e0 90 14       	r1 = r9 + r4			  ## filtbank.c:292:44
    f03a:    d1 ec 1d 0f       	[r1+0x1fc] = r0			  ## filtbank.c:292:44
    f03e:    c3 24             	r3 += 0x4			  ## filtbank.c:278:3
    f040:    fc 3c             	r4 += -0x4			  ## filtbank.c:278:3
    f042:    e4 f8 cb 01       	if (r4 != -0x100) goto -0x6a <.GJTIE286_0_0_+0x2F2 : efdc >			  ## filtbank.c:278:3
    f046:    00 21             	r0 = [sp+4]			  ## filtbank.c:37:10
    f048:    0c f1 00 0b       	r12 = r0 + 0xb00  #			  ## filtbank.c:37:10
    f04c:    00 22             		 r0 = [sp+8]			  ## filtbank.c:37:10
    f04e:    08 e1 00 bd       	r8 = r11 + 0xd00			  ## filtbank.c:37:10
    f052:    09 e1 00 0d       	r9 = r0 + 0xd00			  ## filtbank.c:37:10
    f056:    43 20             	r3 = 0x0			  ## filtbank.c:37:10
    f058:    44 20             	r4 = 0x0			  ## filtbank.c:37:10
    f05a:    14 93             	goto 0x66 <.GJTIE286_0_0_+0x3D8 : f0c2 >			  ## filtbank.c:37:10
    f05c:    d8 ec a2 d3       	r13 = [r10+r3]			  ## filtbank.c:299:5
    f060:    b4 e0 c0 64       	r6 = r12 + r4			  ## filtbank.c:299:5
    f064:    d1 ec 6c 7f       	r7 = [r6+0x1fc]			  ## filtbank.c:299:5
    f068:    d8 ec c2 13       	r1 = [r12+r3]			  ## filtbank.c:298:5
    f06c:    b4 e0 a0 24       	r2 = r10 + r4			  ## filtbank.c:298:5
    f070:    d1 ec 2c 0f       	r0 = [r2+0x1fc]			  ## filtbank.c:298:5
    f074:    a7 e0 00 70       	r7 = 0x0 - r7			  ## filtbank.c:299:5
    f078:    d8 ec 82 53       	r5 = [r8+r3]			  ## filtbank.c:302:42
    f07c:    f8 e1 d0 f7       	r15_r14 = r13 * r7 (s)			  ## filtbank.c:299:5
    f080:    fc e1 00 f1       	r15_r14 += r0 * r1 (s)			  ## filtbank.c:299:5
    f084:    d0 e1 0e e9       	r15_r14 >>= 0x1e			  ## filtbank.c:300:5
    f088:    b4 e0 e0 05       	r0 = r14 + r5			  ## filtbank.c:302:77
    f08c:    d8 ec 93 03       	[r9+r3] = r0			  ## filtbank.c:302:40
    f090:    d1 ec 6c 0f       	r0 = [r6+0x1fc]			  ## filtbank.c:306:5
    f094:    d1 ec 2c 1f       	r1 = [r2+0x1fc]			  ## filtbank.c:306:5
    f098:    d8 ec c2 23       	r2 = [r12+r3]			  ## filtbank.c:305:5
    f09c:    d8 ec a2 53       	r5 = [r10+r3]			  ## filtbank.c:305:5
    f0a0:    b4 e0 80 64       	r6 = r8 + r4			  ## filtbank.c:309:46
    f0a4:    d1 ec 6c 6f       	r6 = [r6+0x1fc]			  ## filtbank.c:309:46
    f0a8:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## filtbank.c:306:5
    f0ac:    fc e1 50 12       	r1_r0 += r5 * r2 (s)			  ## filtbank.c:306:5
    f0b0:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## filtbank.c:307:5
    f0b4:    60 18             	r0 += r6			  ## filtbank.c:309:85
    f0b6:    b4 e0 90 14       	r1 = r9 + r4			  ## filtbank.c:309:44
    f0ba:    d1 ec 1d 0f       	[r1+0x1fc] = r0			  ## filtbank.c:309:44
    f0be:    c3 24             	r3 += 0x4			  ## filtbank.c:295:3
    f0c0:    fc 3c             	r4 += -0x4			  ## filtbank.c:295:3
    f0c2:    e4 f8 cb 01       	if (r4 != -0x100) goto -0x6a <.GJTIE286_0_0_+0x372 : f05c >			  ## filtbank.c:295:3
    f0c6:    0c f1 00 bf       	r12 = r11 + 0xf00  #			  ## filtbank.c:37:10
    f0ca:    00 22             		 r0 = [sp+8]			  ## filtbank.c:37:10
    f0cc:    01 e1 00 0f       	r1 = r0 + 0xf00			  ## filtbank.c:37:10
    f0d0:    42 20             	r2 = 0x0			  ## filtbank.c:37:10
    f0d2:    43 e0 fc 0e       	r3 = 0xefc <usb_code_size+0x438 : efc >			  ## filtbank.c:37:10
    f0d6:    48 e0 40 03       	r8 = 0x340 <ROM_RAM_SIZE+0x140 : 340 >			  ## filtbank.c:37:10
    f0da:    49 e0 c0 fc       	r9 = -0x340 <RAM_LIMIT_H+0xFFFFFFFFFFE5FCC0 : fffffffffffffcc0 >			  ## filtbank.c:37:10
    f0de:    04 9b             	goto 0x36 <.GJTIE286_0_0_+0x42C : f116 >			  ## filtbank.c:37:10
    f0e0:    d8 ec a2 52       	r5 = [r10+r2]			  ## filtbank.c:316:5
    f0e4:    00 21             	r0 = [sp+4]			  ## filtbank.c:316:5
    f0e6:    d8 ec 02 73       	r7 = [r0+r3]			  ## filtbank.c:316:5
    f0ea:    84 1c             	r4 = r0 + r2			  ## filtbank.c:315:5
    f0ec:    d8 ec 4a 48       	r4 = [r4+r8<<2]			  ## filtbank.c:315:5
    f0f0:    b4 e0 a0 63       	r6 = r10 + r3			  ## filtbank.c:315:5
    f0f4:    d8 ec 6a 69       	r6 = [r6+r9<<2]			  ## filtbank.c:315:5
    f0f8:    a7 e0 00 70       	r7 = 0x0 - r7			  ## filtbank.c:316:5
    f0fc:    d8 ec c2 02       	r0 = [r12+r2]			  ## filtbank.c:319:42
    f100:    f8 e1 50 f7       	r15_r14 = r5 * r7 (s)			  ## filtbank.c:316:5
    f104:    fc e1 60 f4       	r15_r14 += r6 * r4 (s)			  ## filtbank.c:316:5
    f108:    d0 e1 0e e9       	r15_r14 >>= 0x1e			  ## filtbank.c:317:5
    f10c:    e0 18             	r0 += r14			  ## filtbank.c:319:77
    f10e:    d8 ec 13 02       	[r1+r2] = r0			  ## filtbank.c:319:40
    f112:    fb 3c             	r3 += -0x4			  ## filtbank.c:312:3
    f114:    c2 24             	r2 += 0x4			  ## filtbank.c:312:3
    f116:    a2 f8 e3 01       	if (r2 != 0x100) goto -0x3a <.GJTIE286_0_0_+0x3F6 : f0e0 >			  ## filtbank.c:312:3
    f11a:    00 f1 00 a1       	r0 = r10 + 0x100  #			  ## filtbank.c:37:10
    f11e:    04 21             		 r4 = [sp+4]			  ## filtbank.c:37:10
    f120:    41 20             	r1 = 0x0			  ## filtbank.c:37:10
    f122:    42 e0 fc 0d       	r2 = 0xdfc <usb_code_size+0x338 : dfc >			  ## filtbank.c:37:10
    f126:    48 e0 80 03       	r8 = 0x380 <ROM_RAM_SIZE+0x180 : 380 >			  ## filtbank.c:37:10
    f12a:    49 e0 80 fc       	r9 = -0x380 <RAM_LIMIT_H+0xFFFFFFFFFFE5FC80 : fffffffffffffc80 >			  ## filtbank.c:37:10
    f12e:    d4 e9 00 e0       	r14 = [sp]			  ## filtbank.c:37:10
    f132:    04 94             	goto 0x28 <.GJTIE286_0_0_+0x472 : f15c >			  ## filtbank.c:37:10
    f134:    d8 ec 02 51       	r5 = [r0+r1]			  ## filtbank.c:328:5
    f138:    4e 1c             	r6 = r4 + r1			  ## filtbank.c:328:5
    f13a:    d8 ec 6a 68       	r6 = [r6+r8<<2]			  ## filtbank.c:328:5
    f13e:    d8 ec 42 72       	r7 = [r4+r2]			  ## filtbank.c:327:5
    f142:    83 1c             	r3 = r0 + r2			  ## filtbank.c:327:5
    f144:    d8 ec 3a 39       	r3 = [r3+r9<<2]			  ## filtbank.c:327:5
    f148:    f8 e1 50 d6       	r13_r12 = r5 * r6 (s)			  ## filtbank.c:328:5
    f14c:    fc e1 30 d7       	r13_r12 += r3 * r7 (s)			  ## filtbank.c:328:5
    f150:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:329:5
    f154:    d8 ec b3 c1       	[r11+r1] = r12			  ## filtbank.c:331:15
    f158:    fa 3c             	r2 += -0x4			  ## filtbank.c:324:3
    f15a:    c1 24             	r1 += 0x4			  ## filtbank.c:324:3
    f15c:    a1 f8 ea 01       	if (r1 != 0x100) goto -0x2c <.GJTIE286_0_0_+0x44A : f134 >			  ## filtbank.c:324:3
    f160:    09 e1 00 4f       	r9 = r4 + 0xf00			  ## filtbank.c:37:10
    f164:    08 e1 fc b2       	r8 = r11 + 0x2fc			  ## filtbank.c:37:10
    f168:    82 14             	r3_r2 = 0			  ## filtbank.c:37:10
    f16a:    14 8a             	goto 0x54 <.GJTIE286_0_0_+0x4D6 : f1c0 >			  ## filtbank.c:37:10
    f16c:    d8 ec a2 42       	r4 = [r10+r2]			  ## filtbank.c:338:5
    f170:    b4 e0 90 53       	r5 = r9 + r3			  ## filtbank.c:338:5
    f174:    d1 ec 5c 6f       	r6 = [r5+0x1fc]			  ## filtbank.c:338:5
    f178:    d8 ec 92 72       	r7 = [r9+r2]			  ## filtbank.c:337:5
    f17c:    b4 e0 a0 13       	r1 = r10 + r3			  ## filtbank.c:337:5
    f180:    d1 ec 1c 0f       	r0 = [r1+0x1fc]			  ## filtbank.c:337:5
    f184:    a6 e0 00 60       	r6 = 0x0 - r6			  ## filtbank.c:338:5
    f188:    f8 e1 40 d6       	r13_r12 = r4 * r6 (s)			  ## filtbank.c:338:5
    f18c:    fc e1 00 d7       	r13_r12 += r0 * r7 (s)			  ## filtbank.c:338:5
    f190:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:339:5
    f194:    b4 e0 80 02       	r0 = r8 + r2			  ## filtbank.c:341:23
    f198:    d6 ec 05 c0       	[r0+-0x1fc] = r12			  ## filtbank.c:341:23
    f19c:    d1 ec 5c 0f       	r0 = [r5+0x1fc]			  ## filtbank.c:345:5
    f1a0:    d1 ec 1c 1f       	r1 = [r1+0x1fc]			  ## filtbank.c:345:5
    f1a4:    d8 ec 92 42       	r4 = [r9+r2]			  ## filtbank.c:344:5
    f1a8:    d8 ec a2 52       	r5 = [r10+r2]			  ## filtbank.c:344:5
    f1ac:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## filtbank.c:345:5
    f1b0:    fc e1 50 14       	r1_r0 += r5 * r4 (s)			  ## filtbank.c:345:5
    f1b4:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## filtbank.c:346:5
    f1b8:    d8 ec 83 03       	[r8+r3] = r0			  ## filtbank.c:348:36
    f1bc:    c2 24             	r2 += 0x4			  ## filtbank.c:334:3
    f1be:    fb 3c             	r3 += -0x4			  ## filtbank.c:334:3
    f1c0:    e3 f8 d4 01       	if (r3 != -0x100) goto -0x58 <.GJTIE286_0_0_+0x482 : f16c >			  ## filtbank.c:334:3
    f1c4:    82 d4             	r3_r2 = 0  #
    f1c6:    00 21             		 r0 = [sp+4]			  ## filtbank.c:37:10
    f1c8:    19 e1 00 01       	r9 = r0 + 0x1100			  ## filtbank.c:37:10
    f1cc:    08 e1 00 b3       	r8 = r11 + 0x300			  ## filtbank.c:37:10
    f1d0:    14 8a             	goto 0x54 <.GJTIE286_0_0_+0x53C : f226 >			  ## filtbank.c:37:10
    f1d2:    d8 ec a2 42       	r4 = [r10+r2]			  ## filtbank.c:355:5
    f1d6:    b4 e0 90 53       	r5 = r9 + r3			  ## filtbank.c:355:5
    f1da:    d1 ec 5c 6f       	r6 = [r5+0x1fc]			  ## filtbank.c:355:5
    f1de:    d8 ec 92 72       	r7 = [r9+r2]			  ## filtbank.c:354:5
    f1e2:    b4 e0 a0 13       	r1 = r10 + r3			  ## filtbank.c:354:5
    f1e6:    d1 ec 1c 0f       	r0 = [r1+0x1fc]			  ## filtbank.c:354:5
    f1ea:    a6 e0 00 60       	r6 = 0x0 - r6			  ## filtbank.c:355:5
    f1ee:    f8 e1 40 d6       	r13_r12 = r4 * r6 (s)			  ## filtbank.c:355:5
    f1f2:    fc e1 00 d7       	r13_r12 += r0 * r7 (s)			  ## filtbank.c:355:5
    f1f6:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:356:5
    f1fa:    d8 ec 83 c2       	[r8+r2] = r12			  ## filtbank.c:358:36
    f1fe:    d1 ec 5c 0f       	r0 = [r5+0x1fc]			  ## filtbank.c:362:5
    f202:    d1 ec 1c 1f       	r1 = [r1+0x1fc]			  ## filtbank.c:362:5
    f206:    d8 ec 92 42       	r4 = [r9+r2]			  ## filtbank.c:361:5
    f20a:    d8 ec a2 52       	r5 = [r10+r2]			  ## filtbank.c:361:5
    f20e:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## filtbank.c:362:5
    f212:    fc e1 50 14       	r1_r0 += r5 * r4 (s)			  ## filtbank.c:362:5
    f216:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## filtbank.c:363:5
    f21a:    b4 e0 80 43       	r4 = r8 + r3			  ## filtbank.c:365:40
    f21e:    d1 ec 4d 0f       	[r4+0x1fc] = r0			  ## filtbank.c:365:40
    f222:    c2 24             	r2 += 0x4			  ## filtbank.c:351:3
    f224:    fb 3c             	r3 += -0x4			  ## filtbank.c:351:3
    f226:    e3 f8 d4 01       	if (r3 != -0x100) goto -0x58 <.GJTIE286_0_0_+0x4E8 : f1d2 >			  ## filtbank.c:351:3
    f22a:    82 d4             	r3_r2 = 0  #
    f22c:    00 21             		 r0 = [sp+4]			  ## filtbank.c:37:10
    f22e:    19 e1 00 03       	r9 = r0 + 0x1300			  ## filtbank.c:37:10
    f232:    08 e1 00 b5       	r8 = r11 + 0x500			  ## filtbank.c:37:10
    f236:    14 8a             	goto 0x54 <.GJTIE286_0_0_+0x5A2 : f28c >			  ## filtbank.c:37:10
    f238:    d8 ec a2 42       	r4 = [r10+r2]			  ## filtbank.c:373:5
    f23c:    b4 e0 90 53       	r5 = r9 + r3			  ## filtbank.c:373:5
    f240:    d1 ec 5c 6f       	r6 = [r5+0x1fc]			  ## filtbank.c:373:5
    f244:    d8 ec 92 72       	r7 = [r9+r2]			  ## filtbank.c:372:5
    f248:    b4 e0 a0 13       	r1 = r10 + r3			  ## filtbank.c:372:5
    f24c:    d1 ec 1c 0f       	r0 = [r1+0x1fc]			  ## filtbank.c:372:5
    f250:    a6 e0 00 60       	r6 = 0x0 - r6			  ## filtbank.c:373:5
    f254:    f8 e1 40 d6       	r13_r12 = r4 * r6 (s)			  ## filtbank.c:373:5
    f258:    fc e1 00 d7       	r13_r12 += r0 * r7 (s)			  ## filtbank.c:373:5
    f25c:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## filtbank.c:374:5
    f260:    d8 ec 83 c2       	[r8+r2] = r12			  ## filtbank.c:376:36
    f264:    d1 ec 5c 0f       	r0 = [r5+0x1fc]			  ## filtbank.c:380:5
    f268:    d1 ec 1c 1f       	r1 = [r1+0x1fc]			  ## filtbank.c:380:5
    f26c:    d8 ec 92 42       	r4 = [r9+r2]			  ## filtbank.c:379:5
    f270:    d8 ec a2 52       	r5 = [r10+r2]			  ## filtbank.c:379:5
    f274:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## filtbank.c:380:5
    f278:    fc e1 50 14       	r1_r0 += r5 * r4 (s)			  ## filtbank.c:380:5
    f27c:    d0 e1 0e 09       	r1_r0 >>= 0x1e			  ## filtbank.c:381:5
    f280:    b4 e0 80 43       	r4 = r8 + r3			  ## filtbank.c:383:40
    f284:    d1 ec 4d 0f       	[r4+0x1fc] = r0			  ## filtbank.c:383:40
    f288:    c2 24             	r2 += 0x4			  ## filtbank.c:369:3
    f28a:    fb 3c             	r3 += -0x4			  ## filtbank.c:369:3
    f28c:    e3 f8 d4 01       	if (r3 != -0x100) goto -0x58 <.GJTIE286_0_0_+0x54E : f238 >			  ## filtbank.c:369:3
    f290:    41 f0 fc 08       	r1 = 0x8fc  # <WOLAAnalysisFilter_Float_M128_m4_r1+0xF8 : 8fc >
    f294:    00 21             		 r0 = [sp+4]			  ## filtbank.c:37:10
    f296:    10 e1 00 05       	r0 = r0 + 0x1500			  ## filtbank.c:37:10
    f29a:    42 20             	r2 = 0x0			  ## filtbank.c:37:10
    f29c:    43 e0 40 fe       	r3 = -0x1c0 <RAM_LIMIT_H+0xFFFFFFFFFFE5FE40 : fffffffffffffe40 >			  ## filtbank.c:37:10
    f2a0:    44 e0 c0 01       	r4 = 0x1c0 <_MASK_MEM_SIZE+0x1C : 1c0 >			  ## filtbank.c:37:10
    f2a4:    04 9a             	goto 0x34 <.GJTIE286_0_0_+0x5F0 : f2da >			  ## filtbank.c:37:10
    f2a6:    d8 ec 02 52       	r5 = [r0+r2]			  ## filtbank.c:388:4
    f2aa:    b4 e0 a0 61       	r6 = r10 + r1			  ## filtbank.c:388:4
    f2ae:    d8 ec 6a 63       	r6 = [r6+r3<<2]			  ## filtbank.c:388:4
    f2b2:    f8 e1 60 75       	r7_r6 = r6 * r5 (s)			  ## filtbank.c:388:4
    f2b6:    d0 e1 0e 69       	r7_r6 >>= 0x1e			  ## filtbank.c:388:4
    f2ba:    b4 e0 b0 52       	r5 = r11 + r2			  ## filtbank.c:389:36
    f2be:    d8 ec 5b 64       	[r5+r4<<2] = r6			  ## filtbank.c:389:36
    f2c2:    d8 ec 02 52       	r5 = [r0+r2]			  ## filtbank.c:391:4
    f2c6:    d8 ec a2 62       	r6 = [r10+r2]			  ## filtbank.c:391:4
    f2ca:    f8 e1 60 75       	r7_r6 = r6 * r5 (s)			  ## filtbank.c:391:4
    f2ce:    d0 e1 0e 69       	r7_r6 >>= 0x1e			  ## filtbank.c:391:4
    f2d2:    d8 ec b3 61       	[r11+r1] = r6			  ## filtbank.c:392:40
    f2d6:    c2 24             	r2 += 0x4			  ## filtbank.c:386:3
    f2d8:    f9 3c             	r1 += -0x4			  ## filtbank.c:386:3
    f2da:    a2 f8 e4 01       	if (r2 != 0x100) goto -0x38 <.GJTIE286_0_0_+0x5BC : f2a6 >			  ## filtbank.c:386:3
    f2de:    80 14             	r1_r0 = 0
    f2e0:    04 83             	goto 0x6 <.GJTIE286_0_0_+0x5FE : f2e8 >
    f2e2:    d8 ec eb 01       	[r14+r1<<2] = r0			  ## filtbank.c:396:35
    f2e6:    c1 21             	r1 += 0x1			  ## filtbank.c:395:30
    f2e8:    b1 f8 fb 81       	if (r1 != 0x1c0) goto -0xa <.GJTIE286_0_0_+0x5F8 : f2e2 >
    f2ec:    34 92             	goto 0xe4 <.GJTIE286_0_0_+0x6E8 : f3d2 >
    f2ee:    01 e1 3c 50       	r1 = r5 + 0x3c			  ## filtbank.c:401:27
    f2f2:    43 20             	r3 = 0x0			  ## filtbank.c:401:3
    f2f4:    45 20             	r5 = 0x0
    f2f6:    92 16             	r2 = r9			  ## filtbank.c:401:3
    f2f8:    bf ea 6a fc       	call -0x72c <faad_imdct : ebd0 >			  ## filtbank.c:401:3
    f2fc:    01 22             	r1 = [sp+8]
    f2fe:    04 85             	goto 0xa <.GJTIE286_0_0_+0x620 : f30a >
    f300:    d8 ec ba 05       	r0 = [r11+r5<<2]			  ## filtbank.c:406:18
    f304:    d8 ec 1b 05       	[r1+r5<<2] = r0			  ## filtbank.c:406:16
    f308:    c5 21             	r5 += 0x1			  ## filtbank.c:405:30
    f30a:    b5 f8 f9 81       	if (r5 != 0x1c0) goto -0xe <.GJTIE286_0_0_+0x616 : f300 >			  ## filtbank.c:405:3
    f30e:    ea 16             	r10 = r14
    f310:    00 e1 00 71       	r0 = r7 + 0x100			  ## filtbank.c:37:10
    f314:    41 20             	r1 = 0x0			  ## filtbank.c:37:10
    f316:    42 e0 fc 07       	r2 = 0x7fc <alg_code_size+0x32C : 7fc >			  ## filtbank.c:37:10
    f31a:    49 e0 00 fe       	r9 = -0x200 <RAM_LIMIT_H+0xFFFFFFFFFFE5FE00 : fffffffffffffe00 >			  ## filtbank.c:37:10
    f31e:    4d e0 00 02       	r13 = 0x200 <ROM_RAM_SIZE : 200 >
    f322:    14 84             	goto 0x48 <.GJTIE286_0_0_+0x682 : f36c >
    f324:    86 dc             	r6 = r0 + r2  #			  ## filtbank.c:410:4
    f326:    05 22             		 r5 = [sp+8]			  ## filtbank.c:410:4
    f328:    d8 ec 42 71       	r7 = [r4+r1]			  ## filtbank.c:410:4
    f32c:    d8 ec 6a 69       	r6 = [r6+r9<<2]			  ## filtbank.c:410:4
    f330:    d8 ec b2 32       	r3 = [r11+r2]			  ## filtbank.c:411:41
    f334:    a7 e0 00 70       	r7 = 0x0 - r7			  ## filtbank.c:410:4
    f338:    f8 e1 60 77       	r7_r6 = r6 * r7 (s)			  ## filtbank.c:410:4
    f33c:    d0 e1 0e 69       	r7_r6 >>= 0x1e			  ## filtbank.c:410:4
    f340:    63 18             	r3 += r6			  ## filtbank.c:411:75
    f342:    d8 ec 53 32       	[r5+r2] = r3			  ## filtbank.c:411:39
    f346:    d8 ec 42 31       	r3 = [r4+r1]			  ## filtbank.c:413:4
    f34a:    d8 ec 02 61       	r6 = [r0+r1]			  ## filtbank.c:413:4
    f34e:    b4 e0 b0 71       	r7 = r11 + r1			  ## filtbank.c:414:37
    f352:    d8 ec 7a 7d       	r7 = [r7+r13<<2]			  ## filtbank.c:414:37
    f356:    f8 e1 60 f3       	r15_r14 = r6 * r3 (s)			  ## filtbank.c:413:4
    f35a:    d0 e1 0e e9       	r15_r14 >>= 0x1e			  ## filtbank.c:413:4
    f35e:    b4 e0 e0 37       	r3 = r14 + r7			  ## filtbank.c:414:67
    f362:    5e 1c             	r6 = r5 + r1			  ## filtbank.c:414:35
    f364:    d8 ec 6b 3d       	[r6+r13<<2] = r3			  ## filtbank.c:414:35
    f368:    fa 3c             	r2 += -0x4			  ## filtbank.c:408:3
    f36a:    c1 24             	r1 += 0x4			  ## filtbank.c:408:3
    f36c:    a1 f8 da 01       	if (r1 != 0x100) goto -0x4c <.GJTIE286_0_0_+0x63A : f324 >			  ## filtbank.c:408:3
    f370:    00 22             	r0 = [sp+8]			  ## filtbank.c:37:10
    f372:    00 f1 00 09       	r0 = r0 + 0x900  #			  ## filtbank.c:37:10
    f376:    01 21             		 r1 = [sp+4]			  ## filtbank.c:37:10
    f378:    01 e1 00 17       	r1 = r1 + 0x700			  ## filtbank.c:37:10
    f37c:    42 20             	r2 = 0x0			  ## filtbank.c:37:10
    f37e:    04 88             	goto 0x10 <.GJTIE286_0_0_+0x6A6 : f390 >			  ## filtbank.c:37:10
    f380:    d8 ec aa 32       	r3 = [r10+r2<<2]			  ## filtbank.c:418:38
    f384:    d8 ec 1a 42       	r4 = [r1+r2<<2]			  ## filtbank.c:418:71
    f388:    43 18             	r3 += r4			  ## filtbank.c:418:69
    f38a:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## filtbank.c:418:36
    f38e:    c2 21             	r2 += 0x1			  ## filtbank.c:416:30
    f390:    b2 f8 f6 81       	if (r2 != 0x1c0) goto -0x14 <.GJTIE286_0_0_+0x696 : f380 >			  ## filtbank.c:416:3
    f394:    00 e1 04 80       	r0 = r8 + 0x4			  ## filtbank.c:37:10
    f398:    41 20             	r1 = 0x0			  ## filtbank.c:37:10
    f39a:    42 e0 fc 0f       	r2 = 0xffc <usb_code_size+0x538 : ffc >			  ## filtbank.c:37:10
    f39e:    04 96             	goto 0x2c <.GJTIE286_0_0_+0x6E2 : f3cc >			  ## filtbank.c:37:10
    f3a0:    d8 ec 02 31       	r3 = [r0+r1]			  ## filtbank.c:424:4
    f3a4:    d8 ec c2 42       	r4 = [r12+r2]			  ## filtbank.c:424:4
    f3a8:    f8 e1 40 53       	r5_r4 = r4 * r3 (s)			  ## filtbank.c:424:4
    f3ac:    d0 e1 0e 49       	r5_r4 >>= 0x1e			  ## filtbank.c:424:4
    f3b0:    d8 ec b3 41       	[r11+r1] = r4			  ## filtbank.c:425:15
    f3b4:    d8 ec 02 31       	r3 = [r0+r1]			  ## filtbank.c:427:4
    f3b8:    d8 ec c2 41       	r4 = [r12+r1]			  ## filtbank.c:427:4
    f3bc:    f8 e1 40 53       	r5_r4 = r4 * r3 (s)			  ## filtbank.c:427:4
    f3c0:    d0 e1 0e 49       	r5_r4 >>= 0x1e			  ## filtbank.c:427:4
    f3c4:    d8 ec b3 42       	[r11+r2] = r4			  ## filtbank.c:428:27
    f3c8:    fa 3c             	r2 += -0x4			  ## filtbank.c:422:3
    f3ca:    c1 24             	r1 += 0x4			  ## filtbank.c:422:3
    f3cc:    21 ff 00 1e e7 ff 	if (r1 != 0x800) goto -0x32 <.GJTIE286_0_0_+0x6B6 : f3a0 >
    f3d2:    02 83             	sp += 0xc
    f3d4:    5f 04             	{pc, r15-r4} = [sp++]			  ## filtbank.c:432:1


decode_sce_lfe:
    f3d6:    7a 04             	[--sp] = {rets, r10-r4}			  ## syntax.c:201:0
    f3d8:    e2 9d             	sp += -0xc			  ## syntax.c:201:0
    f3da:    04 16             	r4 = r0			  ## syntax.c:201:0
    f3dc:    16 e1 00 46       	r6 = r4 + 0x1600			  ## syntax.c:201:0
    f3e0:    17 f1 a8 46       	r7 = r4 + 0x16a8  #			  ## syntax.c:201:0
    f3e4:    68 44             		 r0 = b[r6+0x4] (u)			  ## syntax.c:207:16
    f3e6:    00 43             	if (r0 == 0) goto 0x6 <decode_sce_lfe+0x18 : f3ee >			  ## syntax.c:207:6
    f3e8:    40 2c             	r0 = 0xc			  ## syntax.c:209:16
    f3ea:    f8 41             	b[r7+0x1] = r0			  ## syntax.c:209:16
    f3ec:    24 9d             	goto 0xba <decode_sce_lfe+0xD2 : f4a8 >			  ## syntax.c:209:16
    f3ee:    68 45             	r0 = b[r6+0x5] (u)			  ## syntax.c:212:6
    f3f0:    0a 81             	r2 = r0 + 0x1			  ## syntax.c:212:26
    f3f2:    82 f9 03 06       	if (r2 < 0x3) goto 0x6 <decode_sce_lfe+0x26 : f3fc >			  ## syntax.c:212:6
    f3f6:    40 2d             	r0 = 0xd			  ## syntax.c:214:16
    f3f8:    f8 41             	b[r7+0x1] = r0			  ## syntax.c:214:16
    f3fa:    24 96             	goto 0xac <decode_sce_lfe+0xD2 : f4a8 >			  ## syntax.c:214:16
    f3fc:    40 18             	r0 += r4			  ## syntax.c:220:2
    f3fe:    42 e0 0a 16       	r2 = 0x160a <WOLASynthesisFilter_Float_M128_m4_r1+0x606 : 160a >			  ## syntax.c:220:2
    f402:    d8 ee 01 12       	b[r0+r2] = r1			  ## syntax.c:220:44
    f406:    40 16             	r0 = r4			  ## syntax.c:399:2
    f408:    bf ea fe f3       	call -0x1804 <init_cpe : dc08 >			  ## syntax.c:399:2
    f40c:    00 e1 c8 60       	r0 = r6 + 0xc8			  ## syntax.c:391:25
    f410:    41 24             	r1 = 0x4			  ## syntax.c:401:39
    f412:    bf ea b9 f3       	call -0x188e <faad_getbits : db88 >			  ## syntax.c:401:39
    f416:    1a e1 e4 46       	r10 = r4 + 0x16e4
    f41a:    52 ee a0 00       	b[r10+0x0] = r0			  ## syntax.c:401:28
    f41e:    08 e1 ec 60       	r8 = r6 + 0xec			  ## syntax.c:395:26
    f422:    02 e1 00 46       	r2 = r4 + 0x600			  ## syntax.c:392:23
    f426:    19 e1 24 4c       	r9 = r4 + 0x1c24			  ## syntax.c:393:20
    f42a:    40 16             	r0 = r4			  ## syntax.c:404:11
    f42c:    81 16             	r1 = r8			  ## syntax.c:404:11
    f42e:    93 16             	r3 = r9			  ## syntax.c:404:11
    f430:    bf ea 37 f6       	call -0x1392 <individual_channel_stream : e0a2 >			  ## syntax.c:404:11
    f434:    05 16             	r5 = r0			  ## syntax.c:404:11
    f436:    95 51             	if (r5 != 0) goto 0x62 <decode_sce_lfe+0xC4 : f49a >			  ## syntax.c:404:11
    f438:    40 e0 f9 16       	r0 = 0x16f9 <WOLASynthesisFilter_Float_M128_m4_r1+0x6F4 : 16f8 >			  ## syntax.c:409:11
    f43c:    d8 ee 40 00       	r0 = b[r4+r0] (u)			  ## syntax.c:409:11
    f440:    4d 20             	r5 = 0x20			  ## syntax.c:409:11
    f442:    90 4b             	if (r0 != 0) goto 0x56 <decode_sce_lfe+0xC4 : f49a >			  ## syntax.c:409:11
    f444:    40 e0 04 07       	r0 = 0x704 <alg_code_size+0x234 : 704 >			  ## syntax.c:413:14
    f448:    d8 ec 4a 00       	r0 = [r4+r0<<2]			  ## syntax.c:413:14
    f44c:    45 20             	r5 = 0x0			  ## syntax.c:413:14
    f44e:    90 45             	if (r0 != 0) goto 0x4a <decode_sce_lfe+0xC4 : f49a >			  ## syntax.c:413:14
    f450:    40 f0 54 06       	r0 = 0x654  # <alg_code_size+0x184 : 654 >			  ## specrec.c:385:30
    f454:    6b 42             		 r3 = b[r6+0x2] (u)			  ## specrec.c:385:2
    f456:    6a 41             	r2 = b[r6+0x1] (u)			  ## specrec.c:385:2
    f458:    d8 ec 4a 10       	r1 = [r4+r0<<2]			  ## specrec.c:385:30
    f45c:    d4 e9 01 90       	[sp] = r9			  ## specrec.c:385:2
    f460:    80 16             	r0 = r8			  ## specrec.c:385:2
    f462:    bf ea 7b fa       	call -0xb0a <tns_decode_frame : e95c >			  ## specrec.c:385:2
    f466:    40 f0 a2 05       	r0 = 0x5a2  # <alg_code_size+0xD2 : 5a2 >			  ## specrec.c:393:3
    f46a:    6b 46             		 r3 = b[r6+0x6] (u)			  ## specrec.c:391:2
    f46c:    50 ee aa 80       	r8 = b[r10+0xa] (u)			  ## specrec.c:388:26
    f470:    d8 ec 4a 00       	r0 = [r4+r0<<2]			  ## specrec.c:393:3
    f474:    41 e0 a4 05       	r1 = 0x5a4 <alg_code_size+0xD4 : 5a4 >			  ## specrec.c:393:26
    f478:    d8 ec 4a 11       	r1 = [r4+r1<<2]			  ## specrec.c:393:26
    f47c:    50 ee a8 a0       	r10 = b[r10+0x8] (u)			  ## specrec.c:387:29
    f480:    d0 e9 05 00       	d[sp+4] = r1_r0			  ## specrec.c:391:2
    f484:    d4 e9 01 90       	[sp] = r9			  ## specrec.c:391:2
    f488:    40 16             	r0 = r4			  ## specrec.c:391:2
    f48a:    a1 16             	r1 = r10			  ## specrec.c:391:2
    f48c:    82 16             	r2 = r8			  ## specrec.c:391:2
    f48e:    bf ea 08 fc       	call -0x7f0 <ifilter_bank : eca2 >			  ## specrec.c:391:2
    f492:    52 ee 66 80       	b[r6+0x6] = r8			  ## specrec.c:396:33
    f496:    52 ee 68 a0       	b[r6+0x8] = r10			  ## specrec.c:397:36
    f49a:    fd 41             	b[r7+0x1] = r5			  ## syntax.c:223:15
    f49c:    68 44             	r0 = b[r6+0x4] (u)			  ## syntax.c:226:24
    f49e:    c0 21             	r0 += 0x1			  ## syntax.c:226:24
    f4a0:    e8 44             	b[r6+0x4] = r0			  ## syntax.c:226:24
    f4a2:    68 45             	r0 = b[r6+0x5] (u)			  ## syntax.c:227:21
    f4a4:    c0 21             	r0 += 0x1			  ## syntax.c:227:21
    f4a6:    e8 45             	b[r6+0x5] = r0			  ## syntax.c:227:21
    f4a8:    02 83             	sp += 0xc
    f4aa:    5a 04             	{pc, r10-r4} = [sp++]			  ## syntax.c:228:1


faad_byte_align:
    f4ac:    02 62             	r2 = [r0+0x8] 			  ## bits.c:219:0
    f4ae:    a1 e0 00 20       	r1 = 0x0 - r2			  ## bits.c:220:39
    f4b2:    60 ff 07 10 16 00 	if ((r1 & 0x7) == 0) goto 0x2c <faad_byte_align+0x38 : f4e4 >			  ## bits.c:220:39
    f4b8:    61 e1 07 10       	r1 = r1 & 0x7			  ## bits.c:220:39
    f4bc:    a1 e0 08 10       	r1 = 0x8 - r1			  ## bits.c:224:24
    f4c0:    81 ec 02 20       	if (r2 <= r1) goto 0x4 <faad_byte_align+0x1C : f4c8 >			  ## bits.c:83:7
    f4c4:    29 1e             	r1 = r2 - r1			  ## bits.c:85:18
    f4c6:    04 8d             	goto 0x1a <faad_byte_align+0x36 : f4e2 >
    f4c8:    02 61             	r2 = [r0+0x4] 			  ## bits.c:89:19
    f4ca:    82 60             	[r0+0x0] = r2			  ## bits.c:89:13
    f4cc:    02 64             	r2 = [r0+0x10] 			  ## bits.c:90:23
    f4ce:    23 60             	r3 = [r2+0x0] 			  ## bits.c:49:3
    f4d0:    70 e0 00 33       	r3 = rev8(r3)			  ## bits.c:49:3
    f4d4:    a1 f0 20 10       	r1 = 0x20 - r1  #			  ## bits.c:93:25
    f4d8:    83 61             		 [r0+0x4] = r3			  ## bits.c:91:13
    f4da:    c4 eb 04 00       	[r0+0x10] += 0x4			  ## bits.c:92:12
    f4de:    02 62             	r2 = [r0+0x8] 			  ## bits.c:93:18
    f4e0:    21 18             	r1 += r2			  ## bits.c:93:18
    f4e2:    81 62             	[r0+0x8] = r1			  ## bits.c:85:18
    f4e4:    80 00             	rts


faad_get_processed_bits:
    f4e6:    01 62             	r1 = [r0+0x8] 			  ## bits.c:214:0
    f4e8:    02 65             	r2 = [r0+0x14] 			  ## bits.c:215:43
    f4ea:    13 20             	r3 = -0x20			  ## bits.c:215:22
    f4ec:    39 de             	r1 = r3 - r1  #			  ## bits.c:215:22
    f4ee:    00 64             		 r0 = [r0+0x10] 			  ## bits.c:215:32
    f4f0:    80 1e             	r0 = r0 - r2			  ## bits.c:215:37
    f4f2:    00 a3             	r0 = r0 << 0x3			  ## bits.c:215:22
    f4f4:    10 18             	r0 += r1			  ## bits.c:215:55
    f4f6:    80 00             	rts			  ## bits.c:215:2


output_to_PCM:
    f4f8:    79 04             	[--sp] = {rets, r9-r4}			  ## output.c:91:0
    f4fa:    13 e1 f4 0b       	r3 = r0 + 0x1bf4			  ## output.c:91:0
    f4fe:    42 f0 a1 05       	r2 = 0x5a1  # <alg_code_size+0xD0 : 5a0 >			  ## output.c:93:53
    f502:    34 60             		 r4 = [r3+0x0] 			  ## output.c:96:28
    f504:    d8 ec 0a 22       	r2 = [r0+r2<<2]			  ## output.c:93:53
    f508:    04 5b             	if (r4 == 0) goto 0x36 <output_to_PCM+0x48 : f540 >
    f50a:    45 e0 24 2c       	r5 = 0x2c24 <WOLASynthesisFilter_Float_M256_m4_r1+0x420 : 2c24 >			  ## output.c:134:13
    f50e:    50 18             	r0 += r5			  ## output.c:134:13
    f510:    cb 30             	r3 += 0x30			  ## output.c:132:12
    f512:    b4 e8 02 00       	if (r4 != 0x2) {
    f516:    30 16             		r0 = r3
                               	}			  ## output.c:133:26
    f518:    b1 e8 02 00       	if (r1 != 0x2) {			  ## output.c:133:26
    f51c:    30 16             		r0 = r3
                               	}			  ## output.c:133:26
    f51e:    41 20             	r1 = 0x0			  ## output.c:133:26
    f520:    04 8b             	goto 0x16 <output_to_PCM+0x40 : f538 >			  ## output.c:133:26
    f522:    d8 ec 0a 41       	r4 = [r0+r1<<2]			  ## output.c:137:10
    f526:    cd bf             	r5 = r4 >>> 0x1f			  ## output.c:74:18
    f528:    46 15             	r7_r6 = r5_r4			  ## output.c:75:2
    f52a:    d2 e1 6e 4c       	r4 = r7_r6 >>> 0xe (round)			  ## output.c:75:2
    f52e:    78 e0 01 44       	r4 = sat16(r4) (s)			  ## output.c:75:2
    f532:    d8 ed 29 41       	h[r2+r1<<1] = r4			  ## output.c:139:27
    f536:    c1 21             	r1 += 0x1			  ## output.c:135:31
    f538:    01 ff 00 14 f2 ff 	if (r1 != 0x400) goto -0x1c <output_to_PCM+0x2A : f522 >
    f53e:    59 04             	{pc, r9-r4} = [sp++]			  ## output.c:142:1
    f540:    01 f8 21 02       	if (r1 == 0x1) goto 0x42 <output_to_PCM+0x8E : f586 >			  ## output.c:103:7
    f544:    81 f8 fb 05       	if (r1 != 0x2) goto -0xa <output_to_PCM+0x46 : f53e >
    f548:    41 e0 24 2c       	r1 = 0x2c24 <WOLASynthesisFilter_Float_M256_m4_r1+0x420 : 2c24 >			  ## output.c:106:13
    f54c:    10 18             	r0 += r1			  ## output.c:106:13
    f54e:    41 20             	r1 = 0x0
    f550:    43 e0 00 fc       	r3 = -0x400 <RAM_LIMIT_H+0xFFFFFFFFFFE5FC00 : fffffffffffffc00 >
    f554:    04 94             	goto 0x28 <output_to_PCM+0x86 : f57e >
    f556:    d8 ec 0a 43       	r4 = [r0+r3<<2]			  ## output.c:109:11
    f55a:    cd bf             	r5 = r4 >>> 0x1f			  ## output.c:74:18
    f55c:    46 15             	r7_r6 = r5_r4			  ## output.c:75:2
    f55e:    d2 e1 6e 4c       	r4 = r7_r6 >>> 0xe (round)			  ## output.c:75:2
    f562:    78 e0 01 44       	r4 = sat16(r4) (s)			  ## output.c:75:2
    f566:    26 16             	r6 = r2			  ## output.c:111:28
    f568:    dc ed 61 41       	h[++r6=r1] = r4			  ## output.c:111:28
    f56c:    04 05             	r4 = [r0++=0x4] 			  ## output.c:113:11
    f56e:    cd bf             	r5 = r4 >>> 0x1f			  ## output.c:74:18
    f570:    48 15             	r9_r8 = r5_r4			  ## output.c:75:2
    f572:    d2 e1 8e 4c       	r4 = r9_r8 >>> 0xe (round)			  ## output.c:75:2
    f576:    78 e0 01 44       	r4 = sat16(r4) (s)			  ## output.c:75:2
    f57a:    ec 61             	h[r6+0x2] = r4			  ## output.c:115:28
    f57c:    c1 24             	r1 += 0x4			  ## output.c:107:4
    f57e:    21 ff 80 1d e9 ff 	if (r1 != 0x1000) goto -0x2e <output_to_PCM+0x5E : f556 >
    f584:    59 04             	{pc, r9-r4} = [sp++]			  ## output.c:142:1
    f586:    00 e1 30 30       	r0 = r3 + 0x30			  ## output.c:121:9
    f58a:    41 20             	r1 = 0x0			  ## output.c:121:9
    f58c:    04 8d             	goto 0x1a <output_to_PCM+0xB0 : f5a8 >			  ## output.c:121:9
    f58e:    d8 ec 02 41       	r4 = [r0+r1]			  ## output.c:123:11
    f592:    cd bf             	r5 = r4 >>> 0x1f			  ## output.c:74:18
    f594:    46 15             	r7_r6 = r5_r4			  ## output.c:75:2
    f596:    d2 e1 6e 4c       	r4 = r7_r6 >>> 0xe (round)			  ## output.c:75:2
    f59a:    78 e0 01 44       	r4 = sat16(r4) (s)			  ## output.c:75:2
    f59e:    23 16             	r3 = r2			  ## output.c:125:28
    f5a0:    dc ed 31 41       	h[++r3=r1] = r4			  ## output.c:125:28
    f5a4:    bc 61             	h[r3+0x2] = r4			  ## output.c:126:28
    f5a6:    c1 24             	r1 += 0x4			  ## output.c:121:4
    f5a8:    21 ff 80 1d f0 ff 	if (r1 != 0x1000) goto -0x20 <output_to_PCM+0x96 : f58e >
    f5ae:    59 04             	{pc, r9-r4} = [sp++]			  ## output.c:142:1


aac_decoder_run:
    f5b0:    7f 04             	[--sp] = {rets, r15-r4}			  ## aac_main.c:498:0
    f5b2:    c2 9c             	sp += -0x90			  ## aac_main.c:498:0
    f5b4:    04 16             	r4 = r0			  ## aac_main.c:498:0
    f5b6:    1d e1 00 46       	r13 = r4 + 0x1600			  ## aac_main.c:498:0
    f5ba:    d0 ec d0 01       	r0 = [r13+0x10]			  ## aac_main.c:502:23
    f5be:    80 49             	if (r0 != 0) goto 0x12 <aac_decoder_run+0x22 : f5d2 >			  ## aac_main.c:502:23
    f5c0:    40 e0 24 3c       	r0 = 0x3c24 <STFT_Win_FixHalf_M256_D160+0x20 : 3c24 >			  ## aac_main.c:505:19
    f5c4:    40 18             	r0 += r4			  ## aac_main.c:505:19
    f5c6:    41 20             	r1 = 0x0			  ## aac_main.c:505:3
    f5c8:    42 e0 00 20       	r2 = 0x2000 <WOLAAnalysisFilter_Float_M256_m4_r1+0x7FC : 2000 >			  ## aac_main.c:505:3
    f5cc:    80 ff 54 4c ff ff 	call -0xb3ac <memset : 4226 >			  ## aac_main.c:505:3
    f5d2:    1c e1 d0 4b       	r12 = r4 + 0x1bd0
    f5d6:    d0 ec c4 23       	r2 = [r12+0x34]			  ## aac_main.c:359:14
    f5da:    1b e1 84 46       	r11 = r4 + 0x1684			  ## aac_main.c:359:14
    f5de:    f8 e8 86 70       	r7 = sp + 134			  ## aac_main.c:359:14
    f5e2:    46 20             	r6 = 0x0
    f5e4:    1a e1 10 4c       	r10 = r4 + 0x1c10
    f5e8:    82 fe 13 00       	ifs (r2 <= 0x0) goto 0x26 <aac_decoder_run+0x62 : f612 >
    f5ec:    d0 ec c0 02       	r0 = [r12+0x20]			  ## aac_main.c:454:14
    f5f0:    80 f8 92 02       	if (r0 != 0x1) goto 0x124 <aac_decoder_run+0x168 : f718 >			  ## aac_main.c:454:6
    f5f4:    d0 ec b0 10       	r1 = [r11+0x0]			  ## aac_main.c:457:56
    f5f8:    d0 ec c8 32       	r3 = [r12+0x28]			  ## aac_main.c:458:24
    f5fc:    d0 ec a8 00       	r0 = [r10+0x8]			  ## aac_main.c:459:37
    f600:    d0 ec a0 41       	r4 = [r10+0x10]			  ## aac_main.c:459:22
    f604:    b3 1e             	r3 = r3 - r2			  ## aac_main.c:458:37
    f606:    31 18             	r1 += r3			  ## aac_main.c:458:12
    f608:    c4 00             	call r4			  ## aac_main.c:459:14
    f60a:    d0 ec c4 13       	r1 = [r12+0x34]			  ## aac_main.c:460:26
    f60e:    10 1e             	r0 = r1 - r0			  ## aac_main.c:460:26
    f610:    44 8d             	goto 0x11a <aac_decoder_run+0x17C : f72c >
    f612:    84 33             	[sp+76] = r4
    f614:    d0 ec b0 83       	r8 = [r11+0x30]			  ## aac_main.c:351:29
    f618:    d0 ec cc 11       	r1 = [r12+0x1c]			  ## aac_main.c:378:45
    f61c:    d0 ec a8 00       	r0 = [r10+0x8]			  ## aac_main.c:378:31
    f620:    d0 ec ac 40       	r4 = [r10+0xc]			  ## aac_main.c:378:17
    f624:    45 20             	r5 = 0x0
    f626:    f8 e8 86 20       	r2 = sp + 134
    f62a:    43 29             	r3 = 0x9			  ## aac_main.c:378:9
    f62c:    85 20             	[sp] = r5			  ## aac_main.c:378:9
    f62e:    c4 00             	call r4			  ## aac_main.c:378:9
    f630:    d0 ec cc 11       	r1 = [r12+0x1c]			  ## aac_main.c:379:17
    f634:    01 18             	r1 += r0			  ## aac_main.c:379:17
    f636:    d0 ec cd 11       	[r12+0x1c] = r1			  ## aac_main.c:379:17
    f63a:    56 28             	r6 = 0x48			  ## aac_main.c:379:17
    f63c:    80 f8 78 12       	if (r0 != 0x9) goto 0xf0 <aac_decoder_run+0x180 : f730 >			  ## aac_main.c:379:17
    f640:    dc e9 8e 50       	r5 = b[sp+142] (u)			  ## aac_main.c:388:7
    f644:    15 f8 7d fe       	if (r5 == 0xff) goto 0xfa <aac_decoder_run+0x192 : f742 >			  ## aac_main.c:388:7
    f648:    30 e1 ff 5f       	r0 = r5 + -0x1			  ## aac_main.c:422:25
    f64c:    5e 22             	r6 = 0x62			  ## aac_main.c:422:25
    f64e:    08 ff fe 05 6e 00 	if (r0 > 0x5fe) goto 0xdc <aac_decoder_run+0x180 : f730 >			  ## aac_main.c:422:25
    f654:    d0 ec a8 00       	r0 = [r10+0x8]			  ## aac_main.c:424:32
    f658:    d0 ec ac 40       	r4 = [r10+0xc]			  ## aac_main.c:424:18
    f65c:    42 20             	r2 = 0x0			  ## aac_main.c:424:18
    f65e:    82 d6             	r2 = r8  #			  ## aac_main.c:424:10
    f660:    82 20             		 [sp] = r2			  ## aac_main.c:424:10
    f662:    53 16             	r3 = r5			  ## aac_main.c:424:10
    f664:    c4 00             	call r4			  ## aac_main.c:424:10
    f666:    68 e8 1c c0       	[r12+0x1c] += r0			  ## aac_main.c:425:18
    f66a:    56 28             	r6 = 0x48			  ## aac_main.c:425:18
    f66c:    85 e8 60 00       	if (r0 != r5) goto 0xc0 <aac_decoder_run+0x180 : f730 >			  ## aac_main.c:425:18
    f670:    d0 ec b9 52       	[r11+0x28] = r5			  ## aac_main.c:428:24
    f674:    d4 e9 41 b0       	[sp+64] = r11			  ## aac_main.c:428:24
    f678:    d0 ec b0 03       	r0 = [r11+0x30]			  ## decoder.c:53:29
    f67c:    d4 e9 4c 80       	r8 = [sp+76]
    f680:    12 e1 a8 86       	r2 = r8 + 0x16a8
    f684:    a0 6e             	[r2+0x38] = r0			  ## bits.c:199:13
    f686:    a5 6b             	[r2+0x2c] = r5			  ## bits.c:200:18
    f688:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    f68a:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    f68e:    a1 68             	[r2+0x20] = r1			  ## bits.c:203:11
    f690:    20 6e             	r0 = [r2+0x38] 			  ## bits.c:204:32
    f692:    c0 24             	r0 += 0x4			  ## bits.c:204:39
    f694:    01 60             	r1 = [r0+0x0] 			  ## bits.c:49:3
    f696:    70 e0 00 11       	r1 = rev8(r1)			  ## bits.c:49:3
    f69a:    a1 69             	[r2+0x24] = r1			  ## bits.c:205:11
    f69c:    20 6e             	r0 = [r2+0x38] 			  ## bits.c:207:29
    f69e:    a0 6d             	[r2+0x34] = r0			  ## bits.c:207:12
    f6a0:    c0 28             	r0 += 0x8			  ## bits.c:208:36
    f6a2:    0e f1 c8 d0       	r14 = r13 + 0xc8  #			  ## decoder.c:52:25
    f6a6:    a0 6c             		 [r2+0x30] = r0			  ## bits.c:208:11
    f6a8:    82 34             	[sp+80] = r2			  ## bits.c:208:11
    f6aa:    4a ea 20 20       	[r2+0x28] = 0x20			  ## bits.c:210:16
    f6ae:    50 ee d0 00       	r0 = b[r13+0x0] (u)			  ## decoder.c:59:16
    f6b2:    30 52             	if (r0 == 0) goto 0xe4 <aac_decoder_run+0x1E8 : f798 >			  ## decoder.c:59:16
    f6b4:    40 f0 19 16       	r0 = 0x1619  # <WOLASynthesisFilter_Float_M128_m4_r1+0x614 : 1618 >			  ## decoder.c:63:38
    f6b8:    07 34             		 r7 = [sp+80]			  ## decoder.c:63:38
    f6ba:    d8 ee 80 90       	r9 = b[r8+r0] (u)			  ## decoder.c:63:38
    f6be:    45 20             	r5 = 0x0
    f6c0:    48 e0 01 00       	r8 = 0x1 <mem_code_size : 0 >
    f6c4:    44 e0 ff 0f       	r4 = 0xfff <usb_code_size+0x53A : ffe >
    f6c8:    04 9d             	goto 0x3a <aac_decoder_run+0x154 : f704 >
    f6ca:    71 6a             	r1 = [r7+0x28] 			  ## bits.c:66:19
    f6cc:    70 68             	r0 = [r7+0x20] 			  ## bits.c:73:16
    f6ce:    01 f9 0d 18       	if (r1 >= 0xc) goto 0x1a <aac_decoder_run+0x13C : f6ec >
    f6d2:    a3 f0 0c 10       	r3 = 0xC - r1  #			  ## bits.c:72:8
    f6d6:    72 69             		 r2 = [r7+0x24] 			  ## bits.c:73:67
    f6d8:    a6 e0 20 30       	r6 = 0x20 - r3			  ## bits.c:73:79
    f6dc:    e2 1a             	r2 >>= r6			  ## bits.c:73:72
    f6de:    c8 e1 80 11       	r1 = r8 << r1			  ## bits.c:73:27
    f6e2:    f9 3f             	r1 += -0x1			  ## bits.c:73:45
    f6e4:    90 19             	r0 &= r1			  ## bits.c:73:21
    f6e6:    30 1a             	r0 <<= r3			  ## bits.c:73:51
    f6e8:    20 19             	r0 |= r2			  ## bits.c:73:60
    f6ea:    04 84             	goto 0x8 <aac_decoder_run+0x144 : f6f4 >			  ## bits.c:73:60
    f6ec:    a1 e0 20 10       	r1 = 0x20 - r1			  ## bits.c:69:28
    f6f0:    10 1a             	r0 <<= r1			  ## bits.c:69:21
    f6f2:    80 b4             	r0 = r0 >> 0x14			  ## bits.c:69:46
    f6f4:    80 17             	r0 = r0.l (u)			  ## syntax.c:1252:7
    f6f6:    04 e8 55 00       	if (r0 == r4) goto 0xaa <aac_decoder_run+0x1F4 : f7a4 >			  ## syntax.c:1252:7
    f6fa:    41 28             	r1 = 0x8			  ## syntax.c:1254:4
    f6fc:    e0 16             	r0 = r14			  ## syntax.c:1254:4
    f6fe:    bf ea 43 f2       	call -0x1b7a <faad_getbits : db88 >			  ## syntax.c:1254:4
    f702:    c5 21             	r5 += 0x1			  ## syntax.c:1249:24
    f704:    d0 17             	r0 = r5.l (u)			  ## syntax.c:1249:16
    f706:    d0 fc e0 ff       	if (r0 <= 0x2ff) goto -0x40 <aac_decoder_run+0x11A : f6ca >			  ## syntax.c:1249:16
    f70a:    40 25             	r0 = 0x5			  ## decoder.c:64:21
    f70c:    00 f1 40 c0       	r0 = r12 + 0x40  #			  ## decoder.c:134:14
    f710:    f8 41             		 b[r7+0x1] = r0			  ## decoder.c:64:21
    f712:    80 2c             	[sp+48] = r0			  ## decoder.c:64:21
    f714:    c0 ea ec 05       	goto 0xbd8 <.GJTIE291_0_0_+0xA26 : 102f0 >			  ## decoder.c:64:21
    f718:    d0 ec c8 22       	r2 = [r12+0x28]			  ## aac_main.c:465:65
    f71c:    d0 ec b0 10       	r1 = [r11+0x0]			  ## aac_main.c:465:42
    f720:    d0 ec a8 00       	r0 = [r10+0x8]			  ## aac_main.c:465:26
    f724:    d0 ec a0 31       	r3 = [r10+0x10]			  ## aac_main.c:465:11
    f728:    c3 00             	call r3			  ## aac_main.c:465:3
    f72a:    40 20             	r0 = 0x0			  ## aac_main.c:465:3
    f72c:    d0 ec c5 03       	[r12+0x34] = r0			  ## aac_main.c:460:26
    f730:    58 21             	r0 = 0x61			  ## aac_main.c:511:3
    f732:    36 ed 40 00       	ifs (r6 >= 0x40) {			  ## aac_main.c:511:3
    f736:    60 16             		r0 = r6
                               	}			  ## aac_main.c:511:3
    f738:    36 e8 00 00       	if (r6 == 0x0) {			  ## aac_main.c:511:3
    f73c:    60 16             		r0 = r6
                               	}			  ## aac_main.c:511:3
    f73e:    22 84             	sp += 0x90			  ## aac_main.c:511:3
    f740:    5f 04             	{pc, r15-r4} = [sp++]			  ## aac_main.c:513:1
    f742:    d0 ec a8 00       	r0 = [r10+0x8]			  ## aac_main.c:391:33
    f746:    d0 ec ac 40       	r4 = [r10+0xc]			  ## aac_main.c:391:19
    f74a:    7d 83             	r5 = r7 + 0x3			  ## aac_main.c:355:27
    f74c:    c1 14             	r9 = 0
    f74e:    43 21             	r3 = 0x1			  ## aac_main.c:391:11
    f750:    d4 e9 01 90       	[sp] = r9			  ## aac_main.c:391:11
    f754:    52 16             	r2 = r5			  ## aac_main.c:391:11
    f756:    c4 00             	call r4			  ## aac_main.c:391:11
    f758:    d0 ec cc 11       	r1 = [r12+0x1c]			  ## aac_main.c:392:19
    f75c:    01 18             	r1 += r0			  ## aac_main.c:392:19
    f75e:    d0 ec cd 11       	[r12+0x1c] = r1			  ## aac_main.c:392:19
    f762:    80 f8 e5 03       	if (r0 != 0x1) goto -0x36 <aac_decoder_run+0x180 : f730 >			  ## aac_main.c:392:19
    f766:    7c 3f             	r4 = 0xff
    f768:    58 40             	r0 = b[r5+0x0] (u)			  ## aac_main.c:396:11
    f76a:    90 f8 13 fe       	if (r0 != 0xff) goto 0x26 <aac_decoder_run+0x1E4 : f794 >			  ## aac_main.c:396:4
    f76e:    d0 ec a8 00       	r0 = [r10+0x8]			  ## aac_main.c:399:34
    f772:    d0 ec ac 70       	r7 = [r10+0xc]			  ## aac_main.c:399:20
    f776:    43 21             	r3 = 0x1			  ## aac_main.c:399:12
    f778:    d4 e9 01 90       	[sp] = r9			  ## aac_main.c:399:12
    f77c:    52 16             	r2 = r5			  ## aac_main.c:399:12
    f77e:    c7 00             	call r7			  ## aac_main.c:399:12
    f780:    d0 ec cc 11       	r1 = [r12+0x1c]			  ## aac_main.c:400:20
    f784:    01 18             	r1 += r0			  ## aac_main.c:400:20
    f786:    d0 ec cd 11       	[r12+0x1c] = r1			  ## aac_main.c:400:20
    f78a:    04 e1 ff 40       	r4 = r4 + 0xff			  ## aac_main.c:398:18
    f78e:    00 f8 eb 03       	if (r0 == 0x1) goto -0x2a <aac_decoder_run+0x1B8 : f768 >
    f792:    e7 8e             	goto -0x64 <aac_decoder_run+0x180 : f730 >
    f794:    05 1d             	r5 = r0 + r4			  ## aac_main.c:405:17
    f796:    a7 98             	goto -0x150 <aac_decoder_run+0x98 : f648 >
    f798:    00 e1 01 d0       	r0 = r13 + 0x1
    f79c:    07 f1 a9 d0       	r7 = r13 + 0xa9  #			  ## decoder.c:80:13
    f7a0:    80 27             		 [sp+28] = r0			  ## decoder.c:80:13
    f7a2:    24 91             	goto 0xa2 <aac_decoder_run+0x296 : f846 >			  ## decoder.c:80:13
    f7a4:    41 2c             	r1 = 0xc			  ## syntax.c:1258:4
    f7a6:    e0 16             	r0 = r14			  ## syntax.c:1258:4
    f7a8:    bf ea ee f1       	call -0x1c24 <faad_getbits : db88 >			  ## syntax.c:1258:4
    f7ac:    e0 16             	r0 = r14			  ## syntax.c:1265:13
    f7ae:    bf ea 15 f2       	call -0x1bd6 <faad_get1bit : dbdc >			  ## syntax.c:1265:13
    f7b2:    07 16             	r7 = r0			  ## syntax.c:1265:13
    f7b4:    41 22             	r1 = 0x2			  ## syntax.c:1266:25
    f7b6:    e0 16             	r0 = r14			  ## syntax.c:1266:25
    f7b8:    bf ea e6 f1       	call -0x1c34 <faad_getbits : db88 >			  ## syntax.c:1266:25
    f7bc:    e0 16             	r0 = r14			  ## syntax.c:1267:28
    f7be:    bf ea 0d f2       	call -0x1be6 <faad_get1bit : dbdc >			  ## syntax.c:1267:28
    f7c2:    05 16             	r5 = r0			  ## syntax.c:1267:28
    f7c4:    41 22             	r1 = 0x2			  ## syntax.c:1268:27
    f7c6:    e0 16             	r0 = r14			  ## syntax.c:1268:27
    f7c8:    bf ea de f1       	call -0x1c44 <faad_getbits : db88 >			  ## syntax.c:1268:27
    f7cc:    41 24             	r1 = 0x4			  ## syntax.c:1269:28
    f7ce:    e0 16             	r0 = r14			  ## syntax.c:1269:28
    f7d0:    bf ea da f1       	call -0x1c4c <faad_getbits : db88 >			  ## syntax.c:1269:28
    f7d4:    08 16             	r8 = r0			  ## syntax.c:1269:28
    f7d6:    e0 16             	r0 = r14			  ## syntax.c:1270:22
    f7d8:    bf ea 00 f2       	call -0x1c00 <faad_get1bit : dbdc >			  ## syntax.c:1270:22
    f7dc:    41 23             	r1 = 0x3			  ## syntax.c:1271:41
    f7de:    e0 16             	r0 = r14			  ## syntax.c:1271:41
    f7e0:    bf ea d2 f1       	call -0x1c5c <faad_getbits : db88 >			  ## syntax.c:1271:41
    f7e4:    e0 16             	r0 = r14			  ## syntax.c:1272:19
    f7e6:    bf ea f9 f1       	call -0x1c0e <faad_get1bit : dbdc >			  ## syntax.c:1272:19
    f7ea:    e0 16             	r0 = r14			  ## syntax.c:1273:15
    f7ec:    bf ea f6 f1       	call -0x1c14 <faad_get1bit : dbdc >			  ## syntax.c:1273:15
    f7f0:    89 f8 06 02       	if (r9 != 0x1) goto 0xc <aac_decoder_run+0x250 : f800 >			  ## syntax.c:1273:15
    f7f4:    37 e8 00 80       	if (r7 == 0x0) {
    f7f8:    41 22             		r1 = 0x2			  ## syntax.c:1280:30
    f7fa:    e0 16             		r0 = r14			  ## syntax.c:1280:30
    f7fc:    bf ea c4 f1       		call -0x1c78
                               	} <faad_getbits : db88 >			  ## syntax.c:1280:30
    f800:    e0 16             	r0 = r14			  ## syntax.c:1290:39
    f802:    bf ea eb f1       	call -0x1c2a <faad_get1bit : dbdc >			  ## syntax.c:1290:39
    f806:    e0 16             	r0 = r14			  ## syntax.c:1291:41
    f808:    bf ea e8 f1       	call -0x1c30 <faad_get1bit : dbdc >			  ## syntax.c:1291:41
    f80c:    41 2d             	r1 = 0xd			  ## syntax.c:1292:37
    f80e:    e0 16             	r0 = r14			  ## syntax.c:1292:37
    f810:    bf ea ba f1       	call -0x1c8c <faad_getbits : db88 >			  ## syntax.c:1292:37
    f814:    41 2b             	r1 = 0xb			  ## syntax.c:1293:41
    f816:    e0 16             	r0 = r14			  ## syntax.c:1293:41
    f818:    bf ea b6 f1       	call -0x1c94 <faad_getbits : db88 >			  ## syntax.c:1293:41
    f81c:    41 22             	r1 = 0x2			  ## syntax.c:1294:47
    f81e:    e0 16             	r0 = r14			  ## syntax.c:1294:47
    f820:    bf ea b2 f1       	call -0x1c9c <faad_getbits : db88 >			  ## syntax.c:1294:47
    f824:    35 e8 00 80       	if (r5 == 0x0) {			  ## syntax.c:1294:47
    f828:    41 30             		r1 = 0x10			  ## syntax.c:1302:31
    f82a:    e0 16             		r0 = r14			  ## syntax.c:1302:31
    f82c:    bf ea ac f1       		call -0x1ca8
                               	} <faad_getbits : db88 >			  ## syntax.c:1302:31
    f830:    07 f1 a9 d0       	r7 = r13 + 0xa9  #			  ## decoder.c:64:15
    f834:    01 34             		 r1 = [sp+80]			  ## decoder.c:64:21
    f836:    40 20             	r0 = 0x0			  ## decoder.c:64:21
    f838:    d0 d6             	r0 = r13  #			  ## decoder.c:66:22
    f83a:    98 41             		 b[r1+0x1] = r0			  ## decoder.c:64:21
    f83c:    5a ee 01 80       	b[++r0=0x1] = r8			  ## decoder.c:66:22
    f840:    80 27             	[sp+28] = r0			  ## decoder.c:66:22
    f842:    d4 e9 4c 80       	r8 = [sp+76]			  ## decoder.c:66:22
    f846:    49 f0 03 17       	r9 = 0x1703  # <WOLASynthesisFilter_Float_M128_m4_r1+0x6FE : 1702 >
    f84a:    00 30             		 r0 = [sp+64]
    f84c:    d0 ec 08 b1       	r11 = [r0+0x18]			  ## syntax.c:268:34
    f850:    d0 ec 04 f1       	r15 = [r0+0x14]			  ## syntax.c:269:40
    f854:    40 20             	r0 = 0x0
    f856:    52 ee d4 00       	b[r13+0x4] = r0			  ## syntax.c:278:24
    f85a:    52 ee d5 00       	b[r13+0x5] = r0			  ## syntax.c:279:22
    f85e:    52 ee d3 00       	b[r13+0x3] = r0			  ## syntax.c:280:20
    f862:    40 e0 24 2c       	r0 = 0x2c24 <WOLASynthesisFilter_Float_M256_m4_r1+0x420 : 2c24 >			  ## syntax.c:280:20
    f866:    80 18             	r0 += r8			  ## syntax.c:280:20
    f868:    00 f1 38 f0       	r0 = r15 + 0x38  #			  ## syntax.c:283:2
    f86c:    80 29             		 [sp+36] = r0			  ## syntax.c:283:2
    f86e:    00 f1 b3 b1       	r0 = r11 + 0x1b3  #			  ## syntax.c:283:2
    f872:    80 2b             		 [sp+44] = r0			  ## syntax.c:283:2
    f874:    80 3a             	[sp+104] = r0			  ## syntax.c:283:2
    f876:    c0 22             	r0 += 0x2			  ## syntax.c:283:2
    f878:    00 f1 b0 b0       	r0 = r11 + 0xb0  #			  ## syntax.c:283:2
    f87c:    80 38             		 [sp+96] = r0			  ## syntax.c:283:2
    f87e:    11 f1 50 89       	r1 = r8 + 0x1950  #			  ## syntax.c:283:2
    f882:    80 37             		 [sp+92] = r0			  ## syntax.c:283:2
    f884:    00 e1 40 c0       	r0 = r12 + 0x40			  ## syntax.c:283:2
    f888:    00 f1 54 c0       	r0 = r12 + 0x54  #			  ## syntax.c:283:2
    f88c:    80 2c             		 [sp+48] = r0			  ## syntax.c:283:2
    f88e:    80 3c             	[sp+112] = r0			  ## syntax.c:283:2
    f890:    81 28             	[sp+32] = r1			  ## syntax.c:283:2
    f892:    18 9c             	r0 = r1 + 0x1c			  ## syntax.c:283:2
    f894:    00 f1 ec d0       	r0 = r13 + 0xec  #			  ## syntax.c:283:2
    f898:    a0 20             		 [sp+128] = r0			  ## syntax.c:283:2
    f89a:    00 f1 00 86       	r0 = r8 + 0x600  #			  ## syntax.c:283:2
    f89e:    80 3b             		 [sp+108] = r0			  ## syntax.c:283:2
    f8a0:    80 2a             	[sp+40] = r0			  ## syntax.c:283:2
    f8a2:    44 20             	r4 = 0x0			  ## syntax.c:283:2
    f8a4:    d4 e9 39 d0       	[sp+56] = r13			  ## syntax.c:283:2
    f8a8:    87 2f             	[sp+60] = r7			  ## syntax.c:283:2
    f8aa:    d4 e9 65 b0       	[sp+100] = r11			  ## syntax.c:283:2
    f8ae:    c0 ea 07 05       	goto 0xa0e <.GJTIE291_0_0_+0x9F6 : 102c0 >
    f8b2:    08 ff 06 00 54 04 	if (r0 > 0x6) goto 0x8a8 <.GJTIE291_0_0_+0x896 : 10160 >
    f8b8:    01 a1             	r1 = r0 << 0x1
    f8ba:    11 01             	tbh [r1]


.GJTIL291_0_0_:
    f8bc:    07 00     < 7 : 0x7 >
    f8be:    09 00     < 9 : 0x9 >
    f8c0:    18 05     < 1304 : 0x518 >
    f8c2:    5d 00     < 93 : 0x5D >
    f8c4:    6c 00     < 108 : 0x6C >
    f8c6:    99 00     < 153 : 0x99 >
    f8c8:    f4 01     < 500 : 0x1F4 >
    f8ca:    41 20             	r1 = 0x0			  ## syntax.c:288:4
    f8cc:    24 9a             	goto 0xb4 <.GJTIE291_0_0_+0xB8 : f982 >			  ## syntax.c:288:4
    f8ce:    50 ee d4 00       	r0 = b[r13+0x4] (u)			  ## syntax.c:237:16
    f8d2:    01 ff 00 00 08 05 	if (r0 != 0x0) goto 0xa10 <.GJTIE291_0_0_+0xA1E : 102e8 >			  ## syntax.c:237:16
    f8d8:    50 ee d5 00       	r0 = b[r13+0x5] (u)			  ## syntax.c:242:6
    f8dc:    09 81             	r1 = r0 + 0x1			  ## syntax.c:242:26
    f8de:    02 ff 03 10 4e 05 	if (r1 >= 0x3) goto 0xa9c <.GJTIE291_0_0_+0xAB6 : 10380 >			  ## syntax.c:242:26
    f8e4:    80 18             	r0 += r8			  ## syntax.c:250:2
    f8e6:    41 e0 0a 16       	r1 = 0x160a <WOLASynthesisFilter_Float_M128_m4_r1+0x606 : 160a >			  ## syntax.c:250:44
    f8ea:    42 21             	r2 = 0x1			  ## syntax.c:250:44
    f8ec:    d8 ee 01 21       	b[r0+r1] = r2			  ## syntax.c:250:44
    f8f0:    80 16             	r0 = r8			  ## syntax.c:443:2
    f8f2:    bf ea 89 f1       	call -0x1cee <init_cpe : dc08 >			  ## syntax.c:443:2
    f8f6:    41 24             	r1 = 0x4			  ## syntax.c:445:39
    f8f8:    e0 16             	r0 = r14			  ## syntax.c:445:39
    f8fa:    bf ea 45 f1       	call -0x1d76 <faad_getbits : db88 >			  ## syntax.c:445:39
    f8fe:    15 e1 e4 86       	r5 = r8 + 0x16e4			  ## syntax.c:445:39
    f902:    e0 d6             	r0 = r14  #			  ## syntax.c:448:28
    f904:    d8 40             		 b[r5+0x0] = r0			  ## syntax.c:445:28
    f906:    bf ea 69 f1       	call -0x1d2e <faad_get1bit : dbdc >			  ## syntax.c:448:28
    f90a:    11 f1 f4 86       	r1 = r8 + 0x16f4  #			  ## syntax.c:448:28
    f90e:    85 3f             		 [sp+124] = r5			  ## syntax.c:448:28
    f910:    d8 41             	b[r5+0x1] = r0			  ## syntax.c:448:26
    f912:    81 3e             	[sp+120] = r1			  ## syntax.c:448:26
    f914:    61 ff 01 00 0f 04 	if ((r0 & 0x1) != 0) goto 0x81e <.GJTIE291_0_0_+0x86E : 10138 >			  ## syntax.c:448:26
    f91a:    40 20             	r0 = 0x0			  ## syntax.c:478:25
    f91c:    98 41             	b[r1+0x1] = r0			  ## syntax.c:478:25
    f91e:    80 d6             	r0 = r8  #			  ## syntax.c:482:16
    f920:    01 3b             		 r1 = [sp+108]			  ## syntax.c:482:16
    f922:    02 2a             	r2 = [sp+40]			  ## syntax.c:482:16
    f924:    03 3c             	r3 = [sp+112]			  ## syntax.c:482:16
    f926:    bf ea bc f3       	call -0x1888 <individual_channel_stream : e0a2 >			  ## syntax.c:482:16
    f92a:    01 ff 00 00 0a 04 	if (r0 != 0x0) goto 0x814 <.GJTIE291_0_0_+0x87A : 10144 >			  ## syntax.c:482:16
    f930:    80 d6             	r0 = r8  #			  ## syntax.c:486:16
    f932:    21 20             		 r1 = [sp+128]			  ## syntax.c:486:16
    f934:    02 2a             	r2 = [sp+40]			  ## syntax.c:486:16
    f936:    03 29             	r3 = [sp+36]			  ## syntax.c:486:16
    f938:    bf ea b3 f3       	call -0x189a <individual_channel_stream : e0a2 >			  ## syntax.c:486:16
    f93c:    01 ff 00 00 01 04 	if (r0 != 0x0) goto 0x802 <.GJTIE291_0_0_+0x87A : 10144 >			  ## syntax.c:486:16
    f942:    d0 ec a0 10       	r1 = [r10+0x0]			  ## syntax.c:492:14
    f946:    40 20             	r0 = 0x0			  ## syntax.c:492:14
    f948:    01 ff 00 10 fb 03 	if (r1 != 0x0) goto 0x7f6 <.GJTIE291_0_0_+0x87A : 10144 >			  ## syntax.c:492:14
    f94e:    d4 e9 11 a0       	[sp+16] = r10
    f952:    00 3e             	r0 = [sp+120]			  ## ms.c:56:14
    f954:    08 41             	r0 = b[r0+0x1] (u)			  ## ms.c:56:14
    f956:    d0 ec c4 12       	r1 = [r12+0x24]			  ## specrec.c:413:28
    f95a:    81 23             	[sp+12] = r1
    f95c:    02 3f             	r2 = [sp+124]
    f95e:    84 2d             	[sp+52] = r4			  ## ms.c:56:9
    f960:    00 ff 00 00 0d 03 	if (r0 == 0x0) goto 0x61a <.GJTIE291_0_0_+0x6B6 : ff80 >			  ## ms.c:56:9
    f966:    50 ed de 00       	r0 = h[r13+0xe] (u)			  ## specrec.c:418:58
    f96a:    80 a3             	r0 = r0 >> 0x3			  ## ms.c:51:32
    f96c:    c2 d4             	r10 = 0  #			  ## ms.c:51:32
    f96e:    80 36             		 [sp+88] = r0			  ## ms.c:51:32
    f970:    80 3d             	[sp+116] = r0			  ## ms.c:51:32
    f972:    45 20             	r5 = 0x0			  ## ms.c:51:32
    f974:    85 80             	goto 0x600 <.GJTIE291_0_0_+0x6AC : ff76 >			  ## ms.c:51:32
    f976:    50 ee d3 00       	r0 = b[r13+0x3] (u)			  ## syntax.c:301:21
    f97a:    c0 21             	r0 += 0x1			  ## syntax.c:301:21
    f97c:    52 ee d3 00       	b[r13+0x3] = r0			  ## syntax.c:301:21
    f980:    41 23             	r1 = 0x3			  ## syntax.c:302:4
    f982:    80 16             	r0 = r8
    f984:    bf ea 27 fd       	call -0x5b2 <decode_sce_lfe : f3d6 >
    f988:    78 40             	r0 = b[r7+0x0] (u)
    f98a:    00 ff 00 00 e7 03 	if (r0 == 0x0) goto 0x7ce <.GJTIE291_0_0_+0x894 : 1015e >
    f990:    c0 ea ae 04       	goto 0x95c <.GJTIE291_0_0_+0xA26 : 102f0 >
    f994:    46 16             	r6 = r4
    f996:    41 24             	r1 = 0x4			  ## syntax.c:608:31
    f998:    e0 16             	r0 = r14			  ## syntax.c:608:31
    f99a:    bf ea f5 f0       	call -0x1e16 <faad_getbits : db88 >			  ## syntax.c:608:31
    f99e:    e0 16             	r0 = r14			  ## syntax.c:609:17
    f9a0:    bf ea 1c f1       	call -0x1dc8 <faad_get1bit : dbdc >			  ## syntax.c:609:17
    f9a4:    0d 16             	r13 = r0			  ## syntax.c:609:17
    f9a6:    41 28             	r1 = 0x8			  ## syntax.c:610:20
    f9a8:    e0 16             	r0 = r14			  ## syntax.c:610:20
    f9aa:    bf ea ed f0       	call -0x1e26 <faad_getbits : db88 >			  ## syntax.c:610:20
    f9ae:    04 16             	r4 = r0			  ## syntax.c:610:20
    f9b0:    c0 17             	r0 = r4.l (u)			  ## syntax.c:611:6
    f9b2:    90 f8 07 fe       	if (r0 != 0xff) goto 0xe <.GJTIE291_0_0_+0xFA : f9c4 >			  ## syntax.c:611:6
    f9b6:    41 28             	r1 = 0x8			  ## syntax.c:613:22
    f9b8:    e0 16             	r0 = r14			  ## syntax.c:613:22
    f9ba:    bf ea e5 f0       	call -0x1e36 <faad_getbits : db88 >			  ## syntax.c:613:22
    f9be:    80 17             	r0 = r0.l (u)			  ## syntax.c:613:12
    f9c0:    04 e1 ff 00       	r4 = r0 + 0xff			  ## syntax.c:613:9
    f9c4:    bd e8 00 40       	if (r13 != 0x0) {
    f9c8:    e0 16             		r0 = r14			  ## syntax.c:616:3
    f9ca:    bf ea 6f fd       		call -0x522
                               	} <faad_byte_align : f4ac >			  ## syntax.c:616:3
    f9ce:    c6 21             	r6 += 0x1			  ## syntax.c:315:18
    f9d0:    c4 17             	r4 = r4.l (u)			  ## syntax.c:315:18
    f9d2:    45 20             	r5 = 0x0			  ## syntax.c:315:18
    f9d4:    d4 e9 38 d0       	r13 = [sp+56]			  ## syntax.c:315:18
    f9d8:    04 85             	goto 0xa <.GJTIE291_0_0_+0x11A : f9e4 >			  ## syntax.c:315:18
    f9da:    41 28             	r1 = 0x8			  ## syntax.c:620:3
    f9dc:    e0 16             	r0 = r14			  ## syntax.c:620:3
    f9de:    bf ea d3 f0       	call -0x1e5a <faad_getbits : db88 >			  ## syntax.c:620:3
    f9e2:    c5 21             	r5 += 0x1			  ## syntax.c:618:26
    f9e4:    d0 17             	r0 = r5.l (u)			  ## syntax.c:618:14
    f9e6:    84 e9 f8 01       	if (r0 < r4) goto -0x10 <.GJTIE291_0_0_+0x110 : f9da >			  ## syntax.c:618:14
    f9ea:    64 16             	r4 = r6
    f9ec:    d5 99             	goto 0x772 <.GJTIE291_0_0_+0x896 : 10160 >
    f9ee:    61 ff ff 40 c4 04 	if ((r4 & 0xFF) != 0) goto 0x988 <.GJTIE291_0_0_+0xAB2 : 1037c >
    f9f4:    41 20             	r1 = 0x0			  ## syntax.c:80:16
    f9f6:    42 e0 d7 01       	r2 = 0x1d7 <_MASK_MEM_SIZE+0x32 : 1d6 >			  ## syntax.c:80:16
    f9fa:    b0 16             	r0 = r11			  ## syntax.c:80:16
    f9fc:    80 ff 24 48 ff ff 	call -0xb7dc <memset : 4226 >			  ## syntax.c:80:16
    fa02:    41 24             	r1 = 0x4			  ## syntax.c:82:39
    fa04:    e0 16             	r0 = r14			  ## syntax.c:82:39
    fa06:    bf ea bf f0       	call -0x1e82 <faad_getbits : db88 >			  ## syntax.c:82:39
    fa0a:    52 ee b0 00       	b[r11+0x0] = r0			  ## syntax.c:82:28
    fa0e:    41 22             	r1 = 0x2			  ## syntax.c:84:30
    fa10:    e0 16             	r0 = r14			  ## syntax.c:84:30
    fa12:    bf ea b9 f0       	call -0x1e8e <faad_getbits : db88 >			  ## syntax.c:84:30
    fa16:    52 ee b1 00       	b[r11+0x1] = r0			  ## syntax.c:84:19
    fa1a:    41 24             	r1 = 0x4			  ## syntax.c:85:27
    fa1c:    e0 16             	r0 = r14			  ## syntax.c:85:27
    fa1e:    bf ea b3 f0       	call -0x1e9a <faad_getbits : db88 >			  ## syntax.c:85:27
    fa22:    52 ee b2 00       	b[r11+0x2] = r0			  ## syntax.c:85:16
    fa26:    41 24             	r1 = 0x4			  ## syntax.c:86:45
    fa28:    e0 16             	r0 = r14			  ## syntax.c:86:45
    fa2a:    bf ea ad f0       	call -0x1ea6 <faad_getbits : db88 >			  ## syntax.c:86:45
    fa2e:    52 ee b3 00       	b[r11+0x3] = r0			  ## syntax.c:86:34
    fa32:    41 24             	r1 = 0x4			  ## syntax.c:87:44
    fa34:    e0 16             	r0 = r14			  ## syntax.c:87:44
    fa36:    bf ea a7 f0       	call -0x1eb2 <faad_getbits : db88 >			  ## syntax.c:87:44
    fa3a:    52 ee b4 00       	b[r11+0x4] = r0			  ## syntax.c:87:33
    fa3e:    41 24             	r1 = 0x4			  ## syntax.c:88:44
    fa40:    e0 16             	r0 = r14			  ## syntax.c:88:44
    fa42:    bf ea a1 f0       	call -0x1ebe <faad_getbits : db88 >			  ## syntax.c:88:44
    fa46:    52 ee b5 00       	b[r11+0x5] = r0			  ## syntax.c:88:33
    fa4a:    41 22             	r1 = 0x2			  ## syntax.c:89:43
    fa4c:    e0 16             	r0 = r14			  ## syntax.c:89:43
    fa4e:    bf ea 9b f0       	call -0x1eca <faad_getbits : db88 >			  ## syntax.c:89:43
    fa52:    52 ee b6 00       	b[r11+0x6] = r0			  ## syntax.c:89:32
    fa56:    41 23             	r1 = 0x3			  ## syntax.c:90:42
    fa58:    e0 16             	r0 = r14			  ## syntax.c:90:42
    fa5a:    bf ea 95 f0       	call -0x1ed6 <faad_getbits : db88 >			  ## syntax.c:90:42
    fa5e:    52 ee b7 00       	b[r11+0x7] = r0			  ## syntax.c:90:31
    fa62:    41 24             	r1 = 0x4			  ## syntax.c:91:40
    fa64:    e0 16             	r0 = r14			  ## syntax.c:91:40
    fa66:    bf ea 8f f0       	call -0x1ee2 <faad_getbits : db88 >			  ## syntax.c:91:40
    fa6a:    52 ee b8 00       	b[r11+0x8] = r0			  ## syntax.c:91:29
    fa6e:    e0 16             	r0 = r14			  ## syntax.c:93:30
    fa70:    bf ea b4 f0       	call -0x1e98 <faad_get1bit : dbdc >			  ## syntax.c:93:30
    fa74:    52 ee b9 00       	b[r11+0x9] = r0			  ## syntax.c:93:28
    fa78:    80 f8 06 02       	if (r0 != 0x1) goto 0xc <.GJTIE291_0_0_+0x1BE : fa88 >			  ## syntax.c:93:28
    fa7c:    41 24             	r1 = 0x4			  ## syntax.c:96:47
    fa7e:    e0 16             	r0 = r14			  ## syntax.c:96:47
    fa80:    bf ea 82 f0       	call -0x1efc <faad_getbits : db88 >			  ## syntax.c:96:47
    fa84:    52 ee ba 00       	b[r11+0xa] = r0			  ## syntax.c:96:36
    fa88:    e0 16             	r0 = r14			  ## syntax.c:99:32
    fa8a:    bf ea a7 f0       	call -0x1eb2 <faad_get1bit : dbdc >			  ## syntax.c:99:32
    fa8e:    52 ee bb 00       	b[r11+0xb] = r0			  ## syntax.c:99:30
    fa92:    80 f8 06 02       	if (r0 != 0x1) goto 0xc <.GJTIE291_0_0_+0x1D8 : faa2 >			  ## syntax.c:99:30
    fa96:    41 24             	r1 = 0x4			  ## syntax.c:102:49
    fa98:    e0 16             	r0 = r14			  ## syntax.c:102:49
    fa9a:    bf ea 75 f0       	call -0x1f16 <faad_getbits : db88 >			  ## syntax.c:102:49
    fa9e:    52 ee bc 00       	b[r11+0xc] = r0			  ## syntax.c:102:38
    faa2:    e0 16             	r0 = r14			  ## syntax.c:105:36
    faa4:    bf ea 9a f0       	call -0x1ecc <faad_get1bit : dbdc >			  ## syntax.c:105:36
    faa8:    52 ee bd 00       	b[r11+0xd] = r0			  ## syntax.c:105:34
    faac:    80 f8 0b 02       	if (r0 != 0x1) goto 0x16 <.GJTIE291_0_0_+0x1FC : fac6 >			  ## syntax.c:105:34
    fab0:    41 22             	r1 = 0x2			  ## syntax.c:108:38
    fab2:    e0 16             	r0 = r14			  ## syntax.c:108:38
    fab4:    bf ea 68 f0       	call -0x1f30 <faad_getbits : db88 >			  ## syntax.c:108:38
    fab8:    52 ee bf 00       	b[r11+0xf] = r0			  ## syntax.c:108:27
    fabc:    e0 16             	r0 = r14			  ## syntax.c:109:33
    fabe:    bf ea 8d f0       	call -0x1ee6 <faad_get1bit : dbdc >			  ## syntax.c:109:33
    fac2:    52 ee be 00       	b[r11+0xe] = r0			  ## syntax.c:109:31
    fac6:    44 20             	r4 = 0x0
    fac8:    14 83             	goto 0x46 <.GJTIE291_0_0_+0x246 : fb10 >
    faca:    b4 e0 b0 50       	r5 = r11 + r0			  ## syntax.c:114:3
    face:    e0 16             	r0 = r14			  ## syntax.c:114:34
    fad0:    bf ea 84 f0       	call -0x1ef8 <faad_get1bit : dbdc >			  ## syntax.c:114:34
    fad4:    52 ee 50 01       	b[r5+0x10] = r0			  ## syntax.c:114:32
    fad8:    41 24             	r1 = 0x4			  ## syntax.c:115:47
    fada:    e0 16             	r0 = r14			  ## syntax.c:115:47
    fadc:    bf ea 54 f0       	call -0x1f58 <faad_getbits : db88 >			  ## syntax.c:115:47
    fae0:    52 ee 50 02       	b[r5+0x20] = r0			  ## syntax.c:115:36
    fae4:    50 ee 50 21       	r2 = b[r5+0x10] (u)			  ## syntax.c:117:7
    fae8:    00 d7             	r0 = r0.b0 (u)  #			  ## syntax.c:117:7
    faea:    79 40             		 r1 = b[r7+0x0] (u)			  ## syntax.c:117:7
    faec:    b0 18             	r0 += r11			  ## syntax.c:124:4
    faee:    22 ea 01 60       	if ((r2 & 0x1) == 0) {			  ## syntax.c:124:4
    faf2:    02 e1 b7 01       		r2 = r0 + 0x1b7			  ## syntax.c:124:4
    faf6:    40 21             		r0 = 0x1
                               	} else {			  ## syntax.c:124:4
    faf8:    02 e1 c7 01       		r2 = r0 + 0x1c7			  ## syntax.c:119:4
    fafc:    40 22             		r0 = 0x2
                               	}			  ## syntax.c:119:4
    fafe:    a9 40             	b[r2+0x0] = r1			  ## syntax.c:119:4
    fb00:    02 3a             	r2 = [sp+104]			  ## syntax.c:119:4
    fb02:    29 40             	r1 = b[r2+0x0] (u)			  ## syntax.c:119:4
    fb04:    01 18             	r1 += r0			  ## syntax.c:119:4
    fb06:    a9 40             	b[r2+0x0] = r1			  ## syntax.c:119:4
    fb08:    79 40             	r1 = b[r7+0x0] (u)			  ## syntax.c:119:4
    fb0a:    10 18             	r0 += r1			  ## syntax.c:119:4
    fb0c:    f8 40             	b[r7+0x0] = r0			  ## syntax.c:121:18
    fb0e:    c4 21             	r4 += 0x1			  ## syntax.c:112:52
    fb10:    50 ee b3 10       	r1 = b[r11+0x3] (u)			  ## syntax.c:112:23
    fb14:    40 17             	r0 = r4.b0 (u)			  ## syntax.c:112:14
    fb16:    07 e1 b0 b0       	r7 = r11 + 0xb0			  ## syntax.c:112:14
    fb1a:    81 e9 d6 01       	if (r0 < r1) goto -0x54 <.GJTIE291_0_0_+0x200 : faca >			  ## syntax.c:112:2
    fb1e:    44 20             	r4 = 0x0
    fb20:    14 83             	goto 0x46 <.GJTIE291_0_0_+0x29E : fb68 >
    fb22:    b4 e0 b0 50       	r5 = r11 + r0			  ## syntax.c:132:3
    fb26:    e0 16             	r0 = r14			  ## syntax.c:132:33
    fb28:    bf ea 58 f0       	call -0x1f50 <faad_get1bit : dbdc >			  ## syntax.c:132:33
    fb2c:    52 ee 50 03       	b[r5+0x30] = r0			  ## syntax.c:132:31
    fb30:    41 24             	r1 = 0x4			  ## syntax.c:133:46
    fb32:    e0 16             	r0 = r14			  ## syntax.c:133:46
    fb34:    bf ea 28 f0       	call -0x1fb0 <faad_getbits : db88 >			  ## syntax.c:133:46
    fb38:    52 ee 50 04       	b[r5+0x40] = r0			  ## syntax.c:133:35
    fb3c:    50 ee 50 23       	r2 = b[r5+0x30] (u)			  ## syntax.c:135:7
    fb40:    00 d7             	r0 = r0.b0 (u)  #			  ## syntax.c:135:7
    fb42:    79 40             		 r1 = b[r7+0x0] (u)			  ## syntax.c:135:7
    fb44:    b0 18             	r0 += r11			  ## syntax.c:142:4
    fb46:    22 ea 01 60       	if ((r2 & 0x1) == 0) {			  ## syntax.c:142:4
    fb4a:    02 e1 b7 01       		r2 = r0 + 0x1b7			  ## syntax.c:142:4
    fb4e:    40 21             		r0 = 0x1
                               	} else {			  ## syntax.c:142:4
    fb50:    02 e1 c7 01       		r2 = r0 + 0x1c7			  ## syntax.c:137:4
    fb54:    40 22             		r0 = 0x2
                               	}			  ## syntax.c:137:4
    fb56:    a9 40             	b[r2+0x0] = r1			  ## syntax.c:137:4
    fb58:    02 3a             	r2 = [sp+104]			  ## syntax.c:137:4
    fb5a:    29 41             	r1 = b[r2+0x1] (u)			  ## syntax.c:137:4
    fb5c:    01 18             	r1 += r0			  ## syntax.c:137:4
    fb5e:    a9 41             	b[r2+0x1] = r1			  ## syntax.c:137:4
    fb60:    79 40             	r1 = b[r7+0x0] (u)			  ## syntax.c:137:4
    fb62:    10 18             	r0 += r1			  ## syntax.c:137:4
    fb64:    f8 40             	b[r7+0x0] = r0			  ## syntax.c:139:18
    fb66:    c4 21             	r4 += 0x1			  ## syntax.c:130:51
    fb68:    50 ee b4 10       	r1 = b[r11+0x4] (u)			  ## syntax.c:130:23
    fb6c:    40 17             	r0 = r4.b0 (u)			  ## syntax.c:130:14
    fb6e:    81 e9 d8 01       	if (r0 < r1) goto -0x50 <.GJTIE291_0_0_+0x258 : fb22 >			  ## syntax.c:130:14
    fb72:    c0 14             	r8 = 0
    fb74:    14 8e             	goto 0x5c <.GJTIE291_0_0_+0x308 : fbd2 >
    fb76:    b4 e0 b0 40       	r4 = r11 + r0			  ## syntax.c:150:3
    fb7a:    e0 16             	r0 = r14			  ## syntax.c:150:33
    fb7c:    bf ea 2e f0       	call -0x1fa4 <faad_get1bit : dbdc >			  ## syntax.c:150:33
    fb80:    52 ee 40 05       	b[r4+0x50] = r0			  ## syntax.c:150:31
    fb84:    41 24             	r1 = 0x4			  ## syntax.c:151:46
    fb86:    e0 16             	r0 = r14			  ## syntax.c:151:46
    fb88:    bf ea fe ef       	call -0x2004 <faad_getbits : db88 >			  ## syntax.c:151:46
    fb8c:    52 ee 40 06       	b[r4+0x60] = r0			  ## syntax.c:151:35
    fb90:    50 ee 40 35       	r3 = b[r4+0x50] (u)			  ## syntax.c:153:7
    fb94:    02 d7             	r2 = r0.b0 (u)  #			  ## syntax.c:153:7
    fb96:    79 40             		 r1 = b[r7+0x0] (u)			  ## syntax.c:153:7
    fb98:    53 e8 0b 02       	if ((r3 & 0x1) != 0) goto 0x16 <.GJTIE291_0_0_+0x2E8 : fbb2 >			  ## syntax.c:153:7
    fb9c:    00 3a             	r0 = [sp+104]
    fb9e:    b4 f0 b0 02       	r0 = r11 + r2  #			  ## syntax.c:160:4
    fba2:    0d 42             		 r5 = b[r0+0x2] (u)			  ## syntax.c:160:4
    fba4:    03 f1 b7 01       	r3 = r0 + 0x1b7  #			  ## syntax.c:160:4
    fba8:    04 38             		 r4 = [sp+96]			  ## syntax.c:160:4
    fbaa:    42 21             	r2 = 0x1			  ## syntax.c:160:4
    fbac:    10 d6             	r0 = r1  #			  ## syntax.c:160:4
    fbae:    06 37             		 r6 = [sp+92]			  ## syntax.c:160:4
    fbb0:    04 89             	goto 0x12 <.GJTIE291_0_0_+0x2FA : fbc4 >			  ## syntax.c:160:4
    fbb2:    b2 d8             	r2 += r11  #			  ## syntax.c:155:4
    fbb4:    00 3a             		 r0 = [sp+104]			  ## syntax.c:155:4
    fbb6:    03 f1 c7 21       	r3 = r2 + 0x1c7  #			  ## syntax.c:155:4
    fbba:    08 42             		 r0 = b[r0+0x2] (u)			  ## syntax.c:155:4
    fbbc:    42 22             	r2 = 0x2			  ## syntax.c:155:4
    fbbe:    15 d6             	r5 = r1  #			  ## syntax.c:155:4
    fbc0:    04 37             		 r4 = [sp+92]			  ## syntax.c:155:4
    fbc2:    06 38             	r6 = [sp+96]			  ## syntax.c:155:4
    fbc4:    29 dd             	r1 = r2 + r5  #
    fbc6:    b9 40             		 b[r3+0x0] = r1
    fbc8:    20 d8             	r0 += r2  #
    fbca:    c9 40             		 b[r4+0x0] = r1
    fbcc:    08 f1 01 80       	r8 = r8 + 0x1  #			  ## syntax.c:148:51
    fbd0:    e8 40             		 b[r6+0x0] = r0			  ## syntax.c:148:51
    fbd2:    50 ee b5 10       	r1 = b[r11+0x5] (u)			  ## syntax.c:148:23
    fbd6:    b0 e1 20 80       	r0 = uextra(r8, p:0x0, l:0x8)			  ## syntax.c:148:14
    fbda:    81 e9 cc 01       	if (r0 < r1) goto -0x68 <.GJTIE291_0_0_+0x2AC : fb76 >			  ## syntax.c:148:14
    fbde:    44 20             	r4 = 0x0
    fbe0:    d4 e9 4c 80       	r8 = [sp+76]
    fbe4:    04 96             	goto 0x2c <.GJTIE291_0_0_+0x348 : fc12 >
    fbe6:    41 24             	r1 = 0x4			  ## syntax.c:168:45
    fbe8:    e0 16             	r0 = r14			  ## syntax.c:168:45
    fbea:    bf ea cd ef       	call -0x2066 <faad_getbits : db88 >			  ## syntax.c:168:45
    fbee:    b4 e0 b0 15       	r1 = r11 + r5			  ## syntax.c:168:3
    fbf2:    52 ee 10 07       	b[r1+0x70] = r0			  ## syntax.c:168:34
    fbf6:    00 d7             	r0 = r0.b0 (u)  #			  ## syntax.c:170:3
    fbf8:    79 40             		 r1 = b[r7+0x0] (u)			  ## syntax.c:170:59
    fbfa:    b0 18             	r0 += r11			  ## syntax.c:170:3
    fbfc:    42 e0 b7 01       	r2 = 0x1b7 <_MASK_MEM_SIZE+0x12 : 1b6 >			  ## syntax.c:170:52
    fc00:    d8 ee 01 12       	b[r0+r2] = r1			  ## syntax.c:170:52
    fc04:    02 3a             	r2 = [sp+104]			  ## syntax.c:170:52
    fc06:    28 43             	r0 = b[r2+0x3] (u)			  ## syntax.c:171:24
    fc08:    c0 21             	r0 += 0x1			  ## syntax.c:171:24
    fc0a:    a8 43             	b[r2+0x3] = r0			  ## syntax.c:171:24
    fc0c:    18 81             	r0 = r1 + 0x1			  ## syntax.c:172:16
    fc0e:    f8 40             	b[r7+0x0] = r0			  ## syntax.c:172:16
    fc10:    c4 21             	r4 += 0x1			  ## syntax.c:166:50
    fc12:    50 ee b6 00       	r0 = b[r11+0x6] (u)			  ## syntax.c:166:23
    fc16:    45 17             	r5 = r4.b0 (u)			  ## syntax.c:166:16
    fc18:    80 e9 e5 51       	if (r5 < r0) goto -0x36 <.GJTIE291_0_0_+0x31C : fbe6 >			  ## syntax.c:166:2
    fc1c:    44 20             	r4 = 0x0
    fc1e:    04 89             	goto 0x12 <.GJTIE291_0_0_+0x368 : fc32 >
    fc20:    41 24             	r1 = 0x4			  ## syntax.c:176:52
    fc22:    e0 16             	r0 = r14			  ## syntax.c:176:52
    fc24:    bf ea b0 ef       	call -0x20a0 <faad_getbits : db88 >			  ## syntax.c:176:52
    fc28:    b4 e0 b0 15       	r1 = r11 + r5			  ## syntax.c:176:3
    fc2c:    52 ee 10 08       	b[r1+0x80] = r0			  ## syntax.c:176:41
    fc30:    c4 21             	r4 += 0x1			  ## syntax.c:175:49
    fc32:    50 ee b7 00       	r0 = b[r11+0x7] (u)			  ## syntax.c:175:23
    fc36:    45 17             	r5 = r4.b0 (u)			  ## syntax.c:175:16
    fc38:    80 e9 f2 51       	if (r5 < r0) goto -0x1c <.GJTIE291_0_0_+0x356 : fc20 >			  ## syntax.c:175:2
    fc3c:    44 20             	r4 = 0x0
    fc3e:    04 8e             	goto 0x1c <.GJTIE291_0_0_+0x392 : fc5c >
    fc40:    b4 e0 b0 50       	r5 = r11 + r0			  ## syntax.c:180:3
    fc44:    e0 16             	r0 = r14			  ## syntax.c:180:34
    fc46:    bf ea c9 ef       	call -0x206e <faad_get1bit : dbdc >			  ## syntax.c:180:34
    fc4a:    52 ee 50 09       	b[r5+0x90] = r0			  ## syntax.c:180:32
    fc4e:    41 24             	r1 = 0x4			  ## syntax.c:181:50
    fc50:    e0 16             	r0 = r14			  ## syntax.c:181:50
    fc52:    bf ea 99 ef       	call -0x20ce <faad_getbits : db88 >			  ## syntax.c:181:50
    fc56:    52 ee 50 0a       	b[r5+0xa0] = r0			  ## syntax.c:181:39
    fc5a:    c4 21             	r4 += 0x1			  ## syntax.c:178:47
    fc5c:    50 ee b8 10       	r1 = b[r11+0x8] (u)			  ## syntax.c:178:23
    fc60:    40 17             	r0 = r4.b0 (u)			  ## syntax.c:178:14
    fc62:    81 e9 ed 01       	if (r0 < r1) goto -0x26 <.GJTIE291_0_0_+0x376 : fc40 >			  ## syntax.c:178:14
    fc66:    e0 16             	r0 = r14			  ## syntax.c:184:2
    fc68:    bf ea 20 fc       	call -0x7c0 <faad_byte_align : f4ac >			  ## syntax.c:184:2
    fc6c:    41 28             	r1 = 0x8			  ## syntax.c:186:38
    fc6e:    bf ea 8b ef       	call -0x20ea <faad_getbits : db88 >			  ## syntax.c:186:38
    fc72:    f8 41             	b[r7+0x1] = r0			  ## syntax.c:186:27
    fc74:    44 20             	r4 = 0x0			  ## syntax.c:186:27
    fc76:    04 8a             	goto 0x14 <.GJTIE291_0_0_+0x3C2 : fc8c >
    fc78:    41 28             	r1 = 0x8			  ## syntax.c:190:41
    fc7a:    e0 16             	r0 = r14			  ## syntax.c:190:41
    fc7c:    bf ea 84 ef       	call -0x20f8 <faad_getbits : db88 >			  ## syntax.c:190:41
    fc80:    b4 e0 b0 15       	r1 = r11 + r5			  ## syntax.c:190:3
    fc84:    52 ee 12 0b       	b[r1+0xb2] = r0			  ## syntax.c:190:30
    fc88:    78 41             	r0 = b[r7+0x1] (u)			  ## syntax.c:190:30
    fc8a:    c4 21             	r4 += 0x1			  ## syntax.c:188:45
    fc8c:    45 17             	r5 = r4.b0 (u)			  ## syntax.c:188:14
    fc8e:    00 17             	r0 = r0.b0 (u)			  ## syntax.c:188:16
    fc90:    80 e9 f2 51       	if (r5 < r0) goto -0x1c <.GJTIE291_0_0_+0x3AE : fc78 >			  ## syntax.c:188:16
    fc94:    b4 e0 b0 05       	r0 = r11 + r5			  ## syntax.c:192:2
    fc98:    41 20             	r1 = 0x0			  ## syntax.c:192:29
    fc9a:    52 ee 02 1b       	b[r0+0xb2] = r1			  ## syntax.c:192:29
    fc9e:    44 21             	r4 = 0x1			  ## syntax.c:192:29
    fca0:    07 2f             	r7 = [sp+60]			  ## syntax.c:192:29
    fca2:    25 9e             	goto 0x4bc <.GJTIE291_0_0_+0x896 : 10160 >			  ## syntax.c:192:29
    fca4:    e0 d6             	r0 = r14  #			  ## syntax.c:633:15
    fca6:    84 2d             		 [sp+52] = r4			  ## syntax.c:633:15
    fca8:    41 24             	r1 = 0x4			  ## syntax.c:633:15
    fcaa:    bf ea 6d ef       	call -0x2126 <faad_getbits : db88 >			  ## syntax.c:633:15
    fcae:    0d 16             	r13 = r0			  ## syntax.c:633:15
    fcb0:    80 f8 06 1e       	if (r0 != 0xf) goto 0xc <.GJTIE291_0_0_+0x3F6 : fcc0 >
    fcb4:    41 28             	r1 = 0x8			  ## syntax.c:636:17
    fcb6:    e0 16             	r0 = r14			  ## syntax.c:636:17
    fcb8:    bf ea 66 ef       	call -0x2134 <faad_getbits : db88 >			  ## syntax.c:636:17
    fcbc:    0d e1 0e 00       	r13 = r0 + 0xe			  ## syntax.c:636:9
    fcc0:    0d fd 1a 02       	ifs (r13 >= 0x1) goto 0x34 <.GJTIE291_0_0_+0x42E : fcf8 >
    fcc4:    74 9b             	goto 0x1f6 <.GJTIE291_0_0_+0x5F2 : febc >
    fcc6:    40 20             	r0 = 0x0
    fcc8:    05 16             	r5 = r0
    fcca:    41 28             	r1 = 0x8			  ## syntax.c:1128:38
    fccc:    e0 16             	r0 = r14			  ## syntax.c:1128:38
    fcce:    bf ea 5b ef       	call -0x214a <faad_getbits : db88 >			  ## syntax.c:1128:38
    fcd2:    01 17             	r1 = r0.b0 (u)			  ## syntax.c:1129:26
    fcd4:    d0 17             	r0 = r5.l (u)			  ## syntax.c:1129:23
    fcd6:    10 18             	r0 += r1			  ## syntax.c:1129:23
    fcd8:    c4 21             	r4 += 0x1			  ## syntax.c:1130:16
    fcda:    11 f8 f5 ff       	if (r1 == 0xff) goto -0x16 <.GJTIE291_0_0_+0x3FE : fcc8 >			  ## syntax.c:1131:4
    fcde:    15 18             	r5 += r1			  ## syntax.c:1133:20
    fce0:    d0 17             	r0 = r5.l (u)			  ## syntax.c:1133:4
    fce2:    00 48             	if (r0 == 0) goto 0x10 <.GJTIE291_0_0_+0x42A : fcf4 >			  ## syntax.c:1133:4
    fce4:    41 28             	r1 = 0x8			  ## syntax.c:1135:34
    fce6:    e0 16             	r0 = r14			  ## syntax.c:1135:34
    fce8:    bf ea 4e ef       	call -0x2164 <faad_getbits : db88 >			  ## syntax.c:1135:34
    fcec:    40 17             	r0 = r4.b0 (u)			  ## syntax.c:1136:33
    fcee:    50 18             	r0 += r5			  ## syntax.c:1136:31
    fcf0:    c0 21             	r0 += 0x1			  ## syntax.c:1136:45
    fcf2:    64 9f             	goto 0x1be <.GJTIE291_0_0_+0x5E8 : feb2 >			  ## syntax.c:1136:45
    fcf4:    44 20             	r4 = 0x0
    fcf6:    64 8a             	goto 0x194 <.GJTIE291_0_0_+0x5C2 : fe8c >
    fcf8:    e0 16             	r0 = r14			  ## syntax.c:643:19
    fcfa:    bf ea f4 fb       	call -0x818 <faad_get_processed_bits : f4e6 >			  ## syntax.c:643:19
    fcfe:    01 34             	r1 = [sp+80]			  ## syntax.c:644:21
    fd00:    11 6b             	r1 = [r1+0x2c] 			  ## syntax.c:644:21
    fd02:    11 a3             	r1 = r1 << 0x3			  ## syntax.c:644:33
    fd04:    10 1e             	r0 = r1 - r0			  ## syntax.c:644:37
    fd06:    80 fd d9 08       	ifs (r0 < 0x4) goto 0x1b2 <.GJTIE291_0_0_+0x5F2 : febc >
    fd0a:    41 24             	r1 = 0x4			  ## syntax.c:1105:36
    fd0c:    44 24             	r4 = 0x4			  ## syntax.c:1105:36
    fd0e:    e0 16             	r0 = r14			  ## syntax.c:1105:36
    fd10:    bf ea 3a ef       	call -0x218c <faad_getbits : db88 >			  ## syntax.c:1105:36
    fd14:    00 17             	r0 = r0.b0 (u)			  ## syntax.c:1107:2
    fd16:    00 f8 9e 02       	if (r0 == 0x1) goto 0x13c <.GJTIE291_0_0_+0x58C : fe56 >			  ## syntax.c:1107:2
    fd1a:    00 f8 af 04       	if (r0 == 0x2) goto 0x15e <.GJTIE291_0_0_+0x5B2 : fe7c >
    fd1e:    80 f8 b5 16       	if (r0 != 0xb) goto 0x16a <.GJTIE291_0_0_+0x5C2 : fe8c >
    fd22:    48 e0 01 00       	r8 = 0x1 <mem_code_size : 0 >
    fd26:    52 ee f0 80       	b[r15+0x0] = r8			  ## syntax.c:1110:16
    fd2a:    52 ee f1 80       	b[r15+0x1] = r8			  ## syntax.c:1158:17
    fd2e:    e0 16             	r0 = r14			  ## syntax.c:1160:6
    fd30:    bf ea 54 ef       	call -0x2158 <faad_get1bit : dbdc >			  ## syntax.c:1160:6
    fd34:    50 e8 0c 00       	if ((r0 & 0x1) == 0) goto 0x18 <.GJTIE291_0_0_+0x486 : fd50 >			  ## syntax.c:1160:6
    fd38:    41 24             	r1 = 0x4			  ## syntax.c:1162:36
    fd3a:    e0 16             	r0 = r14			  ## syntax.c:1162:36
    fd3c:    bf ea 24 ef       	call -0x21b8 <faad_getbits : db88 >			  ## syntax.c:1162:36
    fd40:    52 ee f2 00       	b[r15+0x2] = r0			  ## syntax.c:1162:25
    fd44:    41 24             	r1 = 0x4			  ## syntax.c:1163:38
    fd46:    e0 16             	r0 = r14			  ## syntax.c:1163:38
    fd48:    bf ea 1e ef       	call -0x21c4 <faad_getbits : db88 >			  ## syntax.c:1163:38
    fd4c:    48 e0 02 00       	r8 = 0x2 <mem_code_size+0x2 : 2 >
    fd50:    e0 16             	r0 = r14			  ## syntax.c:1167:31
    fd52:    bf ea 43 ef       	call -0x217a <faad_get1bit : dbdc >			  ## syntax.c:1167:31
    fd56:    52 ee f3 00       	b[r15+0x3] = r0			  ## syntax.c:1167:29
    fd5a:    80 f8 2a 02       	if (r0 != 0x1) goto 0x54 <.GJTIE291_0_0_+0x4E8 : fdb2 >			  ## syntax.c:1167:29
    fd5e:    44 20             	r4 = 0x0
    fd60:    05 2b             	r5 = [sp+44]
    fd62:    04 86             	goto 0xc <.GJTIE291_0_0_+0x4A6 : fd70 >
    fd64:    e0 16             	r0 = r14			  ## syntax.c:1212:26
    fd66:    bf ea 39 ef       	call -0x218e <faad_get1bit : dbdc >			  ## syntax.c:1212:26
    fd6a:    d8 ee 51 04       	b[r5+r4] = r0			  ## syntax.c:1212:24
    fd6e:    c4 21             	r4 += 0x1			  ## syntax.c:1210:22
    fd70:    84 f8 f8 0f       	if (r4 != 0x7) goto -0x10 <.GJTIE291_0_0_+0x49A : fd64 >			  ## syntax.c:1210:2
    fd74:    47 27             	r7 = 0x7
    fd76:    44 21             	r4 = 0x1
    fd78:    04 90             	goto 0x20 <.GJTIE291_0_0_+0x4D0 : fd9a >
    fd7a:    70 17             	r0 = r7.b0 (u)
    fd7c:    0d 87             	r5 = r0 + 0x7
    fd7e:    04 88             	goto 0x10 <.GJTIE291_0_0_+0x4C6 : fd90 >
    fd80:    b4 e0 f0 60       	r6 = r15 + r0			  ## syntax.c:1220:4
    fd84:    e0 16             	r0 = r14			  ## syntax.c:1220:27
    fd86:    bf ea 29 ef       	call -0x21ae <faad_get1bit : dbdc >			  ## syntax.c:1220:27
    fd8a:    52 ee 68 03       	b[r6+0x38] = r0			  ## syntax.c:1220:25
    fd8e:    c7 21             	r7 += 0x1			  ## syntax.c:1218:51
    fd90:    70 17             	r0 = r7.b0 (u)			  ## syntax.c:1218:27
    fd92:    85 e9 f5 01       	if (r0 < r5) goto -0x16 <.GJTIE291_0_0_+0x4B6 : fd80 >			  ## syntax.c:1218:27
    fd96:    c4 21             	r4 += 0x1			  ## syntax.c:1222:4
    fd98:    57 16             	r7 = r5			  ## syntax.c:1222:4
    fd9a:    40 17             	r0 = r4.b0 (u)			  ## syntax.c:1216:40
    fd9c:    b4 e0 f0 50       	r5 = r15 + r0			  ## syntax.c:1216:10
    fda0:    e0 16             	r0 = r14			  ## syntax.c:1216:49
    fda2:    bf ea 1b ef       	call -0x21ca <faad_get1bit : dbdc >			  ## syntax.c:1216:49
    fda6:    52 ee 59 03       	b[r5+0x39] = r0			  ## syntax.c:1216:47
    fdaa:    00 f8 e6 03       	if (r0 == 0x1) goto -0x34 <.GJTIE291_0_0_+0x4B0 : fd7a >			  ## syntax.c:1216:47
    fdae:    48 d8             	r8 += r4  #			  ## syntax.c:1170:5
    fdb0:    07 2f             		 r7 = [sp+60]			  ## syntax.c:1170:5
    fdb2:    e0 16             	r0 = r14			  ## syntax.c:1173:6
    fdb4:    bf ea 12 ef       	call -0x21dc <faad_get1bit : dbdc >			  ## syntax.c:1173:6
    fdb8:    50 e8 22 00       	if ((r0 & 0x1) == 0) goto 0x44 <.GJTIE291_0_0_+0x536 : fe00 >			  ## syntax.c:1173:6
    fdbc:    41 24             	r1 = 0x4			  ## syntax.c:1175:24
    fdbe:    e0 16             	r0 = r14			  ## syntax.c:1175:24
    fdc0:    bf ea e2 ee       	call -0x223c <faad_getbits : db88 >			  ## syntax.c:1175:24
    fdc4:    04 16             	r4 = r0			  ## syntax.c:1175:24
    fdc6:    41 24             	r1 = 0x4			  ## syntax.c:1176:40
    fdc8:    e0 16             	r0 = r14			  ## syntax.c:1176:40
    fdca:    bf ea dd ee       	call -0x2246 <faad_getbits : db88 >			  ## syntax.c:1176:40
    fdce:    50 ee f1 00       	r0 = b[r15+0x1] (u)			  ## syntax.c:1178:18
    fdd2:    40 18             	r0 += r4			  ## syntax.c:1178:18
    fdd4:    52 ee f1 00       	b[r15+0x1] = r0			  ## syntax.c:1178:18
    fdd8:    44 20             	r4 = 0x0
    fdda:    04 8a             	goto 0x14 <.GJTIE291_0_0_+0x526 : fdf0 >
    fddc:    41 28             	r1 = 0x8			  ## syntax.c:1182:32
    fdde:    e0 16             	r0 = r14			  ## syntax.c:1182:32
    fde0:    bf ea d2 ee       	call -0x225c <faad_getbits : db88 >			  ## syntax.c:1182:32
    fde4:    b4 e0 f0 15       	r1 = r15 + r5			  ## syntax.c:1182:4
    fde8:    98 44             	b[r1+0x4] = r0			  ## syntax.c:1182:21
    fdea:    50 ee f1 00       	r0 = b[r15+0x1] (u)			  ## syntax.c:1182:21
    fdee:    c4 21             	r4 += 0x1			  ## syntax.c:1180:36
    fdf0:    00 17             	r0 = r0.b0 (u)			  ## syntax.c:1180:17
    fdf2:    45 17             	r5 = r4.b0 (u)			  ## syntax.c:1180:17
    fdf4:    80 e9 f2 51       	if (r5 < r0) goto -0x1c <.GJTIE291_0_0_+0x512 : fddc >			  ## syntax.c:1180:17
    fdf8:    b4 e0 80 04       	r0 = r8 + r4			  ## syntax.c:1155:13
    fdfc:    08 e1 01 00       	r8 = r0 + 0x1			  ## syntax.c:1155:13
    fe00:    e0 16             	r0 = r14			  ## syntax.c:1187:6
    fe02:    bf ea eb ee       	call -0x222a <faad_get1bit : dbdc >			  ## syntax.c:1187:6
    fe06:    50 e8 0b 00       	if ((r0 & 0x1) == 0) goto 0x16 <.GJTIE291_0_0_+0x556 : fe20 >			  ## syntax.c:1187:6
    fe0a:    41 27             	r1 = 0x7			  ## syntax.c:1189:34
    fe0c:    e0 16             	r0 = r14			  ## syntax.c:1189:34
    fe0e:    bf ea bb ee       	call -0x228a <faad_getbits : db88 >			  ## syntax.c:1189:34
    fe12:    52 ee f5 01       	b[r15+0x15] = r0			  ## syntax.c:1189:23
    fe16:    e0 16             	r0 = r14			  ## syntax.c:1190:45
    fe18:    bf ea e0 ee       	call -0x2240 <faad_get1bit : dbdc >			  ## syntax.c:1190:45
    fe1c:    08 e1 01 80       	r8 = r8 + 0x1			  ## syntax.c:1191:4
    fe20:    44 20             	r4 = 0x0
    fe22:    04 8e             	goto 0x1c <.GJTIE291_0_0_+0x576 : fe40 >
    fe24:    b4 e0 f0 50       	r5 = r15 + r0			  ## syntax.c:1196:3
    fe28:    e0 16             	r0 = r14			  ## syntax.c:1196:25
    fe2a:    bf ea d7 ee       	call -0x2252 <faad_get1bit : dbdc >			  ## syntax.c:1196:25
    fe2e:    52 ee 56 01       	b[r5+0x16] = r0			  ## syntax.c:1196:23
    fe32:    41 27             	r1 = 0x7			  ## syntax.c:1197:34
    fe34:    e0 16             	r0 = r14			  ## syntax.c:1197:34
    fe36:    bf ea a7 ee       	call -0x22b2 <faad_getbits : db88 >			  ## syntax.c:1197:34
    fe3a:    52 ee 57 02       	b[r5+0x27] = r0			  ## syntax.c:1197:23
    fe3e:    c4 21             	r4 += 0x1			  ## syntax.c:1194:35
    fe40:    50 ee f1 10       	r1 = b[r15+0x1] (u)			  ## syntax.c:1194:23
    fe44:    40 17             	r0 = r4.b0 (u)			  ## syntax.c:1194:14
    fe46:    81 e9 ed 01       	if (r0 < r1) goto -0x26 <.GJTIE291_0_0_+0x55A : fe24 >			  ## syntax.c:1194:14
    fe4a:    b4 e0 80 04       	r0 = r8 + r4			  ## syntax.c:1111:7
    fe4e:    00 17             	r0 = r0.b0 (u)			  ## syntax.c:1111:7
    fe50:    d4 e9 4c 80       	r8 = [sp+76]			  ## syntax.c:1111:7
    fe54:    14 8e             	goto 0x5c <.GJTIE291_0_0_+0x5E8 : feb2 >			  ## syntax.c:1111:7
    fe56:    41 24             	r1 = 0x4			  ## syntax.c:1114:23
    fe58:    e0 16             	r0 = r14			  ## syntax.c:1114:23
    fe5a:    bf ea 95 ee       	call -0x22d6 <faad_getbits : db88 >			  ## syntax.c:1114:23
    fe5e:    b0 e1 40 d0       	r0 = uextra(r13, p:0x0, l:0x10)			  ## syntax.c:1114:23
    fe62:    34 e1 ff 0f       	r4 = r0 + -0x1			  ## syntax.c:1114:23
    fe66:    45 20             	r5 = 0x0			  ## syntax.c:1114:23
    fe68:    04 85             	goto 0xa <.GJTIE291_0_0_+0x5AA : fe74 >			  ## syntax.c:1114:23
    fe6a:    41 28             	r1 = 0x8			  ## syntax.c:1117:25
    fe6c:    e0 16             	r0 = r14			  ## syntax.c:1117:25
    fe6e:    bf ea 8b ee       	call -0x22ea <faad_getbits : db88 >			  ## syntax.c:1117:25
    fe72:    c5 21             	r5 += 0x1			  ## syntax.c:1115:31
    fe74:    d0 17             	r0 = r5.l (u)			  ## syntax.c:1115:15
    fe76:    84 ed f8 01       	ifs (r0 < r4) goto -0x10 <.GJTIE291_0_0_+0x5A0 : fe6a >			  ## syntax.c:1115:15
    fe7a:    04 9a             	goto 0x34 <.GJTIE291_0_0_+0x5E6 : feb0 >			  ## syntax.c:1115:15
    fe7c:    41 24             	r1 = 0x4			  ## syntax.c:1121:35
    fe7e:    e0 16             	r0 = r14			  ## syntax.c:1121:35
    fe80:    bf ea 82 ee       	call -0x22fc <faad_getbits : db88 >			  ## syntax.c:1121:35
    fe84:    44 20             	r4 = 0x0			  ## syntax.c:1121:35
    fe86:    60 ff ff 00 1d ff 	if ((r0 & 0xFF) == 0) goto -0x1c6 <.GJTIE291_0_0_+0x3FC : fcc6 >			  ## syntax.c:1121:35
    fe8c:    e0 16             	r0 = r14			  ## syntax.c:1143:3
    fe8e:    41 16             	r1 = r4			  ## syntax.c:1143:3
    fe90:    bf ea 7a ee       	call -0x230c <faad_getbits : db88 >			  ## syntax.c:1143:3
    fe94:    b0 e1 40 d0       	r0 = uextra(r13, p:0x0, l:0x10)			  ## syntax.c:1143:3
    fe98:    34 e1 ff 0f       	r4 = r0 + -0x1			  ## syntax.c:1143:3
    fe9c:    45 20             	r5 = 0x0			  ## syntax.c:1143:3
    fe9e:    04 85             	goto 0xa <.GJTIE291_0_0_+0x5E0 : feaa >			  ## syntax.c:1143:3
    fea0:    41 28             	r1 = 0x8			  ## syntax.c:1146:26
    fea2:    e0 16             	r0 = r14			  ## syntax.c:1146:26
    fea4:    bf ea 70 ee       	call -0x2320 <faad_getbits : db88 >			  ## syntax.c:1146:26
    fea8:    c5 21             	r5 += 0x1			  ## syntax.c:1144:31
    feaa:    d0 17             	r0 = r5.l (u)			  ## syntax.c:1144:15
    feac:    84 ed f8 01       	ifs (r0 < r4) goto -0x10 <.GJTIE291_0_0_+0x5D6 : fea0 >			  ## syntax.c:1144:15
    feb0:    d0 16             	r0 = r13
    feb2:    80 17             	r0 = r0.l (u)			  ## syntax.c:647:13
    feb4:    b4 e0 d2 d0       	r13 = r13 - r0			  ## syntax.c:647:10
    feb8:    0d fe 1e 01       	ifs (r13 > 0x0) goto -0x1c4 <.GJTIE291_0_0_+0x42E : fcf8 >
    febc:    04 2d             	r4 = [sp+52]
    febe:    c4 21             	r4 += 0x1			  ## syntax.c:333:18
    fec0:    40 20             	r0 = 0x0			  ## syntax.c:337:22
    fec2:    f8 40             	b[r7+0x0] = r0			  ## syntax.c:337:22
    fec4:    d4 e9 38 d0       	r13 = [sp+56]			  ## syntax.c:337:22
    fec8:    a4 8b             	goto 0x296 <.GJTIE291_0_0_+0x896 : 10160 >			  ## syntax.c:337:22
    feca:    c1 d4             	r9 = 0  #
    fecc:    85 35             		 [sp+84] = r5
    fece:    07 3b             	r7 = [sp+108]
    fed0:    b4 e0 70 80       	r8 = r7 + r0
    fed4:    24 84             	goto 0x88 <.GJTIE291_0_0_+0x694 : ff5e >
    fed6:    b1 f1 20 a0       	r1 = uextra(r10, p:0x0, l:0x8)  #
    feda:    04 36             		 r4 = [sp+88]
    fedc:    f0 e1 10 b4       	r11 = r1 * r4
    fee0:    44 20             	r4 = 0x0
    fee2:    14 93             	goto 0x66 <.GJTIE291_0_0_+0x680 : ff4a >
    fee4:    e1 e1 0f 00       	r1 = r0 * 0xF			  ## ms.c:68:26
    fee8:    7e 1c             	r6 = r7 + r1			  ## ms.c:68:26
    feea:    56 18             	r6 += r5			  ## ms.c:68:26
    feec:    50 ee 67 21       	r2 = b[r6+0x17] (u)			  ## ms.c:68:26
    fef0:    82 44             	if (r2 != 0) goto 0x8 <.GJTIE291_0_0_+0x630 : fefa >			  ## ms.c:68:26
    fef2:    02 3e             	r2 = [sp+120]			  ## ms.c:68:55
    fef4:    2a 41             	r2 = b[r2+0x1] (u)			  ## ms.c:68:55
    fef6:    82 f8 26 04       	if (r2 != 0x2) goto 0x4c <.GJTIE291_0_0_+0x67C : ff46 >			  ## ms.c:68:55
    fefa:    22 20             	r2 = [sp+128]			  ## is.c:38:10
    fefc:    21 18             	r1 += r2			  ## is.c:38:10
    fefe:    51 18             	r1 += r5			  ## is.c:38:10
    ff00:    50 ee 1f 18       	r1 = b[r1+0x8f] (u)			  ## is.c:38:10
    ff04:    b9 20             	r1 &= 0xfffffffe			  ## ms.c:69:26
    ff06:    01 f8 1e 1c       	if (r1 == 0xe) goto 0x3c <.GJTIE291_0_0_+0x67C : ff46 >			  ## ms.c:69:26
    ff0a:    50 ee 6f 18       	r1 = b[r6+0x8f] (u)			  ## ms.c:38:6
    ff0e:    01 f8 1a 1a       	if (r1 == 0xd) goto 0x34 <.GJTIE291_0_0_+0x67C : ff46 >			  ## ms.c:38:6
    ff12:    51 a1             	r1 = r5 << 0x1			  ## ms.c:84:38
    ff14:    71 d8             	r1 += r7  #			  ## ms.c:84:19
    ff16:    05 3c             		 r5 = [sp+112]			  ## ms.c:85:21
    ff18:    51 ed 1c 2f       	r2 = h[r1+0x1fc] (u)			  ## ms.c:84:42
    ff1c:    51 ed 1e 1f       	r1 = h[r1+0x1fe] (u)			  ## ms.c:84:19
    ff20:    91 de             	r1 = r1 - r2  #			  ## ms.c:84:41
    ff22:    06 3d             		 r6 = [sp+116]			  ## ms.c:88:8
    ff24:    b2 18             	r2 += r11			  ## ms.c:85:40
    ff26:    22 a2             	r2 = r2 << 0x2			  ## ms.c:85:21
    ff28:    52 18             	r2 += r5			  ## ms.c:85:21
    ff2a:    15 e1 00 20       	r5 = r2 + 0x1000			  ## ms.c:86:24
    ff2e:    81 03             	rep 0x12 r1 {			  ## ms.c:88:8
    ff30:    d0 ec 20 d0       		r13 = [r2+0x0]			  ## ms.c:88:8
    ff34:    53 60             		r3 = [r5+0x0] 			  ## ms.c:88:8
    ff36:    b4 e0 d0 63       		r6 = r13 + r3			  ## ms.c:88:8
    ff3a:    b4 f0 d2 33       		r3 = r13 - r3  #			  ## ms.c:88:8
    ff3e:    a6 05             			 [r2++=0x4] = r6			  ## ms.c:88:8
    ff40:    d3 05             		[r5++=0x4] = r3
                               	}			  ## ms.c:88:8
    ff42:    f1 55             	if (r1 != 0) goto -0x16 <.GJTIE291_0_0_+0x664 : ff2e >			  ## ms.c:88:8
    ff44:    86 3d             	[sp+116] = r6
    ff46:    02 3f             	r2 = [sp+124]
    ff48:    c4 21             	r4 += 0x1			  ## ms.c:62:54
    ff4a:    45 d7             	r5 = r4.b0 (u)  #			  ## ms.c:62:31
    ff4c:    29 4c             		 r1 = b[r2+0xc] (u)			  ## ms.c:62:42
    ff4e:    81 e9 c9 51       	if (r5 < r1) goto -0x6e <.GJTIE291_0_0_+0x61A : fee4 >			  ## ms.c:62:42
    ff52:    09 e1 01 90       	r9 = r9 + 0x1			  ## ms.c:60:59
    ff56:    0a e1 01 a0       	r10 = r10 + 0x1			  ## ms.c:106:22
    ff5a:    d4 e9 64 b0       	r11 = [sp+100]			  ## ms.c:106:22
    ff5e:    50 ee 8f 10       	r1 = b[r8+0xf] (u)			  ## ms.c:60:29
    ff62:    b4 e1 20 90       	r4 = uextra(r9, p:0x0, l:0x8)			  ## ms.c:60:27
    ff66:    81 e9 b6 41       	if (r4 < r1) goto -0x94 <.GJTIE291_0_0_+0x60C : fed6 >			  ## ms.c:60:27
    ff6a:    49 f0 03 17       	r9 = 0x1703  # <WOLASynthesisFilter_Float_M128_m4_r1+0x6FE : 1702 >
    ff6e:    05 35             		 r5 = [sp+84]
    ff70:    c5 21             	r5 += 0x1			  ## ms.c:58:50
    ff72:    d4 e9 4c 80       	r8 = [sp+76]			  ## ms.c:58:50
    ff76:    00 3e             	r0 = [sp+120]			  ## ms.c:58:30
    ff78:    50 d7             	r0 = r5.b0 (u)  #			  ## ms.c:58:21
    ff7a:    09 40             		 r1 = b[r0+0x0] (u)			  ## ms.c:58:30
    ff7c:    81 e9 a5 01       	if (r0 < r1) goto -0xb6 <.GJTIE291_0_0_+0x600 : feca >			  ## ms.c:58:30
    ff80:    d4 e9 15 c0       	[sp+20] = r12
    ff84:    10 e1 6c 89       	r0 = r8 + 0x196c
    ff88:    80 3d             	[sp+116] = r0
    ff8a:    08 4d             	r0 = b[r0+0xd] (u)			  ## is.c:70:12
    ff8c:    02 3e             	r2 = [sp+120]			  ## is.c:70:12
    ff8e:    80 f8 88 02       	if (r0 != 0x1) goto 0x110 <.GJTIE291_0_0_+0x7D8 : 100a2 >			  ## is.c:70:12
    ff92:    00 2e             	r0 = [sp+56]			  ## specrec.c:425:58
    ff94:    08 67             	r0 = h[r0+0xe] (u)			  ## specrec.c:425:58
    ff96:    80 a3             	r0 = r0 >> 0x3			  ## is.c:66:31
    ff98:    80 31             	[sp+68] = r0			  ## is.c:66:31
    ff9a:    43 20             	r3 = 0x0			  ## is.c:66:31
    ff9c:    44 20             	r4 = 0x0			  ## is.c:66:31
    ff9e:    34 9c             	goto 0xf8 <.GJTIE291_0_0_+0x7CE : 10098 >			  ## is.c:66:31
    ffa0:    84 26             	[sp+24] = r4
    ffa2:    21 20             	r1 = [sp+128]
    ffa4:    01 18             	r1 += r0
    ffa6:    81 32             	[sp+72] = r1
    ffa8:    45 20             	r5 = 0x0
    ffaa:    34 8f             	goto 0xde <.GJTIE291_0_0_+0x7C0 : 1008a >
    ffac:    31 d7             	r1 = r3.b0 (u)  #
    ffae:    85 35             		 [sp+84] = r5
    ffb0:    c3 d4             	r11 = 0  #
    ffb2:    83 36             		 [sp+88] = r3
    ffb4:    03 31             	r3 = [sp+68]
    ffb6:    f0 e1 10 a3       	r10 = r1 * r3
    ffba:    24 99             	goto 0xb2 <.GJTIE291_0_0_+0x7A4 : 1006e >
    ffbc:    e8 d6             	r8 = r14  #
    ffbe:    21 20             		 r1 = [sp+128]			  ## is.c:38:10
    ffc0:    fe 16             	r14 = r15			  ## is.c:38:10
    ffc2:    e9 e1 0f 00       	r9 = r0 * 0xF			  ## is.c:38:10
    ffc6:    91 18             	r1 += r9			  ## is.c:38:10
    ffc8:    41 18             	r1 += r4			  ## is.c:38:10
    ffca:    50 ee 1f 18       	r1 = b[r1+0x8f] (u)			  ## is.c:38:10
    ffce:    15 3f             	r5 = -0x1			  ## is.c:38:2
    ffd0:    b1 e8 0e 00       	if (r1 != 0xe) {			  ## is.c:38:2
    ffd4:    45 20             		r5 = 0x0
                               	}			  ## is.c:38:2
    ffd6:    4f e0 01 00       	r15 = 0x1 <mem_code_size : 0 >			  ## is.c:38:2
    ffda:    b1 e8 0f 00       	if (r1 != 0xf) {			  ## is.c:38:2
    ffde:    5f 16             		r15 = r5
                               	}			  ## is.c:38:2
    ffe0:    0f f8 41 00       	if (r15 == 0x0) goto 0x82 <.GJTIE291_0_0_+0x79C : 10066 >			  ## is.c:38:2
    ffe4:    2e 41             	r6 = b[r2+0x1] (u)			  ## is.c:54:11
    ffe6:    41 21             	r1 = 0x1			  ## is.c:54:11
    ffe8:    45 21             	r5 = 0x1			  ## is.c:54:11
    ffea:    86 f8 09 02       	if (r6 != 0x1) goto 0x12 <.GJTIE291_0_0_+0x736 : 10000 >			  ## is.c:54:11
    ffee:    02 3b             	r2 = [sp+108]			  ## is.c:55:15
    fff0:    b4 e0 20 59       	r5 = r2 + r9			  ## is.c:55:15
    fff4:    45 18             	r5 += r4			  ## is.c:55:15
    fff6:    50 ee 57 51       	r5 = b[r5+0x17] (u)			  ## is.c:55:15
    fffa:    55 a1             	r5 = r5 << 0x1			  ## is.c:55:14
    fffc:    a5 e0 01 50       	r5 = 0x1 - r5			  ## is.c:55:12
   10000:    55 17             	r5 = r5.b0 (u)			  ## is.c:84:37
   10002:    b6 e1 20 f0       	r6 = uextra(r15, p:0x0, l:0x8)			  ## is.c:84:37
   10006:    96 e8 00 05       	if (r6 != r5) {
   1000a:    11 3f             		r1 = -0x1
                               	}			  ## is.c:84:10
   1000c:    e5 f1 1e 00       	r5 = r0 * 0x1E  #			  ## is.c:89:12
   10010:    22 20             		 r2 = [sp+128]			  ## is.c:89:12
   10012:    25 18             	r5 += r2			  ## is.c:89:12
   10014:    05 e1 08 51       	r5 = r5 + 0x108			  ## is.c:89:12
   10018:    d8 ed 5a 54       	r5 = h[r5+r4<<1] (s)			  ## is.c:89:12
   1001c:    66 e1 03 50       	r6 = r5 & 0x3			  ## is.c:90:41
   10020:    c3 ff 14 d1 01 00 	r3 = 0x1d114 <pow05_table+0xC : 1d114 >			  ## is.c:92:23
   10026:    d8 ec 3a 66       	r6 = [r3+r6<<2]			  ## is.c:92:23
   1002a:    44 a1             	r4 = r4 << 0x1			  ## is.c:89:12
   1002c:    24 18             	r4 += r2			  ## is.c:105:18
   1002e:    51 ed 4c 2f       	r2 = h[r4+0x1fc] (u)			  ## is.c:105:46
   10032:    51 ed 4e 3f       	r3 = h[r4+0x1fe] (u)			  ## is.c:105:18
   10036:    61 1b             	r1 *= r6			  ## is.c:92:21
   10038:    b3 1e             	r3 = r3 - r2			  ## is.c:105:44
   1003a:    dc a2             	r4 = r5 >>> 0x2			  ## is.c:89:40
   1003c:    c4 3c             	r4 += 0x1c			  ## is.c:91:10
   1003e:    a2 d8             	r2 += r10  #			  ## is.c:106:40
   10040:    05 3c             		 r5 = [sp+112]			  ## is.c:106:20
   10042:    22 a2             	r2 = r2 << 0x2			  ## is.c:106:20
   10044:    52 18             	r2 += r5			  ## is.c:106:20
   10046:    15 e1 00 20       	r5 = r2 + 0x1000			  ## is.c:107:24
   1004a:    a4 e0 00 40       	r4 = 0x0 - r4			  ## is.c:109:7
   1004e:    63 03             	rep 0xe r3 {			  ## is.c:109:7
   10050:    27 05             		r7 = [r2++=0x4] 			  ## is.c:109:7
   10052:    f8 e1 70 d1       		r13_r12 = r7 * r1 (s)			  ## is.c:109:7
   10056:    dc e1 03 c4       		r13_r12 ><= r4 (sat)			  ## is.c:109:7
   1005a:    d8 ec 55 c0       		[r5++=0x4] = r12
                               	}			  ## is.c:109:7
   1005e:    f3 57             	if (r3 != 0) goto -0x12 <.GJTIE291_0_0_+0x784 : 1004e >			  ## is.c:109:7
   10060:    ef d6             	r15 = r14  #
   10062:    02 3e             		 r2 = [sp+120]
   10064:    04 81             	goto 0x2 <.GJTIE291_0_0_+0x79E : 10068 >
   10066:    ef 16             	r15 = r14
   10068:    0b e1 01 b0       	r11 = r11 + 0x1			  ## is.c:78:42
   1006c:    8e 16             	r14 = r8			  ## is.c:78:42
   1006e:    b4 f1 20 b0       	r4 = uextra(r11, p:0x0, l:0x8)  #			  ## is.c:78:18
   10072:    01 3d             		 r1 = [sp+116]			  ## is.c:78:30
   10074:    19 44             	r1 = b[r1+0x4] (u)			  ## is.c:78:30
   10076:    81 e9 a1 41       	if (r4 < r1) goto -0xbe <.GJTIE291_0_0_+0x6F2 : ffbc >			  ## is.c:78:30
   1007a:    49 f0 03 17       	r9 = 0x1703  # <WOLASynthesisFilter_Float_M128_m4_r1+0x6FE : 1702 >
   1007e:    05 35             		 r5 = [sp+84]
   10080:    c5 21             	r5 += 0x1			  ## is.c:76:50
   10082:    03 36             	r3 = [sp+88]			  ## is.c:76:50
   10084:    c3 21             	r3 += 0x1			  ## is.c:126:9
   10086:    d4 e9 64 b0       	r11 = [sp+100]			  ## is.c:126:9
   1008a:    54 d7             	r4 = r5.b0 (u)  #			  ## is.c:76:17
   1008c:    01 32             		 r1 = [sp+72]			  ## is.c:76:19
   1008e:    19 4f             	r1 = b[r1+0xf] (u)			  ## is.c:76:19
   10090:    81 e9 8c 41       	if (r4 < r1) goto -0xe8 <.GJTIE291_0_0_+0x6E2 : ffac >			  ## is.c:76:19
   10094:    04 26             	r4 = [sp+24]
   10096:    c4 21             	r4 += 0x1			  ## is.c:73:44
   10098:    00 3d             	r0 = [sp+116]			  ## is.c:73:24
   1009a:    40 d7             	r0 = r4.b0 (u)  #			  ## is.c:73:14
   1009c:    09 48             		 r1 = b[r0+0x8] (u)			  ## is.c:73:24
   1009e:    81 e9 7f 01       	if (r0 < r1) goto -0x102 <.GJTIE291_0_0_+0x6D6 : ffa0 >			  ## is.c:73:24
   100a2:    d4 e9 38 d0       	r13 = [sp+56]
   100a6:    50 ee d2 30       	r3 = b[r13+0x2] (u)			  ## specrec.c:433:2
   100aa:    04 27             	r4 = [sp+28]			  ## specrec.c:433:2
   100ac:    4a 40             	r2 = b[r4+0x0] (u)			  ## specrec.c:433:2
   100ae:    00 28             	r0 = [sp+32]			  ## specrec.c:433:32
   100b0:    01 60             	r1 = [r0+0x0] 			  ## specrec.c:433:32
   100b2:    00 3c             	r0 = [sp+112]			  ## specrec.c:433:2
   100b4:    80 20             	[sp] = r0			  ## specrec.c:433:2
   100b6:    00 3b             	r0 = [sp+108]			  ## specrec.c:433:2
   100b8:    bf ea 50 f4       	call -0x1760 <tns_decode_frame : e95c >			  ## specrec.c:433:2
   100bc:    50 ee d2 30       	r3 = b[r13+0x2] (u)			  ## specrec.c:434:2
   100c0:    4a 40             	r2 = b[r4+0x0] (u)			  ## specrec.c:434:2
   100c2:    d4 e9 14 c0       	r12 = [sp+20]			  ## specrec.c:434:2
   100c6:    d0 ec c0 10       	r1 = [r12+0x0]			  ## specrec.c:434:32
   100ca:    00 29             	r0 = [sp+36]			  ## specrec.c:434:2
   100cc:    80 20             	[sp] = r0			  ## specrec.c:434:2
   100ce:    20 20             	r0 = [sp+128]			  ## specrec.c:434:2
   100d0:    bf ea 44 f4       	call -0x1778 <tns_decode_frame : e95c >			  ## specrec.c:434:2
   100d4:    00 3d             	r0 = [sp+116]			  ## specrec.c:434:2
   100d6:    50 ee 02 80       	r8 = b[r0+0x2] (u)			  ## specrec.c:439:28
   100da:    0d 40             	r5 = b[r0+0x0] (u)			  ## specrec.c:438:31
   100dc:    00 3f             	r0 = [sp+124]			  ## specrec.c:438:31
   100de:    0e 4a             	r6 = b[r0+0xa] (u)			  ## specrec.c:437:28
   100e0:    07 2f             	r7 = [sp+60]			  ## specrec.c:437:28
   100e2:    02 23             	r2 = [sp+12]			  ## specrec.c:437:28
   100e4:    02 f8 85 04       	if (r2 == 0x2) goto 0x10a <.GJTIE291_0_0_+0x928 : 101f2 >			  ## specrec.c:454:6
   100e8:    09 48             	r1 = b[r0+0x8] (u)			  ## specrec.c:436:31
   100ea:    d4 e9 10 a0       	r10 = [sp+16]			  ## specrec.c:436:31
   100ee:    04 2d             	r4 = [sp+52]			  ## specrec.c:436:31
   100f0:    02 f8 91 02       	if (r2 == 0x1) goto 0x122 <.GJTIE291_0_0_+0x94C : 10216 >			  ## specrec.c:436:31
   100f4:    86 3e             	[sp+120] = r6
   100f6:    82 f8 9c 00       	if (r2 != 0x0) goto 0x138 <.GJTIE291_0_0_+0x968 : 10232 >
   100fa:    50 ee d6 30       	r3 = b[r13+0x6] (u)			  ## specrec.c:456:3
   100fe:    04 30             	r4 = [sp+64]			  ## specrec.c:456:3
   10100:    40 61             	r0 = [r4+0x4] 			  ## specrec.c:458:4
   10102:    42 63             	r2 = [r4+0xc] 			  ## specrec.c:458:27
   10104:    82 22             	[sp+8] = r2			  ## specrec.c:456:3
   10106:    80 21             	[sp+4] = r0			  ## specrec.c:456:3
   10108:    00 3c             	r0 = [sp+112]			  ## specrec.c:456:3
   1010a:    80 20             	[sp] = r0			  ## specrec.c:456:3
   1010c:    85 36             	[sp+88] = r5			  ## specrec.c:456:3
   1010e:    05 33             	r5 = [sp+76]			  ## specrec.c:456:3
   10110:    50 d6             	r0 = r5  #			  ## specrec.c:456:3
   10112:    06 3e             		 r6 = [sp+120]			  ## specrec.c:456:3
   10114:    62 16             	r2 = r6			  ## specrec.c:456:3
   10116:    bf ea c4 f5       	call -0x1478 <ifilter_bank : eca2 >			  ## specrec.c:456:3
   1011a:    50 ee d7 30       	r3 = b[r13+0x7] (u)			  ## specrec.c:460:3
   1011e:    82 d6             	r2 = r8  #			  ## specrec.c:460:3
   10120:    40 62             		 r0 = [r4+0x8] 			  ## specrec.c:462:4
   10122:    41 64             	r1 = [r4+0x10] 			  ## specrec.c:462:27
   10124:    04 2d             	r4 = [sp+52]			  ## specrec.c:462:27
   10126:    d0 e9 05 00       	d[sp+4] = r1_r0			  ## specrec.c:460:3
   1012a:    00 29             	r0 = [sp+36]			  ## specrec.c:460:3
   1012c:    50 d6             	r0 = r5  #			  ## specrec.c:460:3
   1012e:    80 20             		 [sp] = r0			  ## specrec.c:460:3
   10130:    01 36             	r1 = [sp+88]			  ## specrec.c:460:3
   10132:    bf ea b6 f5       	call -0x1494 <ifilter_bank : eca2 >			  ## specrec.c:460:3
   10136:    54 94             	goto 0x168 <.GJTIE291_0_0_+0x9D6 : 102a0 >			  ## specrec.c:460:3
   10138:    d0 d6             	r0 = r13  #			  ## syntax.c:452:17
   1013a:    01 3b             		 r1 = [sp+108]			  ## syntax.c:452:17
   1013c:    e2 16             	r2 = r14			  ## syntax.c:452:17
   1013e:    bf ea 9d ed       	call -0x24c6 <ics_info : dc7c >			  ## syntax.c:452:17
   10142:    00 58             	if (r0 == 0) goto 0x30 <.GJTIE291_0_0_+0x8AA : 10174 >			  ## syntax.c:452:17
   10144:    f8 40             	b[r7+0x0] = r0			  ## syntax.c:253:15
   10146:    50 ee d4 10       	r1 = b[r13+0x4] (u)			  ## syntax.c:257:24
   1014a:    c1 22             	r1 += 0x2			  ## syntax.c:257:24
   1014c:    52 ee d4 10       	b[r13+0x4] = r1			  ## syntax.c:257:24
   10150:    50 ee d5 10       	r1 = b[r13+0x5] (u)			  ## syntax.c:258:21
   10154:    c1 21             	r1 += 0x1			  ## syntax.c:258:21
   10156:    52 ee d5 10       	b[r13+0x5] = r1			  ## syntax.c:258:21
   1015a:    80 f8 bc 00       	if (r0 != 0x0) goto 0x178 <.GJTIE291_0_0_+0xA0C : 102d6 >			  ## syntax.c:258:21
   1015e:    c4 21             	r4 += 0x1
   10160:    e0 16             	r0 = r14			  ## syntax.c:341:18
   10162:    bf ea c0 f9       	call -0xc80 <faad_get_processed_bits : f4e6 >			  ## syntax.c:341:18
   10166:    01 34             	r1 = [sp+80]			  ## syntax.c:343:20
   10168:    11 6b             	r1 = [r1+0x2c] 			  ## syntax.c:343:20
   1016a:    11 a3             	r1 = r1 << 0x3			  ## syntax.c:343:32
   1016c:    10 1e             	r0 = r1 - r0			  ## syntax.c:343:36
   1016e:    00 fd a7 06       	ifs (r0 >= 0x3) goto 0x14e <.GJTIE291_0_0_+0x9F6 : 102c0 >
   10172:    54 91             	goto 0x162 <.GJTIE291_0_0_+0xA0C : 102d6 >
   10174:    41 22             	r1 = 0x2			  ## syntax.c:455:36
   10176:    e0 16             	r0 = r14			  ## syntax.c:455:36
   10178:    bf ea 06 ed       	call -0x25f4 <faad_getbits : db88 >			  ## syntax.c:455:36
   1017c:    01 d7             	r1 = r0.b0 (u)  #			  ## syntax.c:455:27
   1017e:    02 3e             		 r2 = [sp+120]			  ## syntax.c:455:25
   10180:    a8 41             	b[r2+0x1] = r0			  ## syntax.c:455:25
   10182:    01 f8 34 06       	if (r1 == 0x3) goto 0x68 <.GJTIE291_0_0_+0x924 : 101ee >			  ## syntax.c:455:25
   10186:    84 2d             	[sp+52] = r4
   10188:    02 3f             	r2 = [sp+124]
   1018a:    81 f8 19 02       	if (r1 != 0x1) goto 0x32 <.GJTIE291_0_0_+0x8F6 : 101c0 >
   1018e:    44 20             	r4 = 0x0
   10190:    04 92             	goto 0x24 <.GJTIE291_0_0_+0x8EC : 101b6 >
   10192:    45 20             	r5 = 0x0
   10194:    04 8b             	goto 0x16 <.GJTIE291_0_0_+0x8E2 : 101ac >
   10196:    e1 e1 0f 70       	r1 = r7 * 0xF			  ## syntax.c:468:6
   1019a:    81 18             	r1 += r8			  ## syntax.c:468:6
   1019c:    16 1c             	r6 = r1 + r0			  ## syntax.c:468:6
   1019e:    e0 16             	r0 = r14			  ## syntax.c:468:30
   101a0:    bf ea 1c ed       	call -0x25c8 <faad_get1bit : dbdc >			  ## syntax.c:468:30
   101a4:    02 3f             	r2 = [sp+124]			  ## syntax.c:468:30
   101a6:    d8 ee 61 09       	b[r6+r9] = r0			  ## syntax.c:468:28
   101aa:    c5 21             	r5 += 0x1			  ## syntax.c:466:43
   101ac:    50 d7             	r0 = r5.b0 (u)  #			  ## syntax.c:466:23
   101ae:    29 4c             		 r1 = b[r2+0xc] (u)			  ## syntax.c:466:31
   101b0:    81 e9 f1 01       	if (r0 < r1) goto -0x1e <.GJTIE291_0_0_+0x8CC : 10196 >			  ## syntax.c:466:31
   101b4:    c4 21             	r4 += 0x1			  ## syntax.c:464:46
   101b6:    47 d7             	r7 = r4.b0 (u)  #			  ## syntax.c:464:16
   101b8:    00 3e             		 r0 = [sp+120]			  ## syntax.c:464:26
   101ba:    08 40             	r0 = b[r0+0x0] (u)			  ## syntax.c:464:26
   101bc:    80 e9 e9 71       	if (r7 < r0) goto -0x2e <.GJTIE291_0_0_+0x8C8 : 10192 >			  ## syntax.c:464:26
   101c0:    d0 ec c0 40       	r4 = [r12+0x0]			  ## syntax.c:472:16
   101c4:    42 f0 80 02       	r2 = 0x280  # <ROM_RAM_SIZE+0x80 : 280 >			  ## syntax.c:473:3
   101c8:    20 20             		 r0 = [sp+128]			  ## syntax.c:473:3
   101ca:    01 3b             	r1 = [sp+108]			  ## syntax.c:473:3
   101cc:    80 ff 6a 3f ff ff 	call -0xc096 <memmove : 413c >			  ## syntax.c:473:3
   101d2:    d0 ec c1 40       	[r12+0x0] = r4			  ## syntax.c:474:13
   101d6:    42 f0 10 02       	r2 = 0x210  # <ROM_RAM_SIZE+0x10 : 210 >			  ## syntax.c:475:3
   101da:    00 28             		 r0 = [sp+32]			  ## syntax.c:475:30
   101dc:    40 d6             	r0 = r4  #			  ## syntax.c:475:3
   101de:    01 60             		 r1 = [r0+0x0] 			  ## syntax.c:475:30
   101e0:    80 ff 56 3f ff ff 	call -0xc0aa <memmove : 413c >			  ## syntax.c:475:3
   101e6:    07 2f             	r7 = [sp+60]			  ## syntax.c:475:3
   101e8:    04 2d             	r4 = [sp+52]			  ## syntax.c:475:3
   101ea:    ff ea 98 fb       	goto -0x8d0 <.GJTIE291_0_0_+0x54 : f91e >
   101ee:    48 20             	r0 = 0x20
   101f0:    d7 89             	goto -0xae <.GJTIE291_0_0_+0x87A : 10144 >
   101f2:    50 ee d7 30       	r3 = b[r13+0x7] (u)			  ## specrec.c:472:3
   101f6:    82 d6             	r2 = r8  #			  ## specrec.c:472:3
   101f8:    01 30             		 r1 = [sp+64]			  ## specrec.c:472:3
   101fa:    10 62             	r0 = [r1+0x8] 			  ## specrec.c:474:4
   101fc:    11 64             	r1 = [r1+0x10] 			  ## specrec.c:474:27
   101fe:    d0 e9 05 00       	d[sp+4] = r1_r0			  ## specrec.c:472:3
   10202:    51 d6             	r1 = r5  #			  ## specrec.c:472:3
   10204:    00 29             		 r0 = [sp+36]			  ## specrec.c:472:3
   10206:    80 20             	[sp] = r0			  ## specrec.c:472:3
   10208:    00 33             	r0 = [sp+76]			  ## specrec.c:472:3
   1020a:    bf ea 4a f5       	call -0x156c <ifilter_bank : eca2 >			  ## specrec.c:472:3
   1020e:    d4 e9 10 a0       	r10 = [sp+16]			  ## specrec.c:472:3
   10212:    04 2d             	r4 = [sp+52]			  ## specrec.c:472:3
   10214:    24 85             	goto 0x8a <.GJTIE291_0_0_+0x9D6 : 102a0 >			  ## specrec.c:472:3
   10216:    50 ee d6 30       	r3 = b[r13+0x6] (u)			  ## specrec.c:466:3
   1021a:    02 30             	r2 = [sp+64]			  ## specrec.c:466:3
   1021c:    20 61             	r0 = [r2+0x4] 			  ## specrec.c:468:4
   1021e:    22 63             	r2 = [r2+0xc] 			  ## specrec.c:468:27
   10220:    62 d6             	r2 = r6  #			  ## specrec.c:466:3
   10222:    82 22             		 [sp+8] = r2			  ## specrec.c:466:3
   10224:    80 21             	[sp+4] = r0			  ## specrec.c:466:3
   10226:    00 3c             	r0 = [sp+112]			  ## specrec.c:466:3
   10228:    80 20             	[sp] = r0			  ## specrec.c:466:3
   1022a:    00 33             	r0 = [sp+76]			  ## specrec.c:466:3
   1022c:    bf ea 39 f5       	call -0x158e <ifilter_bank : eca2 >			  ## specrec.c:466:3
   10230:    14 97             	goto 0x6e <.GJTIE291_0_0_+0x9D6 : 102a0 >			  ## specrec.c:466:3
   10232:    d0 ec c0 23       	r2 = [r12+0x30]
   10236:    d0 ec cc a2       	r10 = [r12+0x2c]
   1023a:    ab bf             	r3 = r2 >>> 0x1f
   1023c:    c0 e1 af bd       	r11 = r10 >>> 0x1f
   10240:    40 20             	r0 = 0x0
   10242:    04 99             	goto 0x32 <.GJTIE291_0_0_+0x9AC : 10276 >
   10244:    04 a2             	r4 = r0 << 0x2			  ## specrec.c:482:17
   10246:    46 f0 00 04       	r6 = 0x400  # <ROM_RAM_SIZE+0x200 : 400 >			  ## specrec.c:489:5
   1024a:    05 3c             		 r5 = [sp+112]			  ## specrec.c:487:5
   1024c:    dc ec 52 44       	r4 = [++r5=r4]			  ## specrec.c:487:5
   10250:    d8 ec 5a 66       	r6 = [r5+r6<<2]			  ## specrec.c:489:5
   10254:    0c e1 fd 98       	r12 = r9 + 0x8fd			  ## specrec.c:488:5
   10258:    c5 14             	r13 = 0			  ## specrec.c:488:5
   1025a:    fc f1 40 da       	r13_r12 += r4 * r10 (s)  #			  ## specrec.c:488:5
   1025e:    04 2d             		 r4 = [sp+52]			  ## specrec.c:488:5
   10260:    fc e1 60 d2       	r13_r12 += r6 * r2 (s)			  ## specrec.c:488:5
   10264:    d0 e1 0e c8       	r13_r12 >>= 0xe			  ## specrec.c:490:5
   10268:    d0 ec 51 c0       	[r5+0x0] = r12			  ## specrec.c:492:13
   1026c:    d4 e9 38 d0       	r13 = [sp+56]			  ## specrec.c:492:13
   10270:    d4 e9 14 c0       	r12 = [sp+20]			  ## specrec.c:492:13
   10274:    c0 21             	r0 += 0x1			  ## specrec.c:482:26
   10276:    01 ff 00 04 e4 ff 	if (r0 != 0x400) goto -0x38 <.GJTIE291_0_0_+0x97A : 10244 >
   1027c:    50 ee d6 30       	r3 = b[r13+0x6] (u)			  ## specrec.c:495:3
   10280:    02 30             	r2 = [sp+64]			  ## specrec.c:495:3
   10282:    20 61             	r0 = [r2+0x4] 			  ## specrec.c:497:4
   10284:    22 63             	r2 = [r2+0xc] 			  ## specrec.c:497:27
   10286:    82 22             	[sp+8] = r2			  ## specrec.c:495:3
   10288:    80 21             	[sp+4] = r0			  ## specrec.c:495:3
   1028a:    00 3c             	r0 = [sp+112]			  ## specrec.c:495:3
   1028c:    80 20             	[sp] = r0			  ## specrec.c:495:3
   1028e:    06 3e             	r6 = [sp+120]			  ## specrec.c:495:3
   10290:    62 d6             	r2 = r6  #			  ## specrec.c:495:3
   10292:    00 33             		 r0 = [sp+76]			  ## specrec.c:495:3
   10294:    bf ea 05 f5       	call -0x15f6 <ifilter_bank : eca2 >			  ## specrec.c:495:3
   10298:    d4 e9 10 a0       	r10 = [sp+16]			  ## specrec.c:495:3
   1029c:    d4 e9 64 b0       	r11 = [sp+100]			  ## specrec.c:495:3
   102a0:    52 ee d6 60       	b[r13+0x6] = r6			  ## specrec.c:502:33
   102a4:    52 ee d7 80       	b[r13+0x7] = r8			  ## specrec.c:503:33
   102a8:    00 3f             	r0 = [sp+124]			  ## specrec.c:505:44
   102aa:    08 48             	r0 = b[r0+0x8] (u)			  ## specrec.c:505:44
   102ac:    52 ee d8 00       	b[r13+0x8] = r0			  ## specrec.c:505:36
   102b0:    00 3d             	r0 = [sp+116]			  ## specrec.c:506:44
   102b2:    08 40             	r0 = b[r0+0x0] (u)			  ## specrec.c:506:44
   102b4:    52 ee d9 00       	b[r13+0x9] = r0			  ## specrec.c:506:36
   102b8:    d4 e9 4c 80       	r8 = [sp+76]
   102bc:    40 20             	r0 = 0x0
   102be:    a7 82             	goto -0x17c <.GJTIE291_0_0_+0x87A : 10144 >
   102c0:    41 23             	r1 = 0x3			  ## syntax.c:283:32
   102c2:    e0 16             	r0 = r14			  ## syntax.c:283:32
   102c4:    bf ea 60 ec       	call -0x2740 <faad_getbits : db88 >			  ## syntax.c:283:32
   102c8:    00 17             	r0 = r0.b0 (u)			  ## syntax.c:283:9
   102ca:    01 ff 07 00 f1 fa 	if (r0 != 0x7) goto -0xa1e <aac_decoder_run+0x302 : f8b2 >			  ## syntax.c:283:9
   102d0:    e0 16             	r0 = r14			  ## syntax.c:350:3
   102d2:    bf ea eb f8       	call -0xe2a <faad_byte_align : f4ac >			  ## syntax.c:350:3
   102d6:    78 40             	r0 = b[r7+0x0] (u)			  ## decoder.c:80:13
   102d8:    80 4b             	if (r0 != 0) goto 0x16 <.GJTIE291_0_0_+0xA26 : 102f0 >			  ## decoder.c:80:13
   102da:    50 ee d4 40       	r4 = b[r13+0x4] (u)			  ## decoder.c:79:30
   102de:    30 e1 ff 4f       	r0 = r4 + -0x1			  ## decoder.c:84:27
   102e2:    00 17             	r0 = r0.b0 (u)			  ## decoder.c:84:27
   102e4:    80 f9 24 04       	if (r0 < 0x2) goto 0x48 <.GJTIE291_0_0_+0xA66 : 10330 >			  ## decoder.c:84:27
   102e8:    40 2c             	r0 = 0xc
   102ea:    04 81             	goto 0x2 <.GJTIE291_0_0_+0xA24 : 102ee >
   102ec:    40 26             	r0 = 0x6			  ## syntax.c:309:17
   102ee:    f8 40             	b[r7+0x0] = r0
   102f0:    05 2c             	r5 = [sp+48]
   102f2:    50 60             	r0 = [r5+0x0] 			  ## decoder.c:134:14
   102f4:    00 43             	if (r0 == 0) goto 0x6 <.GJTIE291_0_0_+0xA32 : 102fc >			  ## decoder.c:134:14
   102f6:    d4 e9 40 b0       	r11 = [sp+64]
   102fa:    04 8b             	goto 0x16 <.GJTIE291_0_0_+0xA48 : 10312 >
   102fc:    50 ed de 10       	r1 = h[r13+0xe] (u)			  ## decoder.c:136:39
   10300:    d4 e9 40 b0       	r11 = [sp+64]			  ## decoder.c:136:39
   10304:    d0 ec bc 00       	r0 = [r11+0xc]			  ## decoder.c:136:10
   10308:    12 a3             	r2 = r1 << 0x3			  ## decoder.c:136:64
   1030a:    41 20             	r1 = 0x0			  ## decoder.c:136:3
   1030c:    80 ff 14 3f ff ff 	call -0xc0ec <memset : 4226 >			  ## decoder.c:136:3
   10312:    00 34             	r0 = [sp+80]			  ## aac_main.c:437:12
   10314:    0e 41             	r6 = b[r0+0x1] (u)			  ## aac_main.c:437:12
   10316:    01 ff 00 60 0a fa 	if (r6 != 0x0) goto -0xbec <aac_decoder_run+0x180 : f730 >
   1031c:    50 60             	r0 = [r5+0x0] 			  ## aac_main.c:440:14
   1031e:    01 ff 00 00 06 fa 	if (r0 != 0x0) goto -0xbf4 <aac_decoder_run+0x180 : f730 >			  ## aac_main.c:440:14
   10324:    d0 ec c8 22       	r2 = [r12+0x28]			  ## aac_main.c:449:36
   10328:    d0 ec c5 23       	[r12+0x34] = r2			  ## aac_main.c:449:26
   1032c:    ff ea 5e f9       	goto -0xd44 <aac_decoder_run+0x3C : f5ec >			  ## aac_main.c:449:26
   10330:    e0 16             	r0 = r14			  ## decoder.c:92:17
   10332:    bf ea d8 f8       	call -0xe50 <faad_get_processed_bits : f4e6 >			  ## decoder.c:92:17
   10336:    c0 27             	r0 += 0x7			  ## decoder.c:93:25
   10338:    80 a3             	r0 = r0 >> 0x3			  ## decoder.c:93:25
   1033a:    d4 e9 40 b0       	r11 = [sp+64]			  ## decoder.c:93:25
   1033e:    d0 ec bd 01       	[r11+0x1c] = r0			  ## decoder.c:93:23
   10342:    00 34             	r0 = [sp+80]			  ## decoder.c:98:18
   10344:    8c 40             	b[r0+0x0] = r4			  ## decoder.c:98:18
   10346:    00 27             	r0 = [sp+28]			  ## decoder.c:100:48
   10348:    09 40             	r1 = b[r0+0x0] (u)			  ## decoder.c:100:48
   1034a:    40 20             	r0 = 0x0			  ## decoder.c:100:48
   1034c:    b1 ec 0b 40       	if (r1 <= 0xb) {			  ## decoder.c:100:48
   10350:    c0 ff 24 d1 01 00 		r0 = 0x1d124 <sample_rates : 1d124 >			  ## decoder.c:37:10
   10356:    d8 ec 0a 01       		r0 = [r0+r1<<2]
                               	}			  ## decoder.c:37:10
   1035a:    d0 ec b1 02       	[r11+0x20] = r0			  ## decoder.c:100:20
   1035e:    50 ee d2 00       	r0 = b[r13+0x2] (u)			  ## decoder.c:102:33
   10362:    01 34             	r1 = [sp+80]			  ## decoder.c:102:21
   10364:    98 43             	b[r1+0x3] = r0			  ## decoder.c:102:21
   10366:    d0 ec a0 00       	r0 = [r10+0x0]			  ## decoder.c:115:14
   1036a:    05 2c             	r5 = [sp+48]			  ## decoder.c:115:14
   1036c:    e0 52             	if (r0 != 0) goto -0x5c <.GJTIE291_0_0_+0xA48 : 10312 >			  ## decoder.c:115:14
   1036e:    80 16             	r0 = r8			  ## decoder.c:125:2
   10370:    41 16             	r1 = r4			  ## decoder.c:125:2
   10372:    bf ea c1 f8       	call -0xe7e <output_to_PCM : f4f8 >			  ## decoder.c:125:2
   10376:    c4 eb 01 d0       	[r13+0x10] += 0x1			  ## decoder.c:127:17
   1037a:    e7 8b             	goto -0x6a <.GJTIE291_0_0_+0xA48 : 10312 >			  ## decoder.c:127:17
   1037c:    40 3f             	r0 = 0x1f			  ## syntax.c:321:18
   1037e:    d7 97             	goto -0x92 <.GJTIE291_0_0_+0xA24 : 102ee >			  ## syntax.c:321:18
   10380:    40 2d             	r0 = 0xd			  ## syntax.c:244:16
   10382:    d7 95             	goto -0x96 <.GJTIE291_0_0_+0xA24 : 102ee >			  ## syntax.c:244:16


get_dec_inf.212:
   10384:    10 e1 a4 06       	r0 = r0 + 0x16a4			  ## aac_main.c:517:0
   10388:    01 60             	r1 = [r0+0x0] 			  ## aac_main.c:519:41
   1038a:    89 6c             	h[r0+0x18] = r1			  ## aac_main.c:519:21
   1038c:    09 44             	r1 = b[r0+0x4] (u)			  ## aac_main.c:521:24
   1038e:    81 67             	[r0+0x1c] = r1			  ## aac_main.c:521:22
   10390:    48 ea 00 00       	[r0+0x20] = 0x0			  ## aac_main.c:522:29
   10394:    c0 38             	r0 += 0x18			  ## aac_main.c:519:10
   10396:    80 00             	rts			  ## aac_main.c:523:2


get_playtime:
   10398:    41 e0 a9 05       	r1 = 0x5a9 <alg_code_size+0xD8 : 5a8 >			  ## aac_main.c:244:0
   1039c:    d8 ec 0a 11       	r1 = [r0+r1<<2]			  ## aac_main.c:250:13
   103a0:    31 e8 00 40       	if (r1 == 0x0) {			  ## aac_main.c:250:13
   103a4:    40 20             		r0 = 0x0			  ## aac_main.c:250:13
   103a6:    80 00             		rts
                               	}			  ## aac_main.c:252:2
   103a8:    42 e0 84 05       	r2 = 0x584 <alg_code_size+0xB4 : 584 >			  ## aac_main.c:251:23
   103ac:    d8 ec 0a 22       	r2 = [r0+r2<<2]			  ## aac_main.c:251:23
   103b0:    43 e0 07 0b       	r3 = 0xb07 <usb_code_size+0x42 : b06 >			  ## aac_main.c:251:39
   103b4:    d8 ed 08 03       	r0 = h[r0+r3<<1] (u)			  ## aac_main.c:251:29
   103b8:    20 1b             	r0 *= r2			  ## aac_main.c:251:28
   103ba:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## aac_main.c:251:52
   103be:    80 00             	rts			  ## aac_main.c:252:2


need_dcbuf_size:
   103c0:    40 e0 24 5c       	r0 = 0x5c24 <wtgv2_silk_decode_core+0x5EE : 5c24 >			  ## aac_main.c:261:0
   103c4:    80 00             	rts			  ## aac_main.c:262:2


dec_config:
   103c6:    75 04             	[--sp] = {rets, r5, r4}			  ## aac_main.c:289:0
   103c8:    35 e1 80 1f       	r5 = r1 + -0x80			  ## aac_main.c:298:2
   103cc:    23 16             	r3 = r2			  ## aac_main.c:298:2
   103ce:    04 16             	r4 = r0
   103d0:    05 fc 0a 06       	if (r5 > 0x3) goto 0x14 <.GJTIE295_0_0_+0x6 : 103e8 >
   103d4:    40 e0 24 3c       	r0 = 0x3c24 <STFT_Win_FixHalf_M256_D160+0x20 : 3c24 >
   103d8:    11 e1 f0 4b       	r1 = r4 + 0x1bf0
   103dc:    05 01             	tbb [r5]


.GJTIS295_0_0_:
   103de:    02     < 2 : 0x2 >
   103df:    1a     < 26 : 0x1A >
   103e0:    2f     < 47 : 0x2F >
   103e1:    32     < 50 : 0x32 >
   103e2:    30 60             	r0 = [r3+0x0] 			  ## aac_main.c:309:36
   103e4:    90 60             	[r1+0x0] = r0			  ## aac_main.c:309:24
   103e6:    14 8c             	goto 0x58 <.GJTIE295_0_0_+0x5E : 10440 >			  ## aac_main.c:309:24
   103e8:    81 f8 2a 02       	if (r1 != 0x1) goto 0x54 <.GJTIE295_0_0_+0x5E : 10440 >
   103ec:    41 f0 85 05       	r1 = 0x585  # <alg_code_size+0xB4 : 584 >			  ## aac_main.c:301:13
   103f0:    30 60             		 r0 = [r3+0x0] 			  ## aac_main.c:301:46
   103f2:    d8 ec 4b 01       	[r4+r1<<2] = r0			  ## aac_main.c:301:34
   103f6:    15 e1 a4 46       	r5 = r4 + 0x16a4			  ## aac_main.c:301:34
   103fa:    d0 60             	[r5+0x0] = r0			  ## aac_main.c:302:21
   103fc:    31 61             	r1 = [r3+0x4] 			  ## aac_main.c:303:31
   103fe:    d9 44             	b[r5+0x4] = r1			  ## aac_main.c:303:19
   10400:    bf ea f0 ea       	call -0x2a20 <get_sr_index : d9e4 >			  ## aac_main.c:304:24
   10404:    41 e0 01 16       	r1 = 0x1601 <WOLASynthesisFilter_Float_M128_m4_r1+0x5FC : 1600 >			  ## aac_main.c:304:13
   10408:    d8 ee 41 01       	b[r4+r1] = r0			  ## aac_main.c:304:22
   1040c:    30 62             	r0 = [r3+0x8] 			  ## aac_main.c:305:34
   1040e:    d8 6d             	h[r5+0x1a] = r0			  ## aac_main.c:305:22
   10410:    04 97             	goto 0x2e <.GJTIE295_0_0_+0x5E : 10440 >			  ## aac_main.c:305:22
   10412:    30 60             	r0 = [r3+0x0] 			  ## aac_main.c:313:39
   10414:    02 16             	r2 = r0			  ## aac_main.c:313:29
   10416:    30 ed 04 00       	ifs (r0 >= 0x4) {			  ## aac_main.c:313:29
   1041a:    42 21             		r2 = 0x1
                               	}			  ## aac_main.c:313:29
   1041c:    92 61             	[r1+0x4] = r2			  ## aac_main.c:313:27
   1041e:    54 ed 34 20       	r2 = h[r3+0x4] (s)			  ## aac_main.c:314:19
   10422:    92 63             	[r1+0xc] = r2			  ## aac_main.c:314:17
   10424:    54 ed 36 20       	r2 = h[r3+0x6] (s)			  ## aac_main.c:315:19
   10428:    42 f0 00 10       	r2 = 0x1000  # <usb_code_size+0x53C : 1000 >			  ## aac_main.c:317:7
   1042c:    92 64             		 [r1+0x10] = r2			  ## aac_main.c:315:17
   1042e:    b0 e8 00 00       	if (r0 != 0x0) {			  ## aac_main.c:315:17
   10432:    42 e0 00 08       		r2 = 0x800
                               	} <stack_bss_size : 800 >			  ## aac_main.c:317:7
   10436:    40 20             	r0 = 0x0			  ## aac_main.c:317:7
   10438:    92 62             	[r1+0x8] = r2			  ## aac_main.c:318:25
   1043a:    55 04             	{pc, r5, r4} = [sp++]			  ## aac_main.c:317:7
   1043c:    30 60             	r0 = [r3+0x0] 			  ## aac_main.c:322:31
   1043e:    90 66             	[r1+0x18] = r0			  ## aac_main.c:322:20
   10440:    40 20             	r0 = 0x0
   10442:    55 04             	{pc, r5, r4} = [sp++]			  ## aac_main.c:337:1


silk_NSQ_del_dec_c:
   10444:    7f 04             	[--sp] = {rets, r15-r4}			  ## NSQ_del_dec.c:79:0
   10446:    82 91             	sp += -0x1bc			  ## NSQ_del_dec.c:79:0
   10448:    38 d6             	r8 = r3  #			  ## NSQ_del_dec.c:79:0
   1044a:    82 3b             		 [sp+108] = r2			  ## NSQ_del_dec.c:79:0
   1044c:    0f d6             	r15 = r0  #			  ## NSQ_del_dec.c:79:0
   1044e:    81 33             		 [sp+76] = r1			  ## NSQ_del_dec.c:79:0
   10450:    40 e0 f0 41       	r0 = 0x41f0 <memmove+0xB4 : 41f0 >			  ## NSQ_del_dec.c:79:0
   10454:    b4 e0 f0 40       	r4 = r15 + r0			  ## NSQ_del_dec.c:79:0
   10458:    17 e1 30 f4       	r7 = r15 + 0x1430			  ## NSQ_del_dec.c:79:0
   1045c:    01 f1 70 ff       	r1 = r15 + 0xf70  #			  ## NSQ_del_dec.c:79:0
   10460:    70 68             		 r0 = [r7+0x20] 			  ## NSQ_del_dec.c:112:34
   10462:    01 f1 f0 ff       	r1 = r15 + 0xff0  #			  ## NSQ_del_dec.c:112:34
   10466:    81 2d             		 [sp+52] = r1			  ## NSQ_del_dec.c:112:34
   10468:    e0 f1 8a 0e       	r0 = r0 * 0x450  #			  ## NSQ_del_dec.c:112:57
   1046c:    a1 31             		 [sp+196] = r1			  ## NSQ_del_dec.c:112:57
   1046e:    43 d6             	r3 = r4  #			  ## opus_demo.c:208:2
   10470:    11 61             		 r1 = [r1+0x4] 			  ## NSQ_del_dec.c:107:13
   10472:    a1 2b             	[sp+172] = r1			  ## NSQ_del_dec.c:112:57
   10474:    81 a2             	r1 = r0 >> 0x2			  ## NSQ_del_dec.c:112:87
   10476:    40 20             	r0 = 0x0
   10478:    42 20             	r2 = 0x0			  ## opus_demo.c:208:2
   1047a:    01 03             	rep 0x2 r1 {			  ## opus_demo.c:208:2
   1047c:    b2 05             		[r3++=0x4] = r2
                               	}			  ## opus_demo.c:208:2
   1047e:    f1 5d             	if (r1 != 0) goto -0x6 <silk_NSQ_del_dec_c+0x36 : 1047a >			  ## opus_demo.c:208:2
   10480:    d4 e9 0c 12       	r1 = [sp+524]
   10484:    a1 3c             	[sp+240] = r1
   10486:    d4 e9 08 12       	r1 = [sp+520]
   1048a:    81 31             	[sp+68] = r1
   1048c:    d4 e9 04 12       	r1 = [sp+516]
   10490:    81 34             	[sp+80] = r1
   10492:    d4 e9 00 12       	r1 = [sp+512]
   10496:    81 2c             	[sp+48] = r1
   10498:    d4 e9 fc 11       	r1 = [sp+508]
   1049c:    81 2b             	[sp+44] = r1
   1049e:    d4 e9 f8 11       	r1 = [sp+504]
   104a2:    81 2a             	[sp+40] = r1
   104a4:    d4 e9 f4 11       	r1 = [sp+500]
   104a8:    81 29             	[sp+36] = r1
   104aa:    d4 e9 f0 11       	r1 = [sp+496]
   104ae:    01 f1 6c f0       	r1 = r15 + 0x6c  #
   104b2:    81 28             		 [sp+32] = r1
   104b4:    d4 e9 10 22       	r2 = [sp+528]
   104b8:    d0 e9 11 20       	d[sp+16] = r3_r2
   104bc:    81 22             	[sp+8] = r1
   104be:    c1 24             	r1 += 0x4			  ## NSQ_del_dec.c:88:44
   104c0:    41 d6             	r1 = r4  #
   104c2:    81 39             		 [sp+100] = r1
   104c4:    84 38             	[sp+96] = r4
   104c6:    42 20             	r2 = 0x0
   104c8:    04 9d             	goto 0x3a <silk_NSQ_del_dec_c+0xC0 : 10504 >
   104ca:    4b 47             	r3 = b[r4+0x7] (u)			  ## NSQ_del_dec.c:115:32
   104cc:    23 18             	r3 += r2			  ## NSQ_del_dec.c:115:50
   104ce:    63 e1 03 30       	r3 = r3 & 0x3			  ## NSQ_del_dec.c:115:50
   104d2:    04 e1 40 14       	r4 = r1 + 0x440			  ## NSQ_del_dec.c:115:50
   104d6:    c3 61             	[r4+0x4] = r3			  ## NSQ_del_dec.c:115:24
   104d8:    c3 63             	[r4+0xc] = r3			  ## NSQ_del_dec.c:117:24
   104da:    c0 62             	[r4+0x8] = r0			  ## NSQ_del_dec.c:118:24
   104dc:    23 31             	r3 = [sp+196]			  ## NSQ_del_dec.c:119:31
   104de:    33 60             	r3 = [r3+0x0] 			  ## NSQ_del_dec.c:119:31
   104e0:    04 f1 6c f5       	r4 = r15 + 0x56c  #			  ## NSQ_del_dec.c:120:26
   104e4:    c3 60             		 [r4+0x0] = r3			  ## NSQ_del_dec.c:119:24
   104e6:    73 63             	r3 = [r7+0xc] 			  ## NSQ_del_dec.c:120:53
   104e8:    d8 ec 4a 33       	r3 = [r4+r3<<2]			  ## NSQ_del_dec.c:120:26
   104ec:    d3 ec 11 3c       	[r1+0x3c0] = r3			  ## NSQ_del_dec.c:120:24
   104f0:    13 d6             	r3 = r1  #			  ## opus_demo.c:186:2
   104f2:    05 2d             		 r5 = [sp+52]			  ## opus_demo.c:186:2
   104f4:    4c 20             	r4 = 0x20			  ## opus_demo.c:186:2
   104f6:    14 03             	rep 0x4 r4 {			  ## opus_demo.c:186:2
   104f8:    56 05             		r6 = [r5++=0x4] 			  ## opus_demo.c:186:2
   104fa:    b6 05             		[r3++=0x4] = r6
                               	}			  ## opus_demo.c:186:2
   104fc:    f4 5c             	if (r4 != 0) goto -0x8 <silk_NSQ_del_dec_c+0xB2 : 104f6 >			  ## opus_demo.c:186:2
   104fe:    01 e1 50 14       	r1 = r1 + 0x450			  ## NSQ_del_dec.c:113:2
   10502:    c2 21             	r2 += 0x1			  ## NSQ_del_dec.c:113:51
   10504:    14 f1 20 f0       	r4 = r15 + 0x1020  #
   10508:    73 68             		 r3 = [r7+0x20] 			  ## NSQ_del_dec.c:113:26
   1050a:    83 ed de 21       	ifs (r2 < r3) goto -0x44 <silk_NSQ_del_dec_c+0x86 : 104ca >			  ## NSQ_del_dec.c:113:26
   1050e:    84 32             	[sp+72] = r4
   10510:    01 2d             	r1 = [sp+52]
   10512:    54 ee 12 0b       	r0 = b[r1+0xb2] (s)			  ## NSQ_del_dec.c:125:48
   10516:    54 ee 13 1b       	r1 = b[r1+0xb3] (s)			  ## NSQ_del_dec.c:125:17
   1051a:    02 a1             	r2 = r0 << 0x1			  ## NSQ_del_dec.c:125:17
   1051c:    72 f1 03 20       	r2 = r2 & 0xFFFFFFFC  #			  ## NSQ_del_dec.c:125:70
   10520:    87 35             		 [sp+84] = r7			  ## NSQ_del_dec.c:125:70
   10522:    c3 ff 2a f6 01 00 	r3 = 0x1f62a <silk_Quantization_Offsets_Q10 : 1f62a >			  ## NSQ_del_dec.c:125:17
   10528:    32 18             	r2 += r3			  ## NSQ_del_dec.c:125:17
   1052a:    43 e0 70 35       	r3 = 0x3570 <WOLASynthesisFilter_Float_M256_m4_r1+0xD6C : 3570 >			  ## NSQ_del_dec.c:101:41
   1052e:    d0 ec 78 c0       	r12 = [r7+0x8]			  ## NSQ_del_dec.c:128:56
   10532:    f3 18             	r3 += r15			  ## NSQ_del_dec.c:101:41
   10534:    d4 e9 29 31       	[sp+296] = r3			  ## NSQ_del_dec.c:101:41
   10538:    43 e0 b0 36       	r3 = 0x36b0 <WOLASynthesisFilter_Float_M256_m4_r1+0xEAC : 36b0 >			  ## NSQ_del_dec.c:101:41
   1053c:    f3 18             	r3 += r15			  ## NSQ_del_dec.c:101:41
   1053e:    a3 30             	[sp+192] = r3			  ## SigProc_FIX.h:350:13
   10540:    3c ed 20 00       	ifs (r12 >= 0x20) {			  ## SigProc_FIX.h:350:13
   10544:    4c e0 20 00       		r12 = 0x20
                               	} <WOLAAnalysisFilter_Float_M64_m4_r1+0x1C : 20 >			  ## SigProc_FIX.h:350:13
   10548:    d8 ed 2a 11       	r1 = h[r2+r1<<1] (s)			  ## NSQ_del_dec.c:125:17
   1054c:    a1 3d             	[sp+244] = r1			  ## NSQ_del_dec.c:131:6
   1054e:    80 f8 0f 04       	if (r0 != 0x2) goto 0x1e <silk_NSQ_del_dec_c+0x12C : 10570 >			  ## NSQ_del_dec.c:131:6
   10552:    02 35             	r2 = [sp+84]
   10554:    20 60             	r0 = [r2+0x0] 
   10556:    41 20             	r1 = 0x0
   10558:    04 88             	goto 0x10 <silk_NSQ_del_dec_c+0x126 : 1056a >
   1055a:    02 31             	r2 = [sp+68]			  ## NSQ_del_dec.c:133:49
   1055c:    d8 ec 2a 21       	r2 = [r2+r1<<2]			  ## NSQ_del_dec.c:133:49
   10560:    fa 3d             	r2 += -0x3			  ## NSQ_del_dec.c:133:77
   10562:    35 f4 c1 c2       	r12 = smin(r12, r2)  #			  ## SigProc_FIX.h:350:13
   10566:    02 35             		 r2 = [sp+84]
   10568:    c1 21             	r1 += 0x1			  ## NSQ_del_dec.c:132:38
   1056a:    80 ed f6 11       	ifs (r1 < r0) goto -0x14 <silk_NSQ_del_dec_c+0x116 : 1055a >
   1056e:    04 87             	goto 0xe <silk_NSQ_del_dec_c+0x13A : 1057e >
   10570:    02 35             	r2 = [sp+84]
   10572:    20 2b             	r0 = [sp+172]
   10574:    30 ed 01 40       	ifs (r0 >= 0x1) {
   10578:    f8 3d             		r0 += -0x3			  ## NSQ_del_dec.c:137:69
   1057a:    35 e4 c1 c0       		r12 = smin(r12, r0)
                               	}			  ## SigProc_FIX.h:350:13
   1057e:    20 63             	r0 = [r2+0xc] 			  ## NSQ_del_dec.c:142:44
   10580:    21 31             	r1 = [sp+196]			  ## NSQ_del_dec.c:142:44
   10582:    90 63             	[r1+0xc] = r0			  ## NSQ_del_dec.c:143:24
   10584:    41 f0 b0 44       	r1 = 0x44b0  # <nvram_boot_state+0x40 : 44b0 >			  ## NSQ_del_dec.c:146:7
   10588:    90 62             		 [r1+0x8] = r0			  ## NSQ_del_dec.c:144:24
   1058a:    b4 e0 f0 91       	r9 = r15 + r1			  ## NSQ_del_dec.c:146:7
   1058e:    41 e0 b0 43       	r1 = 0x43b0 <strcpy+0x1C : 43b0 >			  ## NSQ_del_dec.c:146:7
   10592:    f1 18             	r1 += r15			  ## NSQ_del_dec.c:146:7
   10594:    a1 25             	[sp+148] = r1			  ## NSQ_del_dec.c:146:7
   10596:    01 38             	r1 = [sp+96]			  ## NSQ_del_dec.c:146:7
   10598:    d9 3c             	r1 += 0x7c			  ## NSQ_del_dec.c:146:7
   1059a:    41 f0 38 46       	r1 = 0x4638  # <usb_clr_intr_rxe+0x6 : 4638 >			  ## NSQ_del_dec.c:146:7
   1059e:    81 27             		 [sp+28] = r1			  ## NSQ_del_dec.c:146:7
   105a0:    f1 18             	r1 += r15			  ## NSQ_del_dec.c:146:7
   105a2:    41 f0 30 45       	r1 = 0x4530  # <local_irq_disable+0x6 : 4530 >			  ## NSQ_del_dec.c:146:7
   105a6:    a1 24             		 [sp+144] = r1			  ## NSQ_del_dec.c:146:7
   105a8:    f1 18             	r1 += r15			  ## NSQ_del_dec.c:146:7
   105aa:    81 23             	[sp+12] = r1			  ## NSQ_del_dec.c:146:7
   105ac:    d0 e9 10 40       	r5_r4 = d[sp+16]			  ## NSQ_del_dec.c:146:7
   105b0:    cd bf             	r5 = r4 >>> 0x1f			  ## NSQ_del_dec.c:146:7
   105b2:    d0 e9 11 40       	d[sp+16] = r5_r4			  ## NSQ_del_dec.c:142:27
   105b6:    00 a1             	r0 = r0 << 0x1			  ## NSQ_del_dec.c:142:27
   105b8:    f0 18             	r0 += r15			  ## NSQ_del_dec.c:142:27
   105ba:    d8 30             	r0 += 0x70			  ## NSQ_del_dec.c:142:27
   105bc:    80 3a             	[sp+104] = r0
   105be:    f8 e8 5c 01       	r0 = sp + 348
   105c2:    01 e1 4c 00       	r1 = r0 + 0x4c			  ## NSQ_del_dec.c:146:7
   105c6:    a1 23             	[sp+140] = r1			  ## NSQ_del_dec.c:146:7
   105c8:    09 9c             	r1 = r0 + 0x1c			  ## NSQ_del_dec.c:146:7
   105ca:    01 f1 34 00       	r1 = r0 + 0x34  #			  ## NSQ_del_dec.c:146:7
   105ce:    a1 22             		 [sp+136] = r1			  ## NSQ_del_dec.c:146:7
   105d0:    a1 21             	[sp+132] = r1			  ## NSQ_del_dec.c:146:7
   105d2:    a0 32             	[sp+200] = r0			  ## NSQ_del_dec.c:146:7
   105d4:    c8 2c             	r0 += 0x2c			  ## NSQ_del_dec.c:146:7
   105d6:    00 f1 20 80       	r0 = r8 + 0x20  #			  ## NSQ_del_dec.c:146:7
   105da:    a0 20             		 [sp+128] = r0			  ## NSQ_del_dec.c:146:7
   105dc:    44 20             	r4 = 0x0
   105de:    60 f0 00 5c       	r5 = 0x8000  #
   105e2:    a0 3e             		 [sp+248] = r0
   105e4:    40 e0 b0 20       	r0 = 0x20b0 <WOLAAnalysisFilter_Float_M256_m4_r1+0x8AC : 20b0 >
   105e8:    f0 18             	r0 += r15
   105ea:    80 36             	[sp+88] = r0
   105ec:    21 3d             	r1 = [sp+244]
   105ee:    a0 e0 6c 1f       	r0 = 0x3B0 - r1
   105f2:    30 f1 50 1c       	r0 = r1 + -0x3b0  #
   105f6:    a0 39             		 [sp+228] = r0
   105f8:    00 f1 b0 13       	r0 = r1 + 0x3b0  #
   105fc:    a0 38             		 [sp+224] = r0
   105fe:    30 f1 b0 1f       	r0 = r1 + -0x50  #
   10602:    a0 3a             		 [sp+232] = r0
   10604:    a0 f0 02 c0       	r0 = 0x2 - r12  #
   10608:    a0 3b             		 [sp+236] = r0
   1060a:    80 21             	[sp+4] = r0
   1060c:    40 20             	r0 = 0x0
   1060e:    a0 37             	[sp+220] = r0
   10610:    d0 e9 39 40       	d[sp+56] = r5_r4
   10614:    43 20             	r3 = 0x0
   10616:    d4 e9 9d f0       	[sp+156] = r15
   1061a:    d4 e9 b1 c0       	[sp+176] = r12
   1061e:    d4 e9 99 90       	[sp+152] = r9
   10622:    c0 ea 27 04       	goto 0x84e <silk_NSQ_del_dec_c+0xA30 : 10e74 >
   10626:    00 2a             	r0 = [sp+40]			  ## NSQ_del_dec.c:153:29
   10628:    d8 ec 0a 03       	r0 = [r0+r3<<2]			  ## NSQ_del_dec.c:153:29
   1062c:    21 31             	r1 = [sp+196]			  ## NSQ_del_dec.c:156:21
   1062e:    d0 e9 38 40       	r5_r4 = d[sp+56]			  ## NSQ_del_dec.c:156:21
   10632:    94 65             	[r1+0x14] = r4			  ## NSQ_del_dec.c:156:21
   10634:    8c a2             	r4 = r0 >>> 0x2			  ## NSQ_del_dec.c:153:29
   10636:    d0 e9 d1 40       	d[sp+208] = r5_r4			  ## NSQ_del_dec.c:157:18
   1063a:    c0 f1 0f 90       	r9 = r0 << 0xf  #			  ## NSQ_del_dec.c:154:29
   1063e:    01 32             		 r1 = [sp+72]			  ## NSQ_del_dec.c:157:18
   10640:    50 ee 12 c0       	r12 = b[r1+0x2] (u)			  ## NSQ_del_dec.c:157:18
   10644:    c0 e1 35 a0       	r10 = r3 << 0x5			  ## NSQ_del_dec.c:149:17
   10648:    46 21             	r6 = 0x1			  ## NSQ_del_dec.c:149:17
   1064a:    31 16             	r1 = r3			  ## NSQ_del_dec.c:149:17
   1064c:    eb f1 0a 30       	r11 = r3 * 0xA  #			  ## NSQ_del_dec.c:148:17
   10650:    a1 2e             		 [sp+184] = r1			  ## NSQ_del_dec.c:148:17
   10652:    8c f8 50 04       	if (r12 != 0x2) goto 0xa0 <silk_NSQ_del_dec_c+0x2B2 : 106f6 >			  ## NSQ_del_dec.c:148:17
   10656:    4c f0 02 00       	r12 = 0x2  # <mem_code_size+0x2 : 2 >
   1065a:    00 31             		 r0 = [sp+68]			  ## NSQ_del_dec.c:159:10
   1065c:    d8 ec 0a 41       	r4 = [r0+r1<<2]			  ## NSQ_del_dec.c:159:10
   10660:    a4 2b             	[sp+172] = r4
   10662:    a1 49             	if (r1 != 0) goto 0x92 <silk_NSQ_del_dec_c+0x2B2 : 106f6 >
   10664:    11 3e             	r1 = -0x2			  ## NSQ_del_dec.c:164:40
   10666:    11 df             	r1 = r1 - r4  #			  ## NSQ_del_dec.c:164:40
   10668:    20 63             		 r0 = [r2+0xc] 			  ## NSQ_del_dec.c:164:25
   1066a:    23 16             	r3 = r2			  ## NSQ_del_dec.c:164:25
   1066c:    12 dc             	r2 = r1 + r0  #			  ## NSQ_del_dec.c:164:46
   1066e:    01 22             		 r1 = [sp+8]			  ## noise_shape_analysis_FIX.c:98:7
   10670:    b4 e0 02 c2       	r12 = r0 - r2			  ## noise_shape_analysis_FIX.c:82:13
   10674:    d0 ec 38 e2       	r14 = [r3+0x28]			  ## NSQ_del_dec.c:164:56
   10678:    00 1f             	r0 = r0 - r4			  ## noise_shape_analysis_FIX.c:98:7
   1067a:    00 a1             	r0 = r0 << 0x1			  ## noise_shape_analysis_FIX.c:98:7
   1067c:    b4 e0 10 d0       	r13 = r1 + r0			  ## noise_shape_analysis_FIX.c:98:7
   10680:    b4 e0 22 0e       	r0 = r2 - r14			  ## NSQ_del_dec.c:164:72
   10684:    00 a1             	r0 = r0 << 0x1			  ## NSQ_del_dec.c:167:32
   10686:    b4 e0 f0 20       	r2 = r15 + r0			  ## NSQ_del_dec.c:167:32
   1068a:    40 e0 70 35       	r0 = 0x3570 <WOLASynthesisFilter_Float_M256_m4_r1+0xD6C : 3570 >			  ## NSQ_del_dec.c:167:32
   1068e:    b4 f0 20 80       	r8 = r2 + r0  #			  ## NSQ_del_dec.c:167:32
   10692:    20 3e             		 r0 = [sp+248]			  ## noise_shape_analysis_FIX.c:87:37
   10694:    c0 e1 e1 70       	r7 = r14 << 0x1			  ## noise_shape_analysis_FIX.c:85:16
   10698:    b4 e0 80 f7       	r15 = r8 + r7			  ## noise_shape_analysis_FIX.c:86:24
   1069c:    70 18             	r0 += r7			  ## noise_shape_analysis_FIX.c:87:37
   1069e:    f8 3e             	r0 += -0x2			  ## noise_shape_analysis_FIX.c:87:37
   106a0:    da 30             	r2 += 0x70			  ## NSQ_del_dec.c:167:52
   106a2:    43 20             	r3 = 0x0
   106a4:    04 95             	goto 0x2a <silk_NSQ_del_dec_c+0x28C : 106d0 >
   106a6:    d8 ed da 13       	r1 = h[r13+r3<<1] (s)			  ## noise_shape_analysis_FIX.c:100:20
   106aa:    11 ac             	r1 = r1 << 0xc			  ## noise_shape_analysis_FIX.c:100:20
   106ac:    e4 16             	r4 = r14			  ## noise_shape_analysis_FIX.c:107:3
   106ae:    54 03             	rep 0xc r4 {			  ## noise_shape_analysis_FIX.c:107:3
   106b0:    d7 ed 0e 5f       		r5 = h[r0++=-0x2] (s)			  ## noise_shape_analysis_FIX.c:107:3
   106b4:    d4 ed 22 60       		r6 = h[r2++=0x2] (s)			  ## noise_shape_analysis_FIX.c:107:3
   106b8:    65 1b             		r5 *= r6			  ## noise_shape_analysis_FIX.c:107:3
   106ba:    19 1f             		r1 = r1 - r5
                               	}			  ## noise_shape_analysis_FIX.c:107:3
   106bc:    05 e1 00 18       	r5 = r1 + 0x800			  ## noise_shape_analysis_FIX.c:107:3
   106c0:    5d a4             	r5 = r5 <<< 0x4			  ## noise_shape_analysis_FIX.c:107:3
   106c2:    dd b0             	r5 = r5 >>> 0x10			  ## noise_shape_analysis_FIX.c:107:3
   106c4:    d0 ed f3 50       	h[r15++=0x2] = r5			  ## noise_shape_analysis_FIX.c:107:3
   106c8:    88 1d             	r0 = r0 + r7			  ## noise_shape_analysis_FIX.c:107:3
   106ca:    aa 1f             	r2 = r2 - r7			  ## noise_shape_analysis_FIX.c:107:3
   106cc:    2a 82             	r2 = r2 + 0x2			  ## noise_shape_analysis_FIX.c:107:3
   106ce:    c3 21             	r3 += 0x1			  ## noise_shape_analysis_FIX.c:98:16
   106d0:    8c ed e9 31       	ifs (r3 < r12) goto -0x2e <silk_NSQ_del_dec_c+0x262 : 106a6 >
   106d4:    40 20             	r0 = 0x0			  ## noise_shape_analysis_FIX.c:136:2
   106d6:    1e 03             	rep 0x4 r14 {			  ## noise_shape_analysis_FIX.c:136:2
   106d8:    d0 ed 83 00       		h[r8++=0x2] = r0
                               	}			  ## noise_shape_analysis_FIX.c:136:2
   106dc:    00 35             	r0 = [sp+84]			  ## NSQ_del_dec.c:170:33
   106de:    00 63             	r0 = [r0+0xc] 			  ## NSQ_del_dec.c:170:33
   106e0:    21 31             	r1 = [sp+196]			  ## NSQ_del_dec.c:170:33
   106e2:    90 62             	[r1+0x8] = r0			  ## NSQ_del_dec.c:170:23
   106e4:    45 ea 01 10       	[r1+0x14] = 0x1			  ## NSQ_del_dec.c:171:23
   106e8:    00 32             	r0 = [sp+72]			  ## NSQ_del_dec.c:171:23
   106ea:    50 ee 02 c0       	r12 = b[r0+0x2] (u)			  ## NSQ_del_dec.c:171:23
   106ee:    46 20             	r6 = 0x0
   106f0:    d4 e9 9c f0       	r15 = [sp+156]
   106f4:    21 2e             	r1 = [sp+184]
   106f6:    00 34             	r0 = [sp+80]			  ## NSQ_del_dec.c:724:38
   106f8:    d8 ec 0a 01       	r0 = [r0+r1<<2]			  ## NSQ_del_dec.c:724:38
   106fc:    d0 e9 d0 20       	r3_r2 = d[sp+208]			  ## NSQ_del_dec.c:154:26
   10700:    90 e1 20 29       	r2 = r2 | r9			  ## NSQ_del_dec.c:154:26
   10704:    d0 e9 79 20       	d[sp+120] = r3_r2			  ## NSQ_del_dec.c:149:17
   10708:    01 29             	r1 = [sp+36]			  ## NSQ_del_dec.c:149:17
   1070a:    a1 18             	r1 += r10			  ## NSQ_del_dec.c:149:17
   1070c:    d4 e9 25 11       	[sp+292] = r1			  ## NSQ_del_dec.c:148:17
   10710:    01 28             	r1 = [sp+32]			  ## NSQ_del_dec.c:148:17
   10712:    b1 18             	r1 += r11			  ## NSQ_del_dec.c:148:17
   10714:    81 37             	[sp+92] = r1			  ## NSQ_del_dec.c:724:38
   10716:    b0 ee 01 00       	ifs (r0 <= 0x1) {			  ## NSQ_del_dec.c:724:38
   1071a:    40 21             		r0 = 0x1
                               	}			  ## NSQ_del_dec.c:724:38
   1071c:    d0 e9 38 20       	r3_r2 = d[sp+56]			  ## Inlines.h:138:20
   10720:    f6 f1 20 20       	r3_r2 = r3_r2 / r0 (u)  #			  ## Inlines.h:138:20
   10724:    00 31             		 r0 = [sp+68]			  ## NSQ_del_dec.c:723:17
   10726:    ac bf             	r4 = r2 >>> 0x1f			  ## Inlines.h:140:5
   10728:    24 d8             	r4 += r2  #			  ## Inlines.h:140:5
   1072a:    21 2e             		 r1 = [sp+184]			  ## NSQ_del_dec.c:723:17
   1072c:    d8 ec 0a 81       	r8 = [r0+r1<<2]			  ## NSQ_del_dec.c:723:17
   10730:    02 f1 80 40       	r2 = r4 + 0x80  #			  ## NSQ_del_dec.c:727:17
   10734:    00 35             		 r0 = [sp+84]			  ## NSQ_del_dec.c:176:12
   10736:    d0 ec 00 d2       	r13 = [r0+0x20]			  ## NSQ_del_dec.c:176:12
   1073a:    ab a8             	r3 = r2 >>> 0x8			  ## NSQ_del_dec.c:727:17
   1073c:    20 31             	r0 = [sp+196]
   1073e:    96 44             	if (r6 != 0) goto 0x48 <silk_NSQ_del_dec_c+0x344 : 10788 >
   10740:    21 2e             	r1 = [sp+184]
   10742:    81 48             	if (r1 != 0) goto 0x10 <silk_NSQ_del_dec_c+0x310 : 10754 >
   10744:    d0 e9 10 60       	r7_r6 = d[sp+16]			  ## NSQ_del_dec.c:732:19
   10748:    f8 e1 40 56       	r5_r4 = r4 * r6 (s)			  ## NSQ_del_dec.c:732:19
   1074c:    d0 e1 0e 48       	r5_r4 >>= 0xe			  ## NSQ_del_dec.c:732:19
   10750:    74 e1 03 40       	r4 = r4 & 0xFFFFFFFC			  ## NSQ_del_dec.c:732:19
   10754:    02 62             	r2 = [r0+0x8] 			  ## NSQ_del_dec.c:734:17
   10756:    cd bf             	r5 = r4 >>> 0x1f			  ## NSQ_del_dec.c:734:17
   10758:    16 e1 b6 2a       	r6 = r2 + 0x1ab6			  ## NSQ_del_dec.c:734:8
   1075c:    b4 e0 62 68       	r6 = r6 - r8			  ## NSQ_del_dec.c:734:8
   10760:    07 e1 fa 2d       	r7 = r2 + 0xdfa			  ## NSQ_del_dec.c:734:8
   10764:    b4 e0 72 78       	r7 = r7 - r8			  ## NSQ_del_dec.c:734:8
   10768:    04 8b             	goto 0x16 <silk_NSQ_del_dec_c+0x33C : 10780 >			  ## NSQ_del_dec.c:734:8
   1076a:    d8 ed fa 16       	r1 = h[r15+r6<<1] (s)			  ## NSQ_del_dec.c:736:20
   1076e:    f8 e1 10 b4       	r11_r10 = r1 * r4 (s)			  ## NSQ_del_dec.c:736:20
   10772:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## NSQ_del_dec.c:736:20
   10776:    d8 ec fb a7       	[r15+r7<<2] = r10			  ## NSQ_del_dec.c:736:18
   1077a:    02 62             	r2 = [r0+0x8] 			  ## NSQ_del_dec.c:736:18
   1077c:    c6 21             	r6 += 0x1			  ## NSQ_del_dec.c:734:3
   1077e:    c7 21             	r7 += 0x1			  ## NSQ_del_dec.c:734:3
   10780:    31 e1 04 72       	r1 = r7 + -0xdfc			  ## NSQ_del_dec.c:734:55
   10784:    82 ed f1 11       	ifs (r1 < r2) goto -0x1e <silk_NSQ_del_dec_c+0x326 : 1076a >			  ## NSQ_del_dec.c:734:55
   10788:    00 35             	r0 = [sp+84]			  ## NSQ_del_dec.c:744:62
   1078a:    01 62             	r1 = [r0+0x8] 			  ## NSQ_del_dec.c:744:62
   1078c:    20 31             	r0 = [sp+196]
   1078e:    d4 e9 28 21       	r2 = [sp+296]			  ## NSQ_del_dec.c:687:2
   10792:    04 33             	r4 = [sp+76]			  ## NSQ_del_dec.c:687:2
   10794:    41 03             	rep 0xa r1 {			  ## NSQ_del_dec.c:687:2
   10796:    e0 ee 41 73       		r7_r6 = [r4 ++= 0x4]*r3 (s)			  ## NSQ_del_dec.c:687:2
   1079a:    d0 e1 00 6d       		r7_r6 >>>= 0x10			  ## NSQ_del_dec.c:687:2
   1079e:    a6 05             		[r2++=0x4] = r6
                               	}			  ## NSQ_del_dec.c:687:2
   107a0:    f1 59             	if (r1 != 0) goto -0xe <silk_NSQ_del_dec_c+0x350 : 10794 >			  ## NSQ_del_dec.c:687:2
   107a2:    01 34             	r1 = [sp+80]			  ## NSQ_del_dec.c:748:6
   107a4:    22 2e             	r2 = [sp+184]			  ## NSQ_del_dec.c:748:6
   107a6:    d8 ec 1a 32       	r3 = [r1+r2<<2]			  ## NSQ_del_dec.c:748:6
   107aa:    04 64             	r4 = [r0+0x10] 			  ## NSQ_del_dec.c:748:33
   107ac:    84 e8 02 30       	if (r3 != r4) goto 0x4 <silk_NSQ_del_dec_c+0x370 : 107b4 >			  ## NSQ_del_dec.c:748:6
   107b0:    83 64             	[r0+0x10] = r3			  ## NSQ_del_dec.c:755:21
   107b2:    24 98             	goto 0xb0 <silk_NSQ_del_dec_c+0x420 : 10864 >			  ## NSQ_del_dec.c:755:21
   107b4:    cd bf             	r5 = r4 >>> 0x1f			  ## Inlines.h:119:20
   107b6:    d0 f1 00 41       	r5_r4 <<= 0x10  #			  ## Inlines.h:119:35
   107ba:    83 64             		 [r0+0x10] = r3			  ## NSQ_del_dec.c:755:21
   107bc:    f6 e1 40 53       	r5_r4 = r5_r4 / r3 (s)			  ## Inlines.h:122:20
   107c0:    20 ff 80 4b 4f 00 	if (r4 == 0x10000) goto 0x9e <silk_NSQ_del_dec_c+0x420 : 10864 >
   107c6:    43 d6             	r3 = r4  #			  ## NSQ_del_dec.c:687:2
   107c8:    00 35             		 r0 = [sp+84]			  ## NSQ_del_dec.c:794:65
   107ca:    01 63             	r1 = [r0+0xc] 			  ## NSQ_del_dec.c:794:65
   107cc:    20 31             	r0 = [sp+196]
   107ce:    02 63             	r2 = [r0+0xc] 			  ## NSQ_del_dec.c:794:38
   107d0:    2a 1e             	r2 = r2 - r1			  ## NSQ_del_dec.c:794:55
   107d2:    22 a2             	r2 = r2 << 0x2			  ## NSQ_del_dec.c:794:15
   107d4:    f2 18             	r2 += r15			  ## NSQ_del_dec.c:794:15
   107d6:    02 e1 70 25       	r2 = r2 + 0x570			  ## NSQ_del_dec.c:794:15
   107da:    26 16             	r6 = r2			  ## NSQ_del_dec.c:687:2
   107dc:    51 03             	rep 0xc r1 {			  ## NSQ_del_dec.c:687:2
   107de:    e0 ee 61 b3       		r11_r10 = [r6 ++= 0x4]*r3 (s)			  ## NSQ_del_dec.c:687:2
   107e2:    d0 e1 00 ad       		r11_r10 >>>= 0x10			  ## NSQ_del_dec.c:687:2
   107e6:    d8 ec 25 a0       		[r2++=0x4] = r10
                               	}			  ## NSQ_del_dec.c:687:2
   107ea:    f1 58             	if (r1 != 0) goto -0x10 <silk_NSQ_del_dec_c+0x398 : 107dc >			  ## NSQ_del_dec.c:687:2
   107ec:    8c f8 19 04       	if (r12 != 0x2) goto 0x32 <silk_NSQ_del_dec_c+0x3DE : 10822 >
   107f0:    01 65             	r1 = [r0+0x14] 			  ## NSQ_del_dec.c:799:42
   107f2:    81 57             	if (r1 != 0) goto 0x2e <silk_NSQ_del_dec_c+0x3DE : 10822 >			  ## NSQ_del_dec.c:799:42
   107f4:    46 d6             	r6 = r4  #			  ## NSQ_del_dec.c:687:2
   107f6:    01 62             		 r1 = [r0+0x8] 			  ## NSQ_del_dec.c:800:25
   107f8:    10 3e             	r0 = -0x2			  ## NSQ_del_dec.c:800:38
   107fa:    b4 e0 02 28       	r2 = r0 - r8			  ## NSQ_del_dec.c:800:38
   107fe:    21 18             	r1 += r2			  ## NSQ_del_dec.c:800:44
   10800:    11 a2             	r1 = r1 << 0x2			  ## NSQ_del_dec.c:800:11
   10802:    f1 18             	r1 += r15			  ## NSQ_del_dec.c:800:11
   10804:    40 e0 f0 37       	r0 = 0x37f0 <WOLASynthesisFilter_Float_M256_m4_r1+0xFEC : 37f0 >			  ## NSQ_del_dec.c:800:11
   10808:    01 d8             	r1 += r0  #			  ## NSQ_del_dec.c:800:11
   1080a:    00 21             		 r0 = [sp+4]			  ## NSQ_del_dec.c:801:61
   1080c:    b4 e0 00 28       	r2 = r0 + r8			  ## NSQ_del_dec.c:801:61
   10810:    13 16             	r3 = r1			  ## NSQ_del_dec.c:687:2
   10812:    52 03             	rep 0xc r2 {			  ## NSQ_del_dec.c:687:2
   10814:    e0 ee 11 96       		r9_r8 = [r1 ++= 0x4]*r6 (s)			  ## NSQ_del_dec.c:687:2
   10818:    d0 e1 00 8d       		r9_r8 >>>= 0x10			  ## NSQ_del_dec.c:687:2
   1081c:    d8 ec 35 80       		[r3++=0x4] = r8
                               	}			  ## NSQ_del_dec.c:687:2
   10820:    f2 58             	if (r2 != 0) goto -0x10 <silk_NSQ_del_dec_c+0x3CE : 10812 >			  ## NSQ_del_dec.c:687:2
   10822:    41 20             	r1 = 0x0
   10824:    02 23             	r2 = [sp+12]
   10826:    04 9c             	goto 0x38 <silk_NSQ_del_dec_c+0x41C : 10860 >
   10828:    30 e1 c0 2c       	r0 = r2 + -0x340			  ## NSQ_del_dec.c:687:2
   1082c:    4e 20             	r6 = 0x20			  ## NSQ_del_dec.c:687:2
   1082e:    47 16             	r7 = r4			  ## NSQ_del_dec.c:687:2
   10830:    03 16             	r3 = r0			  ## NSQ_del_dec.c:687:2
   10832:    56 03             	rep 0xc r6 {			  ## NSQ_del_dec.c:687:2
   10834:    e0 ee 31 97       		r9_r8 = [r3 ++= 0x4]*r7 (s)			  ## NSQ_del_dec.c:687:2
   10838:    d0 e1 00 8d       		r9_r8 >>>= 0x10			  ## NSQ_del_dec.c:687:2
   1083c:    d8 ec 05 80       		[r0++=0x4] = r8
                               	}			  ## NSQ_del_dec.c:687:2
   10840:    f6 58             	if (r6 != 0) goto -0x10 <silk_NSQ_del_dec_c+0x3EE : 10832 >			  ## NSQ_del_dec.c:687:2
   10842:    40 16             	r0 = r4			  ## NSQ_del_dec.c:687:2
   10844:    23 16             	r3 = r2			  ## NSQ_del_dec.c:687:2
   10846:    26 16             	r6 = r2			  ## NSQ_del_dec.c:687:2
   10848:    57 21             	r7 = 0x41			  ## NSQ_del_dec.c:687:2
   1084a:    57 03             	rep 0xc r7 {			  ## NSQ_del_dec.c:687:2
   1084c:    e0 ee 31 90       		r9_r8 = [r3 ++= 0x4]*r0 (s)			  ## NSQ_del_dec.c:687:2
   10850:    d0 e1 00 8d       		r9_r8 >>>= 0x10			  ## NSQ_del_dec.c:687:2
   10854:    d8 ec 65 80       		[r6++=0x4] = r8
                               	}			  ## NSQ_del_dec.c:687:2
   10858:    f7 58             	if (r7 != 0) goto -0x10 <silk_NSQ_del_dec_c+0x406 : 1084a >			  ## NSQ_del_dec.c:687:2
   1085a:    02 e1 50 24       	r2 = r2 + 0x450			  ## NSQ_del_dec.c:804:3
   1085e:    c1 21             	r1 += 0x1			  ## NSQ_del_dec.c:804:44
   10860:    8d ed e2 11       	ifs (r1 < r13) goto -0x3c <silk_NSQ_del_dec_c+0x3E4 : 10828 >
   10864:    00 2c             	r0 = [sp+48]			  ## NSQ_del_dec.c:179:91
   10866:    21 2e             	r1 = [sp+184]			  ## NSQ_del_dec.c:179:91
   10868:    d8 ec 0a c1       	r12 = [r0+r1<<2]			  ## NSQ_del_dec.c:179:91
   1086c:    c0 f1 cf dd       	r13 = r12 >>> 0x1f  #
   10870:    00 2b             		 r0 = [sp+44]
   10872:    d8 ec 0a 21       	r2 = [r0+r1<<2]
   10876:    c4 15             	r5_r4 = r13_r12
   10878:    d0 e1 00 4d       	r5_r4 >>>= 0x10
   1087c:    d0 e9 09 41       	d[sp+264] = r5_r4
   10880:    ab bf             	r3 = r2 >>> 0x1f
   10882:    d0 e9 11 21       	d[sp+272] = r3_r2
   10886:    d0 e9 78 20       	r3_r2 = d[sp+120]
   1088a:    ab bf             	r3 = r2 >>> 0x1f
   1088c:    d0 e1 00 2d       	r3_r2 >>>= 0x10
   10890:    d0 e9 79 20       	d[sp+120] = r3_r2
   10894:    c5 d4             	r13 = 0  #
   10896:    00 34             		 r0 = [sp+80]			  ## NSQ_del_dec.c:180:4
   10898:    d8 ec 0a 01       	r0 = [r0+r1<<2]			  ## NSQ_del_dec.c:180:4
   1089c:    02 35             	r2 = [sp+84]
   1089e:    d0 ec 20 e2       	r14 = [r2+0x20]			  ## NSQ_del_dec.c:181:37
   108a2:    21 6a             	r1 = [r2+0x28] 			  ## NSQ_del_dec.c:181:12
   108a4:    d4 e9 05 11       	[sp+260] = r1			  ## NSQ_del_dec.c:180:52
   108a8:    21 62             	r1 = [r2+0x8] 			  ## NSQ_del_dec.c:180:52
   108aa:    a1 2d             	[sp+180] = r1
   108ac:    24 31             	r4 = [sp+196]
   108ae:    41 62             	r1 = [r4+0x8] 			  ## NSQ_del_dec.c:347:33
   108b0:    03 32             	r3 = [sp+72]			  ## NSQ_del_dec.c:178:65
   108b2:    3b 42             	r3 = b[r3+0x2] (u)			  ## NSQ_del_dec.c:178:65
   108b4:    a3 2a             	[sp+168] = r3			  ## NSQ_del_dec.c:180:83
   108b6:    25 2b             	r5 = [sp+172]
   108b8:    a3 f0 02 50       	r3 = 0x2 - r5  #			  ## NSQ_del_dec.c:347:46
   108bc:    22 69             		 r2 = [r2+0x24] 			  ## NSQ_del_dec.c:180:83
   108be:    31 18             	r1 += r3			  ## NSQ_del_dec.c:347:52
   108c0:    11 a2             	r1 = r1 << 0x2			  ## NSQ_del_dec.c:347:18
   108c2:    f1 18             	r1 += r15			  ## NSQ_del_dec.c:347:18
   108c4:    43 e0 f0 37       	r3 = 0x37f0 <WOLASynthesisFilter_Float_M256_m4_r1+0xFEC : 37f0 >			  ## NSQ_del_dec.c:347:18
   108c8:    31 18             	r1 += r3			  ## NSQ_del_dec.c:347:18
   108ca:    a1 28             	[sp+160] = r1			  ## NSQ_del_dec.c:346:42
   108cc:    41 63             	r1 = [r4+0xc] 			  ## NSQ_del_dec.c:346:42
   108ce:    88 a6             	r0 = r0 >>> 0x6			  ## NSQ_del_dec.c:348:17
   108d0:    a0 f0 01 50       	r0 = 0x1 - r5  #			  ## NSQ_del_dec.c:346:59
   108d4:    a0 29             		 [sp+164] = r0			  ## NSQ_del_dec.c:346:59
   108d6:    d0 e9 d0 60       	r7_r6 = d[sp+208]			  ## NSQ_del_dec.c:346:59
   108da:    47 20             	r7 = 0x0			  ## NSQ_del_dec.c:346:59
   108dc:    10 18             	r0 += r1			  ## NSQ_del_dec.c:346:65
   108de:    64 16             	r4 = r6			  ## NSQ_del_dec.c:346:65
   108e0:    45 20             	r5 = 0x0			  ## NSQ_del_dec.c:346:65
   108e2:    d0 e1 00 43       	r5_r4 <<= 0x30			  ## NSQ_del_dec.c:346:65
   108e6:    d0 e1 00 4f       	r5_r4 >>>= 0x30			  ## NSQ_del_dec.c:346:65
   108ea:    d0 e9 71 40       	d[sp+112] = r5_r4			  ## NSQ_del_dec.c:346:65
   108ee:    d0 e1 00 c3       	r13_r12 <<= 0x30			  ## NSQ_del_dec.c:346:65
   108f2:    d0 e1 00 cf       	r13_r12 >>>= 0x30			  ## NSQ_del_dec.c:346:65
   108f6:    d0 e9 19 c1       	d[sp+280] = r13_r12			  ## NSQ_del_dec.c:346:65
   108fa:    00 a2             	r0 = r0 << 0x2			  ## NSQ_del_dec.c:346:18
   108fc:    f0 18             	r0 += r15			  ## NSQ_del_dec.c:346:18
   108fe:    00 e1 70 05       	r0 = r0 + 0x570			  ## NSQ_del_dec.c:346:18
   10902:    30 f1 ff 2f       	r0 = r2 + -0x1  #
   10906:    a0 2f             		 [sp+188] = r0
   10908:    d4 e9 01 01       	[sp+256] = r0
   1090c:    c2 d4             	r10 = 0  #
   1090e:    00 27             		 r0 = [sp+28]
   10910:    a0 33             	[sp+204] = r0
   10912:    d0 e9 d1 60       	d[sp+208] = r7_r6
   10916:    d0 e9 41 01       	d[sp+320] = r1_r0
   1091a:    d4 e9 b0 c0       	r12 = [sp+176]
   1091e:    d4 e9 fd e0       	[sp+252] = r14
   10922:    45 84             	goto 0x508 <silk_NSQ_del_dec_c+0x9E8 : 10e2c >
   10924:    d4 e9 35 a1       	[sp+308] = r10
   10928:    c2 d4             	r10 = 0  #
   1092a:    21 2a             		 r1 = [sp+168]
   1092c:    81 f8 31 04       	if (r1 != 0x2) goto 0x62 <silk_NSQ_del_dec_c+0x54E : 10992 >
   10930:    20 28             	r0 = [sp+160]
   10932:    01 7f             	r1 = [r0+-0x4] 			  ## NSQ_del_dec.c:368:19
   10934:    07 37             	r7 = [sp+92]			  ## NSQ_del_dec.c:368:19
   10936:    54 ed 72 20       	r2 = h[r7+0x2] (s)			  ## NSQ_del_dec.c:368:19
   1093a:    f8 f1 20 31       	r3_r2 = r2 * r1 (s)  #			  ## NSQ_del_dec.c:368:19
   1093e:    01 60             		 r1 = [r0+0x0] 			  ## NSQ_del_dec.c:367:19
   10940:    54 ed 70 40       	r4 = h[r7+0x0] (s)			  ## NSQ_del_dec.c:367:19
   10944:    d0 f1 00 29       	r3_r2 >>= 0x10  #			  ## NSQ_del_dec.c:368:19
   10948:    05 7e             		 r5 = [r0+-0x8] 			  ## NSQ_del_dec.c:369:19
   1094a:    54 ed 74 60       	r6 = h[r7+0x4] (s)			  ## NSQ_del_dec.c:369:19
   1094e:    f8 f1 40 91       	r9_r8 = r4 * r1 (s)  #			  ## NSQ_del_dec.c:367:19
   10952:    04 7d             		 r4 = [r0+-0xc] 			  ## NSQ_del_dec.c:370:19
   10954:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## NSQ_del_dec.c:367:19
   10958:    b4 e0 80 12       	r1 = r8 + r2			  ## NSQ_del_dec.c:367:19
   1095c:    f8 e1 60 35       	r3_r2 = r6 * r5 (s)			  ## NSQ_del_dec.c:369:19
   10960:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## NSQ_del_dec.c:369:19
   10964:    54 ed 76 50       	r5 = h[r7+0x6] (s)			  ## NSQ_del_dec.c:370:19
   10968:    21 d8             	r1 += r2  #			  ## NSQ_del_dec.c:368:19
   1096a:    02 7c             		 r2 = [r0+-0x10] 			  ## NSQ_del_dec.c:371:19
   1096c:    54 ed 78 30       	r3 = h[r7+0x8] (s)			  ## NSQ_del_dec.c:371:19
   10970:    f8 e1 50 54       	r5_r4 = r5 * r4 (s)			  ## NSQ_del_dec.c:370:19
   10974:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## NSQ_del_dec.c:370:19
   10978:    41 18             	r1 += r4			  ## NSQ_del_dec.c:369:19
   1097a:    f8 e1 30 32       	r3_r2 = r3 * r2 (s)			  ## NSQ_del_dec.c:371:19
   1097e:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## NSQ_del_dec.c:371:19
   10982:    21 18             	r1 += r2			  ## NSQ_del_dec.c:370:19
   10984:    11 a1             	r1 = r1 << 0x1			  ## NSQ_del_dec.c:371:19
   10986:    c1 24             	r1 += 0x4			  ## NSQ_del_dec.c:372:19
   10988:    d4 e9 4d 11       	[sp+332] = r1			  ## NSQ_del_dec.c:374:16
   1098c:    c0 24             	r0 += 0x4			  ## NSQ_del_dec.c:374:16
   1098e:    a0 28             	[sp+160] = r0
   10990:    04 83             	goto 0x6 <silk_NSQ_del_dec_c+0x554 : 10998 >
   10992:    40 20             	r0 = 0x0
   10994:    d4 e9 4d 01       	[sp+332] = r0
   10998:    dc d6             	r12 = r13  #
   1099a:    21 2b             		 r1 = [sp+172]
   1099c:    81 fd 22 02       	ifs (r1 < 0x1) goto 0x44 <silk_NSQ_del_dec_c+0x5A0 : 109e4 >
   109a0:    27 2f             	r7 = [sp+188]
   109a2:    70 60             	r0 = [r7+0x0] 			  ## NSQ_del_dec.c:382:16
   109a4:    47 eb 12 00       	{r4, r1} = [-r7]			  ## NSQ_del_dec.c:382:16
   109a8:    10 18             	r0 += r1			  ## NSQ_del_dec.c:382:16
   109aa:    d0 e9 70 20       	r3_r2 = d[sp+112]			  ## NSQ_del_dec.c:382:16
   109ae:    f8 e1 00 12       	r1_r0 = r0 * r2 (s)			  ## NSQ_del_dec.c:382:16
   109b2:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## NSQ_del_dec.c:383:16
   109b6:    d0 e9 78 80       	r9_r8 = d[sp+120]			  ## NSQ_del_dec.c:383:16
   109ba:    f0 e1 40 69       	r6 = r4 * r9			  ## NSQ_del_dec.c:383:16
   109be:    f8 e1 40 28       	r3_r2 = r4 * r8 (u)			  ## NSQ_del_dec.c:383:16
   109c2:    36 18             	r6 += r3			  ## NSQ_del_dec.c:383:16
   109c4:    cd bf             	r5 = r4 >>> 0x1f			  ## NSQ_del_dec.c:383:16
   109c6:    f0 e1 50 48       	r4 = r5 * r8			  ## NSQ_del_dec.c:383:16
   109ca:    63 1d             	r3 = r6 + r4			  ## NSQ_del_dec.c:383:16
   109cc:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## NSQ_del_dec.c:383:16
   109d0:    84 1c             	r4 = r0 + r2			  ## NSQ_del_dec.c:383:16
   109d2:    b8 e0 10 53       	r5 = r1 + r3 + c			  ## NSQ_del_dec.c:383:16
   109d6:    40 a2             	r0 = r4 << 0x2			  ## NSQ_del_dec.c:384:16
   109d8:    d4 e9 4c 11       	r1 = [sp+332]			  ## NSQ_del_dec.c:384:16
   109dc:    b4 e0 12 a0       	r10 = r1 - r0			  ## NSQ_del_dec.c:384:16
   109e0:    c7 24             	r7 += 0x4			  ## NSQ_del_dec.c:385:15
   109e2:    a7 2f             	[sp+188] = r7
   109e4:    21 37             	r1 = [sp+220]			  ## NSQ_del_dec.c:390:8
   109e6:    10 a2             	r0 = r1 << 0x2			  ## NSQ_del_dec.c:390:8
   109e8:    d4 e9 31 01       	[sp+304] = r0			  ## NSQ_del_dec.c:390:8
   109ec:    00 e1 08 a0       	r0 = r10 + 0x8			  ## NSQ_del_dec.c:390:8
   109f0:    d4 e9 2d 01       	[sp+300] = r0
   109f4:    40 20             	r0 = 0x0
   109f6:    d4 e9 80 80       	r8 = [sp+128]
   109fa:    24 33             	r4 = [sp+204]
   109fc:    d4 e9 90 f0       	r15 = [sp+144]
   10a00:    84 89             	goto 0x212 <silk_NSQ_del_dec_c+0x7D0 : 10c14 >
   10a02:    d4 e9 3d 01       	[sp+316] = r0
   10a06:    d7 ec fc 0f       	r0 = [r15+-0x4]			  ## NSQ_del_dec.c:397:17
   10a0a:    c1 ff 35 84 b3 0b 	r1 = 0xbb38435 <RAM_LIMIT_H+0xB998434 : bb38434 >			  ## NSQ_del_dec.c:397:17
   10a10:    10 1b             	r0 *= r1			  ## NSQ_del_dec.c:397:17
   10a12:    c1 ff 6b 63 19 36 	r1 = 0x3619636b <RAM_LIMIT_H+0x35FF636A : 3619636a >			  ## NSQ_del_dec.c:397:17
   10a18:    10 18             	r0 += r1			  ## NSQ_del_dec.c:397:17
   10a1a:    d7 ec fd 0f       	[r15+-0x4] = r0			  ## NSQ_del_dec.c:397:15
   10a1e:    f9 d6             	r9 = r15  #
   10a20:    23 3e             		 r3 = [sp+248]			  ## NSQ_del_dec.c:287:2
   10a22:    c6 14             	r14 = 0			  ## NSQ_del_dec.c:287:2
   10a24:    c7 14             	r15 = 0			  ## NSQ_del_dec.c:287:2
   10a26:    42 16             	r2 = r4			  ## NSQ_del_dec.c:287:2
   10a28:    d4 e9 04 51       	r5 = [sp+260]			  ## NSQ_del_dec.c:287:2
   10a2c:    45 03             	rep 0xa r5 {			  ## NSQ_del_dec.c:287:2
   10a2e:    2e 05             		r6 = [r2++=-0x4] 			  ## NSQ_del_dec.c:287:2
   10a30:    d4 ed 32 70       		r7 = h[r3++=0x2] (s)			  ## NSQ_del_dec.c:287:2
   10a34:    fc e1 60 f7       		r15_r14 += r6 * r7 (s)
                               	}			  ## NSQ_del_dec.c:287:2
   10a38:    d0 e1 0c ec       	r15_r14 >>>= 0xc			  ## NSQ_del_dec.c:287:2
   10a3c:    d4 e9 00 21       	r2 = [sp+256]			  ## NSQ_del_dec.c:445:4
   10a40:    d4 e9 39 41       	[sp+312] = r4			  ## NSQ_del_dec.c:445:4
   10a44:    43 16             	r3 = r4			  ## NSQ_del_dec.c:445:4
   10a46:    d4 e9 24 51       	r5 = [sp+292]			  ## NSQ_del_dec.c:445:4
   10a4a:    d0 e9 40 61       	r7_r6 = d[sp+320]			  ## NSQ_del_dec.c:445:4
   10a4e:    ef ec 51 73       	r7_r6 = h[r5 ++= 0x2]*[r3 ++= -0x4] (s)			  ## NSQ_del_dec.c:445:4
   10a52:    12 03             	rep 0x4 r2 {			  ## NSQ_del_dec.c:445:4
   10a54:    6f ed 51 73       		r7_r6 += h[r5 ++= 0x2]*[r3 ++= -0x4] (s)
                               	}			  ## NSQ_del_dec.c:445:4
   10a58:    d0 e1 00 6d       	r7_r6 >>>= 0x10			  ## NSQ_del_dec.c:445:4
   10a5c:    6c 16             	r12 = r6			  ## NSQ_del_dec.c:445:4
   10a5e:    d0 e9 41 61       	d[sp+320] = r7_r6			  ## NSQ_del_dec.c:462:15
   10a62:    d4 e9 30 01       	r0 = [sp+304]			  ## NSQ_del_dec.c:462:15
   10a66:    b4 e0 00 29       	r2 = r0 + r9			  ## NSQ_del_dec.c:462:15
   10a6a:    d7 ec 28 57       	r5 = [r2+-0x88]			  ## NSQ_del_dec.c:462:15
   10a6e:    d7 ec 98 2f       	r2 = [r9+-0x8]			  ## NSQ_del_dec.c:459:15
   10a72:    d0 e9 18 61       	r7_r6 = d[sp+280]			  ## NSQ_del_dec.c:462:15
   10a76:    f8 e1 50 b6       	r11_r10 = r5 * r6 (s)			  ## NSQ_del_dec.c:462:15
   10a7a:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## NSQ_del_dec.c:463:15
   10a7e:    d0 e9 08 61       	r7_r6 = d[sp+264]			  ## NSQ_del_dec.c:463:15
   10a82:    f0 e1 20 57       	r5 = r2 * r7			  ## NSQ_del_dec.c:463:15
   10a86:    c0 16             	r0 = r12			  ## NSQ_del_dec.c:463:15
   10a88:    f8 e1 20 c6       	r13_r12 = r2 * r6 (u)			  ## NSQ_del_dec.c:463:15
   10a8c:    d5 18             	r5 += r13			  ## NSQ_del_dec.c:463:15
   10a8e:    ab bf             	r3 = r2 >>> 0x1f			  ## NSQ_del_dec.c:459:15
   10a90:    36 1b             	r6 *= r3			  ## NSQ_del_dec.c:463:15
   10a92:    b4 e0 50 d6       	r13 = r5 + r6			  ## NSQ_del_dec.c:463:15
   10a96:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## NSQ_del_dec.c:463:15
   10a9a:    b4 e0 a0 6c       	r6 = r10 + r12			  ## NSQ_del_dec.c:463:15
   10a9e:    b8 e0 b0 7d       	r7 = r11 + r13 + c			  ## NSQ_del_dec.c:463:15
   10aa2:    c0 e1 62 a0       	r10 = r6 << 0x2			  ## NSQ_del_dec.c:464:15
   10aa6:    d4 e9 2c 11       	r1 = [sp+300]			  ## NSQ_del_dec.c:469:11
   10aaa:    d0 e9 51 e1       	d[sp+336] = r15_r14			  ## NSQ_del_dec.c:469:11
   10aae:    b4 e0 10 5e       	r5 = r1 + r14			  ## NSQ_del_dec.c:469:11
   10ab2:    9f 16             	r15 = r9			  ## NSQ_del_dec.c:469:11
   10ab4:    06 a1             	r6 = r0 << 0x1			  ## NSQ_del_dec.c:458:15
   10ab6:    d0 e9 10 c1       	r13_r12 = d[sp+272]			  ## NSQ_del_dec.c:459:15
   10aba:    f8 e1 20 3c       	r3_r2 = r2 * r12 (s)			  ## NSQ_del_dec.c:459:15
   10abe:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## NSQ_del_dec.c:459:15
   10ac2:    62 18             	r2 += r6			  ## NSQ_del_dec.c:459:15
   10ac4:    c0 e1 22 b0       	r11 = r2 << 0x2			  ## NSQ_del_dec.c:460:15
   10ac8:    b4 e0 52 2b       	r2 = r5 - r11			  ## NSQ_del_dec.c:470:11
   10acc:    d4 e9 28 31       	r3 = [sp+296]			  ## NSQ_del_dec.c:473:12
   10ad0:    d4 e9 34 51       	r5 = [sp+308]			  ## NSQ_del_dec.c:473:12
   10ad4:    d8 ec 3a 35       	r3 = [r3+r5<<2]			  ## NSQ_del_dec.c:473:12
   10ad8:    b4 e0 22 2a       	r2 = r2 - r10			  ## NSQ_del_dec.c:471:16
   10adc:    d7 ec 9c df       	r13 = [r9+-0x4]			  ## NSQ_del_dec.c:476:15
   10ae0:    aa a4             	r2 = r2 >>> 0x4			  ## NSQ_del_dec.c:471:20
   10ae2:    b3 1e             	r3 = r3 - r2			  ## NSQ_del_dec.c:473:12
   10ae4:    a2 e0 00 30       	r2 = 0x0 - r3			  ## NSQ_del_dec.c:477:13
   10ae8:    3d ed 00 00       	ifs (r13 >= 0x0) {
   10aec:    32 16             		r2 = r3
                               	}			  ## NSQ_del_dec.c:476:9
   10aee:    45 f0 00 78       	r5 = 0x7800  # <wtgv2_LTP_gain_vq_2+0x8A : 7800 >			  ## NSQ_del_dec.c:479:12
   10af2:    20 3d             		 r0 = [sp+244]			  ## NSQ_del_dec.c:479:12
   10af4:    d4 e9 fc 90       	r9 = [sp+252]			  ## NSQ_del_dec.c:479:12
   10af8:    a2 ee f0 4c       	ifs (r2 <= 0x7800) {			  ## NSQ_del_dec.c:479:12
   10afc:    43 e0 00 84       		r3 = -0x7c00 <RAM_LIMIT_H+0xFFFFFFFFFFE58400 : ffffffffffff8400 >			  ## NSQ_del_dec.c:479:12
   10b00:    34 e4 21 53       		r5 = smax(r2, r3)
                               	}			  ## NSQ_del_dec.c:479:12
   10b04:    9c 16             	r12 = r9
   10b06:    52 1e             	r2 = r5 - r0			  ## NSQ_del_dec.c:482:13
   10b08:    ae aa             	r6 = r2 >>> 0xa			  ## NSQ_del_dec.c:483:12
   10b0a:    86 fd 68 02       	ifs (r6 < 0x1) goto 0xd0 <silk_NSQ_del_dec_c+0x79A : 10bde >			  ## NSQ_del_dec.c:484:8
   10b0e:    62 aa             	r2 = r6 << 0xa			  ## NSQ_del_dec.c:485:15
   10b10:    23 3b             	r3 = [sp+236]			  ## NSQ_del_dec.c:486:15
   10b12:    32 18             	r2 += r3			  ## NSQ_del_dec.c:486:15
   10b14:    03 e1 00 24       	r3 = r2 + 0x400			  ## NSQ_del_dec.c:487:15
   10b18:    29 16             	r9 = r2
   10b1a:    3e 16             	r14 = r3
   10b1c:    27 3c             	r7 = [sp+240]
   10b1e:    73 1b             	r3 *= r7
   10b20:    b4 e0 52 6e       	r6 = r5 - r14			  ## NSQ_del_dec.c:509:14
   10b24:    66 1b             	r6 *= r6			  ## NSQ_del_dec.c:510:14
   10b26:    63 18             	r3 += r6			  ## NSQ_del_dec.c:510:14
   10b28:    be aa             	r6 = r3 >>> 0xa			  ## NSQ_del_dec.c:510:14
   10b2a:    f0 e1 20 37       	r3 = r2 * r7
   10b2e:    b4 e0 52 29       	r2 = r5 - r9			  ## NSQ_del_dec.c:507:14
   10b32:    f0 e1 20 52       	r5 = r2 * r2			  ## NSQ_del_dec.c:508:14
   10b36:    d0 ec f0 20       	r2 = [r15+0x0]			  ## NSQ_del_dec.c:508:14
   10b3a:    53 18             	r3 += r5			  ## NSQ_del_dec.c:508:14
   10b3c:    bb aa             	r3 = r3 >>> 0xa			  ## NSQ_del_dec.c:508:14
   10b3e:    06 ed 05 30       	ifs (r3 >= r6) goto 0xa <silk_NSQ_del_dec_c+0x708 : 10b4c >
   10b42:    37 16             	r7 = r3			  ## NSQ_del_dec.c:512:8
   10b44:    63 16             	r3 = r6			  ## NSQ_del_dec.c:512:8
   10b46:    95 16             	r5 = r9			  ## NSQ_del_dec.c:512:8
   10b48:    e9 16             	r9 = r14			  ## NSQ_del_dec.c:512:8
   10b4a:    04 82             	goto 0x4 <silk_NSQ_del_dec_c+0x70C : 10b50 >
   10b4c:    67 16             	r7 = r6			  ## NSQ_del_dec.c:512:8
   10b4e:    e5 16             	r5 = r14			  ## NSQ_del_dec.c:512:8
   10b50:    f6 1c             	r6 = r7 + r2
   10b52:    d7 ec 89 6d       	[r8+-0x28] = r6
   10b56:    32 18             	r2 += r3
   10b58:    d7 ec 81 2f       	[r8+-0x10] = r2
   10b5c:    d7 ec 85 5d       	[r8+-0x2c] = r5
   10b60:    53 a4             	r3 = r5 << 0x4			  ## NSQ_del_dec.c:526:14
   10b62:    a2 e0 00 30       	r2 = 0x0 - r3			  ## NSQ_del_dec.c:528:15
   10b66:    d7 ec 8d 9e       	[r8+-0x14] = r9
   10b6a:    ce 16             	r14 = r12
   10b6c:    3d ed 00 00       	ifs (r13 >= 0x0) {
   10b70:    32 16             		r2 = r3
                               	}			  ## NSQ_del_dec.c:527:9
   10b72:    d4 e9 4c 01       	r0 = [sp+332]			  ## NSQ_del_dec.c:532:18
   10b76:    02 18             	r2 += r0			  ## NSQ_del_dec.c:532:18
   10b78:    d0 e9 50 01       	r1_r0 = d[sp+336]			  ## NSQ_del_dec.c:533:18
   10b7c:    25 1c             	r5 = r2 + r0			  ## NSQ_del_dec.c:533:18
   10b7e:    bc 16             	r12 = r11
   10b80:    b4 e0 52 3b       	r3 = r5 - r11			  ## NSQ_del_dec.c:536:30
   10b84:    b4 e0 32 6a       	r6 = r3 - r10			  ## NSQ_del_dec.c:537:30
   10b88:    d7 ec 85 6e       	[r8+-0x1c] = r6			  ## NSQ_del_dec.c:537:28
   10b8c:    d7 ec 81 3e       	[r8+-0x20] = r3			  ## NSQ_del_dec.c:538:28
   10b90:    d7 ec 89 2e       	[r8+-0x18] = r2			  ## NSQ_del_dec.c:539:28
   10b94:    c0 e1 94 30       	r3 = r9 << 0x4			  ## NSQ_del_dec.c:544:14
   10b98:    a2 e0 00 30       	r2 = 0x0 - r3			  ## NSQ_del_dec.c:546:15
   10b9c:    d7 ec 8d 5d       	[r8+-0x24] = r5			  ## NSQ_del_dec.c:540:28
   10ba0:    3d ed 00 00       	ifs (r13 >= 0x0) {			  ## NSQ_del_dec.c:540:28
   10ba4:    32 16             		r2 = r3
                               	}			  ## NSQ_del_dec.c:545:9
   10ba6:    d4 e9 4c 01       	r0 = [sp+332]			  ## NSQ_del_dec.c:550:18
   10baa:    02 18             	r2 += r0			  ## NSQ_del_dec.c:550:18
   10bac:    d0 e9 50 01       	r1_r0 = d[sp+336]			  ## NSQ_del_dec.c:551:18
   10bb0:    20 18             	r0 += r2			  ## NSQ_del_dec.c:551:18
   10bb2:    b4 e0 02 1b       	r1 = r0 - r11			  ## NSQ_del_dec.c:554:30
   10bb6:    b4 e0 12 3a       	r3 = r1 - r10			  ## NSQ_del_dec.c:555:30
   10bba:    68 eb 0a 00       	[-r8] = {r3, r1}			  ## NSQ_del_dec.c:555:28
   10bbe:    d0 ec 81 20       	[r8+0x0] = r2			  ## NSQ_del_dec.c:557:28
   10bc2:    d7 ec 85 0f       	[r8+-0xc] = r0			  ## NSQ_del_dec.c:558:28
   10bc6:    08 e1 30 80       	r8 = r8 + 0x30			  ## NSQ_del_dec.c:390:3
   10bca:    d4 e9 38 41       	r4 = [sp+312]			  ## NSQ_del_dec.c:390:3
   10bce:    04 e1 50 44       	r4 = r4 + 0x450			  ## NSQ_del_dec.c:390:3
   10bd2:    0f e1 50 f4       	r15 = r15 + 0x450			  ## NSQ_del_dec.c:390:3
   10bd6:    d4 e9 3c 01       	r0 = [sp+316]			  ## NSQ_del_dec.c:390:3
   10bda:    c0 21             	r0 += 0x1			  ## NSQ_del_dec.c:390:44
   10bdc:    04 9b             	goto 0x36 <silk_NSQ_del_dec_c+0x7D0 : 10c14 >
   10bde:    d4 e9 e8 e0       	r14 = [sp+232]
   10be2:    e3 16             	r3 = r14
   10be4:    02 16             	r2 = r0
   10be6:    09 16             	r9 = r0
   10be8:    46 59             	if (r6 == 0) goto -0xce <silk_NSQ_del_dec_c+0x6D8 : 10b1c >
   10bea:    03 d6             	r3 = r0  #
   10bec:    22 39             		 r2 = [sp+228]
   10bee:    d4 e9 e0 90       	r9 = [sp+224]
   10bf2:    0e 16             	r14 = r0
   10bf4:    76 f8 92 ff       	if (r6 == -0x1) goto -0xdc <silk_NSQ_del_dec_c+0x6D8 : 10b1c >
   10bf8:    52 30             	r2 = 0x50			  ## NSQ_del_dec.c:501:15
   10bfa:    a2 e1 58 65       	r2 <= insert(r6, p:0xa, l:0x16)			  ## NSQ_del_dec.c:501:15
   10bfe:    b4 e0 20 90       	r9 = r2 + r0			  ## NSQ_del_dec.c:502:15
   10c02:    42 e0 00 fc       	r2 = -0x400 <RAM_LIMIT_H+0xFFFFFFFFFFE5FC00 : fffffffffffffc00 >			  ## NSQ_del_dec.c:505:15
   10c06:    b4 e0 22 39       	r3 = r2 - r9			  ## NSQ_del_dec.c:505:15
   10c0a:    a2 e0 00 90       	r2 = 0x0 - r9			  ## NSQ_del_dec.c:504:15
   10c0e:    0e e1 00 94       	r14 = r9 + 0x400			  ## NSQ_del_dec.c:503:15
   10c12:    c7 84             	goto -0xf8 <silk_NSQ_del_dec_c+0x6D8 : 10b1c >
   10c14:    4b ff 00 0e f4 fe 	ifs (r0 < r14) goto -0x218 <silk_NSQ_del_dec_c+0x5BE : 10a02 >
   10c1a:    cd d6             	r13 = r12  #
   10c1c:    20 32             		 r0 = [sp+200]			  ## NSQ_del_dec.c:565:39
   10c1e:    03 61             	r3 = [r0+0x4] 			  ## NSQ_del_dec.c:565:39
   10c20:    20 37             	r0 = [sp+220]			  ## NSQ_del_dec.c:561:36
   10c22:    c0 3f             	r0 += 0x1f			  ## NSQ_del_dec.c:561:36
   10c24:    61 e1 1f 00       	r1 = r0 & 0x1F			  ## NSQ_del_dec.c:561:42
   10c28:    a1 37             	[sp+220] = r1
   10c2a:    41 21             	r1 = 0x1
   10c2c:    44 20             	r4 = 0x0
   10c2e:    22 21             	r2 = [sp+132]
   10c30:    d4 e9 9c f0       	r15 = [sp+156]
   10c34:    d4 e9 b0 c0       	r12 = [sp+176]
   10c38:    c7 ff ff ff ff 07 	r7 = 0x7ffffff <RAM_LIMIT_H+0x7E5FFFE : 7fffffe >
   10c3e:    04 8a             	goto 0x14 <silk_NSQ_del_dec_c+0x810 : 10c54 >
   10c40:    d8 ec 20 53       	r5 = [r2++=0x30]			  ## NSQ_del_dec.c:568:32
   10c44:    16 16             	r6 = r1			  ## NSQ_del_dec.c:568:8
   10c46:    15 ed 00 43       	ifs (r5 >= r3) {			  ## NSQ_del_dec.c:568:8
   10c4a:    35 16             		r5 = r3			  ## NSQ_del_dec.c:568:8
   10c4c:    46 16             		r6 = r4
                               	}			  ## NSQ_del_dec.c:568:8
   10c4e:    c1 21             	r1 += 0x1			  ## NSQ_del_dec.c:567:44
   10c50:    53 16             	r3 = r5
   10c52:    64 16             	r4 = r6
   10c54:    8e ed f4 11       	ifs (r1 < r14) goto -0x18 <silk_NSQ_del_dec_c+0x7FC : 10c40 >
   10c58:    e8 f1 8a 4e       	r8 = r4 * 0x450  #			  ## NSQ_del_dec.c:575:23
   10c5c:    23 22             		 r3 = [sp+136]			  ## NSQ_del_dec.c:575:23
   10c5e:    b4 e0 f0 18       	r1 = r15 + r8			  ## NSQ_del_dec.c:575:23
   10c62:    42 e0 b0 43       	r2 = 0x43b0 <strcpy+0x1C : 43b0 >			  ## NSQ_del_dec.c:575:23
   10c66:    21 d8             	r1 += r2  #			  ## NSQ_del_dec.c:575:23
   10c68:    22 25             		 r2 = [sp+148]			  ## NSQ_del_dec.c:576:8
   10c6a:    c0 18             	r0 += r12			  ## NSQ_del_dec.c:562:36
   10c6c:    69 e1 1f 00       	r9 = r0 & 0x1F			  ## NSQ_del_dec.c:562:54
   10c70:    d8 ec 1a 09       	r0 = [r1+r9<<2]			  ## NSQ_del_dec.c:575:23
   10c74:    c0 e1 92 10       	r1 = r9 << 0x2			  ## NSQ_del_dec.c:575:23
   10c78:    21 18             	r1 += r2			  ## NSQ_del_dec.c:576:8
   10c7a:    42 20             	r2 = 0x0			  ## NSQ_del_dec.c:576:8
   10c7c:    04 8b             	goto 0x16 <silk_NSQ_del_dec_c+0x850 : 10c94 >			  ## NSQ_del_dec.c:576:8
   10c7e:    14 60             	r4 = [r1+0x0] 			  ## NSQ_del_dec.c:577:8
   10c80:    94 e8 00 40       	if (r4 != r0) {
   10c84:    68 e8 e8 37       		[r3+-0x18] += r7			  ## NSQ_del_dec.c:578:36
   10c88:    68 e8 00 37       		[r3+0x0] += r7
                               	}			  ## NSQ_del_dec.c:579:36
   10c8c:    cb 30             	r3 += 0x30			  ## NSQ_del_dec.c:576:3
   10c8e:    01 e1 50 14       	r1 = r1 + 0x450			  ## NSQ_del_dec.c:576:3
   10c92:    c2 21             	r2 += 0x1			  ## NSQ_del_dec.c:576:44
   10c94:    8e ed f3 21       	ifs (r2 < r14) goto -0x1a <silk_NSQ_del_dec_c+0x83A : 10c7e >
   10c98:    c2 d4             	r10 = 0  #
   10c9a:    20 32             		 r0 = [sp+200]
   10c9c:    01 67             	r1 = [r0+0x1c] 			  ## NSQ_del_dec.c:586:40
   10c9e:    02 61             	r2 = [r0+0x4] 			  ## NSQ_del_dec.c:585:40
   10ca0:    45 21             	r5 = 0x1
   10ca2:    46 20             	r6 = 0x0
   10ca4:    27 23             	r7 = [sp+140]
   10ca6:    04 92             	goto 0x24 <silk_NSQ_del_dec_c+0x888 : 10ccc >
   10ca8:    50 d6             	r0 = r5  #			  ## NSQ_del_dec.c:591:8
   10caa:    73 7a             		 r3 = [r7+-0x18] 			  ## NSQ_del_dec.c:591:32
   10cac:    93 ee 00 42       	ifs (r3 <= r2) {
   10cb0:    23 16             		r3 = r2			  ## NSQ_del_dec.c:591:8
   10cb2:    60 16             		r0 = r6
                               	}			  ## NSQ_del_dec.c:591:8
   10cb4:    d8 ec 70 23       	r2 = [r7++=0x30]			  ## NSQ_del_dec.c:596:32
   10cb8:    54 16             	r4 = r5			  ## NSQ_del_dec.c:596:8
   10cba:    12 ed 00 41       	ifs (r2 >= r1) {
   10cbe:    12 16             		r2 = r1			  ## NSQ_del_dec.c:596:8
   10cc0:    a4 16             		r4 = r10
                               	}			  ## NSQ_del_dec.c:596:8
   10cc2:    c5 21             	r5 += 0x1			  ## NSQ_del_dec.c:589:44
   10cc4:    21 16             	r1 = r2
   10cc6:    32 16             	r2 = r3
   10cc8:    06 16             	r6 = r0
   10cca:    4a 16             	r10 = r4
   10ccc:    8e ed ec 51       	ifs (r5 < r14) goto -0x28 <silk_NSQ_del_dec_c+0x864 : 10ca8 >
   10cd0:    02 ed 21 10       	ifs (r1 >= r2) goto 0x42 <silk_NSQ_del_dec_c+0x8D2 : 10d16 >
   10cd4:    e0 f1 8a ae       	r0 = r10 * 0x450  #			  ## NSQ_del_dec.c:604:104
   10cd8:    03 38             		 r3 = [sp+96]			  ## NSQ_del_dec.c:604:104
   10cda:    30 18             	r0 += r3			  ## NSQ_del_dec.c:604:104
   10cdc:    d4 e9 34 11       	r1 = [sp+308]			  ## NSQ_del_dec.c:604:59
   10ce0:    11 a2             	r1 = r1 << 0x2			  ## NSQ_del_dec.c:604:59
   10ce2:    10 18             	r0 += r1			  ## NSQ_del_dec.c:604:104
   10ce4:    e2 e1 8a 6e       	r2 = r6 * 0x450			  ## NSQ_del_dec.c:604:59
   10ce8:    32 18             	r2 += r3			  ## NSQ_del_dec.c:604:59
   10cea:    12 18             	r2 += r1			  ## NSQ_del_dec.c:604:59
   10cec:    a1 e0 8a 1e       	r1 = 0x450 - r1			  ## NSQ_del_dec.c:604:139
   10cf0:    91 a2             	r1 = r1 >> 0x2			  ## NSQ_del_dec.c:604:165
   10cf2:    11 03             	rep 0x4 r1 {			  ## opus_demo.c:186:2
   10cf4:    03 05             		r3 = [r0++=0x4] 			  ## opus_demo.c:186:2
   10cf6:    a3 05             		[r2++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   10cf8:    f1 5c             	if (r1 != 0) goto -0x8 <silk_NSQ_del_dec_c+0x8AE : 10cf2 >			  ## opus_demo.c:186:2
   10cfa:    e0 e1 30 60       	r0 = r6 * 0x30			  ## NSQ_del_dec.c:605:18
   10cfe:    f8 e8 5c 11       	r1 = sp + 348			  ## NSQ_del_dec.c:605:18
   10d02:    10 18             	r0 += r1			  ## NSQ_del_dec.c:605:18
   10d04:    e2 e1 30 a0       	r2 = r10 * 0x30			  ## NSQ_del_dec.c:605:59
   10d08:    21 18             	r1 += r2			  ## NSQ_del_dec.c:605:59
   10d0a:    c1 38             	r1 += 0x18			  ## NSQ_del_dec.c:605:59
   10d0c:    42 26             	r2 = 0x6			  ## opus_demo.c:186:2
   10d0e:    12 03             	rep 0x4 r2 {			  ## opus_demo.c:186:2
   10d10:    13 05             		r3 = [r1++=0x4] 			  ## opus_demo.c:186:2
   10d12:    83 05             		[r0++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   10d14:    f2 5c             	if (r2 != 0) goto -0x8 <silk_NSQ_del_dec_c+0x8CA : 10d0e >			  ## opus_demo.c:186:2
   10d16:    20 2e             	r0 = [sp+184]			  ## NSQ_del_dec.c:610:17
   10d18:    d4 e9 34 a1       	r10 = [sp+308]			  ## NSQ_del_dec.c:610:17
   10d1c:    00 fe 02 00       	ifs (r0 > 0x0) goto 0x4 <silk_NSQ_del_dec_c+0x8E0 : 10d24 >			  ## NSQ_del_dec.c:610:17
   10d20:    8c ed 3a a0       	ifs (r10 < r12) goto 0x74 <silk_NSQ_del_dec_c+0x954 : 10d98 >
   10d24:    06 36             	r6 = [sp+88]
   10d26:    b4 f0 60 08       	r0 = r6 + r8  #			  ## NSQ_del_dec.c:612:46
   10d2a:    03 3b             		 r3 = [sp+108]			  ## NSQ_del_dec.c:612:33
   10d2c:    e1 e0 0e 0d       	r1 = r0 + 0x2380			  ## NSQ_del_dec.c:612:46
   10d30:    d8 ec 1a 19       	r1 = [r1+r9<<2]			  ## NSQ_del_dec.c:612:46
   10d34:    b4 e0 a2 2c       	r2 = r10 - r12			  ## NSQ_del_dec.c:612:15
   10d38:    01 e1 00 12       	r1 = r1 + 0x200			  ## NSQ_del_dec.c:612:46
   10d3c:    91 aa             	r1 = r1 >> 0xa			  ## NSQ_del_dec.c:612:46
   10d3e:    d8 ee 31 12       	b[r3+r2] = r1			  ## NSQ_del_dec.c:612:33
   10d42:    e1 f0 10 0d       	r1 = r0 + 0x2400  #			  ## NSQ_del_dec.c:614:9
   10d46:    23 30             		 r3 = [sp+192]			  ## NSQ_del_dec.c:614:9
   10d48:    d8 ec 1a 19       	r1 = [r1+r9<<2]			  ## NSQ_del_dec.c:614:9
   10d4c:    d8 ec 3a 39       	r3 = [r3+r9<<2]			  ## NSQ_del_dec.c:614:9
   10d50:    f8 e1 30 51       	r5_r4 = r3 * r1 (s)			  ## NSQ_del_dec.c:614:9
   10d54:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## NSQ_del_dec.c:614:9
   10d58:    01 e1 80 40       	r1 = r4 + 0x80			  ## NSQ_del_dec.c:614:9
   10d5c:    99 a8             	r1 = r1 >>> 0x8			  ## NSQ_del_dec.c:614:9
   10d5e:    78 e0 01 31       	r3 = sat16(r1) (s)			  ## NSQ_del_dec.c:615:4
   10d62:    01 3a             	r1 = [sp+104]			  ## NSQ_del_dec.c:616:26
   10d64:    d8 ed 19 32       	h[r1+r2<<1] = r3			  ## NSQ_del_dec.c:616:26
   10d68:    e2 f0 14 0d       	r2 = r0 + 0x2500  #			  ## NSQ_del_dec.c:617:65
   10d6c:    24 31             		 r4 = [sp+196]			  ## NSQ_del_dec.c:617:65
   10d6e:    41 63             	r1 = [r4+0xc] 			  ## NSQ_del_dec.c:617:28
   10d70:    d8 ec 2a 29       	r2 = [r2+r9<<2]			  ## NSQ_del_dec.c:617:65
   10d74:    b4 f0 12 1c       	r1 = r1 - r12  #			  ## NSQ_del_dec.c:617:45
   10d78:    03 39             		 r3 = [sp+100]			  ## NSQ_del_dec.c:617:4
   10d7a:    03 e1 00 35       	r3 = r3 + 0x500			  ## NSQ_del_dec.c:617:4
   10d7e:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## NSQ_del_dec.c:617:63
   10d82:    e0 f0 12 0d       	r0 = r0 + 0x2480  #			  ## NSQ_del_dec.c:618:65
   10d86:    41 62             		 r1 = [r4+0x8] 			  ## NSQ_del_dec.c:618:28
   10d88:    d8 ec 0a 09       	r0 = [r0+r9<<2]			  ## NSQ_del_dec.c:618:65
   10d8c:    b4 e0 12 1c       	r1 = r1 - r12			  ## NSQ_del_dec.c:618:45
   10d90:    12 e1 40 67       	r2 = r6 + 0x1740			  ## NSQ_del_dec.c:618:4
   10d94:    d8 ec 2b 01       	[r2+r1<<2] = r0			  ## NSQ_del_dec.c:618:63
   10d98:    20 31             	r0 = [sp+196]
   10d9a:    c3 eb 01 00       	[r0+0xc] += 0x1			  ## NSQ_del_dec.c:620:24
   10d9e:    c2 eb 01 00       	[r0+0x8] += 0x1			  ## NSQ_del_dec.c:621:20
   10da2:    20 37             	r0 = [sp+220]			  ## NSQ_del_dec.c:624:8
   10da4:    00 a2             	r0 = r0 << 0x2			  ## NSQ_del_dec.c:624:8
   10da6:    d4 e9 98 90       	r9 = [sp+152]			  ## NSQ_del_dec.c:624:8
   10daa:    b4 f0 90 80       	r8 = r9 + r0  #			  ## NSQ_del_dec.c:624:8
   10dae:    24 32             		 r4 = [sp+200]			  ## NSQ_del_dec.c:624:8
   10db0:    41 20             	r1 = 0x0			  ## NSQ_del_dec.c:624:8
   10db2:    d0 e9 d0 20       	r3_r2 = d[sp+208]			  ## NSQ_del_dec.c:624:8
   10db6:    35 16             	r5 = r3			  ## NSQ_del_dec.c:624:8
   10db8:    47 20             	r7 = 0x0			  ## NSQ_del_dec.c:624:8
   10dba:    14 87             	goto 0x4e <silk_NSQ_del_dec_c+0x9C6 : 10e0a >			  ## NSQ_del_dec.c:624:8
   10dbc:    b4 f0 90 31       	r3 = r9 + r1  #			  ## NSQ_del_dec.c:627:47
   10dc0:    42 63             		 r2 = [r4+0xc] 			  ## NSQ_del_dec.c:627:55
   10dc2:    d1 ec 33 28       	[++r3=0x180] = r2			  ## NSQ_del_dec.c:627:47
   10dc6:    b4 f0 90 65       	r6 = r9 + r5  #			  ## NSQ_del_dec.c:628:47
   10dca:    42 62             		 r2 = [r4+0x8] 			  ## NSQ_del_dec.c:628:55
   10dcc:    d5 ec 61 2c       	[r6+-0x240] = r2			  ## NSQ_del_dec.c:628:47
   10dd0:    86 16             	r6 = r8			  ## NSQ_del_dec.c:629:47
   10dd2:    dc ec 63 21       	[++r6=r1] = r2			  ## NSQ_del_dec.c:629:47
   10dd6:    42 60             	r2 = [r4+0x0] 			  ## NSQ_del_dec.c:630:55
   10dd8:    d7 ec 61 28       	[r6+-0x80] = r2			  ## NSQ_del_dec.c:630:47
   10ddc:    40 65             	r0 = [r4+0x14] 			  ## NSQ_del_dec.c:631:49
   10dde:    00 a1             	r0 = r0 << 0x1			  ## NSQ_del_dec.c:631:49
   10de0:    d0 ec 61 08       	[r6+0x80] = r0			  ## NSQ_del_dec.c:631:47
   10de4:    02 f1 00 22       	r2 = r2 + 0x200  #			  ## NSQ_del_dec.c:633:49
   10de8:    40 64             		 r0 = [r4+0x10] 			  ## NSQ_del_dec.c:632:55
   10dea:    d1 ec 61 00       	[r6+0x100] = r0			  ## NSQ_del_dec.c:632:47
   10dee:    30 61             	r0 = [r3+0x4] 			  ## NSQ_del_dec.c:633:49
   10df0:    aa aa             	r2 = r2 >>> 0xa			  ## NSQ_del_dec.c:633:49
   10df2:    20 18             	r0 += r2			  ## NSQ_del_dec.c:633:49
   10df4:    b0 61             	[r3+0x4] = r0			  ## NSQ_del_dec.c:633:47
   10df6:    d7 ec 61 00       	[r6+-0x100] = r0			  ## NSQ_del_dec.c:634:47
   10dfa:    40 61             	r0 = [r4+0x4] 			  ## NSQ_del_dec.c:635:55
   10dfc:    cc 30             	r4 += 0x30			  ## NSQ_del_dec.c:624:3
   10dfe:    05 f1 50 54       	r5 = r5 + 0x450  #			  ## NSQ_del_dec.c:624:3
   10e02:    b0 62             		 [r3+0x8] = r0			  ## NSQ_del_dec.c:635:47
   10e04:    01 e1 50 14       	r1 = r1 + 0x450			  ## NSQ_del_dec.c:624:3
   10e08:    c7 21             	r7 += 0x1			  ## NSQ_del_dec.c:624:44
   10e0a:    8e ed d7 71       	ifs (r7 < r14) goto -0x52 <silk_NSQ_del_dec_c+0x978 : 10dbc >
   10e0e:    20 30             	r0 = [sp+192]			  ## NSQ_del_dec.c:637:50
   10e10:    21 37             	r1 = [sp+220]			  ## NSQ_del_dec.c:637:50
   10e12:    22 29             	r2 = [sp+164]			  ## NSQ_del_dec.c:637:50
   10e14:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## NSQ_del_dec.c:637:50
   10e18:    d0 e9 d0 00       	r1_r0 = d[sp+208]			  ## NSQ_del_dec.c:350:2
   10e1c:    c1 24             	r1 += 0x4			  ## NSQ_del_dec.c:350:2
   10e1e:    d0 e9 d1 00       	d[sp+208] = r1_r0			  ## NSQ_del_dec.c:350:2
   10e22:    20 33             	r0 = [sp+204]			  ## NSQ_del_dec.c:350:2
   10e24:    c0 24             	r0 += 0x4			  ## NSQ_del_dec.c:350:2
   10e26:    0a f1 01 a0       	r10 = r10 + 0x1  #			  ## NSQ_del_dec.c:350:27
   10e2a:    a0 33             		 [sp+204] = r0			  ## NSQ_del_dec.c:350:27
   10e2c:    20 2d             	r0 = [sp+180]			  ## NSQ_del_dec.c:350:2
   10e2e:    4b ff 00 a0 78 fd 	ifs (r10 < r0) goto -0x510 <silk_NSQ_del_dec_c+0x4E0 : 10924 >			  ## NSQ_del_dec.c:350:2
   10e34:    20 2d             	r0 = [sp+180]			  ## NSQ_del_dec.c:334:21
   10e36:    00 a2             	r0 = r0 << 0x2			  ## NSQ_del_dec.c:334:21
   10e38:    41 20             	r1 = 0x0			  ## NSQ_del_dec.c:334:21
   10e3a:    02 38             	r2 = [sp+96]			  ## NSQ_del_dec.c:334:21
   10e3c:    04 8a             	goto 0x14 <silk_NSQ_del_dec_c+0xA0E : 10e52 >			  ## NSQ_del_dec.c:334:21
   10e3e:    23 1c             	r3 = r2 + r0			  ## opus_demo.c:186:2
   10e40:    24 16             	r4 = r2			  ## opus_demo.c:186:2
   10e42:    4d 20             	r5 = 0x20			  ## opus_demo.c:186:2
   10e44:    15 03             	rep 0x4 r5 {			  ## opus_demo.c:186:2
   10e46:    36 05             		r6 = [r3++=0x4] 			  ## opus_demo.c:186:2
   10e48:    c6 05             		[r4++=0x4] = r6
                               	}			  ## opus_demo.c:186:2
   10e4a:    f5 5c             	if (r5 != 0) goto -0x8 <silk_NSQ_del_dec_c+0xA00 : 10e44 >			  ## opus_demo.c:186:2
   10e4c:    02 e1 50 24       	r2 = r2 + 0x450			  ## NSQ_del_dec.c:662:2
   10e50:    c1 21             	r1 += 0x1			  ## NSQ_del_dec.c:662:43
   10e52:    8e ed f4 11       	ifs (r1 < r14) goto -0x18 <silk_NSQ_del_dec_c+0x9FA : 10e3e >
   10e56:    02 35             	r2 = [sp+84]
   10e58:    20 62             	r0 = [r2+0x8] 			  ## NSQ_del_dec.c:183:21
   10e5a:    01 3b             	r1 = [sp+108]			  ## NSQ_del_dec.c:184:10
   10e5c:    01 18             	r1 += r0			  ## NSQ_del_dec.c:184:10
   10e5e:    81 3b             	[sp+108] = r1			  ## NSQ_del_dec.c:185:10
   10e60:    01 a1             	r1 = r0 << 0x1			  ## NSQ_del_dec.c:185:10
   10e62:    03 3a             	r3 = [sp+104]			  ## NSQ_del_dec.c:185:10
   10e64:    13 18             	r3 += r1			  ## NSQ_del_dec.c:185:10
   10e66:    83 3a             	[sp+104] = r3			  ## NSQ_del_dec.c:183:10
   10e68:    00 a2             	r0 = r0 << 0x2			  ## NSQ_del_dec.c:183:10
   10e6a:    01 33             	r1 = [sp+76]			  ## NSQ_del_dec.c:183:10
   10e6c:    01 18             	r1 += r0			  ## NSQ_del_dec.c:183:10
   10e6e:    81 33             	[sp+76] = r1			  ## NSQ_del_dec.c:180:71
   10e70:    23 2e             	r3 = [sp+184]			  ## NSQ_del_dec.c:180:71
   10e72:    c3 21             	r3 += 0x1			  ## NSQ_del_dec.c:180:71
   10e74:    21 60             	r1 = [r2+0x0] 			  ## NSQ_del_dec.c:146:26
   10e76:    4b ff 00 31 d5 fb 	ifs (r3 < r1) goto -0x856 <silk_NSQ_del_dec_c+0x1E2 : 10626 >			  ## NSQ_del_dec.c:146:26
   10e7c:    23 16             	r3 = r2
   10e7e:    40 e0 8e 11       	r0 = 0x118e <WOLASynthesisFilter_Float_M128_m4_r1+0x18A : 118e >			  ## NSQ_del_dec.c:189:28
   10e82:    d8 ec fa 40       	r4 = [r15+r0<<2]			  ## NSQ_del_dec.c:189:28
   10e86:    42 f0 88 4a       	r2 = 0x4a88  # <usb_slave_mode+0x280 : 4a88 >			  ## NSQ_del_dec.c:191:7
   10e8a:    30 68             		 r0 = [r3+0x20] 			  ## NSQ_del_dec.c:191:7
   10e8c:    f2 18             	r2 += r15			  ## NSQ_del_dec.c:191:7
   10e8e:    43 21             	r3 = 0x1			  ## NSQ_del_dec.c:191:7
   10e90:    45 20             	r5 = 0x0			  ## NSQ_del_dec.c:191:7
   10e92:    04 89             	goto 0x12 <silk_NSQ_del_dec_c+0xA62 : 10ea6 >			  ## NSQ_del_dec.c:191:7
   10e94:    37 d6             	r7 = r3  #			  ## NSQ_del_dec.c:192:7
   10e96:    26 60             		 r6 = [r2+0x0] 			  ## NSQ_del_dec.c:192:21
   10e98:    16 ed 00 04       	ifs (r6 >= r4) {			  ## NSQ_del_dec.c:192:21
   10e9c:    46 15             		r7_r6 = r5_r4
                               	}			  ## NSQ_del_dec.c:192:7
   10e9e:    02 e1 50 24       	r2 = r2 + 0x450			  ## NSQ_del_dec.c:191:2
   10ea2:    c3 21             	r3 += 0x1			  ## NSQ_del_dec.c:191:51
   10ea4:    64 15             	r5_r4 = r7_r6
   10ea6:    80 ed f5 31       	ifs (r3 < r0) goto -0x16 <silk_NSQ_del_dec_c+0xA50 : 10e94 >
   10eaa:    e0 f1 8a 5e       	r0 = r5 * 0x450  #			  ## NSQ_del_dec.c:200:26
   10eae:    03 32             		 r3 = [sp+72]			  ## NSQ_del_dec.c:200:18
   10eb0:    f0 18             	r0 += r15			  ## NSQ_del_dec.c:200:26
   10eb2:    42 e0 8f 11       	r2 = 0x118f <WOLASynthesisFilter_Float_M128_m4_r1+0x18A : 118e >			  ## NSQ_del_dec.c:200:26
   10eb6:    d8 ec 0a 22       	r2 = [r0+r2<<2]			  ## NSQ_del_dec.c:200:26
   10eba:    48 f0 30 44       	r8 = 0x4430  # <strstr+0x2 : 4430 >			  ## NSQ_del_dec.c:200:26
   10ebe:    ba 47             		 b[r3+0x7] = r2			  ## NSQ_del_dec.c:200:18
   10ec0:    49 f0 b0 44       	r9 = 0x44b0  # <nvram_boot_state+0x40 : 44b0 >			  ## NSQ_del_dec.c:200:18
   10ec4:    02 34             		 r2 = [sp+80]			  ## NSQ_del_dec.c:202:13
   10ec6:    fa 3c             	r2 += -0x4			  ## NSQ_del_dec.c:202:13
   10ec8:    d8 ec 2a 11       	r1 = [r2+r1<<2]			  ## NSQ_del_dec.c:202:13
   10ecc:    c0 f1 16 ec       	r14 = r1 >>> 0x6  #			  ## NSQ_del_dec.c:202:13
   10ed0:    01 3b             		 r1 = [sp+108]			  ## NSQ_del_dec.c:203:7
   10ed2:    c0 f1 ef fd       	r15 = r14 >>> 0x1f  #
   10ed6:    02 35             		 r2 = [sp+84]
   10ed8:    b4 f0 12 bc       	r11 = r1 - r12  #			  ## NSQ_del_dec.c:203:7
   10edc:    21 37             		 r1 = [sp+220]			  ## NSQ_del_dec.c:201:32
   10ede:    b4 f0 10 4c       	r4 = r1 + r12  #			  ## NSQ_del_dec.c:201:32
   10ee2:    01 3a             		 r1 = [sp+104]			  ## NSQ_del_dec.c:203:7
   10ee4:    c0 e1 c1 50       	r5 = r12 << 0x1			  ## NSQ_del_dec.c:203:7
   10ee8:    1d 1f             	r5 = r1 - r5			  ## NSQ_del_dec.c:203:7
   10eea:    a6 e0 00 c0       	r6 = 0x0 - r12			  ## NSQ_del_dec.c:203:7
   10eee:    47 20             	r7 = 0x0			  ## NSQ_del_dec.c:203:7
   10ef0:    4a e0 b0 45       	r10 = 0x45b0 <mask_init+0x20 : 45b0 >
   10ef4:    14 8c             	goto 0x58 <silk_NSQ_del_dec_c+0xB0A : 10f4e >
   10ef6:    b4 e0 00 18       	r1 = r0 + r8			  ## NSQ_del_dec.c:206:46
   10efa:    c4 3f             	r4 += 0x1f			  ## NSQ_del_dec.c:205:37
   10efc:    64 e1 1f 40       	r4 = r4 & 0x1F			  ## NSQ_del_dec.c:205:43
   10f00:    d8 ec 1a 14       	r1 = [r1+r4<<2]			  ## NSQ_del_dec.c:206:46
   10f04:    01 e1 00 12       	r1 = r1 + 0x200			  ## NSQ_del_dec.c:206:46
   10f08:    91 aa             	r1 = r1 >> 0xa			  ## NSQ_del_dec.c:206:46
   10f0a:    d8 ee b1 17       	b[r11+r7] = r1			  ## NSQ_del_dec.c:206:33
   10f0e:    b4 e0 00 19       	r1 = r0 + r9			  ## NSQ_del_dec.c:208:8
   10f12:    d8 ec 1a 14       	r1 = [r1+r4<<2]			  ## NSQ_del_dec.c:208:8
   10f16:    f8 e1 10 de       	r13_r12 = r1 * r14 (s)			  ## NSQ_del_dec.c:208:8
   10f1a:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## NSQ_del_dec.c:208:8
   10f1e:    01 e1 80 c0       	r1 = r12 + 0x80			  ## NSQ_del_dec.c:208:8
   10f22:    d4 e9 b0 c0       	r12 = [sp+176]			  ## NSQ_del_dec.c:208:8
   10f26:    99 a8             	r1 = r1 >>> 0x8			  ## NSQ_del_dec.c:208:8
   10f28:    78 e0 01 21       	r2 = sat16(r1) (s)			  ## NSQ_del_dec.c:209:3
   10f2c:    d8 ed 59 27       	h[r5+r7<<1] = r2			  ## NSQ_del_dec.c:210:26
   10f30:    b4 f0 00 2a       	r2 = r0 + r10  #			  ## NSQ_del_dec.c:211:68
   10f34:    21 31             		 r1 = [sp+196]			  ## NSQ_del_dec.c:211:27
   10f36:    eb dd             	r3 = r6 + r7  #			  ## NSQ_del_dec.c:211:3
   10f38:    11 63             		 r1 = [r1+0xc] 			  ## NSQ_del_dec.c:211:27
   10f3a:    d8 ec 2a 24       	r2 = [r2+r4<<2]			  ## NSQ_del_dec.c:211:68
   10f3e:    31 d8             	r1 += r3  #			  ## NSQ_del_dec.c:211:3
   10f40:    03 39             		 r3 = [sp+100]			  ## NSQ_del_dec.c:211:3
   10f42:    03 e1 00 35       	r3 = r3 + 0x500			  ## NSQ_del_dec.c:211:3
   10f46:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## NSQ_del_dec.c:211:66
   10f4a:    02 35             	r2 = [sp+84]			  ## NSQ_del_dec.c:211:66
   10f4c:    c7 21             	r7 += 0x1			  ## NSQ_del_dec.c:203:34
   10f4e:    8c ed d2 71       	ifs (r7 < r12) goto -0x5c <silk_NSQ_del_dec_c+0xAB2 : 10ef6 >
   10f52:    24 d6             	r4 = r2  #
   10f54:    21 62             		 r1 = [r2+0x8] 			  ## NSQ_del_dec.c:213:58
   10f56:    11 a2             	r1 = r1 << 0x2			  ## NSQ_del_dec.c:213:32
   10f58:    01 d8             	r1 += r0  #			  ## NSQ_del_dec.c:213:32
   10f5a:    05 2d             		 r5 = [sp+52]			  ## opus_demo.c:186:2
   10f5c:    42 e0 f0 41       	r2 = 0x41f0 <memmove+0xB4 : 41f0 >			  ## NSQ_del_dec.c:213:32
   10f60:    21 18             	r1 += r2			  ## NSQ_del_dec.c:213:32
   10f62:    4a 20             	r2 = 0x20			  ## opus_demo.c:186:2
   10f64:    12 03             	rep 0x4 r2 {			  ## opus_demo.c:186:2
   10f66:    13 05             		r3 = [r1++=0x4] 			  ## opus_demo.c:186:2
   10f68:    d3 05             		[r5++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   10f6a:    f2 5c             	if (r2 != 0) goto -0x8 <silk_NSQ_del_dec_c+0xB20 : 10f64 >			  ## opus_demo.c:186:2
   10f6c:    41 f0 8c 11       	r1 = 0x118c  # <WOLASynthesisFilter_Float_M128_m4_r1+0x188 : 118c >			  ## NSQ_del_dec.c:217:30
   10f70:    22 31             		 r2 = [sp+196]			  ## NSQ_del_dec.c:217:30
   10f72:    d8 ec 0a 01       	r0 = [r0+r1<<2]			  ## NSQ_del_dec.c:217:30
   10f76:    a0 60             	[r2+0x0] = r0			  ## NSQ_del_dec.c:217:22
   10f78:    40 60             	r0 = [r4+0x0] 			  ## NSQ_del_dec.c:218:40
   10f7a:    01 31             	r1 = [sp+68]			  ## NSQ_del_dec.c:218:24
   10f7c:    f9 3c             	r1 += -0x4			  ## NSQ_del_dec.c:218:24
   10f7e:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## NSQ_del_dec.c:218:24
   10f82:    a0 61             	[r2+0x4] = r0			  ## NSQ_del_dec.c:218:22
   10f84:    40 63             	r0 = [r4+0xc] 			  ## NSQ_del_dec.c:222:101
   10f86:    42 22             	r2 = 0x2			  ## NSQ_del_dec.c:222:101
   10f88:    f4 f1 01 02       	r0 = r0 / r2 (s)  #			  ## NSQ_del_dec.c:222:115
   10f8c:    41 61             		 r1 = [r4+0x4] 			  ## NSQ_del_dec.c:222:77
   10f8e:    11 a1             	r1 = r1 << 0x1			  ## NSQ_del_dec.c:222:50
   10f90:    23 27             	r3 = [sp+156]			  ## NSQ_del_dec.c:222:50
   10f92:    31 d8             	r1 += r3  #			  ## NSQ_del_dec.c:222:50
   10f94:    05 39             		 r5 = [sp+100]			  ## opus_demo.c:186:2
   10f96:    d9 30             	r1 += 0x70			  ## NSQ_del_dec.c:222:50
   10f98:    10 03             	rep 0x4 r0 {			  ## opus_demo.c:186:2
   10f9a:    12 05             		r2 = [r1++=0x4] 			  ## opus_demo.c:186:2
   10f9c:    d2 05             		[r5++=0x4] = r2
                               	}			  ## opus_demo.c:186:2
   10f9e:    f0 5c             	if (r0 != 0) goto -0x8 <silk_NSQ_del_dec_c+0xB54 : 10f98 >			  ## opus_demo.c:186:2
   10fa0:    40 61             	r0 = [r4+0x4] 			  ## NSQ_del_dec.c:223:77
   10fa2:    00 a2             	r0 = r0 << 0x2			  ## NSQ_del_dec.c:223:50
   10fa4:    02 f1 70 35       	r2 = r3 + 0x570  #			  ## NSQ_del_dec.c:223:23
   10fa8:    41 63             		 r1 = [r4+0xc] 			  ## NSQ_del_dec.c:223:101
   10faa:    20 18             	r0 += r2			  ## NSQ_del_dec.c:223:50
   10fac:    11 03             	rep 0x4 r1 {			  ## opus_demo.c:186:2
   10fae:    03 05             		r3 = [r0++=0x4] 			  ## opus_demo.c:186:2
   10fb0:    a3 05             		[r2++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   10fb2:    f1 5c             	if (r1 != 0) goto -0x8 <silk_NSQ_del_dec_c+0xB68 : 10fac >			  ## opus_demo.c:186:2
   10fb4:    62 8f             	sp += 0x1bc
   10fb6:    5f 04             	{pc, r15-r4} = [sp++]			  ## NSQ_del_dec.c:227:1


silk_ana_filt_bank_1:
   10fb8:    7f 04             	[--sp] = {rets, r15-r4}			  ## VAD.c:46:0
   10fba:    c5 d4             	r13 = 0  #			  ## VAD.c:46:0
   10fbc:    04 2d             		 r4 = [sp+52]			  ## VAD.c:46:0
   10fbe:    c0 e1 41 cc       	r12 = r4 >>> 0x1			  ## VAD.c:47:32
   10fc2:    48 e0 1e a1       	r8 = -0x5ee2 <RAM_LIMIT_H+0xFFFFFFFFFFE5A11E : ffffffffffffa11e >
   10fc6:    49 e0 24 2a       	r9 = 0x2a24 <WOLASynthesisFilter_Float_M256_m4_r1+0x220 : 2a24 >
   10fca:    14 8e             	goto 0x5c <silk_ana_filt_bank_1+0x70 : 11028 >
   10fcc:    54 ed 00 60       	r6 = h[r0+0x0] (s)			  ## VAD.c:53:10
   10fd0:    17 60             	r7 = [r1+0x0] 			  ## VAD.c:56:12
   10fd2:    66 aa             	r6 = r6 << 0xa			  ## VAD.c:53:10
   10fd4:    ef 1f             	r7 = r6 - r7			  ## VAD.c:56:12
   10fd6:    f8 e1 70 b8       	r11_r10 = r7 * r8 (s)			  ## VAD.c:57:12
   10fda:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## VAD.c:57:12
   10fde:    67 18             	r7 += r6			  ## VAD.c:57:12
   10fe0:    a7 18             	r7 += r10			  ## VAD.c:59:12
   10fe2:    97 60             	[r1+0x0] = r7			  ## VAD.c:59:10
   10fe4:    54 ed 02 70       	r7 = h[r0+0x2] (s)			  ## VAD.c:62:10
   10fe8:    14 61             	r4 = [r1+0x4] 			  ## VAD.c:65:12
   10fea:    77 aa             	r7 = r7 << 0xa			  ## VAD.c:62:10
   10fec:    75 1f             	r5 = r7 - r4			  ## VAD.c:65:12
   10fee:    f8 e1 50 f9       	r15_r14 = r5 * r9 (s)			  ## VAD.c:66:12
   10ff2:    d0 e1 00 e9       	r15_r14 >>= 0x10			  ## VAD.c:66:12
   10ff6:    b4 e0 e0 57       	r5 = r14 + r7			  ## VAD.c:68:12
   10ffa:    b4 f0 a0 56       	r5 = r10 + r6  #			  ## VAD.c:58:12
   10ffe:    95 61             		 [r1+0x4] = r5			  ## VAD.c:68:10
   11000:    e4 18             	r4 += r14			  ## VAD.c:67:12
   11002:    56 1d             	r6 = r5 + r4			  ## VAD.c:73:8
   11004:    06 e1 00 64       	r6 = r6 + 0x400			  ## VAD.c:73:8
   11008:    ee ab             	r6 = r6 >>> 0xb			  ## VAD.c:73:8
   1100a:    78 e0 01 76       	r7 = sat16(r6) (s)			  ## VAD.c:74:3
   1100e:    d8 ed 29 7d       	h[r2+r13<<1] = r7			  ## VAD.c:75:11
   11012:    a5 e0 80 5e       	r5 = 0x400 - r5			  ## VAD.c:77:8
   11016:    54 18             	r4 += r5			  ## VAD.c:77:8
   11018:    cc ab             	r4 = r4 >>> 0xb			  ## VAD.c:77:8
   1101a:    78 e0 01 54       	r5 = sat16(r4) (s)			  ## VAD.c:78:3
   1101e:    d8 ed 39 5d       	h[r3+r13<<1] = r5			  ## VAD.c:79:11
   11022:    c0 24             	r0 += 0x4			  ## VAD.c:51:2
   11024:    0d e1 01 d0       	r13 = r13 + 0x1			  ## VAD.c:51:23
   11028:    8c ed d0 d1       	ifs (r13 < r12) goto -0x60 <silk_ana_filt_bank_1+0x14 : 10fcc >
   1102c:    5f 04             	{pc, r15-r4} = [sp++]			  ## VAD.c:81:1


ec_enc_carry_out:
   1102e:    77 04             	[--sp] = {rets, r7-r4}			  ## entenc.c:157:0
   11030:    91 f8 03 fe       	if (r1 != 0xff) goto 0x6 <ec_enc_carry_out+0xC : 1103a >			  ## entenc.c:157:0
   11034:    c7 eb 01 00       	[r0+0x1c] += 0x1			  ## entenc.c:173:17
   11038:    57 04             	{pc, r7-r4} = [sp++]			  ## entenc.c:174:1
   1103a:    03 68             	r3 = [r0+0x20] 			  ## entenc.c:164:13
   1103c:    9a a8             	r2 = r1 >>> 0x8			  ## entenc.c:161:11
   1103e:    83 fd 10 00       	ifs (r3 < 0x0) goto 0x20 <ec_enc_carry_out+0x34 : 11062 >
   11042:    04 64             	r4 = [r0+0x10] 			  ## entenc.c:136:12
   11044:    05 62             	r5 = [r0+0x8] 			  ## entenc.c:136:24
   11046:    57 dd             	r7 = r5 + r4  #			  ## entenc.c:136:16
   11048:    06 61             		 r6 = [r0+0x4] 			  ## entenc.c:136:41
   1104a:    15 3f             	r5 = -0x1			  ## entenc.c:136:41
   1104c:    06 e9 07 70       	if (r7 >= r6) goto 0xe <ec_enc_carry_out+0x30 : 1105e >			  ## entenc.c:136:41
   11050:    05 60             	r5 = [r0+0x0] 			  ## entenc.c:137:9
   11052:    4e 81             	r6 = r4 + 0x1			  ## entenc.c:137:24
   11054:    23 d8             	r3 += r2  #			  ## entenc.c:164:64
   11056:    86 64             		 [r0+0x10] = r6			  ## entenc.c:137:24
   11058:    d8 ee 51 34       	b[r5+r4] = r3			  ## entenc.c:137:27
   1105c:    45 20             	r5 = 0x0			  ## entenc.c:137:27
   1105e:    64 e8 24 05       	[r0+0x24] |= r5			  ## entenc.c:164:32
   11062:    03 67             	r3 = [r0+0x1c] 			  ## entenc.c:165:13
   11064:    03 55             	if (r3 == 0) goto 0x2a <ec_enc_carry_out+0x62 : 11090 >			  ## entenc.c:165:13
   11066:    02 e1 ff 20       	r2 = r2 + 0xff			  ## entenc.c:167:19
   1106a:    04 64             	r4 = [r0+0x10] 			  ## entenc.c:136:12
   1106c:    05 62             	r5 = [r0+0x8] 			  ## entenc.c:136:24
   1106e:    57 dd             	r7 = r5 + r4  #			  ## entenc.c:136:16
   11070:    06 61             		 r6 = [r0+0x4] 			  ## entenc.c:136:41
   11072:    15 3f             	r5 = -0x1			  ## entenc.c:136:41
   11074:    06 e9 07 70       	if (r7 >= r6) goto 0xe <ec_enc_carry_out+0x58 : 11086 >			  ## entenc.c:136:41
   11078:    03 60             	r3 = [r0+0x0] 			  ## entenc.c:137:9
   1107a:    4d 81             	r5 = r4 + 0x1			  ## entenc.c:137:24
   1107c:    85 64             	[r0+0x10] = r5			  ## entenc.c:137:24
   1107e:    d8 ee 31 24       	b[r3+r4] = r2			  ## entenc.c:137:27
   11082:    03 67             	r3 = [r0+0x1c] 			  ## entenc.c:137:27
   11084:    45 20             	r5 = 0x0			  ## entenc.c:137:27
   11086:    64 e8 24 05       	[r0+0x24] |= r5			  ## entenc.c:168:19
   1108a:    fb 3f             	r3 += -0x1			  ## entenc.c:169:10
   1108c:    83 67             	[r0+0x1c] = r3			  ## entenc.c:169:10
   1108e:    f3 4d             	if (r3 != 0) goto -0x26 <ec_enc_carry_out+0x3C : 1106a >			  ## entenc.c:169:10
   11090:    11 17             	r1 = r1.b0 (u)			  ## entenc.c:171:16
   11092:    81 68             	[r0+0x20] = r1			  ## entenc.c:171:13
   11094:    57 04             	{pc, r7-r4} = [sp++]			  ## entenc.c:174:1


ec_enc_icdf:
   11096:    75 04             	[--sp] = {rets, r5, r4}			  ## entenc.c:204:0
   11098:    04 65             	r4 = [r0+0x14] 			  ## entenc.c:206:11
   1109a:    c3 a8             	r3 = r4 >> 0x8			  ## entenc.c:206:14
   1109c:    81 fd 0e 02       	ifs (r1 < 0x1) goto 0x1c <ec_enc_icdf+0x26 : 110bc >			  ## entenc.c:207:5
   110a0:    21 d8             	r1 += r2  #			  ## entenc.c:208:30
   110a2:    05 66             		 r5 = [r0+0x18] 			  ## entenc.c:208:16
   110a4:    54 d8             	r4 += r5  #			  ## entenc.c:208:29
   110a6:    1a 5f             		 r2 = b[r1+-0x1] (u)			  ## entenc.c:208:30
   110a8:    32 1b             	r2 *= r3			  ## entenc.c:208:30
   110aa:    c2 1e             	r2 = r4 - r2			  ## entenc.c:208:16
   110ac:    04 16             	r4 = r0			  ## entenc.c:208:16
   110ae:    d0 ec 4b 21       	[++r4=0x18] = r2			  ## entenc.c:208:16
   110b2:    1a 40             	r2 = b[r1+0x0] (u)			  ## entenc.c:209:19
   110b4:    19 5f             	r1 = b[r1+-0x1] (u)			  ## entenc.c:209:19
   110b6:    91 1e             	r1 = r1 - r2			  ## entenc.c:209:19
   110b8:    31 1b             	r1 *= r3			  ## entenc.c:209:19
   110ba:    04 85             	goto 0xa <ec_enc_icdf+0x30 : 110c6 >			  ## entenc.c:209:19
   110bc:    d8 ee 20 11       	r1 = b[r2+r1] (u)			  ## entenc.c:212:17
   110c0:    31 1b             	r1 *= r3			  ## entenc.c:212:17
   110c2:    49 1e             	r1 = r4 - r1			  ## entenc.c:212:14
   110c4:    0c 98             	r4 = r0 + 0x18			  ## entenc.c:212:14
   110c6:    81 65             	[r0+0x14] = r1			  ## entenc.c:209:17
   110c8:    c5 ff 00 ff ff 7f 	r5 = 0x7fffff00 <RAM_LIMIT_H+0x7FE5FF00 : 7fffff00 >			  ## entenc.c:209:17
   110ce:    04 8c             	goto 0x18 <ec_enc_icdf+0x52 : 110e8 >			  ## entenc.c:209:17
   110d0:    41 60             	r1 = [r4+0x0] 			  ## entenc.c:179:39
   110d2:    91 b7             	r1 = r1 >> 0x17			  ## entenc.c:179:42
   110d4:    51 8c             	call -0xa8 <ec_enc_carry_out : 1102e >			  ## entenc.c:179:3
   110d6:    41 60             	r1 = [r4+0x0] 			  ## entenc.c:181:22
   110d8:    11 a8             	r1 = r1 << 0x8			  ## entenc.c:181:25
   110da:    d1 19             	r1 &= r5			  ## entenc.c:181:39
   110dc:    c1 60             	[r4+0x0] = r1			  ## entenc.c:181:13
   110de:    01 65             	r1 = [r0+0x14] 			  ## entenc.c:182:13
   110e0:    11 a8             	r1 = r1 << 0x8			  ## entenc.c:182:13
   110e2:    81 65             	[r0+0x14] = r1			  ## entenc.c:182:13
   110e4:    c3 eb 08 00       	[r0+0xc] += 0x8			  ## entenc.c:183:21
   110e8:    29 ff 00 18 f1 ff 	if (r1 <= 0x800000) goto -0x1e <ec_enc_icdf+0x3A : 110d0 >
   110ee:    55 04             	{pc, r5, r4} = [sp++]			  ## entenc.c:214:1


silk_NLSF_unpack:
   110f0:    7a 04             	[--sp] = {rets, r10-r4}			  ## NLSF_decode.c:40:0
   110f2:    54 ed 22 50       	r5 = h[r2+0x2] (s)			  ## NLSF_decode.c:45:47
   110f6:    53 db             	r3 *= r5  #			  ## NLSF_decode.c:45:45
   110f8:    24 65             		 r4 = [r2+0x14] 			  ## NLSF_decode.c:45:27
   110fa:    46 22             	r6 = 0x2			  ## NLSF_decode.c:45:27
   110fc:    f4 e1 31 36       	r3 = r3 / r6 (s)			  ## NLSF_decode.c:45:64
   11100:    b4 e0 40 83       	r8 = r4 + r3			  ## NLSF_decode.c:45:16
   11104:    44 20             	r4 = 0x0
   11106:    14 8e             	goto 0x5c <silk_NLSF_unpack+0x74 : 11164 >
   11108:    d0 ee 81 50       	r5 = b[r8++=0x1] (u)			  ## NLSF_decode.c:48:22
   1110c:    46 a1             	r6 = r4 << 0x1			  ## NLSF_decode.c:48:20
   1110e:    b7 e1 8c 50       	r7 = uextra(r5, p:0x1, l:0x3)			  ## NLSF_decode.c:48:22
   11112:    e7 e1 09 70       	r7 = r7 * 0x9			  ## NLSF_decode.c:48:22
   11116:    03 16             	r3 = r0			  ## NLSF_decode.c:48:20
   11118:    dc ed 31 76       	h[++r3=r6] = r7			  ## NLSF_decode.c:48:20
   1111c:    54 ed 22 90       	r9 = h[r2+0x2] (s)			  ## NLSF_decode.c:49:64
   11120:    77 e1 fe 50       	r7 = r5 & 0xFFFFFF01			  ## NLSF_decode.c:49:54
   11124:    d0 ec 20 a1       	r10 = [r2+0x10]			  ## NLSF_decode.c:49:33
   11128:    a7 e0 00 70       	r7 = 0x0 - r7			  ## NLSF_decode.c:49:60
   1112c:    36 e1 ff 9f       	r6 = r9 + -0x1			  ## NLSF_decode.c:49:81
   11130:    f6 19             	r6 &= r7			  ## NLSF_decode.c:49:60
   11132:    a6 18             	r6 += r10			  ## NLSF_decode.c:49:22
   11134:    d8 ee 60 64       	r6 = b[r6+r4] (u)			  ## NLSF_decode.c:49:22
   11138:    17 16             	r7 = r1			  ## NLSF_decode.c:49:20
   1113a:    dc ee 71 64       	b[++r7=r4] = r6			  ## NLSF_decode.c:49:20
   1113e:    d6 a5             	r6 = r5 >> 0x5			  ## NLSF_decode.c:51:22
   11140:    e6 e1 09 60       	r6 = r6 * 0x9			  ## NLSF_decode.c:51:22
   11144:    b5 f1 04 52       	r5 = uextra(r5, p:0x4, l:0x1)  #			  ## NLSF_decode.c:52:72
   11148:    be 61             		 h[r3+0x2] = r6			  ## NLSF_decode.c:51:20
   1114a:    54 ed 22 30       	r3 = h[r2+0x2] (s)			  ## NLSF_decode.c:52:82
   1114e:    a5 f0 00 50       	r5 = 0x0 - r5  #			  ## NLSF_decode.c:52:78
   11152:    26 64             		 r6 = [r2+0x10] 			  ## NLSF_decode.c:52:33
   11154:    fb 3f             	r3 += -0x1			  ## NLSF_decode.c:52:99
   11156:    d3 19             	r3 &= r5			  ## NLSF_decode.c:52:78
   11158:    63 18             	r3 += r6			  ## NLSF_decode.c:52:22
   1115a:    43 18             	r3 += r4			  ## NLSF_decode.c:52:22
   1115c:    3b 41             	r3 = b[r3+0x1] (u)			  ## NLSF_decode.c:52:22
   1115e:    fb 41             	b[r7+0x1] = r3			  ## NLSF_decode.c:52:20
   11160:    2d 61             	r5 = h[r2+0x2] (u)			  ## NLSF_decode.c:52:20
   11162:    c4 22             	r4 += 0x2			  ## NLSF_decode.c:46:38
   11164:    dd 17             	r5 = r5.l (s)			  ## NLSF_decode.c:46:18
   11166:    85 ed cf 41       	ifs (r4 < r5) goto -0x62 <silk_NLSF_unpack+0x18 : 11108 >			  ## NLSF_decode.c:46:18
   1116a:    5a 04             	{pc, r10-r4} = [sp++]			  ## NLSF_decode.c:54:1


silk_encode_indices:
   1116c:    7d 04             	[--sp] = {rets, r13-r4}			  ## encode_indices.c:59:0
   1116e:    e2 94             	sp += -0x30			  ## encode_indices.c:59:0
   11170:    09 16             	r9 = r0			  ## encode_indices.c:59:0
   11172:    1a e1 08 00       	r10 = r0 + 0x1008			  ## encode_indices.c:59:0
   11176:    54 ee aa 01       	r0 = b[r10+0x1a] (s)			  ## encode_indices.c:70:19
   1117a:    54 ee ab 21       	r2 = b[r10+0x1b] (s)			  ## encode_indices.c:70:43
   1117e:    14 16             	r4 = r1			  ## encode_indices.c:70:43
   11180:    00 a1             	r0 = r0 << 0x1			  ## encode_indices.c:70:17
   11182:    81 1c             	r1 = r0 + r2			  ## encode_indices.c:70:41
   11184:    cb ff e0 eb 01 00 	r11 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >
   1118a:    b1 ed 02 20       	ifs (r1 < 0x2) {
   1118e:    02 e1 02 b0       		r2 = r11 + 0x2
                               	} else {			  ## encode_indices.c:75:3
   11192:    f9 3e             		r1 += -0x2			  ## encode_indices.c:73:39
   11194:    02 e1 1c b0       		r2 = r11 + 0x1c
                               	}			  ## encode_indices.c:73:3
   11198:    40 16             	r0 = r4			  ## encode_indices.c:73:3
   1119a:    bf ea 7c ff       	call -0x108 <ec_enc_icdf : 11096 >			  ## encode_indices.c:73:3
   1119e:    54 ee a0 00       	r0 = b[r10+0x0] (s)			  ## encode_indices.c:84:27
   111a2:    54 ee aa 21       	r2 = b[r10+0x1a] (s)			  ## encode_indices.c:84:75
   111a6:    89 a3             	r1 = r0 >>> 0x3			  ## encode_indices.c:84:27
   111a8:    20 a3             	r0 = r2 << 0x3			  ## encode_indices.c:84:75
   111aa:    b0 18             	r0 += r11			  ## encode_indices.c:84:75
   111ac:    02 e1 3c 01       	r2 = r0 + 0x13c			  ## encode_indices.c:84:75
   111b0:    40 16             	r0 = r4			  ## encode_indices.c:84:2
   111b2:    bf ea 70 ff       	call -0x120 <ec_enc_icdf : 11096 >			  ## encode_indices.c:84:2
   111b6:    50 ee a0 00       	r0 = b[r10+0x0] (u)			  ## encode_indices.c:85:27
   111ba:    71 e1 f8 00       	r1 = r0 & 0xFFFFFF07			  ## encode_indices.c:85:56
   111be:    08 e1 41 b0       	r8 = r11 + 0x41			  ## encode_indices.c:85:2
   111c2:    40 16             	r0 = r4			  ## encode_indices.c:85:2
   111c4:    82 16             	r2 = r8			  ## encode_indices.c:85:2
   111c6:    bf ea 66 ff       	call -0x134 <ec_enc_icdf : 11096 >			  ## encode_indices.c:85:2
   111ca:    05 e1 01 a0       	r5 = r10 + 0x1			  ## encode_indices.c:89:7
   111ce:    1c e1 2c 94       	r12 = r9 + 0x142c
   111d2:    40 20             	r0 = 0x0
   111d4:    04 88             	goto 0x10 <silk_encode_indices+0x7A : 111e6 >
   111d6:    d8 ee 52 10       	r1 = b[r5+r0] (s)			  ## encode_indices.c:91:28
   111da:    02 e1 fe b1       	r2 = r11 + 0x1fe			  ## encode_indices.c:91:3
   111de:    40 16             	r0 = r4			  ## encode_indices.c:91:3
   111e0:    bf ea 59 ff       	call -0x14e <ec_enc_icdf : 11096 >			  ## encode_indices.c:91:3
   111e4:    60 16             	r0 = r6			  ## encode_indices.c:91:3
   111e6:    d0 ec c4 10       	r1 = [r12+0x4]			  ## encode_indices.c:89:26
   111ea:    0e 81             	r6 = r0 + 0x1			  ## encode_indices.c:89:26
   111ec:    81 ed f3 61       	ifs (r6 < r1) goto -0x1a <silk_encode_indices+0x6A : 111d6 >			  ## encode_indices.c:89:26
   111f0:    1d e1 98 94       	r13 = r9 + 0x1498
   111f4:    d0 ec d0 00       	r0 = [r13+0x0]			  ## encode_indices.c:97:65
   111f8:    54 ee aa 21       	r2 = b[r10+0x1a] (s)			  ## encode_indices.c:97:88
   111fc:    54 ed 00 30       	r3 = h[r0+0x0] (s)			  ## encode_indices.c:97:119
   11200:    54 ee a8 10       	r1 = b[r10+0x8] (s)			  ## encode_indices.c:97:27
   11204:    aa a1             	r2 = r2 >>> 0x1			  ## encode_indices.c:97:110
   11206:    32 db             	r2 *= r3  #			  ## encode_indices.c:97:117
   11208:    00 63             		 r0 = [r0+0xc] 			  ## encode_indices.c:97:76
   1120a:    02 18             	r2 += r0			  ## encode_indices.c:97:57
   1120c:    40 16             	r0 = r4			  ## encode_indices.c:97:2
   1120e:    bf ea 42 ff       	call -0x17c <ec_enc_icdf : 11096 >			  ## encode_indices.c:97:2
   11212:    54 ee a8 30       	r3 = b[r10+0x8] (s)			  ## encode_indices.c:98:55
   11216:    d0 ec d0 20       	r2 = [r13+0x0]			  ## encode_indices.c:98:44
   1121a:    88 90             	r0 = sp + 16			  ## encode_indices.c:98:44
   1121c:    89 80             	r1 = sp + 0			  ## encode_indices.c:98:44
   1121e:    bf ea 67 ff       	call -0x132 <silk_NLSF_unpack : 110f0 >			  ## encode_indices.c:98:2
   11222:    05 e1 09 a0       	r5 = r10 + 0x9			  ## encode_indices.c:100:7
   11226:    46 20             	r6 = 0x0			  ## encode_indices.c:100:7
   11228:    49 e0 fc ff       	r9 = -0x4 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFC : fffffffffffffffc >			  ## encode_indices.c:100:7
   1122c:    14 8a             	goto 0x54 <silk_encode_indices+0x116 : 11282 >
   1122e:    d8 ee 52 16       	r1 = b[r5+r6] (s)			  ## encode_indices.c:101:7
   11232:    6f 81             	r7 = r6 + 0x1			  ## encode_indices.c:101:32
   11234:    81 fd 0e 08       	ifs (r1 < 0x4) goto 0x1c <silk_encode_indices+0xE8 : 11254 >			  ## encode_indices.c:101:7
   11238:    89 90             	r1 = sp + 16
   1123a:    d8 ed 1a 16       	r1 = h[r1+r6<<1] (s)			  ## encode_indices.c:102:60
   1123e:    00 66             	r0 = [r0+0x18] 			  ## encode_indices.c:102:79
   11240:    0a 1c             	r2 = r0 + r1			  ## encode_indices.c:102:60
   11242:    41 28             	r1 = 0x8			  ## encode_indices.c:102:4
   11244:    40 16             	r0 = r4			  ## encode_indices.c:102:4
   11246:    bf ea 26 ff       	call -0x1b4 <ec_enc_icdf : 11096 >			  ## encode_indices.c:102:4
   1124a:    d8 ee 52 06       	r0 = b[r5+r6] (s)			  ## encode_indices.c:103:29
   1124e:    31 e1 fc 0f       	r1 = r0 + -0x4			  ## encode_indices.c:103:59
   11252:    04 8f             	goto 0x1e <silk_encode_indices+0x106 : 11272 >			  ## encode_indices.c:103:59
   11254:    8a 90             	r2 = sp + 16
   11256:    d8 ed 2a 26       	r2 = h[r2+r6<<1] (s)			  ## encode_indices.c:105:61
   1125a:    00 66             	r0 = [r0+0x18] 			  ## encode_indices.c:105:52
   1125c:    02 18             	r2 += r0			  ## encode_indices.c:108:88
   1125e:    71 fe 0b f8       	ifs (r1 > -0x4) goto 0x16 <silk_encode_indices+0x10C : 11278 >			  ## encode_indices.c:104:14
   11262:    41 20             	r1 = 0x0			  ## encode_indices.c:105:4
   11264:    40 16             	r0 = r4			  ## encode_indices.c:105:4
   11266:    bf ea 16 ff       	call -0x1d4 <ec_enc_icdf : 11096 >			  ## encode_indices.c:105:4
   1126a:    d8 ee 52 06       	r0 = b[r5+r6] (s)			  ## encode_indices.c:106:30
   1126e:    b4 e0 92 10       	r1 = r9 - r0			  ## encode_indices.c:106:60
   11272:    02 e1 3a b0       	r2 = r11 + 0x3a
   11276:    04 81             	goto 0x2 <silk_encode_indices+0x10E : 1127a >
   11278:    c1 24             	r1 += 0x4			  ## encode_indices.c:108:59
   1127a:    40 16             	r0 = r4
   1127c:    bf ea 0b ff       	call -0x1ea <ec_enc_icdf : 11096 >
   11280:    76 16             	r6 = r7
   11282:    d0 ec d0 00       	r0 = [r13+0x0]			  ## encode_indices.c:100:26
   11286:    54 ed 02 10       	r1 = h[r0+0x2] (s)			  ## encode_indices.c:100:18
   1128a:    81 ed d0 61       	ifs (r6 < r1) goto -0x60 <silk_encode_indices+0xC2 : 1122e >			  ## encode_indices.c:100:18
   1128e:    54 ee ac 11       	r1 = b[r10+0x1c] (s)			  ## encode_indices.c:113:27
   11292:    02 e1 2e b0       	r2 = r11 + 0x2e			  ## encode_indices.c:113:2
   11296:    40 16             	r0 = r4			  ## encode_indices.c:113:2
   11298:    bf ea fd fe       	call -0x206 <ec_enc_icdf : 11096 >			  ## encode_indices.c:113:2
   1129c:    50 ee aa 01       	r0 = b[r10+0x1a] (u)			  ## encode_indices.c:115:17
   112a0:    80 f8 3b 04       	if (r0 != 0x2) goto 0x76 <silk_encode_indices+0x1AE : 1131a >			  ## encode_indices.c:115:17
   112a4:    d0 ec c0 00       	r0 = [r12+0x0]			  ## encode_indices.c:120:21
   112a8:    54 ed a0 52       	r5 = h[r10+0x20] (s)			  ## encode_indices.c:120:21
   112ac:    8e a1             	r6 = r0 >>> 0x1			  ## encode_indices.c:120:21
   112ae:    f4 e1 51 96       	r9 = r5 / r6 (s)			  ## encode_indices.c:120:21
   112b2:    02 e1 9c b1       	r2 = r11 + 0x19c			  ## encode_indices.c:124:3
   112b6:    40 16             	r0 = r4			  ## encode_indices.c:124:3
   112b8:    91 16             	r1 = r9			  ## encode_indices.c:124:3
   112ba:    bf ea ec fe       	call -0x228 <ec_enc_icdf : 11096 >			  ## encode_indices.c:124:3
   112be:    f0 e1 90 06       	r0 = r9 * r6			  ## encode_indices.c:121:42
   112c2:    51 1e             	r1 = r5 - r0			  ## encode_indices.c:121:40
   112c4:    40 16             	r0 = r4			  ## encode_indices.c:125:3
   112c6:    82 16             	r2 = r8			  ## encode_indices.c:125:3
   112c8:    bf ea e5 fe       	call -0x236 <ec_enc_icdf : 11096 >			  ## encode_indices.c:125:3
   112cc:    54 ee a9 11       	r1 = b[r10+0x19] (s)			  ## encode_indices.c:135:28
   112d0:    02 e1 dc b1       	r2 = r11 + 0x1dc			  ## encode_indices.c:135:3
   112d4:    bf ea df fe       	call -0x242 <ec_enc_icdf : 11096 >			  ## encode_indices.c:135:3
   112d8:    54 ee ad 11       	r1 = b[r10+0x1d] (s)			  ## encode_indices.c:140:28
   112dc:    02 e1 04 b0       	r2 = r11 + 0x4			  ## encode_indices.c:140:3
   112e0:    bf ea d9 fe       	call -0x24e <ec_enc_icdf : 11096 >			  ## encode_indices.c:140:3
   112e4:    05 e1 04 a0       	r5 = r10 + 0x4			  ## encode_indices.c:143:8
   112e8:    46 20             	r6 = 0x0			  ## encode_indices.c:143:8
   112ea:    04 8c             	goto 0x18 <silk_encode_indices+0x198 : 11304 >			  ## encode_indices.c:143:8
   112ec:    54 ee ad 01       	r0 = b[r10+0x1d] (s)			  ## encode_indices.c:145:55
   112f0:    d8 ee 52 16       	r1 = b[r5+r6] (s)			  ## encode_indices.c:145:29
   112f4:    02 e1 70 b0       	r2 = r11 + 0x70			  ## encode_indices.c:145:55
   112f8:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## encode_indices.c:145:55
   112fc:    40 16             	r0 = r4			  ## encode_indices.c:145:4
   112fe:    bf ea ca fe       	call -0x26c <ec_enc_icdf : 11096 >			  ## encode_indices.c:145:4
   11302:    c6 21             	r6 += 0x1			  ## encode_indices.c:143:38
   11304:    d0 ec c4 00       	r0 = [r12+0x4]			  ## encode_indices.c:143:27
   11308:    80 ed f0 61       	ifs (r6 < r0) goto -0x20 <silk_encode_indices+0x180 : 112ec >			  ## encode_indices.c:143:27
   1130c:    54 ee ae 11       	r1 = b[r10+0x1e] (s)			  ## encode_indices.c:151:28
   11310:    02 e1 0d b0       	r2 = r11 + 0xd			  ## encode_indices.c:151:3
   11314:    40 16             	r0 = r4			  ## encode_indices.c:151:3
   11316:    bf ea be fe       	call -0x284 <ec_enc_icdf : 11096 >			  ## encode_indices.c:151:3
   1131a:    54 ee af 11       	r1 = b[r10+0x1f] (s)			  ## encode_indices.c:162:27
   1131e:    02 e1 20 b0       	r2 = r11 + 0x20			  ## encode_indices.c:162:2
   11322:    40 16             	r0 = r4			  ## encode_indices.c:162:2
   11324:    bf ea b7 fe       	call -0x292 <ec_enc_icdf : 11096 >			  ## encode_indices.c:162:2
   11328:    02 8c             	sp += 0x30			  ## encode_indices.c:162:2
   1132a:    5d 04             	{pc, r13-r4} = [sp++]			  ## encode_indices.c:163:1


get_opus_enc_ops:
   1132c:    c0 ff b8 eb 01 00 	r0 = 0x1ebb8 <opus_enc_opst : 1ebb8 >			  ## opus_demo.c:155:0
   11332:    80 00             	rts			  ## opus_demo.c:156:2


get_opus_enc_buf_size:
   11334:    40 e0 ac 4b       	r0 = 0x4bac <.GJTIE82_0_0_+0xB8 : 4bac >			  ## opus_demo.c:66:0
   11338:    80 00             	rts			  ## opus_demo.c:67:2


opus_open:
   1133a:    7a 04             	[--sp] = {rets, r10-r4}			  ## opus_demo.c:72:0
   1133c:    43 e0 eb 12       	r3 = 0x12eb <WOLASynthesisFilter_Float_M128_m4_r1+0x2E6 : 12ea >			  ## opus_demo.c:208:2
   11340:    04 16             	r4 = r0			  ## opus_demo.c:208:2
   11342:    45 20             	r5 = 0x0			  ## opus_demo.c:208:2
   11344:    03 03             	rep 0x2 r3 {			  ## opus_demo.c:208:2
   11346:    c5 05             		[r4++=0x4] = r5
                               	}			  ## opus_demo.c:208:2
   11348:    f3 5d             	if (r3 != 0) goto -0x6 <opus_open+0xA : 11344 >			  ## opus_demo.c:208:2
   1134a:    04 f1 38 00       	r4 = r0 + 0x38  #			  ## opus_demo.c:208:2
   1134e:    13 60             		 r3 = [r1+0x0] 			  ## opus_demo.c:75:37
   11350:    1a f1 8c 04       	r10 = r0 + 0x148c  #			  ## opus_demo.c:75:37
   11354:    c3 6c             		 [r4+0x30] = r3			  ## opus_demo.c:75:26
   11356:    19 f1 cc 04       	r9 = r0 + 0x14cc  #			  ## opus_demo.c:75:26
   1135a:    13 61             		 r3 = [r1+0x4] 			  ## opus_demo.c:76:37
   1135c:    05 f1 cc 00       	r5 = r0 + 0xcc  #			  ## VAD.c:97:7
   11360:    c3 6d             		 [r4+0x34] = r3			  ## opus_demo.c:76:26
   11362:    11 62             	r1 = [r1+0x8] 			  ## opus_demo.c:77:37
   11364:    60 f0 3d 1b       	r1 = 0x2F400  #			  ## opus_encoder.c:51:36
   11368:    c1 6e             		 [r4+0x38] = r1			  ## opus_demo.c:77:26
   1136a:    d0 ec a1 10       	[r10+0x0] = r1			  ## opus_encoder.c:51:36
   1136e:    d0 ec a5 10       	[r10+0x4] = r1			  ## opus_encoder.c:52:36
   11372:    48 ea 01 90       	[r9+0x20] = 0x1			  ## opus_encoder.c:54:38
   11376:    46 20             	r6 = 0x0
   11378:    4f 32             	r7 = 0x32
   1137a:    04 89             	goto 0x12 <opus_open+0x54 : 1138e >
   1137c:    6b 81             	r3 = r6 + 0x1			  ## VAD.c:98:50
   1137e:    f4 e1 71 13       	r1 = r7 / r3 (s)			  ## VAD.c:98:50
   11382:    b1 ee 01 00       	ifs (r1 <= 0x1) {
   11386:    41 21             		r1 = 0x1
                               	}			  ## VAD.c:98:50
   11388:    d8 ec 5b 16       	[r5+r6<<2] = r1			  ## VAD.c:98:35
   1138c:    36 16             	r6 = r3			  ## VAD.c:98:35
   1138e:    86 f8 f5 09       	if (r6 != 0x4) goto -0x16 <opus_open+0x42 : 1137c >			  ## VAD.c:97:2
   11392:    15 30             	r5 = -0x10
   11394:    c6 ff ff ff ff 7f 	r6 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   1139a:    04 8b             	goto 0x16 <opus_open+0x78 : 113b2 >
   1139c:    09 1d             	r1 = r0 + r5			  ## VAD.c:103:29
   1139e:    01 e1 bc 10       	r1 = r1 + 0xbc			  ## VAD.c:103:29
   113a2:    13 68             	r3 = [r1+0x20] 			  ## VAD.c:103:29
   113a4:    e3 e1 64 30       	r3 = r3 * 0x64			  ## VAD.c:103:29
   113a8:    f4 f1 61 33       	r3 = r6 / r3 (s)  #			  ## VAD.c:104:29
   113ac:    93 60             		 [r1+0x0] = r3			  ## VAD.c:103:27
   113ae:    93 64             	[r1+0x10] = r3			  ## VAD.c:104:27
   113b0:    c5 24             	r5 += 0x4			  ## VAD.c:102:2
   113b2:    f5 54             	if (r5 != 0) goto -0x18 <opus_open+0x62 : 1139c >
   113b4:    41 2f             	r1 = 0xf			  ## VAD.c:106:22
   113b6:    d0 ec 0d 1d       	[r0+0xdc] = r1			  ## VAD.c:106:22
   113ba:    05 e1 9c 00       	r5 = r0 + 0x9c			  ## VAD.c:109:7
   113be:    46 20             	r6 = 0x0			  ## VAD.c:109:7
   113c0:    47 e0 00 64       	r7 = 0x6400 <wtgv2_silk_decode_pulses+0x290 : 6400 >			  ## VAD.c:109:7
   113c4:    04 83             	goto 0x6 <opus_open+0x92 : 113cc >			  ## VAD.c:109:7
   113c6:    d8 ec 5b 76       	[r5+r6<<2] = r7			  ## VAD.c:110:36
   113ca:    c6 21             	r6 += 0x1			  ## VAD.c:109:32
   113cc:    86 f8 fb 09       	if (r6 != 0x4) goto -0xa <opus_open+0x8C : 113c6 >
   113d0:    46 e0 80 3e       	r6 = 0x3e80 <STFT_Win_FixHalf_M256_D80+0x7C : 3e80 >			  ## opus_encoder.c:64:9
   113d4:    41 f0 a8 61       	r1 = 0x61a8  # <wtgv2_silk_decode_pulses+0x38 : 61a8 >			  ## opus_encoder.c:66:24
   113d8:    c6 63             		 [r4+0xc] = r6			  ## opus_encoder.c:64:9
   113da:    41 f0 e8 03       	r1 = 0x3e8  # <ROM_RAM_SIZE+0x1E8 : 3e8 >			  ## opus_encoder.c:70:11
   113de:    81 60             		 [r0+0x0] = r1			  ## opus_encoder.c:66:24
   113e0:    48 f0 01 00       	r8 = 0x1  # <mem_code_size : 0 >			  ## opus_encoder.c:66:24
   113e4:    c9 60             		 h[r4+0x0] = r1			  ## opus_encoder.c:70:11
   113e6:    d9 27             	r1 += 0x67			  ## opus_encoder.c:71:16
   113e8:    c1 62             	[r4+0x8] = r1			  ## opus_encoder.c:71:16
   113ea:    d0 ec 0d 83       	[r0+0x3c] = r8			  ## opus_encoder.c:73:14
   113ee:    a1 a6             	r1 = r2 >> 0x6			  ## opus_encoder.c:74:16
   113f0:    73 f1 f0 20       	r3 = r2 & 0xFFFFFF0F  #			  ## opus_encoder.c:77:7
   113f4:    c9 61             		 h[r4+0x2] = r1			  ## opus_encoder.c:74:14
   113f6:    33 e9 02 00       	if (r3 >= 0x2) {
   113fa:    43 22             		r3 = 0x2
                               	}			  ## opus_encoder.c:78:6
   113fc:    49 28             	r1 = 0x28			  ## opus_encoder.c:80:26
   113fe:    31 1a             	r1 <<= r3			  ## opus_encoder.c:80:26
   11400:    c8 f1 60 53       	r5 = r6 << r3  #			  ## opus_encoder.c:81:31
   11404:    c1 66             		 [r4+0x18] = r1			  ## opus_encoder.c:80:21
   11406:    25 ed 7a 0c       	ifs (r5 >= 0xfa00) {			  ## opus_encoder.c:80:21
   1140a:    60 e0 7a 5c       		r5 = 0xFA00
                               	}			  ## opus_encoder.c:82:27
   1140e:    76 f1 cf 20       	r6 = r2 & 0xFFFFFF30  #			  ## opus_encoder.c:75:31
   11412:    c5 65             		 [r4+0x14] = r5			  ## opus_encoder.c:81:23
   11414:    47 20             	r7 = 0x0
   11416:    42 20             	r2 = 0x0			  ## opus_encoder.c:85:5
   11418:    b6 e8 10 00       	if (r6 != 0x10) {
   1141c:    42 22             		r2 = 0x2
                               	}			  ## opus_encoder.c:85:5
   1141e:    41 f0 40 01       	r1 = 0x140  # <var_bss_size+0x34 : 140 >			  ## control_codec.c:79:27
   11422:    82 61             		 [r0+0x4] = r2			  ## opus_encoder.c:84:27
   11424:    87 62             	[r0+0x8] = r7			  ## opus_encoder.c:89:23
   11426:    44 f0 4c 06       	r4 = 0x64c  # <alg_code_size+0x17C : 64c >			  ## control_codec.c:86:18
   1142a:    c5 64             		 [r4+0x10] = r5			  ## opus_encoder.c:90:18
   1142c:    d0 ec 95 72       	[r9+0x24] = r7			  ## control_codec.c:202:21
   11430:    46 ea 04 a0       	[r10+0x18] = 0x4			  ## control_codec.c:78:23
   11434:    d0 ec ad 11       	[r10+0x1c] = r1			  ## control_codec.c:79:27
   11438:    44 ea c0 af       	[r10+0x10] = 0x180			  ## control_codec.c:80:35
   1143c:    d0 ec ad 72       	[r10+0x2c] = r7			  ## control_codec.c:81:29
   11440:    5b 24             	r3 = 0x64			  ## control_codec.c:84:22
   11442:    d0 ec ad 30       	[r10+0xc] = r3			  ## control_codec.c:84:22
   11446:    d0 ec 91 82       	[r9+0x20] = r8			  ## control_codec.c:85:38
   1144a:    d8 ec 0b 34       	[r0+r4<<2] = r3			  ## control_codec.c:86:26
   1144e:    44 e0 10 15       	r4 = 0x1510 <WOLASynthesisFilter_Float_M128_m4_r1+0x50C : 1510 >			  ## control_codec.c:87:16
   11452:    45 2a             	r5 = 0xa			  ## control_codec.c:87:16
   11454:    d8 ee 01 54       	b[r0+r4] = r5			  ## control_codec.c:87:30
   11458:    44 e0 1a 04       	r4 = 0x41a <WOLASynthesisFilter_Float_M64_m4_r1+0x16 : 41a >			  ## control_codec.c:88:19
   1145c:    d8 ec 0b 34       	[r0+r4<<2] = r3			  ## control_codec.c:88:27
   11460:    4b 83             	r3 = r4 + 0x3			  ## control_codec.c:89:19
   11462:    60 e0 80 4b       	r4 = 0x10000			  ## control_codec.c:89:33
   11466:    d8 ec 0b 43       	[r0+r3<<2] = r4			  ## control_codec.c:89:33
   1146a:    43 e0 48 13       	r3 = 0x1348 <WOLASynthesisFilter_Float_M128_m4_r1+0x344 : 1348 >			  ## control_codec.c:90:14
   1146e:    d8 ee 01 73       	b[r0+r3] = r7			  ## control_codec.c:90:29
   11472:    43 30             	r3 = 0x10			  ## opus_encoder.c:85:19
   11474:    d0 ec a5 31       	[r10+0x14] = r3			  ## control_codec.c:92:21
   11478:    d0 ec 91 30       	[r9+0x0] = r3			  ## control_codec.c:93:30
   1147c:    43 e0 43 05       	r3 = 0x543 <alg_code_size+0x72 : 542 >			  ## control_codec.c:94:14
   11480:    c4 ff b8 e5 01 00 	r4 = 0x1e5b8 <silk_NLSF_CB_WB : 1e5b8 >			  ## control_codec.c:94:24
   11486:    d8 ec 0b 43       	[r0+r3<<2] = r4			  ## control_codec.c:94:24
   1148a:    48 ea 50 a0       	[r10+0x20] = 0x50			  ## control_codec.c:96:27
   1148e:    d0 ec a5 12       	[r10+0x24] = r1			  ## control_codec.c:98:29
   11492:    4a ea 20 a0       	[r10+0x28] = 0x20			  ## control_codec.c:99:23
   11496:    d0 ec 95 51       	[r9+0x14] = r5			  ## control_codec.c:102:24
   1149a:    40 21             	r0 = 0x1			  ## control_codec.c:119:6
   1149c:    36 e8 10 00       	if (r6 == 0x10) {
   114a0:    40 20             		r0 = 0x0
                               	}			  ## control_codec.c:119:6
   114a2:    b6 e8 10 50       	if (r6 != 0x10) {			  ## control_codec.c:119:6
   114a6:    48 e0 02 00       		r8 = 0x2 <mem_code_size+0x2 : 2 >			  ## control_codec.c:119:6
   114aa:    c4 ff 8f c2 00 00 		r4 = 0xc28f
                               	} else { <flash_poweroff+0x1E : c28e >			  ## control_codec.c:119:6
   114b0:    c4 ff cd cc 00 00 		r4 = 0xcccd
                               	} <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1+0x4 : cccc >			  ## control_codec.c:119:6
   114b6:    d0 ec 95 00       	[r9+0x4] = r0			  ## control_codec.c:119:6
   114ba:    d0 ec 9d 40       	[r9+0xc] = r4			  ## control_codec.c:119:6
   114be:    4f ea 08 a0       	[r10+0x3c] = 0x8			  ## control_codec.c:119:6
   114c2:    d0 ec a9 83       	[r10+0x38] = r8			  ## control_codec.c:119:6
   114c6:    44 ea 01 90       	[r9+0x10] = 0x1			  ## control_codec.c:119:6
   114ca:    47 ea 02 90       	[r9+0x1c] = 0x2			  ## control_codec.c:119:6
   114ce:    42 ea 06 90       	[r9+0x8] = 0x6			  ## control_codec.c:181:34
   114d2:    40 20             	r0 = 0x0			  ## opus_demo.c:79:2
   114d4:    d0 ec a5 23       	[r10+0x34] = r2			  ## control_codec.c:184:21
   114d8:    5a 04             	{pc, r10-r4} = [sp++]			  ## opus_demo.c:79:2


silk_log2lin:
   114da:    b0 ed 00 40       	ifs (r0 < 0x0) {			  ## sort.c:44:0
   114de:    40 20             		r0 = 0x0			  ## sort.c:44:0
   114e0:    80 00             		rts
                               	}			  ## sort.c:69:1
   114e2:    41 e0 7e 0f       	r1 = 0xf7e <usb_code_size+0x4BA : f7e >			  ## sort.c:49:23
   114e6:    10 ee 00 41       	ifs (r0 > r1) {			  ## sort.c:49:23
   114ea:    c0 ff ff ff ff 7f 		r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## sort.c:49:23
   114f0:    80 00             		rts
                               	}			  ## sort.c:69:1
   114f2:    81 a7             	r1 = r0 >> 0x7			  ## sort.c:69:1
   114f4:    42 21             	r2 = 0x1			  ## sort.c:69:1
   114f6:    c8 e1 20 11       	r1 = r2 << r1			  ## sort.c:53:8
   114fa:    60 e1 7f 00       	r0 = r0 & 0x7F			  ## sort.c:54:21
   114fe:    a2 e0 80 00       	r2 = 0x80 - r0			  ## sort.c:57:35
   11502:    02 1b             	r2 *= r0			  ## sort.c:57:28
   11504:    43 e0 52 ff       	r3 = -0xae <RAM_LIMIT_H+0xFFFFFFFFFFE5FF52 : ffffffffffffff52 >			  ## sort.c:57:28
   11508:    32 1b             	r2 *= r3			  ## sort.c:57:46
   1150a:    aa b0             	r2 = r2 >>> 0x10			  ## sort.c:57:56
   1150c:    20 18             	r0 += r2			  ## sort.c:57:16
   1150e:    f8 e1 00 31       	r3_r2 = r0 * r1 (s)			  ## sort.c:58:24
   11512:    d0 e1 07 28       	r3_r2 >>= 0x7			  ## sort.c:58:31
   11516:    28 1c             	r0 = r2 + r1			  ## sort.c:59:12
   11518:    80 00             	rts			  ## sort.c:69:1


ec_tell:
   1151a:    80 e1 00 11       	r1 = clz(r1)			  ## entenc.c:300:0
   1151e:    10 18             	r0 += r1			  ## entenc.c:301:27
   11520:    f8 20             	r0 += -0x20			  ## entenc.c:301:27
   11522:    80 00             	rts			  ## entenc.c:301:2


silk_lin2log:
   11524:    00 43             	if (r0 == 0) goto 0x6 <silk_lin2log+0x8 : 1152c >			  ## sort.c:78:0
   11526:    80 e1 00 10       	r1 = clz(r0)			  ## entenc.c:124:2
   1152a:    04 81             	goto 0x2 <silk_lin2log+0xA : 1152e >
   1152c:    49 20             	r1 = 0x20
   1152e:    10 1a             	r0 <<= r1			  ## Inlines.h:74:11
   11530:    b0 e1 1c 0c       	r0 = uextra(r0, p:0x18, l:0x7)			  ## Inlines.h:75:22
   11534:    a2 e0 80 00       	r2 = 0x80 - r0			  ## sort.c:84:37
   11538:    02 1b             	r2 *= r0			  ## sort.c:84:37
   1153a:    e2 e1 b3 20       	r2 = r2 * 0xB3			  ## sort.c:84:37
   1153e:    a2 b0             	r2 = r2 >> 0x10			  ## sort.c:84:37
   11540:    a1 e0 1f 10       	r1 = 0x1F - r1			  ## sort.c:84:9
   11544:    a0 e1 e4 13       	r0 <= insert(r1, p:0x7, l:0x19)			  ## sort.c:84:37
   11548:    20 18             	r0 += r2			  ## sort.c:84:35
   1154a:    80 00             	rts			  ## sort.c:84:2


silk_sigm_Q15:
   1154c:    c2 ff e0 eb 01 00 	r2 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## sort.c:106:0
   11552:    f0 fe 10 fe       	ifs (r0 <= -0x1) goto 0x20 <silk_sigm_Q15+0x2A : 11576 >			  ## sort.c:106:0
   11556:    41 e0 ff 7f       	r1 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## sort.c:106:0
   1155a:    10 fe 1e 7e       	ifs (r0 > 0xbf) goto 0x3c <silk_sigm_Q15+0x4E : 1159a >			  ## sort.c:106:0
   1155e:    81 a5             	r1 = r0 >> 0x5			  ## sort.c:126:12
   11560:    11 a2             	r1 = r1 << 0x2			  ## sort.c:126:12
   11562:    21 18             	r1 += r2			  ## sort.c:126:12
   11564:    d1 ec 1c 26       	r2 = [r1+0x16c]			  ## sort.c:126:39
   11568:    d1 ec 14 18       	r1 = [r1+0x184]			  ## sort.c:126:12
   1156c:    60 e1 1f 00       	r0 = r0 & 0x1F			  ## sort.c:126:72
   11570:    20 1b             	r0 *= r2			  ## sort.c:126:64
   11572:    01 18             	r1 += r0			  ## sort.c:126:36
   11574:    04 92             	goto 0x24 <silk_sigm_Q15+0x4E : 1159a >			  ## sort.c:126:36
   11576:    a0 e0 00 00       	r0 = 0x0 - r0			  ## sort.c:111:11
   1157a:    41 20             	r1 = 0x0
   1157c:    10 fe 0d 7e       	ifs (r0 > 0xbf) goto 0x1a <silk_sigm_Q15+0x4E : 1159a >
   11580:    89 a5             	r1 = r0 >>> 0x5			  ## sort.c:116:10
   11582:    03 e1 54 21       	r3 = r2 + 0x154			  ## sort.c:117:12
   11586:    02 e1 6c 21       	r2 = r2 + 0x16c			  ## sort.c:117:39
   1158a:    d8 ec 2a 21       	r2 = [r2+r1<<2]			  ## sort.c:117:39
   1158e:    d8 ec 3a 11       	r1 = [r3+r1<<2]			  ## sort.c:117:12
   11592:    60 e1 1f 00       	r0 = r0 & 0x1F			  ## sort.c:117:72
   11596:    20 1b             	r0 *= r2			  ## sort.c:117:64
   11598:    11 1e             	r1 = r1 - r0			  ## sort.c:117:36
   1159a:    10 16             	r0 = r1			  ## sort.c:129:1
   1159c:    80 00             	rts			  ## sort.c:129:1


silk_encode_do_VAD_FIX:
   1159e:    7f 04             	[--sp] = {rets, r15-r4}			  ## encode_frame_FIX.c:837:0
   115a0:    e2 92             	sp += -0x38			  ## encode_frame_FIX.c:837:0
   115a2:    0c 16             	r12 = r0			  ## encode_frame_FIX.c:837:0
   115a4:    18 e1 20 04       	r8 = r0 + 0x1420			  ## encode_frame_FIX.c:837:0
   115a8:    d0 ec 84 71       	r7 = [r8+0x14]			  ## VAD.c:214:27
   115ac:    40 20             	r0 = 0x0			  ## VAD.c:214:27
   115ae:    c0 f1 72 9c       	r9 = r7 >>> 0x2  #			  ## VAD.c:215:27
   115b2:    80 22             		 [sp+8] = r0			  ## VAD.c:226:16
   115b4:    fc a3             	r4 = r7 >>> 0x3			  ## VAD.c:216:27
   115b6:    b4 e0 40 69       	r6 = r4 + r9			  ## VAD.c:227:40
   115ba:    65 dd             	r5 = r6 + r4  #			  ## VAD.c:228:32
   115bc:    86 23             		 [sp+12] = r6			  ## VAD.c:227:16
   115be:    b4 f0 50 09       	r0 = r5 + r9  #			  ## VAD.c:229:32
   115c2:    85 24             		 [sp+16] = r5			  ## VAD.c:228:16
   115c4:    41 f0 b0 20       	r1 = 0x20b0  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x8AC : 20b0 >			  ## VAD.c:228:16
   115c8:    80 25             		 [sp+20] = r0			  ## VAD.c:229:16
   115ca:    00 a1             	r0 = r0 << 0x1			  ## VAD.c:233:7
   115cc:    b4 f0 c0 21       	r2 = r12 + r1  #
   115d0:    87 20             		 [sp] = r7			  ## VAD.c:232:2
   115d2:    23 1c             	r3 = r2 + r0			  ## VAD.c:233:7
   115d4:    10 e1 34 c0       	r0 = r12 + 0x1034			  ## encode_frame_FIX.c:841:29
   115d8:    c1 16             	r1 = r12			  ## VAD.c:232:2
   115da:    bf ea ed fc       	call -0x626 <silk_ana_filt_bank_1 : 10fb8 >			  ## VAD.c:232:2
   115de:    f8 a1             	r0 = r7 >>> 0x1			  ## VAD.c:214:27
   115e0:    51 a1             	r1 = r5 << 0x1			  ## VAD.c:237:7
   115e2:    2b dc             	r3 = r2 + r1  #			  ## VAD.c:237:7
   115e4:    80 20             		 [sp] = r0			  ## VAD.c:236:2
   115e6:    01 e1 08 c0       	r1 = r12 + 0x8			  ## VAD.c:236:28
   115ea:    20 16             	r0 = r2			  ## VAD.c:236:2
   115ec:    bf ea e4 fc       	call -0x638 <silk_ana_filt_bank_1 : 10fb8 >			  ## VAD.c:236:2
   115f0:    60 a1             	r0 = r6 << 0x1			  ## VAD.c:241:7
   115f2:    23 1c             	r3 = r2 + r0			  ## VAD.c:241:7
   115f4:    01 e1 10 c0       	r1 = r12 + 0x10			  ## VAD.c:240:28
   115f8:    d4 e9 01 90       	[sp] = r9			  ## VAD.c:240:2
   115fc:    20 16             	r0 = r2			  ## VAD.c:240:2
   115fe:    bf ea db fc       	call -0x64a <silk_ana_filt_bank_1 : 10fb8 >			  ## VAD.c:240:2
   11602:    31 e1 ff 4f       	r1 = r4 + -0x1			  ## VAD.c:244:35
   11606:    d8 ed 2a 01       	r0 = h[r2+r1<<1] (s)			  ## VAD.c:244:35
   1160a:    88 a1             	r0 = r0 >>> 0x1			  ## VAD.c:244:35
   1160c:    d8 ed 29 01       	h[r2+r1<<1] = r0			  ## VAD.c:244:33
   11610:    43 a1             	r3 = r4 << 0x1			  ## VAD.c:246:7
   11612:    c3 18             	r3 += r12			  ## VAD.c:246:7
   11614:    44 e0 ae 20       	r4 = 0x20ae <WOLAAnalysisFilter_Float_M256_m4_r1+0x8AA : 20ae >			  ## VAD.c:246:7
   11618:    43 18             	r3 += r4			  ## VAD.c:246:7
   1161a:    04 16             	r4 = r0			  ## VAD.c:248:14
   1161c:    04 88             	goto 0x10 <silk_encode_do_VAD_FIX+0x90 : 1162e >			  ## VAD.c:248:14
   1161e:    57 ed 3e 5f       	r5 = h[r3+-0x2] (s)			  ## VAD.c:247:17
   11622:    d5 a1             	r5 = r5 >> 0x1			  ## VAD.c:247:17
   11624:    4c df             	r4 = r4 - r5  #			  ## VAD.c:248:14
   11626:    bd 7f             		 h[r3+-0x2] = r5			  ## VAD.c:247:15
   11628:    54 d6             	r4 = r5  #			  ## VAD.c:248:14
   1162a:    bc 06             		 h[r3++=-0x2] = r4			  ## VAD.c:248:14
   1162c:    f9 3f             	r1 += -0x1			  ## VAD.c:247:17
   1162e:    01 fd f6 03       	ifs (r1 >= 0x1) goto -0x14 <silk_encode_do_VAD_FIX+0x80 : 1161e >
   11632:    d4 e9 05 80       	[sp+4] = r8
   11636:    09 f1 68 c0       	r9 = r12 + 0x68  #
   1163a:    2b 60             		 r3 = h[r2+0x0] (u)			  ## VAD.c:250:9
   1163c:    50 ed 94 10       	r1 = h[r9+0x4] (u)			  ## VAD.c:250:24
   11640:    39 1e             	r1 = r3 - r1			  ## VAD.c:250:9
   11642:    c6 d4             	r14 = 0  #			  ## VAD.c:250:9
   11644:    a9 60             		 h[r2+0x0] = r1			  ## VAD.c:250:9
   11646:    50 ed 95 00       	h[r9+0x4] = r0			  ## VAD.c:251:22
   1164a:    cb ff e0 eb 01 00 	r11 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >
   11650:    cd ff ff ff ff 7f 	r13 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   11656:    14 9b             	goto 0x76 <silk_encode_do_VAD_FIX+0x130 : 116ce >
   11658:    88 88             	r0 = sp + 8
   1165a:    d8 ec 0a 3e       	r3 = [r0+r14<<2]			  ## VAD.c:255:26
   1165e:    c0 e1 e2 00       	r0 = r14 << 0x2			  ## VAD.c:255:26
   11662:    b4 e0 c0 a0       	r10 = r12 + r0			  ## VAD.c:268:15
   11666:    d0 ec aa f1       	r15 = [++r10=0x18]			  ## VAD.c:268:15
   1166a:    a8 88             	r0 = sp + 40			  ## VAD.c:268:15
   1166c:    d8 ec 0b fe       	[r0+r14<<2] = r15			  ## VAD.c:268:13
   11670:    b4 e0 e0 0b       	r0 = r14 + r11			  ## VAD.c:255:26
   11674:    50 ee 08 01       	r0 = b[r0+0x18] (u)			  ## VAD.c:264:25
   11678:    33 a1             	r3 = r3 << 0x1			  ## VAD.c:272:8
   1167a:    ac 1c             	r4 = r2 + r3			  ## VAD.c:272:8
   1167c:    46 20             	r6 = 0x0			  ## VAD.c:272:8
   1167e:    14 81             	goto 0x42 <silk_encode_do_VAD_FIX+0x124 : 116c2 >			  ## VAD.c:272:8
   11680:    45 20             	r5 = 0x0
   11682:    43 20             	r3 = 0x0
   11684:    04 8a             	goto 0x14 <silk_encode_do_VAD_FIX+0xFC : 1169a >
   11686:    d8 ec 4a 13       	r1 = [r4+r3<<2]			  ## VAD.c:277:11
   1168a:    9f b3             	r7 = r1 >>> 0x13			  ## VAD.c:285:13
   1168c:    77 1b             	r7 *= r7			  ## VAD.c:286:18
   1168e:    75 18             	r5 += r7			  ## VAD.c:282:18
   11690:    b1 e1 b5 11       	r1 = sextra(r1, p:0x3, l:0xd)			  ## VAD.c:281:13
   11694:    11 1b             	r1 *= r1			  ## VAD.c:282:18
   11696:    15 18             	r5 += r1			  ## VAD.c:286:18
   11698:    c3 21             	r3 += 0x1			  ## VAD.c:274:42
   1169a:    83 e8 f4 01       	if (r0 != r3) goto -0x18 <silk_encode_do_VAD_FIX+0xE8 : 11686 >
   1169e:    43 21             	r3 = 0x1
   116a0:    b6 e8 03 00       	if (r6 != 0x3) {
   116a4:    43 20             		r3 = 0x0
                               	}
   116a6:    c8 e1 53 13       	r1 = r5 >>> r3			  ## VAD.c:292:8
   116aa:    b4 e0 f0 31       	r3 = r15 + r1			  ## VAD.c:294:14
   116ae:    df 16             	r15 = r13			  ## VAD.c:294:14
   116b0:    33 ed 00 00       	ifs (r3 >= 0x0) {			  ## VAD.c:294:14
   116b4:    3f 16             		r15 = r3
                               	}			  ## VAD.c:294:14
   116b6:    a9 88             	r1 = sp + 40			  ## VAD.c:294:14
   116b8:    d8 ec 1b fe       	[r1+r14<<2] = r15			  ## VAD.c:294:12
   116bc:    01 a2             	r1 = r0 << 0x2			  ## VAD.c:272:3
   116be:    14 18             	r4 += r1			  ## VAD.c:272:3
   116c0:    c6 21             	r6 += 0x1			  ## VAD.c:272:44
   116c2:    86 f8 dd 09       	if (r6 != 0x4) goto -0x46 <silk_encode_do_VAD_FIX+0xE2 : 11680 >
   116c6:    d0 ec a1 50       	[r10+0x0] = r5			  ## VAD.c:329:30
   116ca:    0e e1 01 e0       	r14 = r14 + 0x1			  ## VAD.c:254:32
   116ce:    8e f8 c3 09       	if (r14 != 0x4) goto -0x7a <silk_encode_do_VAD_FIX+0xBA : 11658 >
   116d2:    d0 ec 90 20       	r2 = [r9+0x0]			  ## VAD.c:129:18
   116d6:    40 20             	r0 = 0x0			  ## VAD.c:129:18
   116d8:    c2 14             	r10 = 0			  ## VAD.c:129:18
   116da:    b2 ee e7 c3       	ifs (r2 <= 0x3e7) {			  ## VAD.c:129:18
   116de:    a9 a4             		r1 = r2 >>> 0x4			  ## VAD.c:130:14
   116e0:    c1 21             		r1 += 0x1			  ## VAD.c:130:14
   116e2:    42 e0 ff 7f       		r2 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## VAD.c:130:14
   116e6:    f4 e1 21 a1       		r10 = r2 / r1 (s)
                               	}			  ## VAD.c:130:14
   116ea:    d3 16             	r3 = r13
   116ec:    e9 e0 01 34       	r9 = r3 + 0x81000000
   116f0:    14 97             	goto 0x6e <silk_encode_do_VAD_FIX+0x1C2 : 11760 >
   116f2:    aa 88             	r2 = sp + 40
   116f4:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## VAD.c:141:9
   116f8:    04 a2             	r4 = r0 << 0x2			  ## VAD.c:137:8
   116fa:    b4 e0 c0 54       	r5 = r12 + r4			  ## VAD.c:137:8
   116fe:    d0 ec 58 45       	r4 = [r5+0x58]			  ## VAD.c:141:9
   11702:    24 18             	r4 += r2			  ## VAD.c:141:9
   11704:    32 16             	r2 = r3			  ## VAD.c:141:9
   11706:    34 ed 00 00       	ifs (r4 >= 0x0) {			  ## VAD.c:141:9
   1170a:    42 16             		r2 = r4
                               	}			  ## VAD.c:141:9
   1170c:    d0 ec 58 e3       	r14 = [r5+0x38]			  ## VAD.c:137:8
   11710:    f4 e1 30 42       	r4 = r3 / r2 (u)			  ## VAD.c:145:13
   11714:    c0 e1 e3 10       	r1 = r14 << 0x3			  ## VAD.c:149:13
   11718:    66 20             	r6 = 0x80			  ## VAD.c:149:13
   1171a:    01 ee 0f 20       	ifs (r2 > r1) goto 0x1e <silk_encode_do_VAD_FIX+0x19E : 1173c >			  ## VAD.c:149:13
   1171e:    46 e0 00 04       	r6 = 0x400 <ROM_RAM_SIZE+0x200 : 400 >
   11722:    8e ed 0b 20       	ifs (r2 < r14) goto 0x16 <silk_encode_do_VAD_FIX+0x19E : 1173c >
   11726:    c0 e1 ef fd       	r15 = r14 >>> 0x1f			  ## VAD.c:154:11
   1172a:    f0 e1 f0 14       	r1 = r15 * r4			  ## VAD.c:154:11
   1172e:    f8 e1 e0 64       	r7_r6 = r14 * r4 (u)			  ## VAD.c:154:11
   11732:    17 18             	r7 += r1			  ## VAD.c:154:11
   11734:    d0 e1 00 61       	r7_r6 <<= 0x10			  ## VAD.c:154:11
   11738:    d0 e1 05 6e       	r7_r6 >>>= 0x25			  ## VAD.c:154:11
   1173c:    d0 ec 58 14       	r1 = [r5+0x48]			  ## VAD.c:161:29
   11740:    34 e4 61 2a       	r2 = smax(r6, r10)			  ## SigProc_FIX.h:360:13
   11744:    4c 1e             	r4 = r4 - r1			  ## VAD.c:161:29
   11746:    f8 e1 40 72       	r7_r6 = r4 * r2 (s)			  ## VAD.c:161:29
   1174a:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## VAD.c:161:29
   1174e:    61 18             	r1 += r6			  ## VAD.c:161:29
   11750:    d0 ec 59 14       	[r5+0x48] = r1			  ## VAD.c:161:27
   11754:    f4 e1 31 11       	r1 = r3 / r1 (s)			  ## VAD.c:165:8
   11758:    35 e4 11 19       	r1 = smin(r1, r9)			  ## VAD.c:169:8
   1175c:    d1 6e             	[r5+0x38] = r1			  ## VAD.c:172:23
   1175e:    c0 21             	r0 += 0x1			  ## VAD.c:135:32
   11760:    80 f8 c7 09       	if (r0 != 0x4) goto -0x72 <silk_encode_do_VAD_FIX+0x154 : 116f2 >
   11764:    da eb 01 c0       	[r12+0x68] += 0x1			  ## VAD.c:176:21
   11768:    0f e1 38 c0       	r15 = r12 + 0x38			  ## VAD.c:343:7
   1176c:    c6 14             	r14 = 0			  ## VAD.c:343:7
   1176e:    4a e0 00 01       	r10 = 0x100 <os_code_size+0x56 : 100 >			  ## VAD.c:343:7
   11772:    45 20             	r5 = 0x0
   11774:    c5 14             	r13 = 0
   11776:    24 87             	goto 0x8e <silk_encode_do_VAD_FIX+0x268 : 11806 >
   11778:    d8 ec fa 05       	r0 = [r15+r5<<2]			  ## VAD.c:344:28
   1177c:    a9 88             	r1 = sp + 40			  ## VAD.c:344:28
   1177e:    d8 ec 1a 15       	r1 = [r1+r5<<2]			  ## VAD.c:344:16
   11782:    14 1e             	r4 = r1 - r0			  ## VAD.c:344:26
   11784:    84 fd 3b 02       	ifs (r4 < 0x1) goto 0x76 <silk_encode_do_VAD_FIX+0x260 : 117fe >			  ## VAD.c:345:7
   11788:    92 b7             	r2 = r1 >> 0x17			  ## VAD.c:347:8
   1178a:    b2 e8 00 10       	if (r2 != 0x0) {			  ## VAD.c:347:8
   1178e:    88 a8             		r0 = r0 >>> 0x8
                               	} else {			  ## VAD.c:350:31
   11790:    11 a8             		r1 = r1 << 0x8
                               	}			  ## VAD.c:348:31
   11792:    c0 21             	r0 += 0x1			  ## VAD.c:348:31
   11794:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## VAD.c:348:31
   11798:    89 98             	r1 = sp + 24			  ## VAD.c:348:31
   1179a:    d8 ec 1b 05       	[r1+r5<<2] = r0			  ## VAD.c:348:31
   1179e:    bf ea c1 fe       	call -0x27e <silk_lin2log : 11524 >			  ## VAD.c:354:13
   117a2:    30 e1 00 0c       	r0 = r0 + -0x400			  ## VAD.c:354:53
   117a6:    f0 e1 00 20       	r2 = r0 * r0			  ## VAD.c:357:17
   117aa:    2a ff 80 49 1c 00 	ifs (r4 >= 0x100000) goto 0x38 <silk_encode_do_VAD_FIX+0x24A : 117e8 >
   117b0:    80 e1 00 34       	r3 = clz(r4)			  ## entenc.c:124:2
   117b4:    c6 ff 86 b4 00 00 	r6 = 0xb486 <print+0x36 : b486 >
   117ba:    33 ea 01 00       	if ((r3 & 0x1) != 0) {
   117be:    60 e0 00 6c       		r6 = 0x8000
                               	}
   117c2:    bf a1             	r7 = r3 >>> 0x1			  ## Inlines.h:101:11
   117c4:    f6 1a             	r6 >>= r7			  ## Inlines.h:101:7
   117c6:    c8 e1 40 33       	r3 = r4 << r3			  ## Inlines.h:74:11
   117ca:    b3 e1 1c 3c       	r3 = uextra(r3, p:0x18, l:0x7)			  ## Inlines.h:75:22
   117ce:    e3 e1 d5 30       	r3 = r3 * 0xD5			  ## Inlines.h:104:9
   117d2:    f8 e1 60 93       	r9_r8 = r6 * r3 (s)			  ## Inlines.h:104:9
   117d6:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## Inlines.h:104:9
   117da:    b4 e0 80 36       	r3 = r8 + r6			  ## Inlines.h:104:9
   117de:    33 a6             	r3 = r3 << 0x6			  ## VAD.c:362:14
   117e0:    f8 e1 30 10       	r1_r0 = r3 * r0 (s)			  ## VAD.c:362:14
   117e4:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## VAD.c:362:14
   117e8:    03 e1 d0 b0       	r3 = r11 + 0xd0			  ## VAD.c:364:17
   117ec:    d8 ec 3a 35       	r3 = [r3+r5<<2]			  ## VAD.c:364:17
   117f0:    2e 18             	r14 += r2			  ## VAD.c:357:17
   117f2:    f8 e1 30 10       	r1_r0 = r3 * r0 (s)			  ## VAD.c:364:17
   117f6:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## VAD.c:364:17
   117fa:    0d 18             	r13 += r0			  ## VAD.c:364:17
   117fc:    04 83             	goto 0x6 <silk_encode_do_VAD_FIX+0x266 : 11804 >
   117fe:    88 98             	r0 = sp + 24
   11800:    d8 ec 0b a5       	[r0+r5<<2] = r10			  ## VAD.c:366:28
   11804:    c5 21             	r5 += 0x1			  ## VAD.c:343:32
   11806:    85 f8 b7 09       	if (r5 != 0x4) goto -0x92 <silk_encode_do_VAD_FIX+0x1DA : 11778 >
   1180a:    45 e0 80 ff       	r5 = -0x80 <RAM_LIMIT_H+0xFFFFFFFFFFE5FF80 : ffffffffffffff80 >
   1180e:    d4 e9 04 90       	r9 = [sp+4]
   11812:    8e fd 22 08       	ifs (r14 < 0x4) goto 0x44 <silk_encode_do_VAD_FIX+0x2BC : 1185a >
   11816:    40 24             	r0 = 0x4			  ## VAD.c:371:15
   11818:    f4 e1 e1 00       	r0 = r14 / r0 (s)			  ## VAD.c:371:15
   1181c:    80 e1 00 10       	r1 = clz(r0)			  ## entenc.c:124:2
   11820:    31 ea 01 10       	if ((r1 & 0x1) != 0) {
   11824:    60 e0 00 2c       		r2 = 0x8000
                               	} else {
   11828:    c2 ff 86 b4 00 00 		r2 = 0xb486
                               	} <print+0x36 : b486 >
   1182e:    9b a1             	r3 = r1 >>> 0x1			  ## Inlines.h:101:11
   11830:    b2 1a             	r2 >>= r3			  ## Inlines.h:101:7
   11832:    10 1a             	r0 <<= r1			  ## Inlines.h:74:11
   11834:    b0 e1 1c 0c       	r0 = uextra(r0, p:0x18, l:0x7)			  ## Inlines.h:75:22
   11838:    e0 e1 d5 00       	r0 = r0 * 0xD5			  ## Inlines.h:104:9
   1183c:    f8 e1 20 10       	r1_r0 = r2 * r0 (s)			  ## Inlines.h:104:9
   11840:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## Inlines.h:104:9
   11844:    20 18             	r0 += r2			  ## Inlines.h:104:9
   11846:    e0 e1 40 0b       	r0 = r0 * 0x30000			  ## Inlines.h:106:5
   1184a:    88 b0             	r0 = r0 >>> 0x10			  ## Inlines.h:106:5
   1184c:    c1 ff c8 af 00 00 	r1 = 0xafc8 <doe+0x50 : afc8 >			  ## Inlines.h:106:5
   11852:    10 1b             	r0 *= r1			  ## Inlines.h:106:5
   11854:    88 b0             	r0 = r0 >>> 0x10			  ## Inlines.h:106:5
   11856:    35 e1 80 0f       	r5 = r0 + -0x80			  ## Inlines.h:106:5
   1185a:    d0 16             	r0 = r13			  ## VAD.c:380:27
   1185c:    bf ea 76 fe       	call -0x314 <silk_sigm_Q15 : 1154c >			  ## VAD.c:380:27
   11860:    00 a1             	r0 = r0 << 0x1			  ## VAD.c:380:27
   11862:    f0 e0 00 0c       	r0 = r0 - 0x8000			  ## VAD.c:380:27
   11866:    41 e0 24 05       	r1 = 0x524 <alg_code_size+0x54 : 524 >			  ## VAD.c:380:10
   1186a:    d8 ec cb 01       	[r12+r1<<2] = r0			  ## VAD.c:380:25
   1186e:    44 20             	r4 = 0x0
   11870:    40 20             	r0 = 0x0
   11872:    04 8a             	goto 0x14 <silk_encode_do_VAD_FIX+0x2EA : 11888 >
   11874:    d8 ec fa 10       	r1 = [r15+r0<<2]			  ## VAD.c:386:29
   11878:    aa 88             	r2 = sp + 40			  ## VAD.c:386:29
   1187a:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## VAD.c:386:29
   1187e:    29 1e             	r1 = r2 - r1			  ## VAD.c:386:29
   11880:    99 a4             	r1 = r1 >>> 0x4			  ## VAD.c:386:29
   11882:    c0 21             	r0 += 0x1			  ## VAD.c:386:21
   11884:    01 1b             	r1 *= r0			  ## VAD.c:386:27
   11886:    14 18             	r4 += r1			  ## VAD.c:386:14
   11888:    80 f8 f4 09       	if (r0 != 0x4) goto -0x18 <silk_encode_do_VAD_FIX+0x2D6 : 11874 >
   1188c:    50 16             	r0 = r5			  ## VAD.c:377:11
   1188e:    bf ea 5d fe       	call -0x346 <silk_sigm_Q15 : 1154c >			  ## VAD.c:377:11
   11892:    84 fe 1f 00       	ifs (r4 <= 0x0) goto 0x3e <silk_encode_do_VAD_FIX+0x336 : 118d4 >
   11896:    2a ff 00 4c 25 00 	ifs (r4 >= 0x8000) goto 0x4a <silk_encode_do_VAD_FIX+0x348 : 118e6 >
   1189c:    42 af             	r2 = r4 << 0xf			  ## VAD.c:393:16
   1189e:    82 fd 1b 02       	ifs (r2 < 0x1) goto 0x36 <silk_encode_do_VAD_FIX+0x33A : 118d8 >
   118a2:    80 e1 00 32       	r3 = clz(r2)			  ## entenc.c:124:2
   118a6:    33 ea 01 10       	if ((r3 & 0x1) != 0) {
   118aa:    60 e0 00 4c       		r4 = 0x8000
                               	} else {
   118ae:    c4 ff 86 b4 00 00 		r4 = 0xb486
                               	} <print+0x36 : b486 >
   118b4:    bd a1             	r5 = r3 >>> 0x1			  ## Inlines.h:101:11
   118b6:    d4 1a             	r4 >>= r5			  ## Inlines.h:101:7
   118b8:    32 1a             	r2 <<= r3			  ## Inlines.h:74:11
   118ba:    b2 e1 1c 2c       	r2 = uextra(r2, p:0x18, l:0x7)			  ## Inlines.h:75:22
   118be:    e2 e1 d5 20       	r2 = r2 * 0xD5			  ## Inlines.h:104:9
   118c2:    f8 e1 40 32       	r3_r2 = r4 * r2 (s)			  ## Inlines.h:104:9
   118c6:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## Inlines.h:104:9
   118ca:    42 18             	r2 += r4			  ## Inlines.h:104:9
   118cc:    e2 e0 00 2c       	r2 = r2 + 0x8000			  ## Inlines.h:106:5
   118d0:    ab bf             	r3 = r2 >>> 0x1f			  ## Inlines.h:106:5
   118d2:    04 85             	goto 0xa <silk_encode_do_VAD_FIX+0x340 : 118de >			  ## Inlines.h:106:5
   118d4:    88 a1             	r0 = r0 >>> 0x1			  ## VAD.c:391:12
   118d6:    04 87             	goto 0xe <silk_encode_do_VAD_FIX+0x348 : 118e6 >
   118d8:    e2 e0 fe ac       	r2 = r10 + 0x7F00
   118dc:    43 20             	r3 = 0x0
   118de:    f8 e1 20 10       	r1_r0 = r2 * r0 (s)			  ## VAD.c:396:12
   118e2:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## VAD.c:396:12
   118e6:    8a a7             	r2 = r0 >>> 0x7			  ## VAD.c:400:45
   118e8:    32 ed ff 00       	ifs (r2 >= 0xff) {			  ## VAD.c:400:45
   118ec:    7a 3f             		r2 = 0xff
                               	}			  ## SigProc_FIX.h:350:18
   118ee:    d0 ec 91 20       	[r9+0x0] = r2			  ## VAD.c:400:29
   118f2:    f8 e1 00 70       	r7_r6 = r0 * r0 (s)			  ## VAD.c:404:20
   118f6:    d0 e1 00 61       	r7_r6 <<= 0x10			  ## VAD.c:404:20
   118fa:    d0 e1 04 6e       	r7_r6 >>>= 0x24
   118fe:    44 20             	r4 = 0x0
   11900:    48 e0 20 05       	r8 = 0x520 <alg_code_size+0x50 : 520 >
   11904:    04 9a             	goto 0x34 <silk_encode_do_VAD_FIX+0x39C : 1193a >
   11906:    88 98             	r0 = sp + 24
   11908:    d8 ec 0a 04       	r0 = [r0+r4<<2]			  ## VAD.c:408:38
   1190c:    41 a2             	r1 = r4 << 0x2			  ## VAD.c:408:38
   1190e:    b4 e0 c0 51       	r5 = r12 + r1			  ## VAD.c:408:38
   11912:    51 6a             	r1 = [r5+0x28] 			  ## VAD.c:408:38
   11914:    08 1e             	r0 = r0 - r1			  ## VAD.c:408:38
   11916:    f8 e1 00 36       	r3_r2 = r0 * r6 (s)			  ## VAD.c:408:38
   1191a:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## VAD.c:408:38
   1191e:    28 1c             	r0 = r2 + r1			  ## VAD.c:408:38
   11920:    d0 6a             	[r5+0x28] = r0			  ## VAD.c:408:36
   11922:    bf ea ff fd       	call -0x402 <silk_lin2log : 11524 >			  ## VAD.c:412:18
   11926:    e0 e1 03 00       	r0 = r0 * 0x3			  ## VAD.c:412:14
   1192a:    20 e1 00 0c       	r0 = r0 + -0x1400			  ## VAD.c:414:57
   1192e:    88 a4             	r0 = r0 >>> 0x4			  ## VAD.c:414:57
   11930:    bf ea 0c fe       	call -0x3e8 <silk_sigm_Q15 : 1154c >			  ## VAD.c:414:42
   11934:    d8 ec 5b 08       	[r5+r8<<2] = r0			  ## VAD.c:414:40
   11938:    c4 21             	r4 += 0x1			  ## VAD.c:406:32
   1193a:    84 f8 e4 09       	if (r4 != 0x4) goto -0x38 <silk_encode_do_VAD_FIX+0x368 : 11906 >
   1193e:    d0 ec 90 10       	r1 = [r9+0x0]			  ## encode_frame_FIX.c:846:18
   11942:    40 21             	r0 = 0x1			  ## encode_frame_FIX.c:853:2
   11944:    b1 ee 0c 00       	ifs (r1 <= 0xc) {			  ## encode_frame_FIX.c:853:2
   11948:    40 20             		r0 = 0x0
                               	}			  ## encode_frame_FIX.c:853:2
   1194a:    41 e0 22 10       	r1 = 0x1022 <WOLASynthesisFilter_Float_M128_m4_r1+0x1E : 1022 >			  ## encode_frame_FIX.c:853:2
   1194e:    d8 ee c1 01       	b[r12+r1] = r0			  ## encode_frame_FIX.c:847:34
   11952:    41 e0 d5 12       	r1 = 0x12d5 <WOLASynthesisFilter_Float_M128_m4_r1+0x2D0 : 12d4 >			  ## encode_frame_FIX.c:847:34
   11956:    d8 ee c1 01       	b[r12+r1] = r0			  ## encode_frame_FIX.c:847:34
   1195a:    02 8e             	sp += 0x38			  ## encode_frame_FIX.c:847:34
   1195c:    5f 04             	{pc, r15-r4} = [sp++]			  ## encode_frame_FIX.c:858:1


silk_apply_sine_window_n:
   1195e:    d9 e8 f0 37       	[--sp] = {rets, r13, r12, r10-r4}			  ## noise_shape_analysis_FIX.c:617:0
   11962:    c5 ff f4 f2 01 00 	r5 = 0x1f2f4 <sin_win_tab1 : 1f2f4 >			  ## noise_shape_analysis_FIX.c:626:6
   11968:    04 e1 00 51       	r4 = r5 + 0x100			  ## noise_shape_analysis_FIX.c:626:6
   1196c:    b3 e8 40 00       	if (r3 != 0x40) {			  ## noise_shape_analysis_FIX.c:626:6
   11970:    54 16             		r4 = r5
                               	}			  ## noise_shape_analysis_FIX.c:626:6
   11972:    35 a3             	r5 = r3 << 0x3			  ## noise_shape_analysis_FIX.c:628:12
   11974:    45 18             	r5 += r4			  ## noise_shape_analysis_FIX.c:628:12
   11976:    38 e1 fc 5f       	r8 = r5 + -0x4			  ## noise_shape_analysis_FIX.c:628:22
   1197a:    26 a1             	r6 = r2 << 0x1			  ## noise_shape_analysis_FIX.c:620:36
   1197c:    97 1d             	r7 = r1 + r6			  ## noise_shape_analysis_FIX.c:620:36
   1197e:    39 e1 fe 7f       	r9 = r7 + -0x2			  ## noise_shape_analysis_FIX.c:620:43
   11982:    06 18             	r6 += r0			  ## noise_shape_analysis_FIX.c:622:26
   11984:    3a e1 fe 6f       	r10 = r6 + -0x2			  ## noise_shape_analysis_FIX.c:622:33
   11988:    15 16             	r5 = r1			  ## noise_shape_analysis_FIX.c:630:2
   1198a:    07 16             	r7 = r0			  ## noise_shape_analysis_FIX.c:630:2
   1198c:    36 16             	r6 = r3			  ## noise_shape_analysis_FIX.c:630:2
   1198e:    b6 03             	rep 0x18 r6 {			  ## noise_shape_analysis_FIX.c:630:2
   11990:    e1 ec 51 d4       		r13_r12 = h[r5 ++= 0x2]*[r4 ++= 0x4] (s)			  ## noise_shape_analysis_FIX.c:630:2
   11994:    d0 e1 00 cd       		r13_r12 >>>= 0x10			  ## noise_shape_analysis_FIX.c:630:2
   11998:    d0 ed 73 c0       		h[r7++=0x2] = r12			  ## noise_shape_analysis_FIX.c:630:2
   1199c:    ef ec 9f d8       		r13_r12 = h[r9 ++= -0x2]*[r8 ++= -0x4] (s)			  ## noise_shape_analysis_FIX.c:630:2
   119a0:    d0 e1 00 cd       		r13_r12 >>>= 0x10			  ## noise_shape_analysis_FIX.c:630:2
   119a4:    d3 ed af cf       		h[r10++=-0x2] = r12
                               	}			  ## noise_shape_analysis_FIX.c:630:2
   119a8:    f6 52             	if (r6 != 0) goto -0x1c <silk_apply_sine_window_n+0x30 : 1198e >			  ## noise_shape_analysis_FIX.c:630:2
   119aa:    33 a1             	r3 = r3 << 0x1			  ## noise_shape_analysis_FIX.c:628:20
   119ac:    31 18             	r1 += r3			  ## noise_shape_analysis_FIX.c:652:53
   119ae:    30 18             	r0 += r3			  ## noise_shape_analysis_FIX.c:652:30
   119b0:    aa 1e             	r2 = r2 - r3			  ## noise_shape_analysis_FIX.c:652:72
   119b2:    aa a1             	r2 = r2 >>> 0x1			  ## noise_shape_analysis_FIX.c:652:87
   119b4:    12 03             	rep 0x4 r2 {			  ## opus_demo.c:186:2
   119b6:    13 05             		r3 = [r1++=0x4] 			  ## opus_demo.c:186:2
   119b8:    83 05             		[r0++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   119ba:    f2 5c             	if (r2 != 0) goto -0x8 <silk_apply_sine_window_n+0x56 : 119b4 >			  ## opus_demo.c:186:2
   119bc:    d5 e8 f0 37       	{pc, r13, r12, r10-r4} = [sp++]			  ## noise_shape_analysis_FIX.c:653:1


silk_autocorr:
   119c0:    7f 04             	[--sp] = {rets, r15-r4}			  ## noise_shape_analysis_FIX.c:354:0
   119c2:    ac a4             	r4 = r2 >>> 0x4			  ## noise_shape_analysis_FIX.c:377:19
   119c4:    35 e4 21 93       	r9 = smin(r2, r3)			  ## SigProc_FIX.h:350:13
   119c8:    2d 16             	r13 = r2			  ## noise_shape_analysis_FIX.c:388:3
   119ca:    12 16             	r2 = r1			  ## noise_shape_analysis_FIX.c:388:3
   119cc:    86 14             	r7_r6 = 0			  ## noise_shape_analysis_FIX.c:388:3
   119ce:    c0 e1 d7 50       	r5 = r13 << 0x7			  ## noise_shape_analysis_FIX.c:388:3
   119d2:    5d 81             	r5 = r5 + 0x1			  ## noise_shape_analysis_FIX.c:388:3
   119d4:    56 16             	r6 = r5			  ## noise_shape_analysis_FIX.c:388:3
   119d6:    30 8f             	rep 0x8 0x10 {			  ## noise_shape_analysis_FIX.c:388:3
   119d8:    d4 ed 22 50       		r5 = h[r2++=0x2] (s)			  ## noise_shape_analysis_FIX.c:388:3
   119dc:    fc e1 50 75       		r7_r6 += r5 * r5 (s)
                               	}			  ## noise_shape_analysis_FIX.c:388:3
   119e0:    fc 3f             	r4 += -0x1			  ## noise_shape_analysis_FIX.c:388:3
   119e2:    f4 59             	if (r4 != 0) goto -0xe <silk_autocorr+0x16 : 119d6 >			  ## noise_shape_analysis_FIX.c:388:3
   119e4:    d0 e1 09 68       	r7_r6 >>= 0x9			  ## noise_shape_analysis_FIX.c:403:13
   119e8:    80 e1 00 26       	r2 = clz(r6)			  ## entenc.c:124:2
   119ec:    a2 e0 0b 20       	r2 = 0xB - r2			  ## noise_shape_analysis_FIX.c:405:14
   119f0:    44 20             	r4 = 0x0
   119f2:    82 fd 1d 04       	ifs (r2 < 0x2) goto 0x3a <silk_autocorr+0x70 : 11a30 >
   119f6:    45 22             	r5 = 0x2
   119f8:    f4 e1 21 a5       	r10 = r2 / r5 (s)			  ## noise_shape_analysis_FIX.c:406:18
   119fc:    0c e1 00 13       	r12 = r1 + 0x300			  ## noise_shape_analysis_FIX.c:361:34
   11a00:    46 21             	r6 = 0x1
   11a02:    c8 e1 60 6a       	r6 = r6 << r10
   11a06:    c0 e1 61 bc       	r11 = r6 >>> 0x1
   11a0a:    46 20             	r6 = 0x0
   11a0c:    48 e0 80 01       	r8 = 0x180 <var_bss_size+0x74 : 180 >
   11a10:    04 8a             	goto 0x14 <silk_autocorr+0x66 : 11a26 >
   11a12:    62 a1             	r2 = r6 << 0x1			  ## noise_shape_analysis_FIX.c:410:13
   11a14:    17 16             	r7 = r1			  ## noise_shape_analysis_FIX.c:410:13
   11a16:    dc ed 72 22       	r2 = h[++r7=r2] (s)			  ## noise_shape_analysis_FIX.c:410:13
   11a1a:    b2 18             	r2 += r11			  ## noise_shape_analysis_FIX.c:410:13
   11a1c:    c8 e1 23 2a       	r2 = r2 >>> r10			  ## noise_shape_analysis_FIX.c:410:13
   11a20:    d8 ed 79 28       	h[r7+r8<<1] = r2			  ## noise_shape_analysis_FIX.c:410:11
   11a24:    c6 21             	r6 += 0x1			  ## noise_shape_analysis_FIX.c:409:17
   11a26:    8d ed f4 61       	ifs (r6 < r13) goto -0x18 <silk_autocorr+0x52 : 11a12 >
   11a2a:    c0 e1 a1 80       	r8 = r10 << 0x1			  ## noise_shape_analysis_FIX.c:412:3
   11a2e:    04 82             	goto 0x4 <silk_autocorr+0x74 : 11a34 >			  ## noise_shape_analysis_FIX.c:412:3
   11a30:    1c 16             	r12 = r1
   11a32:    c0 14             	r8 = 0
   11a34:    39 e1 ff 9f       	r9 = r9 + -0x1			  ## noise_shape_analysis_FIX.c:364:56
   11a38:    c6 14             	r14 = 0
   11a3a:    c7 14             	r15 = 0
   11a3c:    c2 16             	r2 = r12
   11a3e:    04 93             	goto 0x26 <silk_autocorr+0xA6 : 11a66 >
   11a40:    c5 16             	r5 = r12			  ## opus.c:206:4
   11a42:    d3 16             	r3 = r13			  ## opus.c:206:4
   11a44:    ea 16             	r10 = r14			  ## opus.c:206:4
   11a46:    c3 14             	r11 = 0			  ## opus.c:206:4
   11a48:    21 16             	r1 = r2			  ## opus.c:206:4
   11a4a:    53 03             	rep 0xc r3 {			  ## opus.c:206:4
   11a4c:    d4 ed 52 60       		r6 = h[r5++=0x2] (s)			  ## opus.c:206:4
   11a50:    d4 ed 12 70       		r7 = h[r1++=0x2] (s)			  ## opus.c:206:4
   11a54:    fc e1 60 b7       		r11_r10 += r6 * r7 (s)
                               	}			  ## opus.c:206:4
   11a58:    f3 58             	if (r3 != 0) goto -0x10 <silk_autocorr+0x8A : 11a4a >			  ## opus.c:206:4
   11a5a:    d8 ec 0b a4       	[r0+r4<<2] = r10			  ## noise_shape_analysis_FIX.c:437:9
   11a5e:    c2 22             	r2 += 0x2			  ## noise_shape_analysis_FIX.c:433:2
   11a60:    3d e1 ff df       	r13 = r13 + -0x1			  ## noise_shape_analysis_FIX.c:433:2
   11a64:    c4 21             	r4 += 0x1			  ## noise_shape_analysis_FIX.c:433:21
   11a66:    89 ee eb 41       	ifs (r4 <= r9) goto -0x2a <silk_autocorr+0x80 : 11a40 >
   11a6a:    88 fd 02 02       	ifs (r8 < 0x1) goto 0x4 <silk_autocorr+0xB2 : 11a72 >			  ## noise_shape_analysis_FIX.c:453:6
   11a6e:    01 60             	r1 = [r0+0x0] 
   11a70:    04 88             	goto 0x10 <silk_autocorr+0xC2 : 11a82 >
   11a72:    a2 f0 00 80       	r2 = 0x0 - r8  #			  ## noise_shape_analysis_FIX.c:454:12
   11a76:    01 60             		 r1 = [r0+0x0] 			  ## noise_shape_analysis_FIX.c:454:9
   11a78:    43 21             	r3 = 0x1			  ## noise_shape_analysis_FIX.c:454:12
   11a7a:    c8 e1 30 22       	r2 = r3 << r2			  ## noise_shape_analysis_FIX.c:454:12
   11a7e:    21 18             	r1 += r2			  ## noise_shape_analysis_FIX.c:454:9
   11a80:    81 60             	[r0+0x0] = r1			  ## noise_shape_analysis_FIX.c:454:9
   11a82:    80 e1 00 11       	r1 = clz(r1)			  ## entenc.c:124:2
   11a86:    33 e1 fd 1f       	r3 = r1 + -0x3			  ## noise_shape_analysis_FIX.c:456:37
   11a8a:    83 fd 0a 02       	ifs (r3 < 0x1) goto 0x14 <silk_autocorr+0xE2 : 11aa2 >			  ## noise_shape_analysis_FIX.c:457:6
   11a8e:    41 20             	r1 = 0x0
   11a90:    04 85             	goto 0xa <silk_autocorr+0xDC : 11a9c >
   11a92:    12 a2             	r2 = r1 << 0x2			  ## noise_shape_analysis_FIX.c:460:13
   11a94:    02 18             	r2 += r0			  ## noise_shape_analysis_FIX.c:460:13
   11a96:    6e e8 00 23       	[r2+0x0] <<= r3			  ## noise_shape_analysis_FIX.c:460:11
   11a9a:    c1 21             	r1 += 0x1			  ## noise_shape_analysis_FIX.c:459:21
   11a9c:    89 ee f9 11       	ifs (r1 <= r9) goto -0xe <silk_autocorr+0xD2 : 11a92 >
   11aa0:    04 8d             	goto 0x1a <silk_autocorr+0xFC : 11abc >
   11aa2:    73 fe 0b fe       	ifs (r3 > -0x1) goto 0x16 <silk_autocorr+0xFC : 11abc >
   11aa6:    a1 e0 03 10       	r1 = 0x3 - r1
   11aaa:    44 20             	r4 = 0x0
   11aac:    04 85             	goto 0xa <silk_autocorr+0xF8 : 11ab8 >
   11aae:    42 a2             	r2 = r4 << 0x2			  ## noise_shape_analysis_FIX.c:465:13
   11ab0:    02 18             	r2 += r0			  ## noise_shape_analysis_FIX.c:465:13
   11ab2:    6e e8 03 21       	[r2+0x0] >>>= r1			  ## noise_shape_analysis_FIX.c:465:11
   11ab6:    c4 21             	r4 += 0x1			  ## noise_shape_analysis_FIX.c:464:21
   11ab8:    89 ee f9 41       	ifs (r4 <= r9) goto -0xe <silk_autocorr+0xEE : 11aae >
   11abc:    b4 e0 82 03       	r0 = r8 - r3			  ## noise_shape_analysis_FIX.c:467:9
   11ac0:    5f 04             	{pc, r15-r4} = [sp++]			  ## noise_shape_analysis_FIX.c:470:2


silk_sum_sqr_shift:
   11ac2:    76 04             	[--sp] = {rets, r6-r4}			  ## sort.c:179:0
   11ac4:    44 20             	r4 = 0x0			  ## sort.c:187:2
   11ac6:    45 20             	r5 = 0x0			  ## sort.c:187:2
   11ac8:    33 03             	rep 0x8 r3 {			  ## sort.c:187:2
   11aca:    d4 ed 22 60       		r6 = h[r2++=0x2] (s)			  ## sort.c:187:2
   11ace:    fc e1 60 56       		r5_r4 += r6 * r6 (s)
                               	}			  ## sort.c:187:2
   11ad2:    f3 5a             	if (r3 != 0) goto -0xc <silk_sum_sqr_shift+0x6 : 11ac8 >			  ## sort.c:187:2
   11ad4:    05 43             	if (r5 == 0) goto 0x6 <silk_sum_sqr_shift+0x1A : 11adc >
   11ad6:    80 e1 00 25       	r2 = clz(r5)			  ## entenc.c:124:2
   11ada:    04 84             	goto 0x8 <silk_sum_sqr_shift+0x22 : 11ae4 >
   11adc:    04 51             	if (r4 == 0) goto 0x22 <silk_sum_sqr_shift+0x3E : 11b00 >
   11ade:    80 e1 00 24       	r2 = clz(r4)			  ## entenc.c:124:2
   11ae2:    ca 20             	r2 += 0x20			  ## macros.h:143:12
   11ae4:    43 20             	r3 = 0x0
   11ae6:    b2 ee 21 c0       	ifs (r2 <= 0x21) {
   11aea:    a2 e0 23 20       		r2 = 0x23 - r2			  ## sort.c:201:18
   11aee:    43 22             		r3 = 0x2			  ## sort.c:201:24
   11af0:    f4 e1 21 23       		r2 = r2 / r3 (s)			  ## sort.c:201:24
   11af4:    23 a1             		r3 = r2 << 0x1
                               	}			  ## sort.c:201:13
   11af6:    d8 f1 03 43       	r5_r4 >>>= r3  #			  ## sort.c:203:19
   11afa:    93 60             		 [r1+0x0] = r3			  ## sort.c:204:10
   11afc:    84 60             	[r0+0x0] = r4			  ## sort.c:205:10
   11afe:    56 04             	{pc, r6-r4} = [sp++]			  ## sort.c:206:1
   11b00:    43 20             	r3 = 0x0
   11b02:    f7 99             	goto -0xe <silk_sum_sqr_shift+0x34 : 11af6 >


celt_pitch_xcorr:
   11b04:    7e 04             	[--sp] = {rets, r14-r4}			  ## noise_shape_analysis_FIX.c:317:0
   11b06:    d4 e9 30 80       	r8 = [sp+48]			  ## noise_shape_analysis_FIX.c:317:0
   11b0a:    c1 14             	r9 = 0			  ## noise_shape_analysis_FIX.c:317:0
   11b0c:    c4 14             	r12 = 0			  ## noise_shape_analysis_FIX.c:317:0
   11b0e:    c5 14             	r13 = 0			  ## noise_shape_analysis_FIX.c:317:0
   11b10:    04 93             	goto 0x26 <celt_pitch_xcorr+0x34 : 11b38 >			  ## noise_shape_analysis_FIX.c:317:0
   11b12:    3e 16             	r14 = r3			  ## opus.c:206:4
   11b14:    ca 16             	r10 = r12			  ## opus.c:206:4
   11b16:    c3 14             	r11 = 0			  ## opus.c:206:4
   11b18:    16 16             	r6 = r1			  ## opus.c:206:4
   11b1a:    07 16             	r7 = r0			  ## opus.c:206:4
   11b1c:    5e 03             	rep 0xc r14 {			  ## opus.c:206:4
   11b1e:    d4 ed 72 50       		r5 = h[r7++=0x2] (s)			  ## opus.c:206:4
   11b22:    d4 ed 62 40       		r4 = h[r6++=0x2] (s)			  ## opus.c:206:4
   11b26:    fc e1 50 b4       		r11_r10 += r5 * r4 (s)
                               	}			  ## opus.c:206:4
   11b2a:    8e f8 f7 01       	if (r14 != 0x0) goto -0x12 <celt_pitch_xcorr+0x18 : 11b1c >			  ## opus.c:206:4
   11b2e:    d8 ec 2b a9       	[r2+r9<<2] = r10			  ## noise_shape_analysis_FIX.c:335:12
   11b32:    c1 22             	r1 += 0x2			  ## noise_shape_analysis_FIX.c:329:2
   11b34:    09 e1 01 90       	r9 = r9 + 0x1			  ## noise_shape_analysis_FIX.c:329:24
   11b38:    88 ed eb 91       	ifs (r9 < r8) goto -0x2a <celt_pitch_xcorr+0xE : 11b12 >
   11b3c:    5e 04             	{pc, r14-r4} = [sp++]			  ## noise_shape_analysis_FIX.c:343:1


silk_P_Ana_calc_corr_st3:
   11b3e:    7f 04             	[--sp] = {rets, r15-r4}			  ## pitch_analysis_core_FIX.c:607:0
   11b40:    e2 9b             	sp += -0x14			  ## pitch_analysis_core_FIX.c:607:0
   11b42:    24 d6             	r4 = r2  #			  ## pitch_analysis_core_FIX.c:607:0
   11b44:    05 33             		 r5 = [sp+76]			  ## pitch_analysis_core_FIX.c:607:0
   11b46:    1c d6             	r12 = r1  #			  ## pitch_analysis_core_FIX.c:607:0
   11b48:    85 23             		 [sp+12] = r5			  ## pitch_analysis_core_FIX.c:607:0
   11b4a:    41 e0 20 4a       	r1 = 0x4a20 <usb_slave_mode+0x218 : 4a20 >			  ## pitch_analysis_core_FIX.c:627:7
   11b4e:    c9 ff e0 eb 01 00 	r9 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:627:7
   11b54:    b4 e0 50 29       	r2 = r5 + r9			  ## pitch_analysis_core_FIX.c:627:7
   11b58:    54 ee 2a 80       	r8 = b[r2+0xa] (s)			  ## pitch_analysis_core_FIX.c:623:18
   11b5c:    b4 e0 00 a1       	r10 = r0 + r1			  ## pitch_analysis_core_FIX.c:627:7
   11b60:    d1 38             	r1 += 0x58			  ## pitch_analysis_core_FIX.c:616:35
   11b62:    0a 1c             	r2 = r0 + r1			  ## pitch_analysis_core_FIX.c:616:35
   11b64:    e1 e1 05 80       	r1 = r8 * 0x5			  ## pitch_analysis_core_FIX.c:627:7
   11b68:    a3 e0 00 30       	r3 = 0x0 - r3
   11b6c:    00 f1 80 42       	r0 = r4 + 0x280  #			  ## pitch_analysis_core_FIX.c:626:16
   11b70:    04 32             		 r4 = [sp+72]			  ## pitch_analysis_core_FIX.c:626:16
   11b72:    c6 d4             	r14 = 0  #
   11b74:    84 24             		 [sp+16] = r4
   11b76:    33 a1             	r3 = r3 << 0x1
   11b78:    4b f0 d4 02       	r11 = 0x2d4  # <ROM_RAM_SIZE+0xD4 : 2d4 >
   11b7c:    83 22             		 [sp+8] = r3
   11b7e:    11 a2             	r1 = r1 << 0x2
   11b80:    81 21             	[sp+4] = r1
   11b82:    24 87             	goto 0x8e <silk_P_Ana_calc_corr_st3+0xD4 : 11c12 >
   11b84:    41 21             	r1 = 0x1			  ## pitch_analysis_core_FIX.c:632:14
   11b86:    a1 f1 fc e0       	r1 <= insert(r14, p:0x1, l:0x1f)  #			  ## pitch_analysis_core_FIX.c:632:14
   11b8a:    03 23             		 r3 = [sp+12]			  ## pitch_analysis_core_FIX.c:631:13
   11b8c:    33 a3             	r3 = r3 << 0x3			  ## pitch_analysis_core_FIX.c:631:13
   11b8e:    93 18             	r3 += r9			  ## pitch_analysis_core_FIX.c:631:13
   11b90:    03 e1 24 31       	r3 = r3 + 0x124			  ## pitch_analysis_core_FIX.c:631:13
   11b94:    c0 e1 e1 40       	r4 = r14 << 0x1			  ## pitch_analysis_core_FIX.c:631:13
   11b98:    d8 ee 32 f4       	r15 = b[r3+r4] (s)			  ## pitch_analysis_core_FIX.c:631:13
   11b9c:    d8 ee 32 61       	r6 = b[r3+r1] (s)			  ## pitch_analysis_core_FIX.c:632:14
   11ba0:    a1 f0 01 f0       	r1 = 0x1 - r15  #			  ## pitch_analysis_core_FIX.c:634:96
   11ba4:    03 22             		 r3 = [sp+8]			  ## pitch_analysis_core_FIX.c:634:43
   11ba6:    94 1d             	r4 = r1 + r6			  ## pitch_analysis_core_FIX.c:634:106
   11ba8:    61 a1             	r1 = r6 << 0x1			  ## pitch_analysis_core_FIX.c:634:55
   11baa:    03 d8             	r3 += r0  #			  ## pitch_analysis_core_FIX.c:634:43
   11bac:    84 20             		 [sp] = r4			  ## pitch_analysis_core_FIX.c:634:3
   11bae:    39 1e             	r1 = r3 - r1			  ## pitch_analysis_core_FIX.c:634:55
   11bb0:    53 30             	r3 = 0x50			  ## pitch_analysis_core_FIX.c:634:3
   11bb2:    51 88             	call -0xb0 <celt_pitch_xcorr : 11b04 >			  ## pitch_analysis_core_FIX.c:634:3
   11bb4:    b4 e0 62 1f       	r1 = r6 - r15			  ## pitch_analysis_core_FIX.c:635:8
   11bb8:    11 a2             	r1 = r1 << 0x2			  ## pitch_analysis_core_FIX.c:635:8
   11bba:    21 18             	r1 += r2			  ## pitch_analysis_core_FIX.c:635:8
   11bbc:    a3 16             	r3 = r10			  ## pitch_analysis_core_FIX.c:635:8
   11bbe:    f4 16             	r4 = r15			  ## pitch_analysis_core_FIX.c:635:8
   11bc0:    04 83             	goto 0x6 <silk_P_Ana_calc_corr_st3+0x8A : 11bc8 >			  ## pitch_analysis_core_FIX.c:635:8
   11bc2:    1d 05             	r5 = [r1++=-0x4] 			  ## pitch_analysis_core_FIX.c:637:31
   11bc4:    b5 05             	[r3++=0x4] = r5			  ## pitch_analysis_core_FIX.c:637:29
   11bc6:    c4 21             	r4 += 0x1			  ## pitch_analysis_core_FIX.c:635:37
   11bc8:    04 ed fb 61       	ifs (r6 >= r4) goto -0xa <silk_P_Ana_calc_corr_st3+0x84 : 11bc2 >
   11bcc:    c0 e1 f2 10       	r1 = r15 << 0x2			  ## pitch_analysis_core_FIX.c:642:8
   11bd0:    b4 e0 a2 f1       	r15 = r10 - r1			  ## pitch_analysis_core_FIX.c:642:8
   11bd4:    e3 e1 22 e0       	r3 = r14 * 0x22
   11bd8:    46 20             	r6 = 0x0
   11bda:    c1 16             	r1 = r12
   11bdc:    04 92             	goto 0x24 <silk_P_Ana_calc_corr_st3+0xC4 : 11c02 >
   11bde:    ec 1c             	r4 = r6 + r3			  ## pitch_analysis_core_FIX.c:645:10
   11be0:    94 18             	r4 += r9			  ## pitch_analysis_core_FIX.c:645:10
   11be2:    d8 ee 42 4b       	r4 = b[r4+r11] (s)			  ## pitch_analysis_core_FIX.c:645:10
   11be6:    44 a2             	r4 = r4 << 0x2			  ## pitch_analysis_core_FIX.c:646:9
   11be8:    f4 18             	r4 += r15			  ## pitch_analysis_core_FIX.c:646:9
   11bea:    45 20             	r5 = 0x0			  ## pitch_analysis_core_FIX.c:646:9
   11bec:    17 16             	r7 = r1			  ## pitch_analysis_core_FIX.c:646:9
   11bee:    04 85             	goto 0xa <silk_P_Ana_calc_corr_st3+0xBC : 11bfa >			  ## pitch_analysis_core_FIX.c:646:9
   11bf0:    d8 ec 4a d5       	r13 = [r4+r5<<2]			  ## pitch_analysis_core_FIX.c:650:6
   11bf4:    d8 ec 75 d0       	[r7++=0x4] = r13			  ## pitch_analysis_core_FIX.c:649:56
   11bf8:    c5 21             	r5 += 0x1			  ## pitch_analysis_core_FIX.c:646:40
   11bfa:    85 f8 f9 0b       	if (r5 != 0x5) goto -0xe <silk_P_Ana_calc_corr_st3+0xB2 : 11bf0 >
   11bfe:    c1 34             	r1 += 0x14			  ## pitch_analysis_core_FIX.c:642:3
   11c00:    c6 21             	r6 += 0x1			  ## pitch_analysis_core_FIX.c:642:35
   11c02:    88 ed ec 61       	ifs (r6 < r8) goto -0x28 <silk_P_Ana_calc_corr_st3+0xA0 : 11bde >
   11c06:    01 21             	r1 = [sp+4]			  ## pitch_analysis_core_FIX.c:627:2
   11c08:    1c 18             	r12 += r1			  ## pitch_analysis_core_FIX.c:627:2
   11c0a:    0e e1 01 e0       	r14 = r14 + 0x1			  ## pitch_analysis_core_FIX.c:627:29
   11c0e:    00 e1 a0 00       	r0 = r0 + 0xa0			  ## pitch_analysis_core_FIX.c:653:14
   11c12:    01 24             	r1 = [sp+16]			  ## pitch_analysis_core_FIX.c:627:2
   11c14:    81 ed b6 e1       	ifs (r14 < r1) goto -0x94 <silk_P_Ana_calc_corr_st3+0x46 : 11b84 >			  ## pitch_analysis_core_FIX.c:627:2
   11c18:    02 85             	sp += 0x14
   11c1a:    5f 04             	{pc, r15-r4} = [sp++]			  ## pitch_analysis_core_FIX.c:655:1


silk_P_Ana_calc_energy_st3:
   11c1c:    7f 04             	[--sp] = {rets, r15-r4}			  ## pitch_analysis_core_FIX.c:673:0
   11c1e:    e2 98             	sp += -0x20			  ## pitch_analysis_core_FIX.c:673:0
   11c20:    45 f0 20 4a       	r5 = 0x4a20  # <usb_slave_mode+0x218 : 4a20 >			  ## pitch_analysis_core_FIX.c:681:39
   11c24:    04 36             		 r4 = [sp+88]			  ## pitch_analysis_core_FIX.c:681:39
   11c26:    c7 d4             	r15 = 0  #			  ## pitch_analysis_core_FIX.c:681:39
   11c28:    83 21             		 [sp+4] = r3			  ## pitch_analysis_core_FIX.c:681:39
   11c2a:    c9 ff e0 eb 01 00 	r9 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:681:39
   11c30:    b4 f0 40 39       	r3 = r4 + r9  #			  ## pitch_analysis_core_FIX.c:681:39
   11c34:    84 22             		 [sp+8] = r4			  ## pitch_analysis_core_FIX.c:681:39
   11c36:    54 ee 3a c0       	r12 = b[r3+0xa] (s)			  ## pitch_analysis_core_FIX.c:693:18
   11c3a:    b4 e0 00 d5       	r13 = r0 + r5			  ## pitch_analysis_core_FIX.c:681:39
   11c3e:    5b 84             	r3 = r5 + 0x4			  ## pitch_analysis_core_FIX.c:697:7
   11c40:    b4 e0 00 e3       	r14 = r0 + r3			  ## pitch_analysis_core_FIX.c:697:7
   11c44:    e0 e1 05 c0       	r0 = r12 * 0x5			  ## pitch_analysis_core_FIX.c:697:7
   11c48:    03 e1 7e 22       	r3 = r2 + 0x27e			  ## pitch_analysis_core_FIX.c:697:7
   11c4c:    02 f1 80 22       	r2 = r2 + 0x280  #			  ## pitch_analysis_core_FIX.c:696:16
   11c50:    83 27             		 [sp+28] = r3			  ## pitch_analysis_core_FIX.c:696:16
   11c52:    4b f0 d4 02       	r11 = 0x2d4  # <ROM_RAM_SIZE+0xD4 : 2d4 >
   11c56:    03 35             		 r3 = [sp+84]
   11c58:    83 23             	[sp+12] = r3
   11c5a:    00 a2             	r0 = r0 << 0x2
   11c5c:    80 20             	[sp] = r0
   11c5e:    ca ff ff ff ff 7f 	r10 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   11c64:    34 96             	goto 0xec <silk_P_Ana_calc_energy_st3+0x136 : 11d52 >
   11c66:    81 25             	[sp+20] = r1
   11c68:    00 22             	r0 = [sp+8]			  ## pitch_analysis_core_FIX.c:701:41
   11c6a:    00 a3             	r0 = r0 << 0x3			  ## pitch_analysis_core_FIX.c:701:41
   11c6c:    90 18             	r0 += r9			  ## pitch_analysis_core_FIX.c:701:41
   11c6e:    00 e1 24 01       	r0 = r0 + 0x124			  ## pitch_analysis_core_FIX.c:701:41
   11c72:    c0 e1 f1 10       	r1 = r15 << 0x1			  ## pitch_analysis_core_FIX.c:701:41
   11c76:    d8 ee 02 61       	r6 = b[r0+r1] (s)			  ## pitch_analysis_core_FIX.c:701:41
   11c7a:    c0 d4             	r8 = 0  #			  ## opus.c:206:4
   11c7c:    01 21             		 r1 = [sp+4]			  ## pitch_analysis_core_FIX.c:701:39
   11c7e:    61 d8             	r1 += r6  #			  ## pitch_analysis_core_FIX.c:701:39
   11c80:    82 26             		 [sp+24] = r2			  ## pitch_analysis_core_FIX.c:701:39
   11c82:    11 a1             	r1 = r1 << 0x1			  ## pitch_analysis_core_FIX.c:701:26
   11c84:    2a 1e             	r2 = r2 - r1			  ## pitch_analysis_core_FIX.c:701:26
   11c86:    c1 14             	r9 = 0			  ## opus.c:206:4
   11c88:    43 21             	r3 = 0x1			  ## pitch_analysis_core_FIX.c:707:15
   11c8a:    d4 e9 11 f0       	[sp+16] = r15			  ## pitch_analysis_core_FIX.c:707:15
   11c8e:    a3 e1 fc f0       	r3 <= insert(r15, p:0x1, l:0x1f)			  ## pitch_analysis_core_FIX.c:707:15
   11c92:    d8 ee 02 03       	r0 = b[r0+r3] (s)			  ## pitch_analysis_core_FIX.c:707:15
   11c96:    53 30             	r3 = 0x50			  ## opus.c:206:4
   11c98:    24 16             	r4 = r2			  ## opus.c:206:4
   11c9a:    53 03             	rep 0xc r3 {			  ## opus.c:206:4
   11c9c:    d4 ed 22 50       		r5 = h[r2++=0x2] (s)			  ## opus.c:206:4
   11ca0:    d4 ed 42 70       		r7 = h[r4++=0x2] (s)			  ## opus.c:206:4
   11ca4:    fc e1 50 97       		r9_r8 += r5 * r7 (s)
                               	}			  ## opus.c:206:4
   11ca8:    f3 58             	if (r3 != 0) goto -0x10 <silk_P_Ana_calc_energy_st3+0x7E : 11c9a >			  ## opus.c:206:4
   11caa:    d4 16             	r4 = r13
   11cac:    d0 ec 41 80       	[r4+0x0] = r8			  ## pitch_analysis_core_FIX.c:704:28
   11cb0:    b4 e0 02 f6       	r15 = r0 - r6			  ## pitch_analysis_core_FIX.c:707:50
   11cb4:    a3 e0 00 10       	r3 = 0x0 - r1			  ## pitch_analysis_core_FIX.c:708:8
   11cb8:    42 20             	r2 = 0x0			  ## pitch_analysis_core_FIX.c:708:8
   11cba:    d4 e9 1c d0       	r13 = [sp+28]
   11cbe:    04 98             	goto 0x30 <silk_P_Ana_calc_energy_st3+0xD4 : 11cf0 >
   11cc0:    b4 e0 30 0d       	r0 = r3 + r13			  ## pitch_analysis_core_FIX.c:710:14
   11cc4:    54 ed 00 1a       	r1 = h[r0+0xa0] (s)			  ## pitch_analysis_core_FIX.c:710:14
   11cc8:    54 ed 00 00       	r0 = h[r0+0x0] (s)			  ## pitch_analysis_core_FIX.c:714:13
   11ccc:    11 1b             	r1 *= r1			  ## pitch_analysis_core_FIX.c:710:14
   11cce:    b4 e0 82 11       	r1 = r8 - r1			  ## pitch_analysis_core_FIX.c:710:11
   11cd2:    00 1b             	r0 *= r0			  ## pitch_analysis_core_FIX.c:714:13
   11cd4:    b4 e0 10 80       	r8 = r1 + r0			  ## pitch_analysis_core_FIX.c:714:13
   11cd8:    a0 16             	r0 = r10			  ## pitch_analysis_core_FIX.c:714:13
   11cda:    b1 ee ff 0f       	ifs (r1 <= -0x1) {			  ## pitch_analysis_core_FIX.c:714:13
   11cde:    80 16             		r0 = r8
                               	}			  ## pitch_analysis_core_FIX.c:714:13
   11ce0:    b8 ee ff 0f       	ifs (r8 <= -0x1) {			  ## pitch_analysis_core_FIX.c:714:13
   11ce4:    08 16             		r8 = r0
                               	}			  ## pitch_analysis_core_FIX.c:714:13
   11ce6:    d8 ec eb 82       	[r14+r2<<2] = r8			  ## pitch_analysis_core_FIX.c:717:29
   11cea:    3d e1 fe df       	r13 = r13 + -0x2			  ## pitch_analysis_core_FIX.c:708:3
   11cee:    52 16             	r2 = r5			  ## pitch_analysis_core_FIX.c:708:3
   11cf0:    2d 81             	r5 = r2 + 0x1			  ## pitch_analysis_core_FIX.c:675:13
   11cf2:    8f ee e5 51       	ifs (r5 <= r15) goto -0x36 <silk_P_Ana_calc_energy_st3+0xA4 : 11cc0 >			  ## pitch_analysis_core_FIX.c:675:13
   11cf6:    60 a2             	r0 = r6 << 0x2			  ## pitch_analysis_core_FIX.c:722:8
   11cf8:    4d d6             	r13 = r4  #			  ## pitch_analysis_core_FIX.c:722:8
   11cfa:    01 25             		 r1 = [sp+20]			  ## pitch_analysis_core_FIX.c:722:8
   11cfc:    b4 e0 42 80       	r8 = r4 - r0			  ## pitch_analysis_core_FIX.c:722:8
   11d00:    d4 e9 10 f0       	r15 = [sp+16]
   11d04:    e3 e1 22 f0       	r3 = r15 * 0x22
   11d08:    45 20             	r5 = 0x0
   11d0a:    10 16             	r0 = r1
   11d0c:    c9 ff e0 eb 01 00 	r9 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >
   11d12:    04 92             	goto 0x24 <silk_P_Ana_calc_energy_st3+0x11C : 11d38 >
   11d14:    da 1c             	r2 = r5 + r3			  ## pitch_analysis_core_FIX.c:725:10
   11d16:    92 18             	r2 += r9			  ## pitch_analysis_core_FIX.c:725:10
   11d18:    d8 ee 22 2b       	r2 = b[r2+r11] (s)			  ## pitch_analysis_core_FIX.c:725:10
   11d1c:    22 a2             	r2 = r2 << 0x2			  ## pitch_analysis_core_FIX.c:726:9
   11d1e:    b4 e0 80 72       	r7 = r8 + r2			  ## pitch_analysis_core_FIX.c:726:9
   11d22:    44 20             	r4 = 0x0			  ## pitch_analysis_core_FIX.c:726:9
   11d24:    02 16             	r2 = r0			  ## pitch_analysis_core_FIX.c:726:9
   11d26:    04 84             	goto 0x8 <silk_P_Ana_calc_energy_st3+0x114 : 11d30 >			  ## pitch_analysis_core_FIX.c:726:9
   11d28:    d8 ec 7a 64       	r6 = [r7+r4<<2]			  ## pitch_analysis_core_FIX.c:729:56
   11d2c:    a6 05             	[r2++=0x4] = r6			  ## pitch_analysis_core_FIX.c:729:54
   11d2e:    c4 21             	r4 += 0x1			  ## pitch_analysis_core_FIX.c:726:40
   11d30:    84 f8 fa 0b       	if (r4 != 0x5) goto -0xc <silk_P_Ana_calc_energy_st3+0x10C : 11d28 >
   11d34:    c0 34             	r0 += 0x14			  ## pitch_analysis_core_FIX.c:722:3
   11d36:    c5 21             	r5 += 0x1			  ## pitch_analysis_core_FIX.c:722:35
   11d38:    8c ed ec 51       	ifs (r5 < r12) goto -0x28 <silk_P_Ana_calc_energy_st3+0xF8 : 11d14 >
   11d3c:    00 20             	r0 = [sp]			  ## pitch_analysis_core_FIX.c:697:2
   11d3e:    01 d8             	r1 += r0  #			  ## pitch_analysis_core_FIX.c:697:2
   11d40:    00 27             		 r0 = [sp+28]			  ## pitch_analysis_core_FIX.c:697:2
   11d42:    00 e1 a0 00       	r0 = r0 + 0xa0			  ## pitch_analysis_core_FIX.c:697:2
   11d46:    0f f1 01 f0       	r15 = r15 + 0x1  #			  ## pitch_analysis_core_FIX.c:697:29
   11d4a:    80 27             		 [sp+28] = r0			  ## pitch_analysis_core_FIX.c:697:29
   11d4c:    02 26             	r2 = [sp+24]
   11d4e:    02 e1 a0 20       	r2 = r2 + 0xa0			  ## pitch_analysis_core_FIX.c:733:14
   11d52:    00 23             	r0 = [sp+12]			  ## pitch_analysis_core_FIX.c:697:2
   11d54:    80 ed 87 f1       	ifs (r15 < r0) goto -0xf2 <silk_P_Ana_calc_energy_st3+0x4A : 11c66 >			  ## pitch_analysis_core_FIX.c:697:2
   11d58:    02 88             	sp += 0x20
   11d5a:    5f 04             	{pc, r15-r4} = [sp++]			  ## pitch_analysis_core_FIX.c:735:1


silk_pitch_analysis_core:
   11d5c:    7f 04             	[--sp] = {rets, r15-r4}			  ## pitch_analysis_core_FIX.c:169:0
   11d5e:    c2 81             	sp += -0xfc			  ## pitch_analysis_core_FIX.c:169:0
   11d60:    18 d6             	r8 = r1  #			  ## pitch_analysis_core_FIX.c:169:0
   11d62:    83 29             		 [sp+36] = r3			  ## pitch_analysis_core_FIX.c:169:0
   11d64:    07 d6             	r7 = r0  #			  ## pitch_analysis_core_FIX.c:169:0
   11d66:    82 2d             		 [sp+52] = r2			  ## pitch_analysis_core_FIX.c:169:0
   11d68:    f8 e8 f8 00       	r0 = sp + 248			  ## pitch_analysis_core_FIX.c:169:0
   11d6c:    f8 e8 f4 10       	r1 = sp + 244			  ## pitch_analysis_core_FIX.c:169:0
   11d70:    43 e0 80 02       	r3 = 0x280 <ROM_RAM_SIZE+0x80 : 280 >			  ## pitch_analysis_core_FIX.c:216:2
   11d74:    82 16             	r2 = r8			  ## pitch_analysis_core_FIX.c:216:2
   11d76:    bf ea a4 fe       	call -0x2b8 <silk_sum_sqr_shift : 11ac2 >			  ## pitch_analysis_core_FIX.c:216:2
   11d7a:    40 f0 d8 34       	r0 = 0x34d8  # <WOLASynthesisFilter_Float_M256_m4_r1+0xCD4 : 34d8 >
   11d7e:    25 3e             		 r5 = [sp+248]			  ## pitch_analysis_core_FIX.c:217:26
   11d80:    b4 e0 70 a0       	r10 = r7 + r0			  ## pitch_analysis_core_FIX.c:217:26
   11d84:    40 e0 d8 33       	r0 = 0x33d8 <WOLASynthesisFilter_Float_M256_m4_r1+0xBD4 : 33d8 >			  ## pitch_analysis_core_FIX.c:217:26
   11d88:    b4 e0 70 b0       	r11 = r7 + r0			  ## pitch_analysis_core_FIX.c:217:26
   11d8c:    40 e0 b8 32       	r0 = 0x32b8 <WOLASynthesisFilter_Float_M256_m4_r1+0xAB4 : 32b8 >			  ## pitch_analysis_core_FIX.c:217:26
   11d90:    b4 e0 70 90       	r9 = r7 + r0			  ## pitch_analysis_core_FIX.c:217:26
   11d94:    40 e0 ac 29       	r0 = 0x29ac <WOLASynthesisFilter_Float_M256_m4_r1+0x1A8 : 29ac >			  ## pitch_analysis_core_FIX.c:217:26
   11d98:    70 18             	r0 += r7
   11d9a:    40 f0 70 28       	r0 = 0x2870  # <WOLASynthesisFilter_Float_M256_m4_r1+0x6C : 2870 >
   11d9e:    80 31             		 [sp+68] = r0
   11da0:    70 18             	r0 += r7
   11da2:    40 f0 f0 25       	r0 = 0x25f0  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## pitch_analysis_core_FIX.c:187:38
   11da6:    80 30             		 [sp+64] = r0			  ## pitch_analysis_core_FIX.c:187:38
   11da8:    05 43             	if (r5 == 0) goto 0x6 <silk_pitch_analysis_core+0x54 : 11db0 >			  ## pitch_analysis_core_FIX.c:187:38
   11daa:    80 e1 00 15       	r1 = clz(r5)			  ## entenc.c:124:2
   11dae:    04 81             	goto 0x2 <silk_pitch_analysis_core+0x56 : 11db2 >
   11db0:    49 20             	r1 = 0x20
   11db2:    70 d8             	r0 += r7  #			  ## pitch_analysis_core_FIX.c:187:38
   11db4:    22 3d             		 r2 = [sp+244]			  ## pitch_analysis_core_FIX.c:217:8
   11db6:    a1 e0 03 10       	r1 = 0x3 - r1			  ## pitch_analysis_core_FIX.c:217:13
   11dba:    12 18             	r2 += r1			  ## pitch_analysis_core_FIX.c:217:8
   11dbc:    a2 3d             	[sp+244] = r2			  ## pitch_analysis_core_FIX.c:217:8
   11dbe:    87 2b             	[sp+44] = r7			  ## pitch_analysis_core_FIX.c:217:8
   11dc0:    82 fd 15 02       	ifs (r2 < 0x1) goto 0x2a <silk_pitch_analysis_core+0x92 : 11dee >			  ## pitch_analysis_core_FIX.c:217:8
   11dc4:    41 e0 d0 2d       	r1 = 0x2dd0 <WOLASynthesisFilter_Float_M256_m4_r1+0x5CC : 2dd0 >			  ## pitch_analysis_core_FIX.c:190:39
   11dc8:    71 18             	r1 += r7			  ## pitch_analysis_core_FIX.c:190:39
   11dca:    c2 21             	r2 += 0x1			  ## pitch_analysis_core_FIX.c:219:11
   11dcc:    aa a1             	r2 = r2 >>> 0x1			  ## pitch_analysis_core_FIX.c:219:11
   11dce:    43 f0 d0 2d       	r3 = 0x2dd0  # <WOLASynthesisFilter_Float_M256_m4_r1+0x5CC : 2dd0 >			  ## pitch_analysis_core_FIX.c:220:8
   11dd2:    a2 3d             		 [sp+244] = r2			  ## pitch_analysis_core_FIX.c:219:9
   11dd4:    73 18             	r3 += r7			  ## pitch_analysis_core_FIX.c:220:8
   11dd6:    44 20             	r4 = 0x0			  ## pitch_analysis_core_FIX.c:220:8
   11dd8:    04 86             	goto 0xc <silk_pitch_analysis_core+0x8A : 11de6 >			  ## pitch_analysis_core_FIX.c:220:8
   11dda:    d8 ed 8a 64       	r6 = h[r8+r4<<1] (s)			  ## pitch_analysis_core_FIX.c:221:21
   11dde:    ae 1a             	r6 >>>= r2			  ## pitch_analysis_core_FIX.c:221:21
   11de0:    d8 ed 39 64       	h[r3+r4<<1] = r6			  ## pitch_analysis_core_FIX.c:221:19
   11de4:    c4 21             	r4 += 0x1			  ## pitch_analysis_core_FIX.c:220:34
   11de6:    01 ff 80 42 f7 ff 	if (r4 != 0x280) goto -0x12 <silk_pitch_analysis_core+0x7E : 11dda >
   11dec:    18 16             	r8 = r1
   11dee:    01 e1 08 a0       	r1 = r10 + 0x8			  ## pitch_analysis_core_FIX.c:193:49
   11df2:    01 f1 04 b0       	r1 = r11 + 0x4  #			  ## pitch_analysis_core_FIX.c:192:35
   11df6:    81 2f             		 [sp+60] = r1			  ## pitch_analysis_core_FIX.c:192:35
   11df8:    d4 e9 1d b0       	[sp+28] = r11			  ## pitch_analysis_core_FIX.c:192:35
   11dfc:    01 f1 18 90       	r1 = r9 + 0x18  #			  ## pitch_analysis_core_FIX.c:191:34
   11e00:    81 33             		 [sp+76] = r1			  ## pitch_analysis_core_FIX.c:191:34
   11e02:    83 d6             	r3 = r8  #			  ## pitch_analysis_core_FIX.c:135:2
   11e04:    81 37             		 [sp+92] = r1			  ## pitch_analysis_core_FIX.c:189:32
   11e06:    d4 e9 44 b0       	r11 = [sp+68]			  ## pitch_analysis_core_FIX.c:189:32
   11e0a:    d4 e9 4c 71       	r7 = [sp+332]
   11e0e:    d4 e9 48 11       	r1 = [sp+328]
   11e12:    0c f1 04 b0       	r12 = r11 + 0x4  #			  ## pitch_analysis_core_FIX.c:189:32
   11e16:    81 2a             		 [sp+40] = r1
   11e18:    d4 e9 44 11       	r1 = [sp+324]
   11e1c:    04 d6             	r4 = r0  #			  ## pitch_analysis_core_FIX.c:135:2
   11e1e:    81 26             		 [sp+24] = r1			  ## pitch_analysis_core_FIX.c:135:2
   11e20:    d4 e9 40 11       	r1 = [sp+320]			  ## pitch_analysis_core_FIX.c:135:2
   11e24:    81 25             	[sp+20] = r1			  ## pitch_analysis_core_FIX.c:135:2
   11e26:    d4 e9 3c 11       	r1 = [sp+316]			  ## pitch_analysis_core_FIX.c:135:2
   11e2a:    81 2e             	[sp+56] = r1			  ## pitch_analysis_core_FIX.c:135:2
   11e2c:    d4 e9 38 11       	r1 = [sp+312]			  ## pitch_analysis_core_FIX.c:135:2
   11e30:    81 32             	[sp+72] = r1			  ## pitch_analysis_core_FIX.c:135:2
   11e32:    d4 e9 34 11       	r1 = [sp+308]			  ## pitch_analysis_core_FIX.c:135:2
   11e36:    81 2c             	[sp+48] = r1			  ## pitch_analysis_core_FIX.c:135:2
   11e38:    d4 e9 30 11       	r1 = [sp+304]			  ## pitch_analysis_core_FIX.c:135:2
   11e3c:    41 f0 40 01       	r1 = 0x140  # <var_bss_size+0x34 : 140 >			  ## pitch_analysis_core_FIX.c:135:2
   11e40:    81 28             		 [sp+32] = r1			  ## pitch_analysis_core_FIX.c:135:2
   11e42:    21 03             	rep 0x6 r1 {			  ## pitch_analysis_core_FIX.c:135:2
   11e44:    d4 ed 34 60       		r6 = h[r3++=0x4] (s)			  ## pitch_analysis_core_FIX.c:135:2
   11e48:    c6 06             		h[r4++=0x2] = r6
                               	}			  ## pitch_analysis_core_FIX.c:135:2
   11e4a:    f1 5b             	if (r1 != 0) goto -0xa <silk_pitch_analysis_core+0xE6 : 11e42 >			  ## pitch_analysis_core_FIX.c:135:2
   11e4c:    69 20             	r1 = 0xa0			  ## pitch_analysis_core_FIX.c:135:2
   11e4e:    03 30             	r3 = [sp+64]			  ## pitch_analysis_core_FIX.c:135:2
   11e50:    21 03             	rep 0x6 r1 {			  ## pitch_analysis_core_FIX.c:135:2
   11e52:    d4 ed 04 40       		r4 = h[r0++=0x4] (s)			  ## pitch_analysis_core_FIX.c:135:2
   11e56:    b4 06             		h[r3++=0x2] = r4
                               	}			  ## pitch_analysis_core_FIX.c:135:2
   11e58:    f1 5b             	if (r1 != 0) goto -0xa <silk_pitch_analysis_core+0xF4 : 11e50 >			  ## pitch_analysis_core_FIX.c:135:2
   11e5a:    b1 d6             	r1 = r11  #
   11e5c:    00 2b             		 r0 = [sp+44]			  ## pitch_analysis_core_FIX.c:194:51
   11e5e:    e0 e0 7e 0d       	r0 = r0 + 0x3F80			  ## pitch_analysis_core_FIX.c:194:51
   11e62:    80 22             	[sp+8] = r0			  ## pitch_analysis_core_FIX.c:194:51
   11e64:    60 3f             	r0 = 0x9f			  ## pitch_analysis_core_FIX.c:194:51
   11e66:    04 8a             	goto 0x14 <silk_pitch_analysis_core+0x120 : 11e7c >			  ## pitch_analysis_core_FIX.c:194:51
   11e68:    54 ed 12 30       	r3 = h[r1+0x2] (s)			  ## pitch_analysis_core_FIX.c:238:19
   11e6c:    54 ed 10 40       	r4 = h[r1+0x0] (s)			  ## pitch_analysis_core_FIX.c:238:19
   11e70:    43 18             	r3 += r4			  ## pitch_analysis_core_FIX.c:238:19
   11e72:    78 e0 01 43       	r4 = sat16(r3) (s)			  ## opus.c:182:2
   11e76:    9c 61             	h[r1+0x2] = r4			  ## pitch_analysis_core_FIX.c:238:17
   11e78:    f9 3e             	r1 += -0x2			  ## pitch_analysis_core_FIX.c:237:2
   11e7a:    f8 3f             	r0 += -0x1			  ## pitch_analysis_core_FIX.c:238:19
   11e7c:    00 fd f4 03       	ifs (r0 >= 0x1) goto -0x18 <silk_pitch_analysis_core+0x10C : 11e68 >
   11e80:    d0 e9 0d 80       	d[sp+12] = r9_r8
   11e84:    c3 14             	r11 = 0
   11e86:    c0 16             	r0 = r12			  ## opus_demo.c:208:2
   11e88:    41 20             	r1 = 0x0			  ## opus_demo.c:208:2
   11e8a:    53 21             	r3 = 0x41			  ## opus_demo.c:208:2
   11e8c:    03 03             	rep 0x2 r3 {			  ## opus_demo.c:208:2
   11e8e:    81 05             		[r0++=0x4] = r1
                               	}			  ## opus_demo.c:208:2
   11e90:    f3 5d             	if (r3 != 0) goto -0x6 <silk_pitch_analysis_core+0x130 : 11e8c >			  ## opus_demo.c:208:2
   11e92:    00 31             	r0 = [sp+68]			  ## pitch_analysis_core_FIX.c:247:7
   11e94:    0e f1 06 00       	r14 = r0 + 0x6  #			  ## pitch_analysis_core_FIX.c:247:7
   11e98:    00 30             		 r0 = [sp+64]			  ## pitch_analysis_core_FIX.c:247:7
   11e9a:    02 e1 de 00       	r2 = r0 + 0xde			  ## pitch_analysis_core_FIX.c:247:7
   11e9e:    0d e1 a0 00       	r13 = r0 + 0xa0			  ## pitch_analysis_core_FIX.c:246:16
   11ea2:    34 86             	goto 0xcc <silk_pitch_analysis_core+0x214 : 11f70 >
   11ea4:    4b 28             	r3 = 0x28			  ## pitch_analysis_core_FIX.c:258:3
   11ea6:    50 21             	r0 = 0x41			  ## pitch_analysis_core_FIX.c:258:3
   11ea8:    31 f1 70 df       	r1 = r13 + -0x90  #			  ## pitch_analysis_core_FIX.c:258:43
   11eac:    80 20             		 [sp] = r0			  ## pitch_analysis_core_FIX.c:258:3
   11eae:    d0 d6             	r0 = r13  #			  ## pitch_analysis_core_FIX.c:258:3
   11eb0:    82 39             		 [sp+100] = r2			  ## pitch_analysis_core_FIX.c:258:3
   11eb2:    02 33             	r2 = [sp+76]			  ## pitch_analysis_core_FIX.c:258:3
   11eb4:    bf ea 26 fe       	call -0x3b4 <celt_pitch_xcorr : 11b04 >			  ## pitch_analysis_core_FIX.c:258:3
   11eb8:    d0 ec a4 00       	r0 = [r10+0x4]			  ## Inlines.h:119:20
   11ebc:    d0 e9 51 00       	d[sp+80] = r1_r0			  ## Inlines.h:119:20
   11ec0:    e2 16             	r2 = r14			  ## Inlines.h:119:20
   11ec2:    c6 14             	r14 = 0			  ## opus.c:206:4
   11ec4:    c7 14             	r15 = 0			  ## opus.c:206:4
   11ec6:    d0 16             	r0 = r13			  ## opus.c:206:4
   11ec8:    d3 16             	r3 = r13			  ## opus.c:206:4
   11eca:    4c 28             	r4 = 0x28			  ## opus.c:206:4
   11ecc:    88 14             	r9_r8 = 0			  ## opus.c:206:4
   11ece:    b1 16             	r1 = r11			  ## opus.c:206:4
   11ed0:    54 03             	rep 0xc r4 {			  ## opus.c:206:4
   11ed2:    d4 ed 02 60       		r6 = h[r0++=0x2] (s)			  ## opus.c:206:4
   11ed6:    d4 ed 32 b0       		r11 = h[r3++=0x2] (s)			  ## opus.c:206:4
   11eda:    fc e1 60 9b       		r9_r8 += r6 * r11 (s)
                               	}			  ## opus.c:206:4
   11ede:    f4 58             	if (r4 != 0) goto -0x10 <silk_pitch_analysis_core+0x174 : 11ed0 >			  ## opus.c:206:4
   11ee0:    d4 e9 61 d0       	[sp+96] = r13
   11ee4:    33 e1 f0 df       	r3 = r13 + -0x10			  ## pitch_analysis_core_FIX.c:252:26
   11ee8:    4b e0 28 00       	r11 = 0x28 <WOLAAnalysisFilter_Float_M64_m4_r1+0x24 : 28 >			  ## opus.c:206:4
   11eec:    36 16             	r6 = r3			  ## opus.c:206:4
   11eee:    5b 03             	rep 0xc r11 {			  ## opus.c:206:4
   11ef0:    d4 ed 62 40       		r4 = h[r6++=0x2] (s)			  ## opus.c:206:4
   11ef4:    d4 ed 32 00       		r0 = h[r3++=0x2] (s)			  ## opus.c:206:4
   11ef8:    fc e1 40 f0       		r15_r14 += r4 * r0 (s)
                               	}			  ## opus.c:206:4
   11efc:    8b f8 f7 01       	if (r11 != 0x0) goto -0x12 <silk_pitch_analysis_core+0x192 : 11eee >			  ## opus.c:206:4
   11f00:    b4 e0 80 0e       	r0 = r8 + r14			  ## pitch_analysis_core_FIX.c:263:16
   11f04:    2e 16             	r14 = r2			  ## pitch_analysis_core_FIX.c:263:16
   11f06:    1b d6             	r11 = r1  #
   11f08:    02 39             		 r2 = [sp+100]
   11f0a:    c1 ff 00 71 02 00 	r1 = 0x27100 <text_size+0x7100 : 27100 >			  ## pitch_analysis_core_FIX.c:264:16
   11f10:    01 18             	r1 += r0			  ## pitch_analysis_core_FIX.c:264:16
   11f12:    d0 e9 50 80       	r9_r8 = d[sp+80]
   11f16:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## Inlines.h:119:20
   11f1a:    d0 e1 0e 80       	r9_r8 <<= 0xe			  ## Inlines.h:119:35
   11f1e:    f6 e1 80 91       	r9_r8 = r9_r8 / r1 (s)			  ## Inlines.h:122:20
   11f22:    e0 e1 82 b0       	r0 = r11 * 0x82			  ## pitch_analysis_core_FIX.c:266:3
   11f26:    d8 ed c1 80       	h[r12+r0] = r8			  ## pitch_analysis_core_FIX.c:266:40
   11f2a:    43 20             	r3 = 0x0			  ## pitch_analysis_core_FIX.c:266:40
   11f2c:    ed 16             	r13 = r14
   11f2e:    24 16             	r4 = r2
   11f30:    04 94             	goto 0x28 <silk_pitch_analysis_core+0x1FE : 11f5a >
   11f32:    d8 ec aa 83       	r8 = [r10+r3<<2]			  ## Inlines.h:119:20
   11f36:    54 ed 40 00       	r0 = h[r4+0x0] (s)			  ## pitch_analysis_core_FIX.c:280:17
   11f3a:    57 ed 40 6b       	r6 = h[r4+-0x50] (s)			  ## pitch_analysis_core_FIX.c:280:17
   11f3e:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## Inlines.h:119:20
   11f42:    d0 e1 0e 80       	r9_r8 <<= 0xe			  ## Inlines.h:119:35
   11f46:    00 1b             	r0 *= r0			  ## pitch_analysis_core_FIX.c:280:17
   11f48:    66 1b             	r6 *= r6			  ## pitch_analysis_core_FIX.c:280:17
   11f4a:    60 1e             	r0 = r6 - r0			  ## pitch_analysis_core_FIX.c:280:17
   11f4c:    01 18             	r1 += r0			  ## pitch_analysis_core_FIX.c:280:17
   11f4e:    f6 e1 80 91       	r9_r8 = r9_r8 / r1 (s)			  ## Inlines.h:122:20
   11f52:    d0 ed d3 80       	h[r13++=0x2] = r8			  ## pitch_analysis_core_FIX.c:284:56
   11f56:    fb 3f             	r3 += -0x1			  ## pitch_analysis_core_FIX.c:270:3
   11f58:    fc 3e             	r4 += -0x2			  ## pitch_analysis_core_FIX.c:270:3
   11f5a:    f3 f8 ea 81       	if (r3 != -0x40) goto -0x2c <silk_pitch_analysis_core+0x1D6 : 11f32 >
   11f5e:    0e e1 82 e0       	r14 = r14 + 0x82			  ## pitch_analysis_core_FIX.c:247:2
   11f62:    d2 30             	r2 += 0x50			  ## pitch_analysis_core_FIX.c:247:2
   11f64:    0b e1 01 b0       	r11 = r11 + 0x1			  ## pitch_analysis_core_FIX.c:247:22
   11f68:    d4 e9 60 d0       	r13 = [sp+96]
   11f6c:    0d e1 50 d0       	r13 = r13 + 0x50			  ## pitch_analysis_core_FIX.c:288:14
   11f70:    8b f8 98 05       	if (r11 != 0x2) goto -0xd0 <silk_pitch_analysis_core+0x148 : 11ea4 >			  ## pitch_analysis_core_FIX.c:247:2
   11f74:    40 f0 b2 2a       	r0 = 0x2ab2  # <WOLASynthesisFilter_Float_M256_m4_r1+0x2AE : 2ab2 >			  ## pitch_analysis_core_FIX.c:172:13
   11f78:    01 2b             		 r1 = [sp+44]			  ## pitch_analysis_core_FIX.c:172:13
   11f7a:    10 18             	r0 += r1			  ## pitch_analysis_core_FIX.c:172:13
   11f7c:    4a e0 48 00       	r10 = 0x48 <os_bss_size+0xC : 48 >			  ## pitch_analysis_core_FIX.c:172:13
   11f80:    42 e0 80 fb       	r2 = -0x480 <RAM_LIMIT_H+0xFFFFFFFFFFE5FB80 : fffffffffffffb80 >			  ## pitch_analysis_core_FIX.c:172:13
   11f84:    04 99             	goto 0x32 <silk_pitch_analysis_core+0x25C : 11fb8 >			  ## pitch_analysis_core_FIX.c:172:13
   11f86:    57 ed 0e 47       	r4 = h[r0+-0x82] (s)			  ## pitch_analysis_core_FIX.c:294:10
   11f8a:    54 ed 00 60       	r6 = h[r0+0x0] (s)			  ## pitch_analysis_core_FIX.c:295:7
   11f8e:    64 18             	r4 += r6			  ## pitch_analysis_core_FIX.c:295:5
   11f90:    ab bf             	r3 = r2 >>> 0x1f			  ## pitch_analysis_core_FIX.c:296:10
   11f92:    f0 e1 40 63       	r6 = r4 * r3			  ## pitch_analysis_core_FIX.c:296:10
   11f96:    f8 e1 40 82       	r9_r8 = r4 * r2 (u)			  ## pitch_analysis_core_FIX.c:296:10
   11f9a:    96 18             	r6 += r9			  ## pitch_analysis_core_FIX.c:296:10
   11f9c:    f0 e1 00 12       	r1 = r0 * r2			  ## pitch_analysis_core_FIX.c:296:10
   11fa0:    b4 e0 60 91       	r9 = r6 + r1			  ## pitch_analysis_core_FIX.c:296:10
   11fa4:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## pitch_analysis_core_FIX.c:296:10
   11fa8:    b4 e0 80 14       	r1 = r8 + r4			  ## pitch_analysis_core_FIX.c:296:10
   11fac:    53 ed 0f 17       	h[r0+-0x82] = r1			  ## pitch_analysis_core_FIX.c:297:27
   11fb0:    f8 3e             	r0 += -0x2			  ## pitch_analysis_core_FIX.c:293:3
   11fb2:    c2 30             	r2 += 0x10			  ## pitch_analysis_core_FIX.c:293:3
   11fb4:    3a e1 ff af       	r10 = r10 + -0x1			  ## pitch_analysis_core_FIX.c:293:46
   11fb8:    0a fd e5 11       	ifs (r10 >= 0x8) goto -0x36 <silk_pitch_analysis_core+0x22A : 11f86 >
   11fbc:    00 2a             	r0 = [sp+40]			  ## pitch_analysis_core_FIX.c:302:18
   11fbe:    c0 e1 01 80       	r8 = r0 << 0x1			  ## pitch_analysis_core_FIX.c:302:18
   11fc2:    09 e1 04 80       	r9 = r8 + 0x4			  ## pitch_analysis_core_FIX.c:302:18
   11fc6:    40 20             	r0 = 0x0
   11fc8:    04 85             	goto 0xa <silk_pitch_analysis_core+0x278 : 11fd4 >
   11fca:    f8 e8 94 10       	r1 = sp + 148
   11fce:    d8 ec 1b 00       	[r1+r0<<2] = r0			  ## sort.c:275:12
   11fd2:    c0 21             	r0 += 0x1			  ## sort.c:274:22
   11fd4:    89 ed f9 01       	ifs (r0 < r9) goto -0xe <silk_pitch_analysis_core+0x26E : 11fca >			  ## sort.c:274:2
   11fd8:    c5 d4             	r13 = 0  #
   11fda:    00 31             		 r0 = [sp+68]			  ## sort.c:265:11
   11fdc:    0a e1 06 00       	r10 = r0 + 0x6			  ## sort.c:265:11
   11fe0:    43 21             	r3 = 0x1
   11fe2:    f8 e8 94 b0       	r11 = sp + 148
   11fe6:    04 9a             	goto 0x34 <silk_pitch_analysis_core+0x2C0 : 1201c >
   11fe8:    d8 ed ca 13       	r1 = h[r12+r3<<1] (s)			  ## sort.c:280:11
   11fec:    d6 16             	r6 = r13			  ## sort.c:280:11
   11fee:    a2 16             	r2 = r10			  ## sort.c:280:11
   11ff0:    b4 16             	r4 = r11			  ## sort.c:280:11
   11ff2:    04 85             	goto 0xa <silk_pitch_analysis_core+0x2A2 : 11ffe >			  ## sort.c:280:11
   11ff4:    a8 06             	h[r2++=-0x2] = r0			  ## sort.c:282:17
   11ff6:    40 60             	r0 = [r4+0x0] 			  ## sort.c:283:19
   11ff8:    c0 61             	[r4+0x4] = r0			  ## sort.c:283:17
   11ffa:    fe 3f             	r6 += -0x1			  ## sort.c:281:3
   11ffc:    fc 3c             	r4 += -0x4			  ## sort.c:281:3
   11ffe:    86 fd 04 00       	ifs (r6 < 0x0) goto 0x8 <silk_pitch_analysis_core+0x2AE : 1200a >
   12002:    57 ed 2e 0f       	r0 = h[r2+-0x2] (s)			  ## sort.c:281:43
   12006:    00 ee f5 11       	ifs (r1 > r0) goto -0x16 <silk_pitch_analysis_core+0x298 : 11ff4 >			  ## sort.c:281:43
   1200a:    0d f1 01 d0       	r13 = r13 + 0x1  #			  ## sort.c:279:2
   1200e:    a9 60             		 h[r2+0x0] = r1			  ## sort.c:285:16
   12010:    0a f1 02 a0       	r10 = r10 + 0x2  #			  ## sort.c:279:2
   12014:    c3 61             		 [r4+0x4] = r3			  ## sort.c:286:16
   12016:    0b e1 04 b0       	r11 = r11 + 0x4			  ## sort.c:279:2
   1201a:    c3 21             	r3 += 0x1			  ## sort.c:279:22
   1201c:    89 ed e4 31       	ifs (r3 < r9) goto -0x38 <silk_pitch_analysis_core+0x28C : 11fe8 >			  ## sort.c:279:2
   12020:    9b d6             	r11 = r9  #
   12022:    00 31             		 r0 = [sp+68]
   12024:    0a 88             	r2 = r0 + 0x8			  ## sort.c:265:11
   12026:    0b 8a             	r3 = r0 + 0xa			  ## sort.c:265:11
   12028:    0a e1 03 80       	r10 = r8 + 0x3
   1202c:    14 81             	goto 0x42 <silk_pitch_analysis_core+0x314 : 12070 >
   1202e:    d8 ed ca 1b       	r1 = h[r12+r11<<1] (s)			  ## sort.c:292:11
   12032:    d8 ed ca 0a       	r0 = h[r12+r10<<1] (s)			  ## sort.c:293:15
   12036:    80 ee 19 10       	ifs (r1 <= r0) goto 0x32 <silk_pitch_analysis_core+0x310 : 1206c >			  ## sort.c:293:15
   1203a:    80 16             	r0 = r8
   1203c:    04 89             	goto 0x12 <silk_pitch_analysis_core+0x2F4 : 12050 >
   1203e:    d8 ed 39 40       	h[r3+r0<<1] = r4			  ## sort.c:295:18
   12042:    04 a2             	r4 = r0 << 0x2			  ## sort.c:296:20
   12044:    f8 e8 94 60       	r6 = sp + 148			  ## sort.c:296:20
   12048:    64 18             	r4 += r6			  ## sort.c:296:20
   1204a:    46 62             	r6 = [r4+0x8] 			  ## sort.c:296:20
   1204c:    c6 63             	[r4+0xc] = r6			  ## sort.c:296:18
   1204e:    f8 3f             	r0 += -0x1			  ## sort.c:294:4
   12050:    0c 82             	r4 = r0 + 0x2			  ## sort.c:294:24
   12052:    84 fd 04 00       	ifs (r4 < 0x0) goto 0x8 <silk_pitch_analysis_core+0x302 : 1205e >			  ## sort.c:294:24
   12056:    d8 ed 2a 40       	r4 = h[r2+r0<<1] (s)			  ## sort.c:294:44
   1205a:    04 ee f0 11       	ifs (r1 > r4) goto -0x20 <silk_pitch_analysis_core+0x2E2 : 1203e >			  ## sort.c:294:44
   1205e:    d8 ed 39 10       	h[r3+r0<<1] = r1			  ## sort.c:298:17
   12062:    f8 e8 94 10       	r1 = sp + 148			  ## sort.c:298:17
   12066:    c1 2c             	r1 += 0xc			  ## sort.c:299:17
   12068:    d8 ec 1b b0       	[r1+r0<<2] = r11			  ## sort.c:299:17
   1206c:    0b e1 01 b0       	r11 = r11 + 0x1			  ## sort.c:291:22
   12070:    8b fe dd 81       	ifs (r11 <= 0x40) goto -0x46 <silk_pitch_analysis_core+0x2D2 : 1202e >
   12074:    41 f0 cc 0c       	r1 = 0xccc  # <usb_code_size+0x208 : ccc >			  ## pitch_analysis_core_FIX.c:307:19
   12078:    00 30             		 r0 = [sp+64]			  ## pitch_analysis_core_FIX.c:307:19
   1207a:    55 ed 00 04       	r0 = h[r0+0x140] (s)			  ## pitch_analysis_core_FIX.c:307:19
   1207e:    01 ee 07 00       	ifs (r0 > r1) goto 0xe <silk_pitch_analysis_core+0x334 : 12090 >			  ## pitch_analysis_core_FIX.c:308:6
   12082:    c1 d4             	r9 = 0  #
   12084:    01 2d             		 r1 = [sp+52]			  ## opus_demo.c:208:2
   12086:    40 20             	r0 = 0x0			  ## opus_demo.c:208:2
   12088:    07 03             	rep 0x2 r7 {			  ## opus_demo.c:208:2
   1208a:    90 05             		[r1++=0x4] = r0
                               	}			  ## opus_demo.c:208:2
   1208c:    f7 5d             	if (r7 != 0) goto -0x6 <silk_pitch_analysis_core+0x32C : 12088 >			  ## opus_demo.c:208:2
   1208e:    25 9b             	goto 0x4b6 <silk_pitch_analysis_core+0x7EA : 12546 >
   12090:    01 2e             	r1 = [sp+56]			  ## pitch_analysis_core_FIX.c:316:14
   12092:    f8 e1 00 31       	r3_r2 = r0 * r1 (s)			  ## pitch_analysis_core_FIX.c:316:14
   12096:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## pitch_analysis_core_FIX.c:316:14
   1209a:    40 20             	r0 = 0x0
   1209c:    d4 e9 48 a0       	r10 = [sp+72]
   120a0:    04 89             	goto 0x12 <silk_pitch_analysis_core+0x358 : 120b4 >
   120a2:    f8 e8 94 10       	r1 = sp + 148
   120a6:    d8 ec 1a 40       	r4 = [r1+r0<<2]			  ## pitch_analysis_core_FIX.c:320:16
   120aa:    44 a1             	r4 = r4 << 0x1			  ## pitch_analysis_core_FIX.c:320:16
   120ac:    c4 30             	r4 += 0x10			  ## pitch_analysis_core_FIX.c:320:16
   120ae:    d8 ec 1b 40       	[r1+r0<<2] = r4			  ## pitch_analysis_core_FIX.c:320:14
   120b2:    c0 21             	r0 += 0x1			  ## pitch_analysis_core_FIX.c:317:34
   120b4:    09 ed 05 00       	ifs (r0 >= r9) goto 0xa <silk_pitch_analysis_core+0x366 : 120c2 >
   120b8:    d8 ed ca 10       	r1 = h[r12+r0<<1] (s)			  ## pitch_analysis_core_FIX.c:319:7
   120bc:    02 ee f1 11       	ifs (r1 > r2) goto -0x1e <silk_pitch_analysis_core+0x346 : 120a2 >			  ## pitch_analysis_core_FIX.c:319:7
   120c0:    09 16             	r9 = r0
   120c2:    80 14             	r1_r0 = 0
   120c4:    04 84             	goto 0x8 <silk_pitch_analysis_core+0x372 : 120ce >
   120c6:    02 37             	r2 = [sp+92]			  ## pitch_analysis_core_FIX.c:330:26
   120c8:    d8 ed 29 01       	h[r2+r1<<1] = r0			  ## pitch_analysis_core_FIX.c:330:26
   120cc:    c1 21             	r1 += 0x1			  ## pitch_analysis_core_FIX.c:329:2
   120ce:    91 f8 fa 0d       	if (r1 != 0x86) goto -0xc <silk_pitch_analysis_core+0x36A : 120c6 >			  ## pitch_analysis_core_FIX.c:329:2
   120d2:    01 37             	r1 = [sp+92]
   120d4:    f9 26             	r1 += -0x1a
   120d6:    42 21             	r2 = 0x1
   120d8:    04 87             	goto 0xe <silk_pitch_analysis_core+0x38C : 120e8 >
   120da:    f8 e8 94 30       	r3 = sp + 148
   120de:    d8 ec 3a 30       	r3 = [r3+r0<<2]			  ## pitch_analysis_core_FIX.c:333:10
   120e2:    d8 ed 19 23       	h[r1+r3<<1] = r2			  ## pitch_analysis_core_FIX.c:333:34
   120e6:    c0 21             	r0 += 0x1			  ## pitch_analysis_core_FIX.c:332:34
   120e8:    89 ed f7 01       	ifs (r0 < r9) goto -0x12 <silk_pitch_analysis_core+0x37E : 120da >			  ## pitch_analysis_core_FIX.c:332:2
   120ec:    00 27             	r0 = [sp+28]			  ## pitch_analysis_core_FIX.c:172:13
   120ee:    c0 22             	r0 += 0x2			  ## pitch_analysis_core_FIX.c:172:13
   120f0:    61 32             	r1 = 0x92			  ## pitch_analysis_core_FIX.c:172:13
   120f2:    d4 e9 10 80       	r8 = [sp+16]			  ## pitch_analysis_core_FIX.c:172:13
   120f6:    04 87             	goto 0xe <silk_pitch_analysis_core+0x3AA : 12106 >			  ## pitch_analysis_core_FIX.c:172:13
   120f8:    0a 7f             	r2 = h[r0+-0x2] (u)			  ## pitch_analysis_core_FIX.c:339:4
   120fa:    0b 7e             	r3 = h[r0+-0x4] (u)			  ## pitch_analysis_core_FIX.c:339:33
   120fc:    32 d8             	r2 += r3  #			  ## pitch_analysis_core_FIX.c:339:31
   120fe:    0c 60             		 r4 = h[r0+0x0] (u)			  ## pitch_analysis_core_FIX.c:338:26
   12100:    42 18             	r2 += r4			  ## pitch_analysis_core_FIX.c:338:26
   12102:    8a 06             	h[r0++=-0x2] = r2			  ## pitch_analysis_core_FIX.c:338:26
   12104:    f9 3f             	r1 += -0x1			  ## pitch_analysis_core_FIX.c:337:47
   12106:    01 fe f7 1f       	ifs (r1 > 0xf) goto -0x12 <silk_pitch_analysis_core+0x39C : 120f8 >			  ## pitch_analysis_core_FIX.c:337:2
   1210a:    40 30             	r0 = 0x10
   1210c:    41 20             	r1 = 0x0
   1210e:    81 2e             	[sp+56] = r1			  ## pitch_analysis_core_FIX.c:172:13
   12110:    04 8e             	goto 0x1c <silk_pitch_analysis_core+0x3D2 : 1212e >			  ## pitch_analysis_core_FIX.c:172:13
   12112:    d8 ed 8a 10       	r1 = h[r8+r0<<1] (s)			  ## pitch_analysis_core_FIX.c:344:7
   12116:    c0 21             	r0 += 0x1			  ## pitch_analysis_core_FIX.c:344:16
   12118:    81 fd 09 02       	ifs (r1 < 0x1) goto 0x12 <silk_pitch_analysis_core+0x3D2 : 1212e >
   1211c:    31 f1 ff 0f       	r1 = r0 + -0x1  #			  ## pitch_analysis_core_FIX.c:345:26
   12120:    03 2e             		 r3 = [sp+56]			  ## pitch_analysis_core_FIX.c:345:26
   12122:    f8 e8 94 20       	r2 = sp + 148			  ## pitch_analysis_core_FIX.c:345:26
   12126:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## pitch_analysis_core_FIX.c:345:26
   1212a:    c3 21             	r3 += 0x1			  ## pitch_analysis_core_FIX.c:346:17
   1212c:    83 2e             	[sp+56] = r3
   1212e:    90 fd f0 21       	ifs (r0 < 0x90) goto -0x20 <silk_pitch_analysis_core+0x3B6 : 12112 >			  ## pitch_analysis_core_FIX.c:343:2
   12132:    00 27             	r0 = [sp+28]			  ## pitch_analysis_core_FIX.c:172:13
   12134:    c0 22             	r0 += 0x2			  ## pitch_analysis_core_FIX.c:172:13
   12136:    61 32             	r1 = 0x92			  ## pitch_analysis_core_FIX.c:172:13
   12138:    04 89             	goto 0x12 <silk_pitch_analysis_core+0x3F0 : 1214c >			  ## pitch_analysis_core_FIX.c:172:13
   1213a:    0a 7f             	r2 = h[r0+-0x2] (u)			  ## pitch_analysis_core_FIX.c:352:29
   1213c:    0b 7e             	r3 = h[r0+-0x4] (u)			  ## pitch_analysis_core_FIX.c:353:6
   1213e:    32 d8             	r2 += r3  #			  ## pitch_analysis_core_FIX.c:353:4
   12140:    0c 7d             		 r4 = h[r0+-0x6] (u)			  ## pitch_analysis_core_FIX.c:353:35
   12142:    42 d8             	r2 += r4  #			  ## pitch_analysis_core_FIX.c:353:33
   12144:    0e 60             		 r6 = h[r0+0x0] (u)			  ## pitch_analysis_core_FIX.c:352:26
   12146:    62 18             	r2 += r6			  ## pitch_analysis_core_FIX.c:352:26
   12148:    8a 06             	h[r0++=-0x2] = r2			  ## pitch_analysis_core_FIX.c:352:26
   1214a:    f9 3f             	r1 += -0x1			  ## pitch_analysis_core_FIX.c:351:47
   1214c:    01 fe f5 1f       	ifs (r1 > 0xf) goto -0x16 <silk_pitch_analysis_core+0x3DE : 1213a >			  ## pitch_analysis_core_FIX.c:351:2
   12150:    42 2e             	r2 = 0xe
   12152:    43 20             	r3 = 0x0
   12154:    40 20             	r0 = 0x0
   12156:    01 f1 1e 80       	r1 = r8 + 0x1e  #			  ## pitch_analysis_core_FIX.c:172:13
   1215a:    80 38             		 [sp+96] = r0			  ## pitch_analysis_core_FIX.c:172:13
   1215c:    04 8c             	goto 0x18 <silk_pitch_analysis_core+0x41A : 12176 >			  ## pitch_analysis_core_FIX.c:172:13
   1215e:    d8 ed 1a 03       	r0 = h[r1+r3<<1] (s)			  ## pitch_analysis_core_FIX.c:358:7
   12162:    80 fd 06 02       	ifs (r0 < 0x1) goto 0xc <silk_pitch_analysis_core+0x416 : 12172 >			  ## pitch_analysis_core_FIX.c:358:7
   12166:    00 37             	r0 = [sp+92]			  ## pitch_analysis_core_FIX.c:359:26
   12168:    04 38             	r4 = [sp+96]			  ## pitch_analysis_core_FIX.c:359:26
   1216a:    d8 ed 09 24       	h[r0+r4<<1] = r2			  ## pitch_analysis_core_FIX.c:359:26
   1216e:    c4 21             	r4 += 0x1			  ## pitch_analysis_core_FIX.c:360:17
   12170:    84 38             	[sp+96] = r4
   12172:    c3 21             	r3 += 0x1			  ## pitch_analysis_core_FIX.c:357:2
   12174:    c2 21             	r2 += 0x1			  ## pitch_analysis_core_FIX.c:357:2
   12176:    93 f8 f2 07       	if (r3 != 0x83) goto -0x1c <silk_pitch_analysis_core+0x402 : 1215e >
   1217a:    40 e0 08 01       	r0 = 0x108 <os_code_size+0x5E : 108 >			  ## opus_demo.c:208:2
   1217e:    c1 16             	r1 = r12			  ## opus_demo.c:208:2
   12180:    42 20             	r2 = 0x0			  ## opus_demo.c:208:2
   12182:    00 03             	rep 0x2 r0 {			  ## opus_demo.c:208:2
   12184:    92 05             		[r1++=0x4] = r2
                               	}			  ## opus_demo.c:208:2
   12186:    f0 5d             	if (r0 != 0) goto -0x6 <silk_pitch_analysis_core+0x426 : 12182 >			  ## opus_demo.c:208:2
   12188:    43 20             	r3 = 0x0
   1218a:    40 f0 30 27       	r0 = 0x2730  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xF2C : 2730 >			  ## pitch_analysis_core_FIX.c:373:16
   1218e:    01 2b             		 r1 = [sp+44]			  ## pitch_analysis_core_FIX.c:373:16
   12190:    10 18             	r0 += r1			  ## pitch_analysis_core_FIX.c:373:16
   12192:    24 96             	goto 0xac <silk_pitch_analysis_core+0x4E4 : 12240 >			  ## pitch_analysis_core_FIX.c:373:16
   12194:    c6 d4             	r14 = 0  #			  ## opus.c:206:4
   12196:    01 39             		 r1 = [sp+100]			  ## opus.c:206:4
   12198:    c7 14             	r15 = 0			  ## opus.c:206:4
   1219a:    10 16             	r0 = r1			  ## opus.c:206:4
   1219c:    4a 28             	r2 = 0x28			  ## opus.c:206:4
   1219e:    88 14             	r9_r8 = 0			  ## opus.c:206:4
   121a0:    52 03             	rep 0xc r2 {			  ## opus.c:206:4
   121a2:    d4 ed 02 40       		r4 = h[r0++=0x2] (s)			  ## opus.c:206:4
   121a6:    d4 ed 12 60       		r6 = h[r1++=0x2] (s)			  ## opus.c:206:4
   121aa:    fc e1 40 96       		r9_r8 += r4 * r6 (s)
                               	}			  ## opus.c:206:4
   121ae:    f2 58             	if (r2 != 0) goto -0x10 <silk_pitch_analysis_core+0x444 : 121a0 >			  ## opus.c:206:4
   121b0:    00 e1 01 80       	r0 = r8 + 0x1			  ## pitch_analysis_core_FIX.c:379:19
   121b4:    e0 f1 84 30       	r0 = r3 * 0x84  #
   121b8:    80 31             		 [sp+68] = r0
   121ba:    a3 d6             	r3 = r10  #
   121bc:    83 30             		 [sp+64] = r3
   121be:    f8 32             	r0 += -0xe
   121c0:    80 33             	[sp+76] = r0
   121c2:    46 20             	r6 = 0x0
   121c4:    d0 e9 51 e0       	d[sp+80] = r15_r14
   121c8:    14 93             	goto 0x66 <silk_pitch_analysis_core+0x4D4 : 12230 >
   121ca:    ea d5             	r11_r10 = r15_r14  #
   121cc:    00 37             		 r0 = [sp+92]			  ## pitch_analysis_core_FIX.c:381:8
   121ce:    d8 ed 0a 16       	r1 = h[r0+r6<<1] (s)			  ## pitch_analysis_core_FIX.c:381:8
   121d2:    10 a1             	r0 = r1 << 0x1			  ## pitch_analysis_core_FIX.c:382:27
   121d4:    4d f0 28 00       	r13 = 0x28  # <WOLAAnalysisFilter_Float_M64_m4_r1+0x24 : 28 >			  ## opus.c:206:4
   121d8:    02 39             		 r2 = [sp+100]			  ## opus.c:206:4
   121da:    b4 e0 22 e0       	r14 = r2 - r0			  ## pitch_analysis_core_FIX.c:382:27
   121de:    e0 16             	r0 = r14			  ## opus.c:206:4
   121e0:    a8 15             	r9_r8 = r11_r10			  ## opus.c:206:4
   121e2:    5d 03             	rep 0xc r13 {			  ## opus.c:206:4
   121e4:    d4 ed 22 f0       		r15 = h[r2++=0x2] (s)			  ## opus.c:206:4
   121e8:    d4 ed 02 40       		r4 = h[r0++=0x2] (s)			  ## opus.c:206:4
   121ec:    fc e1 f0 94       		r9_r8 += r15 * r4 (s)
                               	}			  ## opus.c:206:4
   121f0:    8d f8 f7 01       	if (r13 != 0x0) goto -0x12 <silk_pitch_analysis_core+0x486 : 121e2 >			  ## opus.c:206:4
   121f4:    88 fd 14 02       	ifs (r8 < 0x1) goto 0x28 <silk_pitch_analysis_core+0x4C4 : 12220 >
   121f8:    e0 16             	r0 = r14			  ## opus.c:206:4
   121fa:    4a 28             	r2 = 0x28			  ## opus.c:206:4
   121fc:    52 03             	rep 0xc r2 {			  ## opus.c:206:4
   121fe:    d4 ed e2 40       		r4 = h[r14++=0x2] (s)			  ## opus.c:206:4
   12202:    d4 ed 02 30       		r3 = h[r0++=0x2] (s)			  ## opus.c:206:4
   12206:    fc e1 40 b3       		r11_r10 += r4 * r3 (s)
                               	}			  ## opus.c:206:4
   1220a:    f2 58             	if (r2 != 0) goto -0x10 <silk_pitch_analysis_core+0x4A0 : 121fc >			  ## opus.c:206:4
   1220c:    00 31             	r0 = [sp+68]			  ## pitch_analysis_core_FIX.c:393:7
   1220e:    a0 d8             	r0 += r10  #			  ## pitch_analysis_core_FIX.c:393:7
   12210:    03 32             		 r3 = [sp+72]			  ## pitch_analysis_core_FIX.c:393:7
   12212:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## Inlines.h:119:20
   12216:    d0 e1 0e 80       	r9_r8 <<= 0xe			  ## Inlines.h:119:35
   1221a:    f6 e1 80 90       	r9_r8 = r9_r8 / r0 (s)			  ## Inlines.h:122:20
   1221e:    04 81             	goto 0x2 <silk_pitch_analysis_core+0x4C6 : 12222 >
   12220:    c0 14             	r8 = 0
   12222:    00 33             	r0 = [sp+76]
   12224:    10 18             	r0 += r1
   12226:    d8 ed c9 80       	h[r12+r0<<1] = r8
   1222a:    c6 21             	r6 += 0x1			  ## pitch_analysis_core_FIX.c:380:35
   1222c:    d0 e9 50 e0       	r15_r14 = d[sp+80]
   12230:    00 38             	r0 = [sp+96]			  ## pitch_analysis_core_FIX.c:380:3
   12232:    80 ed ca 61       	ifs (r6 < r0) goto -0x6c <silk_pitch_analysis_core+0x46E : 121ca >			  ## pitch_analysis_core_FIX.c:380:3
   12236:    3a d6             	r10 = r3  #
   12238:    03 30             		 r3 = [sp+64]
   1223a:    c3 21             	r3 += 0x1			  ## pitch_analysis_core_FIX.c:374:29
   1223c:    00 39             	r0 = [sp+100]			  ## pitch_analysis_core_FIX.c:401:14
   1223e:    d0 30             	r0 += 0x50			  ## pitch_analysis_core_FIX.c:401:14
   12240:    80 39             	[sp+100] = r0
   12242:    87 ed a7 31       	ifs (r3 < r7) goto -0xb2 <silk_pitch_analysis_core+0x438 : 12194 >
   12246:    46 20             	r6 = 0x0
   12248:    a0 16             	r0 = r10
   1224a:    b0 ed 01 30       	ifs (r0 < 0x1) {
   1224e:    40 20             		r0 = 0x0
                               	} else {
   12250:    80 a1             		r0 = r0 >> 0x1
   12252:    80 32             		[sp+72] = r0
   12254:    bf ea 66 f9       		call -0xd34
                               	} <silk_lin2log : 11524 >			  ## pitch_analysis_core_FIX.c:415:21
   12258:    4f f0 ff ff       	r15 = -0x1  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >
   1225c:    80 33             		 [sp+76] = r0
   1225e:    60 f0 00 a4       	r10 = 0x80000000  #
   12262:    00 25             		 r0 = [sp+20]
   12264:    70 1b             	r0 *= r7
   12266:    40 f0 66 06       	r0 = 0x666  # <alg_code_size+0x196 : 666 >
   1226a:    80 34             		 [sp+80] = r0
   1226c:    f0 e1 70 90       	r9 = r7 * r0
   12270:    a3 16             	r3 = r10
   12272:    c6 14             	r14 = 0
   12274:    34 8d             	goto 0xda <silk_pitch_analysis_core+0x5F4 : 12350 >
   12276:    83 37             	[sp+92] = r3
   12278:    d4 e9 61 f0       	[sp+96] = r15
   1227c:    86 39             	[sp+100] = r6
   1227e:    f8 e8 94 00       	r0 = sp + 148
   12282:    d8 ec 0a fe       	r15 = [r0+r14<<2]			  ## pitch_analysis_core_FIX.c:429:7
   12286:    3d e1 f2 ff       	r13 = r15 + -0xe
   1228a:    c0 ff e0 eb 01 00 	r0 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >
   12290:    01 e1 51 02       	r1 = r0 + 0x251
   12294:    42 20             	r2 = 0x0
   12296:    04 9a             	goto 0x34 <silk_pitch_analysis_core+0x570 : 122cc >
   12298:    e8 88             	r0 = sp + 104
   1229a:    43 20             	r3 = 0x0
   1229c:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## pitch_analysis_core_FIX.c:431:10
   122a0:    16 16             	r6 = r1			  ## pitch_analysis_core_FIX.c:436:13
   122a2:    d0 16             	r0 = r13			  ## pitch_analysis_core_FIX.c:436:13
   122a4:    c3 14             	r11 = 0			  ## pitch_analysis_core_FIX.c:436:13
   122a6:    04 8e             	goto 0x1c <silk_pitch_analysis_core+0x568 : 122c4 >			  ## pitch_analysis_core_FIX.c:436:13
   122a8:    d4 ee 6b 80       	r8 = b[r6++=0xb] (s)			  ## pitch_analysis_core_FIX.c:435:19
   122ac:    b4 e0 00 48       	r4 = r0 + r8			  ## pitch_analysis_core_FIX.c:437:20
   122b0:    d8 ed ca 44       	r4 = h[r12+r4<<1] (s)			  ## pitch_analysis_core_FIX.c:437:8
   122b4:    43 18             	r3 += r4			  ## pitch_analysis_core_FIX.c:437:6
   122b6:    ec 88             	r4 = sp + 104			  ## pitch_analysis_core_FIX.c:437:6
   122b8:    d8 ec 4b 32       	[r4+r2<<2] = r3			  ## pitch_analysis_core_FIX.c:436:11
   122bc:    00 e1 84 00       	r0 = r0 + 0x84			  ## pitch_analysis_core_FIX.c:432:4
   122c0:    0b e1 01 b0       	r11 = r11 + 0x1			  ## pitch_analysis_core_FIX.c:432:31
   122c4:    87 ed f0 b1       	ifs (r11 < r7) goto -0x20 <silk_pitch_analysis_core+0x54C : 122a8 >
   122c8:    c1 21             	r1 += 0x1			  ## pitch_analysis_core_FIX.c:430:3
   122ca:    c2 21             	r2 += 0x1			  ## pitch_analysis_core_FIX.c:430:35
   122cc:    82 f8 e4 07       	if (r2 != 0x3) goto -0x38 <silk_pitch_analysis_core+0x53C : 12298 >			  ## pitch_analysis_core_FIX.c:430:3
   122d0:    46 20             	r6 = 0x0
   122d2:    60 e0 00 34       	r3 = 0x80000000
   122d6:    40 20             	r0 = 0x0
   122d8:    04 8b             	goto 0x16 <silk_pitch_analysis_core+0x594 : 122f0 >
   122da:    e9 88             	r1 = sp + 104
   122dc:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## pitch_analysis_core_FIX.c:446:8
   122e0:    02 16             	r2 = r0			  ## pitch_analysis_core_FIX.c:446:8
   122e2:    91 ee 00 43       	ifs (r1 <= r3) {
   122e6:    31 16             		r1 = r3			  ## pitch_analysis_core_FIX.c:446:8
   122e8:    62 16             		r2 = r6
                               	}			  ## pitch_analysis_core_FIX.c:446:8
   122ea:    c0 21             	r0 += 0x1			  ## pitch_analysis_core_FIX.c:445:35
   122ec:    13 16             	r3 = r1
   122ee:    26 16             	r6 = r2
   122f0:    80 f8 f3 07       	if (r0 != 0x3) goto -0x1a <silk_pitch_analysis_core+0x57E : 122da >
   122f4:    f0 16             	r0 = r15			  ## pitch_analysis_core_FIX.c:453:17
   122f6:    bf ea 15 f9       	call -0xdd6 <silk_lin2log : 11524 >			  ## pitch_analysis_core_FIX.c:453:17
   122fa:    f0 f1 00 19       	r1 = r0 * r9  #			  ## pitch_analysis_core_FIX.c:456:29
   122fe:    02 32             		 r2 = [sp+72]			  ## pitch_analysis_core_FIX.c:456:29
   12300:    99 a7             	r1 = r1 >>> 0x7			  ## pitch_analysis_core_FIX.c:456:29
   12302:    39 1e             	r1 = r3 - r1			  ## pitch_analysis_core_FIX.c:456:27
   12304:    82 fd 0d 02       	ifs (r2 < 0x1) goto 0x1a <silk_pitch_analysis_core+0x5C6 : 12322 >
   12308:    02 2c             	r2 = [sp+48]			  ## pitch_analysis_core_FIX.c:464:24
   1230a:    04 33             	r4 = [sp+76]			  ## pitch_analysis_core_FIX.c:461:40
   1230c:    00 df             	r0 = r0 - r4  #			  ## pitch_analysis_core_FIX.c:461:40
   1230e:    22 60             		 r2 = [r2+0x0] 			  ## pitch_analysis_core_FIX.c:464:24
   12310:    00 1b             	r0 *= r0			  ## pitch_analysis_core_FIX.c:463:28
   12312:    80 a7             	r0 = r0 >> 0x7			  ## pitch_analysis_core_FIX.c:463:28
   12314:    92 1b             	r2 *= r9			  ## pitch_analysis_core_FIX.c:464:24
   12316:    aa af             	r2 = r2 >>> 0xf			  ## pitch_analysis_core_FIX.c:464:24
   12318:    02 1b             	r2 *= r0			  ## pitch_analysis_core_FIX.c:465:24
   1231a:    d0 20             	r0 += 0x40			  ## pitch_analysis_core_FIX.c:465:24
   1231c:    f4 e1 21 00       	r0 = r2 / r0 (s)			  ## pitch_analysis_core_FIX.c:465:24
   12320:    11 1e             	r1 = r1 - r0			  ## pitch_analysis_core_FIX.c:466:16
   12322:    00 34             	r0 = [sp+80]
   12324:    80 ee 0c 30       	ifs (r3 <= r0) goto 0x18 <silk_pitch_analysis_core+0x5E4 : 12340 >
   12328:    8a ee 0a 10       	ifs (r1 <= r10) goto 0x14 <silk_pitch_analysis_core+0x5E4 : 12340 >
   1232c:    c0 ff e0 eb 01 00 	r0 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:471:4
   12332:    60 18             	r0 += r6			  ## pitch_analysis_core_FIX.c:471:4
   12334:    42 e0 51 02       	r2 = 0x251 <ROM_RAM_SIZE+0x50 : 250 >			  ## pitch_analysis_core_FIX.c:471:4
   12338:    d8 ee 02 02       	r0 = b[r0+r2] (s)			  ## pitch_analysis_core_FIX.c:471:4
   1233c:    80 fd 05 22       	ifs (r0 < 0x11) goto 0xa <silk_pitch_analysis_core+0x5EE : 1234a >
   12340:    a1 d6             	r1 = r10  #
   12342:    03 37             		 r3 = [sp+92]
   12344:    d4 e9 60 f0       	r15 = [sp+96]
   12348:    06 39             	r6 = [sp+100]
   1234a:    0e e1 01 e0       	r14 = r14 + 0x1			  ## pitch_analysis_core_FIX.c:428:34
   1234e:    1a 16             	r10 = r1
   12350:    00 2e             	r0 = [sp+56]			  ## pitch_analysis_core_FIX.c:428:2
   12352:    80 ed 90 e1       	ifs (r14 < r0) goto -0xe0 <silk_pitch_analysis_core+0x51A : 12276 >			  ## pitch_analysis_core_FIX.c:428:2
   12356:    7f f8 f0 fe       	if (r15 == -0x1) goto 0x1e0 <silk_pitch_analysis_core+0x7DE : 1253a >
   1235a:    f4 f1 31 07       	r0 = r3 / r7 (s)  #			  ## pitch_analysis_core_FIX.c:490:27
   1235e:    01 2c             		 r1 = [sp+48]			  ## pitch_analysis_core_FIX.c:490:15
   12360:    00 a2             	r0 = r0 << 0x2			  ## pitch_analysis_core_FIX.c:490:27
   12362:    90 60             	[r1+0x0] = r0			  ## pitch_analysis_core_FIX.c:490:15
   12364:    40 20             	r0 = 0x0			  ## pitch_analysis_core_FIX.c:490:15
   12366:    41 21             	r1 = 0x1			  ## pitch_analysis_core_FIX.c:504:13
   12368:    02 26             	r2 = [sp+24]			  ## pitch_analysis_core_FIX.c:504:13
   1236a:    b2 e8 10 00       	if (r2 != 0x10) {			  ## pitch_analysis_core_FIX.c:504:13
   1236e:    41 20             		r1 = 0x0
                               	}			  ## pitch_analysis_core_FIX.c:504:13
   12370:    c8 e1 f0 11       	r1 = r15 << r1			  ## pitch_analysis_core_FIX.c:504:6
   12374:    12 16             	r2 = r1			  ## pitch_analysis_core_FIX.c:508:8
   12376:    d4 e9 0c 80       	r8 = [sp+12]			  ## pitch_analysis_core_FIX.c:508:8
   1237a:    b1 ee 20 00       	ifs (r1 <= 0x20) {			  ## pitch_analysis_core_FIX.c:508:8
   1237e:    4a 20             		r2 = 0x20
                               	}			  ## pitch_analysis_core_FIX.c:508:8
   12380:    4c e0 1f 01       	r12 = 0x11f <var_bss_size+0x12 : 11e >			  ## pitch_analysis_core_FIX.c:508:8
   12384:    b1 ee 1f 01       	ifs (r1 <= 0x11f) {			  ## pitch_analysis_core_FIX.c:508:8
   12388:    2c 16             		r12 = r2
                               	}			  ## pitch_analysis_core_FIX.c:508:8
   1238a:    01 e1 02 c0       	r1 = r12 + 0x2			  ## pitch_analysis_core_FIX.c:510:29
   1238e:    34 f1 fe cf       	r4 = r12 + -0x2  #			  ## pitch_analysis_core_FIX.c:509:31
   12392:    81 33             		 [sp+76] = r1			  ## pitch_analysis_core_FIX.c:509:31
   12394:    c1 ff e0 eb 01 00 	r1 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:516:7
   1239a:    61 18             	r1 += r6			  ## pitch_analysis_core_FIX.c:516:7
   1239c:    01 e1 51 12       	r1 = r1 + 0x251			  ## pitch_analysis_core_FIX.c:516:7
   123a0:    04 88             	goto 0x10 <silk_pitch_analysis_core+0x656 : 123b2 >			  ## pitch_analysis_core_FIX.c:516:7
   123a2:    d4 ee 1b 20       	r2 = b[r1++=0xb] (s)			  ## pitch_analysis_core_FIX.c:517:28
   123a6:    22 a1             	r2 = r2 << 0x1			  ## pitch_analysis_core_FIX.c:517:26
   123a8:    c2 d8             	r2 += r12  #			  ## pitch_analysis_core_FIX.c:517:22
   123aa:    03 2d             		 r3 = [sp+52]			  ## pitch_analysis_core_FIX.c:517:16
   123ac:    d8 ec 3b 20       	[r3+r0<<2] = r2			  ## pitch_analysis_core_FIX.c:517:16
   123b0:    c0 21             	r0 += 0x1			  ## pitch_analysis_core_FIX.c:516:29
   123b2:    87 ed f6 01       	ifs (r0 < r7) goto -0x14 <silk_pitch_analysis_core+0x646 : 123a2 >
   123b6:    00 2a             	r0 = [sp+40]			  ## pitch_analysis_core_FIX.c:528:2
   123b8:    80 21             	[sp+4] = r0			  ## pitch_analysis_core_FIX.c:528:2
   123ba:    87 20             	[sp] = r7			  ## pitch_analysis_core_FIX.c:528:2
   123bc:    b4 ee 20 00       	ifs (r4 <= 0x20) {			  ## pitch_analysis_core_FIX.c:528:2
   123c0:    4c 20             		r4 = 0x20
                               	}			  ## SigProc_FIX.h:360:18
   123c2:    82 d6             	r2 = r8  #			  ## pitch_analysis_core_FIX.c:528:2
   123c4:    06 2b             		 r6 = [sp+44]			  ## pitch_analysis_core_FIX.c:528:2
   123c6:    60 d6             	r0 = r6  #			  ## pitch_analysis_core_FIX.c:528:2
   123c8:    01 22             		 r1 = [sp+8]			  ## pitch_analysis_core_FIX.c:528:2
   123ca:    43 16             	r3 = r4			  ## pitch_analysis_core_FIX.c:528:2
   123cc:    bf ea b7 fb       	call -0x892 <silk_P_Ana_calc_corr_st3 : 11b3e >			  ## pitch_analysis_core_FIX.c:528:2
   123d0:    82 d6             	r2 = r8  #			  ## pitch_analysis_core_FIX.c:529:2
   123d2:    00 2a             		 r0 = [sp+40]			  ## pitch_analysis_core_FIX.c:529:2
   123d4:    60 d6             	r0 = r6  #			  ## pitch_analysis_core_FIX.c:529:2
   123d6:    80 21             		 [sp+4] = r0			  ## pitch_analysis_core_FIX.c:529:2
   123d8:    4a d6             	r10 = r4  #			  ## pitch_analysis_core_FIX.c:529:2
   123da:    87 20             		 [sp] = r7			  ## pitch_analysis_core_FIX.c:529:2
   123dc:    43 d6             	r3 = r4  #			  ## pitch_analysis_core_FIX.c:529:2
   123de:    01 2f             		 r1 = [sp+60]			  ## pitch_analysis_core_FIX.c:529:2
   123e0:    bf ea 1c fc       	call -0x7c8 <silk_P_Ana_calc_energy_st3 : 11c1c >			  ## pitch_analysis_core_FIX.c:529:2
   123e4:    40 e0 66 06       	r0 = 0x666 <alg_code_size+0x196 : 666 >			  ## pitch_analysis_core_FIX.c:533:21
   123e8:    f4 e1 00 0c       	r0 = r0 / r12 (u)			  ## pitch_analysis_core_FIX.c:533:21
   123ec:    80 37             	[sp+92] = r0			  ## SigProc_FIX.h:350:13
   123ee:    00 33             	r0 = [sp+76]			  ## SigProc_FIX.h:350:13
   123f0:    30 e9 1f 41       	if (r0 >= 0x11f) {			  ## SigProc_FIX.h:350:13
   123f4:    40 e0 1f 01       		r0 = 0x11f <var_bss_size+0x12 : 11e >			  ## SigProc_FIX.h:350:18
   123f8:    80 33             		[sp+76] = r0
                               	}			  ## SigProc_FIX.h:350:18
   123fa:    00 2a             	r0 = [sp+40]			  ## pitch_analysis_core_FIX.c:522:29
   123fc:    c1 ff e0 eb 01 00 	r1 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:522:29
   12402:    10 18             	r0 += r1			  ## pitch_analysis_core_FIX.c:522:29
   12404:    54 ee 0a 00       	r0 = b[r0+0xa] (s)			  ## pitch_analysis_core_FIX.c:522:19
   12408:    e0 f1 05 00       	r0 = r0 * 0x5  #			  ## pitch_analysis_core_FIX.c:537:7
   1240c:    80 39             		 [sp+100] = r0
   1240e:    01 26             	r1 = [sp+24]			  ## pitch_analysis_core_FIX.c:535:16
   12410:    e1 e1 28 10       	r1 = r1 * 0x28			  ## pitch_analysis_core_FIX.c:535:16
   12414:    81 18             	r1 += r8			  ## pitch_analysis_core_FIX.c:535:16
   12416:    e2 e1 50 70       	r2 = r7 * 0x50			  ## pitch_analysis_core_FIX.c:536:18
   1241a:    c0 14             	r8 = 0			  ## opus.c:206:4
   1241c:    c1 14             	r9 = 0			  ## opus.c:206:4
   1241e:    13 16             	r3 = r1			  ## opus.c:206:4
   12420:    52 03             	rep 0xc r2 {			  ## opus.c:206:4
   12422:    d4 ed 32 40       		r4 = h[r3++=0x2] (s)			  ## opus.c:206:4
   12426:    d4 ed 12 60       		r6 = h[r1++=0x2] (s)			  ## opus.c:206:4
   1242a:    fc e1 40 96       		r9_r8 += r4 * r6 (s)
                               	}			  ## opus.c:206:4
   1242e:    f2 58             	if (r2 != 0) goto -0x10 <silk_pitch_analysis_core+0x6C4 : 12420 >			  ## opus.c:206:4
   12430:    01 e1 01 80       	r1 = r8 + 0x1			  ## pitch_analysis_core_FIX.c:536:18
   12434:    c1 d4             	r9 = 0  #
   12436:    81 38             		 [sp+96] = r1
   12438:    60 e0 00 e4       	r14 = 0x80000000
   1243c:    00 a2             	r0 = r0 << 0x2
   1243e:    44 e0 a8 02       	r4 = 0x2a8 <ROM_RAM_SIZE+0xA8 : 2a8 >
   12442:    a2 16             	r2 = r10
   12444:    24 88             	goto 0x90 <silk_pitch_analysis_core+0x77A : 124d6 >
   12446:    82 34             	[sp+80] = r2
   12448:    43 20             	r3 = 0x0
   1244a:    d4 e9 3c 80       	r8 = [sp+60]
   1244e:    14 9b             	goto 0x76 <silk_pitch_analysis_core+0x76A : 124c6 >
   12450:    c2 d4             	r10 = 0  #
   12452:    05 38             		 r5 = [sp+96]
   12454:    8d 16             	r13 = r8
   12456:    c7 14             	r15 = 0
   12458:    04 89             	goto 0x12 <silk_pitch_analysis_core+0x710 : 1246c >
   1245a:    d0 ec d0 10       	r1 = [r13+0x0]			  ## pitch_analysis_core_FIX.c:545:14
   1245e:    d8 ec da 64       	r6 = [r13+r4<<2]			  ## pitch_analysis_core_FIX.c:542:18
   12462:    0d 18             	r13 += r0			  ## pitch_analysis_core_FIX.c:541:4
   12464:    15 18             	r5 += r1			  ## pitch_analysis_core_FIX.c:545:14
   12466:    6a 18             	r10 += r6			  ## pitch_analysis_core_FIX.c:542:18
   12468:    0f e1 01 f0       	r15 = r15 + 0x1			  ## pitch_analysis_core_FIX.c:541:31
   1246c:    87 ed f5 f1       	ifs (r15 < r7) goto -0x16 <silk_pitch_analysis_core+0x6FE : 1245a >
   12470:    8a fd 10 02       	ifs (r10 < 0x1) goto 0x20 <silk_pitch_analysis_core+0x738 : 12494 >
   12474:    c0 e1 af bd       	r11 = r10 >>> 0x1f			  ## Inlines.h:119:20
   12478:    d0 e1 0e a0       	r11_r10 <<= 0xe			  ## Inlines.h:119:35
   1247c:    f6 f1 a0 b5       	r11_r10 = r11_r10 / r5 (s)  #			  ## Inlines.h:122:20
   12480:    01 37             		 r1 = [sp+92]			  ## pitch_analysis_core_FIX.c:553:29
   12482:    31 1b             	r1 *= r3			  ## pitch_analysis_core_FIX.c:553:29
   12484:    42 e0 ff 7f       	r2 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## pitch_analysis_core_FIX.c:553:27
   12488:    29 1e             	r1 = r2 - r1			  ## pitch_analysis_core_FIX.c:553:27
   1248a:    f8 e1 a0 b1       	r11_r10 = r10 * r1 (s)			  ## pitch_analysis_core_FIX.c:555:17
   1248e:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## pitch_analysis_core_FIX.c:555:17
   12492:    04 81             	goto 0x2 <silk_pitch_analysis_core+0x73A : 12496 >
   12494:    c2 14             	r10 = 0
   12496:    8e ee 0d a0       	ifs (r10 <= r14) goto 0x1a <silk_pitch_analysis_core+0x758 : 124b4 >
   1249a:    c1 ff e0 eb 01 00 	r1 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:561:34
   124a0:    31 d8             	r1 += r3  #			  ## pitch_analysis_core_FIX.c:561:34
   124a2:    06 34             		 r6 = [sp+80]			  ## pitch_analysis_core_FIX.c:561:34
   124a4:    42 e0 d4 02       	r2 = 0x2d4 <ROM_RAM_SIZE+0xD4 : 2d4 >			  ## pitch_analysis_core_FIX.c:561:34
   124a8:    d8 ee 12 12       	r1 = b[r1+r2] (s)			  ## pitch_analysis_core_FIX.c:561:34
   124ac:    92 1d             	r2 = r1 + r6			  ## pitch_analysis_core_FIX.c:561:32
   124ae:    31 16             	r1 = r3			  ## pitch_analysis_core_FIX.c:561:32
   124b0:    a2 fd 03 40       	ifs (r2 < 0x120) goto 0x6 <silk_pitch_analysis_core+0x75E : 124ba >			  ## pitch_analysis_core_FIX.c:561:32
   124b4:    ea 16             	r10 = r14
   124b6:    c6 16             	r6 = r12
   124b8:    91 16             	r1 = r9
   124ba:    08 e1 14 80       	r8 = r8 + 0x14			  ## pitch_analysis_core_FIX.c:538:3
   124be:    c3 21             	r3 += 0x1			  ## pitch_analysis_core_FIX.c:538:35
   124c0:    ae 16             	r14 = r10
   124c2:    6c 16             	r12 = r6
   124c4:    19 16             	r9 = r1
   124c6:    01 39             	r1 = [sp+100]			  ## pitch_analysis_core_FIX.c:538:3
   124c8:    81 ed c2 31       	ifs (r3 < r1) goto -0x7c <silk_pitch_analysis_core+0x6F4 : 12450 >			  ## pitch_analysis_core_FIX.c:538:3
   124cc:    01 2f             	r1 = [sp+60]			  ## pitch_analysis_core_FIX.c:537:2
   124ce:    c1 24             	r1 += 0x4			  ## pitch_analysis_core_FIX.c:537:2
   124d0:    81 2f             	[sp+60] = r1			  ## pitch_analysis_core_FIX.c:537:37
   124d2:    02 34             	r2 = [sp+80]			  ## pitch_analysis_core_FIX.c:537:37
   124d4:    c2 21             	r2 += 0x1			  ## pitch_analysis_core_FIX.c:537:37
   124d6:    01 33             	r1 = [sp+76]			  ## pitch_analysis_core_FIX.c:537:2
   124d8:    81 ee b5 21       	ifs (r2 <= r1) goto -0x96 <silk_pitch_analysis_core+0x6EA : 12446 >			  ## pitch_analysis_core_FIX.c:537:2
   124dc:    c0 ff e0 eb 01 00 	r0 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## pitch_analysis_core_FIX.c:172:16
   124e2:    90 d8             	r0 += r9  #			  ## pitch_analysis_core_FIX.c:172:16
   124e4:    a5 3e             		 [sp+248] = r5			  ## pitch_analysis_core_FIX.c:545:12
   124e6:    00 f1 d4 02       	r0 = r0 + 0x2d4  #			  ## pitch_analysis_core_FIX.c:172:16
   124ea:    01 26             		 r1 = [sp+24]			  ## pitch_analysis_core_FIX.c:172:16
   124ec:    e2 f1 12 10       	r2 = r1 * 0x12  #			  ## pitch_analysis_core_FIX.c:172:16
   124f0:    05 2d             		 r5 = [sp+52]
   124f2:    43 20             	r3 = 0x0
   124f4:    04 98             	goto 0x30 <silk_pitch_analysis_core+0x7CA : 12526 >
   124f6:    d4 ee 02 12       	r1 = b[r0++=0x22] (s)			  ## pitch_analysis_core_FIX.c:571:28
   124fa:    b4 e0 10 4c       	r4 = r1 + r12			  ## pitch_analysis_core_FIX.c:571:26
   124fe:    d8 ec 5b 43       	[r5+r3<<2] = r4			  ## pitch_analysis_core_FIX.c:571:16
   12502:    02 fe 06 3e       	ifs (r2 > 0x1f) goto 0xc <silk_pitch_analysis_core+0x7B6 : 12512 >			  ## pitch_analysis_core_FIX.c:572:18
   12506:    49 20             	r1 = 0x20
   12508:    b4 ee 20 00       	ifs (r4 <= 0x20) {
   1250c:    34 e4 41 12       		r1 = smax(r4, r2)
                               	}			  ## pitch_analysis_core_FIX.c:572:18
   12510:    04 87             	goto 0xe <silk_pitch_analysis_core+0x7C4 : 12520 >			  ## pitch_analysis_core_FIX.c:572:18
   12512:    21 16             	r1 = r2			  ## pitch_analysis_core_FIX.c:572:18
   12514:    02 ee 04 40       	ifs (r4 > r2) goto 0x8 <silk_pitch_analysis_core+0x7C4 : 12520 >			  ## pitch_analysis_core_FIX.c:572:18
   12518:    b4 ee 20 00       	ifs (r4 <= 0x20) {
   1251c:    4c 20             		r4 = 0x20
                               	}			  ## pitch_analysis_core_FIX.c:572:18
   1251e:    41 16             	r1 = r4			  ## pitch_analysis_core_FIX.c:572:18
   12520:    d8 ec 5b 13       	[r5+r3<<2] = r1			  ## pitch_analysis_core_FIX.c:572:16
   12524:    c3 21             	r3 += 0x1			  ## pitch_analysis_core_FIX.c:570:29
   12526:    87 ed e6 31       	ifs (r3 < r7) goto -0x34 <silk_pitch_analysis_core+0x79A : 124f6 >
   1252a:    c0 ff e0 ff 00 00 	r0 = 0xffe0 <.GJTIE291_0_0_+0x716 : ffe0 >			  ## pitch_analysis_core_FIX.c:574:35
   12530:    c0 d8             	r0 += r12  #			  ## pitch_analysis_core_FIX.c:574:35
   12532:    01 29             		 r1 = [sp+36]			  ## pitch_analysis_core_FIX.c:574:12
   12534:    98 60             	h[r1+0x0] = r0			  ## pitch_analysis_core_FIX.c:574:12
   12536:    40 20             	r0 = 0x0			  ## pitch_analysis_core_FIX.c:574:12
   12538:    04 8d             	goto 0x1a <silk_pitch_analysis_core+0x7F8 : 12554 >			  ## pitch_analysis_core_FIX.c:574:12
   1253a:    c1 d4             	r9 = 0  #
   1253c:    01 2d             		 r1 = [sp+52]			  ## opus_demo.c:208:2
   1253e:    40 20             	r0 = 0x0			  ## opus_demo.c:208:2
   12540:    07 03             	rep 0x2 r7 {			  ## opus_demo.c:208:2
   12542:    90 05             		[r1++=0x4] = r0
                               	}			  ## opus_demo.c:208:2
   12544:    f7 5d             	if (r7 != 0) goto -0x6 <silk_pitch_analysis_core+0x7E4 : 12540 >			  ## opus_demo.c:208:2
   12546:    00 2c             	r0 = [sp+48]
   12548:    d0 ec 01 90       	[r0+0x0] = r9
   1254c:    00 29             	r0 = [sp+36]
   1254e:    50 ed 01 90       	h[r0+0x0] = r9
   12552:    40 21             	r0 = 0x1
   12554:    01 28             	r1 = [sp+32]
   12556:    52 ee 10 90       	b[r1+0x0] = r9
   1255a:    22 9f             	sp += 0xfc
   1255c:    5f 04             	{pc, r15-r4} = [sp++]			  ## pitch_analysis_core_FIX.c:580:1


silk_find_pitch_lags_FIX:
   1255e:    7f 04             	[--sp] = {rets, r15-r4}			  ## noise_shape_analysis_FIX.c:752:0
   12560:    e2 8a             	sp += -0x58			  ## noise_shape_analysis_FIX.c:752:0
   12562:    04 16             	r4 = r0			  ## noise_shape_analysis_FIX.c:752:0
   12564:    17 e1 20 44       	r7 = r4 + 0x1420			  ## noise_shape_analysis_FIX.c:752:0
   12568:    28 d6             	r8 = r2  #			  ## noise_shape_analysis_FIX.c:752:0
   1256a:    76 68             		 r6 = [r7+0x20] 			  ## noise_shape_analysis_FIX.c:773:24
   1256c:    70 65             	r0 = [r7+0x14] 			  ## noise_shape_analysis_FIX.c:773:47
   1256e:    60 d8             	r0 += r6  #			  ## noise_shape_analysis_FIX.c:773:33
   12570:    75 67             		 r5 = [r7+0x1c] 			  ## noise_shape_analysis_FIX.c:773:74
   12572:    50 d8             	r0 += r5  #			  ## noise_shape_analysis_FIX.c:773:60
   12574:    81 30             		 [sp+64] = r1			  ## noise_shape_analysis_FIX.c:773:60
   12576:    80 2a             	[sp+40] = r0
   12578:    00 a1             	r0 = r0 << 0x1			  ## noise_shape_analysis_FIX.c:783:20
   1257a:    72 62             	r2 = [r7+0x8] 			  ## noise_shape_analysis_FIX.c:783:44
   1257c:    85 2b             	[sp+44] = r5			  ## noise_shape_analysis_FIX.c:783:44
   1257e:    51 a1             	r1 = r5 << 0x1			  ## noise_shape_analysis_FIX.c:778:12
   12580:    b4 f0 32 a1       	r10 = r3 - r1  #			  ## noise_shape_analysis_FIX.c:778:12
   12584:    83 2c             		 [sp+48] = r3			  ## noise_shape_analysis_FIX.c:778:12
   12586:    a0 18             	r0 += r10			  ## noise_shape_analysis_FIX.c:783:20
   12588:    21 a1             	r1 = r2 << 0x1			  ## noise_shape_analysis_FIX.c:783:30
   1258a:    09 1e             	r1 = r0 - r1			  ## noise_shape_analysis_FIX.c:783:30
   1258c:    40 e0 f0 25       	r0 = 0x25f0 <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## noise_shape_analysis_FIX.c:757:31
   12590:    45 1c             	r5 = r4 + r0			  ## noise_shape_analysis_FIX.c:757:31
   12592:    50 16             	r0 = r5			  ## noise_shape_analysis_FIX.c:797:2
   12594:    63 16             	r3 = r6			  ## noise_shape_analysis_FIX.c:797:2
   12596:    bf ea e2 f9       	call -0xc3c <silk_apply_sine_window_n : 1195e >			  ## noise_shape_analysis_FIX.c:797:2
   1259a:    41 f0 70 35       	r1 = 0x3570  # <WOLASynthesisFilter_Float_M256_m4_r1+0xD6C : 3570 >
   1259e:    87 28             		 [sp+32] = r7
   125a0:    17 f1 60 44       	r7 = r4 + 0x1460  #
   125a4:    72 62             		 r2 = [r7+0x8] 			  ## noise_shape_analysis_FIX.c:800:54
   125a6:    b4 f0 40 b1       	r11 = r4 + r1  #			  ## noise_shape_analysis_FIX.c:800:54
   125aa:    70 60             		 r0 = [r7+0x0] 			  ## noise_shape_analysis_FIX.c:800:88
   125ac:    06 e1 c0 b0       	r6 = r11 + 0xc0			  ## noise_shape_analysis_FIX.c:768:31
   125b0:    0b 81             	r3 = r0 + 0x1			  ## noise_shape_analysis_FIX.c:800:112
   125b2:    60 16             	r0 = r6			  ## noise_shape_analysis_FIX.c:800:10
   125b4:    51 16             	r1 = r5			  ## noise_shape_analysis_FIX.c:800:10
   125b6:    bf ea 03 fa       	call -0xbfa <silk_autocorr : 119c0 >			  ## noise_shape_analysis_FIX.c:800:10
   125ba:    45 f0 30 36       	r5 = 0x3630  # <WOLASynthesisFilter_Float_M256_m4_r1+0xE2C : 3630 >			  ## noise_shape_analysis_FIX.c:800:10
   125be:    84 31             		 [sp+68] = r4
   125c0:    dc ec 52 04       	r0 = [++r5=r4]			  ## noise_shape_analysis_FIX.c:803:19
   125c4:    51 22             	r1 = 0x42			  ## noise_shape_analysis_FIX.c:803:19
   125c6:    f8 e1 00 31       	r3_r2 = r0 * r1 (s)			  ## noise_shape_analysis_FIX.c:803:19
   125ca:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## noise_shape_analysis_FIX.c:803:19
   125ce:    20 18             	r0 += r2			  ## noise_shape_analysis_FIX.c:803:19
   125d0:    c0 21             	r0 += 0x1			  ## noise_shape_analysis_FIX.c:803:120
   125d2:    51 d6             	r1 = r5  #
   125d4:    d0 60             		 [r5+0x0] = r0			  ## noise_shape_analysis_FIX.c:803:17
   125d6:    02 f1 c0 10       	r2 = r1 + 0xc0  #			  ## noise_shape_analysis_FIX.c:673:20
   125da:    87 34             		 [sp+80] = r7			  ## noise_shape_analysis_FIX.c:673:20
   125dc:    d0 ec 70 90       	r9 = [r7+0x0]			  ## noise_shape_analysis_FIX.c:806:61
   125e0:    82 35             	[sp+84] = r2
   125e2:    00 52             	if (r0 == 0) goto 0x24 <silk_find_pitch_lags_FIX+0xAA : 12608 >
   125e4:    80 e1 00 20       	r2 = clz(r0)			  ## entenc.c:124:2
   125e8:    02 fe 10 02       	ifs (r2 > 0x1) goto 0x20 <silk_find_pitch_lags_FIX+0xAE : 1260c >			  ## noise_shape_analysis_FIX.c:682:6
   125ec:    00 e1 c0 10       	r0 = r1 + 0xc0			  ## noise_shape_analysis_FIX.c:668:18
   125f0:    42 20             	r2 = 0x0			  ## noise_shape_analysis_FIX.c:668:18
   125f2:    04 87             	goto 0xe <silk_find_pitch_lags_FIX+0xA4 : 12602 >
   125f4:    d8 ec 6a 32       	r3 = [r6+r2<<2]			  ## noise_shape_analysis_FIX.c:685:32
   125f8:    bb a1             	r3 = r3 >>> 0x1			  ## noise_shape_analysis_FIX.c:685:32
   125fa:    83 61             	[r0+0x4] = r3			  ## noise_shape_analysis_FIX.c:685:30
   125fc:    d8 ec 09 30       	[r0++=0x8] = r3			  ## noise_shape_analysis_FIX.c:685:16
   12600:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:684:31
   12602:    89 ee f7 21       	ifs (r2 <= r9) goto -0x12 <silk_find_pitch_lags_FIX+0x96 : 125f4 >
   12606:    04 9e             	goto 0x3c <silk_find_pitch_lags_FIX+0xE6 : 12644 >
   12608:    4a 20             	r2 = 0x20
   1260a:    04 8e             	goto 0x1c <silk_find_pitch_lags_FIX+0xCA : 12628 >
   1260c:    82 f8 0c 04       	if (r2 != 0x2) goto 0x18 <silk_find_pitch_lags_FIX+0xCA : 12628 >
   12610:    40 20             	r0 = 0x0
   12612:    02 35             	r2 = [sp+84]
   12614:    04 86             	goto 0xc <silk_find_pitch_lags_FIX+0xC4 : 12622 >
   12616:    d8 ec 6a 30       	r3 = [r6+r0<<2]			  ## noise_shape_analysis_FIX.c:696:32
   1261a:    a3 61             	[r2+0x4] = r3			  ## noise_shape_analysis_FIX.c:696:30
   1261c:    d8 ec 29 30       	[r2++=0x8] = r3			  ## noise_shape_analysis_FIX.c:696:16
   12620:    c0 21             	r0 += 0x1			  ## noise_shape_analysis_FIX.c:695:31
   12622:    89 ee f8 01       	ifs (r0 <= r9) goto -0x10 <silk_find_pitch_lags_FIX+0xB8 : 12616 >
   12626:    04 8e             	goto 0x1c <silk_find_pitch_lags_FIX+0xE6 : 12644 >
   12628:    00 e1 c0 10       	r0 = r1 + 0xc0			  ## noise_shape_analysis_FIX.c:690:8
   1262c:    fa 3e             	r2 += -0x2			  ## noise_shape_analysis_FIX.c:689:6
   1262e:    43 20             	r3 = 0x0
   12630:    04 87             	goto 0xe <silk_find_pitch_lags_FIX+0xE2 : 12640 >
   12632:    d8 ec 6a 43       	r4 = [r6+r3<<2]			  ## noise_shape_analysis_FIX.c:691:32
   12636:    24 1a             	r4 <<= r2			  ## noise_shape_analysis_FIX.c:691:32
   12638:    84 61             	[r0+0x4] = r4			  ## noise_shape_analysis_FIX.c:691:30
   1263a:    d8 ec 09 40       	[r0++=0x8] = r4			  ## noise_shape_analysis_FIX.c:691:16
   1263e:    c3 21             	r3 += 0x1			  ## noise_shape_analysis_FIX.c:690:31
   12640:    89 ee f7 31       	ifs (r3 <= r9) goto -0x12 <silk_find_pitch_lags_FIX+0xD4 : 12632 >
   12644:    d4 e9 35 a0       	[sp+52] = r10
   12648:    d4 e9 39 80       	[sp+56] = r8
   1264c:    0c e1 80 b0       	r12 = r11 + 0x80			  ## noise_shape_analysis_FIX.c:767:27
   12650:    d4 e9 4d b0       	[sp+76] = r11			  ## noise_shape_analysis_FIX.c:767:27
   12654:    00 e1 40 b0       	r0 = r11 + 0x40			  ## noise_shape_analysis_FIX.c:766:42
   12658:    0d f1 c8 10       	r13 = r1 + 0xc8  #			  ## noise_shape_analysis_FIX.c:668:18
   1265c:    80 29             		 [sp+36] = r0			  ## noise_shape_analysis_FIX.c:668:18
   1265e:    08 f1 c4 10       	r8 = r1 + 0xc4  #			  ## noise_shape_analysis_FIX.c:668:18
   12662:    81 32             		 [sp+72] = r1
   12664:    47 20             	r7 = 0x0
   12666:    14 9e             	goto 0x7c <silk_find_pitch_lags_FIX+0x186 : 126e4 >
   12668:    7e 81             	r6 = r7 + 0x1			  ## noise_shape_analysis_FIX.c:702:7
   1266a:    63 a3             	r3 = r6 << 0x3			  ## noise_shape_analysis_FIX.c:702:7
   1266c:    00 35             	r0 = [sp+84]			  ## noise_shape_analysis_FIX.c:702:7
   1266e:    d8 ec 02 33       	r3 = [r0+r3]			  ## noise_shape_analysis_FIX.c:702:7
   12672:    d0 ec 80 50       	r5 = [r8+0x0]			  ## noise_shape_analysis_FIX.c:702:42
   12676:    bc bf             	r4 = r3 >>> 0x1f			  ## noise_shape_analysis_FIX.c:702:7
   12678:    90 e1 41 23       	r2 = r4 ^ r3			  ## noise_shape_analysis_FIX.c:702:7
   1267c:    22 1f             	r2 = r2 - r4			  ## noise_shape_analysis_FIX.c:702:7
   1267e:    05 ed 3a 20       	ifs (r2 >= r5) goto 0x74 <silk_find_pitch_lags_FIX+0x198 : 126f6 >			  ## noise_shape_analysis_FIX.c:702:7
   12682:    02 e1 28 10       	r2 = r1 + 0x28			  ## noise_shape_analysis_FIX.c:720:3
   12686:    14 e1 c0 24       	r4 = r2 + 0x14c0			  ## noise_shape_analysis_FIX.c:720:3
   1268a:    dd af             	r5 = r5 >>> 0xf			  ## noise_shape_analysis_FIX.c:713:17
   1268c:    b5 ee 01 00       	ifs (r5 <= 0x1) {
   12690:    45 21             		r5 = 0x1
                               	}
   12692:    f4 e1 31 25       	r2 = r3 / r5 (s)			  ## noise_shape_analysis_FIX.c:713:17
   12696:    a2 e0 00 20       	r2 = 0x0 - r2			  ## noise_shape_analysis_FIX.c:713:16
   1269a:    78 e0 01 e2       	r14 = sat16(r2) (s)			  ## noise_shape_analysis_FIX.c:716:3
   1269e:    d8 ed 49 e7       	h[r4+r7<<1] = r14			  ## noise_shape_analysis_FIX.c:720:15
   126a2:    c0 e1 ef fd       	r15 = r14 >>> 0x1f			  ## noise_shape_analysis_FIX.c:720:15
   126a6:    b4 e0 92 57       	r5 = r9 - r7
   126aa:    47 20             	r7 = 0x0
   126ac:    d4 16             	r4 = r13
   126ae:    83 16             	r3 = r8
   126b0:    04 94             	goto 0x28 <silk_find_pitch_lags_FIX+0x17C : 126da >
   126b2:    32 60             	r2 = [r3+0x0] 			  ## noise_shape_analysis_FIX.c:725:12
   126b4:    21 a1             	r1 = r2 << 0x1			  ## noise_shape_analysis_FIX.c:726:26
   126b6:    f8 f1 10 be       	r11_r10 = r1 * r14 (s)  #			  ## noise_shape_analysis_FIX.c:726:26
   126ba:    40 60             		 r0 = [r4+0x0] 			  ## noise_shape_analysis_FIX.c:724:12
   126bc:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## noise_shape_analysis_FIX.c:726:26
   126c0:    b4 e0 a0 10       	r1 = r10 + r0			  ## noise_shape_analysis_FIX.c:726:26
   126c4:    d8 ec 49 10       	[r4++=0x8] = r1			  ## noise_shape_analysis_FIX.c:726:24
   126c8:    00 a1             	r0 = r0 << 0x1			  ## noise_shape_analysis_FIX.c:727:26
   126ca:    f8 e1 00 1e       	r1_r0 = r0 * r14 (s)			  ## noise_shape_analysis_FIX.c:727:26
   126ce:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## noise_shape_analysis_FIX.c:727:26
   126d2:    20 18             	r0 += r2			  ## noise_shape_analysis_FIX.c:727:26
   126d4:    d8 ec 39 00       	[r3++=0x8] = r0			  ## noise_shape_analysis_FIX.c:727:24
   126d8:    c7 21             	r7 += 0x1			  ## noise_shape_analysis_FIX.c:723:31
   126da:    85 ed ea 71       	ifs (r7 < r5) goto -0x2c <silk_find_pitch_lags_FIX+0x154 : 126b2 >
   126de:    0d e1 08 d0       	r13 = r13 + 0x8			  ## noise_shape_analysis_FIX.c:668:18
   126e2:    67 16             	r7 = r6			  ## noise_shape_analysis_FIX.c:668:18
   126e4:    41 f0 88 20       	r1 = 0x2088  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x884 : 2088 >
   126e8:    00 31             		 r0 = [sp+68]
   126ea:    01 18             	r1 += r0
   126ec:    07 ee bc 91       	ifs (r9 > r7) goto -0x88 <silk_find_pitch_lags_FIX+0x10A : 12668 >
   126f0:    76 d6             	r6 = r7  #
   126f2:    04 33             		 r4 = [sp+76]
   126f4:    04 8d             	goto 0x1a <silk_find_pitch_lags_FIX+0x1B2 : 12710 >
   126f6:    40 f0 48 81       	r0 = -0x7eb8  # <RAM_LIMIT_H+0xFFFFFFFFFFE58148 : ffffffffffff8148 >			  ## noise_shape_analysis_FIX.c:703:9
   126fa:    04 33             		 r4 = [sp+76]			  ## noise_shape_analysis_FIX.c:703:9
   126fc:    b3 ee 00 00       	ifs (r3 <= 0x0) {			  ## noise_shape_analysis_FIX.c:703:9
   12700:    40 e0 b8 7e       		r0 = 0x7eb8
                               	} <silk_NLSF_CB2_SELECT_WB+0x5A : 7eb8 >			  ## noise_shape_analysis_FIX.c:703:9
   12704:    02 e1 28 10       	r2 = r1 + 0x28			  ## noise_shape_analysis_FIX.c:703:9
   12708:    12 e1 c0 24       	r2 = r2 + 0x14c0			  ## noise_shape_analysis_FIX.c:703:9
   1270c:    d8 ed 29 07       	h[r2+r7<<1] = r0			  ## noise_shape_analysis_FIX.c:703:9
   12710:    02 32             	r2 = [sp+72]
   12712:    40 20             	r0 = 0x0
   12714:    04 83             	goto 0x6 <silk_find_pitch_lags_FIX+0x1BE : 1271c >
   12716:    d8 ed 49 06       	h[r4+r6<<1] = r0			  ## noise_shape_analysis_FIX.c:732:15
   1271a:    c6 21             	r6 += 0x1			  ## noise_shape_analysis_FIX.c:731:20
   1271c:    89 ed fb 61       	ifs (r6 < r9) goto -0xa <silk_find_pitch_lags_FIX+0x1B8 : 12716 >
   12720:    c7 d4             	r15 = 0  #			  ## Inlines.h:122:21
   12722:    81 2f             		 [sp+60] = r1			  ## Inlines.h:122:21
   12724:    d0 ec 80 a0       	r10 = [r8+0x0]			  ## noise_shape_analysis_FIX.c:736:25
   12728:    c3 14             	r11 = 0			  ## Inlines.h:122:21
   1272a:    ae 16             	r14 = r10			  ## Inlines.h:122:21
   1272c:    ba ee 01 00       	ifs (r10 <= 0x1) {			  ## Inlines.h:122:21
   12730:    4e e0 01 00       		r14 = 0x1
                               	} <mem_code_size : 0 >			  ## Inlines.h:122:21
   12734:    e2 d6             	r2 = r14  #			  ## Inlines.h:122:20
   12736:    20 60             		 r0 = [r2+0x0] 			  ## Inlines.h:119:20
   12738:    89 bf             	r1 = r0 >>> 0x1f			  ## Inlines.h:119:20
   1273a:    d0 e1 00 01       	r1_r0 <<= 0x10			  ## Inlines.h:119:35
   1273e:    43 20             	r3 = 0x0			  ## Inlines.h:122:20
   12740:    80 ff 66 52 00 00 	call 0x5266 <__divdi3 : 179ac >			  ## Inlines.h:122:20
   12746:    02 30             	r2 = [sp+64]			  ## noise_shape_analysis_FIX.c:809:26
   12748:    d1 ec 2d 0e       	[r2+0x1ec] = r0			  ## noise_shape_analysis_FIX.c:809:26
   1274c:    02 f1 7c 40       	r2 = r4 + 0x7c  #			  ## noise_shape_analysis_FIX.c:202:7
   12750:    00 34             		 r0 = [sp+80]			  ## noise_shape_analysis_FIX.c:812:39
   12752:    00 60             	r0 = [r0+0x0] 			  ## noise_shape_analysis_FIX.c:812:39
   12754:    80 33             	[sp+76] = r0			  ## noise_shape_analysis_FIX.c:202:7
   12756:    00 2f             	r0 = [sp+60]			  ## noise_shape_analysis_FIX.c:202:7
   12758:    01 e1 28 00       	r1 = r0 + 0x28			  ## noise_shape_analysis_FIX.c:202:7
   1275c:    10 e1 c0 14       	r0 = r1 + 0x14c0			  ## noise_shape_analysis_FIX.c:202:7
   12760:    80 32             	[sp+72] = r0			  ## noise_shape_analysis_FIX.c:202:7
   12762:    14 92             	goto 0x64 <silk_find_pitch_lags_FIX+0x26A : 127c8 >			  ## noise_shape_analysis_FIX.c:202:7
   12764:    21 d6             	r1 = r2  #
   12766:    00 32             		 r0 = [sp+72]			  ## noise_shape_analysis_FIX.c:203:8
   12768:    d8 ed 0a eb       	r14 = h[r0+r11<<1] (s)			  ## noise_shape_analysis_FIX.c:203:8
   1276c:    c7 d4             	r15 = 0  #			  ## noise_shape_analysis_FIX.c:203:8
   1276e:    82 35             		 [sp+84] = r2			  ## noise_shape_analysis_FIX.c:203:8
   12770:    e6 16             	r6 = r14			  ## noise_shape_analysis_FIX.c:203:8
   12772:    47 20             	r7 = 0x0			  ## noise_shape_analysis_FIX.c:203:8
   12774:    d0 e1 00 63       	r7_r6 <<= 0x30			  ## noise_shape_analysis_FIX.c:203:8
   12778:    d0 e1 00 6f       	r7_r6 >>>= 0x30			  ## noise_shape_analysis_FIX.c:203:8
   1277c:    0d e1 01 b0       	r13 = r11 + 0x1
   12780:    c0 e1 d1 4c       	r4 = r13 >>> 0x1
   12784:    42 20             	r2 = 0x0
   12786:    04 95             	goto 0x2a <silk_find_pitch_lags_FIX+0x254 : 127b2 >
   12788:    10 60             	r0 = [r1+0x0] 			  ## noise_shape_analysis_FIX.c:206:11
   1278a:    d8 ec ca 52       	r5 = [r12+r2<<2]			  ## noise_shape_analysis_FIX.c:205:11
   1278e:    c0 e1 01 90       	r9 = r0 << 0x1			  ## noise_shape_analysis_FIX.c:207:15
   12792:    f8 e1 90 96       	r9_r8 = r9 * r6 (s)			  ## noise_shape_analysis_FIX.c:207:15
   12796:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## noise_shape_analysis_FIX.c:207:15
   1279a:    b4 e0 80 35       	r3 = r8 + r5			  ## noise_shape_analysis_FIX.c:207:15
   1279e:    d8 ec cb 32       	[r12+r2<<2] = r3			  ## noise_shape_analysis_FIX.c:207:13
   127a2:    53 a1             	r3 = r5 << 0x1			  ## noise_shape_analysis_FIX.c:208:23
   127a4:    f8 e1 30 96       	r9_r8 = r3 * r6 (s)			  ## noise_shape_analysis_FIX.c:208:23
   127a8:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## noise_shape_analysis_FIX.c:208:23
   127ac:    80 18             	r0 += r8			  ## noise_shape_analysis_FIX.c:208:23
   127ae:    98 05             	[r1++=-0x4] = r0			  ## noise_shape_analysis_FIX.c:208:21
   127b0:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:204:34
   127b2:    84 ed e9 21       	ifs (r2 < r4) goto -0x2e <silk_find_pitch_lags_FIX+0x22A : 12788 >
   127b6:    c0 e1 e9 00       	r0 = r14 << 0x9			  ## noise_shape_analysis_FIX.c:210:15
   127ba:    a0 e0 00 00       	r0 = 0x0 - r0			  ## noise_shape_analysis_FIX.c:210:14
   127be:    d8 ec cb 0b       	[r12+r11<<2] = r0			  ## noise_shape_analysis_FIX.c:210:12
   127c2:    db d6             	r11 = r13  #			  ## noise_shape_analysis_FIX.c:210:12
   127c4:    02 35             		 r2 = [sp+84]			  ## noise_shape_analysis_FIX.c:210:12
   127c6:    c2 24             	r2 += 0x4			  ## noise_shape_analysis_FIX.c:202:2
   127c8:    00 33             	r0 = [sp+76]			  ## noise_shape_analysis_FIX.c:202:2
   127ca:    80 ed cb b1       	ifs (r11 < r0) goto -0x6a <silk_find_pitch_lags_FIX+0x206 : 12764 >			  ## noise_shape_analysis_FIX.c:202:2
   127ce:    40 20             	r0 = 0x0
   127d0:    31 e1 c0 cf       	r1 = r12 + -0x40
   127d4:    04 88             	goto 0x10 <silk_find_pitch_lags_FIX+0x288 : 127e6 >
   127d6:    d8 ec ca 20       	r2 = [r12+r0<<2]			  ## noise_shape_analysis_FIX.c:817:8
   127da:    aa ac             	r2 = r2 >>> 0xc			  ## noise_shape_analysis_FIX.c:817:8
   127dc:    78 e0 01 32       	r3 = sat16(r2) (s)			  ## noise_shape_analysis_FIX.c:818:3
   127e0:    d8 ed 19 30       	h[r1+r0<<1] = r3			  ## noise_shape_analysis_FIX.c:819:12
   127e4:    c0 21             	r0 += 0x1			  ## noise_shape_analysis_FIX.c:815:56
   127e6:    02 34             	r2 = [sp+80]			  ## noise_shape_analysis_FIX.c:815:30
   127e8:    22 60             	r2 = [r2+0x0] 			  ## noise_shape_analysis_FIX.c:815:30
   127ea:    82 ed f4 01       	ifs (r0 < r2) goto -0x18 <silk_find_pitch_lags_FIX+0x278 : 127d6 >			  ## noise_shape_analysis_FIX.c:815:30
   127ee:    c0 ff 71 fd 00 00 	r0 = 0xfd71 <.GJTIE291_0_0_+0x4A6 : fd70 >			  ## noise_shape_analysis_FIX.c:260:3
   127f4:    41 f0 71 fd       	r1 = -0x28f  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FD70 : fffffffffffffd70 >			  ## noise_shape_analysis_FIX.c:260:3
   127f8:    07 29             		 r7 = [sp+36]			  ## noise_shape_analysis_FIX.c:260:3
   127fa:    73 16             	r3 = r7			  ## noise_shape_analysis_FIX.c:260:3
   127fc:    b2 03             	rep 0x18 r2 {			  ## noise_shape_analysis_FIX.c:260:3
   127fe:    54 ed 30 60       		r6 = h[r3+0x0] (s)			  ## noise_shape_analysis_FIX.c:260:3
   12802:    f8 e1 60 50       		r5_r4 = r6 * r0 (s)			  ## noise_shape_analysis_FIX.c:260:3
   12806:    d2 e1 40 69       		r6 = r5_r4 >>> 0x10 (up)			  ## noise_shape_analysis_FIX.c:260:3
   1280a:    b6 06             		h[r3++=0x2] = r6			  ## noise_shape_analysis_FIX.c:260:3
   1280c:    f8 e1 00 51       		r5_r4 = r0 * r1 (s)			  ## noise_shape_analysis_FIX.c:260:3
   12810:    d2 e1 40 69       		r6 = r5_r4 >>> 0x10 (up)			  ## noise_shape_analysis_FIX.c:260:3
   12814:    80 1d             		r0 = r0 + r6
                               	}			  ## noise_shape_analysis_FIX.c:260:3
   12816:    00 34             	r0 = [sp+80]			  ## noise_shape_analysis_FIX.c:830:68
   12818:    d0 ec 00 a0       	r10 = [r0+0x0]			  ## noise_shape_analysis_FIX.c:830:68
   1281c:    00 2a             	r0 = [sp+40]			  ## noise_shape_analysis_FIX.c:82:13
   1281e:    b4 f0 02 9a       	r9 = r0 - r10  #			  ## noise_shape_analysis_FIX.c:82:13
   12822:    00 2b             		 r0 = [sp+44]			  ## noise_shape_analysis_FIX.c:98:7
   12824:    c0 f1 a1 20       	r2 = r10 << 0x1  #			  ## noise_shape_analysis_FIX.c:85:16
   12828:    03 2d             		 r3 = [sp+52]			  ## noise_shape_analysis_FIX.c:85:16
   1282a:    d4 e9 38 b0       	r11 = [sp+56]
   1282e:    b4 e0 b0 c2       	r12 = r11 + r2			  ## noise_shape_analysis_FIX.c:86:24
   12832:    b4 f0 a2 10       	r1 = r10 - r0  #			  ## noise_shape_analysis_FIX.c:98:7
   12836:    00 2c             		 r0 = [sp+48]			  ## noise_shape_analysis_FIX.c:98:7
   12838:    11 a1             	r1 = r1 << 0x1			  ## noise_shape_analysis_FIX.c:98:7
   1283a:    b4 e0 00 81       	r8 = r0 + r1			  ## noise_shape_analysis_FIX.c:98:7
   1283e:    f1 1c             	r1 = r7 + r2			  ## noise_shape_analysis_FIX.c:260:3
   12840:    37 e1 fe 1f       	r7 = r1 + -0x2			  ## noise_shape_analysis_FIX.c:87:37
   12844:    44 20             	r4 = 0x0
   12846:    04 95             	goto 0x2a <silk_find_pitch_lags_FIX+0x314 : 12872 >
   12848:    d8 ed 8a 64       	r6 = h[r8+r4<<1] (s)			  ## noise_shape_analysis_FIX.c:100:20
   1284c:    66 ac             	r6 = r6 << 0xc			  ## noise_shape_analysis_FIX.c:100:20
   1284e:    a0 16             	r0 = r10			  ## noise_shape_analysis_FIX.c:107:3
   12850:    50 03             	rep 0xc r0 {			  ## noise_shape_analysis_FIX.c:107:3
   12852:    d7 ed 7e 5f       		r5 = h[r7++=-0x2] (s)			  ## noise_shape_analysis_FIX.c:107:3
   12856:    d4 ed 32 10       		r1 = h[r3++=0x2] (s)			  ## noise_shape_analysis_FIX.c:107:3
   1285a:    15 1b             		r5 *= r1			  ## noise_shape_analysis_FIX.c:107:3
   1285c:    6e 1f             		r6 = r6 - r5
                               	}			  ## noise_shape_analysis_FIX.c:107:3
   1285e:    05 e1 00 68       	r5 = r6 + 0x800			  ## noise_shape_analysis_FIX.c:107:3
   12862:    5d a4             	r5 = r5 <<< 0x4			  ## noise_shape_analysis_FIX.c:107:3
   12864:    dd b0             	r5 = r5 >>> 0x10			  ## noise_shape_analysis_FIX.c:107:3
   12866:    d0 ed c3 50       	h[r12++=0x2] = r5			  ## noise_shape_analysis_FIX.c:107:3
   1286a:    f7 1c             	r7 = r7 + r2			  ## noise_shape_analysis_FIX.c:107:3
   1286c:    b3 1e             	r3 = r3 - r2			  ## noise_shape_analysis_FIX.c:107:3
   1286e:    3b 82             	r3 = r3 + 0x2			  ## noise_shape_analysis_FIX.c:107:3
   12870:    c4 21             	r4 += 0x1			  ## noise_shape_analysis_FIX.c:98:16
   12872:    89 ed e9 41       	ifs (r4 < r9) goto -0x2e <silk_find_pitch_lags_FIX+0x2EA : 12848 >
   12876:    b0 16             	r0 = r11			  ## noise_shape_analysis_FIX.c:136:2
   12878:    41 20             	r1 = 0x0			  ## noise_shape_analysis_FIX.c:136:2
   1287a:    0a 03             	rep 0x2 r10 {			  ## noise_shape_analysis_FIX.c:136:2
   1287c:    81 06             		h[r0++=0x2] = r1
                               	}			  ## noise_shape_analysis_FIX.c:136:2
   1287e:    00 31             	r0 = [sp+68]
   12880:    14 e1 20 00       	r4 = r0 + 0x1020
   12884:    49 42             	r1 = b[r4+0x2] (u)			  ## noise_shape_analysis_FIX.c:833:26
   12886:    40 20             	r0 = 0x0			  ## noise_shape_analysis_FIX.c:833:26
   12888:    01 43             	if (r1 == 0) goto 0x6 <silk_find_pitch_lags_FIX+0x332 : 12890 >			  ## noise_shape_analysis_FIX.c:833:26
   1288a:    01 34             	r1 = [sp+80]			  ## noise_shape_analysis_FIX.c:833:78
   1288c:    11 66             	r1 = [r1+0x18] 			  ## noise_shape_analysis_FIX.c:833:78
   1288e:    01 4c             	if (r1 == 0) goto 0x18 <silk_find_pitch_lags_FIX+0x34A : 128a8 >			  ## noise_shape_analysis_FIX.c:833:78
   12890:    01 30             	r1 = [sp+64]			  ## noise_shape_analysis_FIX.c:856:17
   12892:    d9 38             	r1 += 0x78			  ## noise_shape_analysis_FIX.c:856:17
   12894:    42 24             	r2 = 0x4			  ## opus_demo.c:208:2
   12896:    43 20             	r3 = 0x0			  ## opus_demo.c:208:2
   12898:    02 03             	rep 0x2 r2 {			  ## opus_demo.c:208:2
   1289a:    93 05             		[r1++=0x4] = r3
                               	}			  ## opus_demo.c:208:2
   1289c:    f2 5d             	if (r2 != 0) goto -0x6 <silk_find_pitch_lags_FIX+0x33A : 12898 >			  ## opus_demo.c:208:2
   1289e:    c8 64             	h[r4+0x8] = r0			  ## noise_shape_analysis_FIX.c:857:32
   128a0:    c8 41             	b[r4+0x1] = r0			  ## noise_shape_analysis_FIX.c:858:36
   128a2:    01 2f             	r1 = [sp+60]			  ## noise_shape_analysis_FIX.c:859:22
   128a4:    90 60             	[r1+0x0] = r0			  ## noise_shape_analysis_FIX.c:859:22
   128a6:    24 84             	goto 0x88 <silk_find_pitch_lags_FIX+0x3D2 : 12930 >			  ## noise_shape_analysis_FIX.c:859:22
   128a8:    41 f0 d4 12       	r1 = 0x12d4  # <WOLASynthesisFilter_Float_M128_m4_r1+0x2D0 : 12d4 >			  ## noise_shape_analysis_FIX.c:837:16
   128ac:    00 31             		 r0 = [sp+68]			  ## noise_shape_analysis_FIX.c:837:16
   128ae:    d8 ee 02 61       	r6 = b[r0+r1] (s)			  ## noise_shape_analysis_FIX.c:837:16
   128b2:    42 f0 9b fd       	r2 = -0x265  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FD9A : fffffffffffffd9a >			  ## noise_shape_analysis_FIX.c:837:16
   128b6:    05 28             		 r5 = [sp+32]			  ## noise_shape_analysis_FIX.c:837:16
   128b8:    f0 f1 60 82       	r8 = r6 * r2  #			  ## noise_shape_analysis_FIX.c:837:16
   128bc:    51 60             		 r1 = [r5+0x0] 			  ## noise_shape_analysis_FIX.c:838:16
   128be:    d4 e9 50 90       	r9 = [sp+80]			  ## noise_shape_analysis_FIX.c:838:16
   128c2:    d0 ec 90 30       	r3 = [r9+0x0]			  ## noise_shape_analysis_FIX.c:836:16
   128c6:    c2 ff ce cc fc ff 	r2 = 0xfffcccce <RAM_LIMIT_H+0xFFE2CCCE : fffcccce >			  ## noise_shape_analysis_FIX.c:838:16
   128cc:    f8 e1 10 72       	r7_r6 = r1 * r2 (s)			  ## noise_shape_analysis_FIX.c:838:16
   128d0:    31 a5             	r1 = r3 << 0x5			  ## noise_shape_analysis_FIX.c:836:16
   128d2:    b4 e0 82 21       	r2 = r8 - r1			  ## noise_shape_analysis_FIX.c:836:16
   128d6:    d0 ec 90 13       	r1 = [r9+0x30]			  ## noise_shape_analysis_FIX.c:839:16
   128da:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## noise_shape_analysis_FIX.c:838:16
   128de:    26 18             	r6 += r2			  ## noise_shape_analysis_FIX.c:837:16
   128e0:    42 e0 9b f9       	r2 = -0x665 <RAM_LIMIT_H+0xFFFFFFFFFFE5F99A : fffffffffffff99a >			  ## noise_shape_analysis_FIX.c:839:16
   128e4:    f8 e1 10 32       	r3_r2 = r1 * r2 (s)			  ## noise_shape_analysis_FIX.c:839:16
   128e8:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## noise_shape_analysis_FIX.c:839:16
   128ec:    e1 1c             	r1 = r6 + r2			  ## noise_shape_analysis_FIX.c:838:16
   128ee:    12 e1 33 13       	r2 = r1 + 0x1333			  ## noise_shape_analysis_FIX.c:839:16
   128f2:    78 e0 01 12       	r1 = sat16(r2) (s)			  ## noise_shape_analysis_FIX.c:841:3
   128f6:    d0 ec 54 80       	r8 = [r5+0x4]			  ## noise_shape_analysis_FIX.c:848:37
   128fa:    d0 ec 94 20       	r2 = [r9+0x4]			  ## noise_shape_analysis_FIX.c:848:58
   128fe:    53 63             	r3 = [r5+0xc] 			  ## noise_shape_analysis_FIX.c:849:38
   12900:    57 6f             	r7 = [r5+0x3c] 			  ## noise_shape_analysis_FIX.c:849:58
   12902:    56 64             	r6 = [r5+0x10] 			  ## noise_shape_analysis_FIX.c:849:97
   12904:    86 27             	[sp+28] = r6			  ## noise_shape_analysis_FIX.c:847:7
   12906:    87 26             	[sp+24] = r7			  ## noise_shape_analysis_FIX.c:847:7
   12908:    83 25             	[sp+20] = r3			  ## noise_shape_analysis_FIX.c:847:7
   1290a:    81 24             	[sp+16] = r1			  ## noise_shape_analysis_FIX.c:847:7
   1290c:    82 23             	[sp+12] = r2			  ## noise_shape_analysis_FIX.c:847:7
   1290e:    d4 e9 09 80       	[sp+8] = r8			  ## noise_shape_analysis_FIX.c:847:7
   12912:    01 2f             	r1 = [sp+60]			  ## noise_shape_analysis_FIX.c:847:7
   12914:    81 21             	[sp+4] = r1			  ## noise_shape_analysis_FIX.c:847:7
   12916:    49 81             	r1 = r4 + 0x1			  ## noise_shape_analysis_FIX.c:847:115
   12918:    02 30             	r2 = [sp+64]			  ## noise_shape_analysis_FIX.c:847:44
   1291a:    da 38             	r2 += 0x78			  ## noise_shape_analysis_FIX.c:847:44
   1291c:    4b 88             	r3 = r4 + 0x8			  ## noise_shape_analysis_FIX.c:847:84
   1291e:    b1 d6             	r1 = r11  #			  ## noise_shape_analysis_FIX.c:847:7
   12920:    81 20             		 [sp] = r1			  ## noise_shape_analysis_FIX.c:847:7
   12922:    bf ea 1b fa       	call -0xbca <silk_pitch_analysis_core : 11d5c >			  ## noise_shape_analysis_FIX.c:847:7
   12926:    41 22             	r1 = 0x2			  ## noise_shape_analysis_FIX.c:847:7
   12928:    b0 e8 00 00       	if (r0 != 0x0) {			  ## noise_shape_analysis_FIX.c:847:7
   1292c:    41 21             		r1 = 0x1
                               	}			  ## noise_shape_analysis_FIX.c:847:7
   1292e:    c9 42             	b[r4+0x2] = r1			  ## noise_shape_analysis_FIX.c:847:7
   12930:    02 96             	sp += 0x58
   12932:    5f 04             	{pc, r15-r4} = [sp++]			  ## noise_shape_analysis_FIX.c:862:1


silk_bwexpander_32:
   12934:    76 04             	[--sp] = {rets, r6-r4}			  ## noise_shape_analysis_FIX.c:283:0
   12936:    f3 e0 80 2b       	r3 = r2 - 0x10000			  ## noise_shape_analysis_FIX.c:285:45
   1293a:    91 03             	rep 0x14 r1 {			  ## noise_shape_analysis_FIX.c:298:3
   1293c:    e0 ee 00 52       		r5_r4 = [r0 ++= 0x0]*r2 (s)			  ## noise_shape_analysis_FIX.c:298:3
   12940:    d0 e1 00 4d       		r5_r4 >>>= 0x10			  ## noise_shape_analysis_FIX.c:298:3
   12944:    f8 f1 20 53       		r5_r4 = r2 * r3 (s)  #			  ## noise_shape_analysis_FIX.c:298:3
   12948:    84 05             			 [r0++=0x4] = r4			  ## noise_shape_analysis_FIX.c:298:3
   1294a:    d2 e1 40 69       		r6 = r5_r4 >>> 0x10 (up)			  ## noise_shape_analysis_FIX.c:298:3
   1294e:    a2 1d             		r2 = r2 + r6
                               	}			  ## noise_shape_analysis_FIX.c:298:3
   12950:    56 04             	{pc, r6-r4} = [sp++]			  ## noise_shape_analysis_FIX.c:312:1


LPC_inverse_pred_gain_QA:
   12952:    7f 04             	[--sp] = {rets, r15-r4}			  ## LPC_inv_pred_gain.c:43:0
   12954:    e2 91             	sp += -0x3c			  ## LPC_inv_pred_gain.c:43:0
   12956:    3d f1 fe 1f       	r13 = r1 + -0x2  #			  ## LPC_inv_pred_gain.c:52:7
   1295a:    80 20             		 [sp] = r0			  ## LPC_inv_pred_gain.c:52:7
   1295c:    37 e1 ff 1f       	r7 = r1 + -0x1			  ## LPC_inv_pred_gain.c:52:7
   12960:    62 e1 01 10       	r2 = r1 & 0x1			  ## LPC_inv_pred_gain.c:49:24
   12964:    60 e0 80 84       	r8 = 0x40000000			  ## LPC_inv_pred_gain.c:49:24
   12968:    c1 14             	r9 = 0			  ## LPC_inv_pred_gain.c:49:24
   1296a:    c5 ff 9e ef ff 00 	r5 = 0xffef9e <RAM_LIMIT_H+0xE5EF9E : ffef9e >			  ## LPC_inv_pred_gain.c:49:24
   12970:    c4 ff 3c df ff 01 	r4 = 0x1ffdf3c <RAM_LIMIT_H+0x1E5DF3C : 1ffdf3c >			  ## LPC_inv_pred_gain.c:49:24
   12976:    c3 14             	r11 = 0			  ## LPC_inv_pred_gain.c:49:24
   12978:    54 8f             	goto 0x15e <LPC_inverse_pred_gain_QA+0x186 : 12ad8 >			  ## LPC_inv_pred_gain.c:49:24
   1297a:    22 a6             	r2 = r2 << 0x6			  ## LPC_inv_pred_gain.c:57:9
   1297c:    86 1c             	r6 = r0 + r2			  ## LPC_inv_pred_gain.c:57:9
   1297e:    d8 ec 6a 31       	r3 = [r6+r1<<2]			  ## LPC_inv_pred_gain.c:57:9
   12982:    3a 1d             	r2 = r3 + r5			  ## LPC_inv_pred_gain.c:57:34
   12984:    04 ec c5 20       	if (r2 > r4) goto 0x18a <LPC_inverse_pred_gain_QA+0x1C0 : 12b12 >			  ## LPC_inv_pred_gain.c:57:34
   12988:    64 e1 01 70       	r4 = r7 & 0x1
   1298c:    32 a7             	r2 = r3 << 0x7			  ## LPC_inv_pred_gain.c:62:13
   1298e:    a2 e0 00 20       	r2 = 0x0 - r2			  ## LPC_inv_pred_gain.c:62:12
   12992:    ab bf             	r3 = r2 >>> 0x1f			  ## LPC_inv_pred_gain.c:65:9
   12994:    d0 e9 31 20       	d[sp+48] = r3_r2
   12998:    f8 f1 20 32       	r3_r2 = r2 * r2 (s)  #			  ## LPC_inv_pred_gain.c:65:9
   1299c:    87 25             		 [sp+20] = r7			  ## LPC_inv_pred_gain.c:65:9
   1299e:    a2 e0 80 34       	r2 = 0x40000000 - r3			  ## LPC_inv_pred_gain.c:66:42
   129a2:    30 e4 00 52       	r5 = abs(r2)			  ## LPC_inv_pred_gain.c:66:42
   129a6:    44 a6             	r4 = r4 << 0x6
   129a8:    df 16             	r15 = r13
   129aa:    05 43             	if (r5 == 0) goto 0x6 <LPC_inverse_pred_gain_QA+0x60 : 129b2 >
   129ac:    80 e1 00 e5       	r14 = clz(r5)			  ## entenc.c:124:2
   129b0:    04 82             	goto 0x4 <LPC_inverse_pred_gain_QA+0x64 : 129b6 >
   129b2:    4e e0 20 00       	r14 = 0x20 <WOLAAnalysisFilter_Float_M64_m4_r1+0x1C : 20 >
   129b6:    40 18             	r0 += r4
   129b8:    a4 f0 3e e0       	r4 = 0x3E - r14  #			  ## LPC_inv_pred_gain.c:72:56
   129bc:    80 29             		 [sp+36] = r0			  ## LPC_inv_pred_gain.c:72:56
   129be:    4c e0 01 00       	r12 = 0x1 <mem_code_size : 0 >			  ## Inlines.h:136:33
   129c2:    c5 14             	r13 = 0			  ## Inlines.h:136:33
   129c4:    d8 e1 00 c4       	r13_r12 <<= r4			  ## Inlines.h:136:33
   129c8:    f6 e1 c0 52       	r5_r4 = r13_r12 / r2 (s)			  ## Inlines.h:138:20
   129cc:    cf bf             	r7 = r4 >>> 0x1f			  ## Inlines.h:140:5
   129ce:    74 18             	r4 += r7			  ## Inlines.h:140:5
   129d0:    cd bf             	r5 = r4 >>> 0x1f
   129d2:    d0 e9 29 40       	d[sp+40] = r5_r4
   129d6:    f0 e1 20 49       	r4 = r2 * r9			  ## LPC_inv_pred_gain.c:76:17
   129da:    f8 e1 20 c8       	r13_r12 = r2 * r8 (u)			  ## LPC_inv_pred_gain.c:76:17
   129de:    d4 18             	r4 += r13			  ## LPC_inv_pred_gain.c:76:17
   129e0:    ab bf             	r3 = r2 >>> 0x1f			  ## Inlines.h:138:21
   129e2:    f0 e1 30 28       	r2 = r3 * r8			  ## LPC_inv_pred_gain.c:76:17
   129e6:    b4 e0 40 d2       	r13 = r4 + r2			  ## LPC_inv_pred_gain.c:76:17
   129ea:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## LPC_inv_pred_gain.c:76:17
   129ee:    d0 e9 09 c0       	d[sp+8] = r13_r12			  ## LPC_inv_pred_gain.c:76:17
   129f2:    a2 e0 1f e0       	r2 = 0x1F - r14			  ## LPC_inv_pred_gain.c:76:17
   129f6:    40 21             	r0 = 0x1			  ## LPC_inv_pred_gain.c:76:17
   129f8:    c8 e1 00 22       	r2 = r0 << r2			  ## LPC_inv_pred_gain.c:76:17
   129fc:    ab bf             	r3 = r2 >>> 0x1f			  ## LPC_inv_pred_gain.c:76:17
   129fe:    d0 e9 19 20       	d[sp+24] = r3_r2			  ## LPC_inv_pred_gain.c:76:17
   12a02:    a8 e0 20 e0       	r8 = 0x20 - r14			  ## LPC_inv_pred_gain.c:71:15
   12a06:    60 e1 01 10       	r0 = r1 & 0x1			  ## LPC_inv_pred_gain.c:82:21
   12a0a:    c1 d4             	r9 = 0  #			  ## LPC_inv_pred_gain.c:82:21
   12a0c:    80 21             		 [sp+4] = r0
   12a0e:    fd 16             	r13 = r15
   12a10:    d0 16             	r0 = r13
   12a12:    47 20             	r7 = 0x0
   12a14:    24 8c             	goto 0x98 <LPC_inverse_pred_gain_QA+0x15C : 12aae >
   12a16:    d8 ec 6a 20       	r2 = [r6+r0<<2]			  ## LPC_inv_pred_gain.c:91:13
   12a1a:    d8 ec 6a 37       	r3 = [r6+r7<<2]			  ## LPC_inv_pred_gain.c:91:13
   12a1e:    ee e0 80 94       	r14 = r9 + 0x40000000			  ## LPC_inv_pred_gain.c:91:13
   12a22:    c7 14             	r15 = 0			  ## LPC_inv_pred_gain.c:91:13
   12a24:    d0 e9 30 40       	r5_r4 = d[sp+48]			  ## LPC_inv_pred_gain.c:91:13
   12a28:    fc e1 20 f4       	r15_r14 += r2 * r4 (s)			  ## LPC_inv_pred_gain.c:91:13
   12a2c:    d0 e1 0f e9       	r15_r14 >>= 0x1f			  ## LPC_inv_pred_gain.c:91:13
   12a30:    b4 e0 32 4e       	r4 = r3 - r14			  ## LPC_inv_pred_gain.c:91:13
   12a34:    b4 ed 00 60       	ifs (r4 < 0x0) {			  ## LPC_inv_pred_gain.c:91:13
   12a38:    3b 3f             		r3 ^= 0x80000000			  ## LPC_inv_pred_gain.c:91:13
   12a3a:    c2 ff ff ff ff 7f 		r2 = 0x7fffffff
                               	} else { <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## LPC_inv_pred_gain.c:91:13
   12a40:    5e e1 00 e4       		r14 = r14 ^ 0x80000000			  ## LPC_inv_pred_gain.c:91:13
   12a44:    60 e0 00 24       		r2 = 0x80000000
                               	}			  ## LPC_inv_pred_gain.c:91:13
   12a48:    90 e1 32 3e       	r3 = r3 & r14			  ## LPC_inv_pred_gain.c:91:13
   12a4c:    33 ed 00 00       	ifs (r3 >= 0x0) {			  ## LPC_inv_pred_gain.c:91:13
   12a50:    42 16             		r2 = r4
                               	}			  ## LPC_inv_pred_gain.c:91:13
   12a52:    d0 e9 28 40       	r5_r4 = d[sp+40]
   12a56:    f8 e1 20 34       	r3_r2 = r2 * r4 (s)
   12a5a:    88 f8 0a 02       	if (r8 != 0x1) goto 0x14 <LPC_inverse_pred_gain_QA+0x120 : 12a72 >			  ## LPC_inv_pred_gain.c:92:12
   12a5e:    24 15             	r5_r4 = r3_r2			  ## LPC_inv_pred_gain.c:92:12
   12a60:    d0 e1 01 4c       	r5_r4 >>>= 0x1			  ## LPC_inv_pred_gain.c:92:12
   12a64:    6a e1 01 20       	r10 = r2 & 0x1			  ## LPC_inv_pred_gain.c:92:12
   12a68:    b4 e0 40 ea       	r14 = r4 + r10			  ## LPC_inv_pred_gain.c:92:12
   12a6c:    b8 e0 50 fb       	r15 = r5 + r11 + c			  ## LPC_inv_pred_gain.c:92:12
   12a70:    04 88             	goto 0x10 <LPC_inverse_pred_gain_QA+0x130 : 12a82 >			  ## LPC_inv_pred_gain.c:92:12
   12a72:    d0 e9 18 40       	r5_r4 = d[sp+24]
   12a76:    b4 e0 20 e4       	r14 = r2 + r4			  ## LPC_inv_pred_gain.c:92:12
   12a7a:    b8 e0 30 f5       	r15 = r3 + r5 + c			  ## LPC_inv_pred_gain.c:92:12
   12a7e:    d8 e1 03 e8       	r15_r14 >>>= r8			  ## LPC_inv_pred_gain.c:92:12
   12a82:    42 20             	r2 = 0x0			  ## LPC_inv_pred_gain.c:93:31
   12a84:    e4 e0 00 e4       	r4 = r14 + 0x80000000			  ## LPC_inv_pred_gain.c:93:31
   12a88:    b8 e0 f0 52       	r5 = r15 + r2 + c			  ## LPC_inv_pred_gain.c:93:31
   12a8c:    fc e0 ff 43       	r12 = r4 - 0xFFFFFFFF			  ## LPC_inv_pred_gain.c:93:31
   12a90:    b8 e0 52 42       	r4 = r5 - r2 - !c			  ## LPC_inv_pred_gain.c:93:31
   12a94:    64 e0 00 55       	r5 = psr			  ## LPC_inv_pred_gain.c:93:31
   12a98:    90 e1 40 4c       	r4 = r4 | r12			  ## LPC_inv_pred_gain.c:93:31
   12a9c:    b5 e1 85 50       	r5 = sextra(r5, p:0x1, l:0x1)			  ## LPC_inv_pred_gain.c:93:31
   12aa0:    45 fb 38 00       	if ((r5 & r4) != 0) goto 0x70 <LPC_inverse_pred_gain_QA+0x1C2 : 12b14 >			  ## LPC_inv_pred_gain.c:93:31
   12aa4:    02 29             	r2 = [sp+36]			  ## LPC_inv_pred_gain.c:96:15
   12aa6:    d8 ec 2b e7       	[r2+r7<<2] = r14			  ## LPC_inv_pred_gain.c:96:15
   12aaa:    f8 3f             	r0 += -0x1			  ## LPC_inv_pred_gain.c:89:3
   12aac:    c7 21             	r7 += 0x1			  ## LPC_inv_pred_gain.c:89:23
   12aae:    07 ee b2 11       	ifs (r1 > r7) goto -0x9c <LPC_inverse_pred_gain_QA+0xC4 : 12a16 >
   12ab2:    3d f1 ff df       	r13 = r13 + -0x1  #
   12ab6:    07 25             		 r7 = [sp+20]
   12ab8:    d0 e9 08 20       	r3_r2 = d[sp+8]
   12abc:    d0 f1 00 22       	r3_r2 <<= 0x20  #
   12ac0:    00 20             		 r0 = [sp]
   12ac2:    d0 e1 00 2e       	r3_r2 >>>= 0x20
   12ac6:    c7 21             	r7 += 0x1
   12ac8:    28 d5             	r9_r8 = r3_r2  #
   12aca:    02 21             		 r2 = [sp+4]
   12acc:    c4 ff 3c df ff 01 	r4 = 0x1ffdf3c <RAM_LIMIT_H+0x1E5DF3C : 1ffdf3c >
   12ad2:    c5 ff 9e ef ff 00 	r5 = 0xffef9e <RAM_LIMIT_H+0xE5EF9E : ffef9e >
   12ad8:    f9 3f             	r1 += -0x1
   12ada:    01 fd 4e 03       	ifs (r1 >= 0x1) goto -0x164 <LPC_inverse_pred_gain_QA+0x28 : 1297a >
   12ade:    21 a6             	r1 = r2 << 0x6
   12ae0:    d8 ec 02 01       	r0 = [r0+r1]			  ## LPC_inv_pred_gain.c:101:8
   12ae4:    09 1d             	r1 = r0 + r5			  ## LPC_inv_pred_gain.c:101:33
   12ae6:    42 20             	r2 = 0x0			  ## LPC_inv_pred_gain.c:101:33
   12ae8:    04 ec 14 10       	if (r1 > r4) goto 0x28 <LPC_inverse_pred_gain_QA+0x1C2 : 12b14 >			  ## LPC_inv_pred_gain.c:101:33
   12aec:    00 a7             	r0 = r0 << 0x7			  ## LPC_inv_pred_gain.c:106:12
   12aee:    a0 e0 00 00       	r0 = 0x0 - r0			  ## LPC_inv_pred_gain.c:106:11
   12af2:    f8 e1 00 10       	r1_r0 = r0 * r0 (s)			  ## LPC_inv_pred_gain.c:109:43
   12af6:    a0 e0 80 14       	r0 = 0x40000000 - r1			  ## LPC_inv_pred_gain.c:109:41
   12afa:    f0 e1 00 49       	r4 = r0 * r9			  ## LPC_inv_pred_gain.c:113:16
   12afe:    f8 e1 00 28       	r3_r2 = r0 * r8 (u)			  ## LPC_inv_pred_gain.c:113:16
   12b02:    34 18             	r4 += r3			  ## LPC_inv_pred_gain.c:113:16
   12b04:    89 bf             	r1 = r0 >>> 0x1f			  ## LPC_inv_pred_gain.c:113:16
   12b06:    f0 e1 10 08       	r0 = r1 * r8			  ## LPC_inv_pred_gain.c:113:16
   12b0a:    43 1c             	r3 = r4 + r0			  ## LPC_inv_pred_gain.c:113:16
   12b0c:    d0 e1 0e 29       	r3_r2 >>= 0x1e			  ## LPC_inv_pred_gain.c:113:16
   12b10:    04 81             	goto 0x2 <LPC_inverse_pred_gain_QA+0x1C2 : 12b14 >
   12b12:    42 20             	r2 = 0x0
   12b14:    20 16             	r0 = r2			  ## LPC_inv_pred_gain.c:118:1
   12b16:    02 8f             	sp += 0x3c			  ## LPC_inv_pred_gain.c:118:1
   12b18:    5f 04             	{pc, r15-r4} = [sp++]			  ## LPC_inv_pred_gain.c:118:1


silk_LPC_inverse_pred_gain_Q24:
   12b1a:    75 04             	[--sp] = {rets, r5, r4}			  ## LPC_inv_pred_gain.c:162:0
   12b1c:    03 16             	r3 = r0			  ## LPC_inv_pred_gain.c:162:0
   12b1e:    44 e0 e0 34       	r4 = 0x34e0 <WOLASynthesisFilter_Float_M256_m4_r1+0xCDC : 34e0 >			  ## LPC_inv_pred_gain.c:162:0
   12b22:    30 1d             	r0 = r3 + r4			  ## LPC_inv_pred_gain.c:171:58
   12b24:    65 e1 01 20       	r5 = r2 & 0x1			  ## LPC_inv_pred_gain.c:173:27
   12b28:    55 a6             	r5 = r5 << 0x6			  ## LPC_inv_pred_gain.c:176:7
   12b2a:    53 18             	r3 += r5			  ## LPC_inv_pred_gain.c:176:7
   12b2c:    43 18             	r3 += r4			  ## LPC_inv_pred_gain.c:176:7
   12b2e:    44 20             	r4 = 0x0			  ## LPC_inv_pred_gain.c:176:7
   12b30:    04 85             	goto 0xa <silk_LPC_inverse_pred_gain_Q24+0x22 : 12b3c >			  ## LPC_inv_pred_gain.c:176:7
   12b32:    d8 ec 1a 54       	r5 = [r1+r4<<2]			  ## LPC_inv_pred_gain.c:177:18
   12b36:    d8 ec 3b 54       	[r3+r4<<2] = r5			  ## LPC_inv_pred_gain.c:177:16
   12b3a:    c4 21             	r4 += 0x1			  ## LPC_inv_pred_gain.c:176:26
   12b3c:    82 ed f9 41       	ifs (r4 < r2) goto -0xe <silk_LPC_inverse_pred_gain_Q24+0x18 : 12b32 >
   12b40:    21 16             	r1 = r2			  ## LPC_inv_pred_gain.c:180:11
   12b42:    bf ea 06 ff       	call -0x1f4 <LPC_inverse_pred_gain_QA : 12952 >			  ## LPC_inv_pred_gain.c:180:11
   12b46:    55 04             	{pc, r5, r4} = [sp++]			  ## LPC_inv_pred_gain.c:183:2


silk_noise_shape_analysis_FIX:
   12b48:    7f 04             	[--sp] = {rets, r15-r4}			  ## noise_shape_analysis_FIX.c:996:0
   12b4a:    e2 83             	sp += -0x74			  ## noise_shape_analysis_FIX.c:996:0
   12b4c:    0a 16             	r10 = r0			  ## noise_shape_analysis_FIX.c:996:0
   12b4e:    40 20             	r0 = 0x0			  ## noise_shape_analysis_FIX.c:996:0
   12b50:    17 f1 7c a4       	r7 = r10 + 0x147c  #			  ## noise_shape_analysis_FIX.c:996:0
   12b54:    80 3c             		 [sp+112] = r0			  ## noise_shape_analysis_FIX.c:998:44
   12b56:    3c d6             	r12 = r3  #			  ## noise_shape_analysis_FIX.c:998:44
   12b58:    70 62             		 r0 = [r7+0x8] 			  ## noise_shape_analysis_FIX.c:1026:45
   12b5a:    25 d6             	r5 = r2  #			  ## noise_shape_analysis_FIX.c:1026:45
   12b5c:    76 61             		 r6 = [r7+0x4] 			  ## noise_shape_analysis_FIX.c:1026:45
   12b5e:    14 16             	r4 = r1
   12b60:    d0 ec 78 91       	r9 = [r7+0x18]			  ## noise_shape_analysis_FIX.c:1023:30
   12b64:    11 e1 20 a4       	r1 = r10 + 0x1420
   12b68:    60 d8             	r0 += r6  #			  ## noise_shape_analysis_FIX.c:1026:45
   12b6a:    81 38             		 [sp+96] = r1			  ## noise_shape_analysis_FIX.c:1026:45
   12b6c:    c0 e1 02 8c       	r8 = r0 >>> 0x2			  ## noise_shape_analysis_FIX.c:1026:45
   12b70:    06 e1 e0 41       	r6 = r4 + 0x1e0			  ## noise_shape_analysis_FIX.c:1026:45
   12b74:    d0 ec 61 80       	[r6+0x0] = r8			  ## noise_shape_analysis_FIX.c:1026:31
   12b78:    30 e1 08 96       	r0 = r9 + -0x9f8			  ## noise_shape_analysis_FIX.c:1030:34
   12b7c:    88 a4             	r0 = r0 >>> 0x4			  ## noise_shape_analysis_FIX.c:1030:34
   12b7e:    bf ea e5 f4       	call -0x1636 <silk_sigm_Q15 : 1154c >			  ## noise_shape_analysis_FIX.c:1030:34
   12b82:    c0 f1 01 fc       	r15 = r0 >>> 0x1  #			  ## noise_shape_analysis_FIX.c:1030:34
   12b86:    86 24             		 [sp+16] = r6			  ## noise_shape_analysis_FIX.c:1030:34
   12b88:    d0 ec 65 f0       	[r6+0x4] = r15			  ## noise_shape_analysis_FIX.c:1030:32
   12b8c:    42 f0 dc 33       	r2 = 0x33dc  # <WOLASynthesisFilter_Float_M256_m4_r1+0xBD8 : 33dc >			  ## noise_shape_analysis_FIX.c:1030:32
   12b90:    87 23             		 [sp+12] = r7			  ## noise_shape_analysis_FIX.c:1030:32
   12b92:    b4 f0 a0 02       	r0 = r10 + r2  #			  ## noise_shape_analysis_FIX.c:1030:32
   12b96:    71 60             		 r1 = [r7+0x0] 			  ## noise_shape_analysis_FIX.c:1034:18
   12b98:    02 f1 0c 41       	r2 = r4 + 0x10c  #			  ## noise_shape_analysis_FIX.c:1034:18
   12b9c:    84 36             		 [sp+88] = r4			  ## noise_shape_analysis_FIX.c:1034:18
   12b9e:    9e d6             	r14 = r9  #
   12ba0:    82 22             		 [sp+8] = r2
   12ba2:    81 5a             	if (r1 != 0) goto 0x34 <silk_noise_shape_analysis_FIX+0x90 : 12bd8 >
   12ba4:    e1 f0 80 8c       	r1 = r8 + 0x4000  #			  ## noise_shape_analysis_FIX.c:1037:19
   12ba8:    02 38             		 r2 = [sp+96]			  ## noise_shape_analysis_FIX.c:1035:49
   12baa:    f8 f1 f0 71       	r7_r6 = r15 * r1 (s)  #			  ## noise_shape_analysis_FIX.c:1037:19
   12bae:    22 60             		 r2 = [r2+0x0] 			  ## noise_shape_analysis_FIX.c:1035:49
   12bb0:    d0 e1 00 61       	r7_r6 <<= 0x10			  ## noise_shape_analysis_FIX.c:1037:19
   12bb4:    d0 e1 00 6e       	r7_r6 >>>= 0x20			  ## noise_shape_analysis_FIX.c:1037:19
   12bb8:    a1 e0 80 2f       	r1 = 0x100 - r2			  ## noise_shape_analysis_FIX.c:1035:35
   12bbc:    12 a8             	r2 = r1 << 0x8			  ## noise_shape_analysis_FIX.c:1036:10
   12bbe:    f8 e1 20 31       	r3_r2 = r2 * r1 (s)			  ## noise_shape_analysis_FIX.c:1036:10
   12bc2:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## noise_shape_analysis_FIX.c:1036:10
   12bc6:    21 a3             	r1 = r2 << 0x3			  ## noise_shape_analysis_FIX.c:1037:19
   12bc8:    a1 e0 00 10       	r1 = 0x0 - r1			  ## noise_shape_analysis_FIX.c:1037:19
   12bcc:    f8 e1 10 36       	r3_r2 = r1 * r6 (s)			  ## noise_shape_analysis_FIX.c:1037:19
   12bd0:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## noise_shape_analysis_FIX.c:1037:19
   12bd4:    b4 e0 20 e9       	r14 = r2 + r9			  ## noise_shape_analysis_FIX.c:1037:19
   12bd8:    17 e1 20 a0       	r7 = r10 + 0x1020
   12bdc:    44 f0 f0 25       	r4 = 0x25f0  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## noise_shape_analysis_FIX.c:1007:37
   12be0:    79 42             		 r1 = b[r7+0x2] (u)			  ## noise_shape_analysis_FIX.c:1042:26
   12be2:    d4 e9 29 a0       	[sp+40] = r10
   12be6:    0b f1 80 00       	r11 = r0 + 0x80  #			  ## noise_shape_analysis_FIX.c:1012:22
   12bea:    80 39             		 [sp+100] = r0
   12bec:    87 21             	[sp+4] = r7			  ## noise_shape_analysis_FIX.c:1042:6
   12bee:    81 f8 12 04       	if (r1 != 0x2) goto 0x24 <silk_noise_shape_analysis_FIX+0xCE : 12c16 >			  ## noise_shape_analysis_FIX.c:1042:6
   12bf2:    41 e0 22 08       	r1 = 0x822 <WOLAAnalysisFilter_Float_M128_m4_r1+0x1E : 822 >			  ## noise_shape_analysis_FIX.c:1044:19
   12bf6:    d8 ec aa 11       	r1 = [r10+r1<<2]			  ## noise_shape_analysis_FIX.c:1044:19
   12bfa:    45 20             	r5 = 0x0			  ## noise_shape_analysis_FIX.c:1044:19
   12bfc:    fd 43             	b[r7+0x3] = r5			  ## noise_shape_analysis_FIX.c:1058:39
   12bfe:    03 24             	r3 = [sp+16]			  ## noise_shape_analysis_FIX.c:1058:39
   12c00:    42 20             	r2 = 0x0			  ## noise_shape_analysis_FIX.c:1058:39
   12c02:    82 31             	[sp+68] = r2			  ## noise_shape_analysis_FIX.c:1059:28
   12c04:    99 a7             	r1 = r1 >>> 0x7			  ## noise_shape_analysis_FIX.c:1044:19
   12c06:    e1 d8             	r1 += r14  #			  ## noise_shape_analysis_FIX.c:1044:19
   12c08:    b5 62             		 [r3+0x8] = r5			  ## noise_shape_analysis_FIX.c:1059:28
   12c0a:    81 20             	[sp] = r1			  ## noise_shape_analysis_FIX.c:1059:28
   12c0c:    07 38             	r7 = [sp+96]			  ## noise_shape_analysis_FIX.c:1059:28
   12c0e:    79 90             	r1 = r7 + 0x10			  ## noise_shape_analysis_FIX.c:1059:28
   12c10:    81 2b             	[sp+44] = r1			  ## noise_shape_analysis_FIX.c:1165:15
   12c12:    81 3a             	[sp+104] = r1			  ## noise_shape_analysis_FIX.c:1060:2
   12c14:    34 82             	goto 0xc4 <silk_noise_shape_analysis_FIX+0x192 : 12cda >			  ## noise_shape_analysis_FIX.c:1060:2
   12c16:    d4 e9 5d c0       	[sp+92] = r12
   12c1a:    c0 ff 66 66 fe ff 	r0 = 0xfffe6666 <RAM_LIMIT_H+0xFFE46666 : fffe6666 >			  ## noise_shape_analysis_FIX.c:1047:19
   12c20:    f8 e1 90 10       	r1_r0 = r9 * r0 (s)			  ## noise_shape_analysis_FIX.c:1047:19
   12c24:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## noise_shape_analysis_FIX.c:1047:19
   12c28:    00 e1 00 0c       	r0 = r0 + 0xc00			  ## noise_shape_analysis_FIX.c:1047:19
   12c2c:    a1 e0 80 8c       	r1 = 0x4000 - r8			  ## noise_shape_analysis_FIX.c:1047:19
   12c30:    f8 e1 00 d1       	r13_r12 = r0 * r1 (s)			  ## noise_shape_analysis_FIX.c:1047:19
   12c34:    43 20             	r3 = 0x0
   12c36:    48 e0 02 00       	r8 = 0x2 <mem_code_size+0x2 : 2 >
   12c3a:    4f e0 20 00       	r15 = 0x20 <WOLAAnalysisFilter_Float_M64_m4_r1+0x1C : 20 >
   12c3e:    d0 f1 00 c9       	r13_r12 >>= 0x10  #			  ## noise_shape_analysis_FIX.c:1047:19
   12c42:    80 3a             		 [sp+104] = r0			  ## noise_shape_analysis_FIX.c:1047:19
   12c44:    44 20             	r4 = 0x0			  ## noise_shape_analysis_FIX.c:1047:19
   12c46:    c2 14             	r10 = 0			  ## noise_shape_analysis_FIX.c:1047:19
   12c48:    c1 14             	r9 = 0
   12c4a:    04 9a             	goto 0x34 <silk_noise_shape_analysis_FIX+0x138 : 12c80 >
   12c4c:    e8 8c             	r0 = sp + 108
   12c4e:    e9 90             	r1 = sp + 112
   12c50:    4b 20             	r3 = 0x20			  ## noise_shape_analysis_FIX.c:1066:4
   12c52:    52 16             	r2 = r5			  ## noise_shape_analysis_FIX.c:1066:4
   12c54:    bf ea 35 f7       	call -0x1196 <silk_sum_sqr_shift : 11ac2 >			  ## noise_shape_analysis_FIX.c:1066:4
   12c58:    03 3c             	r3 = [sp+112]			  ## noise_shape_analysis_FIX.c:1067:11
   12c5a:    c8 f1 f2 13       	r1 = r15 >> r3  #			  ## noise_shape_analysis_FIX.c:1067:11
   12c5e:    00 3b             		 r0 = [sp+108]			  ## noise_shape_analysis_FIX.c:1067:8
   12c60:    10 18             	r0 += r1			  ## noise_shape_analysis_FIX.c:1067:8
   12c62:    80 3b             	[sp+108] = r0			  ## noise_shape_analysis_FIX.c:1067:8
   12c64:    80 3a             	[sp+104] = r0			  ## noise_shape_analysis_FIX.c:1067:8
   12c66:    bf ea 5d f4       	call -0x1746 <silk_lin2log : 11524 >			  ## noise_shape_analysis_FIX.c:1069:20
   12c6a:    39 ed 01 80       	ifs (r9 >= 0x1) {
   12c6e:    b4 e0 02 1a       		r1 = r0 - r10			  ## noise_shape_analysis_FIX.c:1071:28
   12c72:    30 e4 00 11       		r1 = abs(r1)			  ## noise_shape_analysis_FIX.c:1071:28
   12c76:    14 18             		r4 += r1
                               	}			  ## noise_shape_analysis_FIX.c:1071:25
   12c78:    09 e1 01 90       	r9 = r9 + 0x1			  ## noise_shape_analysis_FIX.c:1065:82
   12c7c:    d5 20             	r5 += 0x40			  ## noise_shape_analysis_FIX.c:1074:18
   12c7e:    0a 16             	r10 = r0
   12c80:    01 38             	r1 = [sp+96]			  ## noise_shape_analysis_FIX.c:1065:19
   12c82:    d0 ec 12 01       	r0 = [++r1=0x10]			  ## noise_shape_analysis_FIX.c:1065:19
   12c86:    e0 e1 05 00       	r0 = r0 * 0x5			  ## noise_shape_analysis_FIX.c:1065:19
   12c8a:    f4 e1 01 08       	r0 = r0 / r8 (s)			  ## noise_shape_analysis_FIX.c:1065:76
   12c8e:    80 ed dd 91       	ifs (r9 < r0) goto -0x46 <silk_noise_shape_analysis_FIX+0x104 : 12c4c >			  ## noise_shape_analysis_FIX.c:1065:76
   12c92:    30 f1 80 4d       	r0 = r4 + -0x280  #			  ## noise_shape_analysis_FIX.c:1077:30
   12c96:    83 31             		 [sp+68] = r3			  ## noise_shape_analysis_FIX.c:1077:30
   12c98:    41 f0 9a 19       	r1 = 0x199a  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x196 : 199a >			  ## noise_shape_analysis_FIX.c:1077:30
   12c9c:    81 2b             		 [sp+44] = r1			  ## noise_shape_analysis_FIX.c:1077:30
   12c9e:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## noise_shape_analysis_FIX.c:1077:30
   12ca2:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## noise_shape_analysis_FIX.c:1077:30
   12ca6:    bf ea 51 f4       	call -0x175e <silk_sigm_Q15 : 1154c >			  ## noise_shape_analysis_FIX.c:1077:30
   12caa:    89 a7             	r1 = r0 >>> 0x7			  ## noise_shape_analysis_FIX.c:1077:30
   12cac:    03 24             	r3 = [sp+16]			  ## noise_shape_analysis_FIX.c:1077:30
   12cae:    b1 62             	[r3+0x8] = r1			  ## noise_shape_analysis_FIX.c:1077:28
   12cb0:    40 21             	r0 = 0x1			  ## noise_shape_analysis_FIX.c:1077:28
   12cb2:    31 ed c1 00       	ifs (r1 >= 0xc1) {			  ## noise_shape_analysis_FIX.c:1077:28
   12cb6:    40 20             		r0 = 0x0
                               	}			  ## noise_shape_analysis_FIX.c:1077:28
   12cb8:    b4 f0 c0 2e       	r2 = r12 + r14  #			  ## noise_shape_analysis_FIX.c:1077:28
   12cbc:    f8 43             		 b[r7+0x3] = r0			  ## noise_shape_analysis_FIX.c:1077:28
   12cbe:    d0 ec 34 f0       	r15 = [r3+0x4]			  ## noise_shape_analysis_FIX.c:1077:28
   12cc2:    21 18             	r1 += r2			  ## noise_shape_analysis_FIX.c:1088:19
   12cc4:    30 e1 80 1f       	r0 = r1 + -0x80			  ## noise_shape_analysis_FIX.c:1088:19
   12cc8:    44 f0 f0 25       	r4 = 0x25f0  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## noise_shape_analysis_FIX.c:1007:37
   12ccc:    80 20             		 [sp] = r0
   12cce:    d4 e9 28 a0       	r10 = [sp+40]
   12cd2:    07 38             	r7 = [sp+96]
   12cd4:    00 39             	r0 = [sp+100]
   12cd6:    d4 e9 5c c0       	r12 = [sp+92]
   12cda:    01 e1 c0 00       	r1 = r0 + 0xc0			  ## noise_shape_analysis_FIX.c:1013:24
   12cde:    60 f0 84 28       	r2 = 0x420000  #			  ## noise_shape_analysis_FIX.c:1097:3
   12ce2:    81 34             		 [sp+80] = r1			  ## noise_shape_analysis_FIX.c:1095:17
   12ce4:    c1 d4             	r9 = 0  #			  ## noise_shape_analysis_FIX.c:1095:17
   12ce6:    31 63             		 r1 = [r3+0xc] 			  ## noise_shape_analysis_FIX.c:1095:17
   12ce8:    d0 20             	r0 += 0x40			  ## noise_shape_analysis_FIX.c:1011:22
   12cea:    b4 f0 a0 04       	r0 = r10 + r4  #			  ## noise_shape_analysis_FIX.c:1007:37
   12cee:    80 35             		 [sp+84] = r0			  ## noise_shape_analysis_FIX.c:1007:37
   12cf0:    f8 f1 10 32       	r3_r2 = r1 * r2 (s)  #			  ## noise_shape_analysis_FIX.c:1097:3
   12cf4:    80 29             		 [sp+36] = r0			  ## noise_shape_analysis_FIX.c:1097:3
   12cf6:    d0 e1 00 2e       	r3_r2 >>>= 0x20			  ## noise_shape_analysis_FIX.c:1097:3
   12cfa:    f8 e1 20 32       	r3_r2 = r2 * r2 (s)			  ## noise_shape_analysis_FIX.c:1097:3
   12cfe:    d0 e1 00 21       	r3_r2 <<= 0x10			  ## Inlines.h:122:21
   12d02:    30 e1 a0 cf       	r0 = r12 + -0x60			  ## noise_shape_analysis_FIX.c:1018:12
   12d06:    60 f0 80 1b       	r1 = 0x10000  #
   12d0a:    80 30             		 [sp+64] = r0
   12d0c:    42 20             	r2 = 0x0
   12d0e:    2c 80             	r4 = r2 + 0x0			  ## Inlines.h:122:21
   12d10:    b8 e0 30 51       	r5 = r3 + r1 + c			  ## Inlines.h:122:21
   12d14:    c8 ff 00 00 33 f3 	r8 = 0xf3330000 <RAM_LIMIT_H+0xF3190000 : f3330000 >			  ## Inlines.h:122:20
   12d1a:    f6 e1 80 35       	r3_r2 = r9_r8 / r5 (s)			  ## Inlines.h:122:20
   12d1e:    11 3d             	r1 = -0x3			  ## noise_shape_analysis_FIX.c:1098:15
   12d20:    f0 e1 f0 01       	r0 = r15 * r1			  ## noise_shape_analysis_FIX.c:1098:15
   12d24:    e0 e0 80 0b       	r0 = r0 + 0x10000			  ## noise_shape_analysis_FIX.c:1098:15
   12d28:    41 e0 8f 02       	r1 = 0x28f <ROM_RAM_SIZE+0x8E : 28e >			  ## noise_shape_analysis_FIX.c:1098:15
   12d2c:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## noise_shape_analysis_FIX.c:1098:15
   12d30:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## noise_shape_analysis_FIX.c:1098:15
   12d34:    84 1c             	r4 = r0 + r2			  ## noise_shape_analysis_FIX.c:1101:15
   12d36:    84 28             	[sp+32] = r4
   12d38:    cc a2             	r4 = r4 >>> 0x2			  ## noise_shape_analysis_FIX.c:1103:15
   12d3a:    20 1e             	r0 = r2 - r0			  ## noise_shape_analysis_FIX.c:1100:15
   12d3c:    00 ae             	r0 = r0 << 0xe			  ## noise_shape_analysis_FIX.c:1103:15
   12d3e:    f4 e1 01 04       	r0 = r0 / r4 (s)			  ## noise_shape_analysis_FIX.c:1103:15
   12d42:    80 27             	[sp+28] = r0			  ## noise_shape_analysis_FIX.c:1107:7
   12d44:    00 39             	r0 = [sp+100]			  ## noise_shape_analysis_FIX.c:1107:7
   12d46:    d8 3c             	r0 += 0x7c			  ## noise_shape_analysis_FIX.c:1107:7
   12d48:    40 f0 9c 34       	r0 = 0x349c  # <WOLASynthesisFilter_Float_M256_m4_r1+0xC98 : 349c >			  ## noise_shape_analysis_FIX.c:1107:7
   12d4c:    80 26             		 [sp+24] = r0			  ## noise_shape_analysis_FIX.c:1107:7
   12d4e:    0a 18             	r10 += r0			  ## noise_shape_analysis_FIX.c:1107:7
   12d50:    01 e1 48 a0       	r1 = r10 + 0x48			  ## noise_shape_analysis_FIX.c:1107:7
   12d54:    00 e1 44 a0       	r0 = r10 + 0x44			  ## noise_shape_analysis_FIX.c:1107:7
   12d58:    80 33             	[sp+76] = r0			  ## noise_shape_analysis_FIX.c:1107:7
   12d5a:    10 3f             	r0 = -0x1			  ## noise_shape_analysis_FIX.c:1107:7
   12d5c:    80 2f             	[sp+60] = r0			  ## noise_shape_analysis_FIX.c:1107:7
   12d5e:    00 22             	r0 = [sp+8]			  ## noise_shape_analysis_FIX.c:1107:7
   12d60:    80 2e             	[sp+56] = r0			  ## noise_shape_analysis_FIX.c:1107:7
   12d62:    42 20             	r2 = 0x0			  ## noise_shape_analysis_FIX.c:1107:7
   12d64:    d4 e9 15 a0       	[sp+20] = r10
   12d68:    81 32             	[sp+72] = r1
   12d6a:    e4 92             	goto 0x3a4 <silk_noise_shape_analysis_FIX+0x5C8 : 13110 >
   12d6c:    82 2d             	[sp+52] = r2
   12d6e:    6a 30             	r2 = 0xb0			  ## noise_shape_analysis_FIX.c:1119:3
   12d70:    53 20             	r3 = 0x40			  ## noise_shape_analysis_FIX.c:1119:3
   12d72:    05 29             	r5 = [sp+36]			  ## noise_shape_analysis_FIX.c:1119:3
   12d74:    50 d6             	r0 = r5  #			  ## noise_shape_analysis_FIX.c:1119:3
   12d76:    01 30             		 r1 = [sp+64]			  ## noise_shape_analysis_FIX.c:1119:3
   12d78:    bf ea f1 f5       	call -0x141e <silk_apply_sine_window_n : 1195e >			  ## noise_shape_analysis_FIX.c:1119:3
   12d7c:    51 d6             	r1 = r5  #			  ## noise_shape_analysis_FIX.c:1125:11
   12d7e:    74 66             		 r4 = [r7+0x18] 			  ## noise_shape_analysis_FIX.c:1122:24
   12d80:    70 6d             	r0 = [r7+0x34] 			  ## noise_shape_analysis_FIX.c:1125:66
   12d82:    0b 81             	r3 = r0 + 0x1			  ## noise_shape_analysis_FIX.c:1125:82
   12d84:    6a 30             	r2 = 0xb0			  ## noise_shape_analysis_FIX.c:1125:11
   12d86:    00 34             	r0 = [sp+80]			  ## noise_shape_analysis_FIX.c:1125:11
   12d88:    bf ea 1a f6       	call -0x13cc <silk_autocorr : 119c0 >			  ## noise_shape_analysis_FIX.c:1125:11
   12d8c:    d0 ec a0 10       	r1 = [r10+0x0]			  ## noise_shape_analysis_FIX.c:1128:18
   12d90:    9a a4             	r2 = r1 >>> 0x4			  ## noise_shape_analysis_FIX.c:1128:18
   12d92:    4b 34             	r3 = 0x34			  ## noise_shape_analysis_FIX.c:1128:18
   12d94:    f8 f1 20 33       	r3_r2 = r2 * r3 (s)  #			  ## noise_shape_analysis_FIX.c:1128:18
   12d98:    80 31             		 [sp+68] = r0			  ## noise_shape_analysis_FIX.c:1125:11
   12d9a:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## noise_shape_analysis_FIX.c:1128:18
   12d9e:    b2 ee 01 00       	ifs (r2 <= 0x1) {
   12da2:    42 21             		r2 = 0x1
                               	}
   12da4:    12 18             	r2 += r1			  ## noise_shape_analysis_FIX.c:1128:18
   12da6:    d8 ec ad 24       	[r10++=0x4c] = r2			  ## noise_shape_analysis_FIX.c:1128:16
   12daa:    d4 e9 69 a0       	[sp+104] = r10			  ## noise_shape_analysis_FIX.c:1128:16
   12dae:    d0 ec 74 c3       	r12 = [r7+0x34]			  ## noise_shape_analysis_FIX.c:1132:67
   12db2:    44 a1             	r4 = r4 << 0x1			  ## noise_shape_analysis_FIX.c:1122:9
   12db4:    82 fd 5c 02       	ifs (r2 < 0x1) goto 0xb8 <silk_noise_shape_analysis_FIX+0x328 : 12e70 >			  ## noise_shape_analysis_FIX.c:940:6
   12db8:    84 37             	[sp+92] = r4
   12dba:    42 20             	r2 = 0x0
   12dbc:    03 33             	r3 = [sp+76]
   12dbe:    04 87             	goto 0xe <silk_noise_shape_analysis_FIX+0x286 : 12dce >
   12dc0:    00 34             	r0 = [sp+80]			  ## noise_shape_analysis_FIX.c:946:31
   12dc2:    d8 ec 0a 42       	r4 = [r0+r2<<2]			  ## noise_shape_analysis_FIX.c:946:31
   12dc6:    b4 61             	[r3+0x4] = r4			  ## noise_shape_analysis_FIX.c:946:29
   12dc8:    d8 ec 39 40       	[r3++=0x8] = r4			  ## noise_shape_analysis_FIX.c:946:15
   12dcc:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:945:30
   12dce:    8c ee f7 21       	ifs (r2 <= r12) goto -0x12 <silk_noise_shape_analysis_FIX+0x278 : 12dc0 >			  ## noise_shape_analysis_FIX.c:945:2
   12dd2:    44 20             	r4 = 0x0
   12dd4:    14 90             	goto 0x60 <silk_noise_shape_analysis_FIX+0x2EE : 12e36 >
   12dd6:    c6 16             	r6 = r12
   12dd8:    ac e0 00 50       	r12 = 0x0 - r5			  ## noise_shape_analysis_FIX.c:962:33
   12ddc:    c0 e1 cf dd       	r13 = r12 >>> 0x1f			  ## Inlines.h:119:20
   12de0:    d0 e1 0f c1       	r13_r12 <<= 0x1f			  ## Inlines.h:119:35
   12de4:    f6 f1 c0 d2       	r13_r12 = r13_r12 / r2 (s)  #			  ## Inlines.h:122:20
   12de8:    00 39             		 r0 = [sp+100]			  ## noise_shape_analysis_FIX.c:965:15
   12dea:    e2 e0 80 cc       	r2 = r12 + 0x4000			  ## noise_shape_analysis_FIX.c:965:17
   12dee:    aa af             	r2 = r2 >>> 0xf			  ## noise_shape_analysis_FIX.c:965:17
   12df0:    d8 ec 0b 24       	[r0+r4<<2] = r2			  ## noise_shape_analysis_FIX.c:965:15
   12df4:    d0 f1 00 c2       	r13_r12 <<= 0x20  #			  ## noise_shape_analysis_FIX.c:965:15
   12df8:    02 3a             		 r2 = [sp+104]
   12dfa:    d0 e1 00 ce       	r13_r12 >>>= 0x20
   12dfe:    6a 16             	r10 = r6
   12e00:    64 1f             	r4 = r6 - r4
   12e02:    45 20             	r5 = 0x0
   12e04:    17 16             	r7 = r1
   12e06:    04 90             	goto 0x20 <silk_noise_shape_analysis_FIX+0x2E0 : 12e28 >
   12e08:    76 60             	r6 = [r7+0x0] 			  ## noise_shape_analysis_FIX.c:970:16
   12e0a:    61 a1             	r1 = r6 << 0x1			  ## noise_shape_analysis_FIX.c:973:38
   12e0c:    f8 f1 10 fc       	r15_r14 = r1 * r12 (s)  #			  ## noise_shape_analysis_FIX.c:973:38
   12e10:    20 60             		 r0 = [r2+0x0] 			  ## noise_shape_analysis_FIX.c:969:16
   12e12:    b4 e0 f0 10       	r1 = r15 + r0			  ## noise_shape_analysis_FIX.c:973:36
   12e16:    d8 ec 29 10       	[r2++=0x8] = r1			  ## noise_shape_analysis_FIX.c:973:24
   12e1a:    00 a1             	r0 = r0 << 0x1			  ## noise_shape_analysis_FIX.c:974:38
   12e1c:    f8 e1 00 1c       	r1_r0 = r0 * r12 (s)			  ## noise_shape_analysis_FIX.c:974:38
   12e20:    90 1d             	r0 = r1 + r6			  ## noise_shape_analysis_FIX.c:974:36
   12e22:    d8 ec 79 00       	[r7++=0x8] = r0			  ## noise_shape_analysis_FIX.c:974:24
   12e26:    c5 21             	r5 += 0x1			  ## noise_shape_analysis_FIX.c:968:31
   12e28:    84 ed ee 51       	ifs (r5 < r4) goto -0x24 <silk_noise_shape_analysis_FIX+0x2C0 : 12e08 >
   12e2c:    34 d6             	r4 = r3  #
   12e2e:    00 3a             		 r0 = [sp+104]			  ## noise_shape_analysis_FIX.c:927:13
   12e30:    c0 28             	r0 += 0x8			  ## noise_shape_analysis_FIX.c:927:13
   12e32:    ac d6             	r12 = r10  #			  ## noise_shape_analysis_FIX.c:927:13
   12e34:    80 3a             		 [sp+104] = r0			  ## noise_shape_analysis_FIX.c:927:13
   12e36:    84 ee 26 c0       	ifs (r12 <= r4) goto 0x4c <silk_noise_shape_analysis_FIX+0x33E : 12e86 >
   12e3a:    4b 81             	r3 = r4 + 0x1			  ## noise_shape_analysis_FIX.c:951:7
   12e3c:    32 a3             	r2 = r3 << 0x3			  ## noise_shape_analysis_FIX.c:951:7
   12e3e:    00 33             	r0 = [sp+76]			  ## noise_shape_analysis_FIX.c:951:7
   12e40:    d8 ec 02 52       	r5 = [r0+r2]			  ## noise_shape_analysis_FIX.c:951:7
   12e44:    01 32             	r1 = [sp+72]			  ## noise_shape_analysis_FIX.c:951:7
   12e46:    de bf             	r6 = r5 >>> 0x1f			  ## noise_shape_analysis_FIX.c:951:7
   12e48:    90 f1 61 75       	r7 = r6 ^ r5  #			  ## noise_shape_analysis_FIX.c:951:7
   12e4c:    12 60             		 r2 = [r1+0x0] 			  ## noise_shape_analysis_FIX.c:951:42
   12e4e:    f6 1f             	r6 = r7 - r6			  ## noise_shape_analysis_FIX.c:951:7
   12e50:    82 ed c1 61       	ifs (r6 < r2) goto -0x7e <silk_noise_shape_analysis_FIX+0x28E : 12dd6 >			  ## noise_shape_analysis_FIX.c:951:7
   12e54:    c0 ff 8f 02 ff ff 	r0 = 0xffff028f <RAM_LIMIT_H+0xFFE5028E : ffff028e >			  ## noise_shape_analysis_FIX.c:952:9
   12e5a:    d4 e9 60 a0       	r10 = [sp+96]			  ## noise_shape_analysis_FIX.c:952:9
   12e5e:    b5 ee 00 00       	ifs (r5 <= 0x0) {			  ## noise_shape_analysis_FIX.c:952:9
   12e62:    c0 ff 71 fd 00 00 		r0 = 0xfd71
                               	} <.GJTIE291_0_0_+0x4A6 : fd70 >			  ## noise_shape_analysis_FIX.c:952:9
   12e68:    01 39             	r1 = [sp+100]			  ## noise_shape_analysis_FIX.c:952:9
   12e6a:    d8 ec 1b 04       	[r1+r4<<2] = r0			  ## noise_shape_analysis_FIX.c:952:9
   12e6e:    04 8f             	goto 0x1e <silk_noise_shape_analysis_FIX+0x346 : 12e8e >			  ## noise_shape_analysis_FIX.c:952:9
   12e70:    00 39             	r0 = [sp+100]			  ## opus_demo.c:208:2
   12e72:    42 20             	r2 = 0x0			  ## opus_demo.c:208:2
   12e74:    0c 03             	rep 0x2 r12 {			  ## opus_demo.c:208:2
   12e76:    82 05             		[r0++=0x4] = r2
                               	}			  ## opus_demo.c:208:2
   12e78:    8c f8 fc 01       	if (r12 != 0x0) goto -0x8 <silk_noise_shape_analysis_FIX+0x32C : 12e74 >			  ## opus_demo.c:208:2
   12e7c:    40 20             	r0 = 0x0
   12e7e:    80 2c             	[sp+48] = r0
   12e80:    d4 e9 60 a0       	r10 = [sp+96]
   12e84:    04 91             	goto 0x22 <silk_noise_shape_analysis_FIX+0x360 : 12ea8 >
   12e86:    43 d6             	r3 = r4  #
   12e88:    01 39             		 r1 = [sp+100]
   12e8a:    d4 e9 60 a0       	r10 = [sp+96]
   12e8e:    00 32             	r0 = [sp+72]
   12e90:    04 37             	r4 = [sp+92]
   12e92:    04 83             	goto 0x6 <silk_noise_shape_analysis_FIX+0x352 : 12e9a >
   12e94:    d8 ec 1b 93       	[r1+r3<<2] = r9			  ## noise_shape_analysis_FIX.c:979:15
   12e98:    c3 21             	r3 += 0x1			  ## noise_shape_analysis_FIX.c:978:20
   12e9a:    8c ed fb 31       	ifs (r3 < r12) goto -0xa <silk_noise_shape_analysis_FIX+0x34C : 12e94 >
   12e9e:    00 60             	r0 = [r0+0x0] 			  ## noise_shape_analysis_FIX.c:982:25
   12ea0:    b0 ee 01 00       	ifs (r0 <= 0x1) {
   12ea4:    40 21             		r0 = 0x1
                               	}			  ## SigProc_FIX.h:368:13
   12ea6:    80 2c             	[sp+48] = r0
   12ea8:    d0 ec a4 03       	r0 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1136:53
   12eac:    80 37             	[sp+92] = r0			  ## noise_shape_analysis_FIX.c:1122:9
   12eae:    00 30             	r0 = [sp+64]			  ## noise_shape_analysis_FIX.c:1122:9
   12eb0:    40 18             	r0 += r4			  ## noise_shape_analysis_FIX.c:1122:9
   12eb2:    80 30             	[sp+64] = r0
   12eb4:    43 20             	r3 = 0x0
   12eb6:    02 26             	r2 = [sp+24]
   12eb8:    14 91             	goto 0x62 <silk_noise_shape_analysis_FIX+0x3D4 : 12f1c >
   12eba:    c2 d4             	r10 = 0  #
   12ebc:    00 39             		 r0 = [sp+100]			  ## noise_shape_analysis_FIX.c:225:8
   12ebe:    d8 ec 0a c3       	r12 = [r0+r3<<2]			  ## noise_shape_analysis_FIX.c:225:8
   12ec2:    c0 e1 cf dd       	r13 = r12 >>> 0x1f
   12ec6:    38 81             	r0 = r3 + 0x1
   12ec8:    89 a1             	r1 = r0 >>> 0x1
   12eca:    20 d6             	r0 = r2  #
   12ecc:    80 3a             		 [sp+104] = r0
   12ece:    04 9a             	goto 0x34 <silk_noise_shape_analysis_FIX+0x3BC : 12f04 >
   12ed0:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## noise_shape_analysis_FIX.c:229:15
   12ed4:    d8 ec ba 8a       	r8 = [r11+r10<<2]			  ## noise_shape_analysis_FIX.c:229:15
   12ed8:    f8 e1 e0 5c       	r5_r4 = r14 * r12 (s)			  ## noise_shape_analysis_FIX.c:229:15
   12edc:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## noise_shape_analysis_FIX.c:229:15
   12ee0:    b4 e0 40 68       	r6 = r4 + r8			  ## noise_shape_analysis_FIX.c:229:15
   12ee4:    b8 e0 50 79       	r7 = r5 + r9 + c			  ## noise_shape_analysis_FIX.c:229:15
   12ee8:    d8 ec bb 6a       	[r11+r10<<2] = r6			  ## noise_shape_analysis_FIX.c:229:13
   12eec:    f8 e1 80 5c       	r5_r4 = r8 * r12 (s)			  ## noise_shape_analysis_FIX.c:230:23
   12ef0:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## noise_shape_analysis_FIX.c:230:23
   12ef4:    9f 16             	r15 = r9			  ## noise_shape_analysis_FIX.c:229:15
   12ef6:    b4 e0 40 6e       	r6 = r4 + r14			  ## noise_shape_analysis_FIX.c:230:23
   12efa:    b8 e0 50 79       	r7 = r5 + r9 + c			  ## noise_shape_analysis_FIX.c:230:23
   12efe:    0a f1 01 a0       	r10 = r10 + 0x1  #			  ## noise_shape_analysis_FIX.c:226:34
   12f02:    8e 05             		 [r0++=-0x4] = r6			  ## noise_shape_analysis_FIX.c:230:21
   12f04:    81 ed e4 a1       	ifs (r10 < r1) goto -0x38 <silk_noise_shape_analysis_FIX+0x388 : 12ed0 >
   12f08:    c0 e1 c8 00       	r0 = r12 << 0x8			  ## noise_shape_analysis_FIX.c:232:15
   12f0c:    a0 e0 00 00       	r0 = 0x0 - r0			  ## noise_shape_analysis_FIX.c:232:14
   12f10:    d8 ec bb 03       	[r11+r3<<2] = r0			  ## noise_shape_analysis_FIX.c:232:12
   12f14:    c2 24             	r2 += 0x4			  ## noise_shape_analysis_FIX.c:224:2
   12f16:    03 3a             	r3 = [sp+104]			  ## noise_shape_analysis_FIX.c:224:2
   12f18:    d4 e9 60 a0       	r10 = [sp+96]			  ## noise_shape_analysis_FIX.c:224:2
   12f1c:    00 37             	r0 = [sp+92]			  ## noise_shape_analysis_FIX.c:224:2
   12f1e:    80 ed cc 31       	ifs (r3 < r0) goto -0x68 <silk_noise_shape_analysis_FIX+0x372 : 12eba >			  ## noise_shape_analysis_FIX.c:224:2
   12f22:    41 20             	r1 = 0x0
   12f24:    10 3f             	r0 = -0x1			  ## noise_shape_analysis_FIX.c:1143:7
   12f26:    03 31             	r3 = [sp+68]			  ## noise_shape_analysis_FIX.c:1143:7
   12f28:    23 ea 01 00       	if ((r3 & 0x1) == 0) {			  ## noise_shape_analysis_FIX.c:1143:7
   12f2c:    40 20             		r0 = 0x0
                               	}			  ## noise_shape_analysis_FIX.c:1143:7
   12f2e:    62 f1 01 30       	r2 = r3 & 0x1  #			  ## noise_shape_analysis_FIX.c:1143:12
   12f32:    04 2c             		 r4 = [sp+48]			  ## noise_shape_analysis_FIX.c:1143:7
   12f34:    c8 e1 42 22       	r2 = r4 >> r2			  ## noise_shape_analysis_FIX.c:1143:7
   12f38:    88 1e             	r0 = r0 - r3
   12f3a:    82 fd 16 02       	ifs (r2 < 0x1) goto 0x2c <silk_noise_shape_analysis_FIX+0x422 : 12f6a >
   12f3e:    80 e1 00 12       	r1 = clz(r2)			  ## entenc.c:124:2
   12f42:    c3 ff 86 b4 00 00 	r3 = 0xb486 <print+0x36 : b486 >
   12f48:    31 ea 01 00       	if ((r1 & 0x1) != 0) {
   12f4c:    60 e0 00 3c       		r3 = 0x8000
                               	}
   12f50:    9c a1             	r4 = r1 >>> 0x1			  ## Inlines.h:101:11
   12f52:    c3 1a             	r3 >>= r4			  ## Inlines.h:101:7
   12f54:    c8 e1 20 11       	r1 = r2 << r1			  ## Inlines.h:74:11
   12f58:    b1 e1 1c 1c       	r1 = uextra(r1, p:0x18, l:0x7)			  ## Inlines.h:75:22
   12f5c:    e1 e1 d5 10       	r1 = r1 * 0xD5			  ## Inlines.h:104:9
   12f60:    f8 e1 30 51       	r5_r4 = r3 * r1 (s)			  ## Inlines.h:104:9
   12f64:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## Inlines.h:104:9
   12f68:    c9 1c             	r1 = r4 + r3			  ## Inlines.h:104:9
   12f6a:    88 a1             	r0 = r0 >>> 0x1			  ## noise_shape_analysis_FIX.c:1149:8
   12f6c:    a0 e0 10 00       	r0 = 0x10 - r0			  ## noise_shape_analysis_FIX.c:1151:31
   12f70:    c2 ff ff ff ff 7f 	r2 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## noise_shape_analysis_FIX.c:1151:31
   12f76:    c8 e1 22 30       	r3 = r2 >> r0			  ## noise_shape_analysis_FIX.c:1151:31
   12f7a:    60 e0 00 24       	r2 = 0x80000000			  ## noise_shape_analysis_FIX.c:1151:31
   12f7e:    c8 e1 23 40       	r4 = r2 >>> r0			  ## noise_shape_analysis_FIX.c:1151:31
   12f82:    83 ee 06 40       	ifs (r4 <= r3) goto 0xc <silk_noise_shape_analysis_FIX+0x44A : 12f92 >			  ## noise_shape_analysis_FIX.c:1151:31
   12f86:    42 16             	r2 = r4			  ## noise_shape_analysis_FIX.c:1151:31
   12f88:    91 ee 00 04       	ifs (r1 <= r4) {			  ## noise_shape_analysis_FIX.c:1151:31
   12f8c:    34 e4 11 23       		r2 = smax(r1, r3)
                               	}			  ## noise_shape_analysis_FIX.c:1151:31
   12f90:    04 85             	goto 0xa <silk_noise_shape_analysis_FIX+0x454 : 12f9c >			  ## noise_shape_analysis_FIX.c:1151:31
   12f92:    32 16             	r2 = r3			  ## noise_shape_analysis_FIX.c:1151:31
   12f94:    91 ee 00 03       	ifs (r1 <= r3) {			  ## noise_shape_analysis_FIX.c:1151:31
   12f98:    34 e4 11 24       		r2 = smax(r1, r4)
                               	}			  ## noise_shape_analysis_FIX.c:1151:31
   12f9c:    c8 f1 20 00       	r0 = r2 << r0  #			  ## noise_shape_analysis_FIX.c:1151:31
   12fa0:    01 2d             		 r1 = [sp+52]			  ## noise_shape_analysis_FIX.c:1151:3
   12fa2:    c0 f1 12 c0       	r12 = r1 << 0x2  #			  ## noise_shape_analysis_FIX.c:1151:3
   12fa6:    01 36             		 r1 = [sp+88]			  ## noise_shape_analysis_FIX.c:1151:29
   12fa8:    dc ec c3 01       	[++r12=r1] = r0			  ## noise_shape_analysis_FIX.c:1151:29
   12fac:    d0 ec a4 13       	r1 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1154:44
   12fb0:    b0 d6             	r0 = r11  #			  ## noise_shape_analysis_FIX.c:1154:3
   12fb2:    02 28             		 r2 = [sp+32]			  ## noise_shape_analysis_FIX.c:1154:3
   12fb4:    bf ea be fc       	call -0x684 <silk_bwexpander_32 : 12934 >			  ## noise_shape_analysis_FIX.c:1154:3
   12fb8:    d0 ec a4 03       	r0 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1157:47
   12fbc:    b2 d6             	r2 = r11  #			  ## opus_demo.c:186:2
   12fbe:    04 35             		 r4 = [sp+84]			  ## opus_demo.c:186:2
   12fc0:    41 16             	r1 = r4			  ## opus_demo.c:186:2
   12fc2:    10 03             	rep 0x4 r0 {			  ## opus_demo.c:186:2
   12fc4:    23 05             		r3 = [r2++=0x4] 			  ## opus_demo.c:186:2
   12fc6:    93 05             		[r1++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   12fc8:    f0 5c             	if (r0 != 0) goto -0x8 <silk_noise_shape_analysis_FIX+0x47A : 12fc2 >			  ## opus_demo.c:186:2
   12fca:    d0 ec a4 13       	r1 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1161:44
   12fce:    40 d6             	r0 = r4  #			  ## noise_shape_analysis_FIX.c:1161:3
   12fd0:    02 27             		 r2 = [sp+28]			  ## noise_shape_analysis_FIX.c:1161:3
   12fd2:    bf ea af fc       	call -0x6a2 <silk_bwexpander_32 : 12934 >			  ## noise_shape_analysis_FIX.c:1161:3
   12fd6:    d0 ec a4 23       	r2 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1164:76
   12fda:    b1 d6             	r1 = r11  #			  ## noise_shape_analysis_FIX.c:1164:17
   12fdc:    05 2a             		 r5 = [sp+40]			  ## noise_shape_analysis_FIX.c:1164:17
   12fde:    50 16             	r0 = r5			  ## noise_shape_analysis_FIX.c:1164:17
   12fe0:    bf ea 9b fd       	call -0x4ca <silk_LPC_inverse_pred_gain_Q24 : 12b1a >			  ## noise_shape_analysis_FIX.c:1164:17
   12fe4:    41 e0 9a 59       	r1 = 0x599a <wtgv2_silk_decode_core+0x364 : 599a >			  ## noise_shape_analysis_FIX.c:1168:17
   12fe8:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## noise_shape_analysis_FIX.c:1168:17
   12fec:    d0 e1 0f 08       	r1_r0 >>= 0xf			  ## noise_shape_analysis_FIX.c:1168:17
   12ff0:    d0 ec a4 23       	r2 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1165:76
   12ff4:    76 e1 01 00       	r6 = r0 & 0xFFFFFFFE			  ## noise_shape_analysis_FIX.c:1168:17
   12ff8:    ef bf             	r7 = r6 >>> 0x1f			  ## Inlines.h:119:20
   12ffa:    d0 e1 0e 60       	r7_r6 <<= 0xe			  ## Inlines.h:119:35
   12ffe:    50 16             	r0 = r5			  ## noise_shape_analysis_FIX.c:1165:17
   13000:    41 16             	r1 = r4			  ## noise_shape_analysis_FIX.c:1165:17
   13002:    bf ea 8a fd       	call -0x4ec <silk_LPC_inverse_pred_gain_Q24 : 12b1a >			  ## noise_shape_analysis_FIX.c:1165:17
   13006:    80 3a             	[sp+104] = r0
   13008:    f6 e1 60 10       	r1_r0 = r7_r6 / r0 (s)			  ## Inlines.h:122:20
   1300c:    10 e1 33 03       	r0 = r0 + 0x1333			  ## noise_shape_analysis_FIX.c:1169:73
   13010:    d1 ec cd 09       	[r12+0x19c] = r0			  ## noise_shape_analysis_FIX.c:1169:32
   13014:    d0 ec a4 e3       	r14 = [r10+0x34]			  ## noise_shape_analysis_FIX.c:1172:82
   13018:    c4 14             	r12 = 0
   1301a:    c2 14             	r10 = 0
   1301c:    14 86             	goto 0x4c <silk_noise_shape_analysis_FIX+0x522 : 1306a >
   1301e:    c0 ff 89 41 00 fc 	r0 = 0xfc004189 <RAM_LIMIT_H+0xFBE64188 : fc004188 >			  ## noise_shape_analysis_FIX.c:909:4
   13024:    d0 18             	r0 += r13			  ## noise_shape_analysis_FIX.c:909:4
   13026:    e1 e1 66 a0       	r1 = r10 * 0x66			  ## noise_shape_analysis_FIX.c:909:4
   1302a:    01 e1 33 13       	r1 = r1 + 0x333			  ## noise_shape_analysis_FIX.c:909:4
   1302e:    f8 e1 10 30       	r3_r2 = r1 * r0 (s)			  ## Inlines.h:119:20
   13032:    d0 e1 00 21       	r3_r2 <<= 0x10			  ## Inlines.h:119:20
   13036:    d0 e1 00 2e       	r3_r2 >>>= 0x20			  ## Inlines.h:119:20
   1303a:    d0 e1 06 21       	r3_r2 <<= 0x16			  ## Inlines.h:119:35
   1303e:    00 e1 01 c0       	r0 = r12 + 0x1			  ## noise_shape_analysis_FIX.c:910:4
   13042:    d0 1b             	r0 *= r13			  ## noise_shape_analysis_FIX.c:910:4
   13044:    f6 e1 20 10       	r1_r0 = r3_r2 / r0 (s)			  ## Inlines.h:122:20
   13048:    c2 ff 71 fd 00 00 	r2 = 0xfd71 <.GJTIE291_0_0_+0x4A6 : fd70 >			  ## noise_shape_analysis_FIX.c:908:42
   1304e:    b4 e0 22 d0       	r13 = r2 - r0			  ## noise_shape_analysis_FIX.c:908:42
   13052:    b0 16             	r0 = r11			  ## noise_shape_analysis_FIX.c:911:3
   13054:    e1 16             	r1 = r14			  ## noise_shape_analysis_FIX.c:911:3
   13056:    d2 16             	r2 = r13			  ## noise_shape_analysis_FIX.c:911:3
   13058:    bf ea 6c fc       	call -0x728 <silk_bwexpander_32 : 12934 >			  ## noise_shape_analysis_FIX.c:911:3
   1305c:    e1 d6             	r1 = r14  #			  ## noise_shape_analysis_FIX.c:912:3
   1305e:    00 35             		 r0 = [sp+84]			  ## noise_shape_analysis_FIX.c:912:3
   13060:    d2 16             	r2 = r13			  ## noise_shape_analysis_FIX.c:912:3
   13062:    bf ea 67 fc       	call -0x732 <silk_bwexpander_32 : 12934 >			  ## noise_shape_analysis_FIX.c:912:3
   13066:    0a e1 01 a0       	r10 = r10 + 0x1			  ## noise_shape_analysis_FIX.c:892:32
   1306a:    0a fe 28 12       	ifs (r10 > 0x9) goto 0x50 <silk_noise_shape_analysis_FIX+0x576 : 130be >
   1306e:    4d f0 ff ff       	r13 = -0x1  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >
   13072:    02 35             		 r2 = [sp+84]
   13074:    4f e0 17 0d       	r15 = 0xd17 <usb_code_size+0x252 : d16 >
   13078:    04 99             	goto 0x32 <silk_noise_shape_analysis_FIX+0x564 : 130ac >
   1307a:    25 60             	r5 = [r2+0x0] 			  ## noise_shape_analysis_FIX.c:896:10
   1307c:    d0 ec 20 74       	r7 = [r2+0x40]			  ## noise_shape_analysis_FIX.c:896:10
   13080:    de bf             	r6 = r5 >>> 0x1f			  ## noise_shape_analysis_FIX.c:896:10
   13082:    90 e1 61 45       	r4 = r6 ^ r5			  ## noise_shape_analysis_FIX.c:896:10
   13086:    c0 1f             	r0 = r4 - r6			  ## noise_shape_analysis_FIX.c:896:10
   13088:    f9 bf             	r1 = r7 >>> 0x1f			  ## noise_shape_analysis_FIX.c:896:10
   1308a:    90 e1 11 67       	r6 = r1 ^ r7			  ## noise_shape_analysis_FIX.c:896:10
   1308e:    69 1e             	r1 = r6 - r1			  ## noise_shape_analysis_FIX.c:896:10
   13090:    91 ee 00 00       	ifs (r1 <= r0) {			  ## noise_shape_analysis_FIX.c:896:10
   13094:    46 15             		r7_r6 = r5_r4
                               	}			  ## noise_shape_analysis_FIX.c:896:10
   13096:    f8 bf             	r0 = r7 >>> 0x1f			  ## noise_shape_analysis_FIX.c:896:10
   13098:    65 1e             	r5 = r6 - r0			  ## noise_shape_analysis_FIX.c:896:10
   1309a:    95 ee 00 4d       	ifs (r5 <= r13) {
   1309e:    c3 16             		r3 = r12			  ## noise_shape_analysis_FIX.c:897:8
   130a0:    d5 16             		r5 = r13
                               	}			  ## noise_shape_analysis_FIX.c:897:8
   130a2:    c2 24             	r2 += 0x4			  ## noise_shape_analysis_FIX.c:895:3
   130a4:    0f e1 01 f0       	r15 = r15 + 0x1			  ## noise_shape_analysis_FIX.c:895:3
   130a8:    3c 16             	r12 = r3			  ## noise_shape_analysis_FIX.c:895:3
   130aa:    5d 16             	r13 = r5			  ## noise_shape_analysis_FIX.c:895:3
   130ac:    33 e1 e9 f2       	r3 = r15 + -0xd17			  ## noise_shape_analysis_FIX.c:895:17
   130b0:    8e ed e3 31       	ifs (r3 < r14) goto -0x3a <silk_noise_shape_analysis_FIX+0x532 : 1307a >			  ## noise_shape_analysis_FIX.c:895:17
   130b4:    c0 ff 77 be ff 03 	r0 = 0x3ffbe77 <RAM_LIMIT_H+0x3E5BE76 : 3ffbe76 >			  ## noise_shape_analysis_FIX.c:902:7
   130ba:    00 ee b0 d1       	ifs (r13 > r0) goto -0xa0 <silk_noise_shape_analysis_FIX+0x4D6 : 1301e >			  ## noise_shape_analysis_FIX.c:902:7
   130be:    40 20             	r0 = 0x0
   130c0:    b2 d6             	r2 = r11  #
   130c2:    01 2f             		 r1 = [sp+60]
   130c4:    03 2e             	r3 = [sp+56]
   130c6:    07 38             	r7 = [sp+96]
   130c8:    d4 e9 14 a0       	r10 = [sp+20]
   130cc:    04 96             	goto 0x2c <silk_noise_shape_analysis_FIX+0x5B2 : 130fa >
   130ce:    24 70             	r4 = [r2+-0x40] 			  ## noise_shape_analysis_FIX.c:1177:9
   130d0:    04 e1 00 44       	r4 = r4 + 0x400			  ## noise_shape_analysis_FIX.c:1177:9
   130d4:    cc ab             	r4 = r4 >>> 0xb			  ## noise_shape_analysis_FIX.c:1177:9
   130d6:    78 e0 01 54       	r5 = sat16(r4) (s)			  ## noise_shape_analysis_FIX.c:1178:4
   130da:    74 6d             	r4 = [r7+0x34] 			  ## noise_shape_analysis_FIX.c:1179:61
   130dc:    14 d8             	r4 += r1  #			  ## noise_shape_analysis_FIX.c:1179:4
   130de:    06 36             		 r6 = [sp+88]			  ## noise_shape_analysis_FIX.c:1179:4
   130e0:    06 e1 8c 60       	r6 = r6 + 0x8c			  ## noise_shape_analysis_FIX.c:1179:4
   130e4:    d8 ed 69 54       	h[r6+r4<<1] = r5			  ## noise_shape_analysis_FIX.c:1179:86
   130e8:    24 05             	r4 = [r2++=0x4] 			  ## noise_shape_analysis_FIX.c:1181:9
   130ea:    04 e1 00 44       	r4 = r4 + 0x400			  ## noise_shape_analysis_FIX.c:1181:9
   130ee:    cc ab             	r4 = r4 >>> 0xb			  ## noise_shape_analysis_FIX.c:1181:9
   130f0:    78 e0 01 54       	r5 = sat16(r4) (s)			  ## noise_shape_analysis_FIX.c:1182:4
   130f4:    b5 06             	h[r3++=0x2] = r5			  ## noise_shape_analysis_FIX.c:1183:52
   130f6:    f9 3f             	r1 += -0x1			  ## noise_shape_analysis_FIX.c:1175:3
   130f8:    c0 21             	r0 += 0x1			  ## noise_shape_analysis_FIX.c:1175:49
   130fa:    74 6d             	r4 = [r7+0x34] 			  ## noise_shape_analysis_FIX.c:1175:31
   130fc:    84 ed e7 01       	ifs (r0 < r4) goto -0x32 <silk_noise_shape_analysis_FIX+0x586 : 130ce >			  ## noise_shape_analysis_FIX.c:1175:31
   13100:    00 2f             	r0 = [sp+60]			  ## noise_shape_analysis_FIX.c:1107:2
   13102:    c0 30             	r0 += 0x10			  ## noise_shape_analysis_FIX.c:1107:2
   13104:    80 2f             	[sp+60] = r0			  ## noise_shape_analysis_FIX.c:1107:2
   13106:    00 2e             	r0 = [sp+56]			  ## noise_shape_analysis_FIX.c:1107:2
   13108:    c8 20             	r0 += 0x20			  ## noise_shape_analysis_FIX.c:1107:2
   1310a:    80 2e             	[sp+56] = r0			  ## noise_shape_analysis_FIX.c:1107:41
   1310c:    02 2d             	r2 = [sp+52]			  ## noise_shape_analysis_FIX.c:1107:41
   1310e:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:1107:41
   13110:    00 2b             	r0 = [sp+44]			  ## noise_shape_analysis_FIX.c:1107:30
   13112:    04 60             	r4 = [r0+0x0] 			  ## noise_shape_analysis_FIX.c:1107:30
   13114:    00 31             	r0 = [sp+68]			  ## noise_shape_analysis_FIX.c:1107:30
   13116:    4b ff 00 24 28 fe 	ifs (r2 < r4) goto -0x3b0 <silk_noise_shape_analysis_FIX+0x224 : 12d6c >			  ## noise_shape_analysis_FIX.c:1107:30
   1311c:    80 3c             	[sp+112] = r0			  ## noise_shape_analysis_FIX.c:1138:11
   1311e:    00 3a             	r0 = [sp+104]			  ## noise_shape_analysis_FIX.c:1165:15
   13120:    40 f0 f6 28       	r0 = 0x28f6  # <WOLASynthesisFilter_Float_M256_m4_r1+0xF2 : 28f6 >			  ## noise_shape_analysis_FIX.c:1197:33
   13124:    80 3b             		 [sp+108] = r0			  ## noise_shape_analysis_FIX.c:1165:15
   13126:    01 20             	r1 = [sp]			  ## noise_shape_analysis_FIX.c:1197:33
   13128:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## noise_shape_analysis_FIX.c:1197:33
   1312c:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## noise_shape_analysis_FIX.c:1197:33
   13130:    a0 e0 00 0e       	r0 = 0x800 - r0			  ## noise_shape_analysis_FIX.c:1197:32
   13134:    bf ea d1 f1       	call -0x1c5e <silk_log2lin : 114da >			  ## noise_shape_analysis_FIX.c:1197:18
   13138:    89 bf             	r1 = r0 >>> 0x1f
   1313a:    42 20             	r2 = 0x0
   1313c:    d4 e9 0c 90       	r9 = [sp+12]
   13140:    d4 e9 58 e0       	r14 = [sp+88]
   13144:    d4 e9 28 80       	r8 = [sp+40]
   13148:    d4 e9 08 a0       	r10 = [sp+8]
   1314c:    06 2b             	r6 = [sp+44]
   1314e:    04 92             	goto 0x24 <silk_noise_shape_analysis_FIX+0x62C : 13174 >
   13150:    d8 ec ea 32       	r3 = [r14+r2<<2]			  ## noise_shape_analysis_FIX.c:1201:31
   13154:    f8 e1 30 50       	r5_r4 = r3 * r0 (s)			  ## noise_shape_analysis_FIX.c:1201:31
   13158:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## noise_shape_analysis_FIX.c:1201:31
   1315c:    e4 e0 9e 4b       	r4 = r4 + 0x13C00			  ## noise_shape_analysis_FIX.c:1203:31
   13160:    c3 ff ff ff ff 7f 	r3 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## noise_shape_analysis_FIX.c:1203:31
   13166:    34 ed 00 00       	ifs (r4 >= 0x0) {			  ## noise_shape_analysis_FIX.c:1203:31
   1316a:    43 16             		r3 = r4
                               	}			  ## noise_shape_analysis_FIX.c:1203:31
   1316c:    d8 ec eb 32       	[r14+r2<<2] = r3			  ## noise_shape_analysis_FIX.c:1203:29
   13170:    64 60             	r4 = [r6+0x0] 			  ## noise_shape_analysis_FIX.c:1203:29
   13172:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:1200:41
   13174:    84 ed ec 21       	ifs (r2 < r4) goto -0x28 <silk_noise_shape_analysis_FIX+0x608 : 13150 >
   13178:    00 24             	r0 = [sp+16]			  ## noise_shape_analysis_FIX.c:1206:46
   1317a:    00 61             	r0 = [r0+0x4] 			  ## noise_shape_analysis_FIX.c:1206:46
   1317c:    e0 e1 cd 0f       	r0 = r0 * 0x19A			  ## noise_shape_analysis_FIX.c:1206:46
   13180:    c1 ff 33 35 33 00 	r1 = 0x333533 <RAM_LIMIT_H+0x193532 : 333532 >			  ## noise_shape_analysis_FIX.c:1206:46
   13186:    10 18             	r0 += r1			  ## noise_shape_analysis_FIX.c:1206:46
   13188:    88 aa             	r0 = r0 >>> 0xa			  ## noise_shape_analysis_FIX.c:1206:46
   1318a:    e0 e0 80 0b       	r0 = r0 + 0x10000			  ## noise_shape_analysis_FIX.c:1206:44
   1318e:    89 bf             	r1 = r0 >>> 0x1f
   13190:    02 e1 90 a0       	r2 = r10 + 0x90			  ## noise_shape_analysis_FIX.c:1208:7
   13194:    43 20             	r3 = 0x0			  ## noise_shape_analysis_FIX.c:1208:7
   13196:    04 8a             	goto 0x14 <silk_noise_shape_analysis_FIX+0x664 : 131ac >			  ## noise_shape_analysis_FIX.c:1208:7
   13198:    d8 ec 2a 43       	r4 = [r2+r3<<2]			  ## noise_shape_analysis_FIX.c:1209:34
   1319c:    f8 e1 40 50       	r5_r4 = r4 * r0 (s)			  ## noise_shape_analysis_FIX.c:1209:34
   131a0:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## noise_shape_analysis_FIX.c:1209:34
   131a4:    d8 ec 2b 43       	[r2+r3<<2] = r4			  ## noise_shape_analysis_FIX.c:1209:32
   131a8:    64 60             	r4 = [r6+0x0] 			  ## noise_shape_analysis_FIX.c:1209:32
   131aa:    c3 21             	r3 += 0x1			  ## noise_shape_analysis_FIX.c:1208:41
   131ac:    84 ed f4 31       	ifs (r3 < r4) goto -0x18 <silk_noise_shape_analysis_FIX+0x650 : 13198 >
   131b0:    d0 ec 94 00       	r0 = [r9+0x4]			  ## noise_shape_analysis_FIX.c:1214:17
   131b4:    00 a2             	r0 = r0 << 0x2			  ## noise_shape_analysis_FIX.c:1214:17
   131b6:    e0 f0 00 0b       	r0 = r0 + 0x20000  #			  ## noise_shape_analysis_FIX.c:1214:17
   131ba:    71 60             		 r1 = [r7+0x0] 			  ## noise_shape_analysis_FIX.c:1216:17
   131bc:    70 f1 3f 00       	r0 = r0 & 0xFFFFFFC0  #			  ## noise_shape_analysis_FIX.c:1214:17
   131c0:    02 21             		 r2 = [sp+4]			  ## noise_shape_analysis_FIX.c:1217:26
   131c2:    50 ee 22 90       	r9 = b[r2+0x2] (u)			  ## noise_shape_analysis_FIX.c:1217:26
   131c6:    10 1b             	r0 *= r1			  ## noise_shape_analysis_FIX.c:1216:17
   131c8:    88 a8             	r0 = r0 >>> 0x8			  ## noise_shape_analysis_FIX.c:1216:17
   131ca:    89 bf             	r1 = r0 >>> 0x1f
   131cc:    89 f8 40 04       	if (r9 != 0x2) goto 0x80 <silk_noise_shape_analysis_FIX+0x708 : 13250 >			  ## noise_shape_analysis_FIX.c:1217:6
   131d0:    42 20             	r2 = 0x0
   131d2:    60 e0 40 8c       	r8 = 0xC000
   131d6:    4a e0 34 3f       	r10 = 0x3f34 <STFT_Win_FixHalf_M256_D80+0x130 : 3f34 >
   131da:    0b e1 cc 80       	r11 = r8 + 0xcc
   131de:    04 99             	goto 0x32 <silk_noise_shape_analysis_FIX+0x6CA : 13212 >
   131e0:    24 a2             	r4 = r2 << 0x2			  ## noise_shape_analysis_FIX.c:1223:25
   131e2:    e4 18             	r4 += r14			  ## noise_shape_analysis_FIX.c:1223:25
   131e4:    d0 ec 48 77       	r7 = [r4+0x78]			  ## noise_shape_analysis_FIX.c:1223:25
   131e8:    f4 e1 81 77       	r7 = r8 / r7 (s)			  ## noise_shape_analysis_FIX.c:1223:25
   131ec:    b4 e0 a2 37       	r3 = r10 - r7			  ## noise_shape_analysis_FIX.c:1225:34
   131f0:    05 e1 cc 70       	r5 = r7 + 0xcc			  ## noise_shape_analysis_FIX.c:1223:23
   131f4:    f8 e1 50 d0       	r13_r12 = r5 * r0 (s)			  ## noise_shape_analysis_FIX.c:1225:34
   131f8:    c0 e1 c0 59       	r5 = r12 >> 0x10			  ## noise_shape_analysis_FIX.c:1225:34
   131fc:    3b 1f             	r3 = r3 - r5			  ## noise_shape_analysis_FIX.c:1225:34
   131fe:    b4 e0 70 5b       	r5 = r7 + r11			  ## noise_shape_analysis_FIX.c:1226:55
   13202:    d5 17             	r5 = r5.l (u)			  ## noise_shape_analysis_FIX.c:1226:34
   13204:    a5 e1 40 38       	r5 <= insert(r3, p:0x10, l:0x10)			  ## noise_shape_analysis_FIX.c:1226:31
   13208:    d1 ec 4d 58       	[r4+0x18c] = r5			  ## noise_shape_analysis_FIX.c:1226:31
   1320c:    03 2b             	r3 = [sp+44]			  ## noise_shape_analysis_FIX.c:1226:31
   1320e:    34 60             	r4 = [r3+0x0] 			  ## noise_shape_analysis_FIX.c:1226:31
   13210:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:1222:42
   13212:    84 ed e5 21       	ifs (r2 < r4) goto -0x36 <silk_noise_shape_analysis_FIX+0x698 : 131e0 >
   13216:    00 38             	r0 = [sp+96]			  ## noise_shape_analysis_FIX.c:1230:4
   13218:    02 60             	r2 = [r0+0x0] 			  ## noise_shape_analysis_FIX.c:1230:4
   1321a:    c4 ff 00 00 9a 99 	r4 = 0x999a0000 <RAM_LIMIT_H+0x99800000 : 999a0000 >			  ## noise_shape_analysis_FIX.c:1230:4
   13220:    f8 e1 20 04       	r1_r0 = r2 * r4 (u)			  ## noise_shape_analysis_FIX.c:1230:4
   13224:    e5 e1 59 20       	r5 = r2 * 0x59			  ## noise_shape_analysis_FIX.c:1230:4
   13228:    15 18             	r5 += r1			  ## noise_shape_analysis_FIX.c:1230:4
   1322a:    ab bf             	r3 = r2 >>> 0x1f			  ## noise_shape_analysis_FIX.c:1230:4
   1322c:    f0 f1 30 24       	r2 = r3 * r4  #			  ## noise_shape_analysis_FIX.c:1230:4
   13230:    04 24             		 r4 = [sp+16]			  ## noise_shape_analysis_FIX.c:1230:4
   13232:    d1 1c             	r1 = r5 + r2			  ## noise_shape_analysis_FIX.c:1230:4
   13234:    d0 e1 00 0e       	r1_r0 >>>= 0x20			  ## noise_shape_analysis_FIX.c:1230:4
   13238:    82 16             	r2 = r8			  ## noise_shape_analysis_FIX.c:1230:4
   1323a:    f8 e1 00 12       	r1_r0 = r0 * r2 (s)			  ## noise_shape_analysis_FIX.c:1230:4
   1323e:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## noise_shape_analysis_FIX.c:1230:4
   13242:    42 e0 00 c0       	r2 = -0x4000 <RAM_LIMIT_H+0xFFFFFFFFFFE5C000 : ffffffffffffc000 >			  ## noise_shape_analysis_FIX.c:1229:52
   13246:    b4 e0 22 c0       	r12 = r2 - r0			  ## noise_shape_analysis_FIX.c:1229:52
   1324a:    d4 e9 28 80       	r8 = [sp+40]
   1324e:    04 9e             	goto 0x3c <silk_noise_shape_analysis_FIX+0x744 : 1328c >
   13250:    42 e0 1e 03       	r2 = 0x31e <ROM_RAM_SIZE+0x11E : 31e >			  ## noise_shape_analysis_FIX.c:1251:33
   13254:    f8 e1 00 12       	r1_r0 = r0 * r2 (s)			  ## noise_shape_analysis_FIX.c:1251:33
   13258:    80 b0             	r0 = r0 >> 0x10			  ## noise_shape_analysis_FIX.c:1251:33
   1325a:    41 e0 cd 3a       	r1 = 0x3acd <STFT_Win_FixHalf_M512_D160+0x2C8 : 3acc >			  ## noise_shape_analysis_FIX.c:1251:33
   1325e:    10 1e             	r0 = r1 - r0			  ## noise_shape_analysis_FIX.c:1251:33
   13260:    c1 ff 33 c5 00 00 	r1 = 0xc533 <main+0x1CA : c532 >			  ## noise_shape_analysis_FIX.c:1252:30
   13266:    a1 e1 40 08       	r1 <= insert(r0, p:0x10, l:0x10)			  ## noise_shape_analysis_FIX.c:1252:30
   1326a:    d1 ec ed 18       	[r14+0x18c] = r1			  ## noise_shape_analysis_FIX.c:1252:30
   1326e:    58 24             	r0 = 0x64
   13270:    04 24             	r4 = [sp+16]
   13272:    04 85             	goto 0xa <silk_noise_shape_analysis_FIX+0x736 : 1327e >
   13274:    d0 ec a0 18       	r1 = [r10+0x80]			  ## noise_shape_analysis_FIX.c:1254:33
   13278:    d8 ec eb 10       	[r14+r0<<2] = r1			  ## noise_shape_analysis_FIX.c:1254:31
   1327c:    c0 21             	r0 += 0x1			  ## noise_shape_analysis_FIX.c:1253:3
   1327e:    32 f1 9d 0f       	r2 = r0 + -0x63  #			  ## noise_shape_analysis_FIX.c:1253:31
   13282:    61 60             		 r1 = [r6+0x0] 			  ## noise_shape_analysis_FIX.c:1253:31
   13284:    81 ed f6 21       	ifs (r2 < r1) goto -0x14 <silk_noise_shape_analysis_FIX+0x72C : 13274 >			  ## noise_shape_analysis_FIX.c:1253:31
   13288:    4c e0 00 c0       	r12 = -0x4000 <RAM_LIMIT_H+0xFFFFFFFFFFE5C000 : ffffffffffffc000 >
   1328c:    42 f0 22 08       	r2 = 0x822  # <WOLAAnalysisFilter_Float_M128_m4_r1+0x1E : 822 >			  ## noise_shape_analysis_FIX.c:1261:18
   13290:    41 61             		 r1 = [r4+0x4] 			  ## noise_shape_analysis_FIX.c:1261:18
   13292:    d8 ec 8a 82       	r8 = [r8+r2<<2]			  ## noise_shape_analysis_FIX.c:1261:18
   13296:    12 a3             	r2 = r1 << 0x3			  ## noise_shape_analysis_FIX.c:1261:18
   13298:    a2 f0 00 2b       	r2 = 0x20000 - r2  #			  ## noise_shape_analysis_FIX.c:1261:18
   1329c:    44 60             		 r4 = [r4+0x0] 			  ## noise_shape_analysis_FIX.c:1265:18
   1329e:    f8 e1 80 32       	r3_r2 = r8 * r2 (s)			  ## noise_shape_analysis_FIX.c:1261:18
   132a2:    d0 e1 00 21       	r3_r2 <<= 0x10			  ## noise_shape_analysis_FIX.c:1261:18
   132a6:    d0 e1 00 2e       	r3_r2 >>>= 0x20			  ## noise_shape_analysis_FIX.c:1261:18
   132aa:    45 e0 9a 19       	r5 = 0x199a <WOLAAnalysisFilter_Float_M256_m4_r1+0x196 : 199a >			  ## noise_shape_analysis_FIX.c:1261:18
   132ae:    f8 e1 20 35       	r3_r2 = r2 * r5 (s)			  ## noise_shape_analysis_FIX.c:1261:18
   132b2:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## noise_shape_analysis_FIX.c:1261:18
   132b6:    46 a2             	r6 = r4 << 0x2			  ## noise_shape_analysis_FIX.c:1265:18
   132b8:    a6 e0 80 6b       	r6 = 0x10000 - r6			  ## noise_shape_analysis_FIX.c:1265:18
   132bc:    f8 e1 60 b5       	r11_r10 = r6 * r5 (s)			  ## noise_shape_analysis_FIX.c:1265:18
   132c0:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## noise_shape_analysis_FIX.c:1265:18
   132c4:    c6 14             	r14 = 0			  ## noise_shape_analysis_FIX.c:1265:18
   132c6:    89 f8 39 04       	if (r9 != 0x2) goto 0x72 <silk_noise_shape_analysis_FIX+0x7F4 : 1333c >			  ## noise_shape_analysis_FIX.c:1265:18
   132ca:    11 a4             	r1 = r1 << 0x4			  ## noise_shape_analysis_FIX.c:1270:23
   132cc:    a1 e0 80 1a       	r1 = 0x40000 - r1			  ## noise_shape_analysis_FIX.c:1270:23
   132d0:    f8 e1 10 54       	r5_r4 = r1 * r4 (s)			  ## noise_shape_analysis_FIX.c:1270:23
   132d4:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## noise_shape_analysis_FIX.c:1270:23
   132d8:    a1 e0 80 4b       	r1 = 0x10000 - r4			  ## noise_shape_analysis_FIX.c:1270:23
   132dc:    44 e0 33 33       	r4 = 0x3333 <WOLASynthesisFilter_Float_M256_m4_r1+0xB2E : 3332 >			  ## noise_shape_analysis_FIX.c:1270:23
   132e0:    f8 e1 10 54       	r5_r4 = r1 * r4 (s)			  ## noise_shape_analysis_FIX.c:1270:23
   132e4:    d0 e1 0f 48       	r5_r4 >>= 0xf			  ## noise_shape_analysis_FIX.c:1275:23
   132e8:    c1 ff 9a 99 00 00 	r1 = 0x999a <quantize_intervals_LF+0x86 : 999a >			  ## noise_shape_analysis_FIX.c:1275:23
   132ee:    41 18             	r1 += r4			  ## noise_shape_analysis_FIX.c:1275:23
   132f0:    76 e1 01 10       	r6 = r1 & 0xFFFFFFFE			  ## noise_shape_analysis_FIX.c:1275:23
   132f4:    c0 e1 8f 10       	r1 = r8 << 0xf			  ## noise_shape_analysis_FIX.c:1275:23
   132f8:    ef bf             	r7 = r6 >>> 0x1f			  ## noise_shape_analysis_FIX.c:1275:23
   132fa:    81 fd 19 02       	ifs (r1 < 0x1) goto 0x32 <silk_noise_shape_analysis_FIX+0x7E8 : 13330 >			  ## noise_shape_analysis_FIX.c:1275:23
   132fe:    80 e1 00 41       	r4 = clz(r1)			  ## entenc.c:124:2
   13302:    34 ea 01 10       	if ((r4 & 0x1) != 0) {
   13306:    60 e0 00 8c       		r8 = 0x8000
                               	} else {
   1330a:    c8 ff 86 b4 00 00 		r8 = 0xb486
                               	} <print+0x36 : b486 >
   13310:    cd a1             	r5 = r4 >>> 0x1			  ## Inlines.h:101:11
   13312:    c8 e1 82 55       	r5 = r8 >> r5			  ## Inlines.h:101:7
   13316:    41 1a             	r1 <<= r4			  ## Inlines.h:74:11
   13318:    b1 e1 1c 1c       	r1 = uextra(r1, p:0x18, l:0x7)			  ## Inlines.h:75:22
   1331c:    e1 e1 d5 10       	r1 = r1 * 0xD5			  ## Inlines.h:104:9
   13320:    f8 e1 50 91       	r9_r8 = r5 * r1 (s)			  ## Inlines.h:104:9
   13324:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## Inlines.h:104:9
   13328:    b4 e0 80 45       	r4 = r8 + r5			  ## Inlines.h:104:9
   1332c:    cd bf             	r5 = r4 >>> 0x1f			  ## Inlines.h:106:5
   1332e:    04 82             	goto 0x4 <silk_noise_shape_analysis_FIX+0x7EC : 13334 >
   13330:    44 20             	r4 = 0x0
   13332:    45 20             	r5 = 0x0
   13334:    f8 e1 40 f6       	r15_r14 = r4 * r6 (s)			  ## noise_shape_analysis_FIX.c:1275:23
   13338:    d0 e1 00 e9       	r15_r14 >>= 0x10			  ## noise_shape_analysis_FIX.c:1275:23
   1333c:    b4 f0 20 1a       	r1 = r2 + r10  #			  ## noise_shape_analysis_FIX.c:1265:18
   13340:    06 23             		 r6 = [sp+12]			  ## noise_shape_analysis_FIX.c:1265:18
   13342:    12 30             	r2 = -0x10
   13344:    43 f0 66 66       	r3 = 0x6666  # <wtgv2_silk_NLSF2A+0xF0 : 6666 >
   13348:    07 36             		 r7 = [sp+88]
   1334a:    14 89             	goto 0x52 <silk_noise_shape_analysis_FIX+0x856 : 1339e >
   1334c:    64 69             	r4 = [r6+0x24] 			  ## noise_shape_analysis_FIX.c:1284:4
   1334e:    15 1f             	r5 = r1 - r4			  ## noise_shape_analysis_FIX.c:1284:4
   13350:    f8 e1 50 93       	r9_r8 = r5 * r3 (s)			  ## noise_shape_analysis_FIX.c:1284:4
   13354:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## noise_shape_analysis_FIX.c:1284:4
   13358:    84 18             	r4 += r8			  ## noise_shape_analysis_FIX.c:1284:4
   1335a:    e4 69             	[r6+0x24] = r4			  ## noise_shape_analysis_FIX.c:1283:33
   1335c:    65 6a             	r5 = [r6+0x28] 			  ## noise_shape_analysis_FIX.c:1286:4
   1335e:    b4 e0 e2 05       	r0 = r14 - r5			  ## noise_shape_analysis_FIX.c:1286:4
   13362:    f8 e1 00 93       	r9_r8 = r0 * r3 (s)			  ## noise_shape_analysis_FIX.c:1286:4
   13366:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## noise_shape_analysis_FIX.c:1286:4
   1336a:    b4 e0 80 05       	r0 = r8 + r5			  ## noise_shape_analysis_FIX.c:1286:4
   1336e:    e0 6a             	[r6+0x28] = r0			  ## noise_shape_analysis_FIX.c:1285:37
   13370:    60 6b             	r0 = [r6+0x2c] 			  ## noise_shape_analysis_FIX.c:1288:4
   13372:    b4 e0 c2 50       	r5 = r12 - r0			  ## noise_shape_analysis_FIX.c:1288:4
   13376:    f8 e1 50 93       	r9_r8 = r5 * r3 (s)			  ## noise_shape_analysis_FIX.c:1288:4
   1337a:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## noise_shape_analysis_FIX.c:1288:4
   1337e:    80 18             	r0 += r8			  ## noise_shape_analysis_FIX.c:1288:4
   13380:    e0 6b             	[r6+0x2c] = r0			  ## noise_shape_analysis_FIX.c:1287:28
   13382:    48 82             	r0 = r4 + 0x2			  ## noise_shape_analysis_FIX.c:1293:72
   13384:    88 a2             	r0 = r0 >>> 0x2			  ## noise_shape_analysis_FIX.c:1293:77
   13386:    f4 1c             	r4 = r7 + r2			  ## noise_shape_analysis_FIX.c:1293:35
   13388:    d1 ec 4f 0b       	[++r4=0x1bc] = r0			  ## noise_shape_analysis_FIX.c:1293:35
   1338c:    60 6a             	r0 = [r6+0x28] 			  ## noise_shape_analysis_FIX.c:1294:49
   1338e:    c0 22             	r0 += 0x2			  ## noise_shape_analysis_FIX.c:1294:72
   13390:    88 a2             	r0 = r0 >>> 0x2			  ## noise_shape_analysis_FIX.c:1294:77
   13392:    c0 68             	[r4+0x20] = r0			  ## noise_shape_analysis_FIX.c:1294:35
   13394:    60 6b             	r0 = [r6+0x2c] 			  ## noise_shape_analysis_FIX.c:1295:49
   13396:    c0 22             	r0 += 0x2			  ## noise_shape_analysis_FIX.c:1295:72
   13398:    88 a2             	r0 = r0 >>> 0x2			  ## noise_shape_analysis_FIX.c:1295:77
   1339a:    c0 64             	[r4+0x10] = r0			  ## noise_shape_analysis_FIX.c:1295:35
   1339c:    c2 24             	r2 += 0x4			  ## noise_shape_analysis_FIX.c:1282:2
   1339e:    e2 56             	if (r2 != 0) goto -0x54 <silk_noise_shape_analysis_FIX+0x804 : 1334c >
   133a0:    02 9d             	sp += 0x74
   133a2:    5f 04             	{pc, r15-r4} = [sp++]			  ## noise_shape_analysis_FIX.c:1297:1


silk_find_LTP_FIX:
   133a4:    7f 04             	[--sp] = {rets, r15-r4}			  ## encode_frame_FIX.c:340:0
   133a6:    a2 9d             	sp += -0x10c			  ## encode_frame_FIX.c:340:0
   133a8:    d4 e9 4c f1       	r15 = [sp+332]			  ## encode_frame_FIX.c:340:0
   133ac:    43 f0 8f 02       	r3 = 0x28f  # <ROM_RAM_SIZE+0x8E : 28e >			  ## encode_frame_FIX.c:340:0
   133b0:    83 21             		 [sp+4] = r3			  ## encode_frame_FIX.c:340:0
   133b2:    f8 f1 f0 53       	r5_r4 = r15 * r3 (s)  #			  ## encode_frame_FIX.c:340:0
   133b6:    81 22             		 [sp+8] = r1			  ## encode_frame_FIX.c:340:0
   133b8:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## encode_frame_FIX.c:340:0
   133bc:    d0 e9 29 40       	d[sp+40] = r5_r4			  ## encode_frame_FIX.c:340:0
   133c0:    43 e0 f0 35       	r3 = 0x35f0 <WOLASynthesisFilter_Float_M256_m4_r1+0xDEC : 35f0 >			  ## encode_frame_FIX.c:340:0
   133c4:    03 18             	r3 += r0			  ## encode_frame_FIX.c:340:0
   133c6:    0d e1 68 30       	r13 = r3 + 0x68			  ## encode_frame_FIX.c:365:13
   133ca:    04 e1 40 30       	r4 = r3 + 0x40			  ## encode_frame_FIX.c:363:26
   133ce:    44 f0 14 37       	r4 = 0x3714  # <WOLASynthesisFilter_Float_M256_m4_r1+0xF10 : 3714 >			  ## encode_frame_FIX.c:363:26
   133d2:    a4 23             		 [sp+140] = r4			  ## encode_frame_FIX.c:363:26
   133d4:    05 dd             	r5 = r0 + r4  #			  ## encode_frame_FIX.c:363:26
   133d6:    a0 25             		 [sp+148] = r0			  ## encode_frame_FIX.c:363:26
   133d8:    58 84             	r0 = r5 + 0x4			  ## encode_frame_FIX.c:370:7
   133da:    06 f1 e4 30       	r6 = r3 + 0xe4  #			  ## encode_frame_FIX.c:370:7
   133de:    80 29             		 [sp+36] = r0			  ## encode_frame_FIX.c:370:7
   133e0:    d4 e9 54 01       	r0 = [sp+340]			  ## encode_frame_FIX.c:370:7
   133e4:    d4 e9 40 41       	r4 = [sp+320]			  ## encode_frame_FIX.c:370:7
   133e8:    0e f1 80 50       	r14 = r5 + 0x80  #			  ## encode_frame_FIX.c:370:7
   133ec:    a6 2e             		 [sp+184] = r6			  ## encode_frame_FIX.c:370:7
   133ee:    00 a1             	r0 = r0 << 0x1			  ## encode_frame_FIX.c:369:15
   133f0:    04 18             	r4 += r0			  ## encode_frame_FIX.c:369:15
   133f2:    00 e1 80 30       	r0 = r3 + 0x80
   133f6:    00 f1 c0 50       	r0 = r5 + 0xc0  #
   133fa:    a0 2f             		 [sp+188] = r0
   133fc:    c3 d4             	r11 = 0  #
   133fe:    a5 24             		 [sp+144] = r5
   13400:    00 f1 30 30       	r0 = r3 + 0x30  #			  ## encode_frame_FIX.c:362:23
   13404:    a0 2d             		 [sp+180] = r0			  ## encode_frame_FIX.c:362:23
   13406:    00 f1 20 30       	r0 = r3 + 0x20  #			  ## encode_frame_FIX.c:361:24
   1340a:    80 27             		 [sp+28] = r0			  ## encode_frame_FIX.c:361:24
   1340c:    c0 f1 f1 60       	r6 = r15 << 0x1  #			  ## encode_frame_FIX.c:370:7
   13410:    83 2e             		 [sp+56] = r3			  ## encode_frame_FIX.c:370:7
   13412:    c0 dd             	r0 = r4 + r6  #			  ## encode_frame_FIX.c:370:7
   13414:    80 30             		 [sp+64] = r0			  ## encode_frame_FIX.c:370:7
   13416:    80 25             	[sp+20] = r0			  ## encode_frame_FIX.c:370:7
   13418:    48 84             	r0 = r4 + 0x4			  ## encode_frame_FIX.c:370:7
   1341a:    80 31             	[sp+68] = r0			  ## encode_frame_FIX.c:370:7
   1341c:    48 82             	r0 = r4 + 0x2			  ## encode_frame_FIX.c:370:7
   1341e:    37 f1 fc 4f       	r7 = r4 + -0x4  #			  ## encode_frame_FIX.c:370:7
   13422:    80 36             		 [sp+88] = r0			  ## encode_frame_FIX.c:370:7
   13424:    28 84             	r0 = r2 + 0x4			  ## encode_frame_FIX.c:370:7
   13426:    00 f1 2c 20       	r0 = r2 + 0x2c  #			  ## encode_frame_FIX.c:370:7
   1342a:    80 35             		 [sp+84] = r0			  ## encode_frame_FIX.c:370:7
   1342c:    80 34             	[sp+80] = r0			  ## encode_frame_FIX.c:370:7
   1342e:    a2 28             	[sp+160] = r2			  ## encode_frame_FIX.c:370:7
   13430:    28 9c             	r0 = r2 + 0x1c			  ## encode_frame_FIX.c:370:7
   13432:    00 f1 04 f0       	r0 = r15 + 0x4  #			  ## encode_frame_FIX.c:370:7
   13436:    80 33             		 [sp+76] = r0			  ## encode_frame_FIX.c:370:7
   13438:    80 24             	[sp+16] = r0			  ## encode_frame_FIX.c:370:7
   1343a:    d4 e9 58 01       	r0 = [sp+344]			  ## encode_frame_FIX.c:370:7
   1343e:    80 39             	[sp+100] = r0			  ## encode_frame_FIX.c:370:7
   13440:    d4 e9 50 01       	r0 = [sp+336]			  ## encode_frame_FIX.c:370:7
   13444:    80 2f             	[sp+60] = r0			  ## encode_frame_FIX.c:370:7
   13446:    d4 e9 48 01       	r0 = [sp+328]			  ## encode_frame_FIX.c:370:7
   1344a:    80 2c             	[sp+48] = r0			  ## encode_frame_FIX.c:370:7
   1344c:    d4 e9 44 01       	r0 = [sp+324]			  ## encode_frame_FIX.c:370:7
   13450:    80 23             	[sp+12] = r0			  ## encode_frame_FIX.c:370:7
   13452:    84 28             	[sp+32] = r4			  ## encode_frame_FIX.c:370:7
   13454:    84 3e             	[sp+120] = r4
   13456:    40 20             	r0 = 0x0
   13458:    80 3d             	[sp+116] = r0
   1345a:    81 32             	[sp+72] = r1
   1345c:    41 20             	r1 = 0x0
   1345e:    43 30             	r3 = 0x10
   13460:    d0 e9 a9 20       	d[sp+168] = r3_r2
   13464:    d4 e9 71 f0       	[sp+112] = r15
   13468:    d4 e9 85 d0       	[sp+132] = r13
   1346c:    86 26             	[sp+24] = r6
   1346e:    c0 ea 23 04       	goto 0x846 <silk_find_LTP_FIX+0x914 : 13cb8 >
   13472:    f3 d6             	r3 = r15  #			  ## encode_frame_FIX.c:373:3
   13474:    00 23             		 r0 = [sp+12]			  ## encode_frame_FIX.c:371:23
   13476:    d8 ec 0a 81       	r8 = [r0+r1<<2]			  ## encode_frame_FIX.c:371:23
   1347a:    81 38             	[sp+96] = r1			  ## encode_frame_FIX.c:371:23
   1347c:    10 a2             	r0 = r1 << 0x2			  ## encode_frame_FIX.c:371:23
   1347e:    01 27             	r1 = [sp+28]			  ## encode_frame_FIX.c:373:24
   13480:    10 d8             	r0 += r1  #			  ## encode_frame_FIX.c:373:24
   13482:    04 3e             		 r4 = [sp+120]			  ## encode_frame_FIX.c:373:24
   13484:    f8 e8 c0 10       	r1 = sp + 192			  ## encode_frame_FIX.c:373:24
   13488:    42 16             	r2 = r4			  ## encode_frame_FIX.c:373:3
   1348a:    bf ea 1a f3       	call -0x19cc <silk_sum_sqr_shift : 11ac2 >			  ## encode_frame_FIX.c:373:3
   1348e:    80 37             	[sp+92] = r0
   13490:    11 3e             	r1 = -0x2			  ## encode_frame_FIX.c:371:19
   13492:    b4 f0 12 18       	r1 = r1 - r8  #			  ## encode_frame_FIX.c:371:19
   13496:    00 60             		 r0 = [r0+0x0] 			  ## encode_frame_FIX.c:376:21
   13498:    c0 e1 11 c0       	r12 = r1 << 0x1			  ## encode_frame_FIX.c:371:19
   1349c:    b4 e0 40 9c       	r9 = r4 + r12			  ## encode_frame_FIX.c:371:19
   134a0:    00 5c             	if (r0 == 0) goto 0x38 <silk_find_LTP_FIX+0x136 : 134da >
   134a2:    80 e1 00 00       	r0 = clz(r0)			  ## entenc.c:124:2
   134a6:    00 fe 18 02       	ifs (r0 > 0x1) goto 0x30 <silk_find_LTP_FIX+0x136 : 134da >
   134aa:    a0 f0 02 00       	r0 = 0x2 - r0  #			  ## encode_frame_FIX.c:378:14
   134ae:    01 37             		 r1 = [sp+92]
   134b0:    11 60             	r1 = [r1+0x0] 
   134b2:    80 f8 05 02       	if (r0 != 0x1) goto 0xa <silk_find_LTP_FIX+0x11C : 134c0 >			  ## encode_frame_FIX.c:378:14
   134b6:    62 e1 01 10       	r2 = r1 & 0x1			  ## encode_frame_FIX.c:378:14
   134ba:    99 a1             	r1 = r1 >>> 0x1			  ## encode_frame_FIX.c:378:14
   134bc:    21 18             	r1 += r2			  ## encode_frame_FIX.c:378:14
   134be:    04 87             	goto 0xe <silk_find_LTP_FIX+0x12A : 134ce >			  ## encode_frame_FIX.c:378:14
   134c0:    32 e1 ff 0f       	r2 = r0 + -0x1			  ## encode_frame_FIX.c:378:14
   134c4:    43 21             	r3 = 0x1			  ## encode_frame_FIX.c:378:14
   134c6:    c8 e1 30 22       	r2 = r3 << r2			  ## encode_frame_FIX.c:378:14
   134ca:    21 18             	r1 += r2			  ## encode_frame_FIX.c:378:14
   134cc:    89 1a             	r1 >>>= r0			  ## encode_frame_FIX.c:378:14
   134ce:    02 37             	r2 = [sp+92]			  ## encode_frame_FIX.c:378:12
   134d0:    a1 60             	[r2+0x0] = r1			  ## encode_frame_FIX.c:378:12
   134d2:    f8 e8 c0 10       	r1 = sp + 192			  ## encode_frame_FIX.c:378:12
   134d6:    68 e8 00 10       	[r1+0x0] += r0			  ## encode_frame_FIX.c:379:14
   134da:    20 30             	r0 = [sp+192]			  ## encode_frame_FIX.c:381:23
   134dc:    01 39             	r1 = [sp+100]			  ## encode_frame_FIX.c:381:21
   134de:    02 38             	r2 = [sp+96]			  ## encode_frame_FIX.c:381:21
   134e0:    d8 ec 1b 02       	[r1+r2<<2] = r0			  ## encode_frame_FIX.c:381:21
   134e4:    f8 e8 c4 00       	r0 = sp + 196
   134e8:    f8 e8 c8 10       	r1 = sp + 200
   134ec:    92 d6             	r2 = r9  #			  ## encode_frame_FIX.c:241:2
   134ee:    03 24             		 r3 = [sp+16]			  ## encode_frame_FIX.c:241:2
   134f0:    bf ea e7 f2       	call -0x1a32 <silk_sum_sqr_shift : 11ac2 >			  ## encode_frame_FIX.c:241:2
   134f4:    21 31             	r1 = [sp+196]			  ## encode_frame_FIX.c:243:22
   134f6:    40 20             	r0 = 0x0
   134f8:    43 20             	r3 = 0x0			  ## encode_frame_FIX.c:243:22
   134fa:    01 48             	if (r1 == 0) goto 0x10 <silk_find_LTP_FIX+0x168 : 1350c >			  ## encode_frame_FIX.c:243:22
   134fc:    80 e1 00 21       	r2 = clz(r1)			  ## entenc.c:124:2
   13500:    02 fe 04 02       	ifs (r2 > 0x1) goto 0x8 <silk_find_LTP_FIX+0x168 : 1350c >
   13504:    80 e1 00 21       	r2 = clz(r1)			  ## entenc.c:124:2
   13508:    a3 e0 02 20       	r3 = 0x2 - r2			  ## encode_frame_FIX.c:243:22
   1350c:    c8 f1 13 23       	r2 = r1 >>> r3  #			  ## encode_frame_FIX.c:245:11
   13510:    25 32             		 r5 = [sp+200]			  ## encode_frame_FIX.c:246:16
   13512:    53 18             	r3 += r5			  ## encode_frame_FIX.c:246:16
   13514:    d0 e9 c5 20       	d[sp+196] = r3_r2			  ## encode_frame_FIX.c:245:9
   13518:    b4 e0 70 1c       	r1 = r7 + r12			  ## encode_frame_FIX.c:250:7
   1351c:    c1 24             	r1 += 0x4			  ## encode_frame_FIX.c:250:7
   1351e:    04 86             	goto 0xc <silk_find_LTP_FIX+0x188 : 1352c >			  ## encode_frame_FIX.c:250:7
   13520:    d8 ed 1a 50       	r5 = h[r1+r0<<1] (s)			  ## encode_frame_FIX.c:251:13
   13524:    55 1b             	r5 *= r5			  ## encode_frame_FIX.c:251:13
   13526:    b5 1a             	r5 >>= r3			  ## encode_frame_FIX.c:251:13
   13528:    2a 1f             	r2 = r2 - r5			  ## encode_frame_FIX.c:251:10
   1352a:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:250:30
   1352c:    80 f8 f8 09       	if (r0 != 0x4) goto -0x10 <silk_find_LTP_FIX+0x17C : 13520 >
   13530:    a2 31             	[sp+196] = r2			  ## encode_frame_FIX.c:251:10
   13532:    00 39             	r0 = [sp+100]			  ## encode_frame_FIX.c:253:22
   13534:    01 38             	r1 = [sp+96]			  ## encode_frame_FIX.c:253:22
   13536:    d8 ec 0a 11       	r1 = [r0+r1<<2]			  ## encode_frame_FIX.c:253:22
   1353a:    87 2d             	[sp+52] = r7
   1353c:    11 ee 00 d3       	ifs (r1 > r3) {
   13540:    98 1e             		r0 = r1 - r3			  ## encode_frame_FIX.c:255:12
   13542:    8a 1a             		r2 >>>= r0			  ## encode_frame_FIX.c:255:12
   13544:    a2 31             		[sp+196] = r2			  ## encode_frame_FIX.c:255:10
   13546:    a1 32             		[sp+200] = r1
                               	} else {			  ## encode_frame_FIX.c:256:17
   13548:    31 16             		r1 = r3
                               	}			  ## encode_frame_FIX.c:271:6
   1354a:    20 28             	r0 = [sp+160]			  ## encode_frame_FIX.c:261:32
   1354c:    82 60             	[r0+0x0] = r2			  ## encode_frame_FIX.c:261:32
   1354e:    00 36             	r0 = [sp+88]			  ## encode_frame_FIX.c:263:7
   13550:    c0 18             	r0 += r12			  ## encode_frame_FIX.c:263:7
   13552:    c0 24             	r0 += 0x4			  ## encode_frame_FIX.c:263:7
   13554:    83 1d             	r3 = r0 + r6			  ## encode_frame_FIX.c:263:7
   13556:    04 e1 08 90       	r4 = r9 + 0x8			  ## encode_frame_FIX.c:262:10
   1355a:    84 3a             	[sp+104] = r4
   1355c:    45 20             	r5 = 0x0
   1355e:    46 38             	r6 = 0x18
   13560:    04 90             	goto 0x20 <silk_find_LTP_FIX+0x1DE : 13582 >
   13562:    d8 ed 02 75       	r7 = h[r0+r5] (s)			  ## encode_frame_FIX.c:265:12
   13566:    d8 ed 32 45       	r4 = h[r3+r5] (s)			  ## encode_frame_FIX.c:264:12
   1356a:    77 1b             	r7 *= r7			  ## encode_frame_FIX.c:265:12
   1356c:    97 1a             	r7 >>= r1			  ## encode_frame_FIX.c:265:12
   1356e:    44 1b             	r4 *= r4			  ## encode_frame_FIX.c:264:12
   13570:    94 1a             	r4 >>= r1			  ## encode_frame_FIX.c:264:12
   13572:    22 1f             	r2 = r2 - r4			  ## encode_frame_FIX.c:264:12
   13574:    72 18             	r2 += r7			  ## encode_frame_FIX.c:265:12
   13576:    a2 31             	[sp+196] = r2			  ## encode_frame_FIX.c:265:10
   13578:    24 28             	r4 = [sp+160]			  ## encode_frame_FIX.c:266:33
   1357a:    d8 ec 43 26       	[r4+r6] = r2			  ## encode_frame_FIX.c:266:33
   1357e:    c6 38             	r6 += 0x18			  ## encode_frame_FIX.c:263:2
   13580:    fd 3e             	r5 += -0x2			  ## encode_frame_FIX.c:263:2
   13582:    f5 f8 ee f1       	if (r5 != -0x8) goto -0x24 <silk_find_LTP_FIX+0x1BE : 13562 >
   13586:    03 e1 06 90       	r3 = r9 + 0x6			  ## encode_frame_FIX.c:269:10
   1358a:    c0 e1 81 00       	r0 = r8 << 0x1			  ## encode_frame_FIX.c:238:27
   1358e:    81 fe 6b 00       	ifs (r1 <= 0x0) goto 0xd6 <silk_find_LTP_FIX+0x2C4 : 13668 >			  ## encode_frame_FIX.c:238:27
   13592:    02 25             	r2 = [sp+20]			  ## encode_frame_FIX.c:238:27
   13594:    b4 f0 22 80       	r8 = r2 - r0  #			  ## encode_frame_FIX.c:238:27
   13598:    02 28             		 r2 = [sp+32]			  ## encode_frame_FIX.c:238:27
   1359a:    b4 f0 22 90       	r9 = r2 - r0  #			  ## encode_frame_FIX.c:238:27
   1359e:    00 31             		 r0 = [sp+68]			  ## encode_frame_FIX.c:238:27
   135a0:    c0 18             	r0 += r12			  ## encode_frame_FIX.c:238:27
   135a2:    0c 84             	r4 = r0 + 0x4			  ## encode_frame_FIX.c:238:27
   135a4:    46 21             	r6 = 0x1			  ## encode_frame_FIX.c:238:27
   135a6:    d4 e9 74 c0       	r12 = [sp+116]			  ## encode_frame_FIX.c:238:27
   135aa:    00 34             	r0 = [sp+80]			  ## encode_frame_FIX.c:238:27
   135ac:    a0 26             	[sp+152] = r0			  ## encode_frame_FIX.c:238:27
   135ae:    00 33             	r0 = [sp+76]			  ## encode_frame_FIX.c:238:27
   135b0:    a0 22             	[sp+136] = r0			  ## encode_frame_FIX.c:238:27
   135b2:    84 3b             	[sp+108] = r4			  ## encode_frame_FIX.c:238:27
   135b4:    24 94             	goto 0xa8 <silk_find_LTP_FIX+0x2BA : 1365e >			  ## encode_frame_FIX.c:238:27
   135b6:    45 20             	r5 = 0x0
   135b8:    a5 31             	[sp+196] = r5			  ## encode_frame_FIX.c:275:11
   135ba:    40 20             	r0 = 0x0			  ## encode_frame_FIX.c:275:11
   135bc:    04 88             	goto 0x10 <silk_find_LTP_FIX+0x22A : 135ce >			  ## encode_frame_FIX.c:275:11
   135be:    d8 ed 4a 70       	r7 = h[r4+r0<<1] (s)			  ## encode_frame_FIX.c:277:15
   135c2:    d8 ed 3a 20       	r2 = h[r3+r0<<1] (s)			  ## encode_frame_FIX.c:277:15
   135c6:    72 1b             	r2 *= r7			  ## encode_frame_FIX.c:277:15
   135c8:    9a 1a             	r2 >>>= r1			  ## encode_frame_FIX.c:277:15
   135ca:    25 18             	r5 += r2			  ## encode_frame_FIX.c:277:12
   135cc:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:276:24
   135ce:    8f ed f6 01       	ifs (r0 < r15) goto -0x14 <silk_find_LTP_FIX+0x21A : 135be >
   135d2:    e0 f1 14 60       	r0 = r6 * 0x14  #			  ## encode_frame_FIX.c:280:4
   135d6:    a3 29             		 [sp+164] = r3
   135d8:    a5 31             	[sp+196] = r5			  ## encode_frame_FIX.c:277:12
   135da:    22 28             	r2 = [sp+160]
   135dc:    d8 ec 23 50       	[r2+r0] = r5			  ## encode_frame_FIX.c:280:36
   135e0:    d8 ec 2b 56       	[r2+r6<<2] = r5			  ## encode_frame_FIX.c:281:36
   135e4:    a0 f0 05 60       	r0 = 0x5 - r6  #			  ## encode_frame_FIX.c:281:36
   135e8:    a6 20             		 [sp+128] = r6			  ## encode_frame_FIX.c:281:36
   135ea:    a0 2c             	[sp+176] = r0			  ## encode_frame_FIX.c:281:36
   135ec:    40 21             	r0 = 0x1			  ## encode_frame_FIX.c:281:36
   135ee:    d4 e9 74 d0       	r13 = [sp+116]			  ## encode_frame_FIX.c:283:14
   135f2:    d4 e9 7d c0       	[sp+124] = r12			  ## encode_frame_FIX.c:283:14
   135f6:    26 26             	r6 = [sp+152]			  ## encode_frame_FIX.c:283:14
   135f8:    d4 e9 88 f0       	r15 = [sp+136]			  ## encode_frame_FIX.c:283:14
   135fc:    04 9c             	goto 0x38 <silk_find_LTP_FIX+0x292 : 13636 >			  ## encode_frame_FIX.c:283:14
   135fe:    d8 ed 92 2c       	r2 = h[r9+r12] (s)			  ## encode_frame_FIX.c:284:14
   13602:    b4 e0 90 4d       	r4 = r9 + r13			  ## encode_frame_FIX.c:284:14
   13606:    54 ed 42 40       	r4 = h[r4+0x2] (s)			  ## encode_frame_FIX.c:284:14
   1360a:    83 16             	r3 = r8			  ## encode_frame_FIX.c:284:14
   1360c:    d8 ed 32 7c       	r7 = h[r3+r12] (s)			  ## encode_frame_FIX.c:283:14
   13610:    d3 18             	r3 += r13			  ## encode_frame_FIX.c:283:14
   13612:    54 ed 32 30       	r3 = h[r3+0x2] (s)			  ## encode_frame_FIX.c:283:14
   13616:    42 1b             	r2 *= r4			  ## encode_frame_FIX.c:284:14
   13618:    9a 1a             	r2 >>>= r1			  ## encode_frame_FIX.c:284:14
   1361a:    73 1b             	r3 *= r7			  ## encode_frame_FIX.c:283:14
   1361c:    9b 1a             	r3 >>>= r1			  ## encode_frame_FIX.c:283:14
   1361e:    db 1e             	r3 = r5 - r3			  ## encode_frame_FIX.c:283:14
   13620:    ad 1c             	r5 = r2 + r3			  ## encode_frame_FIX.c:284:14
   13622:    3d f1 fe df       	r13 = r13 + -0x2  #			  ## encode_frame_FIX.c:282:4
   13626:    a5 31             		 [sp+196] = r5			  ## encode_frame_FIX.c:284:12
   13628:    d8 ec 69 51       	[r6++=0x18] = r5			  ## encode_frame_FIX.c:285:41
   1362c:    d8 ec f9 51       	[r15++=0x18] = r5			  ## encode_frame_FIX.c:286:41
   13630:    3c e1 fe cf       	r12 = r12 + -0x2			  ## encode_frame_FIX.c:282:4
   13634:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:282:38
   13636:    22 2c             	r2 = [sp+176]			  ## encode_frame_FIX.c:282:4
   13638:    82 ed e1 01       	ifs (r0 < r2) goto -0x3e <silk_find_LTP_FIX+0x25A : 135fe >			  ## encode_frame_FIX.c:282:4
   1363c:    d4 e9 7c c0       	r12 = [sp+124]
   13640:    3c f1 fe cf       	r12 = r12 + -0x2  #			  ## encode_frame_FIX.c:273:3
   13644:    20 26             		 r0 = [sp+152]			  ## encode_frame_FIX.c:273:3
   13646:    c0 34             	r0 += 0x14			  ## encode_frame_FIX.c:273:3
   13648:    a0 26             	[sp+152] = r0			  ## encode_frame_FIX.c:273:3
   1364a:    20 22             	r0 = [sp+136]			  ## encode_frame_FIX.c:273:3
   1364c:    c0 24             	r0 += 0x4			  ## encode_frame_FIX.c:273:3
   1364e:    a0 22             	[sp+136] = r0			  ## encode_frame_FIX.c:273:3
   13650:    26 20             	r6 = [sp+128]			  ## encode_frame_FIX.c:273:3
   13652:    c6 21             	r6 += 0x1			  ## encode_frame_FIX.c:273:33
   13654:    23 29             	r3 = [sp+164]
   13656:    fb 3e             	r3 += -0x2			  ## encode_frame_FIX.c:288:8
   13658:    d4 e9 70 f0       	r15 = [sp+112]
   1365c:    04 3b             	r4 = [sp+108]
   1365e:    86 f8 aa 0b       	if (r6 != 0x5) goto -0xac <silk_find_LTP_FIX+0x212 : 135b6 >
   13662:    d4 e9 84 d0       	r13 = [sp+132]
   13666:    34 83             	goto 0xc6 <silk_find_LTP_FIX+0x38A : 1372e >
   13668:    01 25             	r1 = [sp+20]			  ## encode_frame_FIX.c:238:27
   1366a:    b4 f0 12 90       	r9 = r1 - r0  #			  ## encode_frame_FIX.c:238:27
   1366e:    01 28             		 r1 = [sp+32]			  ## encode_frame_FIX.c:238:27
   13670:    b4 f0 12 80       	r8 = r1 - r0  #			  ## encode_frame_FIX.c:238:27
   13674:    00 3d             		 r0 = [sp+116]			  ## encode_frame_FIX.c:238:27
   13676:    41 21             	r1 = 0x1			  ## encode_frame_FIX.c:238:27
   13678:    a0 26             	[sp+152] = r0			  ## encode_frame_FIX.c:238:27
   1367a:    00 34             	r0 = [sp+80]			  ## encode_frame_FIX.c:238:27
   1367c:    a0 22             	[sp+136] = r0			  ## encode_frame_FIX.c:238:27
   1367e:    00 33             	r0 = [sp+76]			  ## encode_frame_FIX.c:238:27
   13680:    a0 20             	[sp+128] = r0			  ## encode_frame_FIX.c:238:27
   13682:    24 92             	goto 0xa4 <silk_find_LTP_FIX+0x384 : 13728 >			  ## encode_frame_FIX.c:238:27
   13684:    c4 d4             	r12 = 0  #			  ## opus.c:206:4
   13686:    00 3a             		 r0 = [sp+104]			  ## opus.c:206:4
   13688:    c5 d4             	r13 = 0  #			  ## opus.c:206:4
   1368a:    a3 29             		 [sp+164] = r3			  ## opus.c:206:4
   1368c:    14 16             	r4 = r1
   1368e:    35 16             	r5 = r3			  ## opus.c:206:4
   13690:    5f 03             	rep 0xc r15 {			  ## opus.c:206:4
   13692:    d4 ed 02 60       		r6 = h[r0++=0x2] (s)			  ## opus.c:206:4
   13696:    d4 ed 52 70       		r7 = h[r5++=0x2] (s)			  ## opus.c:206:4
   1369a:    fc e1 60 d7       		r13_r12 += r6 * r7 (s)
                               	}			  ## opus.c:206:4
   1369e:    8f f8 f7 01       	if (r15 != 0x0) goto -0x12 <silk_find_LTP_FIX+0x2EC : 13690 >			  ## opus.c:206:4
   136a2:    d4 e9 c5 c0       	[sp+196] = r12			  ## encode_frame_FIX.c:293:11
   136a6:    e0 f1 14 40       	r0 = r4 * 0x14  #			  ## encode_frame_FIX.c:294:4
   136aa:    21 28             		 r1 = [sp+160]			  ## encode_frame_FIX.c:294:4
   136ac:    d8 ec 13 c0       	[r1+r0] = r12			  ## encode_frame_FIX.c:294:36
   136b0:    d8 ec 1b c4       	[r1+r4<<2] = r12			  ## encode_frame_FIX.c:295:36
   136b4:    a0 f0 05 40       	r0 = 0x5 - r4  #			  ## encode_frame_FIX.c:295:36
   136b8:    84 3f             		 [sp+124] = r4			  ## encode_frame_FIX.c:295:36
   136ba:    a0 2c             	[sp+176] = r0			  ## encode_frame_FIX.c:295:36
   136bc:    45 21             	r5 = 0x1			  ## encode_frame_FIX.c:295:36
   136be:    03 3d             	r3 = [sp+116]			  ## encode_frame_FIX.c:298:14
   136c0:    27 26             	r7 = [sp+152]			  ## encode_frame_FIX.c:298:14
   136c2:    d4 e9 88 f0       	r15 = [sp+136]			  ## encode_frame_FIX.c:298:14
   136c6:    26 20             	r6 = [sp+128]			  ## encode_frame_FIX.c:298:14
   136c8:    04 9b             	goto 0x36 <silk_find_LTP_FIX+0x35C : 13700 >			  ## encode_frame_FIX.c:298:14
   136ca:    d8 ed 82 27       	r2 = h[r8+r7] (s)			  ## encode_frame_FIX.c:299:14
   136ce:    b4 e0 80 43       	r4 = r8 + r3			  ## encode_frame_FIX.c:299:14
   136d2:    54 ed 42 40       	r4 = h[r4+0x2] (s)			  ## encode_frame_FIX.c:299:14
   136d6:    91 16             	r1 = r9			  ## encode_frame_FIX.c:299:14
   136d8:    d8 ed 12 07       	r0 = h[r1+r7] (s)			  ## encode_frame_FIX.c:298:14
   136dc:    31 18             	r1 += r3			  ## encode_frame_FIX.c:298:14
   136de:    54 ed 12 10       	r1 = h[r1+0x2] (s)			  ## encode_frame_FIX.c:298:14
   136e2:    42 1b             	r2 *= r4			  ## encode_frame_FIX.c:299:14
   136e4:    10 1b             	r0 *= r1			  ## encode_frame_FIX.c:298:14
   136e6:    b4 e0 c2 00       	r0 = r12 - r0			  ## encode_frame_FIX.c:298:14
   136ea:    b4 e0 20 c0       	r12 = r2 + r0			  ## encode_frame_FIX.c:299:14
   136ee:    d4 e9 c5 c0       	[sp+196] = r12			  ## encode_frame_FIX.c:299:12
   136f2:    d8 ec f9 c1       	[r15++=0x18] = r12			  ## encode_frame_FIX.c:300:41
   136f6:    d8 ec 69 c1       	[r6++=0x18] = r12			  ## encode_frame_FIX.c:301:41
   136fa:    fb 3e             	r3 += -0x2			  ## encode_frame_FIX.c:297:4
   136fc:    ff 3e             	r7 += -0x2			  ## encode_frame_FIX.c:297:4
   136fe:    c5 21             	r5 += 0x1			  ## encode_frame_FIX.c:297:38
   13700:    20 2c             	r0 = [sp+176]			  ## encode_frame_FIX.c:297:4
   13702:    80 ed e2 51       	ifs (r5 < r0) goto -0x3c <silk_find_LTP_FIX+0x326 : 136ca >			  ## encode_frame_FIX.c:297:4
   13706:    20 26             	r0 = [sp+152]			  ## encode_frame_FIX.c:291:3
   13708:    f8 3e             	r0 += -0x2			  ## encode_frame_FIX.c:291:3
   1370a:    a0 26             	[sp+152] = r0			  ## encode_frame_FIX.c:291:3
   1370c:    20 22             	r0 = [sp+136]			  ## encode_frame_FIX.c:291:3
   1370e:    c0 34             	r0 += 0x14			  ## encode_frame_FIX.c:291:3
   13710:    a0 22             	[sp+136] = r0			  ## encode_frame_FIX.c:291:3
   13712:    20 20             	r0 = [sp+128]			  ## encode_frame_FIX.c:291:3
   13714:    c0 24             	r0 += 0x4			  ## encode_frame_FIX.c:291:3
   13716:    a0 20             	[sp+128] = r0			  ## encode_frame_FIX.c:291:3
   13718:    01 3f             	r1 = [sp+124]			  ## encode_frame_FIX.c:291:3
   1371a:    c1 21             	r1 += 0x1			  ## encode_frame_FIX.c:291:33
   1371c:    23 29             	r3 = [sp+164]
   1371e:    fb 3e             	r3 += -0x2			  ## encode_frame_FIX.c:303:8
   13720:    d4 e9 70 f0       	r15 = [sp+112]
   13724:    d4 e9 84 d0       	r13 = [sp+132]
   13728:    81 f8 ac 0b       	if (r1 != 0x5) goto -0xa8 <silk_find_LTP_FIX+0x2E0 : 13684 >
   1372c:    21 32             	r1 = [sp+200]
   1372e:    d4 e9 68 80       	r8 = [sp+104]
   13732:    00 39             	r0 = [sp+100]			  ## encode_frame_FIX.c:306:11
   13734:    02 38             	r2 = [sp+96]			  ## encode_frame_FIX.c:306:11
   13736:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## encode_frame_FIX.c:306:11
   1373a:    40 20             	r0 = 0x0
   1373c:    01 fe 14 00       	ifs (r1 > 0x0) goto 0x28 <silk_find_LTP_FIX+0x3C4 : 13768 >
   13740:    14 88             	goto 0x50 <silk_find_LTP_FIX+0x3EE : 13792 >
   13742:    42 20             	r2 = 0x0
   13744:    03 3e             	r3 = [sp+120]
   13746:    44 20             	r4 = 0x0
   13748:    04 88             	goto 0x10 <silk_find_LTP_FIX+0x3B6 : 1375a >
   1374a:    d8 ed 8a 52       	r5 = h[r8+r2<<1] (s)			  ## encode_frame_FIX.c:212:19
   1374e:    d4 ed 32 60       	r6 = h[r3++=0x2] (s)			  ## encode_frame_FIX.c:212:19
   13752:    65 1b             	r5 *= r6			  ## encode_frame_FIX.c:212:19
   13754:    9d 1a             	r5 >>>= r1			  ## encode_frame_FIX.c:212:19
   13756:    54 18             	r4 += r5			  ## encode_frame_FIX.c:212:16
   13758:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:211:24
   1375a:    8f ed f6 21       	ifs (r2 < r15) goto -0x14 <silk_find_LTP_FIX+0x3A6 : 1374a >
   1375e:    d8 ec db 40       	[r13+r0<<2] = r4			  ## encode_frame_FIX.c:214:14
   13762:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:209:33
   13764:    38 e1 fe 8f       	r8 = r8 + -0x2			  ## encode_frame_FIX.c:215:8
   13768:    80 f8 eb 0b       	if (r0 != 0x5) goto -0x2a <silk_find_LTP_FIX+0x39E : 13742 >
   1376c:    04 94             	goto 0x28 <silk_find_LTP_FIX+0x3F2 : 13796 >
   1376e:    42 20             	r2 = 0x0			  ## opus.c:206:4
   13770:    43 20             	r3 = 0x0			  ## opus.c:206:4
   13772:    f1 d6             	r1 = r15  #			  ## opus.c:206:4
   13774:    04 3e             		 r4 = [sp+120]			  ## opus.c:206:4
   13776:    85 16             	r5 = r8			  ## opus.c:206:4
   13778:    51 03             	rep 0xc r1 {			  ## opus.c:206:4
   1377a:    d4 ed 52 60       		r6 = h[r5++=0x2] (s)			  ## opus.c:206:4
   1377e:    d4 ed 42 70       		r7 = h[r4++=0x2] (s)			  ## opus.c:206:4
   13782:    fc e1 60 37       		r3_r2 += r6 * r7 (s)
                               	}			  ## opus.c:206:4
   13786:    f1 58             	if (r1 != 0) goto -0x10 <silk_find_LTP_FIX+0x3D4 : 13778 >			  ## opus.c:206:4
   13788:    d8 ec db 20       	[r13+r0<<2] = r2			  ## encode_frame_FIX.c:220:14
   1378c:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:219:33
   1378e:    38 e1 fe 8f       	r8 = r8 + -0x2			  ## encode_frame_FIX.c:221:8
   13792:    80 f8 ec 0b       	if (r0 != 0x5) goto -0x28 <silk_find_LTP_FIX+0x3CA : 1376e >
   13796:    00 39             	r0 = [sp+100]			  ## encode_frame_FIX.c:386:7
   13798:    01 38             	r1 = [sp+96]			  ## encode_frame_FIX.c:386:7
   1379a:    d8 ec 0a 11       	r1 = [r0+r1<<2]			  ## encode_frame_FIX.c:386:7
   1379e:    22 30             	r2 = [sp+192]			  ## encode_frame_FIX.c:386:27
   137a0:    03 37             	r3 = [sp+92]
   137a2:    30 60             	r0 = [r3+0x0] 
   137a4:    11 ee 00 82       	ifs (r1 > r2) {
   137a8:    91 1e             		r1 = r1 - r2			  ## encode_frame_FIX.c:387:14
   137aa:    98 1a             		r0 >>>= r1			  ## encode_frame_FIX.c:387:14
   137ac:    b0 60             		[r3+0x0] = r0
                               	}			  ## encode_frame_FIX.c:387:12
   137ae:    d4 e9 a0 90       	r9 = [sp+160]			  ## encode_frame_FIX.c:387:12
   137b2:    d4 e9 94 f0       	r15 = [sp+148]			  ## encode_frame_FIX.c:387:12
   137b6:    46 e0 44 04       	r6 = 0x444 <WOLASynthesisFilter_Float_M64_m4_r1+0x40 : 444 >
   137ba:    f8 e1 00 16       	r1_r0 = r0 * r6 (s)			  ## encode_frame_FIX.c:392:10
   137be:    d0 ec 90 20       	r2 = [r9+0x0]			  ## encode_frame_FIX.c:393:10
   137c2:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## encode_frame_FIX.c:392:10
   137c6:    03 e1 60 90       	r3 = r9 + 0x60			  ## encode_frame_FIX.c:392:10
   137ca:    f8 f1 20 56       	r5_r4 = r2 * r6 (s)  #			  ## encode_frame_FIX.c:393:10
   137ce:    a3 20             		 [sp+128] = r3			  ## encode_frame_FIX.c:393:10
   137d0:    d0 f1 00 49       	r5_r4 >>= 0x10  #			  ## encode_frame_FIX.c:393:10
   137d4:    33 60             		 r3 = [r3+0x0] 			  ## encode_frame_FIX.c:394:10
   137d6:    40 18             	r0 += r4			  ## encode_frame_FIX.c:392:10
   137d8:    f8 e1 30 36       	r3_r2 = r3 * r6 (s)			  ## encode_frame_FIX.c:394:10
   137dc:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## encode_frame_FIX.c:394:10
   137e0:    20 18             	r0 += r2			  ## encode_frame_FIX.c:393:10
   137e2:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:394:10
   137e4:    41 20             	r1 = 0x0
   137e6:    04 85             	goto 0xa <silk_find_LTP_FIX+0x44E : 137f2 >
   137e8:    b4 e0 90 21       	r2 = r9 + r1			  ## encode_frame_FIX.c:398:46
   137ec:    68 e8 00 20       	[r2+0x0] += r0			  ## encode_frame_FIX.c:398:44
   137f0:    c1 38             	r1 += 0x18			  ## encode_frame_FIX.c:396:3
   137f2:    81 f8 f9 f1       	if (r1 != 0x78) goto -0xe <silk_find_LTP_FIX+0x444 : 137e8 >
   137f6:    01 37             	r1 = [sp+92]			  ## encode_frame_FIX.c:400:9
   137f8:    68 e8 00 10       	[r1+0x0] += r0			  ## encode_frame_FIX.c:400:9
   137fc:    d0 ec 90 00       	r0 = [r9+0x0]			  ## solve_LS_FIX.c:140:32
   13800:    21 20             	r1 = [sp+128]			  ## solve_LS_FIX.c:140:32
   13802:    12 60             	r2 = [r1+0x0] 			  ## solve_LS_FIX.c:140:32
   13804:    21 1c             	r1 = r2 + r0			  ## solve_LS_FIX.c:140:32
   13806:    81 fd 06 00       	ifs (r1 < 0x0) goto 0xc <silk_find_LTP_FIX+0x472 : 13816 >			  ## solve_LS_FIX.c:140:32
   1380a:    82 19             	r2 &= r0			  ## solve_LS_FIX.c:140:32
   1380c:    60 e0 00 04       	r0 = 0x80000000			  ## solve_LS_FIX.c:140:32
   13810:    02 fd 07 00       	ifs (r2 >= 0x0) goto 0xe <silk_find_LTP_FIX+0x47E : 13822 >			  ## solve_LS_FIX.c:140:32
   13814:    04 87             	goto 0xe <silk_find_LTP_FIX+0x480 : 13824 >			  ## solve_LS_FIX.c:140:32
   13816:    02 19             	r2 |= r0			  ## solve_LS_FIX.c:140:32
   13818:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## solve_LS_FIX.c:140:32
   1381e:    72 fe 01 fe       	ifs (r2 > -0x1) goto 0x2 <silk_find_LTP_FIX+0x480 : 13824 >			  ## solve_LS_FIX.c:140:32
   13822:    10 16             	r0 = r1
   13824:    41 e0 e3 53       	r1 = 0x53e3 <cvsd_decode+0x5C : 53e2 >			  ## solve_LS_FIX.c:140:32
   13828:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## solve_LS_FIX.c:140:32
   1382c:    d0 e9 99 00       	d[sp+152] = r1_r0
   13830:    b1 ee 00 42       	ifs (r1 <= 0x200) {
   13834:    41 e0 00 02       		r1 = 0x200 <ROM_RAM_SIZE : 200 >			  ## SigProc_FIX.h:368:18
   13838:    d0 e9 99 00       		d[sp+152] = r1_r0
                               	}			  ## SigProc_FIX.h:368:18
   1383c:    40 21             	r0 = 0x1
   1383e:    44 20             	r4 = 0x0
   13840:    54 86             	goto 0x14c <silk_find_LTP_FIX+0x5EA : 1398e >
   13842:    a4 22             	[sp+136] = r4
   13844:    44 20             	r4 = 0x0
   13846:    20 2f             	r0 = [sp+188]
   13848:    34 87             	goto 0xce <silk_find_LTP_FIX+0x574 : 13918 >
   1384a:    21 2d             	r1 = [sp+180]			  ## solve_LS_FIX.c:161:14
   1384c:    d8 ec 1b 34       	[r1+r4<<2] = r3			  ## solve_LS_FIX.c:161:14
   13850:    d0 e9 a8 60       	r7_r6 = d[sp+168]			  ## solve_LS_FIX.c:161:14
   13854:    b6 16             	r6 = r11			  ## solve_LS_FIX.c:161:14
   13856:    d0 e9 a9 60       	d[sp+168] = r7_r6
   1385a:    f6 f1 60 73       	r7_r6 = r7_r6 / r3 (s)  #			  ## Inlines.h:138:20
   1385e:    22 24             		 r2 = [sp+144]			  ## solve_LS_FIX.c:170:24
   13860:    e9 bf             	r1 = r6 >>> 0x1f			  ## Inlines.h:140:5
   13862:    b4 e0 10 c6       	r12 = r1 + r6			  ## Inlines.h:140:5
   13866:    41 a3             	r1 = r4 << 0x3			  ## solve_LS_FIX.c:170:15
   13868:    dc ec 23 c1       	[++r2=r1] = r12			  ## solve_LS_FIX.c:170:24
   1386c:    c0 e1 c4 10       	r1 = r12 << 0x4			  ## solve_LS_FIX.c:165:23
   13870:    f8 e1 10 73       	r7_r6 = r1 * r3 (s)			  ## solve_LS_FIX.c:166:10
   13874:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## solve_LS_FIX.c:166:10
   13878:    a3 e0 80 67       	r3 = 0x1000000 - r6			  ## solve_LS_FIX.c:166:10
   1387c:    f8 e1 30 71       	r7_r6 = r3 * r1 (s)			  ## solve_LS_FIX.c:167:23
   13880:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## solve_LS_FIX.c:167:23
   13884:    60 f0 80 2b       	r2 = 0x10000  #			  ## solve_LS_FIX.c:173:33
   13888:    a6 61             		 [r2+0x4] = r6			  ## solve_LS_FIX.c:171:24
   1388a:    d0 f1 00 62       	r7_r6 <<= 0x20  #			  ## solve_LS_FIX.c:171:24
   1388e:    21 2f             		 r1 = [sp+188]
   13890:    d8 ec 1b 20       	[r1+r0<<2] = r2			  ## solve_LS_FIX.c:173:33
   13894:    d0 e1 00 6e       	r7_r6 >>>= 0x20			  ## solve_LS_FIX.c:173:33
   13898:    c0 e1 cf dd       	r13 = r12 >>> 0x1f			  ## solve_LS_FIX.c:173:33
   1389c:    c0 e1 82 00       	r0 = r8 << 0x2			  ## solve_LS_FIX.c:174:11
   138a0:    b4 e0 90 50       	r5 = r9 + r0			  ## solve_LS_FIX.c:174:11
   138a4:    4a 81             	r2 = r4 + 0x1			  ## solve_LS_FIX.c:126:16
   138a6:    e0 f1 14 20       	r0 = r2 * 0x14  #			  ## solve_LS_FIX.c:175:11
   138aa:    a2 29             		 [sp+164] = r2			  ## solve_LS_FIX.c:175:11
   138ac:    b4 e0 10 f0       	r15 = r1 + r0			  ## solve_LS_FIX.c:175:11
   138b0:    21 16             	r1 = r2
   138b2:    14 89             	goto 0x52 <silk_find_LTP_FIX+0x562 : 13906 >
   138b4:    c2 14             	r10 = 0
   138b6:    40 20             	r0 = 0x0
   138b8:    04 8e             	goto 0x1c <silk_find_LTP_FIX+0x532 : 138d6 >
   138ba:    d8 ec ea 20       	r2 = [r14+r0<<2]			  ## solve_LS_FIX.c:179:15
   138be:    d8 ec fa 30       	r3 = [r15+r0<<2]			  ## solve_LS_FIX.c:179:15
   138c2:    f8 e1 30 32       	r3_r2 = r3 * r2 (s)			  ## solve_LS_FIX.c:179:15
   138c6:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## solve_LS_FIX.c:179:15
   138ca:    b4 e0 20 8a       	r8 = r2 + r10			  ## solve_LS_FIX.c:179:15
   138ce:    b8 e0 30 9b       	r9 = r3 + r11 + c			  ## solve_LS_FIX.c:179:15
   138d2:    c0 21             	r0 += 0x1			  ## solve_LS_FIX.c:178:25
   138d4:    8a 16             	r10 = r8
   138d6:    80 e8 f0 41       	if (r4 != r0) goto -0x20 <silk_find_LTP_FIX+0x516 : 138ba >
   138da:    d8 ec 5a 01       	r0 = [r5+r1<<2]			  ## solve_LS_FIX.c:181:14
   138de:    b4 e0 02 0a       	r0 = r0 - r10			  ## solve_LS_FIX.c:181:14
   138e2:    f8 e1 00 3c       	r3_r2 = r0 * r12 (s)			  ## solve_LS_FIX.c:184:36
   138e6:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## solve_LS_FIX.c:184:36
   138ea:    aa a4             	r2 = r2 >>> 0x4			  ## solve_LS_FIX.c:184:36
   138ec:    f8 f1 00 96       	r9_r8 = r0 * r6 (s)  #			  ## solve_LS_FIX.c:184:36
   138f0:    23 2f             		 r3 = [sp+188]			  ## solve_LS_FIX.c:184:34
   138f2:    b4 e0 20 09       	r0 = r2 + r9			  ## solve_LS_FIX.c:184:36
   138f6:    e2 e1 05 10       	r2 = r1 * 0x5			  ## solve_LS_FIX.c:184:5
   138fa:    42 18             	r2 += r4			  ## solve_LS_FIX.c:184:5
   138fc:    d8 ec 3b 02       	[r3+r2<<2] = r0			  ## solve_LS_FIX.c:184:34
   13900:    c1 21             	r1 += 0x1			  ## solve_LS_FIX.c:176:28
   13902:    0f e1 14 f0       	r15 = r15 + 0x14			  ## solve_LS_FIX.c:188:10
   13906:    81 f8 d5 0b       	if (r1 != 0x5) goto -0x56 <silk_find_LTP_FIX+0x510 : 138b4 >
   1390a:    20 2c             	r0 = [sp+176]
   1390c:    c0 34             	r0 += 0x14			  ## solve_LS_FIX.c:126:16
   1390e:    24 29             	r4 = [sp+164]			  ## solve_LS_FIX.c:126:16
   13910:    d4 e9 a0 90       	r9 = [sp+160]			  ## solve_LS_FIX.c:126:16
   13914:    d4 e9 94 f0       	r15 = [sp+148]			  ## solve_LS_FIX.c:126:16
   13918:    04 fe 36 08       	ifs (r4 > 0x4) goto 0x6c <silk_find_LTP_FIX+0x5E4 : 13988 >			  ## solve_LS_FIX.c:143:3
   1391c:    e8 f1 05 40       	r8 = r4 * 0x5  #			  ## solve_LS_FIX.c:144:11
   13920:    a0 2c             		 [sp+176] = r0			  ## solve_LS_FIX.c:144:11
   13922:    46 20             	r6 = 0x0
   13924:    45 d6             	r5 = r4  #
   13926:    23 2d             		 r3 = [sp+180]
   13928:    04 93             	goto 0x26 <silk_find_LTP_FIX+0x5AC : 13950 >
   1392a:    b7 d6             	r7 = r11  #			  ## solve_LS_FIX.c:148:17
   1392c:    32 60             		 r2 = [r3+0x0] 			  ## solve_LS_FIX.c:147:17
   1392e:    01 60             	r1 = [r0+0x0] 			  ## solve_LS_FIX.c:147:17
   13930:    f8 e1 10 d2       	r13_r12 = r1 * r2 (s)			  ## solve_LS_FIX.c:147:17
   13934:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## solve_LS_FIX.c:147:17
   13938:    d7 ec 31 cc       	[r3+-0x40] = r12			  ## solve_LS_FIX.c:147:15
   1393c:    01 05             	r1 = [r0++=0x4] 			  ## solve_LS_FIX.c:148:17
   1393e:    f8 e1 c0 d1       	r13_r12 = r12 * r1 (s)			  ## solve_LS_FIX.c:148:17
   13942:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## solve_LS_FIX.c:148:17
   13946:    c6 18             	r6 += r12			  ## solve_LS_FIX.c:148:17
   13948:    b8 e0 70 7d       	r7 = r7 + r13 + c			  ## solve_LS_FIX.c:148:17
   1394c:    fd 3f             	r5 += -0x1			  ## solve_LS_FIX.c:146:4
   1394e:    c3 24             	r3 += 0x4			  ## solve_LS_FIX.c:146:4
   13950:    f5 4c             	if (r5 != 0) goto -0x28 <silk_find_LTP_FIX+0x586 : 1392a >
   13952:    e0 e1 06 40       	r0 = r4 * 0x6			  ## solve_LS_FIX.c:150:13
   13956:    d8 ec 9a 10       	r1 = [r9+r0<<2]			  ## solve_LS_FIX.c:150:13
   1395a:    93 1f             	r3 = r1 - r6			  ## solve_LS_FIX.c:150:13
   1395c:    d0 e9 98 60       	r7_r6 = d[sp+152]			  ## solve_LS_FIX.c:152:8
   13960:    07 ed 73 31       	ifs (r3 >= r7) goto -0x11a <silk_find_LTP_FIX+0x4A6 : 1384a >			  ## solve_LS_FIX.c:152:8
   13964:    24 22             	r4 = [sp+136]
   13966:    c4 21             	r4 += 0x1			  ## solve_LS_FIX.c:153:14
   13968:    d0 e9 98 00       	r1_r0 = d[sp+152]			  ## solve_LS_FIX.c:153:14
   1396c:    f0 e1 40 01       	r0 = r4 * r1			  ## solve_LS_FIX.c:153:14
   13970:    88 1e             	r0 = r0 - r3			  ## solve_LS_FIX.c:153:14
   13972:    41 20             	r1 = 0x0
   13974:    04 85             	goto 0xa <silk_find_LTP_FIX+0x5DC : 13980 >
   13976:    b4 e0 90 21       	r2 = r9 + r1			  ## solve_LS_FIX.c:156:33
   1397a:    68 e8 00 20       	[r2+0x0] += r0			  ## solve_LS_FIX.c:156:31
   1397e:    c1 38             	r1 += 0x18			  ## solve_LS_FIX.c:155:5
   13980:    81 f8 f9 f1       	if (r1 != 0x78) goto -0xe <silk_find_LTP_FIX+0x5D2 : 13976 >
   13984:    40 21             	r0 = 0x1
   13986:    04 83             	goto 0x6 <silk_find_LTP_FIX+0x5EA : 1398e >
   13988:    24 22             	r4 = [sp+136]
   1398a:    c4 21             	r4 += 0x1			  ## solve_LS_FIX.c:141:64
   1398c:    40 20             	r0 = 0x0			  ## solve_LS_FIX.c:141:64
   1398e:    04 fe 02 08       	ifs (r4 > 0x4) goto 0x4 <silk_find_LTP_FIX+0x5F2 : 13996 >
   13992:    50 e8 56 03       	if ((r0 & 0x1) != 0) goto -0x154 <silk_find_LTP_FIX+0x49E : 13842 >
   13996:    40 20             	r0 = 0x0
   13998:    21 2f             	r1 = [sp+188]
   1399a:    04 9c             	goto 0x38 <silk_find_LTP_FIX+0x630 : 139d4 >
   1399c:    42 20             	r2 = 0x0
   1399e:    13 16             	r3 = r1
   139a0:    44 20             	r4 = 0x0
   139a2:    04 8d             	goto 0x1a <silk_find_LTP_FIX+0x61A : 139be >
   139a4:    b5 d6             	r5 = r11  #			  ## solve_LS_FIX.c:231:13
   139a6:    26 2e             		 r6 = [sp+184]			  ## solve_LS_FIX.c:231:13
   139a8:    d8 ec 6a 62       	r6 = [r6+r2<<2]			  ## solve_LS_FIX.c:231:13
   139ac:    37 05             	r7 = [r3++=0x4] 			  ## solve_LS_FIX.c:231:13
   139ae:    f8 e1 60 77       	r7_r6 = r6 * r7 (s)			  ## solve_LS_FIX.c:231:13
   139b2:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## solve_LS_FIX.c:231:13
   139b6:    64 18             	r4 += r6			  ## solve_LS_FIX.c:231:13
   139b8:    b8 e0 50 57       	r5 = r5 + r7 + c			  ## solve_LS_FIX.c:231:13
   139bc:    c2 21             	r2 += 0x1			  ## solve_LS_FIX.c:230:23
   139be:    82 e8 f1 01       	if (r0 != r2) goto -0x1e <silk_find_LTP_FIX+0x600 : 139a4 >
   139c2:    22 21             	r2 = [sp+132]			  ## solve_LS_FIX.c:233:16
   139c4:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## solve_LS_FIX.c:233:16
   139c8:    22 df             	r2 = r2 - r4  #			  ## solve_LS_FIX.c:233:16
   139ca:    23 2e             		 r3 = [sp+184]			  ## solve_LS_FIX.c:233:14
   139cc:    d8 ec 3b 20       	[r3+r0<<2] = r2			  ## solve_LS_FIX.c:233:14
   139d0:    c1 34             	r1 += 0x14			  ## solve_LS_FIX.c:227:2
   139d2:    c0 21             	r0 += 0x1			  ## solve_LS_FIX.c:227:2
   139d4:    80 f8 e2 0b       	if (r0 != 0x5) goto -0x3c <silk_find_LTP_FIX+0x5F8 : 1399c >			  ## solve_LS_FIX.c:227:2
   139d8:    40 20             	r0 = 0x0
   139da:    d4 e9 24 80       	r8 = [sp+36]
   139de:    04 92             	goto 0x24 <silk_find_LTP_FIX+0x660 : 13a04 >
   139e0:    21 2e             	r1 = [sp+184]
   139e2:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## solve_LS_FIX.c:211:12
   139e6:    d7 ec 8c 3f       	r3 = [r8+-0x4]			  ## solve_LS_FIX.c:211:12
   139ea:    d8 ec 88 40       	r4 = [r8++=0x8]			  ## solve_LS_FIX.c:211:12
   139ee:    f8 e1 20 73       	r7_r6 = r2 * r3 (s)			  ## solve_LS_FIX.c:211:12
   139f2:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## solve_LS_FIX.c:211:12
   139f6:    eb a4             	r3 = r6 >>> 0x4			  ## solve_LS_FIX.c:211:12
   139f8:    f8 e1 20 54       	r5_r4 = r2 * r4 (s)			  ## solve_LS_FIX.c:211:12
   139fc:    3a 1d             	r2 = r3 + r5			  ## solve_LS_FIX.c:211:12
   139fe:    d8 ec 1b 20       	[r1+r0<<2] = r2			  ## solve_LS_FIX.c:211:10
   13a02:    c0 21             	r0 += 0x1			  ## solve_LS_FIX.c:206:22
   13a04:    80 f8 ec 0b       	if (r0 != 0x5) goto -0x28 <silk_find_LTP_FIX+0x63C : 139e0 >			  ## solve_LS_FIX.c:206:2
   13a08:    40 24             	r0 = 0x4
   13a0a:    41 e0 b4 0d       	r1 = 0xdb4 <usb_code_size+0x2F0 : db4 >
   13a0e:    14 80             	goto 0x40 <silk_find_LTP_FIX+0x6AC : 13a50 >
   13a10:    42 20             	r2 = 0x0
   13a12:    44 e0 90 0d       	r4 = 0xd90 <usb_code_size+0x2CC : d90 >
   13a16:    15 16             	r5 = r1
   13a18:    04 8e             	goto 0x1c <silk_find_LTP_FIX+0x692 : 13a36 >
   13a1a:    d8 ec fa 65       	r6 = [r15+r5<<2]			  ## solve_LS_FIX.c:253:13
   13a1e:    d8 ec fa 74       	r7 = [r15+r4<<2]			  ## solve_LS_FIX.c:253:13
   13a22:    f8 e1 70 76       	r7_r6 = r7 * r6 (s)			  ## solve_LS_FIX.c:253:13
   13a26:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## solve_LS_FIX.c:253:13
   13a2a:    b3 16             	r3 = r11			  ## solve_LS_FIX.c:253:13
   13a2c:    62 18             	r2 += r6			  ## solve_LS_FIX.c:253:13
   13a2e:    b8 e0 30 37       	r3 = r3 + r7 + c			  ## solve_LS_FIX.c:253:13
   13a32:    fd 3b             	r5 += -0x5			  ## solve_LS_FIX.c:252:3
   13a34:    fc 3f             	r4 += -0x1			  ## solve_LS_FIX.c:252:3
   13a36:    36 e1 74 42       	r6 = r4 + -0xd8c			  ## solve_LS_FIX.c:252:21
   13a3a:    00 ee ee 61       	ifs (r6 > r0) goto -0x24 <silk_find_LTP_FIX+0x676 : 13a1a >			  ## solve_LS_FIX.c:252:21
   13a3e:    24 2e             	r4 = [sp+184]			  ## solve_LS_FIX.c:255:16
   13a40:    d8 ec 4a 40       	r4 = [r4+r0<<2]			  ## solve_LS_FIX.c:255:16
   13a44:    c2 de             	r2 = r4 - r2  #			  ## solve_LS_FIX.c:255:16
   13a46:    23 23             		 r3 = [sp+140]			  ## solve_LS_FIX.c:255:14
   13a48:    d8 ec 3b 20       	[r3+r0<<2] = r2			  ## solve_LS_FIX.c:255:14
   13a4c:    f9 3f             	r1 += -0x1			  ## solve_LS_FIX.c:249:2
   13a4e:    f8 3f             	r0 += -0x1			  ## solve_LS_FIX.c:249:27
   13a50:    70 fe de ff       	ifs (r0 > -0x1) goto -0x44 <silk_find_LTP_FIX+0x66C : 13a10 >			  ## solve_LS_FIX.c:249:2
   13a54:    40 20             	r0 = 0x0
   13a56:    04 32             	r4 = [sp+72]
   13a58:    04 8a             	goto 0x14 <silk_find_LTP_FIX+0x6CA : 13a6e >
   13a5a:    21 23             	r1 = [sp+140]			  ## encode_frame_FIX.c:408:10
   13a5c:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## encode_frame_FIX.c:408:10
   13a60:    c1 22             	r1 += 0x2			  ## encode_frame_FIX.c:408:10
   13a62:    99 a2             	r1 = r1 >>> 0x2			  ## encode_frame_FIX.c:408:10
   13a64:    78 e0 01 21       	r2 = sat16(r1) (s)			  ## encode_frame_FIX.c:409:4
   13a68:    d8 ed 49 20       	h[r4+r0<<1] = r2			  ## encode_frame_FIX.c:410:17
   13a6c:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:405:26
   13a6e:    80 f8 f4 0b       	if (r0 != 0x5) goto -0x18 <silk_find_LTP_FIX+0x6B6 : 13a5a >
   13a72:    00 37             	r0 = [sp+92]			  ## encode_frame_FIX.c:416:73
   13a74:    00 60             	r0 = [r0+0x0] 			  ## encode_frame_FIX.c:416:73
   13a76:    80 d4             	r1_r0 = 0  #
   13a78:    a0 2c             		 [sp+176] = r0
   13a7a:    04 87             	goto 0xe <silk_find_LTP_FIX+0x6E6 : 13a8a >
   13a7c:    d8 ed 4a 20       	r2 = h[r4+r0<<1] (s)			  ## encode_frame_FIX.c:59:31
   13a80:    30 e4 00 22       	r2 = abs(r2)			  ## encode_frame_FIX.c:59:31
   13a84:    34 e4 11 12       	r1 = smax(r1, r2)			  ## SigProc_FIX.h:368:13
   13a88:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:58:22
   13a8a:    80 f8 f7 0b       	if (r0 != 0x5) goto -0x12 <silk_find_LTP_FIX+0x6D8 : 13a7c >
   13a8e:    01 44             	if (r1 == 0) goto 0x8 <silk_find_LTP_FIX+0x6F4 : 13a98 >
   13a90:    80 e1 00 01       	r0 = clz(r1)			  ## entenc.c:124:2
   13a94:    f8 2f             	r0 += -0x11			  ## macros.h:143:12
   13a96:    04 81             	goto 0x2 <silk_find_LTP_FIX+0x6F6 : 13a9a >
   13a98:    40 2f             	r0 = 0xf
   13a9a:    22 20             	r2 = [sp+128]			  ## encode_frame_FIX.c:63:33
   13a9c:    22 60             	r2 = [r2+0x0] 			  ## encode_frame_FIX.c:63:33
   13a9e:    d0 ec 90 30       	r3 = [r9+0x0]			  ## encode_frame_FIX.c:63:23
   13aa2:    34 e4 31 22       	r2 = smax(r3, r2)			  ## SigProc_FIX.h:368:13
   13aa6:    f8 e1 20 31       	r3_r2 = r2 * r1 (s)			  ## encode_frame_FIX.c:64:43
   13aaa:    d0 e1 04 29       	r3_r2 >>= 0x14			  ## encode_frame_FIX.c:64:43
   13aae:    30 ed 02 00       	ifs (r0 >= 0x2) {			  ## encode_frame_FIX.c:64:43
   13ab2:    40 22             		r0 = 0x2
                               	}			  ## SigProc_FIX.h:350:13
   13ab4:    26 21             	r6 = [sp+132]
   13ab6:    02 46             	if (r2 == 0) goto 0xc <silk_find_LTP_FIX+0x720 : 13ac4 >
   13ab8:    e1 e1 05 20       	r1 = r2 * 0x5			  ## encode_frame_FIX.c:64:43
   13abc:    80 e1 00 11       	r1 = clz(r1)			  ## entenc.c:124:2
   13ac0:    f9 3b             	r1 += -0x5			  ## macros.h:143:12
   13ac2:    04 81             	goto 0x2 <silk_find_LTP_FIX+0x722 : 13ac6 >
   13ac4:    41 3b             	r1 = 0x1b
   13ac6:    35 e4 01 21       	r2 = smin(r0, r1)			  ## SigProc_FIX.h:350:13
   13aca:    40 20             	r0 = 0x0
   13acc:    b2 ee 00 00       	ifs (r2 <= 0x0) {
   13ad0:    42 20             		r2 = 0x0
                               	}			  ## SigProc_FIX.h:360:13
   13ad2:    04 88             	goto 0x10 <silk_find_LTP_FIX+0x740 : 13ae4 >
   13ad4:    d8 ed 4a 10       	r1 = h[r4+r0<<1] (s)			  ## encode_frame_FIX.c:67:13
   13ad8:    21 1a             	r1 <<= r2			  ## encode_frame_FIX.c:67:13
   13ada:    f8 e8 cc 30       	r3 = sp + 204			  ## encode_frame_FIX.c:67:13
   13ade:    d8 ec 3b 10       	[r3+r0<<2] = r1			  ## encode_frame_FIX.c:67:11
   13ae2:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:66:22
   13ae4:    80 f8 f6 0b       	if (r0 != 0x5) goto -0x14 <silk_find_LTP_FIX+0x730 : 13ad4 >			  ## encode_frame_FIX.c:66:2
   13ae8:    c7 14             	r15 = 0
   13aea:    40 20             	r0 = 0x0
   13aec:    04 8c             	goto 0x18 <silk_find_LTP_FIX+0x762 : 13b06 >
   13aee:    d8 ec 6a 10       	r1 = [r6+r0<<2]			  ## encode_frame_FIX.c:75:9
   13af2:    f8 e8 cc 30       	r3 = sp + 204			  ## encode_frame_FIX.c:75:9
   13af6:    d8 ec 3a 30       	r3 = [r3+r0<<2]			  ## encode_frame_FIX.c:75:9
   13afa:    f8 e1 30 51       	r5_r4 = r3 * r1 (s)			  ## encode_frame_FIX.c:75:9
   13afe:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## encode_frame_FIX.c:75:9
   13b02:    4f 18             	r15 += r4			  ## encode_frame_FIX.c:75:9
   13b04:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:74:22
   13b06:    80 f8 f2 0b       	if (r0 != 0x5) goto -0x1c <silk_find_LTP_FIX+0x74A : 13aee >
   13b0a:    a0 e0 03 20       	r0 = 0x3 - r2			  ## encode_frame_FIX.c:77:8
   13b0e:    a0 f0 02 20       	r0 = 0x2 - r2  #			  ## encode_frame_FIX.c:70:10
   13b12:    a0 26             		 [sp+152] = r0			  ## encode_frame_FIX.c:70:10
   13b14:    c1 d4             	r9 = 0  #
   13b16:    a0 29             		 [sp+164] = r0
   13b18:    03 35             	r3 = [sp+84]
   13b1a:    45 20             	r5 = 0x0
   13b1c:    14 8a             	goto 0x54 <silk_find_LTP_FIX+0x7CE : 13b72 >
   13b1e:    e0 f1 14 50       	r0 = r5 * 0x14  #			  ## encode_frame_FIX.c:83:11
   13b22:    21 28             		 r1 = [sp+160]			  ## encode_frame_FIX.c:83:11
   13b24:    12 1c             	r2 = r1 + r0			  ## encode_frame_FIX.c:83:11
   13b26:    59 81             	r1 = r5 + 0x1			  ## encode_frame_FIX.c:84:14
   13b28:    47 20             	r7 = 0x0
   13b2a:    36 16             	r6 = r3
   13b2c:    10 16             	r0 = r1
   13b2e:    04 8c             	goto 0x18 <silk_find_LTP_FIX+0x7A4 : 13b48 >
   13b30:    f8 e8 cc 40       	r4 = sp + 204
   13b34:    d8 ec 4a 40       	r4 = [r4+r0<<2]			  ## encode_frame_FIX.c:85:10
   13b38:    d8 ec 64 80       	r8 = [r6++=0x4]			  ## encode_frame_FIX.c:85:10
   13b3c:    f8 e1 40 d8       	r13_r12 = r4 * r8 (s)			  ## encode_frame_FIX.c:85:10
   13b40:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## encode_frame_FIX.c:85:10
   13b44:    c7 18             	r7 += r12			  ## encode_frame_FIX.c:85:10
   13b46:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:84:27
   13b48:    80 f8 f2 0b       	if (r0 != 0x5) goto -0x1c <silk_find_LTP_FIX+0x78C : 13b30 >
   13b4c:    f8 e8 cc 00       	r0 = sp + 204
   13b50:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## encode_frame_FIX.c:87:10
   13b54:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## encode_frame_FIX.c:87:10
   13b58:    aa a1             	r2 = r2 >>> 0x1			  ## encode_frame_FIX.c:87:10
   13b5a:    f8 e1 20 50       	r5_r4 = r2 * r0 (s)			  ## encode_frame_FIX.c:87:10
   13b5e:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## encode_frame_FIX.c:87:10
   13b62:    ca 1d             	r2 = r4 + r7			  ## encode_frame_FIX.c:87:10
   13b64:    f8 e1 20 50       	r5_r4 = r2 * r0 (s)			  ## encode_frame_FIX.c:88:10
   13b68:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## encode_frame_FIX.c:88:10
   13b6c:    49 18             	r9 += r4			  ## encode_frame_FIX.c:88:10
   13b6e:    c3 38             	r3 += 0x18			  ## encode_frame_FIX.c:81:2
   13b70:    15 16             	r5 = r1			  ## encode_frame_FIX.c:81:2
   13b72:    85 f8 d4 0b       	if (r5 != 0x5) goto -0x58 <silk_find_LTP_FIX+0x77A : 13b1e >
   13b76:    22 29             	r2 = [sp+164]
   13b78:    c8 f1 90 02       	r0 = r9 << r2  #			  ## encode_frame_FIX.c:90:8
   13b7c:    21 2c             		 r1 = [sp+176]			  ## encode_frame_FIX.c:77:8
   13b7e:    23 26             	r3 = [sp+152]			  ## encode_frame_FIX.c:77:8
   13b80:    b9 1a             	r1 >>>= r3			  ## encode_frame_FIX.c:77:8
   13b82:    b4 e0 12 1f       	r1 = r1 - r15			  ## encode_frame_FIX.c:77:40
   13b86:    10 18             	r0 += r1			  ## encode_frame_FIX.c:90:8
   13b88:    80 fd 12 02       	ifs (r0 < 0x1) goto 0x24 <silk_find_LTP_FIX+0x80C : 13bb0 >
   13b8c:    c8 e1 00 13       	r1 = r0 << r3			  ## encode_frame_FIX.c:98:9
   13b90:    c2 22             	r2 += 0x2			  ## encode_frame_FIX.c:95:19
   13b92:    c3 ff ff ff ff 7f 	r3 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## encode_frame_FIX.c:95:19
   13b98:    a3 1a             	r3 >>= r2			  ## encode_frame_FIX.c:95:19
   13b9a:    c2 ff ff ff ff 3f 	r2 = 0x3fffffff <RAM_LIMIT_H+0x3FE5FFFE : 3ffffffe >			  ## encode_frame_FIX.c:95:13
   13ba0:    d4 e9 70 f0       	r15 = [sp+112]			  ## encode_frame_FIX.c:95:13
   13ba4:    d4 e9 84 d0       	r13 = [sp+132]			  ## encode_frame_FIX.c:95:13
   13ba8:    90 ee 00 03       	ifs (r0 <= r3) {			  ## encode_frame_FIX.c:95:13
   13bac:    12 16             		r2 = r1
                               	}			  ## encode_frame_FIX.c:95:13
   13bae:    04 85             	goto 0xa <silk_find_LTP_FIX+0x816 : 13bba >			  ## encode_frame_FIX.c:95:13
   13bb0:    42 21             	r2 = 0x1
   13bb2:    d4 e9 70 f0       	r15 = [sp+112]
   13bb6:    d4 e9 84 d0       	r13 = [sp+132]
   13bba:    00 30             	r0 = [sp+64]			  ## encode_frame_FIX.c:416:12
   13bbc:    01 38             	r1 = [sp+96]			  ## encode_frame_FIX.c:416:12
   13bbe:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## encode_frame_FIX.c:416:12
   13bc2:    00 2c             	r0 = [sp+48]			  ## encode_frame_FIX.c:416:12
   13bc4:    d8 ec 0a 81       	r8 = [r0+r1<<2]			  ## encode_frame_FIX.c:416:12
   13bc8:    f8 f1 80 52       	r5_r4 = r8 * r2 (s)  #			  ## encode_frame_FIX.c:416:12
   13bcc:    00 39             		 r0 = [sp+100]			  ## encode_frame_FIX.c:419:32
   13bce:    d8 ec 0a 11       	r1 = [r0+r1<<2]			  ## encode_frame_FIX.c:419:32
   13bd2:    d0 e1 00 49       	r5_r4 >>= 0x10
   13bd6:    12 16             	r2 = r1			  ## SigProc_FIX.h:350:13
   13bd8:    31 ed 02 00       	ifs (r1 >= 0x2) {
   13bdc:    42 22             		r2 = 0x2
                               	}
   13bde:    2b 81             	r3 = r2 + 0x1			  ## encode_frame_FIX.c:420:13
   13be0:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## encode_frame_FIX.c:420:13
   13be6:    c8 e1 02 73       	r7 = r0 >> r3			  ## encode_frame_FIX.c:420:13
   13bea:    60 e0 00 04       	r0 = 0x80000000			  ## encode_frame_FIX.c:420:13
   13bee:    c8 e1 03 63       	r6 = r0 >>> r3			  ## encode_frame_FIX.c:420:13
   13bf2:    87 ee 06 60       	ifs (r6 <= r7) goto 0xc <silk_find_LTP_FIX+0x85E : 13c02 >			  ## encode_frame_FIX.c:420:13
   13bf6:    60 16             	r0 = r6			  ## encode_frame_FIX.c:420:13
   13bf8:    94 ee 00 06       	ifs (r4 <= r6) {			  ## encode_frame_FIX.c:420:13
   13bfc:    34 e4 41 07       		r0 = smax(r4, r7)
                               	}			  ## encode_frame_FIX.c:420:13
   13c00:    04 85             	goto 0xa <silk_find_LTP_FIX+0x868 : 13c0c >			  ## encode_frame_FIX.c:420:13
   13c02:    70 16             	r0 = r7			  ## encode_frame_FIX.c:420:13
   13c04:    94 ee 00 07       	ifs (r4 <= r7) {			  ## encode_frame_FIX.c:420:13
   13c08:    34 e4 41 06       		r0 = smax(r4, r6)
                               	}			  ## encode_frame_FIX.c:420:13
   13c0c:    30 da             	r0 <<= r3  #			  ## encode_frame_FIX.c:420:13
   13c0e:    06 26             		 r6 = [sp+24]			  ## encode_frame_FIX.c:420:13
   13c10:    93 de             	r3 = r1 - r2  #			  ## encode_frame_FIX.c:421:4
   13c12:    07 2d             		 r7 = [sp+52]			  ## encode_frame_FIX.c:421:4
   13c14:    d0 e9 28 40       	r5_r4 = d[sp+40]			  ## encode_frame_FIX.c:421:4
   13c18:    c8 e1 43 33       	r3 = r4 >>> r3			  ## encode_frame_FIX.c:421:4
   13c1c:    03 18             	r3 += r0			  ## encode_frame_FIX.c:420:91
   13c1e:    a4 e0 05 20       	r4 = 0x5 - r2			  ## encode_frame_FIX.c:425:12
   13c22:    42 20             	r2 = 0x0
   13c24:    45 20             	r5 = 0x0
   13c26:    04 86             	goto 0xc <silk_find_LTP_FIX+0x890 : 13c34 >
   13c28:    20 28             	r0 = [sp+160]			  ## encode_frame_FIX.c:430:15
   13c2a:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## encode_frame_FIX.c:430:15
   13c2e:    34 e4 01 22       	r2 = smax(r0, r2)			  ## encode_frame_FIX.c:430:15
   13c32:    c5 21             	r5 += 0x1			  ## encode_frame_FIX.c:429:43
   13c34:    85 f8 f8 33       	if (r5 != 0x19) goto -0x10 <silk_find_LTP_FIX+0x884 : 13c28 >
   13c38:    48 1c             	r0 = r4 + r1			  ## encode_frame_FIX.c:425:12
   13c3a:    b3 ee 01 00       	ifs (r3 <= 0x1) {			  ## encode_frame_FIX.c:425:12
   13c3e:    43 21             		r3 = 0x1
                               	}			  ## encode_frame_FIX.c:422:13
   13c40:    c0 e1 80 11       	r1 = r8 << 0x10			  ## encode_frame_FIX.c:424:12
   13c44:    f4 e1 11 13       	r1 = r1 / r3 (s)			  ## encode_frame_FIX.c:424:12
   13c48:    c8 e1 13 00       	r0 = r1 >>> r0			  ## encode_frame_FIX.c:425:12
   13c4c:    02 4a             	if (r2 == 0) goto 0x14 <silk_find_LTP_FIX+0x8BE : 13c62 >
   13c4e:    80 e1 00 12       	r1 = clz(r2)			  ## entenc.c:124:2
   13c52:    c1 24             	r1 += 0x4			  ## encode_frame_FIX.c:434:15
   13c54:    b1 ee 1e 80       	ifs (r1 <= 0x1e) {
   13c58:    42 21             		r2 = 0x1			  ## encode_frame_FIX.c:435:34
   13c5a:    c8 e1 20 11       		r1 = r2 << r1			  ## encode_frame_FIX.c:435:34
   13c5e:    35 e4 01 01       		r0 = smin(r0, r1)
                               	}			  ## SigProc_FIX.h:354:13
   13c62:    41 39             	r1 = 0x19			  ## encode_frame_FIX.c:174:2
   13c64:    23 28             	r3 = [sp+160]			  ## encode_frame_FIX.c:174:2
   13c66:    32 16             	r2 = r3			  ## encode_frame_FIX.c:174:2
   13c68:    41 03             	rep 0xa r1 {			  ## encode_frame_FIX.c:174:2
   13c6a:    e0 ee 20 50       		r5_r4 = [r2 ++= 0x0]*r0 (s)			  ## encode_frame_FIX.c:174:2
   13c6e:    d0 e1 08 4c       		r5_r4 >>>= 0x8			  ## encode_frame_FIX.c:174:2
   13c72:    a4 05             		[r2++=0x4] = r4
                               	}			  ## encode_frame_FIX.c:174:2
   13c74:    30 6c             	r0 = [r3+0x30] 			  ## encode_frame_FIX.c:440:12
   13c76:    01 2e             	r1 = [sp+56]			  ## encode_frame_FIX.c:440:10
   13c78:    02 38             	r2 = [sp+96]			  ## encode_frame_FIX.c:440:10
   13c7a:    d8 ec 1b 02       	[r1+r2<<2] = r0			  ## encode_frame_FIX.c:440:10
   13c7e:    21 d6             	r1 = r2  #			  ## encode_frame_FIX.c:440:10
   13c80:    00 31             		 r0 = [sp+68]			  ## encode_frame_FIX.c:370:2
   13c82:    60 18             	r0 += r6			  ## encode_frame_FIX.c:370:2
   13c84:    80 31             	[sp+68] = r0			  ## encode_frame_FIX.c:370:2
   13c86:    00 3d             	r0 = [sp+116]			  ## encode_frame_FIX.c:370:2
   13c88:    60 18             	r0 += r6			  ## encode_frame_FIX.c:370:2
   13c8a:    80 3d             	[sp+116] = r0			  ## encode_frame_FIX.c:370:2
   13c8c:    00 36             	r0 = [sp+88]			  ## encode_frame_FIX.c:370:2
   13c8e:    60 18             	r0 += r6			  ## encode_frame_FIX.c:370:2
   13c90:    67 d8             	r7 += r6  #			  ## encode_frame_FIX.c:370:2
   13c92:    80 36             		 [sp+88] = r0			  ## encode_frame_FIX.c:370:2
   13c94:    00 3e             	r0 = [sp+120]			  ## encode_frame_FIX.c:370:2
   13c96:    60 18             	r0 += r6			  ## encode_frame_FIX.c:370:2
   13c98:    80 3e             	[sp+120] = r0			  ## encode_frame_FIX.c:370:2
   13c9a:    00 35             	r0 = [sp+84]			  ## encode_frame_FIX.c:370:2
   13c9c:    d8 24             	r0 += 0x64			  ## encode_frame_FIX.c:370:2
   13c9e:    80 35             	[sp+84] = r0			  ## encode_frame_FIX.c:370:2
   13ca0:    00 34             	r0 = [sp+80]			  ## encode_frame_FIX.c:370:2
   13ca2:    d8 24             	r0 += 0x64			  ## encode_frame_FIX.c:370:2
   13ca4:    80 34             	[sp+80] = r0			  ## encode_frame_FIX.c:370:2
   13ca6:    00 33             	r0 = [sp+76]			  ## encode_frame_FIX.c:370:2
   13ca8:    d8 24             	r0 += 0x64			  ## encode_frame_FIX.c:370:2
   13caa:    80 33             	[sp+76] = r0			  ## encode_frame_FIX.c:370:29
   13cac:    c1 21             	r1 += 0x1			  ## encode_frame_FIX.c:370:29
   13cae:    db 24             	r3 += 0x64			  ## encode_frame_FIX.c:445:13
   13cb0:    a3 28             	[sp+160] = r3
   13cb2:    00 32             	r0 = [sp+72]			  ## encode_frame_FIX.c:444:13
   13cb4:    c0 2a             	r0 += 0xa			  ## encode_frame_FIX.c:444:13
   13cb6:    80 32             	[sp+72] = r0			  ## encode_frame_FIX.c:370:2
   13cb8:    00 2f             	r0 = [sp+60]			  ## encode_frame_FIX.c:370:2
   13cba:    4b ff 00 10 d9 fb 	ifs (r1 < r0) goto -0x84e <silk_find_LTP_FIX+0xCE : 13472 >			  ## encode_frame_FIX.c:370:2
   13cc0:    c0 d4             	r8 = 0  #
   13cc2:    00 2e             		 r0 = [sp+56]			  ## encode_frame_FIX.c:360:26
   13cc4:    0c 90             	r4 = r0 + 0x10			  ## encode_frame_FIX.c:360:26
   13cc6:    40 20             	r0 = 0x0			  ## encode_frame_FIX.c:360:26
   13cc8:    d4 e9 3c e0       	r14 = [sp+60]			  ## encode_frame_FIX.c:360:26
   13ccc:    04 86             	goto 0xc <silk_find_LTP_FIX+0x936 : 13cda >			  ## encode_frame_FIX.c:360:26
   13cce:    01 39             	r1 = [sp+100]			  ## encode_frame_FIX.c:450:30
   13cd0:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## encode_frame_FIX.c:450:30
   13cd4:    34 e4 11 88       	r8 = smax(r1, r8)			  ## SigProc_FIX.h:360:13
   13cd8:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:449:29
   13cda:    8e ed f8 01       	ifs (r0 < r14) goto -0x10 <silk_find_LTP_FIX+0x92A : 13cce >
   13cde:    00 21             	r0 = [sp+4]			  ## encode_frame_FIX.c:454:6
   13ce0:    10 58             	if (r0 == 0) goto 0x70 <silk_find_LTP_FIX+0x9AE : 13d52 >
   13ce2:    40 20             	r0 = 0x0
   13ce4:    42 20             	r2 = 0x0
   13ce6:    c4 14             	r12 = 0
   13ce8:    14 80             	goto 0x40 <silk_find_LTP_FIX+0x986 : 13d2a >
   13cea:    03 2c             	r3 = [sp+48]			  ## encode_frame_FIX.c:459:22
   13cec:    d8 ec 3a 9c       	r9 = [r3+r12<<2]			  ## encode_frame_FIX.c:459:22
   13cf0:    03 30             	r3 = [sp+64]			  ## encode_frame_FIX.c:459:22
   13cf2:    36 60             	r6 = [r3+0x0] 			  ## encode_frame_FIX.c:460:22
   13cf4:    f8 f1 60 b9       	r11_r10 = r6 * r9 (s)  #			  ## encode_frame_FIX.c:460:22
   13cf8:    05 39             		 r5 = [sp+100]			  ## encode_frame_FIX.c:459:22
   13cfa:    d8 ec 5a 7c       	r7 = [r5+r12<<2]			  ## encode_frame_FIX.c:459:22
   13cfe:    d0 f1 00 a9       	r11_r10 >>= 0x10  #			  ## encode_frame_FIX.c:460:22
   13d02:    35 64             		 r5 = [r3+0x10] 			  ## encode_frame_FIX.c:459:22
   13d04:    06 e1 01 a0       	r6 = r10 + 0x1			  ## encode_frame_FIX.c:460:22
   13d08:    b4 e0 82 77       	r7 = r8 - r7			  ## encode_frame_FIX.c:459:22
   13d0c:    c7 21             	r7 += 0x1			  ## encode_frame_FIX.c:459:22
   13d0e:    fe 1a             	r6 >>>= r7			  ## encode_frame_FIX.c:460:22
   13d10:    62 18             	r2 += r6			  ## encode_frame_FIX.c:460:22
   13d12:    f8 e1 90 b5       	r11_r10 = r9 * r5 (s)			  ## encode_frame_FIX.c:459:22
   13d16:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## encode_frame_FIX.c:459:22
   13d1a:    05 e1 01 a0       	r5 = r10 + 0x1			  ## encode_frame_FIX.c:459:22
   13d1e:    fd 1a             	r5 >>>= r7			  ## encode_frame_FIX.c:459:22
   13d20:    50 18             	r0 += r5			  ## encode_frame_FIX.c:459:22
   13d22:    c3 24             	r3 += 0x4			  ## encode_frame_FIX.c:458:3
   13d24:    0c f1 01 c0       	r12 = r12 + 0x1  #			  ## encode_frame_FIX.c:458:30
   13d28:    83 30             		 [sp+64] = r3
   13d2a:    8e ed de c1       	ifs (r12 < r14) goto -0x44 <silk_find_LTP_FIX+0x946 : 13cea >
   13d2e:    b2 ee 01 00       	ifs (r2 <= 0x1) {
   13d32:    42 21             		r2 = 0x1
                               	}
   13d34:    89 bf             	r1 = r0 >>> 0x1f			  ## Inlines.h:119:20
   13d36:    d0 e1 00 01       	r1_r0 <<= 0x10			  ## Inlines.h:119:35
   13d3a:    43 20             	r3 = 0x0			  ## Inlines.h:122:20
   13d3c:    80 ff 6a 3c 00 00 	call 0x3c6a <__divdi3 : 179ac >			  ## Inlines.h:122:20
   13d42:    bf ea ef eb       	call -0x2822 <silk_lin2log : 11524 >			  ## encode_frame_FIX.c:465:35
   13d46:    e0 f1 03 00       	r0 = r0 * 0x3  #			  ## encode_frame_FIX.c:465:35
   13d4a:    01 21             		 r1 = [sp+4]			  ## encode_frame_FIX.c:465:21
   13d4c:    20 e1 00 08       	r0 = r0 + -0x1800			  ## encode_frame_FIX.c:465:35
   13d50:    90 60             	[r1+0x0] = r0			  ## encode_frame_FIX.c:465:21
   13d52:    40 20             	r0 = 0x0
   13d54:    01 22             	r1 = [sp+8]
   13d56:    04 8e             	goto 0x1c <silk_find_LTP_FIX+0x9D0 : 13d74 >
   13d58:    82 14             	r3_r2 = 0
   13d5a:    d8 ec 4b 20       	[r4+r0<<2] = r2			  ## encode_frame_FIX.c:474:14
   13d5e:    04 86             	goto 0xc <silk_find_LTP_FIX+0x9C8 : 13d6c >			  ## encode_frame_FIX.c:474:14
   13d60:    d8 ed 1a 53       	r5 = h[r1+r3<<1] (s)			  ## encode_frame_FIX.c:476:18
   13d64:    52 18             	r2 += r5			  ## encode_frame_FIX.c:476:15
   13d66:    d8 ec 4b 20       	[r4+r0<<2] = r2			  ## encode_frame_FIX.c:476:15
   13d6a:    c3 21             	r3 += 0x1			  ## encode_frame_FIX.c:475:31
   13d6c:    83 f8 f8 0b       	if (r3 != 0x5) goto -0x10 <silk_find_LTP_FIX+0x9BC : 13d60 >
   13d70:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:473:29
   13d72:    c1 2a             	r1 += 0xa			  ## encode_frame_FIX.c:478:13
   13d74:    8e ed f0 01       	ifs (r0 < r14) goto -0x20 <silk_find_LTP_FIX+0x9B4 : 13d58 >			  ## encode_frame_FIX.c:473:2
   13d78:    a9 f0 20 80       	r9 = 0x20 - r8  #
   13d7c:    03 2e             		 r3 = [sp+56]
   13d7e:    c2 d4             	r10 = 0  #
   13d80:    06 39             		 r6 = [sp+100]
   13d82:    42 20             	r2 = 0x0
   13d84:    47 20             	r7 = 0x0
   13d86:    04 92             	goto 0x24 <silk_find_LTP_FIX+0xA08 : 13dac >
   13d88:    35 64             	r5 = [r3+0x10] 			  ## encode_frame_FIX.c:487:47
   13d8a:    30 f4 00 55       	r5 = abs(r5)  #			  ## encode_frame_FIX.c:487:47
   13d8e:    31 05             		 r1 = [r3++=0x4] 			  ## encode_frame_FIX.c:490:58
   13d90:    01 43             	if (r1 == 0) goto 0x6 <silk_find_LTP_FIX+0x9F4 : 13d98 >
   13d92:    80 e1 00 11       	r1 = clz(r1)			  ## entenc.c:124:2
   13d96:    04 81             	goto 0x2 <silk_find_LTP_FIX+0x9F6 : 13d9a >
   13d98:    49 20             	r1 = 0x20
   13d9a:    34 f4 21 25       	r2 = smax(r2, r5)  #			  ## SigProc_FIX.h:368:13
   13d9e:    60 05             		 r0 = [r6++=0x4] 			  ## encode_frame_FIX.c:490:69
   13da0:    b4 e0 92 11       	r1 = r9 - r1			  ## encode_frame_FIX.c:490:67
   13da4:    10 18             	r0 += r1			  ## encode_frame_FIX.c:490:87
   13da6:    34 e4 a1 a0       	r10 = smax(r10, r0)			  ## SigProc_FIX.h:368:13
   13daa:    c7 21             	r7 += 0x1			  ## encode_frame_FIX.c:486:29
   13dac:    8e ed ec 71       	ifs (r7 < r14) goto -0x28 <silk_find_LTP_FIX+0x9E4 : 13d88 >
   13db0:    02 43             	if (r2 == 0) goto 0x6 <silk_find_LTP_FIX+0xA14 : 13db8 >
   13db2:    80 e1 00 12       	r1 = clz(r2)			  ## entenc.c:124:2
   13db6:    04 81             	goto 0x2 <silk_find_LTP_FIX+0xA16 : 13dba >
   13db8:    49 20             	r1 = 0x20
   13dba:    10 35             	r0 = -0xb			  ## encode_frame_FIX.c:497:33
   13dbc:    b4 e0 02 08       	r0 = r0 - r8			  ## encode_frame_FIX.c:497:33
   13dc0:    a0 18             	r0 += r10			  ## encode_frame_FIX.c:497:63
   13dc2:    0a 1e             	r2 = r0 - r1			  ## encode_frame_FIX.c:500:15
   13dc4:    c2 14             	r10 = 0
   13dc6:    b2 ee 00 00       	ifs (r2 <= 0x0) {
   13dca:    42 20             		r2 = 0x0
                               	}			  ## SigProc_FIX.h:360:13
   13dcc:    28 18             	r8 += r2			  ## encode_frame_FIX.c:503:32
   13dce:    42 e0 06 01       	r2 = 0x106 <os_code_size+0x5C : 106 >			  ## encode_frame_FIX.c:505:11
   13dd2:    c8 e1 22 28       	r2 = r2 >> r8			  ## encode_frame_FIX.c:505:11
   13dd6:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:505:57
   13dd8:    45 16             	r5 = r4
   13dda:    46 20             	r6 = 0x0
   13ddc:    04 92             	goto 0x24 <silk_find_LTP_FIX+0xA5E : 13e02 >
   13dde:    00 39             	r0 = [sp+100]			  ## encode_frame_FIX.c:509:12
   13de0:    d8 ec 0a 76       	r7 = [r0+r6<<2]			  ## encode_frame_FIX.c:509:12
   13de4:    b4 f0 82 17       	r1 = r8 - r7  #			  ## encode_frame_FIX.c:509:12
   13de8:    53 7c             		 r3 = [r5+-0x10] 			  ## encode_frame_FIX.c:509:12
   13dea:    c8 f1 33 11       	r1 = r3 >>> r1  #			  ## encode_frame_FIX.c:509:12
   13dee:    50 05             		 r0 = [r5++=0x4] 			  ## encode_frame_FIX.c:510:12
   13df0:    f8 e1 10 d0       	r13_r12 = r1 * r0 (s)			  ## encode_frame_FIX.c:510:12
   13df4:    d0 e1 0e c8       	r13_r12 >>= 0xe			  ## encode_frame_FIX.c:510:12
   13df8:    70 e1 03 c0       	r0 = r12 & 0xFFFFFFFC			  ## encode_frame_FIX.c:510:12
   13dfc:    0a 18             	r10 += r0			  ## encode_frame_FIX.c:510:12
   13dfe:    12 18             	r2 += r1			  ## encode_frame_FIX.c:509:12
   13e00:    c6 21             	r6 += 0x1			  ## encode_frame_FIX.c:507:29
   13e02:    8e ed ec 61       	ifs (r6 < r14) goto -0x28 <silk_find_LTP_FIX+0xA3A : 13dde >
   13e06:    c0 e1 af bd       	r11 = r10 >>> 0x1f			  ## Inlines.h:119:20
   13e0a:    d0 e1 0c a0       	r11_r10 <<= 0xc			  ## Inlines.h:119:35
   13e0e:    f6 e1 a0 f2       	r15_r14 = r11_r10 / r2 (s)			  ## Inlines.h:122:20
   13e12:    50 e1 00 e4       	r0 = r14 ^ 0x80000000
   13e16:    c1 d4             	r9 = 0  #
   13e18:    a0 2f             		 [sp+188] = r0			  ## encode_frame_FIX.c:515:7
   13e1a:    4c f0 80 c1       	r12 = -0x3e80  # <RAM_LIMIT_H+0xFFFFFFFFFFE5C180 : ffffffffffffc180 >			  ## encode_frame_FIX.c:515:7
   13e1e:    00 2e             		 r0 = [sp+56]			  ## encode_frame_FIX.c:515:7
   13e20:    03 f1 54 00       	r3 = r0 + 0x54  #			  ## encode_frame_FIX.c:515:7
   13e24:    02 22             		 r2 = [sp+8]			  ## encode_frame_FIX.c:515:7
   13e26:    44 8d             	goto 0x11a <silk_find_LTP_FIX+0xB9E : 13f42 >
   13e28:    00 39             	r0 = [sp+100]			  ## encode_frame_FIX.c:517:11
   13e2a:    d8 ec 0a 09       	r0 = [r0+r9<<2]			  ## encode_frame_FIX.c:517:11
   13e2e:    a1 e0 02 00       	r1 = 0x2 - r0			  ## encode_frame_FIX.c:517:9
   13e32:    81 fd 05 02       	ifs (r1 < 0x1) goto 0xa <silk_find_LTP_FIX+0xA9C : 13e40 >			  ## encode_frame_FIX.c:517:7
   13e36:    00 2e             	r0 = [sp+56]			  ## encode_frame_FIX.c:518:13
   13e38:    d8 ec 0a 09       	r0 = [r0+r9<<2]			  ## encode_frame_FIX.c:518:13
   13e3c:    98 1a             	r0 >>>= r1			  ## encode_frame_FIX.c:518:13
   13e3e:    04 9c             	goto 0x38 <silk_find_LTP_FIX+0xAD4 : 13e78 >
   13e40:    01 2e             	r1 = [sp+56]
   13e42:    d8 ec 1a a9       	r10 = [r1+r9<<2]
   13e46:    f8 3e             	r0 += -0x2			  ## encode_frame_FIX.c:520:13
   13e48:    c1 ff ff ff ff 7f 	r1 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## encode_frame_FIX.c:520:13
   13e4e:    c8 e1 12 70       	r7 = r1 >> r0			  ## encode_frame_FIX.c:520:13
   13e52:    60 e0 00 14       	r1 = 0x80000000			  ## encode_frame_FIX.c:520:13
   13e56:    c8 e1 13 60       	r6 = r1 >>> r0			  ## encode_frame_FIX.c:520:13
   13e5a:    87 ee 06 60       	ifs (r6 <= r7) goto 0xc <silk_find_LTP_FIX+0xAC6 : 13e6a >			  ## encode_frame_FIX.c:520:13
   13e5e:    61 16             	r1 = r6			  ## encode_frame_FIX.c:520:13
   13e60:    9a ee 00 06       	ifs (r10 <= r6) {			  ## encode_frame_FIX.c:520:13
   13e64:    34 e4 a1 17       		r1 = smax(r10, r7)
                               	}			  ## encode_frame_FIX.c:520:13
   13e68:    04 85             	goto 0xa <silk_find_LTP_FIX+0xAD0 : 13e74 >			  ## encode_frame_FIX.c:520:13
   13e6a:    71 16             	r1 = r7			  ## encode_frame_FIX.c:520:13
   13e6c:    9a ee 00 07       	ifs (r10 <= r7) {			  ## encode_frame_FIX.c:520:13
   13e70:    34 e4 a1 16       		r1 = smax(r10, r6)
                               	}			  ## encode_frame_FIX.c:520:13
   13e74:    c8 e1 10 00       	r0 = r1 << r0			  ## encode_frame_FIX.c:520:13
   13e78:    d8 ec 4a 19       	r1 = [r4+r9<<2]			  ## encode_frame_FIX.c:523:11
   13e7c:    99 a2             	r1 = r1 >>> 0x2			  ## encode_frame_FIX.c:523:11
   13e7e:    b4 e0 e2 a1       	r10 = r14 - r1			  ## encode_frame_FIX.c:523:11
   13e82:    56 e1 00 14       	r6 = r1 ^ 0x80000000			  ## encode_frame_FIX.c:523:11
   13e86:    10 e1 99 09       	r0 = r0 + 0x1999			  ## encode_frame_FIX.c:523:11
   13e8a:    67 16             	r7 = r6			  ## encode_frame_FIX.c:523:11
   13e8c:    e8 16             	r8 = r14			  ## encode_frame_FIX.c:523:11
   13e8e:    ba ee ff 4f       	ifs (r10 <= -0x1) {
   13e92:    17 16             		r7 = r1			  ## encode_frame_FIX.c:523:11
   13e94:    d4 e9 bc 80       		r8 = [sp+188]
                               	}			  ## encode_frame_FIX.c:523:11
   13e98:    c5 ff 67 66 66 00 	r5 = 0x666667 <RAM_LIMIT_H+0x4C6666 : 666666 >			  ## encode_frame_FIX.c:523:11
   13e9e:    f4 e1 51 d0       	r13 = r5 / r0 (s)			  ## encode_frame_FIX.c:523:11
   13ea2:    90 e1 82 57       	r5 = r8 & r7			  ## encode_frame_FIX.c:523:11
   13ea6:    c0 e1 af 0d       	r0 = r10 >>> 0x1f			  ## encode_frame_FIX.c:523:11
   13eaa:    38 3f             	r0 ^= 0x80000000			  ## encode_frame_FIX.c:523:11
   13eac:    35 ed 00 00       	ifs (r5 >= 0x0) {			  ## encode_frame_FIX.c:523:11
   13eb0:    a0 16             		r0 = r10
                               	}			  ## encode_frame_FIX.c:523:11
   13eb2:    c7 ff ff ff ff 07 	r7 = 0x7ffffff <RAM_LIMIT_H+0x7E5FFFE : 7fffffe >			  ## encode_frame_FIX.c:523:11
   13eb8:    2a ff 00 06 13 00 	ifs (r0 >= 0x8000000) goto 0x26 <silk_find_LTP_FIX+0xB40 : 13ee4 >			  ## encode_frame_FIX.c:523:11
   13ebe:    60 e0 78 74       	r7 = 0xF8000000
   13ec2:    2b ff 78 04 0e 00 	ifs (r0 < 0xf8000000) goto 0x1c <silk_find_LTP_FIX+0xB40 : 13ee4 >
   13ec8:    ba ed 00 a0       	ifs (r10 < 0x0) {
   13ecc:    20 2f             		r0 = [sp+188]			  ## encode_frame_FIX.c:523:11
   13ece:    90 19             		r0 &= r1			  ## encode_frame_FIX.c:523:11
   13ed0:    c7 ff ff ff ff 7f 		r7 = 0x7fffffff
                               	} else { <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## encode_frame_FIX.c:523:11
   13ed6:    90 e1 62 0e       		r0 = r6 & r14			  ## encode_frame_FIX.c:523:11
   13eda:    60 e0 00 74       		r7 = 0x80000000
                               	}			  ## encode_frame_FIX.c:523:11
   13ede:    80 fd 01 00       	ifs (r0 < 0x0) goto 0x2 <silk_find_LTP_FIX+0xB40 : 13ee4 >			  ## encode_frame_FIX.c:523:11
   13ee2:    a7 16             	r7 = r10
   13ee4:    80 14             	r1_r0 = 0
   13ee6:    04 8b             	goto 0x16 <silk_find_LTP_FIX+0xB5A : 13efe >
   13ee8:    d8 ed 2a 61       	r6 = h[r2+r1<<1] (s)			  ## encode_frame_FIX.c:531:36
   13eec:    b6 ee 66 06       	ifs (r6 <= 0x666) {
   13ef0:    46 e0 66 06       		r6 = 0x666
                               	} <alg_code_size+0x196 : 666 >			  ## SigProc_FIX.h:364:18
   13ef4:    e5 17             	r5 = r6.l (u)			  ## encode_frame_FIX.c:531:23
   13ef6:    d8 ec 3b 51       	[r3+r1<<2] = r5			  ## encode_frame_FIX.c:531:21
   13efa:    50 18             	r0 += r5			  ## encode_frame_FIX.c:532:11
   13efc:    c1 21             	r1 += 0x1			  ## encode_frame_FIX.c:530:31
   13efe:    81 f8 f3 0b       	if (r1 != 0x5) goto -0x1a <silk_find_LTP_FIX+0xB44 : 13ee8 >
   13f02:    f0 e1 d0 17       	r1 = r13 * r7			  ## encode_frame_FIX.c:523:11
   13f06:    11 a4             	r1 = r1 << 0x4			  ## encode_frame_FIX.c:523:11
   13f08:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## encode_frame_FIX.c:534:12
   13f0c:    89 bf             	r1 = r0 >>> 0x1f
   13f0e:    46 20             	r6 = 0x0
   13f10:    04 93             	goto 0x26 <silk_find_LTP_FIX+0xB94 : 13f38 >
   13f12:    d8 ec 3a 56       	r5 = [r3+r6<<2]			  ## encode_frame_FIX.c:536:21
   13f16:    d8 ed 2a 76       	r7 = h[r2+r6<<1] (s)			  ## encode_frame_FIX.c:536:21
   13f1a:    f8 e1 50 b0       	r11_r10 = r5 * r0 (s)			  ## encode_frame_FIX.c:536:21
   13f1e:    d0 e1 0c a8       	r11_r10 >>= 0xc			  ## encode_frame_FIX.c:536:21
   13f22:    b4 e0 a0 57       	r5 = r10 + r7			  ## encode_frame_FIX.c:536:21
   13f26:    47 e0 60 6d       	r7 = 0x6d60 <wtgv2_silk_decode_parameters+0x29E : 6d60 >			  ## encode_frame_FIX.c:536:21
   13f2a:    95 ee 00 07       	ifs (r5 <= r7) {			  ## encode_frame_FIX.c:536:21
   13f2e:    34 e4 51 7c       		r7 = smax(r5, r12)
                               	}			  ## encode_frame_FIX.c:536:21
   13f32:    d8 ed 29 76       	h[r2+r6<<1] = r7			  ## encode_frame_FIX.c:536:19
   13f36:    c6 21             	r6 += 0x1			  ## encode_frame_FIX.c:535:31
   13f38:    86 f8 eb 0b       	if (r6 != 0x5) goto -0x2a <silk_find_LTP_FIX+0xB6E : 13f12 >
   13f3c:    09 e1 01 90       	r9 = r9 + 0x1			  ## encode_frame_FIX.c:515:29
   13f40:    c2 2a             	r2 += 0xa			  ## encode_frame_FIX.c:538:13
   13f42:    00 2f             	r0 = [sp+60]			  ## encode_frame_FIX.c:515:2
   13f44:    80 ed 70 91       	ifs (r9 < r0) goto -0x120 <silk_find_LTP_FIX+0xA84 : 13e28 >			  ## encode_frame_FIX.c:515:2
   13f48:    42 83             	sp += 0x10c
   13f4a:    5f 04             	{pc, r15-r4} = [sp++]			  ## encode_frame_FIX.c:540:1


silk_burg_modified_c:
   13f4c:    7f 04             	[--sp] = {rets, r15-r4}			  ## burg_modified_FIX.c:114:0
   13f4e:    c2 8b             	sp += -0xd4			  ## burg_modified_FIX.c:114:0
   13f50:    d4 e9 10 81       	r8 = [sp+272]			  ## burg_modified_FIX.c:114:0
   13f54:    d4 e9 14 41       	r4 = [sp+276]			  ## burg_modified_FIX.c:114:0
   13f58:    d4 e9 08 51       	r5 = [sp+264]			  ## burg_modified_FIX.c:114:0
   13f5c:    83 37             	[sp+92] = r3			  ## burg_modified_FIX.c:114:0
   13f5e:    52 d6             	r2 = r5  #			  ## burg_modified_FIX.c:69:2
   13f60:    82 24             		 [sp+16] = r2
   13f62:    01 d6             	r1 = r0  #
   13f64:    81 25             		 [sp+20] = r1
   13f66:    46 20             	r6 = 0x0			  ## burg_modified_FIX.c:69:2
   13f68:    47 20             	r7 = 0x0			  ## burg_modified_FIX.c:69:2
   13f6a:    f0 f1 40 08       	r0 = r4 * r8  #			  ## burg_modified_FIX.c:142:60
   13f6e:    a4 28             		 [sp+160] = r4
   13f70:    d4 e9 99 80       	[sp+152] = r8
   13f74:    d0 e9 b1 60       	d[sp+176] = r7_r6
   13f78:    88 d4             	r9_r8 = 0  #			  ## burg_modified_FIX.c:69:2
   13f7a:    a5 29             		 [sp+164] = r5			  ## burg_modified_FIX.c:69:2
   13f7c:    56 16             	r6 = r5			  ## burg_modified_FIX.c:69:2
   13f7e:    50 03             	rep 0xc r0 {			  ## burg_modified_FIX.c:69:2
   13f80:    d4 ed 22 30       		r3 = h[r2++=0x2] (s)			  ## burg_modified_FIX.c:69:2
   13f84:    d4 ed 62 40       		r4 = h[r6++=0x2] (s)			  ## burg_modified_FIX.c:69:2
   13f88:    fc e1 30 94       		r9_r8 += r3 * r4 (s)
                               	}			  ## burg_modified_FIX.c:69:2
   13f8c:    f0 58             	if (r0 != 0) goto -0x10 <silk_burg_modified_c+0x32 : 13f7e >			  ## burg_modified_FIX.c:69:2
   13f8e:    40 e0 30 37       	r0 = 0x3730 <WOLASynthesisFilter_Float_M256_m4_r1+0xF2C : 3730 >
   13f92:    10 18             	r0 += r1
   13f94:    40 f0 30 36       	r0 = 0x3630  # <WOLASynthesisFilter_Float_M256_m4_r1+0xE2C : 3630 >
   13f98:    a0 27             		 [sp+156] = r0
   13f9a:    10 d8             	r0 += r1  #
   13f9c:    a1 2e             		 [sp+184] = r1
   13f9e:    80 2f             	[sp+60] = r0			  ## Inlines.h:50:9
   13fa0:    09 f8 03 00       	if (r9 == 0x0) goto 0x6 <silk_burg_modified_c+0x5E : 13faa >			  ## Inlines.h:50:9
   13fa4:    80 e1 00 09       	r0 = clz(r9)			  ## entenc.c:124:2
   13fa8:    04 87             	goto 0xe <silk_burg_modified_c+0x6C : 13fb8 >
   13faa:    08 f8 04 00       	if (r8 == 0x0) goto 0x8 <silk_burg_modified_c+0x6A : 13fb6 >
   13fae:    80 e1 00 08       	r0 = clz(r8)			  ## entenc.c:124:2
   13fb2:    c8 20             	r0 += 0x20			  ## macros.h:143:12
   13fb4:    04 81             	goto 0x2 <silk_burg_modified_c+0x6C : 13fb8 >
   13fb6:    50 20             	r0 = 0x40
   13fb8:    21 27             	r1 = [sp+156]			  ## burg_modified_FIX.c:133:50
   13fba:    d1 24             	r1 += 0x44			  ## burg_modified_FIX.c:133:50
   13fbc:    a1 25             	[sp+148] = r1			  ## burg_modified_FIX.c:133:50
   13fbe:    03 2f             	r3 = [sp+60]			  ## burg_modified_FIX.c:133:50
   13fc0:    02 e1 c0 30       	r2 = r3 + 0xc0			  ## burg_modified_FIX.c:131:27
   13fc4:    01 e1 80 30       	r1 = r3 + 0x80			  ## burg_modified_FIX.c:130:27
   13fc8:    01 f1 40 30       	r1 = r3 + 0x40  #			  ## burg_modified_FIX.c:129:32
   13fcc:    a1 2f             		 [sp+188] = r1			  ## burg_modified_FIX.c:129:32
   13fce:    a4 f0 23 00       	r4 = 0x23 - r0  #			  ## burg_modified_FIX.c:144:38
   13fd2:    81 29             		 [sp+36] = r1			  ## burg_modified_FIX.c:144:38
   13fd4:    34 ed 07 00       	ifs (r4 >= 0x7) {
   13fd8:    44 27             		r4 = 0x7
                               	}			  ## burg_modified_FIX.c:145:6
   13fda:    b4 ee f0 0f       	ifs (r4 <= -0x10) {
   13fde:    14 30             		r4 = -0x10
                               	}			  ## burg_modified_FIX.c:146:6
   13fe0:    b4 ed 01 50       	ifs (r4 < 0x1) {
   13fe4:    a0 e0 00 40       		r0 = 0x0 - r4			  ## burg_modified_FIX.c:151:8
   13fe8:    c8 e1 80 80       		r8 = r8 << r0
                               	} else {			  ## burg_modified_FIX.c:151:8
   13fec:    d8 e1 03 84       		r9_r8 >>>= r4
                               	}			  ## burg_modified_FIX.c:149:20
   13ff0:    86 15             	r7_r6 = r9_r8
   13ff2:    d4 e9 18 81       	r8 = [sp+280]
   13ff6:    c0 ff c6 a7 00 00 	r0 = 0xa7c6 <capture_isr+0x22 : a7c6 >			  ## burg_modified_FIX.c:154:29
   13ffc:    f8 e1 60 10       	r1_r0 = r6 * r0 (s)			  ## burg_modified_FIX.c:154:29
   14000:    d0 e9 51 60       	d[sp+80] = r7_r6			  ## burg_modified_FIX.c:154:29
   14004:    d0 e9 09 00       	d[sp+8] = r1_r0			  ## burg_modified_FIX.c:154:29
   14008:    68 1c             	r0 = r6 + r1			  ## burg_modified_FIX.c:154:27
   1400a:    0b 81             	r3 = r0 + 0x1			  ## burg_modified_FIX.c:154:87
   1400c:    41 f0 74 37       	r1 = 0x3774  # <WOLASynthesisFilter_Float_M256_m4_r1+0xF70 : 3774 >			  ## burg_modified_FIX.c:154:87
   14010:    20 27             		 r0 = [sp+156]			  ## burg_modified_FIX.c:154:22
   14012:    83 60             	[r0+0x0] = r3			  ## burg_modified_FIX.c:154:22
   14014:    20 2e             	r0 = [sp+184]			  ## burg_modified_FIX.c:154:11
   14016:    a3 30             	[sp+192] = r3			  ## burg_modified_FIX.c:154:11
   14018:    dc ec 13 30       	[++r1=r0] = r3			  ## burg_modified_FIX.c:154:11
   1401c:    81 28             	[sp+32] = r1			  ## burg_modified_FIX.c:154:11
   1401e:    40 30             	r0 = 0x10			  ## opus_demo.c:208:2
   14020:    01 2f             	r1 = [sp+60]			  ## opus_demo.c:208:2
   14022:    43 20             	r3 = 0x0			  ## opus_demo.c:208:2
   14024:    00 03             	rep 0x2 r0 {			  ## opus_demo.c:208:2
   14026:    93 05             		[r1++=0x4] = r3
                               	}			  ## opus_demo.c:208:2
   14028:    f0 5d             	if (r0 != 0) goto -0x6 <silk_burg_modified_c+0xD8 : 14024 >			  ## opus_demo.c:208:2
   1402a:    d4 e9 0c 01       	r0 = [sp+268]			  ## opus_demo.c:208:2
   1402e:    d0 e9 31 00       	d[sp+48] = r1_r0
   14032:    c4 14             	r12 = 0
   14034:    d4 e9 61 80       	[sp+96] = r8
   14038:    84 fe 40 00       	ifs (r4 <= 0x0) goto 0x80 <silk_burg_modified_c+0x170 : 140bc >
   1403c:    45 20             	r5 = 0x0
   1403e:    4c d6             	r12 = r4  #
   14040:    21 26             		 r1 = [sp+152]
   14042:    10 a1             	r0 = r1 << 0x1			  ## burg_modified_FIX.c:115:25
   14044:    c5 d4             	r13 = 0  #			  ## burg_modified_FIX.c:115:25
   14046:    a0 32             		 [sp+200] = r0			  ## burg_modified_FIX.c:115:25
   14048:    c6 d4             	r14 = 0  #			  ## burg_modified_FIX.c:115:25
   1404a:    20 29             		 r0 = [sp+164]			  ## burg_modified_FIX.c:115:25
   1404c:    09 e1 02 00       	r9 = r0 + 0x2			  ## burg_modified_FIX.c:115:25
   14050:    30 e1 ff 1f       	r0 = r1 + -0x1			  ## burg_modified_FIX.c:115:25
   14054:    a0 31             	[sp+196] = r0			  ## burg_modified_FIX.c:115:25
   14056:    14 8b             	goto 0x56 <silk_burg_modified_c+0x162 : 140ae >			  ## burg_modified_FIX.c:115:25
   14058:    45 f0 8c 0d       	r5 = 0xd8c  # <usb_code_size+0x2C8 : d8c >
   1405c:    20 26             		 r0 = [sp+152]			  ## burg_modified_FIX.c:158:18
   1405e:    f0 f1 e0 40       	r4 = r14 * r0  #			  ## burg_modified_FIX.c:158:18
   14062:    20 29             		 r0 = [sp+164]			  ## burg_modified_FIX.c:158:14
   14064:    44 a1             	r4 = r4 << 0x1			  ## burg_modified_FIX.c:158:14
   14066:    b4 f0 00 f4       	r15 = r0 + r4  #			  ## burg_modified_FIX.c:158:14
   1406a:    21 31             		 r1 = [sp+196]			  ## burg_modified_FIX.c:158:14
   1406c:    96 16             	r6 = r9
   1406e:    04 97             	goto 0x2e <silk_burg_modified_c+0x152 : 1409e >
   14070:    60 16             	r0 = r6			  ## burg_modified_FIX.c:69:2
   14072:    d0 e9 b0 a0       	r11_r10 = d[sp+176]			  ## burg_modified_FIX.c:69:2
   14076:    f4 16             	r4 = r15			  ## burg_modified_FIX.c:69:2
   14078:    17 16             	r7 = r1			  ## burg_modified_FIX.c:69:2
   1407a:    57 03             	rep 0xc r7 {			  ## burg_modified_FIX.c:69:2
   1407c:    d4 ed 42 30       		r3 = h[r4++=0x2] (s)			  ## burg_modified_FIX.c:69:2
   14080:    d4 ed 02 20       		r2 = h[r0++=0x2] (s)			  ## burg_modified_FIX.c:69:2
   14084:    fc e1 30 b2       		r11_r10 += r3 * r2 (s)
                               	}			  ## burg_modified_FIX.c:69:2
   14088:    f7 58             	if (r7 != 0) goto -0x10 <silk_burg_modified_c+0x12E : 1407a >			  ## burg_modified_FIX.c:69:2
   1408a:    d8 f1 03 ac       	r11_r10 >>>= r12  #			  ## burg_modified_FIX.c:160:41
   1408e:    22 2e             		 r2 = [sp+184]			  ## burg_modified_FIX.c:160:26
   14090:    50 a2             	r0 = r5 << 0x2			  ## burg_modified_FIX.c:160:26
   14092:    20 18             	r0 += r2			  ## burg_modified_FIX.c:160:26
   14094:    68 e8 00 0a       	[r0+0x0] += r10			  ## burg_modified_FIX.c:160:26
   14098:    c6 22             	r6 += 0x2			  ## burg_modified_FIX.c:159:4
   1409a:    f9 3f             	r1 += -0x1			  ## burg_modified_FIX.c:159:4
   1409c:    c5 21             	r5 += 0x1			  ## burg_modified_FIX.c:159:4
   1409e:    30 e1 75 52       	r0 = r5 + -0xd8b			  ## burg_modified_FIX.c:159:18
   140a2:    88 ee e5 01       	ifs (r0 <= r8) goto -0x36 <silk_burg_modified_c+0x124 : 14070 >			  ## burg_modified_FIX.c:159:18
   140a6:    20 32             	r0 = [sp+200]			  ## burg_modified_FIX.c:157:3
   140a8:    09 18             	r9 += r0			  ## burg_modified_FIX.c:157:3
   140aa:    0e e1 01 e0       	r14 = r14 + 0x1			  ## burg_modified_FIX.c:157:30
   140ae:    20 28             	r0 = [sp+160]			  ## burg_modified_FIX.c:157:3
   140b0:    80 ed d2 e1       	ifs (r14 < r0) goto -0x5c <silk_burg_modified_c+0x10C : 14058 >			  ## burg_modified_FIX.c:157:3
   140b4:    a0 e0 00 c0       	r0 = 0x0 - r12
   140b8:    a0 2a             	[sp+168] = r0
   140ba:    24 9c             	goto 0xb8 <silk_burg_modified_c+0x228 : 14174 >
   140bc:    26 26             	r6 = [sp+152]
   140be:    b4 f0 62 38       	r3 = r6 - r8  #
   140c2:    21 29             		 r1 = [sp+164]			  ## burg_modified_FIX.c:115:25
   140c4:    68 81             	r0 = r6 + 0x1			  ## burg_modified_FIX.c:115:25
   140c6:    b4 e0 02 08       	r0 = r0 - r8			  ## burg_modified_FIX.c:115:25
   140ca:    00 a1             	r0 = r0 << 0x1			  ## burg_modified_FIX.c:115:25
   140cc:    b4 e0 10 b0       	r11 = r1 + r0			  ## burg_modified_FIX.c:115:25
   140d0:    60 a1             	r0 = r6 << 0x1			  ## burg_modified_FIX.c:115:25
   140d2:    30 f1 ff 8f       	r0 = r8 + -0x1  #			  ## burg_modified_FIX.c:115:25
   140d6:    a0 32             		 [sp+200] = r0			  ## burg_modified_FIX.c:115:25
   140d8:    a0 f0 00 40       	r0 = 0x0 - r4  #			  ## burg_modified_FIX.c:115:25
   140dc:    a0 31             		 [sp+196] = r0			  ## burg_modified_FIX.c:115:25
   140de:    d0 e9 29 40       	d[sp+40] = r5_r4			  ## burg_modified_FIX.c:115:25
   140e2:    07 f1 01 80       	r7 = r8 + 0x1  #			  ## burg_modified_FIX.c:115:25
   140e6:    a0 2a             		 [sp+168] = r0			  ## burg_modified_FIX.c:115:25
   140e8:    24 80             	goto 0x80 <silk_burg_modified_c+0x21E : 1416a >			  ## burg_modified_FIX.c:115:25
   140ea:    20 26             	r0 = [sp+152]			  ## burg_modified_FIX.c:167:18
   140ec:    c0 db             	r0 *= r12  #			  ## burg_modified_FIX.c:167:18
   140ee:    21 29             		 r1 = [sp+164]			  ## burg_modified_FIX.c:167:14
   140f0:    00 a1             	r0 = r0 << 0x1			  ## burg_modified_FIX.c:167:14
   140f2:    10 18             	r0 += r1			  ## burg_modified_FIX.c:167:14
   140f4:    09 82             	r1 = r0 + 0x2			  ## burg_modified_FIX.c:168:34
   140f6:    d4 e9 01 80       	[sp] = r8			  ## burg_modified_FIX.c:168:4
   140fa:    bf ea 03 ed       	call -0x25fa <celt_pitch_xcorr : 11b04 >			  ## burg_modified_FIX.c:168:4
   140fe:    31 a1             	r1 = r3 << 0x1
   14100:    b4 e0 00 d1       	r13 = r0 + r1
   14104:    41 e0 bc 0d       	r1 = 0xdbc <usb_code_size+0x2F8 : dbc >
   14108:    b0 16             	r0 = r11
   1410a:    d4 e9 c4 80       	r8 = [sp+196]
   1410e:    04 96             	goto 0x2c <silk_burg_modified_c+0x1F0 : 1413c >
   14110:    d0 e9 b0 e0       	r15_r14 = d[sp+176]			  ## opus.c:206:4
   14114:    d5 16             	r5 = r13			  ## opus.c:206:4
   14116:    04 16             	r4 = r0			  ## opus.c:206:4
   14118:    86 16             	r6 = r8			  ## opus.c:206:4
   1411a:    56 03             	rep 0xc r6 {			  ## opus.c:206:4
   1411c:    d4 ed 42 90       		r9 = h[r4++=0x2] (s)			  ## opus.c:206:4
   14120:    d4 ed 52 a0       		r10 = h[r5++=0x2] (s)			  ## opus.c:206:4
   14124:    fc e1 90 fa       		r15_r14 += r9 * r10 (s)
                               	}			  ## opus.c:206:4
   14128:    f6 58             	if (r6 != 0) goto -0x10 <silk_burg_modified_c+0x1CE : 1411a >			  ## opus.c:206:4
   1412a:    14 a2             	r4 = r1 << 0x2			  ## burg_modified_FIX.c:177:18
   1412c:    25 2e             	r5 = [sp+184]			  ## burg_modified_FIX.c:177:18
   1412e:    54 18             	r4 += r5			  ## burg_modified_FIX.c:177:18
   14130:    68 e8 00 4e       	[r4+0x0] += r14			  ## burg_modified_FIX.c:177:18
   14134:    c0 22             	r0 += 0x2			  ## burg_modified_FIX.c:176:4
   14136:    38 e1 ff 8f       	r8 = r8 + -0x1			  ## burg_modified_FIX.c:176:4
   1413a:    c1 21             	r1 += 0x1			  ## burg_modified_FIX.c:176:4
   1413c:    35 e1 45 12       	r5 = r1 + -0xdbb			  ## burg_modified_FIX.c:176:18
   14140:    87 ed e6 51       	ifs (r5 < r7) goto -0x34 <silk_burg_modified_c+0x1C4 : 14110 >			  ## burg_modified_FIX.c:176:4
   14144:    40 21             	r0 = 0x1
   14146:    01 2f             	r1 = [sp+60]
   14148:    d4 e9 60 80       	r8 = [sp+96]
   1414c:    04 88             	goto 0x10 <silk_burg_modified_c+0x212 : 1415e >
   1414e:    d0 ec 10 4c       	r4 = [r1+0xc0]			  ## burg_modified_FIX.c:181:29
   14152:    25 2a             	r5 = [sp+168]			  ## burg_modified_FIX.c:181:29
   14154:    54 1a             	r4 <<= r5			  ## burg_modified_FIX.c:181:29
   14156:    68 e8 00 14       	[r1+0x0] += r4			  ## burg_modified_FIX.c:181:26
   1415a:    c1 24             	r1 += 0x4			  ## burg_modified_FIX.c:180:4
   1415c:    c0 21             	r0 += 0x1			  ## burg_modified_FIX.c:180:28
   1415e:    87 ed f6 01       	ifs (r0 < r7) goto -0x14 <silk_burg_modified_c+0x202 : 1414e >
   14162:    20 32             	r0 = [sp+200]			  ## burg_modified_FIX.c:165:3
   14164:    0b 18             	r11 += r0			  ## burg_modified_FIX.c:165:3
   14166:    0c e1 01 c0       	r12 = r12 + 0x1			  ## burg_modified_FIX.c:165:30
   1416a:    20 28             	r0 = [sp+160]
   1416c:    80 ed bd c1       	ifs (r12 < r0) goto -0x86 <silk_burg_modified_c+0x19E : 140ea >
   14170:    d0 e9 28 c0       	r13_r12 = d[sp+40]
   14174:    40 30             	r0 = 0x10			  ## opus_demo.c:186:2
   14176:    06 2f             	r6 = [sp+60]
   14178:    62 d6             	r2 = r6  #			  ## opus_demo.c:186:2
   1417a:    01 29             		 r1 = [sp+36]			  ## opus_demo.c:186:2
   1417c:    10 03             	rep 0x4 r0 {			  ## opus_demo.c:186:2
   1417e:    23 05             		r3 = [r2++=0x4] 			  ## opus_demo.c:186:2
   14180:    93 05             		[r1++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   14182:    f0 5c             	if (r0 != 0) goto -0x8 <silk_burg_modified_c+0x230 : 1417c >			  ## opus_demo.c:186:2
   14184:    20 27             	r0 = [sp+156]			  ## opus_demo.c:186:2
   14186:    27 30             	r7 = [sp+192]			  ## opus_demo.c:186:2
   14188:    87 60             	[r0+0x0] = r7			  ## burg_modified_FIX.c:188:22
   1418a:    d0 e9 30 20       	r3_r2 = d[sp+48]
   1418e:    ab bf             	r3 = r2 >>> 0x1f
   14190:    01 28             	r1 = [sp+32]			  ## burg_modified_FIX.c:188:11
   14192:    97 60             	[r1+0x0] = r7			  ## burg_modified_FIX.c:188:11
   14194:    d0 e9 31 20       	d[sp+48] = r3_r2			  ## burg_modified_FIX.c:188:11
   14198:    d0 e1 0e 21       	r3_r2 <<= 0x1e			  ## burg_modified_FIX.c:188:11
   1419c:    d0 e9 19 20       	d[sp+24] = r3_r2
   141a0:    d0 28             	r0 += 0x48			  ## burg_modified_FIX.c:192:7
   141a2:    00 f1 7c 60       	r0 = r6 + 0x7c  #			  ## burg_modified_FIX.c:192:7
   141a6:    80 39             		 [sp+100] = r0			  ## burg_modified_FIX.c:192:7
   141a8:    80 3d             	[sp+116] = r0			  ## burg_modified_FIX.c:192:7
   141aa:    20 26             	r0 = [sp+152]			  ## burg_modified_FIX.c:192:7
   141ac:    01 a1             	r1 = r0 << 0x1			  ## burg_modified_FIX.c:192:7
   141ae:    20 29             	r0 = [sp+164]			  ## burg_modified_FIX.c:192:7
   141b0:    01 d8             	r1 += r0  #			  ## burg_modified_FIX.c:192:7
   141b2:    a1 24             		 [sp+144] = r1			  ## burg_modified_FIX.c:192:7
   141b4:    31 f1 fe 0f       	r1 = r0 + -0x2  #			  ## burg_modified_FIX.c:192:7
   141b8:    81 3c             		 [sp+112] = r1			  ## burg_modified_FIX.c:192:7
   141ba:    51 f1 ff c3       	r1 = r12 ^ 0xFFFFFFFF  #			  ## burg_modified_FIX.c:192:7
   141be:    81 3b             		 [sp+108] = r1			  ## burg_modified_FIX.c:192:7
   141c0:    a1 f0 07 c0       	r1 = 0x7 - r12  #			  ## burg_modified_FIX.c:192:7
   141c4:    a1 20             		 [sp+128] = r1			  ## burg_modified_FIX.c:192:7
   141c6:    a1 f0 10 c0       	r1 = 0x10 - r12  #			  ## burg_modified_FIX.c:192:7
   141ca:    81 3f             		 [sp+124] = r1			  ## burg_modified_FIX.c:192:7
   141cc:    d0 e9 29 c0       	d[sp+40] = r13_r12			  ## burg_modified_FIX.c:192:7
   141d0:    41 f0 ad 0d       	r1 = 0xdad  # <usb_code_size+0x2E8 : dac >			  ## burg_modified_FIX.c:192:7
   141d4:    81 3e             		 [sp+120] = r1			  ## burg_modified_FIX.c:192:7
   141d6:    81 33             	[sp+76] = r1			  ## burg_modified_FIX.c:192:7
   141d8:    80 3a             	[sp+104] = r0			  ## burg_modified_FIX.c:192:7
   141da:    46 20             	r6 = 0x0			  ## burg_modified_FIX.c:192:7
   141dc:    41 20             	r1 = 0x0			  ## burg_modified_FIX.c:192:7
   141de:    d0 e9 c9 00       	d[sp+200] = r1_r0			  ## burg_modified_FIX.c:192:7
   141e2:    60 e0 80 04       	r0 = 0x40000000			  ## burg_modified_FIX.c:192:7
   141e6:    05 82             	goto 0x404 <silk_burg_modified_c+0x6A0 : 145ec >			  ## burg_modified_FIX.c:192:7
   141e8:    d0 e9 41 00       	d[sp+64] = r1_r0
   141ec:    20 26             	r0 = [sp+152]
   141ee:    80 1f             	r0 = r0 - r6
   141f0:    f8 3f             	r0 += -0x1
   141f2:    a0 23             	[sp+140] = r0			  ## burg_modified_FIX.c:197:7
   141f4:    d0 e9 28 00       	r1_r0 = d[sp+40]			  ## burg_modified_FIX.c:197:7
   141f8:    a6 30             	[sp+192] = r6			  ## burg_modified_FIX.c:197:7
   141fa:    41 20             	r1 = 0x0			  ## burg_modified_FIX.c:197:7
   141fc:    f0 fd 76 fe       	ifs (r0 < -0x1) goto 0xec <silk_burg_modified_c+0x3A0 : 142ec >			  ## burg_modified_FIX.c:197:7
   14200:    04 3a             	r4 = [sp+104]
   14202:    00 3b             	r0 = [sp+108]
   14204:    a0 31             	[sp+196] = r0
   14206:    d4 e9 70 c0       	r12 = [sp+112]
   1420a:    34 8c             	goto 0xd8 <silk_burg_modified_c+0x398 : 142e4 >
   1420c:    6d d6             	r13 = r6  #
   1420e:    a4 22             		 [sp+136] = r4
   14210:    20 26             	r0 = [sp+152]			  ## burg_modified_FIX.c:199:19
   14212:    10 db             	r0 *= r1  #			  ## burg_modified_FIX.c:199:19
   14214:    a1 2b             		 [sp+172] = r1			  ## burg_modified_FIX.c:199:19
   14216:    00 a1             	r0 = r0 << 0x1			  ## burg_modified_FIX.c:199:15
   14218:    21 29             	r1 = [sp+164]			  ## burg_modified_FIX.c:199:15
   1421a:    10 d8             	r0 += r1  #			  ## burg_modified_FIX.c:199:15
   1421c:    21 23             		 r1 = [sp+140]			  ## burg_modified_FIX.c:201:12
   1421e:    d8 ed 0a 11       	r1 = h[r0+r1<<1] (s)			  ## burg_modified_FIX.c:201:12
   14222:    d8 ed 0a 06       	r0 = h[r0+r6<<1] (s)			  ## burg_modified_FIX.c:200:12
   14226:    03 3e             	r3 = [sp+120]
   14228:    c8 e1 10 23       	r2 = r1 << r3			  ## burg_modified_FIX.c:201:12
   1422c:    ae e0 00 20       	r14 = 0x0 - r2			  ## burg_modified_FIX.c:201:11
   14230:    c0 e1 ef fd       	r15 = r14 >>> 0x1f
   14234:    c8 f1 00 23       	r2 = r0 << r3  #			  ## burg_modified_FIX.c:200:12
   14238:    23 31             		 r3 = [sp+196]			  ## burg_modified_FIX.c:200:12
   1423a:    a8 e0 00 20       	r8 = 0x0 - r2			  ## burg_modified_FIX.c:200:11
   1423e:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f
   14242:    17 a9             	r7 = r1 << 0x9			  ## burg_modified_FIX.c:203:12
   14244:    05 a9             	r5 = r0 << 0x9			  ## burg_modified_FIX.c:202:12
   14246:    c1 d6             	r1 = r12  #
   14248:    20 2f             		 r0 = [sp+188]
   1424a:    04 9e             	goto 0x3c <silk_burg_modified_c+0x33C : 14288 >
   1424c:    d7 ed 3e 6f       	r6 = h[r3++=-0x2] (s)			  ## burg_modified_FIX.c:205:25
   14250:    f8 e1 60 b8       	r11_r10 = r6 * r8 (s)			  ## burg_modified_FIX.c:205:25
   14254:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## burg_modified_FIX.c:205:25
   14258:    68 e8 80 0a       	[r0+-0x80] += r10			  ## burg_modified_FIX.c:205:23
   1425c:    d4 ed 12 20       	r2 = h[r1++=0x2] (s)			  ## burg_modified_FIX.c:206:25
   14260:    f8 e1 20 be       	r11_r10 = r2 * r14 (s)			  ## burg_modified_FIX.c:206:25
   14264:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## burg_modified_FIX.c:206:25
   14268:    68 e8 c0 0a       	[r0+-0x40] += r10			  ## burg_modified_FIX.c:206:23
   1426c:    04 05             	r4 = [r0++=0x4] 			  ## burg_modified_FIX.c:208:13
   1426e:    f8 e1 20 b4       	r11_r10 = r2 * r4 (s)			  ## burg_modified_FIX.c:209:13
   14272:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## burg_modified_FIX.c:209:13
   14276:    a7 18             	r7 += r10			  ## burg_modified_FIX.c:209:13
   14278:    f8 f1 60 b4       	r11_r10 = r6 * r4 (s)  #			  ## burg_modified_FIX.c:208:13
   1427c:    26 30             		 r6 = [sp+192]			  ## burg_modified_FIX.c:208:13
   1427e:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## burg_modified_FIX.c:208:13
   14282:    a5 18             	r5 += r10			  ## burg_modified_FIX.c:208:13
   14284:    3d e1 ff df       	r13 = r13 + -0x1			  ## burg_modified_FIX.c:204:5
   14288:    8d f8 e0 01       	if (r13 != 0x0) goto -0x40 <silk_burg_modified_c+0x300 : 1424c >
   1428c:    a0 f0 00 70       	r0 = 0x0 - r7  #			  ## burg_modified_FIX.c:212:12
   14290:    03 3f             		 r3 = [sp+124]			  ## burg_modified_FIX.c:212:12
   14292:    30 da             	r0 <<= r3  #			  ## burg_modified_FIX.c:212:12
   14294:    24 22             		 r4 = [sp+136]			  ## burg_modified_FIX.c:212:12
   14296:    89 bf             	r1 = r0 >>> 0x1f
   14298:    a2 f0 00 50       	r2 = 0x0 - r5  #			  ## burg_modified_FIX.c:211:12
   1429c:    27 25             		 r7 = [sp+148]			  ## burg_modified_FIX.c:211:12
   1429e:    c8 e1 20 83       	r8 = r2 << r3			  ## burg_modified_FIX.c:211:12
   142a2:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f
   142a6:    13 3f             	r3 = -0x1
   142a8:    45 16             	r5 = r4
   142aa:    04 92             	goto 0x24 <silk_burg_modified_c+0x384 : 142d0 >
   142ac:    d7 ed 5e 2f       	r2 = h[r5++=-0x2] (s)			  ## burg_modified_FIX.c:214:17
   142b0:    f8 e1 20 b8       	r11_r10 = r2 * r8 (s)			  ## burg_modified_FIX.c:214:17
   142b4:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## burg_modified_FIX.c:214:17
   142b8:    68 e8 bc 7a       	[r7+-0x44] += r10			  ## burg_modified_FIX.c:214:15
   142bc:    d8 ed ca 23       	r2 = h[r12+r3<<1] (s)			  ## burg_modified_FIX.c:215:17
   142c0:    f8 e1 20 b0       	r11_r10 = r2 * r0 (s)			  ## burg_modified_FIX.c:215:17
   142c4:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## burg_modified_FIX.c:215:17
   142c8:    68 e8 00 7a       	[r7+0x0] += r10			  ## burg_modified_FIX.c:215:15
   142cc:    c7 24             	r7 += 0x4			  ## burg_modified_FIX.c:213:5
   142ce:    c3 21             	r3 += 0x1			  ## burg_modified_FIX.c:213:5
   142d0:    83 e8 ec 61       	if (r6 != r3) goto -0x28 <silk_burg_modified_c+0x360 : 142ac >
   142d4:    20 24             	r0 = [sp+144]
   142d6:    04 d8             	r4 += r0  #			  ## burg_modified_FIX.c:198:4
   142d8:    21 31             		 r1 = [sp+196]			  ## burg_modified_FIX.c:198:4
   142da:    01 18             	r1 += r0			  ## burg_modified_FIX.c:198:4
   142dc:    0c d8             	r12 += r0  #			  ## burg_modified_FIX.c:198:4
   142de:    a1 31             		 [sp+196] = r1			  ## burg_modified_FIX.c:198:4
   142e0:    21 2b             	r1 = [sp+172]			  ## burg_modified_FIX.c:198:4
   142e2:    c1 21             	r1 += 0x1			  ## burg_modified_FIX.c:198:31
   142e4:    20 28             	r0 = [sp+160]			  ## burg_modified_FIX.c:198:4
   142e6:    80 ed 91 11       	ifs (r1 < r0) goto -0xde <silk_burg_modified_c+0x2C0 : 1420c >			  ## burg_modified_FIX.c:198:4
   142ea:    34 9b             	goto 0xf6 <silk_burg_modified_c+0x496 : 143e2 >			  ## burg_modified_FIX.c:198:4
   142ec:    00 3a             	r0 = [sp+104]
   142ee:    a0 2b             	[sp+172] = r0
   142f0:    d4 e9 6c b0       	r11 = [sp+108]
   142f4:    00 3c             	r0 = [sp+112]
   142f6:    a0 31             	[sp+196] = r0			  ## burg_modified_FIX.c:115:25
   142f8:    34 91             	goto 0xe2 <silk_burg_modified_c+0x490 : 143dc >			  ## burg_modified_FIX.c:115:25
   142fa:    64 d6             	r4 = r6  #
   142fc:    20 26             		 r0 = [sp+152]			  ## burg_modified_FIX.c:220:19
   142fe:    10 db             	r0 *= r1  #			  ## burg_modified_FIX.c:220:19
   14300:    a1 22             		 [sp+136] = r1			  ## burg_modified_FIX.c:220:19
   14302:    00 a1             	r0 = r0 << 0x1			  ## burg_modified_FIX.c:220:15
   14304:    21 29             	r1 = [sp+164]			  ## burg_modified_FIX.c:220:15
   14306:    10 d8             	r0 += r1  #			  ## burg_modified_FIX.c:220:15
   14308:    21 23             		 r1 = [sp+140]			  ## burg_modified_FIX.c:222:12
   1430a:    d8 ed 0a 11       	r1 = h[r0+r1<<1] (s)			  ## burg_modified_FIX.c:222:12
   1430e:    d8 ed 0a 06       	r0 = h[r0+r6<<1] (s)			  ## burg_modified_FIX.c:221:12
   14312:    22 2a             	r2 = [sp+168]
   14314:    c8 f1 10 82       	r8 = r1 << r2  #			  ## burg_modified_FIX.c:222:12
   14318:    26 31             		 r6 = [sp+196]			  ## burg_modified_FIX.c:222:12
   1431a:    c8 f1 00 92       	r9 = r0 << r2  #			  ## burg_modified_FIX.c:221:12
   1431e:    22 2f             		 r2 = [sp+188]			  ## burg_modified_FIX.c:221:12
   14320:    17 b1             	r7 = r1 << 0x11			  ## burg_modified_FIX.c:224:12
   14322:    c0 e1 01 a1       	r10 = r0 << 0x11			  ## burg_modified_FIX.c:223:12
   14326:    b1 16             	r1 = r11
   14328:    04 95             	goto 0x2a <silk_burg_modified_c+0x408 : 14354 >
   1432a:    d7 ed 1e 5f       	r5 = h[r1++=-0x2] (s)			  ## burg_modified_FIX.c:226:25
   1432e:    f0 e1 50 39       	r3 = r5 * r9			  ## burg_modified_FIX.c:221:11
   14332:    68 e8 82 23       	[r2+-0x80] -= r3			  ## burg_modified_FIX.c:226:23
   14336:    d4 ed 62 30       	r3 = h[r6++=0x2] (s)			  ## burg_modified_FIX.c:227:25
   1433a:    f0 e1 30 08       	r0 = r3 * r8			  ## burg_modified_FIX.c:222:11
   1433e:    68 e8 c2 20       	[r2+-0x40] -= r0			  ## burg_modified_FIX.c:227:23
   14342:    20 05             	r0 = [r2++=0x4] 			  ## burg_modified_FIX.c:228:14
   14344:    00 e1 80 00       	r0 = r0 + 0x80			  ## burg_modified_FIX.c:228:14
   14348:    88 a8             	r0 = r0 >>> 0x8			  ## burg_modified_FIX.c:228:14
   1434a:    03 1b             	r3 *= r0			  ## burg_modified_FIX.c:233:13
   1434c:    37 18             	r7 += r3			  ## burg_modified_FIX.c:233:13
   1434e:    50 1b             	r0 *= r5			  ## burg_modified_FIX.c:232:13
   14350:    0a 18             	r10 += r0			  ## burg_modified_FIX.c:232:13
   14352:    fc 3f             	r4 += -0x1			  ## burg_modified_FIX.c:225:5
   14354:    f4 4a             	if (r4 != 0) goto -0x2c <silk_burg_modified_c+0x3DE : 1432a >
   14356:    d4 e9 85 b0       	[sp+132] = r11
   1435a:    a8 f0 00 70       	r8 = 0x0 - r7  #			  ## burg_modified_FIX.c:236:12
   1435e:    25 2b             		 r5 = [sp+172]			  ## burg_modified_FIX.c:236:12
   14360:    c0 f1 8f 9d       	r9 = r8 >>> 0x1f  #
   14364:    27 25             		 r7 = [sp+148]
   14366:    ae f0 00 a0       	r14 = 0x0 - r10  #			  ## burg_modified_FIX.c:235:12
   1436a:    24 20             		 r4 = [sp+128]			  ## burg_modified_FIX.c:235:12
   1436c:    c0 f1 ef fd       	r15 = r14 >>> 0x1f  #
   14370:    26 30             		 r6 = [sp+192]
   14372:    10 3f             	r0 = -0x1
   14374:    14 85             	goto 0x4a <silk_burg_modified_c+0x474 : 143c0 >
   14376:    d7 ed 5e 1f       	r1 = h[r5++=-0x2] (s)			  ## burg_modified_FIX.c:238:17
   1437a:    d0 e9 c8 c0       	r13_r12 = d[sp+200]			  ## burg_modified_FIX.c:238:17
   1437e:    d7 ec 7c cb       	r12 = [r7+-0x44]			  ## burg_modified_FIX.c:238:17
   14382:    41 1a             	r1 <<= r4			  ## burg_modified_FIX.c:238:17
   14384:    f8 e1 10 3e       	r3_r2 = r1 * r14 (s)			  ## burg_modified_FIX.c:238:17
   14388:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## burg_modified_FIX.c:238:17
   1438c:    b4 e0 20 ac       	r10 = r2 + r12			  ## burg_modified_FIX.c:238:17
   14390:    b8 e0 30 bd       	r11 = r3 + r13 + c			  ## burg_modified_FIX.c:238:17
   14394:    d7 ec 7d ab       	[r7+-0x44] = r10			  ## burg_modified_FIX.c:238:15
   14398:    21 31             	r1 = [sp+196]			  ## burg_modified_FIX.c:240:17
   1439a:    d8 ed 1a 10       	r1 = h[r1+r0<<1] (s)			  ## burg_modified_FIX.c:240:17
   1439e:    41 1a             	r1 <<= r4			  ## burg_modified_FIX.c:240:17
   143a0:    f8 e1 10 38       	r3_r2 = r1 * r8 (s)			  ## burg_modified_FIX.c:240:17
   143a4:    d0 ec 70 a0       	r10 = [r7+0x0]			  ## burg_modified_FIX.c:240:17
   143a8:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## burg_modified_FIX.c:240:17
   143ac:    d0 e9 c9 c0       	d[sp+200] = r13_r12			  ## burg_modified_FIX.c:240:17
   143b0:    db 16             	r11 = r13			  ## burg_modified_FIX.c:240:17
   143b2:    b4 e0 20 ca       	r12 = r2 + r10			  ## burg_modified_FIX.c:240:17
   143b6:    b8 e0 30 db       	r13 = r3 + r11 + c			  ## burg_modified_FIX.c:240:17
   143ba:    d8 ec 75 c0       	[r7++=0x4] = r12			  ## burg_modified_FIX.c:240:15
   143be:    c0 21             	r0 += 0x1			  ## burg_modified_FIX.c:237:5
   143c0:    80 e8 d9 61       	if (r6 != r0) goto -0x4e <silk_burg_modified_c+0x42A : 14376 >
   143c4:    20 24             	r0 = [sp+144]
   143c6:    21 2b             	r1 = [sp+172]			  ## burg_modified_FIX.c:219:4
   143c8:    01 18             	r1 += r0			  ## burg_modified_FIX.c:219:4
   143ca:    a1 2b             	[sp+172] = r1			  ## burg_modified_FIX.c:219:4
   143cc:    d4 e9 84 b0       	r11 = [sp+132]			  ## burg_modified_FIX.c:219:4
   143d0:    0b d8             	r11 += r0  #			  ## burg_modified_FIX.c:219:4
   143d2:    21 31             		 r1 = [sp+196]			  ## burg_modified_FIX.c:219:4
   143d4:    01 18             	r1 += r0			  ## burg_modified_FIX.c:219:4
   143d6:    a1 31             	[sp+196] = r1			  ## burg_modified_FIX.c:219:4
   143d8:    21 22             	r1 = [sp+136]			  ## burg_modified_FIX.c:219:4
   143da:    c1 21             	r1 += 0x1			  ## burg_modified_FIX.c:219:31
   143dc:    20 28             	r0 = [sp+160]			  ## burg_modified_FIX.c:219:4
   143de:    80 ed 8c 11       	ifs (r1 < r0) goto -0xe8 <silk_burg_modified_c+0x3AE : 142fa >			  ## burg_modified_FIX.c:219:4
   143e2:    00 29             	r0 = [sp+36]			  ## burg_modified_FIX.c:248:10
   143e4:    d8 ec 0a a6       	r10 = [r0+r6<<2]			  ## burg_modified_FIX.c:248:10
   143e8:    00 2f             	r0 = [sp+60]			  ## burg_modified_FIX.c:247:10
   143ea:    d8 ec 0a b6       	r11 = [r0+r6<<2]			  ## burg_modified_FIX.c:247:10
   143ee:    00 28             	r0 = [sp+32]			  ## burg_modified_FIX.c:250:10
   143f0:    01 60             	r1 = [r0+0x0] 			  ## burg_modified_FIX.c:250:10
   143f2:    d4 e9 9c 80       	r8 = [sp+156]			  ## burg_modified_FIX.c:250:10
   143f6:    d8 ec 84 20       	r2 = [r8++=0x4]			  ## burg_modified_FIX.c:250:10
   143fa:    b4 f0 20 91       	r9 = r2 + r1  #			  ## burg_modified_FIX.c:250:10
   143fe:    27 2e             		 r7 = [sp+184]			  ## burg_modified_FIX.c:250:10
   14400:    44 20             	r4 = 0x0
   14402:    14 97             	goto 0x6e <silk_burg_modified_c+0x526 : 14472 >
   14404:    40 e0 ac 0d       	r0 = 0xdac <usb_code_size+0x2E8 : dac >			  ## burg_modified_FIX.c:252:14
   14408:    d8 ec 7a 20       	r2 = [r7+r0<<2]			  ## burg_modified_FIX.c:252:14
   1440c:    30 e4 00 12       	r1 = abs(r2)			  ## burg_modified_FIX.c:252:14
   14410:    01 43             	if (r1 == 0) goto 0x6 <silk_burg_modified_c+0x4CC : 14418 >
   14412:    80 e1 00 51       	r5 = clz(r1)			  ## entenc.c:124:2
   14416:    04 81             	goto 0x2 <silk_burg_modified_c+0x4CE : 1441a >
   14418:    4d 20             	r5 = 0x20
   1441a:    c8 32             	r0 += 0x32			  ## burg_modified_FIX.c:260:11
   1441c:    d8 ec 7a 10       	r1 = [r7+r0<<2]			  ## burg_modified_FIX.c:260:11
   14420:    f8 2f             	r0 += -0x11			  ## burg_modified_FIX.c:260:11
   14422:    d8 ec 7a 30       	r3 = [r7+r0<<2]			  ## burg_modified_FIX.c:260:11
   14426:    31 18             	r1 += r3			  ## burg_modified_FIX.c:260:11
   14428:    fd 3f             	r5 += -0x1			  ## burg_modified_FIX.c:253:43
   1442a:    35 ed 07 00       	ifs (r5 >= 0x7) {
   1442e:    45 27             		r5 = 0x7
                               	}			  ## burg_modified_FIX.c:254:9
   14430:    52 1a             	r2 <<= r5			  ## burg_modified_FIX.c:255:12
   14432:    f8 e1 10 d2       	r13_r12 = r1 * r2 (s)			  ## burg_modified_FIX.c:260:11
   14436:    61 a2             	r1 = r6 << 0x2			  ## burg_modified_FIX.c:257:11
   14438:    81 18             	r1 += r8			  ## burg_modified_FIX.c:257:11
   1443a:    d0 ec 10 34       	r3 = [r1+0x40]			  ## burg_modified_FIX.c:259:11
   1443e:    a5 e0 07 50       	r5 = 0x7 - r5			  ## burg_modified_FIX.c:257:11
   14442:    c8 e1 d0 05       	r0 = r13 << r5			  ## burg_modified_FIX.c:260:11
   14446:    09 18             	r9 += r0			  ## burg_modified_FIX.c:260:11
   14448:    f8 e1 20 d3       	r13_r12 = r2 * r3 (s)			  ## burg_modified_FIX.c:259:11
   1444c:    d6 ec 18 0f       	r0 = [r1+-0x108]			  ## burg_modified_FIX.c:258:11
   14450:    c8 e1 d0 35       	r3 = r13 << r5			  ## burg_modified_FIX.c:259:11
   14454:    34 18             	r4 += r3			  ## burg_modified_FIX.c:259:11
   14456:    d7 ec 18 13       	r1 = [r1+-0xc8]			  ## burg_modified_FIX.c:257:11
   1445a:    f8 e1 20 d0       	r13_r12 = r2 * r0 (s)			  ## burg_modified_FIX.c:258:11
   1445e:    c8 e1 d0 05       	r0 = r13 << r5			  ## burg_modified_FIX.c:258:11
   14462:    0a 18             	r10 += r0			  ## burg_modified_FIX.c:258:11
   14464:    f8 e1 20 11       	r1_r0 = r2 * r1 (s)			  ## burg_modified_FIX.c:257:11
   14468:    c8 e1 10 05       	r0 = r1 << r5			  ## burg_modified_FIX.c:257:11
   1446c:    0b 18             	r11 += r0			  ## burg_modified_FIX.c:257:11
   1446e:    fe 3f             	r6 += -0x1			  ## burg_modified_FIX.c:251:3
   14470:    c7 24             	r7 += 0x4			  ## burg_modified_FIX.c:251:3
   14472:    e6 48             	if (r6 != 0) goto -0x70 <silk_burg_modified_c+0x4B8 : 14404 >
   14474:    20 30             	r0 = [sp+192]			  ## burg_modified_FIX.c:115:22
   14476:    0e 81             	r6 = r0 + 0x1			  ## burg_modified_FIX.c:115:22
   14478:    20 27             	r0 = [sp+156]			  ## burg_modified_FIX.c:263:16
   1447a:    d8 ec 0b b6       	[r0+r6<<2] = r11			  ## burg_modified_FIX.c:263:16
   1447e:    b4 e0 a0 04       	r0 = r10 + r4			  ## burg_modified_FIX.c:265:9
   14482:    01 a1             	r1 = r0 << 0x1			  ## burg_modified_FIX.c:266:9
   14484:    a0 e0 00 00       	r0 = 0x0 - r0			  ## burg_modified_FIX.c:266:9
   14488:    02 a1             	r2 = r0 << 0x1			  ## burg_modified_FIX.c:266:9
   1448a:    ab bf             	r3 = r2 >>> 0x1f			  ## burg_modified_FIX.c:266:9
   1448c:    38 de             	r0 = r3 - r1  #			  ## burg_modified_FIX.c:266:9
   1448e:    21 25             		 r1 = [sp+148]			  ## burg_modified_FIX.c:264:16
   14490:    38 19             	r0 ^= r3			  ## burg_modified_FIX.c:266:9
   14492:    d8 ec 1b a6       	[r1+r6<<2] = r10			  ## burg_modified_FIX.c:264:16
   14496:    09 ed 07 00       	ifs (r0 >= r9) goto 0xe <silk_burg_modified_c+0x55C : 144a8 >			  ## burg_modified_FIX.c:269:7
   1449a:    2a 15             	r11_r10 = r3_r2
   1449c:    20 15             	r1_r0 = r3_r2			  ## Inlines.h:119:35
   1449e:    d0 e1 0f 01       	r1_r0 <<= 0x1f			  ## Inlines.h:119:35
   144a2:    f6 e1 00 99       	r9_r8 = r1_r0 / r9 (s)			  ## Inlines.h:122:20
   144a6:    04 89             	goto 0x12 <silk_burg_modified_c+0x56E : 144ba >
   144a8:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## burg_modified_FIX.c:272:13
   144ae:    08 16             	r8 = r0			  ## burg_modified_FIX.c:272:13
   144b0:    2a 15             	r11_r10 = r3_r2
   144b2:    b2 ee 00 00       	ifs (r2 <= 0x0) {
   144b6:    60 e0 00 84       		r8 = 0x80000000
                               	}			  ## burg_modified_FIX.c:272:13
   144ba:    f8 e1 80 18       	r1_r0 = r8 * r8 (s)			  ## burg_modified_FIX.c:276:36
   144be:    a0 e0 80 14       	r0 = 0x40000000 - r1			  ## burg_modified_FIX.c:276:34
   144c2:    d0 e9 40 40       	r5_r4 = d[sp+64]
   144c6:    f8 e1 00 f4       	r15_r14 = r0 * r4 (s)			  ## burg_modified_FIX.c:277:10
   144ca:    d0 e1 0e e9       	r15_r14 >>= 0x1e			  ## burg_modified_FIX.c:277:10
   144ce:    41 20             	r1 = 0x0
   144d0:    c4 14             	r12 = 0
   144d2:    d0 e9 30 20       	r3_r2 = d[sp+48]			  ## burg_modified_FIX.c:278:7
   144d6:    02 ee 35 e0       	ifs (r14 > r2) goto 0x6a <silk_burg_modified_c+0x5F8 : 14544 >			  ## burg_modified_FIX.c:278:7
   144da:    cd bf             	r5 = r4 >>> 0x1f			  ## burg_modified_FIX.c:277:10
   144dc:    d0 e9 18 20       	r3_r2 = d[sp+24]			  ## Inlines.h:122:20
   144e0:    f6 e1 20 34       	r3_r2 = r3_r2 / r4 (s)			  ## Inlines.h:122:20
   144e4:    a0 e0 80 24       	r0 = 0x40000000 - r2			  ## burg_modified_FIX.c:280:35
   144e8:    4c e0 01 00       	r12 = 0x1 <mem_code_size : 0 >
   144ec:    80 fd 26 02       	ifs (r0 < 0x1) goto 0x4c <silk_burg_modified_c+0x5F0 : 1453c >
   144f0:    80 e1 00 20       	r2 = clz(r0)			  ## entenc.c:124:2
   144f4:    c4 ff 86 b4 00 00 	r4 = 0xb486 <print+0x36 : b486 >
   144fa:    32 ea 01 00       	if ((r2 & 0x1) != 0) {
   144fe:    60 e0 00 4c       		r4 = 0x8000
                               	}
   14502:    ad a1             	r5 = r2 >>> 0x1			  ## Inlines.h:101:11
   14504:    d4 1a             	r4 >>= r5			  ## Inlines.h:101:7
   14506:    c8 e1 00 22       	r2 = r0 << r2			  ## Inlines.h:74:11
   1450a:    b2 e1 1c 2c       	r2 = uextra(r2, p:0x18, l:0x7)			  ## Inlines.h:75:22
   1450e:    e2 e1 d5 20       	r2 = r2 * 0xD5			  ## Inlines.h:104:9
   14512:    f8 e1 40 92       	r9_r8 = r4 * r2 (s)			  ## Inlines.h:104:9
   14516:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## Inlines.h:104:9
   1451a:    48 18             	r8 += r4			  ## Inlines.h:104:9
   1451c:    88 fd 0f 02       	ifs (r8 < 0x1) goto 0x1e <silk_burg_modified_c+0x5F2 : 1453e >
   14520:    f4 e1 00 08       	r0 = r0 / r8 (u)
   14524:    80 18             	r0 += r8			  ## burg_modified_FIX.c:284:14
   14526:    00 af             	r0 = r0 << 0xf			  ## burg_modified_FIX.c:285:14
   14528:    c2 ff 00 00 ff ff 	r2 = 0xffff0000 <RAM_LIMIT_H+0xFFE50000 : ffff0000 >			  ## burg_modified_FIX.c:284:14
   1452e:    a0 19             	r0 &= r2			  ## burg_modified_FIX.c:284:14
   14530:    a8 e0 00 00       	r8 = 0x0 - r0			  ## burg_modified_FIX.c:288:15
   14534:    3a ed 00 00       	ifs (r10 >= 0x0) {
   14538:    08 16             		r8 = r0
                               	}			  ## burg_modified_FIX.c:286:9
   1453a:    04 81             	goto 0x2 <silk_burg_modified_c+0x5F2 : 1453e >
   1453c:    c0 14             	r8 = 0
   1453e:    d0 e9 30 20       	r3_r2 = d[sp+48]
   14542:    2e 16             	r14 = r2
   14544:    c0 f1 8f 9d       	r9 = r8 >>> 0x1f  #
   14548:    04 3d             		 r4 = [sp+116]
   1454a:    e8 a1             	r0 = r6 >>> 0x1
   1454c:    04 96             	goto 0x2c <silk_burg_modified_c+0x62E : 1457a >
   1454e:    42 60             	r2 = [r4+0x0] 			  ## burg_modified_FIX.c:300:11
   14550:    f8 f1 20 b8       	r11_r10 = r2 * r8 (s)  #			  ## burg_modified_FIX.c:301:25
   14554:    23 2f             		 r3 = [sp+188]			  ## burg_modified_FIX.c:301:25
   14556:    d8 ec 3a 51       	r5 = [r3+r1<<2]			  ## burg_modified_FIX.c:299:11
   1455a:    d0 e1 0f a9       	r11_r10 >>= 0x1f			  ## burg_modified_FIX.c:301:25
   1455e:    77 e1 01 a0       	r7 = r10 & 0xFFFFFFFE			  ## burg_modified_FIX.c:301:25
   14562:    57 18             	r7 += r5			  ## burg_modified_FIX.c:301:25
   14564:    d8 ec 3b 71       	[r3+r1<<2] = r7			  ## burg_modified_FIX.c:301:23
   14568:    f8 e1 50 b8       	r11_r10 = r5 * r8 (s)			  ## burg_modified_FIX.c:302:25
   1456c:    d0 e1 0f a9       	r11_r10 >>= 0x1f			  ## burg_modified_FIX.c:302:25
   14570:    75 e1 01 a0       	r5 = r10 & 0xFFFFFFFE			  ## burg_modified_FIX.c:302:25
   14574:    52 18             	r2 += r5			  ## burg_modified_FIX.c:302:25
   14576:    ca 05             	[r4++=-0x4] = r2			  ## burg_modified_FIX.c:302:23
   14578:    c1 21             	r1 += 0x1			  ## burg_modified_FIX.c:298:34
   1457a:    80 ed e8 11       	ifs (r1 < r0) goto -0x30 <silk_burg_modified_c+0x602 : 1454e >
   1457e:    c0 f1 86 0c       	r0 = r8 >>> 0x6  #			  ## burg_modified_FIX.c:304:16
   14582:    21 2f             		 r1 = [sp+188]			  ## burg_modified_FIX.c:304:14
   14584:    22 30             	r2 = [sp+192]			  ## burg_modified_FIX.c:304:14
   14586:    d8 ec 1b 02       	[r1+r2<<2] = r0			  ## burg_modified_FIX.c:304:14
   1458a:    40 20             	r0 = 0x0			  ## burg_modified_FIX.c:304:14
   1458c:    8c f8 6d 00       	if (r12 != 0x0) goto 0xda <silk_burg_modified_c+0x71E : 1466a >			  ## burg_modified_FIX.c:306:7
   14590:    01 39             	r1 = [sp+100]
   14592:    04 95             	goto 0x2a <silk_burg_modified_c+0x672 : 145be >
   14594:    12 60             	r2 = [r1+0x0] 			  ## burg_modified_FIX.c:317:11
   14596:    f8 f1 20 58       	r5_r4 = r2 * r8 (s)  #			  ## burg_modified_FIX.c:318:23
   1459a:    27 27             		 r7 = [sp+156]			  ## burg_modified_FIX.c:318:23
   1459c:    d8 ec 7a 30       	r3 = [r7+r0<<2]			  ## burg_modified_FIX.c:316:11
   145a0:    d0 e1 0f 49       	r5_r4 >>= 0x1f			  ## burg_modified_FIX.c:318:23
   145a4:    bc 20             	r4 &= 0xfffffffe			  ## burg_modified_FIX.c:318:23
   145a6:    34 18             	r4 += r3			  ## burg_modified_FIX.c:318:23
   145a8:    d8 ec 7b 40       	[r7+r0<<2] = r4			  ## burg_modified_FIX.c:318:21
   145ac:    f8 e1 30 58       	r5_r4 = r3 * r8 (s)			  ## burg_modified_FIX.c:319:23
   145b0:    d0 e1 0f 49       	r5_r4 >>= 0x1f			  ## burg_modified_FIX.c:319:23
   145b4:    73 e1 01 40       	r3 = r4 & 0xFFFFFFFE			  ## burg_modified_FIX.c:319:23
   145b8:    32 18             	r2 += r3			  ## burg_modified_FIX.c:319:23
   145ba:    9a 05             	[r1++=-0x4] = r2			  ## burg_modified_FIX.c:319:21
   145bc:    c0 21             	r0 += 0x1			  ## burg_modified_FIX.c:315:28
   145be:    00 ed e9 61       	ifs (r6 >= r0) goto -0x2e <silk_burg_modified_c+0x648 : 14594 >
   145c2:    00 39             	r0 = [sp+100]			  ## burg_modified_FIX.c:115:22
   145c4:    c0 24             	r0 += 0x4			  ## burg_modified_FIX.c:115:22
   145c6:    80 39             	[sp+100] = r0			  ## burg_modified_FIX.c:115:22
   145c8:    00 3d             	r0 = [sp+116]			  ## burg_modified_FIX.c:115:22
   145ca:    c0 24             	r0 += 0x4			  ## burg_modified_FIX.c:115:22
   145cc:    80 3d             	[sp+116] = r0			  ## burg_modified_FIX.c:115:22
   145ce:    00 3a             	r0 = [sp+104]			  ## burg_modified_FIX.c:115:22
   145d0:    c0 22             	r0 += 0x2			  ## burg_modified_FIX.c:115:22
   145d2:    80 3a             	[sp+104] = r0			  ## burg_modified_FIX.c:115:22
   145d4:    00 3b             	r0 = [sp+108]			  ## burg_modified_FIX.c:115:22
   145d6:    c0 22             	r0 += 0x2			  ## burg_modified_FIX.c:115:22
   145d8:    80 3b             	[sp+108] = r0			  ## burg_modified_FIX.c:115:22
   145da:    00 3c             	r0 = [sp+112]			  ## burg_modified_FIX.c:115:22
   145dc:    f8 3e             	r0 += -0x2			  ## burg_modified_FIX.c:115:22
   145de:    80 3c             	[sp+112] = r0			  ## burg_modified_FIX.c:115:22
   145e0:    00 33             	r0 = [sp+76]			  ## burg_modified_FIX.c:115:22
   145e2:    c0 21             	r0 += 0x1			  ## burg_modified_FIX.c:115:22
   145e4:    e0 d6             	r0 = r14  #			  ## burg_modified_FIX.c:115:22
   145e6:    80 33             		 [sp+76] = r0			  ## burg_modified_FIX.c:115:22
   145e8:    d4 e9 60 80       	r8 = [sp+96]			  ## burg_modified_FIX.c:115:22
   145ec:    4b ff 00 68 fb fd 	ifs (r6 < r8) goto -0x40a <silk_burg_modified_c+0x29C : 141e8 >
   145f2:    60 f0 80 2b       	r2 = 0x10000  #
   145f6:    20 27             		 r0 = [sp+156]			  ## burg_modified_FIX.c:345:10
   145f8:    d8 ec 04 c0       	r12 = [r0++=0x4]			  ## burg_modified_FIX.c:345:10
   145fc:    c5 d4             	r13 = 0  #
   145fe:    a0 27             		 [sp+156] = r0
   14600:    c2 14             	r10 = 0
   14602:    14 83             	goto 0x46 <silk_burg_modified_c+0x6FE : 1464a >
   14604:    d3 d6             	r3 = r13  #			  ## burg_modified_FIX.c:350:11
   14606:    20 27             		 r0 = [sp+156]			  ## burg_modified_FIX.c:350:11
   14608:    d7 ec 0c 57       	r5 = [r0+-0x84]			  ## burg_modified_FIX.c:348:12
   1460c:    05 f1 00 51       	r5 = r5 + 0x100  #			  ## burg_modified_FIX.c:348:12
   14610:    06 60             		 r6 = [r0+0x0] 			  ## burg_modified_FIX.c:349:11
   14612:    dd a9             	r5 = r5 >>> 0x9			  ## burg_modified_FIX.c:348:12
   14614:    a7 f0 00 50       	r7 = 0x0 - r5  #			  ## burg_modified_FIX.c:351:17
   14618:    04 37             		 r4 = [sp+92]			  ## burg_modified_FIX.c:351:15
   1461a:    f8 f1 50 96       	r9_r8 = r5 * r6 (s)  #			  ## burg_modified_FIX.c:349:11
   1461e:    c7 05             		 [r4++=0x4] = r7			  ## burg_modified_FIX.c:351:15
   14620:    d0 f1 00 89       	r9_r8 >>= 0x10  #			  ## burg_modified_FIX.c:349:11
   14624:    84 37             		 [sp+92] = r4			  ## burg_modified_FIX.c:349:11
   14626:    b4 e0 80 6c       	r6 = r8 + r12			  ## burg_modified_FIX.c:349:11
   1462a:    b8 e0 90 7d       	r7 = r9 + r13 + c			  ## burg_modified_FIX.c:349:11
   1462e:    f8 e1 50 95       	r9_r8 = r5 * r5 (s)			  ## burg_modified_FIX.c:350:11
   14632:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## burg_modified_FIX.c:350:11
   14636:    82 18             	r2 += r8			  ## burg_modified_FIX.c:350:11
   14638:    b8 e0 30 39       	r3 = r3 + r9 + c			  ## burg_modified_FIX.c:350:11
   1463c:    d4 e9 60 80       	r8 = [sp+96]
   14640:    c0 24             	r0 += 0x4			  ## burg_modified_FIX.c:347:3
   14642:    0a f1 01 a0       	r10 = r10 + 0x1  #			  ## burg_modified_FIX.c:349:11
   14646:    a0 27             		 [sp+156] = r0
   14648:    6c 16             	r12 = r6
   1464a:    88 ed db a1       	ifs (r10 < r8) goto -0x4a <silk_burg_modified_c+0x6B8 : 14604 >
   1464e:    a2 e0 00 20       	r2 = 0x0 - r2			  ## burg_modified_FIX.c:353:14
   14652:    d0 e9 08 00       	r1_r0 = d[sp+8]			  ## burg_modified_FIX.c:353:14
   14656:    f8 e1 20 51       	r5_r4 = r2 * r1 (s)			  ## burg_modified_FIX.c:353:14
   1465a:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## burg_modified_FIX.c:353:14
   1465e:    c5 14             	r13 = 0			  ## burg_modified_FIX.c:353:14
   14660:    b4 e0 40 2c       	r2 = r4 + r12			  ## burg_modified_FIX.c:353:14
   14664:    b8 e0 50 3d       	r3 = r5 + r13 + c			  ## burg_modified_FIX.c:353:14
   14668:    34 88             	goto 0xd0 <silk_burg_modified_c+0x7EE : 1473a >			  ## burg_modified_FIX.c:353:14
   1466a:    02 37             	r2 = [sp+92]
   1466c:    d4 e9 60 80       	r8 = [sp+96]
   14670:    03 33             	r3 = [sp+76]
   14672:    04 84             	goto 0x8 <silk_burg_modified_c+0x730 : 1467c >
   14674:    21 2e             	r1 = [sp+184]			  ## burg_modified_FIX.c:309:16
   14676:    d8 ec 1b 03       	[r1+r3<<2] = r0			  ## burg_modified_FIX.c:309:16
   1467a:    c3 21             	r3 += 0x1			  ## burg_modified_FIX.c:308:4
   1467c:    31 e1 54 32       	r1 = r3 + -0xdac			  ## burg_modified_FIX.c:308:22
   14680:    88 ed f8 11       	ifs (r1 < r8) goto -0x10 <silk_burg_modified_c+0x728 : 14674 >			  ## burg_modified_FIX.c:308:22
   14684:    04 8b             	goto 0x16 <silk_burg_modified_c+0x750 : 1469c >			  ## burg_modified_FIX.c:308:22
   14686:    21 2f             	r1 = [sp+188]			  ## burg_modified_FIX.c:326:18
   14688:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## burg_modified_FIX.c:326:18
   1468c:    01 e1 00 11       	r1 = r1 + 0x100			  ## burg_modified_FIX.c:326:18
   14690:    99 a9             	r1 = r1 >>> 0x9			  ## burg_modified_FIX.c:326:18
   14692:    a1 e0 00 10       	r1 = 0x0 - r1			  ## burg_modified_FIX.c:326:17
   14696:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## burg_modified_FIX.c:326:15
   1469a:    c0 21             	r0 += 0x1			  ## burg_modified_FIX.c:324:23
   1469c:    88 ed f3 01       	ifs (r0 < r8) goto -0x1a <silk_burg_modified_c+0x73A : 14686 >
   146a0:    d0 e9 28 00       	r1_r0 = d[sp+40]
   146a4:    80 fe 23 00       	ifs (r0 <= 0x0) goto 0x46 <silk_burg_modified_c+0x7A2 : 146ee >
   146a8:    41 20             	r1 = 0x0
   146aa:    0a 16             	r10 = r0
   146ac:    c3 14             	r11 = 0
   146ae:    c1 14             	r9 = 0
   146b0:    04 9a             	goto 0x34 <silk_burg_modified_c+0x79A : 146e6 >
   146b2:    d0 e9 b0 20       	r3_r2 = d[sp+176]			  ## burg_modified_FIX.c:69:2
   146b6:    81 d6             	r1 = r8  #			  ## burg_modified_FIX.c:69:2
   146b8:    20 29             		 r0 = [sp+164]			  ## burg_modified_FIX.c:69:2
   146ba:    04 16             	r4 = r0			  ## burg_modified_FIX.c:69:2
   146bc:    05 16             	r5 = r0			  ## burg_modified_FIX.c:69:2
   146be:    51 03             	rep 0xc r1 {			  ## burg_modified_FIX.c:69:2
   146c0:    d4 ed 42 60       		r6 = h[r4++=0x2] (s)			  ## burg_modified_FIX.c:69:2
   146c4:    d4 ed 52 70       		r7 = h[r5++=0x2] (s)			  ## burg_modified_FIX.c:69:2
   146c8:    fc e1 60 37       		r3_r2 += r6 * r7 (s)
                               	}			  ## burg_modified_FIX.c:69:2
   146cc:    f1 58             	if (r1 != 0) goto -0x10 <silk_burg_modified_c+0x772 : 146be >			  ## burg_modified_FIX.c:69:2
   146ce:    d8 e1 03 2a       	r3_r2 >>>= r10			  ## burg_modified_FIX.c:332:23
   146d2:    d0 e9 50 40       	r5_r4 = d[sp+80]			  ## burg_modified_FIX.c:332:8
   146d6:    c4 1e             	r4 = r4 - r2			  ## burg_modified_FIX.c:332:8
   146d8:    d0 e9 51 40       	d[sp+80] = r5_r4			  ## burg_modified_FIX.c:330:4
   146dc:    21 24             	r1 = [sp+144]			  ## burg_modified_FIX.c:330:4
   146de:    10 18             	r0 += r1			  ## burg_modified_FIX.c:330:4
   146e0:    09 f1 01 90       	r9 = r9 + 0x1  #			  ## burg_modified_FIX.c:330:31
   146e4:    a0 29             		 [sp+164] = r0
   146e6:    21 28             	r1 = [sp+160]
   146e8:    81 ed e3 91       	ifs (r9 < r1) goto -0x3a <silk_burg_modified_c+0x766 : 146b2 >
   146ec:    14 80             	goto 0x40 <silk_burg_modified_c+0x7E2 : 1472e >
   146ee:    c1 14             	r9 = 0
   146f0:    04 9b             	goto 0x36 <silk_burg_modified_c+0x7DC : 14728 >
   146f2:    d0 e9 b0 20       	r3_r2 = d[sp+176]			  ## opus.c:206:4
   146f6:    85 d6             	r5 = r8  #			  ## opus.c:206:4
   146f8:    20 29             		 r0 = [sp+164]			  ## opus.c:206:4
   146fa:    01 16             	r1 = r0			  ## opus.c:206:4
   146fc:    04 16             	r4 = r0			  ## opus.c:206:4
   146fe:    55 03             	rep 0xc r5 {			  ## opus.c:206:4
   14700:    d4 ed 12 60       		r6 = h[r1++=0x2] (s)			  ## opus.c:206:4
   14704:    d4 ed 42 70       		r7 = h[r4++=0x2] (s)			  ## opus.c:206:4
   14708:    fc e1 60 37       		r3_r2 += r6 * r7 (s)
                               	}			  ## opus.c:206:4
   1470c:    f5 58             	if (r5 != 0) goto -0x10 <silk_burg_modified_c+0x7B2 : 146fe >			  ## opus.c:206:4
   1470e:    21 2a             	r1 = [sp+168]			  ## burg_modified_FIX.c:337:11
   14710:    c8 e1 20 11       	r1 = r2 << r1			  ## burg_modified_FIX.c:337:11
   14714:    d0 e9 50 20       	r3_r2 = d[sp+80]			  ## burg_modified_FIX.c:337:8
   14718:    2a 1e             	r2 = r2 - r1			  ## burg_modified_FIX.c:337:8
   1471a:    d0 e9 51 20       	d[sp+80] = r3_r2			  ## burg_modified_FIX.c:335:4
   1471e:    21 24             	r1 = [sp+144]			  ## burg_modified_FIX.c:335:4
   14720:    10 18             	r0 += r1			  ## burg_modified_FIX.c:335:4
   14722:    09 f1 01 90       	r9 = r9 + 0x1  #			  ## burg_modified_FIX.c:335:31
   14726:    a0 29             		 [sp+164] = r0
   14728:    21 28             	r1 = [sp+160]
   1472a:    81 ed e2 91       	ifs (r9 < r1) goto -0x3c <silk_burg_modified_c+0x7A6 : 146f2 >
   1472e:    d0 e9 50 00       	r1_r0 = d[sp+80]			  ## burg_modified_FIX.c:341:14
   14732:    f8 e1 00 3e       	r3_r2 = r0 * r14 (s)			  ## burg_modified_FIX.c:341:14
   14736:    d0 e1 0e 29       	r3_r2 >>= 0x1e			  ## burg_modified_FIX.c:341:14
   1473a:    d0 e9 10 00       	r1_r0 = d[sp+16]
   1473e:    92 60             	[r1+0x0] = r2			  ## burg_modified_FIX.c:353:12
   14740:    21 2a             	r1 = [sp+168]			  ## burg_modified_FIX.c:342:14
   14742:    81 60             	[r0+0x0] = r1			  ## burg_modified_FIX.c:342:14
   14744:    22 95             	sp += 0xd4			  ## burg_modified_FIX.c:342:14
   14746:    5f 04             	{pc, r15-r4} = [sp++]			  ## burg_modified_FIX.c:356:1


silk_A2NLSF_trans_poly:
   14748:    76 04             	[--sp] = {rets, r6-r4}			  ## find_LPC_FIX.c:88:0
   1474a:    12 a2             	r2 = r1 << 0x2			  ## find_LPC_FIX.c:91:7
   1474c:    02 18             	r2 += r0			  ## find_LPC_FIX.c:91:7
   1474e:    43 22             	r3 = 0x2			  ## find_LPC_FIX.c:91:7
   14750:    04 92             	goto 0x24 <silk_A2NLSF_trans_poly+0x2E : 14776 >			  ## find_LPC_FIX.c:91:7
   14752:    24 16             	r4 = r2
   14754:    15 16             	r5 = r1
   14756:    04 85             	goto 0xa <silk_A2NLSF_trans_poly+0x1A : 14762 >
   14758:    46 60             	r6 = [r4+0x0] 			  ## find_LPC_FIX.c:93:18
   1475a:    68 e8 fa 46       	[r4+-0x8] -= r6			  ## find_LPC_FIX.c:93:15
   1475e:    fc 3c             	r4 += -0x4			  ## find_LPC_FIX.c:92:3
   14760:    fd 3f             	r5 += -0x1			  ## find_LPC_FIX.c:92:24
   14762:    03 ee f9 51       	ifs (r5 > r3) goto -0xe <silk_A2NLSF_trans_poly+0x10 : 14758 >
   14766:    34 a2             	r4 = r3 << 0x2			  ## find_LPC_FIX.c:95:17
   14768:    05 16             	r5 = r0			  ## find_LPC_FIX.c:95:17
   1476a:    dc ec 52 44       	r4 = [++r5=r4]			  ## find_LPC_FIX.c:95:17
   1476e:    44 a1             	r4 = r4 << 0x1			  ## find_LPC_FIX.c:95:17
   14770:    68 e8 fa 54       	[r5+-0x8] -= r4			  ## find_LPC_FIX.c:95:14
   14774:    c3 21             	r3 += 0x1			  ## find_LPC_FIX.c:91:24
   14776:    81 ee ec 31       	ifs (r3 <= r1) goto -0x28 <silk_A2NLSF_trans_poly+0xA : 14752 >
   1477a:    56 04             	{pc, r6-r4} = [sp++]			  ## find_LPC_FIX.c:97:1


silk_A2NLSF_init:
   1477c:    78 04             	[--sp] = {rets, r8-r4}			  ## find_LPC_FIX.c:181:0
   1477e:    38 16             	r8 = r3			  ## find_LPC_FIX.c:181:0
   14780:    25 16             	r5 = r2			  ## find_LPC_FIX.c:181:0
   14782:    60 e0 80 2b       	r2 = 0x10000			  ## find_LPC_FIX.c:185:8
   14786:    d8 ec 1b 23       	[r1+r3<<2] = r2			  ## find_LPC_FIX.c:185:8
   1478a:    d8 ec 5b 23       	[r5+r3<<2] = r2			  ## find_LPC_FIX.c:186:8
   1478e:    32 a2             	r2 = r3 << 0x2			  ## find_LPC_FIX.c:185:2
   14790:    20 18             	r0 += r2			  ## find_LPC_FIX.c:187:7
   14792:    42 20             	r2 = 0x0
   14794:    13 3f             	r3 = -0x1
   14796:    04 92             	goto 0x24 <silk_A2NLSF_init+0x40 : 147bc >
   14798:    d8 ec 0a 63       	r6 = [r0+r3<<2]			  ## find_LPC_FIX.c:188:13
   1479c:    d8 ec 0a 72       	r7 = [r0+r2<<2]			  ## find_LPC_FIX.c:188:35
   147a0:    76 18             	r6 += r7			  ## find_LPC_FIX.c:188:33
   147a2:    a6 e0 00 60       	r6 = 0x0 - r6			  ## find_LPC_FIX.c:188:33
   147a6:    d8 ec 1b 62       	[r1+r2<<2] = r6			  ## find_LPC_FIX.c:188:10
   147aa:    d8 ec 0a 63       	r6 = [r0+r3<<2]			  ## find_LPC_FIX.c:189:13
   147ae:    d8 ec 0a 72       	r7 = [r0+r2<<2]			  ## find_LPC_FIX.c:189:35
   147b2:    f6 1f             	r6 = r7 - r6			  ## find_LPC_FIX.c:189:33
   147b4:    d8 ec 5b 62       	[r5+r2<<2] = r6			  ## find_LPC_FIX.c:189:10
   147b8:    fb 3f             	r3 += -0x1			  ## find_LPC_FIX.c:187:2
   147ba:    c2 21             	r2 += 0x1			  ## find_LPC_FIX.c:187:23
   147bc:    88 ed ec 21       	ifs (r2 < r8) goto -0x28 <silk_A2NLSF_init+0x1C : 14798 >			  ## find_LPC_FIX.c:187:2
   147c0:    30 e1 fc 1f       	r0 = r1 + -0x4			  ## find_LPC_FIX.c:182:11
   147c4:    32 e1 fc 5f       	r2 = r5 + -0x4			  ## find_LPC_FIX.c:182:11
   147c8:    83 16             	r3 = r8
   147ca:    04 8c             	goto 0x18 <silk_A2NLSF_init+0x68 : 147e4 >
   147cc:    d8 ec 1a 63       	r6 = [r1+r3<<2]			  ## find_LPC_FIX.c:196:17
   147d0:    37 a2             	r7 = r3 << 0x2			  ## find_LPC_FIX.c:196:17
   147d2:    8c 1d             	r4 = r0 + r7			  ## find_LPC_FIX.c:196:14
   147d4:    68 e8 02 46       	[r4+0x0] -= r6			  ## find_LPC_FIX.c:196:14
   147d8:    d8 ec 5a 43       	r4 = [r5+r3<<2]			  ## find_LPC_FIX.c:197:17
   147dc:    ae 1d             	r6 = r2 + r7			  ## find_LPC_FIX.c:197:14
   147de:    68 e8 00 64       	[r6+0x0] += r4			  ## find_LPC_FIX.c:197:14
   147e2:    fb 3f             	r3 += -0x1			  ## find_LPC_FIX.c:196:8
   147e4:    03 fd f2 03       	ifs (r3 >= 0x1) goto -0x1c <silk_A2NLSF_init+0x50 : 147cc >
   147e8:    10 16             	r0 = r1			  ## find_LPC_FIX.c:201:2
   147ea:    81 16             	r1 = r8			  ## find_LPC_FIX.c:201:2
   147ec:    51 8d             	call -0xa6 <silk_A2NLSF_trans_poly : 14748 >			  ## find_LPC_FIX.c:201:2
   147ee:    50 16             	r0 = r5			  ## find_LPC_FIX.c:202:2
   147f0:    51 8b             	call -0xaa <silk_A2NLSF_trans_poly : 14748 >			  ## find_LPC_FIX.c:202:2
   147f2:    58 04             	{pc, r8-r4} = [sp++]			  ## find_LPC_FIX.c:203:1


silk_A2NLSF:
   147f4:    7f 04             	[--sp] = {rets, r15-r4}			  ## find_LPC_FIX.c:216:0
   147f6:    e2 8e             	sp += -0x48			  ## find_LPC_FIX.c:216:0
   147f8:    1b 16             	r11 = r1			  ## find_LPC_FIX.c:216:0
   147fa:    41 e0 30 36       	r1 = 0x3630 <WOLASynthesisFilter_Float_M256_m4_r1+0xE2C : 3630 >			  ## find_LPC_FIX.c:227:19
   147fe:    0e 1c             	r6 = r0 + r1			  ## find_LPC_FIX.c:227:19
   14800:    d1 20             	r1 += 0x40			  ## find_LPC_FIX.c:229:23
   14802:    b4 f0 00 a1       	r10 = r0 + r1  #			  ## find_LPC_FIX.c:229:23
   14806:    86 30             		 [sp+64] = r6			  ## find_LPC_FIX.c:232:10
   14808:    d4 e9 45 a0       	[sp+68] = r10			  ## find_LPC_FIX.c:233:10
   1480c:    c0 f1 31 ec       	r14 = r3 >>> 0x1  #			  ## find_LPC_FIX.c:235:7
   14810:    83 28             		 [sp+32] = r3			  ## find_LPC_FIX.c:235:7
   14812:    20 d6             	r0 = r2  #			  ## find_LPC_FIX.c:237:2
   14814:    82 24             		 [sp+16] = r2
   14816:    61 16             	r1 = r6			  ## find_LPC_FIX.c:237:2
   14818:    a2 16             	r2 = r10			  ## find_LPC_FIX.c:237:2
   1481a:    e3 16             	r3 = r14			  ## find_LPC_FIX.c:237:2
   1481c:    51 8f             	call -0xa2 <silk_A2NLSF_init : 1477c >			  ## find_LPC_FIX.c:237:2
   1481e:    30 e1 ff ef       	r0 = r14 + -0x1			  ## find_LPC_FIX.c:145:18
   14822:    c0 e1 02 90       	r9 = r0 << 0x2			  ## find_LPC_FIX.c:145:14
   14826:    d8 ec 6a ce       	r12 = [r6+r14<<2]			  ## find_LPC_FIX.c:149:8
   1482a:    b4 e0 60 19       	r1 = r6 + r9			  ## find_LPC_FIX.c:145:14
   1482e:    e8 d6             	r8 = r14  #			  ## find_LPC_FIX.c:156:2
   14830:    81 21             		 [sp+4] = r1			  ## find_LPC_FIX.c:156:2
   14832:    60 e0 00 2b       	r2 = 0x20000			  ## find_LPC_FIX.c:156:2
   14836:    68 03             	rep 0xe r8 {			  ## find_LPC_FIX.c:156:2
   14838:    f8 e1 c0 52       		r5_r4 = r12 * r2 (s)			  ## find_LPC_FIX.c:156:2
   1483c:    d0 e1 00 4d       		r5_r4 >>>= 0x10			  ## find_LPC_FIX.c:156:2
   14840:    18 05             		r0 = [r1++=-0x4] 			  ## find_LPC_FIX.c:156:2
   14842:    b4 e0 40 c0       		r12 = r4 + r0
                               	}			  ## find_LPC_FIX.c:156:2
   14846:    60 e0 00 0b       	r0 = 0x20000			  ## find_LPC_FIX.c:156:2
   1484a:    8c fd 07 00       	ifs (r12 < 0x0) goto 0xe <silk_A2NLSF+0x68 : 1485c >			  ## find_LPC_FIX.c:245:6
   1484e:    b4 e0 a0 09       	r0 = r10 + r9
   14852:    67 d6             	r7 = r6  #
   14854:    80 20             		 [sp] = r0
   14856:    40 20             	r0 = 0x0
   14858:    80 29             	[sp+36] = r0
   1485a:    04 94             	goto 0x28 <silk_A2NLSF+0x90 : 14884 >
   1485c:    41 20             	r1 = 0x0			  ## find_LPC_FIX.c:247:13
   1485e:    50 ed b1 10       	h[r11+0x0] = r1			  ## find_LPC_FIX.c:247:13
   14862:    d8 ec aa ce       	r12 = [r10+r14<<2]			  ## find_LPC_FIX.c:149:8
   14866:    b4 e0 a0 29       	r2 = r10 + r9			  ## find_LPC_FIX.c:145:14
   1486a:    e8 d6             	r8 = r14  #			  ## find_LPC_FIX.c:156:2
   1486c:    82 20             		 [sp] = r2			  ## find_LPC_FIX.c:156:2
   1486e:    68 03             	rep 0xe r8 {			  ## find_LPC_FIX.c:156:2
   14870:    f8 e1 c0 50       		r5_r4 = r12 * r0 (s)			  ## find_LPC_FIX.c:156:2
   14874:    d0 e1 00 4d       		r5_r4 >>>= 0x10			  ## find_LPC_FIX.c:156:2
   14878:    29 05             		r1 = [r2++=-0x4] 			  ## find_LPC_FIX.c:156:2
   1487a:    b4 e0 40 c1       		r12 = r4 + r1
                               	}			  ## find_LPC_FIX.c:156:2
   1487e:    40 21             	r0 = 0x1
   14880:    a7 d6             	r7 = r10  #
   14882:    80 29             		 [sp+36] = r0
   14884:    d4 e9 1d 90       	[sp+28] = r9
   14888:    86 23             	[sp+12] = r6
   1488a:    d4 e9 19 b0       	[sp+24] = r11
   1488e:    40 20             	r0 = 0x0
   14890:    d4 e9 09 a0       	[sp+8] = r10
   14894:    14 9b             	goto 0x76 <silk_A2NLSF+0x118 : 1490c >
   14896:    c0 2b             	r0 += 0xb			  ## find_LPC_FIX.c:337:43
   14898:    80 db             	r0 *= r8  #			  ## find_LPC_FIX.c:337:43
   1489a:    05 24             		 r5 = [sp+16]			  ## find_LPC_FIX.c:337:43
   1489c:    a2 f0 80 0b       	r2 = 0x10000 - r0  #			  ## find_LPC_FIX.c:337:41
   148a0:    01 28             		 r1 = [sp+32]			  ## find_LPC_FIX.c:337:5
   148a2:    50 16             	r0 = r5			  ## find_LPC_FIX.c:337:5
   148a4:    bf ea 46 f0       	call -0x1f74 <silk_bwexpander_32 : 12934 >			  ## find_LPC_FIX.c:337:5
   148a8:    50 d6             	r0 = r5  #			  ## find_LPC_FIX.c:339:5
   148aa:    04 23             		 r4 = [sp+12]			  ## find_LPC_FIX.c:339:5
   148ac:    41 16             	r1 = r4			  ## find_LPC_FIX.c:339:5
   148ae:    d4 e9 08 a0       	r10 = [sp+8]			  ## find_LPC_FIX.c:339:5
   148b2:    a2 16             	r2 = r10			  ## find_LPC_FIX.c:339:5
   148b4:    e3 16             	r3 = r14			  ## find_LPC_FIX.c:339:5
   148b6:    bf ea 61 ff       	call -0x13e <silk_A2NLSF_init : 1477c >			  ## find_LPC_FIX.c:339:5
   148ba:    d8 ec 4a ce       	r12 = [r4+r14<<2]			  ## find_LPC_FIX.c:149:8
   148be:    60 f0 00 0b       	r0 = 0x20000  #			  ## find_LPC_FIX.c:156:2
   148c2:    02 21             		 r2 = [sp+4]			  ## find_LPC_FIX.c:156:2
   148c4:    e1 16             	r1 = r14			  ## find_LPC_FIX.c:156:2
   148c6:    61 03             	rep 0xe r1 {			  ## find_LPC_FIX.c:156:2
   148c8:    f8 e1 c0 70       		r7_r6 = r12 * r0 (s)			  ## find_LPC_FIX.c:156:2
   148cc:    d0 e1 00 6d       		r7_r6 >>>= 0x10			  ## find_LPC_FIX.c:156:2
   148d0:    2d 05             		r5 = [r2++=-0x4] 			  ## find_LPC_FIX.c:156:2
   148d2:    b4 e0 60 c5       		r12 = r6 + r5
                               	}			  ## find_LPC_FIX.c:156:2
   148d6:    40 20             	r0 = 0x0
   148d8:    47 d6             	r7 = r4  #
   148da:    80 29             		 [sp+36] = r0
   148dc:    80 16             	r0 = r8
   148de:    7c fe 15 fe       	ifs (r12 > -0x1) goto 0x2a <silk_A2NLSF+0x118 : 1490c >
   148e2:    e2 d6             	r2 = r14  #			  ## find_LPC_FIX.c:156:2
   148e4:    00 26             		 r0 = [sp+24]			  ## find_LPC_FIX.c:345:16
   148e6:    41 20             	r1 = 0x0			  ## find_LPC_FIX.c:345:16
   148e8:    60 f0 00 0b       	r0 = 0x20000  #			  ## find_LPC_FIX.c:156:2
   148ec:    89 60             		 h[r0+0x0] = r1			  ## find_LPC_FIX.c:345:16
   148ee:    d8 ec aa ce       	r12 = [r10+r14<<2]			  ## find_LPC_FIX.c:149:8
   148f2:    01 20             	r1 = [sp]			  ## find_LPC_FIX.c:156:2
   148f4:    62 03             	rep 0xe r2 {			  ## find_LPC_FIX.c:156:2
   148f6:    f8 e1 c0 70       		r7_r6 = r12 * r0 (s)			  ## find_LPC_FIX.c:156:2
   148fa:    d0 e1 00 6d       		r7_r6 >>>= 0x10			  ## find_LPC_FIX.c:156:2
   148fe:    1d 05             		r5 = [r1++=-0x4] 			  ## find_LPC_FIX.c:156:2
   14900:    b4 e0 60 c5       		r12 = r6 + r5
                               	}			  ## find_LPC_FIX.c:156:2
   14904:    40 21             	r0 = 0x1
   14906:    a7 d6             	r7 = r10  #
   14908:    80 29             		 [sp+36] = r0
   1490a:    80 16             	r0 = r8
   1490c:    c4 d6             	r4 = r12  #
   1490e:    80 25             		 [sp+20] = r0
   14910:    42 21             	r2 = 0x1
   14912:    48 e0 00 20       	r8 = 0x2000 <WOLAAnalysisFilter_Float_M256_m4_r1+0x7FC : 2000 >
   14916:    43 20             	r3 = 0x0
   14918:    20 a1             	r0 = r2 << 0x1			  ## find_LPC_FIX.c:217:16
   1491a:    c1 ff 8c 84 01 00 	r1 = 0x1848c <wtgv2_LSFCosTab_FIX_Q12 : 1848c >			  ## find_LPC_FIX.c:217:16
   14920:    01 d8             	r1 += r0  #			  ## find_LPC_FIX.c:217:16
   14922:    00 27             		 r0 = [sp+28]			  ## find_LPC_FIX.c:217:16
   14924:    70 18             	r0 += r7
   14926:    10 d6             	r0 = r1  #
   14928:    80 2f             		 [sp+60] = r0
   1492a:    21 a8             	r1 = r2 << 0x8			  ## find_LPC_FIX.c:217:16
   1492c:    41 d6             	r1 = r4  #			  ## find_LPC_FIX.c:217:16
   1492e:    81 2e             		 [sp+56] = r1			  ## find_LPC_FIX.c:217:16
   14930:    e2 d6             	r2 = r14  #			  ## find_LPC_FIX.c:156:2
   14932:    82 2d             		 [sp+52] = r2			  ## find_LPC_FIX.c:156:2
   14934:    80 2c             	[sp+48] = r0			  ## find_LPC_FIX.c:156:2
   14936:    54 ed 00 40       	r4 = h[r0+0x0] (s)			  ## find_LPC_FIX.c:259:9
   1493a:    d8 ec 7a be       	r11 = [r7+r14<<2]			  ## find_LPC_FIX.c:149:8
   1493e:    40 a4             	r0 = r4 << 0x4			  ## find_LPC_FIX.c:150:10
   14940:    05 2f             	r5 = [sp+60]			  ## find_LPC_FIX.c:156:2
   14942:    62 03             	rep 0xe r2 {			  ## find_LPC_FIX.c:156:2
   14944:    f8 e1 b0 d0       		r13_r12 = r11 * r0 (s)			  ## find_LPC_FIX.c:156:2
   14948:    d0 e1 00 cd       		r13_r12 >>>= 0x10			  ## find_LPC_FIX.c:156:2
   1494c:    5e 05             		r6 = [r5++=-0x4] 			  ## find_LPC_FIX.c:156:2
   1494e:    b4 e0 c0 b6       		r11 = r12 + r6
                               	}			  ## find_LPC_FIX.c:156:2
   14952:    01 fe 02 00       	ifs (r1 > 0x0) goto 0x4 <silk_A2NLSF+0x166 : 1495a >
   14956:    03 ed 14 b0       	ifs (r11 >= r3) goto 0x28 <silk_A2NLSF+0x18E : 14982 >
   1495a:    81 fd 04 00       	ifs (r1 < 0x0) goto 0x8 <silk_A2NLSF+0x172 : 14966 >
   1495e:    a0 e0 00 30       	r0 = 0x0 - r3			  ## find_LPC_FIX.c:263:58
   14962:    80 ee 0e b0       	ifs (r11 <= r0) goto 0x1c <silk_A2NLSF+0x18E : 14982 >			  ## find_LPC_FIX.c:263:58
   14966:    b1 d6             	r1 = r11  #
   14968:    00 2e             		 r0 = [sp+56]			  ## find_LPC_FIX.c:325:10
   1496a:    00 e1 00 01       	r0 = r0 + 0x100			  ## find_LPC_FIX.c:325:10
   1496e:    48 d6             	r8 = r4  #			  ## find_LPC_FIX.c:325:10
   14970:    80 2e             		 [sp+56] = r0			  ## find_LPC_FIX.c:325:10
   14972:    00 2c             	r0 = [sp+48]			  ## find_LPC_FIX.c:325:10
   14974:    c0 22             	r0 += 0x2			  ## find_LPC_FIX.c:325:10
   14976:    02 2d             	r2 = [sp+52]			  ## find_LPC_FIX.c:325:10
   14978:    c2 21             	r2 += 0x1			  ## find_LPC_FIX.c:320:5
   1497a:    43 20             	r3 = 0x0
   1497c:    92 fd d8 03       	ifs (r2 < 0x81) goto -0x50 <silk_A2NLSF+0x13C : 14930 >
   14980:    34 8c             	goto 0xd8 <silk_A2NLSF+0x266 : 14a5a >
   14982:    42 20             	r2 = 0x0
   14984:    40 e0 00 ff       	r0 = -0x100 <RAM_LIMIT_H+0xFFFFFFFFFFE5FF00 : ffffffffffffff00 >
   14988:    80 2a             	[sp+40] = r0
   1498a:    d4 e9 2d b0       	[sp+44] = r11
   1498e:    14 8c             	goto 0x58 <silk_A2NLSF+0x1F4 : 149e8 >
   14990:    b4 e0 80 04       	r0 = r8 + r4			  ## find_LPC_FIX.c:275:12
   14994:    66 e1 01 00       	r6 = r0 & 0x1			  ## find_LPC_FIX.c:275:12
   14998:    d8 ec 7a 5e       	r5 = [r7+r14<<2]			  ## find_LPC_FIX.c:149:8
   1499c:    88 a1             	r0 = r0 >>> 0x1			  ## find_LPC_FIX.c:275:12
   1499e:    60 18             	r0 += r6			  ## find_LPC_FIX.c:275:12
   149a0:    06 a4             	r6 = r0 << 0x4			  ## find_LPC_FIX.c:150:10
   149a2:    ef 16             	r15 = r14
   149a4:    e3 16             	r3 = r14			  ## find_LPC_FIX.c:156:2
   149a6:    79 d6             	r9 = r7  #			  ## find_LPC_FIX.c:156:2
   149a8:    07 2f             		 r7 = [sp+60]			  ## find_LPC_FIX.c:156:2
   149aa:    73 03             	rep 0x10 r3 {			  ## find_LPC_FIX.c:156:2
   149ac:    f8 e1 50 d6       		r13_r12 = r5 * r6 (s)			  ## find_LPC_FIX.c:156:2
   149b0:    d0 e1 00 cd       		r13_r12 >>>= 0x10			  ## find_LPC_FIX.c:156:2
   149b4:    df ec 7c ef       		r14 = [r7++=-0x4]			  ## find_LPC_FIX.c:156:2
   149b8:    b4 e0 c0 5e       		r5 = r12 + r14
                               	}			  ## find_LPC_FIX.c:156:2
   149bc:    01 fe 02 00       	ifs (r1 > 0x0) goto 0x4 <silk_A2NLSF+0x1D0 : 149c4 >
   149c0:    75 fe 04 fe       	ifs (r5 > -0x1) goto 0x8 <silk_A2NLSF+0x1D8 : 149cc >
   149c4:    81 fd 06 00       	ifs (r1 < 0x0) goto 0xc <silk_A2NLSF+0x1E0 : 149d4 >
   149c8:    05 fd 04 02       	ifs (r5 >= 0x1) goto 0x8 <silk_A2NLSF+0x1E0 : 149d4 >
   149cc:    04 d6             	r4 = r0  #
   149ce:    85 2b             		 [sp+44] = r5
   149d0:    80 16             	r0 = r8
   149d2:    04 86             	goto 0xc <silk_A2NLSF+0x1EC : 149e0 >
   149d4:    63 20             	r3 = 0x80			  ## find_LPC_FIX.c:287:14
   149d6:    a3 da             	r3 >>= r2  #			  ## find_LPC_FIX.c:287:14
   149d8:    01 2a             		 r1 = [sp+40]			  ## find_LPC_FIX.c:287:14
   149da:    31 18             	r1 += r3			  ## find_LPC_FIX.c:287:14
   149dc:    51 d6             	r1 = r5  #
   149de:    81 2a             		 [sp+40] = r1
   149e0:    fe 16             	r14 = r15
   149e2:    c2 21             	r2 += 0x1			  ## find_LPC_FIX.c:273:47
   149e4:    08 16             	r8 = r0
   149e6:    97 16             	r7 = r9
   149e8:    82 f8 d2 07       	if (r2 != 0x3) goto -0x5c <silk_A2NLSF+0x19C : 14990 >
   149ec:    43 21             	r3 = 0x1			  ## find_LPC_FIX.c:264:12
   149ee:    bb e8 00 00       	if (r11 != 0x0) {
   149f2:    43 20             		r3 = 0x0
                               	}
   149f4:    30 f4 00 21       	r2 = abs(r1)  #			  ## find_LPC_FIX.c:292:8
   149f8:    00 2b             		 r0 = [sp+44]
   149fa:    10 1e             	r0 = r1 - r0
   149fc:    2a ff 80 2b 05 00 	ifs (r2 >= 0x10000) goto 0xa <silk_A2NLSF+0x218 : 14a0c >			  ## find_LPC_FIX.c:292:8
   14a02:    10 47             	if (r0 == 0) goto 0x4e <silk_A2NLSF+0x25E : 14a52 >
   14a04:    11 a5             	r1 = r1 << 0x5			  ## find_LPC_FIX.c:295:11
   14a06:    8a a1             	r2 = r0 >>> 0x1			  ## find_LPC_FIX.c:295:62
   14a08:    21 18             	r1 += r2			  ## find_LPC_FIX.c:295:60
   14a0a:    04 81             	goto 0x2 <silk_A2NLSF+0x21A : 14a0e >			  ## find_LPC_FIX.c:295:60
   14a0c:    88 a5             	r0 = r0 >>> 0x5			  ## find_LPC_FIX.c:301:14
   14a0e:    f4 f1 11 00       	r0 = r1 / r0 (s)  #
   14a12:    01 2a             		 r1 = [sp+40]
   14a14:    01 d8             	r1 += r0  #
   14a16:    02 29             		 r2 = [sp+36]
   14a18:    00 2e             	r0 = [sp+56]
   14a1a:    10 18             	r0 += r1			  ## SigProc_FIX.h:354:18
   14a1c:    41 e0 ff 7f       	r1 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## SigProc_FIX.h:354:13
   14a20:    35 f4 01 01       	r0 = smin(r0, r1)  #			  ## SigProc_FIX.h:354:13
   14a24:    01 26             		 r1 = [sp+24]			  ## find_LPC_FIX.c:303:20
   14a26:    d8 ed 19 02       	h[r1+r2<<1] = r0			  ## find_LPC_FIX.c:303:20
   14a2a:    c2 21             	r2 += 0x1			  ## find_LPC_FIX.c:307:11
   14a2c:    00 28             	r0 = [sp+32]			  ## find_LPC_FIX.c:308:8
   14a2e:    00 ed 2c 20       	ifs (r2 >= r0) goto 0x58 <silk_A2NLSF+0x296 : 14a8a >			  ## find_LPC_FIX.c:308:8
   14a32:    60 e1 01 20       	r0 = r2 & 0x1			  ## find_LPC_FIX.c:313:20
   14a36:    c9 80             	r1 = sp + 64			  ## find_LPC_FIX.c:313:20
   14a38:    d8 ec 1a 70       	r7 = [r1+r0<<2]			  ## find_LPC_FIX.c:313:8
   14a3c:    00 2c             	r0 = [sp+48]			  ## find_LPC_FIX.c:316:10
   14a3e:    57 ed 0e 8f       	r8 = h[r0+-0x2] (s)			  ## find_LPC_FIX.c:316:10
   14a42:    60 f1 02 20       	r0 = r2 & 0x2  #			  ## find_LPC_FIX.c:317:10
   14a46:    82 29             		 [sp+36] = r2			  ## find_LPC_FIX.c:317:10
   14a48:    a0 f0 01 00       	r0 = 0x1 - r0  #			  ## find_LPC_FIX.c:317:10
   14a4c:    02 2d             		 r2 = [sp+52]			  ## find_LPC_FIX.c:317:10
   14a4e:    04 ac             	r4 = r0 << 0xc			  ## find_LPC_FIX.c:317:10
   14a50:    b7 83             	goto -0x13a <silk_A2NLSF+0x124 : 14918 >
   14a52:    02 29             	r2 = [sp+36]
   14a54:    00 2e             	r0 = [sp+56]
   14a56:    01 2a             	r1 = [sp+40]
   14a58:    f7 80             	goto -0x40 <silk_A2NLSF+0x226 : 14a1a >
   14a5a:    00 25             	r0 = [sp+20]
   14a5c:    08 e1 01 00       	r8 = r0 + 0x1			  ## find_LPC_FIX.c:326:6
   14a60:    88 fd 19 3f       	ifs (r8 < 0x1f) goto -0x1ce <silk_A2NLSF+0xA2 : 14896 >			  ## find_LPC_FIX.c:327:9
   14a64:    60 f0 00 1c       	r1 = 0x8000  #			  ## find_LPC_FIX.c:329:30
   14a68:    00 28             		 r0 = [sp+32]			  ## find_LPC_FIX.c:329:30
   14a6a:    c0 21             	r0 += 0x1			  ## find_LPC_FIX.c:329:30
   14a6c:    f4 f1 11 00       	r0 = r1 / r0 (s)  #			  ## find_LPC_FIX.c:329:30
   14a70:    03 26             		 r3 = [sp+24]			  ## find_LPC_FIX.c:329:30
   14a72:    b8 60             	h[r3+0x0] = r0			  ## find_LPC_FIX.c:329:16
   14a74:    40 21             	r0 = 0x1
   14a76:    04 86             	goto 0xc <silk_A2NLSF+0x290 : 14a84 >
   14a78:    39 60             	r1 = h[r3+0x0] (u)			  ## find_LPC_FIX.c:331:31
   14a7a:    0a 81             	r2 = r0 + 0x1			  ## find_LPC_FIX.c:331:31
   14a7c:    21 1b             	r1 *= r2			  ## find_LPC_FIX.c:331:31
   14a7e:    d8 ed 39 10       	h[r3+r0<<1] = r1			  ## find_LPC_FIX.c:331:17
   14a82:    20 16             	r0 = r2			  ## find_LPC_FIX.c:331:17
   14a84:    01 28             	r1 = [sp+32]			  ## find_LPC_FIX.c:330:6
   14a86:    81 ed f7 01       	ifs (r0 < r1) goto -0x12 <silk_A2NLSF+0x284 : 14a78 >			  ## find_LPC_FIX.c:330:6
   14a8a:    02 92             	sp += 0x48
   14a8c:    5f 04             	{pc, r15-r4} = [sp++]			  ## find_LPC_FIX.c:356:1


silk_find_LPC_FIX:
   14a8e:    78 04             	[--sp] = {rets, r8-r4}			  ## find_LPC_FIX.c:371:0
   14a90:    e2 99             	sp += -0x1c			  ## find_LPC_FIX.c:371:0
   14a92:    04 16             	r4 = r0			  ## find_LPC_FIX.c:371:0
   14a94:    17 e1 30 44       	r7 = r4 + 0x1430			  ## find_LPC_FIX.c:371:0
   14a98:    48 f0 24 10       	r8 = 0x1024  # <WOLASynthesisFilter_Float_M128_m4_r1+0x20 : 1024 >			  ## find_LPC_FIX.c:385:18
   14a9c:    70 62             		 r0 = [r7+0x8] 			  ## find_LPC_FIX.c:382:25
   14a9e:    76 6a             	r6 = [r7+0x28] 			  ## find_LPC_FIX.c:382:48
   14aa0:    45 24             	r5 = 0x4			  ## find_LPC_FIX.c:382:48
   14aa2:    d8 ee 41 58       	b[r4+r8] = r5			  ## find_LPC_FIX.c:385:36
   14aa6:    18 d6             	r8 = r1  #			  ## find_LPC_FIX.c:385:36
   14aa8:    75 60             		 r5 = [r7+0x0] 			  ## find_LPC_FIX.c:388:100
   14aaa:    60 d8             	r0 += r6  #			  ## find_LPC_FIX.c:382:38
   14aac:    86 24             		 [sp+16] = r6			  ## find_LPC_FIX.c:388:2
   14aae:    85 23             	[sp+12] = r5			  ## find_LPC_FIX.c:388:2
   14ab0:    40 f0 f0 35       	r0 = 0x35f0  # <WOLASynthesisFilter_Float_M256_m4_r1+0xDEC : 35f0 >			  ## find_LPC_FIX.c:377:19
   14ab4:    80 22             		 [sp+8] = r0			  ## find_LPC_FIX.c:388:2
   14ab6:    d0 e9 01 20       	d[sp] = r3_r2			  ## find_LPC_FIX.c:388:2
   14aba:    46 1c             	r6 = r4 + r0			  ## find_LPC_FIX.c:377:19
   14abc:    89 98             	r1 = sp + 24			  ## find_LPC_FIX.c:377:19
   14abe:    8b 94             	r3 = sp + 20
   14ac0:    40 16             	r0 = r4			  ## find_LPC_FIX.c:388:2
   14ac2:    32 16             	r2 = r3			  ## find_LPC_FIX.c:388:2
   14ac4:    63 16             	r3 = r6			  ## find_LPC_FIX.c:388:2
   14ac6:    bf ea 41 fa       	call -0xb7e <silk_burg_modified_c : 13f4c >			  ## find_LPC_FIX.c:388:2
   14aca:    40 d6             	r0 = r4  #			  ## find_LPC_FIX.c:392:2
   14acc:    73 6a             		 r3 = [r7+0x28] 			  ## find_LPC_FIX.c:392:46
   14ace:    81 16             	r1 = r8			  ## find_LPC_FIX.c:392:2
   14ad0:    62 16             	r2 = r6			  ## find_LPC_FIX.c:392:2
   14ad2:    bf ea 8f fe       	call -0x2e2 <silk_A2NLSF : 147f4 >			  ## find_LPC_FIX.c:392:2
   14ad6:    02 87             	sp += 0x1c
   14ad8:    58 04             	{pc, r8-r4} = [sp++]			  ## find_LPC_FIX.c:393:1


silk_NLSF_VQ_weights_laroia:
   14ada:    7a 04             	[--sp] = {rets, r10-r4}			  ## process_NLSFs.c:38:0
   14adc:    54 ed 10 30       	r3 = h[r1+0x0] (s)			  ## process_NLSFs.c:46:27
   14ae0:    34 16             	r4 = r3			  ## SigProc_FIX.h:360:13
   14ae2:    b3 ee 01 00       	ifs (r3 <= 0x1) {			  ## SigProc_FIX.h:360:13
   14ae6:    44 21             		r4 = 0x1
                               	}			  ## SigProc_FIX.h:360:13
   14ae8:    54 ed 12 60       	r6 = h[r1+0x2] (s)			  ## process_NLSFs.c:48:27
   14aec:    60 e0 00 8b       	r8 = 0x20000			  ## process_NLSFs.c:47:13
   14af0:    f4 e1 80 54       	r5 = r8 / r4 (u)			  ## process_NLSFs.c:47:13
   14af4:    eb 1e             	r3 = r6 - r3			  ## process_NLSFs.c:48:42
   14af6:    b3 ee 01 00       	ifs (r3 <= 0x1) {
   14afa:    43 21             		r3 = 0x1
                               	}			  ## SigProc_FIX.h:360:13
   14afc:    f4 e1 80 43       	r4 = r8 / r3 (u)			  ## process_NLSFs.c:49:13
   14b00:    4b 1d             	r3 = r4 + r5			  ## process_NLSFs.c:50:57
   14b02:    4a e0 ff 7f       	r10 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## SigProc_FIX.h:350:18
   14b06:    35 e4 30 3a       	r3 = umin(r3, r10)			  ## SigProc_FIX.h:350:13
   14b0a:    39 f1 ff 2f       	r9 = r2 + -0x1  #
   14b0e:    8b 60             		 h[r0+0x0] = r3			  ## process_NLSFs.c:50:20
   14b10:    46 20             	r6 = 0x0
   14b12:    14 80             	goto 0x40 <silk_NLSF_VQ_weights_laroia+0x7A : 14b54 >
   14b14:    63 a1             	r3 = r6 << 0x1			  ## process_NLSFs.c:55:28
   14b16:    9f 1c             	r7 = r1 + r3			  ## process_NLSFs.c:55:28
   14b18:    54 ed 72 20       	r2 = h[r7+0x2] (s)			  ## process_NLSFs.c:55:49
   14b1c:    54 ed 74 50       	r5 = h[r7+0x4] (s)			  ## process_NLSFs.c:55:28
   14b20:    d2 1e             	r2 = r5 - r2			  ## process_NLSFs.c:55:47
   14b22:    b2 ee 01 00       	ifs (r2 <= 0x1) {
   14b26:    42 21             		r2 = 0x1
                               	}			  ## SigProc_FIX.h:360:13
   14b28:    f4 e1 80 22       	r2 = r8 / r2 (u)			  ## process_NLSFs.c:56:14
   14b2c:    24 18             	r4 += r2			  ## process_NLSFs.c:57:58
   14b2e:    35 e4 40 4a       	r4 = umin(r4, r10)			  ## SigProc_FIX.h:350:13
   14b32:    03 18             	r3 += r0			  ## process_NLSFs.c:57:21
   14b34:    bc 61             	h[r3+0x2] = r4			  ## process_NLSFs.c:57:21
   14b36:    54 ed 74 40       	r4 = h[r7+0x4] (s)			  ## process_NLSFs.c:60:49
   14b3a:    54 ed 76 50       	r5 = h[r7+0x6] (s)			  ## process_NLSFs.c:60:28
   14b3e:    54 1f             	r4 = r5 - r4			  ## process_NLSFs.c:60:47
   14b40:    b4 ee 01 00       	ifs (r4 <= 0x1) {
   14b44:    44 21             		r4 = 0x1
                               	}			  ## SigProc_FIX.h:360:13
   14b46:    f4 e1 80 44       	r4 = r8 / r4 (u)			  ## process_NLSFs.c:61:14
   14b4a:    42 18             	r2 += r4			  ## process_NLSFs.c:62:62
   14b4c:    35 e4 20 2a       	r2 = umin(r2, r10)			  ## SigProc_FIX.h:350:13
   14b50:    ba 62             	h[r3+0x4] = r2			  ## process_NLSFs.c:62:25
   14b52:    c6 22             	r6 += 0x2			  ## process_NLSFs.c:54:2
   14b54:    6a 81             	r2 = r6 + 0x1			  ## process_NLSFs.c:54:16
   14b56:    89 ed dd 21       	ifs (r2 < r9) goto -0x46 <silk_NLSF_VQ_weights_laroia+0x3A : 14b14 >
   14b5a:    d8 ed 1a 19       	r1 = h[r1+r9<<1] (s)			  ## process_NLSFs.c:67:41
   14b5e:    a1 e0 00 1c       	r1 = 0x8000 - r1			  ## process_NLSFs.c:67:39
   14b62:    b1 ee 01 00       	ifs (r1 <= 0x1) {
   14b66:    41 21             		r1 = 0x1
                               	}
   14b68:    82 16             	r2 = r8			  ## process_NLSFs.c:68:13
   14b6a:    f4 e1 20 11       	r1 = r2 / r1 (u)			  ## process_NLSFs.c:68:13
   14b6e:    41 18             	r1 += r4			  ## process_NLSFs.c:69:61
   14b70:    a2 16             	r2 = r10			  ## SigProc_FIX.h:350:18
   14b72:    35 e4 10 12       	r1 = umin(r1, r2)			  ## SigProc_FIX.h:350:13
   14b76:    d8 ed 09 19       	h[r0+r9<<1] = r1			  ## process_NLSFs.c:69:24
   14b7a:    5a 04             	{pc, r10-r4} = [sp++]			  ## process_NLSFs.c:71:1


silk_NLSF_stabilize:
   14b7c:    7e 04             	[--sp] = {rets, r14-r4}			  ## process_NLSFs.c:293:0
   14b7e:    3c e1 ff 2f       	r12 = r2 + -0x1			  ## process_NLSFs.c:293:0
   14b82:    c0 e1 c1 30       	r3 = r12 << 0x1			  ## process_NLSFs.c:293:0
   14b86:    b4 e0 00 83       	r8 = r0 + r3			  ## process_NLSFs.c:293:0
   14b8a:    c2 14             	r10 = 0			  ## process_NLSFs.c:293:0
   14b8c:    34 92             	goto 0xe4 <silk_NLSF_stabilize+0xF6 : 14c72 >			  ## process_NLSFs.c:293:0
   14b8e:    54 ed 10 90       	r9 = h[r1+0x0] (s)			  ## process_NLSFs.c:306:32
   14b92:    54 ed 00 40       	r4 = h[r0+0x0] (s)			  ## process_NLSFs.c:306:18
   14b96:    b4 e0 42 d9       	r13 = r4 - r9			  ## process_NLSFs.c:306:30
   14b9a:    46 21             	r6 = 0x1
   14b9c:    c3 14             	r11 = 0
   14b9e:    04 8f             	goto 0x1e <silk_NLSF_stabilize+0x42 : 14bbe >
   14ba0:    d8 ed 0a 76       	r7 = h[r0+r6<<1] (s)			  ## process_NLSFs.c:310:15
   14ba4:    d8 ed 1a 36       	r3 = h[r1+r6<<1] (s)			  ## process_NLSFs.c:310:47
   14ba8:    74 1f             	r4 = r7 - r4			  ## process_NLSFs.c:310:45
   14baa:    cb 1e             	r3 = r4 - r3			  ## process_NLSFs.c:310:27
   14bac:    65 16             	r5 = r6			  ## process_NLSFs.c:311:8
   14bae:    13 ed 00 4d       	ifs (r3 >= r13) {			  ## process_NLSFs.c:311:8
   14bb2:    b5 16             		r5 = r11			  ## process_NLSFs.c:311:8
   14bb4:    d3 16             		r3 = r13
                               	}			  ## process_NLSFs.c:311:8
   14bb6:    c6 21             	r6 += 0x1			  ## process_NLSFs.c:309:26
   14bb8:    74 16             	r4 = r7			  ## process_NLSFs.c:310:31
   14bba:    5b 16             	r11 = r5			  ## process_NLSFs.c:310:31
   14bbc:    3d 16             	r13 = r3			  ## process_NLSFs.c:310:31
   14bbe:    8c ee ef 61       	ifs (r6 <= r12) goto -0x22 <silk_NLSF_stabilize+0x24 : 14ba0 >
   14bc2:    54 ed 80 30       	r3 = h[r8+0x0] (s)			  ## process_NLSFs.c:317:30
   14bc6:    d8 ed 1a 72       	r7 = h[r1+r2<<1] (s)			  ## process_NLSFs.c:317:46
   14bca:    a3 e0 00 3c       	r3 = 0x8000 - r3			  ## process_NLSFs.c:317:44
   14bce:    bb 1f             	r3 = r3 - r7			  ## process_NLSFs.c:317:26
   14bd0:    26 16             	r6 = r2			  ## process_NLSFs.c:318:7
   14bd2:    13 ed 00 4d       	ifs (r3 >= r13) {
   14bd6:    b6 16             		r6 = r11			  ## process_NLSFs.c:318:7
   14bd8:    d3 16             		r3 = r13
                               	}			  ## process_NLSFs.c:318:7
   14bda:    73 fe 9a fe       	ifs (r3 > -0x1) goto 0x134 <silk_NLSF_stabilize+0x196 : 14d12 >
   14bde:    06 46             	if (r6 == 0) goto 0xc <silk_NLSF_stabilize+0x70 : 14bec >
   14be0:    82 e8 07 60       	if (r6 != r2) goto 0xe <silk_NLSF_stabilize+0x76 : 14bf2 >
   14be4:    a3 e0 00 7c       	r3 = 0x8000 - r7			  ## process_NLSFs.c:336:32
   14be8:    8e 16             	r14 = r8
   14bea:    14 9f             	goto 0x7e <silk_NLSF_stabilize+0xEE : 14c6a >
   14bec:    50 ed 01 90       	h[r0+0x0] = r9			  ## process_NLSFs.c:332:16
   14bf0:    14 9e             	goto 0x7c <silk_NLSF_stabilize+0xF2 : 14c6e >			  ## process_NLSFs.c:332:16
   14bf2:    45 20             	r5 = 0x0
   14bf4:    43 20             	r3 = 0x0
   14bf6:    04 84             	goto 0x8 <silk_NLSF_stabilize+0x84 : 14c00 >
   14bf8:    d8 ed 1a 45       	r4 = h[r1+r5<<1] (s)			  ## process_NLSFs.c:342:23
   14bfc:    43 18             	r3 += r4			  ## process_NLSFs.c:342:20
   14bfe:    c5 21             	r5 += 0x1			  ## process_NLSFs.c:341:24
   14c00:    86 ed fa 51       	ifs (r5 < r6) goto -0xc <silk_NLSF_stabilize+0x7C : 14bf8 >
   14c04:    d8 ed 1a 96       	r9 = h[r1+r6<<1] (s)			  ## process_NLSFs.c:344:22
   14c08:    60 e0 00 5c       	r5 = 0x8000
   14c0c:    24 16             	r4 = r2
   14c0e:    04 84             	goto 0x8 <silk_NLSF_stabilize+0x9C : 14c18 >
   14c10:    d8 ed 1a 74       	r7 = h[r1+r4<<1] (s)			  ## process_NLSFs.c:349:23
   14c14:    dd 1f             	r5 = r5 - r7			  ## process_NLSFs.c:349:20
   14c16:    fc 3f             	r4 += -0x1			  ## process_NLSFs.c:348:24
   14c18:    06 ee fa 41       	ifs (r4 > r6) goto -0xc <silk_NLSF_stabilize+0x94 : 14c10 >
   14c1c:    3b e1 ff 6f       	r11 = r6 + -0x1
   14c20:    d8 ed 0a db       	r13 = h[r0+r11<<1] (s)
   14c24:    c0 e1 61 e0       	r14 = r6 << 0x1
   14c28:    dc ed e2 40       	r4 = h[++r14=r0] (s)
   14c2c:    d4 18             	r4 += r13
   14c2e:    c0 e1 91 7c       	r7 = r9 >>> 0x1			  ## process_NLSFs.c:344:22
   14c32:    dd 1f             	r5 = r5 - r7			  ## process_NLSFs.c:351:19
   14c34:    73 18             	r3 += r7			  ## process_NLSFs.c:344:19
   14c36:    67 e1 01 40       	r7 = r4 & 0x1
   14c3a:    cc a1             	r4 = r4 >>> 0x1
   14c3c:    74 18             	r4 += r7
   14c3e:    85 ee 06 30       	ifs (r3 <= r5) goto 0xc <silk_NLSF_stabilize+0xD2 : 14c4e >			  ## process_NLSFs.c:354:34
   14c42:    3d 16             	r13 = r3			  ## process_NLSFs.c:354:34
   14c44:    94 ee 00 03       	ifs (r4 <= r3) {			  ## process_NLSFs.c:354:34
   14c48:    34 e4 41 d5       		r13 = smax(r4, r5)
                               	}			  ## process_NLSFs.c:354:34
   14c4c:    04 85             	goto 0xa <silk_NLSF_stabilize+0xDC : 14c58 >			  ## process_NLSFs.c:354:34
   14c4e:    5d 16             	r13 = r5			  ## process_NLSFs.c:354:34
   14c50:    94 ee 00 05       	ifs (r4 <= r5) {			  ## process_NLSFs.c:354:34
   14c54:    34 e4 41 d3       		r13 = smax(r4, r3)
                               	}			  ## process_NLSFs.c:354:34
   14c58:    c0 e1 91 38       	r3 = r9 >> 0x1			  ## process_NLSFs.c:356:38
   14c5c:    b4 e0 d2 33       	r3 = r13 - r3			  ## process_NLSFs.c:356:36
   14c60:    d8 ed 09 3b       	h[r0+r11<<1] = r3			  ## process_NLSFs.c:356:18
   14c64:    d8 ed 18 46       	r4 = h[r1+r6<<1] (u)			  ## process_NLSFs.c:357:34
   14c68:    43 18             	r3 += r4			  ## process_NLSFs.c:357:32
   14c6a:    50 ed e1 30       	h[r14+0x0] = r3
   14c6e:    0a e1 01 a0       	r10 = r10 + 0x1			  ## process_NLSFs.c:301:42
   14c72:    8a fe 8c 27       	ifs (r10 <= 0x13) goto -0xe8 <silk_NLSF_stabilize+0x12 : 14b8e >
   14c76:    8a f8 4c 28       	if (r10 != 0x14) goto 0x98 <silk_NLSF_stabilize+0x196 : 14d12 >
   14c7a:    43 21             	r3 = 0x1
   14c7c:    c1 14             	r9 = 0
   14c7e:    0d 82             	r5 = r0 + 0x2
   14c80:    04 92             	goto 0x24 <silk_NLSF_stabilize+0x12A : 14ca6 >
   14c82:    d8 ed 0a 63       	r6 = h[r0+r3<<1] (s)			  ## sort.c:318:11
   14c86:    97 16             	r7 = r9			  ## sort.c:318:11
   14c88:    04 83             	goto 0x6 <silk_NLSF_stabilize+0x114 : 14c90 >			  ## sort.c:318:11
   14c8a:    d8 ed 59 47       	h[r5+r7<<1] = r4			  ## sort.c:320:15
   14c8e:    ff 3f             	r7 += -0x1			  ## sort.c:319:3
   14c90:    87 fd 04 00       	ifs (r7 < 0x0) goto 0x8 <silk_NLSF_stabilize+0x120 : 14c9c >
   14c94:    d8 ed 0a 47       	r4 = h[r0+r7<<1] (s)			  ## sort.c:319:43
   14c98:    84 ed f7 61       	ifs (r6 < r4) goto -0x12 <silk_NLSF_stabilize+0x10E : 14c8a >			  ## sort.c:319:43
   14c9c:    d8 ed 59 67       	h[r5+r7<<1] = r6			  ## sort.c:322:14
   14ca0:    09 e1 01 90       	r9 = r9 + 0x1			  ## sort.c:317:2
   14ca4:    c3 21             	r3 += 0x1			  ## sort.c:317:22
   14ca6:    82 ed ec 31       	ifs (r3 < r2) goto -0x28 <silk_NLSF_stabilize+0x106 : 14c82 >
   14caa:    54 ed 10 30       	r3 = h[r1+0x0] (s)			  ## process_NLSFs.c:370:44
   14cae:    54 ed 00 40       	r4 = h[r0+0x0] (s)			  ## process_NLSFs.c:370:31
   14cb2:    34 e4 41 43       	r4 = smax(r4, r3)			  ## SigProc_FIX.h:360:13
   14cb6:    8c 60             	h[r0+0x0] = r4			  ## process_NLSFs.c:370:15
   14cb8:    43 21             	r3 = 0x1
   14cba:    04 8d             	goto 0x1a <silk_NLSF_stabilize+0x15A : 14cd6 >
   14cbc:    d8 ed 1a 53       	r5 = h[r1+r3<<1] (s)			  ## process_NLSFs.c:376:44
   14cc0:    d8 ed 0a 63       	r6 = h[r0+r3<<1] (s)			  ## process_NLSFs.c:376:31
   14cc4:    54 18             	r4 += r5			  ## process_NLSFs.c:376:44
   14cc6:    78 e0 01 54       	r5 = sat16(r4) (s)			  ## opus.c:182:2
   14cca:    dc 17             	r4 = r5.l (s)			  ## process_NLSFs.c:376:44
   14ccc:    34 e4 61 44       	r4 = smax(r6, r4)			  ## SigProc_FIX.h:360:13
   14cd0:    d8 ed 09 43       	h[r0+r3<<1] = r4			  ## process_NLSFs.c:376:16
   14cd4:    c3 21             	r3 += 0x1			  ## process_NLSFs.c:375:23
   14cd6:    82 ed f1 31       	ifs (r3 < r2) goto -0x1e <silk_NLSF_stabilize+0x140 : 14cbc >
   14cda:    d8 ed 1a 32       	r3 = h[r1+r2<<1] (s)			  ## process_NLSFs.c:379:58
   14cde:    54 ed 80 40       	r4 = h[r8+0x0] (s)			  ## process_NLSFs.c:379:33
   14ce2:    a3 e0 00 3c       	r3 = 0x8000 - r3			  ## process_NLSFs.c:379:56
   14ce6:    35 e4 41 33       	r3 = smin(r4, r3)			  ## SigProc_FIX.h:350:13
   14cea:    50 ed 81 30       	h[r8+0x0] = r3			  ## process_NLSFs.c:379:17
   14cee:    f8 3c             	r0 += -0x4			  ## process_NLSFs.c:382:8
   14cf0:    f9 3e             	r1 += -0x2			  ## process_NLSFs.c:382:8
   14cf2:    04 8b             	goto 0x16 <silk_NLSF_stabilize+0x18E : 14d0a >
   14cf4:    d8 ed 1a 42       	r4 = h[r1+r2<<1] (s)			  ## process_NLSFs.c:383:61
   14cf8:    d8 ed 0a 52       	r5 = h[r0+r2<<1] (s)			  ## process_NLSFs.c:383:32
   14cfc:    bb 17             	r3 = r3.l (s)			  ## process_NLSFs.c:383:45
   14cfe:    33 1f             	r3 = r3 - r4			  ## process_NLSFs.c:383:59
   14d00:    35 e4 51 33       	r3 = smin(r5, r3)			  ## SigProc_FIX.h:350:13
   14d04:    d8 ed 09 32       	h[r0+r2<<1] = r3			  ## process_NLSFs.c:383:16
   14d08:    fa 3f             	r2 += -0x1			  ## process_NLSFs.c:382:3
   14d0a:    34 e1 fe 2f       	r4 = r2 + -0x2			  ## process_NLSFs.c:382:19
   14d0e:    04 fd f1 01       	ifs (r4 >= 0x0) goto -0x1e <silk_NLSF_stabilize+0x178 : 14cf4 >			  ## process_NLSFs.c:382:19
   14d12:    5e 04             	{pc, r14-r4} = [sp++]			  ## process_NLSFs.c:385:1


silk_insertion_sort_increasing:
   14d14:    7c 04             	[--sp] = {rets, r12-r4}			  ## sort.c:216:0
   14d16:    44 20             	r4 = 0x0			  ## sort.c:216:0
   14d18:    04 83             	goto 0x6 <silk_insertion_sort_increasing+0xC : 14d20 >			  ## sort.c:216:0
   14d1a:    d8 ec 1b 44       	[r1+r4<<2] = r4			  ## sort.c:227:12
   14d1e:    c4 21             	r4 += 0x1			  ## sort.c:226:22
   14d20:    83 ed fb 41       	ifs (r4 < r3) goto -0xa <silk_insertion_sort_increasing+0x6 : 14d1a >			  ## sort.c:226:2
   14d24:    4a e0 01 00       	r10 = 0x1 <mem_code_size : 0 >
   14d28:    c1 14             	r9 = 0
   14d2a:    0b e1 04 00       	r11 = r0 + 0x4
   14d2e:    08 e1 04 10       	r8 = r1 + 0x4
   14d32:    04 9a             	goto 0x34 <silk_insertion_sort_increasing+0x54 : 14d68 >
   14d34:    d8 ec 0a 7a       	r7 = [r0+r10<<2]			  ## sort.c:232:11
   14d38:    95 16             	r5 = r9
   14d3a:    04 88             	goto 0x10 <silk_insertion_sort_increasing+0x38 : 14d4c >
   14d3c:    d8 ec bb 45       	[r11+r5<<2] = r4			  ## sort.c:234:17
   14d40:    54 a2             	r4 = r5 << 0x2			  ## sort.c:234:17
   14d42:    16 16             	r6 = r1			  ## sort.c:235:19
   14d44:    dc ec 62 44       	r4 = [++r6=r4]			  ## sort.c:235:19
   14d48:    e4 61             	[r6+0x4] = r4			  ## sort.c:235:17
   14d4a:    fd 3f             	r5 += -0x1			  ## sort.c:233:3
   14d4c:    85 fd 04 00       	ifs (r5 < 0x0) goto 0x8 <silk_insertion_sort_increasing+0x44 : 14d58 >
   14d50:    d8 ec 0a 45       	r4 = [r0+r5<<2]			  ## sort.c:233:43
   14d54:    84 ed f2 71       	ifs (r7 < r4) goto -0x1c <silk_insertion_sort_increasing+0x28 : 14d3c >			  ## sort.c:233:43
   14d58:    d8 ec bb 75       	[r11+r5<<2] = r7			  ## sort.c:237:16
   14d5c:    d8 ec 8b a5       	[r8+r5<<2] = r10			  ## sort.c:238:16
   14d60:    09 e1 01 90       	r9 = r9 + 0x1			  ## sort.c:231:2
   14d64:    0a e1 01 a0       	r10 = r10 + 0x1			  ## sort.c:231:22
   14d68:    83 ed e4 a1       	ifs (r10 < r3) goto -0x38 <silk_insertion_sort_increasing+0x20 : 14d34 >			  ## sort.c:231:2
   14d6c:    34 e1 fe 0f       	r4 = r0 + -0x2			  ## sort.c:218:18
   14d70:    3b e1 fe 1f       	r11 = r1 + -0x2			  ## sort.c:218:18
   14d74:    39 e1 ff 3f       	r9 = r3 + -0x1			  ## sort.c:218:18
   14d78:    3c e1 fa 4f       	r12 = r4 + -0x6			  ## sort.c:218:18
   14d7c:    36 e1 fe 4f       	r6 = r4 + -0x2			  ## sort.c:218:18
   14d80:    38 e1 fe bf       	r8 = r11 + -0x2			  ## sort.c:218:18
   14d84:    3a 16             	r10 = r3			  ## sort.c:218:18
   14d86:    14 80             	goto 0x40 <silk_insertion_sort_increasing+0xB4 : 14dc8 >
   14d88:    d8 ec 0a 4a       	r4 = [r0+r10<<2]			  ## sort.c:244:11
   14d8c:    d8 ec 0a 19       	r1 = [r0+r9<<2]			  ## sort.c:245:15
   14d90:    01 ed 18 40       	ifs (r4 >= r1) goto 0x30 <silk_insertion_sort_increasing+0xB0 : 14dc4 >
   14d94:    37 16             	r7 = r3
   14d96:    04 8a             	goto 0x14 <silk_insertion_sort_increasing+0x98 : 14dac >
   14d98:    d8 ec 6b 17       	[r6+r7<<2] = r1			  ## sort.c:247:18
   14d9c:    71 a2             	r1 = r7 << 0x2			  ## sort.c:247:18
   14d9e:    b1 18             	r1 += r11			  ## sort.c:248:20
   14da0:    35 e1 fa 1f       	r5 = r1 + -0x6			  ## sort.c:248:20
   14da4:    55 60             	r5 = [r5+0x0] 			  ## sort.c:248:20
   14da6:    f9 3e             	r1 += -0x2			  ## sort.c:248:18
   14da8:    95 60             	[r1+0x0] = r5			  ## sort.c:248:18
   14daa:    ff 3f             	r7 += -0x1			  ## sort.c:246:4
   14dac:    31 e1 fe 7f       	r1 = r7 + -0x2			  ## sort.c:246:24
   14db0:    81 fd 04 00       	ifs (r1 < 0x0) goto 0x8 <silk_insertion_sort_increasing+0xA8 : 14dbc >			  ## sort.c:246:24
   14db4:    d8 ec ca 17       	r1 = [r12+r7<<2]			  ## sort.c:246:44
   14db8:    81 ed ee 41       	ifs (r4 < r1) goto -0x24 <silk_insertion_sort_increasing+0x84 : 14d98 >			  ## sort.c:246:44
   14dbc:    d8 ec 6b 47       	[r6+r7<<2] = r4			  ## sort.c:250:17
   14dc0:    d8 ec 8b a7       	[r8+r7<<2] = r10			  ## sort.c:251:17
   14dc4:    0a e1 01 a0       	r10 = r10 + 0x1			  ## sort.c:243:22
   14dc8:    82 ed de a1       	ifs (r10 < r2) goto -0x44 <silk_insertion_sort_increasing+0x74 : 14d88 >
   14dcc:    5c 04             	{pc, r12-r4} = [sp++]			  ## sort.c:254:1


silk_NLSF2A_find_poly.355:
   14dce:    7f 04             	[--sp] = {rets, r15-r4}			  ## process_NLSFs.c:92:0
   14dd0:    e2 9f             	sp += -0x4			  ## process_NLSFs.c:92:0
   14dd2:    40 ea 80 0b       	[r0+0x0] = 0x10000			  ## process_NLSFs.c:96:9
   14dd6:    60 f0 00 ac       	r10 = 0x8000  #			  ## process_NLSFs.c:96:9
   14dda:    81 20             		 [sp] = r1			  ## process_NLSFs.c:96:9
   14ddc:    c3 d4             	r11 = 0  #
   14dde:    13 60             		 r3 = [r1+0x0] 			  ## process_NLSFs.c:97:12
   14de0:    09 84             	r1 = r0 + 0x4			  ## process_NLSFs.c:97:2
   14de2:    a3 e0 00 30       	r3 = 0x0 - r3			  ## process_NLSFs.c:97:11
   14de6:    47 21             	r7 = 0x1
   14de8:    15 16             	r5 = r1
   14dea:    14 8d             	goto 0x5a <silk_NLSF2A_find_poly.355+0x78 : 14e46 >
   14dec:    73 a3             	r3 = r7 << 0x3			  ## process_NLSFs.c:99:10
   14dee:    ac d6             	r12 = r10  #			  ## process_NLSFs.c:100:55
   14df0:    04 20             		 r4 = [sp]			  ## process_NLSFs.c:99:10
   14df2:    d8 ec 42 83       	r8 = [r4+r3]			  ## process_NLSFs.c:99:10
   14df6:    73 a2             	r3 = r7 << 0x2			  ## process_NLSFs.c:100:14
   14df8:    dc ec 32 60       	r6 = [++r3=r0]			  ## process_NLSFs.c:100:55
   14dfc:    c5 d4             	r13 = 0  #			  ## process_NLSFs.c:100:55
   14dfe:    33 7f             		 r3 = [r3+-0x4] 			  ## process_NLSFs.c:100:14
   14e00:    fc e1 60 d8       	r13_r12 += r6 * r8 (s)			  ## process_NLSFs.c:100:55
   14e04:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## process_NLSFs.c:100:55
   14e08:    36 a1             	r6 = r3 << 0x1			  ## process_NLSFs.c:100:14
   14e0a:    b4 e0 62 6c       	r6 = r6 - r12			  ## process_NLSFs.c:100:41
   14e0e:    0c e1 01 70       	r12 = r7 + 0x1			  ## process_NLSFs.c:100:8
   14e12:    d8 ec 0b 6c       	[r0+r12<<2] = r6			  ## process_NLSFs.c:100:12
   14e16:    c0 e1 8f 9d       	r9 = r8 >>> 0x1f			  ## process_NLSFs.c:100:55
   14e1a:    56 16             	r6 = r5			  ## process_NLSFs.c:102:37
   14e1c:    04 8d             	goto 0x1a <silk_NLSF2A_find_poly.355+0x6A : 14e38 >			  ## process_NLSFs.c:102:37
   14e1e:    ae d6             	r14 = r10  #			  ## process_NLSFs.c:102:37
   14e20:    64 60             		 r4 = [r6+0x0] 			  ## process_NLSFs.c:102:11
   14e22:    c7 14             	r15 = 0			  ## process_NLSFs.c:102:37
   14e24:    fc f1 30 f8       	r15_r14 += r3 * r8 (s)  #			  ## process_NLSFs.c:102:37
   14e28:    63 7e             		 r3 = [r6+-0x8] 			  ## process_NLSFs.c:102:14
   14e2a:    d0 e1 00 e9       	r15_r14 >>= 0x10			  ## process_NLSFs.c:102:37
   14e2e:    34 18             	r4 += r3			  ## process_NLSFs.c:102:23
   14e30:    b4 e0 42 4e       	r4 = r4 - r14			  ## process_NLSFs.c:102:11
   14e34:    ec 05             	[r6++=-0x4] = r4			  ## process_NLSFs.c:102:11
   14e36:    ff 3f             	r7 += -0x1			  ## process_NLSFs.c:102:37
   14e38:    07 fd f1 05       	ifs (r7 >= 0x2) goto -0x1e <silk_NLSF2A_find_poly.355+0x50 : 14e1e >
   14e3c:    c7 d6             	r7 = r12  #
   14e3e:    13 60             		 r3 = [r1+0x0] 			  ## process_NLSFs.c:104:10
   14e40:    b4 e0 32 38       	r3 = r3 - r8			  ## process_NLSFs.c:104:10
   14e44:    c5 24             	r5 += 0x4			  ## process_NLSFs.c:98:2
   14e46:    93 60             	[r1+0x0] = r3			  ## process_NLSFs.c:104:10
   14e48:    82 ed d0 71       	ifs (r7 < r2) goto -0x60 <silk_NLSF2A_find_poly.355+0x1E : 14dec >
   14e4c:    02 81             	sp += 0x4
   14e4e:    5f 04             	{pc, r15-r4} = [sp++]			  ## process_NLSFs.c:106:1


silk_process_NLSFs:
   14e50:    7f 04             	[--sp] = {rets, r15-r4}			  ## process_NLSFs.c:247:0
   14e52:    c2 98             	sp += -0xa0			  ## process_NLSFs.c:247:0
   14e54:    0c 16             	r12 = r0			  ## process_NLSFs.c:247:0
   14e56:    10 e1 20 04       	r0 = r0 + 0x1420			  ## process_NLSFs.c:247:0
   14e5a:    2e d6             	r14 = r2  #			  ## process_NLSFs.c:247:0
   14e5c:    03 60             		 r3 = [r0+0x0] 			  ## process_NLSFs.c:261:16
   14e5e:    a3 25             	[sp+148] = r3			  ## process_NLSFs.c:261:16
   14e60:    80 20             	[sp] = r0			  ## process_NLSFs.c:261:16
   14e62:    40 f0 f0 35       	r0 = 0x35f0  # <WOLASynthesisFilter_Float_M256_m4_r1+0xDEC : 35f0 >			  ## process_NLSFs.c:261:16
   14e66:    03 6e             		 r3 = [r0+0x38] 			  ## process_NLSFs.c:266:61
   14e68:    b4 f0 c0 d0       	r13 = r12 + r0  #			  ## process_NLSFs.c:266:61
   14e6c:    81 21             		 [sp+4] = r1			  ## process_NLSFs.c:266:61
   14e6e:    d0 16             	r0 = r13			  ## process_NLSFs.c:266:2
   14e70:    e1 16             	r1 = r14			  ## process_NLSFs.c:266:2
   14e72:    32 16             	r2 = r3			  ## process_NLSFs.c:266:2
   14e74:    bf ea 31 fe       	call -0x39e <silk_NLSF_VQ_weights_laroia : 14ada >			  ## process_NLSFs.c:266:2
   14e78:    11 e1 10 c0       	r1 = r12 + 0x1010			  ## process_NLSFs.c:266:2
   14e7c:    40 e0 26 05       	r0 = 0x526 <alg_code_size+0x56 : 526 >			  ## process_NLSFs.c:268:46
   14e80:    d8 ec ca f0       	r15 = [r12+r0<<2]			  ## process_NLSFs.c:268:46
   14e84:    81 2e             	[sp+56] = r1
   14e86:    54 ee 12 01       	r0 = b[r1+0x12] (s)			  ## process_NLSFs.c:269:45
   14e8a:    40 f0 1d 05       	r0 = 0x51d  # <alg_code_size+0x4C : 51c >			  ## process_NLSFs.c:269:24
   14e8e:    a0 26             		 [sp+152] = r0			  ## process_NLSFs.c:269:24
   14e90:    d8 ec ca 90       	r9 = [r12+r0<<2]			  ## process_NLSFs.c:269:24
   14e94:    54 ed f2 20       	r2 = h[r15+0x2] (s)			  ## NLSF_encode.c:377:59
   14e98:    d0 ec f0 12       	r1 = [r15+0x20]			  ## NLSF_encode.c:377:45
   14e9c:    e0 16             	r0 = r14			  ## NLSF_encode.c:377:2
   14e9e:    bf ea 6d fe       	call -0x326 <silk_NLSF_stabilize : 14b7c >			  ## NLSF_encode.c:377:2
   14ea2:    54 ed f2 a0       	r10 = h[r15+0x2] (s)			  ## NLSF_encode.c:380:81
   14ea6:    54 ed f0 b0       	r11 = h[r15+0x0] (s)			  ## NLSF_encode.c:380:60
   14eaa:    d0 ec f8 20       	r2 = [r15+0x8]			  ## NLSF_encode.c:380:47
   14eae:    43 e0 dc 33       	r3 = 0x33dc <WOLASynthesisFilter_Float_M256_m4_r1+0xBD8 : 33dc >			  ## NLSF_encode.c:363:39
   14eb2:    b4 e0 c0 83       	r8 = r12 + r3			  ## NLSF_encode.c:363:39
   14eb6:    83 16             	r3 = r8			  ## NLSF_encode.c:104:4
   14eb8:    d4 e9 31 e0       	[sp+48] = r14			  ## NLSF_encode.c:104:4
   14ebc:    86 14             	r7_r6 = 0			  ## NLSF_encode.c:104:4
   14ebe:    a4 16             	r4 = r10			  ## NLSF_encode.c:104:4
   14ec0:    e5 16             	r5 = r14			  ## NLSF_encode.c:104:4
   14ec2:    64 03             	rep 0xe r4 {			  ## NLSF_encode.c:104:4
   14ec4:    20 07             		r0 = b[r2++=0x1] (u)			  ## NLSF_encode.c:104:4
   14ec6:    00 a7             		r0 = r0 << 0x7			  ## NLSF_encode.c:104:4
   14ec8:    d4 ed 52 10       		r1 = h[r5++=0x2] (s)			  ## NLSF_encode.c:104:4
   14ecc:    10 1e             		r0 = r1 - r0			  ## NLSF_encode.c:104:4
   14ece:    fc e1 00 70       		r7_r6 += r0 * r0 (s)
                               	}			  ## NLSF_encode.c:104:4
   14ed2:    d0 e1 04 6c       	r7_r6 >>>= 0x4			  ## NLSF_encode.c:104:4
   14ed6:    b6 05             	[r3++=0x4] = r6			  ## NLSF_encode.c:104:4
   14ed8:    0b ea f0 ff       	if (--r11 != 0) goto -0x20 <silk_process_NLSFs+0x6C : 14ebc >			  ## NLSF_encode.c:104:4
   14edc:    84 16             	r4 = r8
   14ede:    fb 16             	r11 = r15
   14ee0:    54 ed b0 20       	r2 = h[r11+0x0] (s)			  ## NLSF_encode.c:383:57
   14ee4:    40 e0 5c 34       	r0 = 0x345c <WOLASynthesisFilter_Float_M256_m4_r1+0xC58 : 345c >			  ## NLSF_encode.c:365:30
   14ee8:    b4 e0 c0 10       	r1 = r12 + r0			  ## NLSF_encode.c:365:30
   14eec:    40 d6             	r0 = r4  #			  ## NLSF_encode.c:383:2
   14eee:    81 2b             		 [sp+44] = r1			  ## NLSF_encode.c:383:2
   14ef0:    d4 e9 35 90       	[sp+52] = r9
   14ef4:    93 16             	r3 = r9			  ## NLSF_encode.c:383:2
   14ef6:    bf ea 0d ff       	call -0x1e6 <silk_insertion_sort_increasing : 14d14 >			  ## NLSF_encode.c:383:2
   14efa:    c0 ff 6e e7 fb ff 	r0 = 0xfffbe76e <RAM_LIMIT_H+0xFFE1E76E : fffbe76e >			  ## process_NLSFs.c:261:16
   14f00:    46 f0 60 01       	r6 = 0x160  # <var_bss_size+0x54 : 160 >			  ## process_NLSFs.c:261:16
   14f04:    21 25             		 r1 = [sp+148]			  ## process_NLSFs.c:261:16
   14f06:    f8 e1 10 10       	r1_r0 = r1 * r0 (s)			  ## process_NLSFs.c:261:16
   14f0a:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## process_NLSFs.c:261:16
   14f0e:    00 e1 4a 0c       	r0 = r0 + 0xc4a			  ## process_NLSFs.c:261:16
   14f12:    a0 20             	[sp+128] = r0
   14f14:    88 a2             	r0 = r0 >>> 0x2
   14f16:    00 f1 e0 d0       	r0 = r13 + 0xe0  #
   14f1a:    80 27             		 [sp+28] = r0
   14f1c:    40 f0 d0 2d       	r0 = 0x2dd0  # <WOLASynthesisFilter_Float_M256_m4_r1+0x5CC : 2dd0 >			  ## NLSF_encode.c:366:52
   14f20:    80 34             		 [sp+80] = r0			  ## NLSF_encode.c:366:52
   14f22:    b4 e0 c0 10       	r1 = r12 + r0			  ## NLSF_encode.c:366:52
   14f26:    0f e1 a0 d0       	r15 = r13 + 0xa0			  ## NLSF_encode.c:366:52
   14f2a:    00 e1 df d0       	r0 = r13 + 0xdf			  ## NLSF_encode.c:386:7
   14f2e:    00 f1 80 d0       	r0 = r13 + 0x80  #			  ## NLSF_encode.c:386:7
   14f32:    80 38             		 [sp+96] = r0			  ## NLSF_encode.c:386:7
   14f34:    00 f1 c0 d0       	r0 = r13 + 0xc0  #			  ## NLSF_encode.c:386:7
   14f38:    80 35             		 [sp+84] = r0			  ## NLSF_encode.c:386:7
   14f3a:    40 f0 d0 32       	r0 = 0x32d0  # <WOLASynthesisFilter_Float_M256_m4_r1+0xACC : 32d0 >			  ## NLSF_encode.c:386:7
   14f3e:    80 36             		 [sp+88] = r0			  ## NLSF_encode.c:386:7
   14f40:    b4 e0 c0 90       	r9 = r12 + r0			  ## NLSF_encode.c:386:7
   14f44:    08 e1 60 90       	r8 = r9 + 0x60			  ## NLSF_encode.c:360:49
   14f48:    00 e1 40 d0       	r0 = r13 + 0x40			  ## NLSF_encode.c:369:19
   14f4c:    00 f1 a0 90       	r0 = r9 + 0xa0  #			  ## NLSF_encode.c:362:49
   14f50:    a0 24             		 [sp+144] = r0			  ## NLSF_encode.c:362:49
   14f52:    00 f1 80 90       	r0 = r9 + 0x80  #			  ## NLSF_encode.c:361:49
   14f56:    80 3c             		 [sp+112] = r0			  ## NLSF_encode.c:361:49
   14f58:    00 f1 40 90       	r0 = r9 + 0x40  #			  ## NLSF_encode.c:359:49
   14f5c:    80 3f             		 [sp+124] = r0			  ## NLSF_encode.c:359:49
   14f5e:    00 f1 20 90       	r0 = r9 + 0x20  #			  ## NLSF_encode.c:358:49
   14f62:    80 24             		 [sp+16] = r0			  ## NLSF_encode.c:358:49
   14f64:    80 39             	[sp+100] = r0			  ## NLSF_encode.c:358:49
   14f66:    20 26             	r0 = [sp+152]			  ## NLSF_encode.c:358:49
   14f68:    88 a1             	r0 = r0 >>> 0x1			  ## NLSF_encode.c:358:49
   14f6a:    0e f1 90 d0       	r14 = r13 + 0x90  #
   14f6e:    80 23             		 [sp+12] = r0
   14f70:    d4 e9 09 d0       	[sp+8] = r13
   14f74:    00 e1 d0 d0       	r0 = r13 + 0xd0
   14f78:    a0 26             	[sp+152] = r0
   14f7a:    c7 ff 86 b4 00 00 	r7 = 0xb486 <print+0x36 : b486 >
   14f80:    81 2a             	[sp+40] = r1
   14f82:    81 31             	[sp+68] = r1
   14f84:    41 20             	r1 = 0x0
   14f86:    d4 e9 69 c0       	[sp+104] = r12
   14f8a:    d4 e9 25 b0       	[sp+36] = r11
   14f8e:    84 28             	[sp+32] = r4
   14f90:    d0 e9 15 80       	d[sp+20] = r9_r8
   14f94:    05 8e             	goto 0x41c <silk_process_NLSFs+0x562 : 153b2 >
   14f96:    93 d6             	r3 = r9  #			  ## NLSF_encode.c:392:30
   14f98:    00 2b             		 r0 = [sp+44]			  ## NLSF_encode.c:388:10
   14f9a:    81 33             	[sp+76] = r1			  ## NLSF_encode.c:388:10
   14f9c:    d8 ec 0a 11       	r1 = [r0+r1<<2]			  ## NLSF_encode.c:388:10
   14fa0:    54 ed b2 20       	r2 = h[r11+0x2] (s)			  ## NLSF_encode.c:391:49
   14fa4:    d0 ec b8 00       	r0 = [r11+0x8]			  ## NLSF_encode.c:391:29
   14fa8:    21 db             	r1 *= r2  #			  ## NLSF_encode.c:391:47
   14faa:    81 30             		 [sp+64] = r1
   14fac:    10 d8             	r0 += r1  #			  ## NLSF_encode.c:391:18
   14fae:    05 2c             		 r5 = [sp+48]			  ## NLSF_encode.c:391:18
   14fb0:    41 20             	r1 = 0x0
   14fb2:    04 8c             	goto 0x18 <silk_process_NLSFs+0x17C : 14fcc >
   14fb4:    d8 ee 00 21       	r2 = b[r0+r1] (u)			  ## NLSF_encode.c:393:24
   14fb8:    22 a7             	r2 = r2 << 0x7			  ## NLSF_encode.c:393:24
   14fba:    50 ed 31 24       	h[r3+0x40] = r2			  ## NLSF_encode.c:393:22
   14fbe:    d8 ed 58 41       	r4 = h[r5+r1<<1] (u)			  ## NLSF_encode.c:394:19
   14fc2:    c2 1e             	r2 = r4 - r2			  ## NLSF_encode.c:394:34
   14fc4:    b2 06             	h[r3++=0x2] = r2			  ## NLSF_encode.c:394:17
   14fc6:    50 ed b2 20       	r2 = h[r11+0x2] (u)			  ## NLSF_encode.c:394:17
   14fca:    c1 21             	r1 += 0x1			  ## NLSF_encode.c:392:38
   14fcc:    aa 17             	r2 = r2.l (s)			  ## NLSF_encode.c:392:19
   14fce:    82 ed f1 11       	ifs (r1 < r2) goto -0x1e <silk_process_NLSFs+0x164 : 14fb4 >			  ## NLSF_encode.c:392:19
   14fd2:    80 d6             	r0 = r8  #			  ## NLSF_encode.c:398:3
   14fd4:    01 24             		 r1 = [sp+16]			  ## NLSF_encode.c:398:3
   14fd6:    bf ea 80 fd       	call -0x500 <silk_NLSF_VQ_weights_laroia : 14ada >			  ## NLSF_encode.c:398:3
   14fda:    40 20             	r0 = 0x0
   14fdc:    91 16             	r1 = r9
   14fde:    14 82             	goto 0x44 <silk_process_NLSFs+0x1D4 : 15024 >
   14fe0:    50 ed 10 26       	r2 = h[r1+0x60] (u)			  ## NLSF_encode.c:402:33
   14fe4:    22 b0             	r2 = r2 << 0x10			  ## NLSF_encode.c:402:33
   14fe6:    82 fd 14 02       	ifs (r2 < 0x1) goto 0x28 <silk_process_NLSFs+0x1C2 : 15012 >
   14fea:    80 e1 00 32       	r3 = clz(r2)			  ## entenc.c:124:2
   14fee:    74 16             	r4 = r7
   14ff0:    33 ea 01 00       	if ((r3 & 0x1) != 0) {
   14ff4:    60 e0 00 4c       		r4 = 0x8000
                               	}
   14ff8:    bd a1             	r5 = r3 >>> 0x1			  ## Inlines.h:101:11
   14ffa:    d4 1a             	r4 >>= r5			  ## Inlines.h:101:7
   14ffc:    32 1a             	r2 <<= r3			  ## Inlines.h:74:11
   14ffe:    b2 e1 1c 2c       	r2 = uextra(r2, p:0x18, l:0x7)			  ## Inlines.h:75:22
   15002:    e2 e1 d5 20       	r2 = r2 * 0xD5			  ## Inlines.h:104:9
   15006:    f8 e1 40 32       	r3_r2 = r4 * r2 (s)			  ## Inlines.h:104:9
   1500a:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## Inlines.h:104:9
   1500e:    42 18             	r2 += r4			  ## Inlines.h:104:9
   15010:    04 81             	goto 0x2 <silk_process_NLSFs+0x1C4 : 15014 >
   15012:    42 20             	r2 = 0x0
   15014:    54 ed 10 30       	r3 = h[r1+0x0] (s)			  ## NLSF_encode.c:403:31
   15018:    32 1b             	r2 *= r3			  ## NLSF_encode.c:403:31
   1501a:    a2 ae             	r2 = r2 >> 0xe			  ## NLSF_encode.c:403:31
   1501c:    50 ed 11 22       	h[r1+0x20] = r2			  ## NLSF_encode.c:403:17
   15020:    c1 22             	r1 += 0x2			  ## NLSF_encode.c:401:3
   15022:    c0 21             	r0 += 0x1			  ## NLSF_encode.c:401:38
   15024:    54 ed b2 20       	r2 = h[r11+0x2] (s)			  ## NLSF_encode.c:401:19
   15028:    82 ed da 01       	ifs (r0 < r2) goto -0x4c <silk_process_NLSFs+0x190 : 14fe0 >			  ## NLSF_encode.c:401:3
   1502c:    40 20             	r0 = 0x0
   1502e:    81 16             	r1 = r8			  ## NLSF_encode.c:407:30
   15030:    04 8d             	goto 0x1a <silk_process_NLSFs+0x1FC : 1504c >			  ## NLSF_encode.c:407:30
   15032:    d8 ed 1a 26       	r2 = h[r1+r6<<1] (s)			  ## NLSF_encode.c:408:20
   15036:    54 ed 10 30       	r3 = h[r1+0x0] (s)			  ## NLSF_encode.c:408:20
   1503a:    22 a5             	r2 = r2 << 0x5			  ## NLSF_encode.c:408:20
   1503c:    f4 e1 21 23       	r2 = r2 / r3 (s)			  ## NLSF_encode.c:408:20
   15040:    50 ed 11 22       	h[r1+0x20] = r2			  ## NLSF_encode.c:408:18
   15044:    50 ed b2 20       	r2 = h[r11+0x2] (u)			  ## NLSF_encode.c:408:18
   15048:    c1 22             	r1 += 0x2			  ## NLSF_encode.c:407:3
   1504a:    c0 21             	r0 += 0x1			  ## NLSF_encode.c:407:38
   1504c:    aa 17             	r2 = r2.l (s)			  ## NLSF_encode.c:407:19
   1504e:    82 ed f0 01       	ifs (r0 < r2) goto -0x20 <silk_process_NLSFs+0x1E2 : 15032 >			  ## NLSF_encode.c:407:19
   15052:    b2 d6             	r2 = r11  #			  ## NLSF_encode.c:412:3
   15054:    00 3c             		 r0 = [sp+112]			  ## NLSF_encode.c:412:3
   15056:    21 24             	r1 = [sp+144]			  ## NLSF_encode.c:412:3
   15058:    03 30             	r3 = [sp+64]			  ## NLSF_encode.c:412:3
   1505a:    bf ea 49 e0       	call -0x3f6e <silk_NLSF_unpack : 110f0 >			  ## NLSF_encode.c:412:3
   1505e:    54 ed 22 90       	r9 = h[r2+0x2] (s)			  ## NLSF_encode.c:200:11
   15062:    54 ed 26 00       	r0 = h[r2+0x6] (s)			  ## NLSF_encode.c:200:11
   15066:    4d f0 01 00       	r13 = 0x1  # <mem_code_size : 0 >			  ## NLSF_encode.c:200:11
   1506a:    a0 21             		 [sp+132] = r0			  ## NLSF_encode.c:200:11
   1506c:    20 67             	r0 = [r2+0x1c] 			  ## NLSF_encode.c:416:15
   1506e:    80 3b             	[sp+108] = r0
   15070:    40 20             	r0 = 0x0
   15072:    d0 ec f1 00       	[r15+0x0] = r0			  ## NLSF_encode.c:198:14
   15076:    50 ed e1 00       	h[r14+0x0] = r0			  ## NLSF_encode.c:199:20
   1507a:    00 33             	r0 = [sp+76]			  ## NLSF_encode.c:415:49
   1507c:    00 a4             	r0 = r0 << 0x4			  ## NLSF_encode.c:415:49
   1507e:    80 2f             	[sp+60] = r0			  ## NLSF_encode.c:415:49
   15080:    d4 e9 5d 90       	[sp+92] = r9			  ## NLSF_encode.c:415:49
   15084:    00 38             	r0 = [sp+96]
   15086:    90 18             	r0 += r9
   15088:    c0 f1 d1 00       	r0 = r13 << 0x1  #
   1508c:    80 3d             		 [sp+116] = r0
   1508e:    e0 d8             	r0 += r14  #
   15090:    80 32             		 [sp+72] = r0
   15092:    c0 f1 d2 00       	r0 = r13 << 0x2  #
   15096:    a0 23             		 [sp+140] = r0
   15098:    e0 18             	r0 += r14
   1509a:    a0 22             	[sp+136] = r0
   1509c:    44 86             	goto 0x10c <silk_process_NLSFs+0x35A : 151aa >
   1509e:    42 20             	r2 = 0x0
   150a0:    06 3a             	r6 = [sp+104]
   150a2:    d4 e9 58 80       	r8 = [sp+88]
   150a6:    d4 e9 54 c0       	r12 = [sp+84]
   150aa:    d4 e9 50 b0       	r11 = [sp+80]
   150ae:    14 8a             	goto 0x54 <silk_process_NLSFs+0x2B4 : 15104 >
   150b0:    20 a2             	r0 = r2 << 0x2			  ## NLSF_encode.c:259:9
   150b2:    b4 e0 f0 30       	r3 = r15 + r0			  ## NLSF_encode.c:259:9
   150b6:    34 d6             	r4 = r3  #			  ## NLSF_encode.c:259:9
   150b8:    30 64             		 r0 = [r3+0x10] 			  ## NLSF_encode.c:259:23
   150ba:    d8 ec 40 11       	r1 = [r4++=0x10]			  ## NLSF_encode.c:259:9
   150be:    80 ee 14 10       	ifs (r1 <= r0) goto 0x28 <silk_process_NLSFs+0x29A : 150ea >			  ## NLSF_encode.c:259:9
   150c2:    47 f0 40 1b       	r7 = 0x1b40  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x33C : 1b40 >
   150c6:    25 26             		 r5 = [sp+152]			  ## NLSF_encode.c:260:46
   150c8:    d8 ec 5b 12       	[r5+r2<<2] = r1			  ## NLSF_encode.c:260:46
   150cc:    b0 68             	[r3+0x20] = r0			  ## NLSF_encode.c:261:46
   150ce:    b0 60             	[r3+0x0] = r0			  ## NLSF_encode.c:262:46
   150d0:    20 a1             	r0 = r2 << 0x1			  ## NLSF_encode.c:265:17
   150d2:    61 dc             	r1 = r6 + r0  #			  ## NLSF_encode.c:265:17
   150d4:    c1 60             		 [r4+0x0] = r1			  ## NLSF_encode.c:263:46
   150d6:    b4 e0 f0 30       	r3 = r15 + r0			  ## NLSF_encode.c:266:26
   150da:    3c 7c             	r4 = h[r3+-0x8] (u)			  ## NLSF_encode.c:266:26
   150dc:    d8 ed 18 57       	r5 = h[r1+r7<<1] (u)			  ## NLSF_encode.c:265:17
   150e0:    28 84             	r0 = r2 + 0x4			  ## NLSF_encode.c:259:33
   150e2:    d8 ed 19 47       	h[r1+r7<<1] = r4			  ## NLSF_encode.c:266:24
   150e6:    bd 7c             	h[r3+-0x8] = r5			  ## NLSF_encode.c:267:52
   150e8:    04 88             	goto 0x10 <silk_process_NLSFs+0x2AA : 150fa >			  ## NLSF_encode.c:267:52
   150ea:    03 e1 20 f0       	r3 = r15 + 0x20			  ## NLSF_encode.c:270:22
   150ee:    d8 ec 3b 12       	[r3+r2<<2] = r1			  ## NLSF_encode.c:270:22
   150f2:    21 26             	r1 = [sp+152]			  ## NLSF_encode.c:271:22
   150f4:    d8 ec 1b 02       	[r1+r2<<2] = r0			  ## NLSF_encode.c:271:22
   150f8:    20 16             	r0 = r2			  ## NLSF_encode.c:271:22
   150fa:    31 e1 e0 ff       	r1 = r15 + -0x20
   150fe:    d8 ec 1b 02       	[r1+r2<<2] = r0
   15102:    c2 21             	r2 += 0x1			  ## NLSF_encode.c:258:48
   15104:    82 f8 d4 09       	if (r2 != 0x4) goto -0x58 <silk_process_NLSFs+0x260 : 150b0 >
   15108:    04 9f             	goto 0x3e <silk_process_NLSFs+0x2F8 : 15148 >
   1510a:    d8 ec ca 01       	r0 = [r12+r1<<2]			  ## NLSF_encode.c:296:35
   1510e:    38 22             	r0 ^= 0x4			  ## NLSF_encode.c:296:63
   15110:    d8 ec cb 0a       	[r12+r10<<2] = r0			  ## NLSF_encode.c:296:33
   15114:    18 84             	r0 = r1 + 0x4			  ## NLSF_encode.c:297:61
   15116:    d8 ec fa 20       	r2 = [r15+r0<<2]			  ## NLSF_encode.c:297:35
   1511a:    d8 ec fb 2a       	[r15+r10<<2] = r2			  ## NLSF_encode.c:297:33
   1511e:    d8 ed e8 00       	r0 = h[r14+r0<<1] (u)			  ## NLSF_encode.c:298:35
   15122:    d8 ed e9 0a       	h[r14+r10<<1] = r0			  ## NLSF_encode.c:298:33
   15126:    40 20             	r0 = 0x0			  ## NLSF_encode.c:299:33
   15128:    d8 ec 8b 0a       	[r8+r10<<2] = r0			  ## NLSF_encode.c:299:33
   1512c:    20 26             	r0 = [sp+152]			  ## NLSF_encode.c:300:33
   1512e:    c2 ff ff ff ff 7f 	r2 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## NLSF_encode.c:300:33
   15134:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## NLSF_encode.c:300:33
   15138:    c0 e1 a4 00       	r0 = r10 << 0x4			  ## NLSF_encode.c:301:5
   1513c:    b0 18             	r0 += r11			  ## NLSF_encode.c:301:5
   1513e:    11 a4             	r1 = r1 << 0x4			  ## NLSF_encode.c:301:5
   15140:    b1 18             	r1 += r11			  ## NLSF_encode.c:301:5
   15142:    10 8f             	rep 0x4 0x10 {			  ## NLSF_encode.c:301:5
   15144:    12 07             		r2 = b[r1++=0x1] (u)			  ## NLSF_encode.c:301:5
   15146:    82 07             		b[r0++=0x1] = r2
                               	}			  ## NLSF_encode.c:301:5
   15148:    44 20             	r4 = 0x0
   1514a:    12 3c             	r2 = -0x4
   1514c:    86 16             	r6 = r8
   1514e:    c7 ff ff ff ff 7f 	r7 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   15154:    c2 14             	r10 = 0
   15156:    41 20             	r1 = 0x0
   15158:    04 91             	goto 0x22 <silk_process_NLSFs+0x32C : 1517c >
   1515a:    2d 84             	r5 = r2 + 0x4			  ## NLSF_encode.c:282:19
   1515c:    50 d6             	r0 = r5  #			  ## NLSF_encode.c:283:10
   1515e:    63 64             		 r3 = [r6+0x10] 			  ## NLSF_encode.c:283:24
   15160:    97 ee 00 43       	ifs (r7 <= r3) {			  ## NLSF_encode.c:283:24
   15164:    73 16             		r3 = r7			  ## NLSF_encode.c:283:10
   15166:    10 16             		r0 = r1
                               	}			  ## NLSF_encode.c:283:10
   15168:    61 05             	r1 = [r6++=0x4] 			  ## NLSF_encode.c:287:24
   1516a:    14 ed 00 41       	ifs (r4 >= r1) {
   1516e:    41 16             		r1 = r4			  ## NLSF_encode.c:287:10
   15170:    a5 16             		r5 = r10
                               	}			  ## NLSF_encode.c:287:10
   15172:    c2 21             	r2 += 0x1			  ## NLSF_encode.c:282:5
   15174:    37 16             	r7 = r3			  ## NLSF_encode.c:282:5
   15176:    14 16             	r4 = r1
   15178:    5a 16             	r10 = r5
   1517a:    01 16             	r1 = r0
   1517c:    f2 4e             	if (r2 != 0) goto -0x24 <silk_process_NLSFs+0x30A : 1515a >
   1517e:    84 ed c4 71       	ifs (r7 < r4) goto -0x78 <silk_process_NLSFs+0x2BA : 1510a >			  ## NLSF_encode.c:292:9
   15182:    40 20             	r0 = 0x0
   15184:    01 38             	r1 = [sp+96]
   15186:    24 25             	r4 = [sp+148]
   15188:    05 3d             	r5 = [sp+116]
   1518a:    04 8a             	goto 0x14 <silk_process_NLSFs+0x350 : 151a0 >
   1518c:    d8 ec ca 20       	r2 = [r12+r0<<2]			  ## NLSF_encode.c:305:22
   15190:    d8 ee 10 39       	r3 = b[r1+r9] (u)			  ## NLSF_encode.c:305:19
   15194:    a2 a2             	r2 = r2 >> 0x2			  ## NLSF_encode.c:305:22
   15196:    32 18             	r2 += r3			  ## NLSF_encode.c:305:19
   15198:    d8 ee 11 29       	b[r1+r9] = r2			  ## NLSF_encode.c:305:19
   1519c:    c1 30             	r1 += 0x10			  ## NLSF_encode.c:304:4
   1519e:    c0 21             	r0 += 0x1			  ## NLSF_encode.c:304:48
   151a0:    80 f8 f4 09       	if (r0 != 0x4) goto -0x18 <silk_process_NLSFs+0x33C : 1518c >
   151a4:    fd 3f             	r5 += -0x1
   151a6:    49 d6             	r9 = r4  #
   151a8:    85 3d             		 [sp+116] = r5
   151aa:    32 f1 ff 9f       	r2 = r9 + -0x1  #
   151ae:    00 3c             		 r0 = [sp+112]			  ## NLSF_encode.c:201:15
   151b0:    d8 ed 0a 02       	r0 = h[r0+r2<<1] (s)			  ## NLSF_encode.c:201:15
   151b4:    c2 d4             	r10 = 0  #			  ## NLSF_encode.c:201:15
   151b6:    01 39             		 r1 = [sp+100]			  ## NLSF_encode.c:202:12
   151b8:    9b d6             	r11 = r9  #			  ## NLSF_encode.c:202:12
   151ba:    a2 25             		 [sp+148] = r2			  ## NLSF_encode.c:202:12
   151bc:    d8 ed 1a c2       	r12 = h[r1+r2<<1] (s)			  ## NLSF_encode.c:202:12
   151c0:    01 3b             	r1 = [sp+108]			  ## NLSF_encode.c:201:15
   151c2:    10 18             	r0 += r1			  ## NLSF_encode.c:201:15
   151c4:    80 3e             	[sp+120] = r0
   151c6:    34 96             	goto 0xec <silk_process_NLSFs+0x464 : 152b4 >
   151c8:    20 24             	r0 = [sp+144]			  ## NLSF_encode.c:204:15
   151ca:    25 25             	r5 = [sp+148]			  ## NLSF_encode.c:204:15
   151cc:    d8 ee 00 05       	r0 = b[r0+r5] (u)			  ## NLSF_encode.c:204:15
   151d0:    d8 ed ea 1a       	r1 = h[r14+r10<<1] (s)			  ## NLSF_encode.c:204:15
   151d4:    10 db             	r0 *= r1  #			  ## NLSF_encode.c:204:15
   151d6:    21 21             		 r1 = [sp+132]			  ## NLSF_encode.c:206:15
   151d8:    8a a8             	r2 = r0 >>> 0x8			  ## NLSF_encode.c:204:15
   151da:    b4 e0 c2 02       	r0 = r12 - r2			  ## NLSF_encode.c:205:15
   151de:    10 1b             	r0 *= r1			  ## NLSF_encode.c:206:15
   151e0:    89 b0             	r1 = r0 >>> 0x10			  ## NLSF_encode.c:206:15
   151e2:    13 16             	r3 = r1			  ## NLSF_encode.c:207:15
   151e4:    b1 ee f6 0f       	ifs (r1 <= -0xa) {			  ## NLSF_encode.c:207:15
   151e8:    13 36             		r3 = -0xa
                               	}			  ## NLSF_encode.c:207:15
   151ea:    d8 16             	r8 = r13			  ## NLSF_encode.c:207:15
   151ec:    40 29             	r0 = 0x9			  ## NLSF_encode.c:207:15
   151ee:    b1 ee 09 00       	ifs (r1 <= 0x9) {			  ## NLSF_encode.c:207:15
   151f2:    30 16             		r0 = r3
                               	}			  ## NLSF_encode.c:207:15
   151f4:    b4 e0 e0 1b       	r1 = r14 + r11			  ## NLSF_encode.c:208:18
   151f8:    c3 ff 45 ec 01 00 	r3 = 0x1ec45 <silk_uniform8_iCDF+0x23 : 1ec44 >			  ## NLSF_encode.c:208:18
   151fe:    34 16             	r4 = r3			  ## NLSF_encode.c:208:18
   15200:    03 e1 43 42       	r3 = r4 + 0x243			  ## NLSF_encode.c:211:15
   15204:    d8 ec 3a 30       	r3 = [r3+r0<<2]			  ## NLSF_encode.c:211:15
   15208:    04 e1 47 42       	r4 = r4 + 0x247			  ## NLSF_encode.c:212:15
   1520c:    d8 ec 4a 40       	r4 = [r4+r0<<2]			  ## NLSF_encode.c:212:15
   15210:    52 ee 1f 04       	b[r1+0x4f] = r0			  ## NLSF_encode.c:208:18
   15214:    b4 e0 20 d3       	r13 = r2 + r3			  ## NLSF_encode.c:214:16
   15218:    d8 ed e9 da       	h[r14+r10<<1] = r13			  ## NLSF_encode.c:216:32
   1521c:    42 d8             	r2 += r4  #			  ## NLSF_encode.c:215:16
   1521e:    23 23             		 r3 = [sp+140]			  ## NLSF_encode.c:217:32
   15220:    09 81             	r1 = r0 + 0x1			  ## NLSF_encode.c:220:16
   15222:    d8 ed 39 2a       	h[r3+r10<<1] = r2			  ## NLSF_encode.c:217:32
   15226:    81 fd 08 08       	ifs (r1 < 0x4) goto 0x10 <silk_process_NLSFs+0x3EA : 1523a >			  ## NLSF_encode.c:220:8
   1522a:    81 f8 0f 08       	if (r1 != 0x4) goto 0x1e <silk_process_NLSFs+0x3FC : 1524c >			  ## NLSF_encode.c:221:9
   1522e:    44 f0 18 01       	r4 = 0x118  # <var_bss_size+0xC : 118 >
   15232:    01 3e             		 r1 = [sp+120]			  ## NLSF_encode.c:222:17
   15234:    10 18             	r0 += r1			  ## NLSF_encode.c:222:17
   15236:    08 44             	r0 = b[r0+0x4] (u)			  ## NLSF_encode.c:222:17
   15238:    04 99             	goto 0x32 <silk_process_NLSFs+0x41C : 1526c >
   1523a:    70 fe 0c f8       	ifs (r0 > -0x4) goto 0x18 <silk_process_NLSFs+0x406 : 15256 >			  ## NLSF_encode.c:228:15
   1523e:    f0 f8 0f f8       	if (r0 != -0x4) goto 0x1e <silk_process_NLSFs+0x410 : 15260 >			  ## NLSF_encode.c:229:9
   15242:    00 3e             	r0 = [sp+120]			  ## NLSF_encode.c:231:17
   15244:    40 f0 18 01       	r0 = 0x118  # <var_bss_size+0xC : 118 >
   15248:    0c 41             		 r4 = b[r0+0x1] (u)			  ## NLSF_encode.c:231:17
   1524a:    04 90             	goto 0x20 <silk_process_NLSFs+0x41C : 1526c >
   1524c:    e0 e1 2b 00       	r0 = r0 * 0x2B			  ## NLSF_encode.c:225:17
   15250:    04 e1 97 00       	r4 = r0 + 0x97			  ## NLSF_encode.c:226:17
   15254:    04 8a             	goto 0x14 <silk_process_NLSFs+0x41A : 1526a >			  ## NLSF_encode.c:226:17
   15256:    01 3e             	r1 = [sp+120]			  ## NLSF_encode.c:237:16
   15258:    10 18             	r0 += r1			  ## NLSF_encode.c:237:16
   1525a:    0c 45             	r4 = b[r0+0x5] (u)			  ## NLSF_encode.c:238:16
   1525c:    08 44             	r0 = b[r0+0x4] (u)			  ## NLSF_encode.c:237:16
   1525e:    04 86             	goto 0xc <silk_process_NLSFs+0x41C : 1526c >
   15260:    41 e0 d5 ff       	r1 = -0x2b <RAM_LIMIT_H+0xFFFFFFFFFFE5FFD4 : ffffffffffffffd4 >			  ## NLSF_encode.c:233:17
   15264:    10 1b             	r0 *= r1			  ## NLSF_encode.c:233:17
   15266:    04 e1 41 00       	r4 = r0 + 0x41			  ## NLSF_encode.c:234:17
   1526a:    d8 2c             	r0 += 0x6c
   1526c:    b3 f1 41 d0       	r3 = sextra(r13, p:0x0, l:0x10)  #			  ## NLSF_encode.c:241:28
   15270:    01 3f             		 r1 = [sp+124]			  ## NLSF_encode.c:242:28
   15272:    d8 ed 1a 15       	r1 = h[r1+r5<<1] (s)			  ## NLSF_encode.c:242:28
   15276:    b4 f0 c2 33       	r3 = r12 - r3  #			  ## NLSF_encode.c:241:28
   1527a:    26 20             		 r6 = [sp+128]			  ## NLSF_encode.c:241:28
   1527c:    c0 e1 a2 70       	r7 = r10 << 0x2			  ## NLSF_encode.c:240:28
   15280:    e7 18             	r7 += r14			  ## NLSF_encode.c:240:28
   15282:    33 db             	r3 *= r3  #			  ## NLSF_encode.c:242:28
   15284:    75 64             		 r5 = [r7+0x10] 			  ## NLSF_encode.c:240:28
   15286:    13 1b             	r3 *= r1			  ## NLSF_encode.c:242:28
   15288:    60 1b             	r0 *= r6			  ## NLSF_encode.c:242:28
   1528a:    50 18             	r0 += r5			  ## NLSF_encode.c:242:28
   1528c:    30 18             	r0 += r3			  ## NLSF_encode.c:242:28
   1528e:    a8 d7             	r0 = r2.l (s)  #			  ## NLSF_encode.c:243:28
   15290:    f0 64             		 [r7+0x10] = r0			  ## NLSF_encode.c:242:26
   15292:    b4 e0 c2 00       	r0 = r12 - r0			  ## NLSF_encode.c:243:28
   15296:    00 1b             	r0 *= r0			  ## NLSF_encode.c:244:28
   15298:    10 1b             	r0 *= r1			  ## NLSF_encode.c:244:28
   1529a:    f0 e1 40 16       	r1 = r4 * r6			  ## NLSF_encode.c:244:28
   1529e:    51 18             	r1 += r5			  ## NLSF_encode.c:244:28
   152a0:    10 d8             	r0 += r1  #			  ## NLSF_encode.c:244:28
   152a2:    21 22             		 r1 = [sp+136]			  ## NLSF_encode.c:244:26
   152a4:    c1 30             	r1 += 0x10			  ## NLSF_encode.c:244:26
   152a6:    d8 ec 1b 0a       	[r1+r10<<2] = r0			  ## NLSF_encode.c:244:26
   152aa:    0b e1 10 b0       	r11 = r11 + 0x10			  ## NLSF_encode.c:203:3
   152ae:    0a e1 01 a0       	r10 = r10 + 0x1			  ## NLSF_encode.c:203:29
   152b2:    8d 16             	r13 = r8
   152b4:    8d ed 88 a1       	ifs (r10 < r13) goto -0xf0 <silk_process_NLSFs+0x378 : 151c8 >
   152b8:    8d fe 05 04       	ifs (r13 <= 0x2) goto 0xa <silk_process_NLSFs+0x476 : 152c6 >
   152bc:    20 25             	r0 = [sp+148]			  ## NLSF_encode.c:256:14
   152be:    0a ff 01 00 ed fe 	ifs (r0 >= 0x1) goto -0x226 <silk_process_NLSFs+0x24E : 1509e >			  ## NLSF_encode.c:256:14
   152c4:    04 9e             	goto 0x3c <silk_process_NLSFs+0x4B2 : 15302 >			  ## NLSF_encode.c:256:14
   152c6:    c0 f1 d4 00       	r0 = r13 << 0x4  #			  ## NLSF_encode.c:149:22
   152ca:    05 3d             		 r5 = [sp+116]			  ## NLSF_encode.c:149:22
   152cc:    41 20             	r1 = 0x0			  ## NLSF_encode.c:149:22
   152ce:    52 d6             	r2 = r5  #			  ## NLSF_encode.c:149:22
   152d0:    04 32             		 r4 = [sp+72]			  ## NLSF_encode.c:149:22
   152d2:    04 86             	goto 0xc <silk_process_NLSFs+0x490 : 152e0 >			  ## NLSF_encode.c:149:22
   152d4:    2b 40             	r3 = b[r2+0x0] (u)			  ## NLSF_encode.c:250:31
   152d6:    c3 21             	r3 += 0x1			  ## NLSF_encode.c:250:45
   152d8:    d8 ee 01 32       	b[r0+r2] = r3			  ## NLSF_encode.c:250:29
   152dc:    c2 30             	r2 += 0x10			  ## NLSF_encode.c:249:4
   152de:    c1 21             	r1 += 0x1			  ## NLSF_encode.c:249:30
   152e0:    8d ed f8 11       	ifs (r1 < r13) goto -0x10 <silk_process_NLSFs+0x484 : 152d4 >
   152e4:    c0 e1 d5 00       	r0 = r13 << 0x5			  ## NLSF_encode.c:253:9
   152e8:    41 16             	r1 = r4
   152ea:    d4 e9 94 90       	r9 = [sp+148]
   152ee:    04 85             	goto 0xa <silk_process_NLSFs+0x4AA : 152fa >
   152f0:    5a 40             	r2 = b[r5+0x0] (u)			  ## NLSF_encode.c:254:21
   152f2:    d8 ee 01 25       	b[r0+r5] = r2			  ## NLSF_encode.c:254:19
   152f6:    c5 30             	r5 += 0x10			  ## NLSF_encode.c:253:4
   152f8:    c1 21             	r1 += 0x1			  ## NLSF_encode.c:253:54
   152fa:    81 fe f9 07       	ifs (r1 <= 0x3) goto -0xe <silk_process_NLSFs+0x4A0 : 152f0 >
   152fe:    4d 16             	r13 = r4
   15300:    67 81             	goto -0x27e <silk_process_NLSFs+0x234 : 15084 >
   15302:    41 20             	r1 = 0x0
   15304:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   1530a:    42 20             	r2 = 0x0
   1530c:    d4 e9 68 c0       	r12 = [sp+104]
   15310:    d4 e9 24 b0       	r11 = [sp+36]
   15314:    d0 e9 14 80       	r9_r8 = d[sp+20]
   15318:    c7 ff 86 b4 00 00 	r7 = 0xb486 <print+0x36 : b486 >
   1531e:    46 e0 60 01       	r6 = 0x160 <var_bss_size+0x54 : 160 >
   15322:    04 8a             	goto 0x14 <silk_process_NLSFs+0x4E8 : 15338 >
   15324:    d8 ec fa 32       	r3 = [r15+r2<<2]			  ## NLSF_encode.c:316:17
   15328:    24 16             	r4 = r2			  ## NLSF_encode.c:316:7
   1532a:    90 ee 00 43       	ifs (r0 <= r3) {			  ## NLSF_encode.c:316:7
   1532e:    03 16             		r3 = r0			  ## NLSF_encode.c:316:7
   15330:    14 16             		r4 = r1
                               	}			  ## NLSF_encode.c:316:7
   15332:    c2 21             	r2 += 0x1			  ## NLSF_encode.c:315:50
   15334:    30 16             	r0 = r3
   15336:    41 16             	r1 = r4
   15338:    82 f8 f4 11       	if (r2 != 0x8) goto -0x18 <silk_process_NLSFs+0x4D4 : 15324 >			  ## NLSF_encode.c:315:2
   1533c:    62 f1 03 10       	r2 = r1 & 0x3  #
   15340:    03 34             		 r3 = [sp+80]			  ## NLSF_encode.c:149:22
   15342:    22 a4             	r2 = r2 << 0x4			  ## NLSF_encode.c:149:22
   15344:    32 d8             	r2 += r3  #			  ## NLSF_encode.c:149:22
   15346:    04 31             		 r4 = [sp+68]			  ## NLSF_encode.c:149:22
   15348:    43 20             	r3 = 0x0
   1534a:    04 84             	goto 0x8 <silk_process_NLSFs+0x504 : 15354 >
   1534c:    d8 ee 20 53       	r5 = b[r2+r3] (u)			  ## NLSF_encode.c:322:18
   15350:    c5 07             	b[r4++=0x1] = r5			  ## NLSF_encode.c:322:16
   15352:    c3 21             	r3 += 0x1			  ## NLSF_encode.c:321:26
   15354:    05 37             	r5 = [sp+92]			  ## NLSF_encode.c:321:2
   15356:    85 ed f9 31       	ifs (r3 < r5) goto -0xe <silk_process_NLSFs+0x4FC : 1534c >			  ## NLSF_encode.c:321:2
   1535a:    02 2a             	r2 = [sp+40]			  ## NLSF_encode.c:326:15
   1535c:    03 2f             	r3 = [sp+60]			  ## NLSF_encode.c:326:15
   1535e:    dc ee 20 33       	r3 = b[++r2=r3] (u)			  ## NLSF_encode.c:326:15
   15362:    91 a2             	r1 = r1 >> 0x2			  ## NLSF_encode.c:326:18
   15364:    31 18             	r1 += r3			  ## NLSF_encode.c:326:15
   15366:    a9 40             	b[r2+0x0] = r1			  ## NLSF_encode.c:326:15
   15368:    04 28             	r4 = [sp+32]			  ## NLSF_encode.c:326:15
   1536a:    01 33             	r1 = [sp+76]			  ## NLSF_encode.c:415:15
   1536c:    d8 ec 4b 01       	[r4+r1<<2] = r0			  ## NLSF_encode.c:415:15
   15370:    54 ed b0 00       	r0 = h[r11+0x0] (s)			  ## NLSF_encode.c:419:58
   15374:    d0 ec bc 10       	r1 = [r11+0xc]			  ## NLSF_encode.c:419:26
   15378:    02 23             	r2 = [sp+12]			  ## NLSF_encode.c:419:56
   1537a:    20 db             	r0 *= r2  #			  ## NLSF_encode.c:419:56
   1537c:    02 30             		 r2 = [sp+64]			  ## NLSF_encode.c:419:56
   1537e:    10 18             	r0 += r1			  ## NLSF_encode.c:419:15
   15380:    b2 e8 00 50       	if (r2 != 0x0) {
   15384:    81 1c             		r1 = r0 + r2			  ## NLSF_encode.c:423:14
   15386:    19 5f             		r1 = b[r1+-0x1] (u)
                               	} else {			  ## NLSF_encode.c:423:14
   15388:    41 e0 00 01       		r1 = 0x100
                               	} <os_code_size+0x56 : 100 >			  ## NLSF_encode.c:423:14
   1538c:    d8 ee 00 02       	r0 = b[r0+r2] (u)			  ## NLSF_encode.c:423:14
   15390:    10 1e             	r0 = r1 - r0
   15392:    bf ea c7 e0       	call -0x3e72 <silk_lin2log : 11524 >			  ## NLSF_encode.c:425:26
   15396:    03 33             	r3 = [sp+76]
   15398:    31 a2             	r1 = r3 << 0x2			  ## NLSF_encode.c:426:17
   1539a:    41 d8             	r1 += r4  #			  ## NLSF_encode.c:426:17
   1539c:    02 27             		 r2 = [sp+28]			  ## NLSF_encode.c:426:17
   1539e:    a0 e0 80 0e       	r0 = 0x400 - r0			  ## NLSF_encode.c:425:24
   153a2:    20 1b             	r0 *= r2			  ## NLSF_encode.c:426:17
   153a4:    68 e8 00 10       	[r1+0x0] += r0			  ## NLSF_encode.c:426:15
   153a8:    31 d6             	r1 = r3  #			  ## NLSF_encode.c:426:15
   153aa:    00 31             		 r0 = [sp+68]			  ## NLSF_encode.c:386:2
   153ac:    c0 30             	r0 += 0x10			  ## NLSF_encode.c:386:2
   153ae:    80 31             	[sp+68] = r0			  ## NLSF_encode.c:386:31
   153b0:    c1 21             	r1 += 0x1			  ## NLSF_encode.c:386:31
   153b2:    00 2d             	r0 = [sp+52]			  ## NLSF_encode.c:386:2
   153b4:    4b ff 00 10 ee fd 	ifs (r1 < r0) goto -0x424 <silk_process_NLSFs+0x146 : 14f96 >			  ## NLSF_encode.c:386:2
   153ba:    f8 e8 9c 10       	r1 = sp + 156
   153be:    43 21             	r3 = 0x1			  ## NLSF_encode.c:430:2
   153c0:    40 d6             	r0 = r4  #			  ## NLSF_encode.c:430:2
   153c2:    02 2d             		 r2 = [sp+52]			  ## NLSF_encode.c:430:2
   153c4:    bf ea a6 fc       	call -0x6b4 <silk_insertion_sort_increasing : 14d14 >			  ## NLSF_encode.c:430:2
   153c8:    20 27             	r0 = [sp+156]			  ## NLSF_encode.c:432:46
   153ca:    01 2b             	r1 = [sp+44]			  ## NLSF_encode.c:432:32
   153cc:    d8 ec 1a 40       	r4 = [r1+r0<<2]			  ## NLSF_encode.c:432:32
   153d0:    03 2e             	r3 = [sp+56]
   153d2:    bc 40             	b[r3+0x0] = r4			  ## NLSF_encode.c:432:19
   153d4:    54 ed b2 20       	r2 = h[r11+0x2] (s)			  ## NLSF_encode.c:433:2
   153d8:    00 a4             	r0 = r0 << 0x4			  ## NLSF_encode.c:433:2
   153da:    01 2a             	r1 = [sp+40]			  ## NLSF_encode.c:433:2
   153dc:    01 18             	r1 += r0			  ## NLSF_encode.c:433:2
   153de:    38 81             	r0 = r3 + 0x1			  ## NLSF_encode.c:433:2
   153e0:    80 ff 56 ed fe ff 	call -0x112aa <memmove : 413c >			  ## NLSF_encode.c:433:2
   153e6:    54 ed b2 20       	r2 = h[r11+0x2] (s)			  ## NLSF_decode.c:113:60
   153ea:    d0 ec b8 00       	r0 = [r11+0x8]			  ## NLSF_decode.c:113:28
   153ee:    49 17             	r1 = r4.b0 (s)			  ## NLSF_decode.c:113:41
   153f0:    21 1b             	r1 *= r2			  ## NLSF_decode.c:113:58
   153f2:    10 18             	r0 += r1			  ## NLSF_decode.c:113:17
   153f4:    41 20             	r1 = 0x0
   153f6:    d4 e9 04 e0       	r14 = [sp+4]
   153fa:    d4 e9 00 f0       	r15 = [sp]
   153fe:    d4 e9 30 a0       	r10 = [sp+48]
   15402:    04 88             	goto 0x10 <silk_process_NLSFs+0x5C4 : 15414 >
   15404:    d8 ee 00 21       	r2 = b[r0+r1] (u)			  ## NLSF_decode.c:115:20
   15408:    22 a7             	r2 = r2 << 0x7			  ## NLSF_decode.c:115:20
   1540a:    d8 ed a9 21       	h[r10+r1<<1] = r2			  ## NLSF_decode.c:115:18
   1540e:    50 ed b2 20       	r2 = h[r11+0x2] (u)			  ## NLSF_decode.c:115:18
   15412:    c1 21             	r1 += 0x1			  ## NLSF_decode.c:114:37
   15414:    aa 17             	r2 = r2.l (s)			  ## NLSF_decode.c:114:18
   15416:    82 ed f5 11       	ifs (r1 < r2) goto -0x16 <silk_process_NLSFs+0x5B4 : 15404 >			  ## NLSF_decode.c:114:18
   1541a:    b2 d6             	r2 = r11  #			  ## NLSF_decode.c:119:2
   1541c:    00 2e             		 r0 = [sp+56]			  ## NLSF_decode.c:119:47
   1541e:    54 ee 00 30       	r3 = b[r0+0x0] (s)			  ## NLSF_decode.c:119:47
   15422:    00 36             	r0 = [sp+88]			  ## NLSF_decode.c:119:2
   15424:    01 35             	r1 = [sp+84]			  ## NLSF_decode.c:119:2
   15426:    bf ea 63 de       	call -0x433a <silk_NLSF_unpack : 110f0 >			  ## NLSF_decode.c:119:2
   1542a:    00 22             	r0 = [sp+8]			  ## NLSF_decode.c:119:2
   1542c:    08 e1 7f 00       	r8 = r0 + 0x7f			  ## NLSF_decode.c:74:7
   15430:    09 e1 fe 00       	r9 = r0 + 0xfe			  ## NLSF_decode.c:74:7
   15434:    54 ed 24 20       	r2 = h[r2+0x4] (s)			  ## NLSF_decode.c:74:7
   15438:    40 e0 f0 36       	r0 = 0x36f0 <WOLASynthesisFilter_Float_M256_m4_r1+0xEEC : 36f0 >			  ## NLSF_decode.c:74:7
   1543c:    54 ed b2 50       	r5 = h[r11+0x2] (s)			  ## NLSF_decode.c:74:11
   15440:    b4 e0 c0 d0       	r13 = r12 + r0			  ## NLSF_decode.c:74:11
   15444:    ab bf             	r3 = r2 >>> 0x1f
   15446:    46 20             	r6 = 0x0
   15448:    04 9a             	goto 0x34 <silk_process_NLSFs+0x62E : 1547e >
   1544a:    00 2e             	r0 = [sp+56]			  ## NLSF_decode.c:76:14
   1544c:    d8 ee 02 15       	r1 = b[r0+r5] (s)			  ## NLSF_decode.c:76:14
   15450:    d8 ee 80 05       	r0 = b[r8+r5] (u)			  ## NLSF_decode.c:75:14
   15454:    17 aa             	r7 = r1 << 0xa			  ## NLSF_decode.c:76:14
   15456:    60 1b             	r0 *= r6			  ## NLSF_decode.c:75:14
   15458:    8e a8             	r6 = r0 >>> 0x8			  ## NLSF_decode.c:75:14
   1545a:    81 fd 03 02       	ifs (r1 < 0x1) goto 0x6 <silk_process_NLSFs+0x614 : 15464 >			  ## NLSF_decode.c:77:7
   1545e:    30 e1 9a 7f       	r0 = r7 + -0x66			  ## NLSF_decode.c:78:14
   15462:    04 85             	goto 0xa <silk_process_NLSFs+0x61E : 1546e >
   15464:    40 e1 66 70       	r0 = r7 | 0x66			  ## NLSF_decode.c:80:14
   15468:    31 e8 00 00       	if (r1 == 0x0) {
   1546c:    70 16             		r0 = r7
                               	}			  ## NLSF_decode.c:79:14
   1546e:    f8 e1 00 12       	r1_r0 = r0 * r2 (s)			  ## NLSF_decode.c:82:14
   15472:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## NLSF_decode.c:82:14
   15476:    06 18             	r6 += r0			  ## NLSF_decode.c:82:14
   15478:    d8 ed 99 65       	h[r9+r5<<1] = r6			  ## NLSF_decode.c:83:14
   1547c:    45 16             	r5 = r4			  ## NLSF_decode.c:83:14
   1547e:    34 e1 ff 5f       	r4 = r5 + -0x1
   15482:    04 fd e2 01       	ifs (r4 >= 0x0) goto -0x3c <silk_process_NLSFs+0x5FA : 1544a >
   15486:    54 ed b2 20       	r2 = h[r11+0x2] (s)			  ## NLSF_decode.c:125:52
   1548a:    0c e1 40 d0       	r12 = r13 + 0x40			  ## NLSF_decode.c:110:46
   1548e:    c0 16             	r0 = r12			  ## NLSF_decode.c:125:2
   15490:    a1 16             	r1 = r10			  ## NLSF_decode.c:125:2
   15492:    bf ea 22 fb       	call -0x9bc <silk_NLSF_VQ_weights_laroia : 14ada >			  ## NLSF_decode.c:125:2
   15496:    40 20             	r0 = 0x0
   15498:    c1 ff 86 b4 00 00 	r1 = 0xb486 <print+0x36 : b486 >
   1549e:    d3 16             	r3 = r13
   154a0:    14 8d             	goto 0x5a <silk_process_NLSFs+0x6AC : 154fc >
   154a2:    50 ed 30 24       	r2 = h[r3+0x40] (u)			  ## NLSF_decode.c:129:32
   154a6:    22 b0             	r2 = r2 << 0x10			  ## NLSF_decode.c:129:32
   154a8:    44 20             	r4 = 0x0
   154aa:    82 fd 13 02       	ifs (r2 < 0x1) goto 0x26 <silk_process_NLSFs+0x684 : 154d4 >
   154ae:    80 e1 00 42       	r4 = clz(r2)			  ## entenc.c:124:2
   154b2:    15 16             	r5 = r1
   154b4:    34 ea 01 00       	if ((r4 & 0x1) != 0) {
   154b8:    60 e0 00 5c       		r5 = 0x8000
                               	}
   154bc:    ce a1             	r6 = r4 >>> 0x1			  ## Inlines.h:101:11
   154be:    e5 1a             	r5 >>= r6			  ## Inlines.h:101:7
   154c0:    42 1a             	r2 <<= r4			  ## Inlines.h:74:11
   154c2:    b2 e1 1c 2c       	r2 = uextra(r2, p:0x18, l:0x7)			  ## Inlines.h:75:22
   154c6:    e2 e1 d5 20       	r2 = r2 * 0xD5			  ## Inlines.h:104:9
   154ca:    f8 e1 50 72       	r7_r6 = r5 * r2 (s)			  ## Inlines.h:104:9
   154ce:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:104:9
   154d2:    6c 1d             	r4 = r6 + r5			  ## Inlines.h:104:9
   154d4:    d8 ed aa 20       	r2 = h[r10+r0<<1] (s)			  ## NLSF_decode.c:130:18
   154d8:    d4 ed 32 50       	r5 = h[r3++=0x2] (s)			  ## NLSF_decode.c:130:18
   154dc:    55 ae             	r5 = r5 << 0xe			  ## NLSF_decode.c:130:18
   154de:    f4 e1 51 44       	r4 = r5 / r4 (s)			  ## NLSF_decode.c:130:18
   154e2:    42 18             	r2 += r4			  ## NLSF_decode.c:130:18
   154e4:    24 16             	r4 = r2			  ## NLSF_decode.c:131:32
   154e6:    b2 ee 00 00       	ifs (r2 <= 0x0) {			  ## NLSF_decode.c:131:32
   154ea:    44 20             		r4 = 0x0
                               	}			  ## NLSF_decode.c:131:32
   154ec:    45 e0 ff 7f       	r5 = 0x7fff <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## NLSF_decode.c:131:32
   154f0:    a2 ed 00 0c       	ifs (r2 < 0x8000) {			  ## NLSF_decode.c:131:32
   154f4:    45 16             		r5 = r4
                               	}			  ## NLSF_decode.c:131:20
   154f6:    d8 ed a9 50       	h[r10+r0<<1] = r5			  ## NLSF_decode.c:131:18
   154fa:    c0 21             	r0 += 0x1			  ## NLSF_decode.c:128:37
   154fc:    54 ed b2 20       	r2 = h[r11+0x2] (s)			  ## NLSF_decode.c:128:18
   15500:    82 ed cf 01       	ifs (r0 < r2) goto -0x62 <silk_process_NLSFs+0x652 : 154a2 >			  ## NLSF_decode.c:128:18
   15504:    d0 ec b0 12       	r1 = [r11+0x20]			  ## NLSF_decode.c:135:45
   15508:    a0 16             	r0 = r10			  ## NLSF_decode.c:135:2
   1550a:    bf ea 37 fb       	call -0x992 <silk_NLSF_stabilize : 14b7c >			  ## NLSF_decode.c:135:2
   1550e:    d0 ec f8 93       	r9 = [r15+0x38]			  ## process_NLSFs.c:272:59
   15512:    c1 ff 45 ec 01 00 	r1 = 0x1ec45 <silk_uniform8_iCDF+0x23 : 1ec44 >
   15518:    00 e1 8b 10       	r0 = r1 + 0x8b			  ## process_NLSFs.c:144:13
   1551c:    b9 e8 10 00       	if (r9 != 0x10) {			  ## process_NLSFs.c:144:13
   15520:    10 16             		r0 = r1
                               	}			  ## process_NLSFs.c:144:13
   15522:    41 20             	r1 = 0x0
   15524:    c2 ff 8c 84 01 00 	r2 = 0x1848c <wtgv2_LSFCosTab_FIX_Q12 : 1848c >
   1552a:    04 98             	goto 0x30 <silk_process_NLSFs+0x70C : 1555c >
   1552c:    d8 ed aa 31       	r3 = h[r10+r1<<1] (s)			  ## process_NLSFs.c:149:11
   15530:    bc a8             	r4 = r3 >>> 0x8			  ## process_NLSFs.c:149:11
   15532:    44 a1             	r4 = r4 << 0x1			  ## process_NLSFs.c:158:13
   15534:    dc ed 42 52       	r5 = h[++r4=r2] (s)			  ## process_NLSFs.c:158:13
   15538:    54 ed 42 40       	r4 = h[r4+0x2] (s)			  ## process_NLSFs.c:159:13
   1553c:    76 e1 ff 30       	r6 = r3 & 0xFFFFFF00			  ## process_NLSFs.c:152:22
   15540:    b3 1f             	r3 = r3 - r6			  ## process_NLSFs.c:152:20
   15542:    4c 1f             	r4 = r4 - r5			  ## process_NLSFs.c:159:49
   15544:    43 1b             	r3 *= r4			  ## process_NLSFs.c:162:29
   15546:    44 28             	r4 = 0x8			  ## process_NLSFs.c:162:29
   15548:    d8 ee 00 61       	r6 = b[r0+r1] (u)			  ## process_NLSFs.c:162:3
   1554c:    a4 e1 60 54       	r4 <= insert(r5, p:0x8, l:0x18)			  ## process_NLSFs.c:162:29
   15550:    43 d8             	r3 += r4  #			  ## process_NLSFs.c:162:29
   15552:    04 35             		 r4 = [sp+84]			  ## process_NLSFs.c:162:27
   15554:    bb a4             	r3 = r3 >>> 0x4			  ## process_NLSFs.c:162:29
   15556:    d8 ec 4b 36       	[r4+r6<<2] = r3			  ## process_NLSFs.c:162:27
   1555a:    c1 21             	r1 += 0x1			  ## process_NLSFs.c:145:22
   1555c:    89 ed e6 11       	ifs (r1 < r9) goto -0x34 <silk_process_NLSFs+0x6DC : 1552c >
   15560:    c0 f1 91 2c       	r2 = r9 >>> 0x1  #			  ## process_NLSFs.c:165:7
   15564:    00 36             		 r0 = [sp+88]			  ## process_NLSFs.c:168:2
   15566:    01 35             	r1 = [sp+84]			  ## process_NLSFs.c:168:2
   15568:    bf ea 31 fc       	call -0x79e <silk_NLSF2A_find_poly.355 : 14dce >			  ## process_NLSFs.c:168:2
   1556c:    00 22             	r0 = [sp+8]			  ## process_NLSFs.c:169:29
   1556e:    01 e1 84 00       	r1 = r0 + 0x84			  ## process_NLSFs.c:169:29
   15572:    d0 16             	r0 = r13			  ## process_NLSFs.c:169:2
   15574:    bf ea 2b fc       	call -0x7aa <silk_NLSF2A_find_poly.355 : 14dce >			  ## process_NLSFs.c:169:2
   15578:    08 e1 8b 9d       	r8 = r9 + 0xd8b			  ## process_NLSFs.c:172:7
   1557c:    04 e1 20 e0       	r4 = r14 + 0x20			  ## process_NLSFs.c:272:21
   15580:    41 20             	r1 = 0x0
   15582:    04 97             	goto 0x2e <silk_process_NLSFs+0x762 : 155b2 >
   15584:    13 a2             	r3 = r1 << 0x2			  ## process_NLSFs.c:173:10
   15586:    00 36             	r0 = [sp+88]			  ## process_NLSFs.c:173:10
   15588:    03 18             	r3 += r0			  ## process_NLSFs.c:173:10
   1558a:    35 61             	r5 = [r3+0x4] 			  ## process_NLSFs.c:173:10
   1558c:    36 60             	r6 = [r3+0x0] 			  ## process_NLSFs.c:173:21
   1558e:    d0 ec 30 74       	r7 = [r3+0x40]			  ## process_NLSFs.c:174:21
   15592:    d0 ec 34 04       	r0 = [r3+0x44]			  ## process_NLSFs.c:174:10
   15596:    65 18             	r5 += r6			  ## process_NLSFs.c:173:19
   15598:    88 1f             	r0 = r0 - r7			  ## process_NLSFs.c:174:19
   1559a:    0e 1d             	r6 = r0 + r5			  ## process_NLSFs.c:177:28
   1559c:    a6 e0 00 60       	r6 = 0x0 - r6			  ## process_NLSFs.c:177:28
   155a0:    d7 ec 31 68       	[r3+-0x80] = r6			  ## process_NLSFs.c:177:20
   155a4:    08 df             	r0 = r0 - r5  #			  ## process_NLSFs.c:178:28
   155a6:    03 3a             		 r3 = [sp+104]			  ## process_NLSFs.c:178:20
   155a8:    d8 ec 3b 08       	[r3+r8<<2] = r0			  ## process_NLSFs.c:178:20
   155ac:    38 e1 ff 8f       	r8 = r8 + -0x1			  ## process_NLSFs.c:172:2
   155b0:    c1 21             	r1 += 0x1			  ## process_NLSFs.c:173:14
   155b2:    82 ed e7 11       	ifs (r1 < r2) goto -0x32 <silk_process_NLSFs+0x734 : 15584 >			  ## process_NLSFs.c:172:2
   155b6:    46 20             	r6 = 0x0
   155b8:    ca ff fe 7f 02 00 	r10 = 0x27ffe <text_size+0x7FFE : 27ffe >
   155be:    cb ff 00 40 00 e0 	r11 = 0xe0004000 <RAM_LIMIT_H+0xDFE64000 : e0004000 >
   155c4:    c7 ff be ff 00 00 	r7 = 0xffbe <.GJTIE291_0_0_+0x6F4 : ffbe >
   155ca:    45 20             	r5 = 0x0
   155cc:    14 85             	goto 0x4a <silk_process_NLSFs+0x7C8 : 15618 >
   155ce:    80 14             	r1_r0 = 0
   155d0:    04 8d             	goto 0x1a <silk_process_NLSFs+0x79C : 155ec >
   155d2:    03 d6             	r3 = r0  #			  ## process_NLSFs.c:187:8
   155d4:    22 24             		 r2 = [sp+144]			  ## process_NLSFs.c:186:13
   155d6:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## process_NLSFs.c:186:13
   155da:    30 e4 00 22       	r2 = abs(r2)			  ## process_NLSFs.c:186:13
   155de:    92 ee 00 41       	ifs (r2 <= r1) {
   155e2:    63 16             		r3 = r6			  ## process_NLSFs.c:187:8
   155e4:    12 16             		r2 = r1
                               	}			  ## process_NLSFs.c:187:8
   155e6:    c0 21             	r0 += 0x1			  ## process_NLSFs.c:185:23
   155e8:    36 16             	r6 = r3
   155ea:    21 16             	r1 = r2
   155ec:    89 ed f1 01       	ifs (r0 < r9) goto -0x1e <silk_process_NLSFs+0x782 : 155d2 >
   155f0:    18 90             	r0 = r1 + 0x10			  ## process_NLSFs.c:192:12
   155f2:    88 a5             	r0 = r0 >>> 0x5			  ## process_NLSFs.c:192:12
   155f4:    2b ff 00 0c 11 00 	ifs (r0 < 0x8000) goto 0x22 <silk_process_NLSFs+0x7CC : 1561c >
   155fa:    35 e4 01 0a       	r0 = smin(r0, r10)			  ## process_NLSFs.c:196:13
   155fe:    01 ae             	r1 = r0 << 0xe			  ## process_NLSFs.c:197:43
   15600:    b1 18             	r1 += r11			  ## process_NLSFs.c:197:43
   15602:    6a 81             	r2 = r6 + 0x1			  ## process_NLSFs.c:197:43
   15604:    20 1b             	r0 *= r2			  ## process_NLSFs.c:197:43
   15606:    88 a2             	r0 = r0 >>> 0x2			  ## process_NLSFs.c:197:43
   15608:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## process_NLSFs.c:197:43
   1560c:    72 de             	r2 = r7 - r0  #			  ## process_NLSFs.c:197:41
   1560e:    20 24             		 r0 = [sp+144]			  ## process_NLSFs.c:199:4
   15610:    91 16             	r1 = r9			  ## process_NLSFs.c:199:4
   15612:    bf ea 8f e9       	call -0x2ce2 <silk_bwexpander_32 : 12934 >			  ## process_NLSFs.c:199:4
   15616:    c5 21             	r5 += 0x1			  ## process_NLSFs.c:182:23
   15618:    85 fe d9 13       	ifs (r5 <= 0x9) goto -0x4e <silk_process_NLSFs+0x77E : 155ce >
   1561c:    40 20             	r0 = 0x0
   1561e:    05 f8 0f 14       	if (r5 == 0xa) goto 0x1e <silk_process_NLSFs+0x7F0 : 15640 >
   15622:    04 99             	goto 0x32 <silk_process_NLSFs+0x806 : 15656 >
   15624:    23 24             	r3 = [sp+144]
   15626:    d8 ec 3a 10       	r1 = [r3+r0<<2]			  ## process_NLSFs.c:210:9
   1562a:    c1 30             	r1 += 0x10			  ## process_NLSFs.c:210:9
   1562c:    99 a5             	r1 = r1 >>> 0x5			  ## process_NLSFs.c:210:9
   1562e:    78 e0 01 21       	r2 = sat16(r1) (s)			  ## process_NLSFs.c:211:4
   15632:    d8 ed 49 20       	h[r4+r0<<1] = r2			  ## process_NLSFs.c:212:13
   15636:    21 b0             	r1 = r2 << 0x10			  ## process_NLSFs.c:213:19
   15638:    99 ab             	r1 = r1 >>> 0xb			  ## process_NLSFs.c:213:19
   1563a:    d8 ec 3b 10       	[r3+r0<<2] = r1			  ## process_NLSFs.c:213:17
   1563e:    c0 21             	r0 += 0x1			  ## process_NLSFs.c:207:23
   15640:    89 ed f0 01       	ifs (r0 < r9) goto -0x20 <silk_process_NLSFs+0x7D4 : 15624 >
   15644:    04 8a             	goto 0x14 <silk_process_NLSFs+0x80A : 1565a >
   15646:    21 24             	r1 = [sp+144]			  ## process_NLSFs.c:217:29
   15648:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## process_NLSFs.c:217:29
   1564c:    c1 30             	r1 += 0x10			  ## process_NLSFs.c:217:29
   1564e:    91 a5             	r1 = r1 >> 0x5			  ## process_NLSFs.c:217:29
   15650:    d8 ed 49 10       	h[r4+r0<<1] = r1			  ## process_NLSFs.c:217:15
   15654:    c0 21             	r0 += 0x1			  ## process_NLSFs.c:216:23
   15656:    89 ed f6 01       	ifs (r0 < r9) goto -0x14 <silk_process_NLSFs+0x7F6 : 15646 >
   1565a:    60 f1 01 90       	r0 = r9 & 0x1  #
   1565e:    01 3a             		 r1 = [sp+104]			  ## process_NLSFs.c:125:16
   15660:    00 a6             	r0 = r0 << 0x6			  ## process_NLSFs.c:125:16
   15662:    10 18             	r0 += r1			  ## process_NLSFs.c:125:16
   15664:    41 e0 30 37       	r1 = 0x3730 <WOLASynthesisFilter_Float_M256_m4_r1+0xF2C : 3730 >			  ## process_NLSFs.c:125:16
   15668:    0d 1c             	r5 = r0 + r1			  ## process_NLSFs.c:125:16
   1566a:    46 20             	r6 = 0x0			  ## process_NLSFs.c:125:16
   1566c:    47 e0 ff 0f       	r7 = 0xfff <usb_code_size+0x53A : ffe >			  ## process_NLSFs.c:125:16
   15670:    4a e0 02 00       	r10 = 0x2 <mem_code_size+0x2 : 2 >			  ## process_NLSFs.c:125:16
   15674:    cb ff 6d a3 01 00 	r11 = 0x1a36d <sine_long_1024+0x16C : 1a36c >			  ## process_NLSFs.c:125:16
   1567a:    14 88             	goto 0x50 <silk_process_NLSFs+0x87C : 156cc >			  ## process_NLSFs.c:125:16
   1567c:    80 14             	r1_r0 = 0
   1567e:    04 87             	goto 0xe <silk_process_NLSFs+0x83E : 1568e >
   15680:    d8 ed 4a 21       	r2 = h[r4+r1<<1] (s)			  ## LPC_inv_pred_gain.c:142:14
   15684:    23 ac             	r3 = r2 << 0xc			  ## LPC_inv_pred_gain.c:143:18
   15686:    d8 ec 5b 31       	[r5+r1<<2] = r3			  ## LPC_inv_pred_gain.c:143:16
   1568a:    20 18             	r0 += r2			  ## LPC_inv_pred_gain.c:142:11
   1568c:    c1 21             	r1 += 0x1			  ## LPC_inv_pred_gain.c:141:26
   1568e:    89 ed f7 11       	ifs (r1 < r9) goto -0x12 <silk_process_NLSFs+0x830 : 15680 >
   15692:    07 ee 06 00       	ifs (r0 > r7) goto 0xc <silk_process_NLSFs+0x852 : 156a2 >
   15696:    c0 16             	r0 = r12			  ## LPC_inv_pred_gain.c:149:11
   15698:    91 16             	r1 = r9			  ## LPC_inv_pred_gain.c:149:11
   1569a:    bf ea 5a e9       	call -0x2d4c <LPC_inverse_pred_gain_QA : 12952 >			  ## LPC_inv_pred_gain.c:149:11
   1569e:    0b ee 17 00       	ifs (r0 > r11) goto 0x2e <silk_process_NLSFs+0x880 : 156d0 >
   156a2:    c8 e1 a0 06       	r0 = r10 << r6			  ## process_NLSFs.c:225:44
   156a6:    a2 f0 80 0b       	r2 = 0x10000 - r0  #			  ## process_NLSFs.c:225:42
   156aa:    20 24             		 r0 = [sp+144]			  ## process_NLSFs.c:225:4
   156ac:    91 16             	r1 = r9			  ## process_NLSFs.c:225:4
   156ae:    bf ea 41 e9       	call -0x2d7e <silk_bwexpander_32 : 12934 >			  ## process_NLSFs.c:225:4
   156b2:    40 20             	r0 = 0x0
   156b4:    04 88             	goto 0x10 <silk_process_NLSFs+0x876 : 156c6 >
   156b6:    21 24             	r1 = [sp+144]			  ## process_NLSFs.c:227:30
   156b8:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## process_NLSFs.c:227:30
   156bc:    c1 30             	r1 += 0x10			  ## process_NLSFs.c:227:30
   156be:    91 a5             	r1 = r1 >> 0x5			  ## process_NLSFs.c:227:30
   156c0:    d8 ed 49 10       	h[r4+r0<<1] = r1			  ## process_NLSFs.c:227:16
   156c4:    c0 21             	r0 += 0x1			  ## process_NLSFs.c:226:24
   156c6:    89 ed f6 01       	ifs (r0 < r9) goto -0x14 <silk_process_NLSFs+0x866 : 156b6 >
   156ca:    c6 21             	r6 += 0x1			  ## process_NLSFs.c:221:49
   156cc:    86 fe d6 1f       	ifs (r6 <= 0xf) goto -0x54 <silk_process_NLSFs+0x82C : 1567c >
   156d0:    d0 ec f8 03       	r0 = [r15+0x38]			  ## process_NLSFs.c:276:76
   156d4:    41 22             	r1 = 0x2			  ## process_NLSFs.c:276:91
   156d6:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## process_NLSFs.c:276:91
   156da:    20 03             	rep 0x6 r0 {			  ## opus_demo.c:186:2
   156dc:    41 05             		r1 = [r4++=0x4] 			  ## opus_demo.c:186:2
   156de:    d8 ec e5 10       		[r14++=0x4] = r1
                               	}			  ## opus_demo.c:186:2
   156e2:    f0 5b             	if (r0 != 0) goto -0xa <silk_process_NLSFs+0x88A : 156da >			  ## opus_demo.c:186:2
   156e4:    22 88             	sp += 0xa0
   156e6:    5f 04             	{pc, r15-r4} = [sp++]			  ## process_NLSFs.c:277:1


silk_find_pred_coefs_FIX:
   156e8:    7f 04             	[--sp] = {rets, r15-r4}			  ## encode_frame_FIX.c:630:0
   156ea:    c2 95             	sp += -0xac			  ## encode_frame_FIX.c:630:0
   156ec:    1a d6             	r10 = r1  #			  ## encode_frame_FIX.c:630:0
   156ee:    83 27             		 [sp+28] = r3			  ## encode_frame_FIX.c:630:0
   156f0:    41 e0 70 35       	r1 = 0x3570 <WOLASynthesisFilter_Float_M256_m4_r1+0xD6C : 3570 >			  ## encode_frame_FIX.c:630:0
   156f4:    01 18             	r1 += r0			  ## encode_frame_FIX.c:630:0
   156f6:    08 f1 30 10       	r8 = r1 + 0x30  #			  ## encode_frame_FIX.c:647:40
   156fa:    81 36             		 [sp+88] = r1			  ## encode_frame_FIX.c:647:40
   156fc:    11 e1 30 04       	r1 = r0 + 0x1430			  ## encode_frame_FIX.c:647:40
   15700:    43 f0 b0 29       	r3 = 0x29b0  # <WOLASynthesisFilter_Float_M256_m4_r1+0x1AC : 29b0 >			  ## encode_frame_FIX.c:640:51
   15704:    81 37             		 [sp+92] = r1			  ## encode_frame_FIX.c:640:51
   15706:    11 60             	r1 = [r1+0x0] 			  ## encode_frame_FIX.c:640:51
   15708:    30 d8             	r0 += r3  #			  ## encode_frame_FIX.c:640:51
   1570a:    80 35             		 [sp+84] = r0
   1570c:    80 2f             	[sp+60] = r0
   1570e:    40 20             	r0 = 0x0
   15710:    c4 ff ff ff ff 01 	r4 = 0x1ffffff <RAM_LIMIT_H+0x1E5FFFE : 1fffffe >
   15716:    04 85             	goto 0xa <silk_find_pred_coefs_FIX+0x3A : 15722 >
   15718:    d8 ec aa 30       	r3 = [r10+r0<<2]			  ## encode_frame_FIX.c:653:18
   1571c:    35 e4 41 43       	r4 = smin(r4, r3)			  ## encode_frame_FIX.c:653:18
   15720:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:652:41
   15722:    81 ed f9 01       	ifs (r0 < r1) goto -0xe <silk_find_pred_coefs_FIX+0x30 : 15718 >			  ## encode_frame_FIX.c:652:2
   15726:    cd bf             	r5 = r4 >>> 0x1f
   15728:    d0 f1 0e 40       	r5_r4 <<= 0xe  #
   1572c:    03 35             		 r3 = [sp+84]			  ## encode_frame_FIX.c:639:37
   1572e:    40 e0 f0 25       	r0 = 0x25f0 <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## encode_frame_FIX.c:639:37
   15732:    30 18             	r0 += r3			  ## encode_frame_FIX.c:639:37
   15734:    60 f0 80 7b       	r7 = 0x10000  #
   15738:    80 28             		 [sp+32] = r0
   1573a:    03 36             	r3 = [sp+88]
   1573c:    00 e1 40 30       	r0 = r3 + 0x40			  ## encode_frame_FIX.c:648:32
   15740:    09 f1 20 30       	r9 = r3 + 0x20  #			  ## encode_frame_FIX.c:646:32
   15744:    80 29             		 [sp+36] = r0			  ## encode_frame_FIX.c:646:32
   15746:    46 20             	r6 = 0x0			  ## encode_frame_FIX.c:646:32
   15748:    30 16             	r0 = r3			  ## encode_frame_FIX.c:656:30
   1574a:    d4 e9 61 a0       	[sp+96] = r10			  ## encode_frame_FIX.c:656:30
   1574e:    04 9a             	goto 0x34 <silk_find_pred_coefs_FIX+0x9C : 15784 >			  ## encode_frame_FIX.c:656:30
   15750:    d8 ec aa 16       	r1 = [r10+r6<<2]			  ## encode_frame_FIX.c:660:54
   15754:    f6 e1 40 b1       	r11_r10 = r5_r4 / r1 (s)			  ## Inlines.h:122:20
   15758:    ba ee 6b 01       	ifs (r10 <= 0x16b) {
   1575c:    4a e0 6b 01       		r10 = 0x16b
                               	} <var_bss_size+0x5E : 16a >			  ## encode_frame_FIX.c:663:23
   15760:    d0 ec 01 a0       	[r0+0x0] = r10			  ## encode_frame_FIX.c:663:21
   15764:    f8 e1 a0 ca       	r13_r12 = r10 * r10 (u)			  ## encode_frame_FIX.c:667:9
   15768:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## encode_frame_FIX.c:667:9
   1576c:    c0 e1 c1 1c       	r1 = r12 >>> 0x1			  ## encode_frame_FIX.c:668:19
   15770:    f4 f1 70 1a       	r1 = r7 / r10 (u)  #			  ## encode_frame_FIX.c:671:22
   15774:    81 68             		 [r0+0x20] = r1			  ## encode_frame_FIX.c:668:17
   15776:    81 64             	[r0+0x10] = r1			  ## encode_frame_FIX.c:671:20
   15778:    01 37             	r1 = [sp+92]			  ## encode_frame_FIX.c:671:20
   1577a:    11 60             	r1 = [r1+0x0] 			  ## encode_frame_FIX.c:671:20
   1577c:    c0 24             	r0 += 0x4			  ## encode_frame_FIX.c:656:2
   1577e:    c6 21             	r6 += 0x1			  ## encode_frame_FIX.c:656:41
   15780:    d4 e9 60 a0       	r10 = [sp+96]
   15784:    81 ed e4 61       	ifs (r6 < r1) goto -0x38 <silk_find_pred_coefs_FIX+0x68 : 15750 >
   15788:    05 35             	r5 = [sp+84]
   1578a:    17 e1 20 50       	r7 = r5 + 0x1020
   1578e:    13 f1 70 54       	r3 = r5 + 0x1470  #
   15792:    78 42             		 r0 = b[r7+0x2] (u)			  ## encode_frame_FIX.c:675:26
   15794:    03 f1 e4 a1       	r3 = r10 + 0x1e4  #			  ## encode_frame_FIX.c:675:26
   15798:    83 30             		 [sp+64] = r3			  ## encode_frame_FIX.c:675:26
   1579a:    83 34             	[sp+80] = r3			  ## encode_frame_FIX.c:675:26
   1579c:    01 ff 02 00 14 02 	if (r0 != 0x2) goto 0x428 <silk_find_pred_coefs_FIX+0x4E2 : 15bca >			  ## encode_frame_FIX.c:675:6
   157a2:    06 37             	r6 = [sp+92]
   157a4:    60 63             	r0 = [r6+0xc] 			  ## encode_frame_FIX.c:682:38
   157a6:    64 62             	r4 = [r6+0x8] 			  ## encode_frame_FIX.c:681:56
   157a8:    d4 e9 19 80       	[sp+24] = r8			  ## encode_frame_FIX.c:680:3
   157ac:    00 f1 78 a0       	r0 = r10 + 0x78  #			  ## encode_frame_FIX.c:681:15
   157b0:    80 25             		 [sp+20] = r0			  ## encode_frame_FIX.c:680:3
   157b2:    01 f1 50 a0       	r1 = r10 + 0x50  #			  ## encode_frame_FIX.c:680:28
   157b6:    81 24             		 [sp+16] = r1			  ## encode_frame_FIX.c:680:3
   157b8:    84 23             	[sp+12] = r4			  ## encode_frame_FIX.c:680:3
   157ba:    d4 e9 09 90       	[sp+8] = r9			  ## encode_frame_FIX.c:680:3
   157be:    80 33             	[sp+76] = r0
   157c0:    50 d6             	r0 = r5  #			  ## encode_frame_FIX.c:680:3
   157c2:    80 21             		 [sp+4] = r0			  ## encode_frame_FIX.c:680:3
   157c4:    c3 2c             	r3 += 0xc			  ## encode_frame_FIX.c:680:70
   157c6:    82 20             	[sp] = r2			  ## encode_frame_FIX.c:680:3
   157c8:    81 2d             	[sp+52] = r1			  ## encode_frame_FIX.c:680:3
   157ca:    02 2f             	r2 = [sp+60]			  ## encode_frame_FIX.c:680:3
   157cc:    bf ea ea ed       	call -0x242c <silk_find_LTP_FIX : 133a4 >			  ## encode_frame_FIX.c:680:3
   157d0:    60 6e             	r0 = [r6+0x38] 			  ## encode_frame_FIX.c:686:75
   157d2:    80 2c             	[sp+48] = r0			  ## encode_frame_FIX.c:686:52
   157d4:    60 6f             	r0 = [r6+0x3c] 			  ## encode_frame_FIX.c:686:52
   157d6:    80 3f             	[sp+124] = r0			  ## encode_frame_FIX.c:686:110
   157d8:    60 60             	r0 = [r6+0x0] 			  ## encode_frame_FIX.c:686:110
   157da:    10 f1 0c 50       	r0 = r5 + 0x100c  #
   157de:    80 3a             		 [sp+104] = r0
   157e0:    80 2a             	[sp+40] = r0
   157e2:    40 20             	r0 = 0x0
   157e4:    80 2b             	[sp+44] = r0
   157e6:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   157ec:    81 3d             	[sp+116] = r1
   157ee:    80 31             	[sp+68] = r0
   157f0:    45 20             	r5 = 0x0
   157f2:    87 2e             	[sp+56] = r7
   157f4:    0c ff 02 50 51 01 	ifs (r5 > 0x2) goto 0x2a2 <silk_find_pred_coefs_FIX+0x3B4 : 15a9c >
   157fa:    c0 ff 5c ea 01 00 	r0 = 0x1ea5c <silk_LTP_vq_ptrs_Q7 : 1ea5c >			  ## gain_quant.c:217:16
   15800:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## gain_quant.c:217:16
   15804:    80 39             	[sp+100] = r0
   15806:    c0 ff e0 eb 01 00 	r0 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >
   1580c:    01 16             	r1 = r0
   1580e:    00 e1 88 10       	r0 = r1 + 0x88			  ## gain_quant.c:218:21
   15812:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## gain_quant.c:218:21
   15816:    00 f1 7c 10       	r0 = r1 + 0x7c  #			  ## gain_quant.c:216:16
   1581a:    a0 21             		 [sp+132] = r0			  ## gain_quant.c:216:16
   1581c:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## gain_quant.c:216:16
   15820:    58 dc             	r0 = r5 + r1  #			  ## gain_quant.c:216:16
   15822:    a0 20             		 [sp+128] = r0			  ## gain_quant.c:216:16
   15824:    85 32             	[sp+72] = r5			  ## gain_quant.c:216:16
   15826:    54 ee 07 00       	r0 = b[r0+0x7] (s)			  ## gain_quant.c:219:16
   1582a:    a0 23             	[sp+140] = r0			  ## gain_quant.c:226:25
   1582c:    00 30             	r0 = [sp+64]			  ## gain_quant.c:226:25
   1582e:    02 60             	r2 = [r0+0x0] 			  ## gain_quant.c:226:25
   15830:    40 20             	r0 = 0x0
   15832:    80 3c             	[sp+112] = r0
   15834:    00 2d             	r0 = [sp+52]
   15836:    a0 24             	[sp+144] = r0
   15838:    d4 e9 3c b0       	r11 = [sp+60]
   1583c:    44 20             	r4 = 0x0
   1583e:    84 87             	goto 0x20e <silk_find_pred_coefs_FIX+0x366 : 15a4e >
   15840:    40 f0 55 18       	r0 = 0x1855  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x50 : 1854 >			  ## gain_quant.c:229:5
   15844:    84 3e             		 [sp+120] = r4			  ## gain_quant.c:229:5
   15846:    80 de             	r0 = r0 - r2  #			  ## gain_quant.c:229:5
   15848:    82 3b             		 [sp+108] = r2			  ## gain_quant.c:229:5
   1584a:    bf ea 46 de       	call -0x4374 <silk_log2lin : 114da >			  ## gain_quant.c:228:18
   1584e:    f0 2d             	r0 += -0x33			  ## gain_quant.c:229:32
   15850:    c2 d4             	r10 = 0  #
   15852:    a0 22             		 [sp+136] = r0
   15854:    44 20             	r4 = 0x0
   15856:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   1585c:    a0 25             	[sp+148] = r0
   1585e:    d4 e9 64 90       	r9 = [sp+100]
   15862:    64 8d             	goto 0x19a <silk_find_pred_coefs_FIX+0x316 : 159fe >
   15864:    a4 28             	[sp+160] = r4
   15866:    54 ee 91 00       	r0 = b[r9+0x1] (s)			  ## gain_quant.c:123:33
   1586a:    23 24             	r3 = [sp+144]			  ## gain_quant.c:123:33
   1586c:    54 ed 32 20       	r2 = h[r3+0x2] (s)			  ## gain_quant.c:123:19
   15870:    d0 ec b4 60       	r6 = [r11+0x4]			  ## gain_quant.c:136:14
   15874:    00 a7             	r0 = r0 << 0x7			  ## gain_quant.c:123:33
   15876:    b4 e0 22 c0       	r12 = r2 - r0			  ## gain_quant.c:123:31
   1587a:    f8 e1 60 7c       	r7_r6 = r6 * r12 (s)			  ## gain_quant.c:136:14
   1587e:    54 ee 92 00       	r0 = b[r9+0x2] (s)			  ## gain_quant.c:124:33
   15882:    54 ed 34 20       	r2 = h[r3+0x4] (s)			  ## gain_quant.c:124:19
   15886:    d0 ec b8 10       	r1 = [r11+0x8]			  ## gain_quant.c:137:14
   1588a:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## gain_quant.c:136:14
   1588e:    00 a7             	r0 = r0 << 0x7			  ## gain_quant.c:124:33
   15890:    b4 e0 22 d0       	r13 = r2 - r0			  ## gain_quant.c:124:31
   15894:    f8 e1 10 1d       	r1_r0 = r1 * r13 (s)			  ## gain_quant.c:137:14
   15898:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## gain_quant.c:137:14
   1589c:    54 ee 93 20       	r2 = b[r9+0x3] (s)			  ## gain_quant.c:125:33
   158a0:    54 ed 36 40       	r4 = h[r3+0x6] (s)			  ## gain_quant.c:125:19
   158a4:    d0 ec bc 50       	r5 = [r11+0xc]			  ## gain_quant.c:138:14
   158a8:    60 18             	r0 += r6			  ## gain_quant.c:137:14
   158aa:    21 a7             	r1 = r2 << 0x7			  ## gain_quant.c:125:33
   158ac:    49 1e             	r1 = r4 - r1			  ## gain_quant.c:125:31
   158ae:    f8 f1 50 51       	r5_r4 = r5 * r1 (s)  #			  ## gain_quant.c:138:14
   158b2:    a1 26             		 [sp+152] = r1			  ## gain_quant.c:138:14
   158b4:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:138:14
   158b8:    54 ee 94 10       	r1 = b[r9+0x4] (s)			  ## gain_quant.c:126:33
   158bc:    54 ed 38 20       	r2 = h[r3+0x8] (s)			  ## gain_quant.c:126:19
   158c0:    d0 ec b0 61       	r6 = [r11+0x10]			  ## gain_quant.c:139:14
   158c4:    40 18             	r0 += r4			  ## gain_quant.c:138:14
   158c6:    11 a7             	r1 = r1 << 0x7			  ## gain_quant.c:126:33
   158c8:    b4 e0 22 81       	r8 = r2 - r1			  ## gain_quant.c:126:31
   158cc:    f8 e1 60 58       	r5_r4 = r6 * r8 (s)			  ## gain_quant.c:139:14
   158d0:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:139:14
   158d4:    54 ed 30 10       	r1 = h[r3+0x0] (s)			  ## gain_quant.c:122:19
   158d8:    d4 ee 94 20       	r2 = b[r9++=0x4] (s)			  ## gain_quant.c:122:33
   158dc:    40 18             	r0 += r4			  ## gain_quant.c:139:14
   158de:    d0 ec b0 40       	r4 = [r11+0x0]			  ## gain_quant.c:141:14
   158e2:    00 a1             	r0 = r0 << 0x1			  ## gain_quant.c:140:14
   158e4:    22 a7             	r2 = r2 << 0x7			  ## gain_quant.c:122:33
   158e6:    92 de             	r2 = r1 - r2  #			  ## gain_quant.c:122:31
   158e8:    21 20             		 r1 = [sp+128]			  ## gain_quant.c:129:14
   158ea:    f8 e1 40 52       	r5_r4 = r4 * r2 (s)			  ## gain_quant.c:141:14
   158ee:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:141:14
   158f2:    40 18             	r0 += r4			  ## gain_quant.c:141:14
   158f4:    d8 ee 10 4a       	r4 = b[r1+r10] (u)			  ## gain_quant.c:129:14
   158f8:    f8 f1 00 72       	r7_r6 = r0 * r2 (s)  #			  ## gain_quant.c:142:14
   158fc:    21 21             		 r1 = [sp+132]			  ## gain_quant.c:120:17
   158fe:    d4 e9 9d a0       	[sp+156] = r10			  ## gain_quant.c:120:17
   15902:    d8 ee 10 1a       	r1 = b[r1+r10] (u)			  ## gain_quant.c:120:17
   15906:    d0 f1 00 69       	r7_r6 >>= 0x10  #			  ## gain_quant.c:142:14
   1590a:    00 3f             		 r0 = [sp+124]			  ## gain_quant.c:129:14
   1590c:    40 db             	r0 *= r4  #			  ## gain_quant.c:129:14
   1590e:    22 22             		 r2 = [sp+136]			  ## gain_quant.c:132:14
   15910:    92 1e             	r2 = r1 - r2			  ## gain_quant.c:132:14
   15912:    b2 ee 00 00       	ifs (r2 <= 0x0) {			  ## gain_quant.c:132:14
   15916:    42 20             		r2 = 0x0
                               	}			  ## gain_quant.c:132:14
   15918:    50 ec bc 41       	r5_r4 = d[r11+0x1c]			  ## gain_quant.c:145:14
   1591c:    f8 f1 40 fd       	r15_r14 = r4 * r13 (s)  #			  ## gain_quant.c:145:14
   15920:    23 26             		 r3 = [sp+152]			  ## gain_quant.c:145:14
   15922:    d0 e1 00 e9       	r15_r14 >>= 0x10			  ## gain_quant.c:145:14
   15926:    f8 e1 50 53       	r5_r4 = r5 * r3 (s)			  ## gain_quant.c:146:14
   1592a:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:146:14
   1592e:    e4 18             	r4 += r14			  ## gain_quant.c:146:14
   15930:    d0 ec b4 52       	r5 = [r11+0x24]			  ## gain_quant.c:147:14
   15934:    22 aa             	r2 = r2 << 0xa			  ## gain_quant.c:132:14
   15936:    20 18             	r0 += r2			  ## gain_quant.c:132:14
   15938:    b4 e0 00 a6       	r10 = r0 + r6			  ## gain_quant.c:142:14
   1593c:    f8 e1 50 78       	r7_r6 = r5 * r8 (s)			  ## gain_quant.c:147:14
   15940:    d0 ec b8 01       	r0 = [r11+0x18]			  ## gain_quant.c:149:14
   15944:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## gain_quant.c:147:14
   15948:    c2 1d             	r2 = r4 + r6			  ## gain_quant.c:147:14
   1594a:    22 a1             	r2 = r2 << 0x1			  ## gain_quant.c:148:14
   1594c:    f8 e1 00 5c       	r5_r4 = r0 * r12 (s)			  ## gain_quant.c:149:14
   15950:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:149:14
   15954:    20 1d             	r0 = r2 + r4			  ## gain_quant.c:149:14
   15956:    f8 e1 00 7c       	r7_r6 = r0 * r12 (s)			  ## gain_quant.c:150:14
   1595a:    d0 ec b4 03       	r0 = [r11+0x34]			  ## gain_quant.c:153:14
   1595e:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## gain_quant.c:150:14
   15962:    d0 ec b8 23       	r2 = [r11+0x38]			  ## gain_quant.c:154:14
   15966:    b4 e0 a0 76       	r7 = r10 + r6			  ## gain_quant.c:150:14
   1596a:    f8 e1 00 53       	r5_r4 = r0 * r3 (s)			  ## gain_quant.c:153:14
   1596e:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:153:14
   15972:    f8 e1 20 f8       	r15_r14 = r2 * r8 (s)			  ## gain_quant.c:154:14
   15976:    d0 ec b0 03       	r0 = [r11+0x30]			  ## gain_quant.c:156:14
   1597a:    d0 e1 00 e9       	r15_r14 >>= 0x10			  ## gain_quant.c:154:14
   1597e:    b4 e0 e0 24       	r2 = r14 + r4			  ## gain_quant.c:154:14
   15982:    22 a1             	r2 = r2 << 0x1			  ## gain_quant.c:155:14
   15984:    f8 e1 00 5d       	r5_r4 = r0 * r13 (s)			  ## gain_quant.c:156:14
   15988:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:156:14
   1598c:    20 1d             	r0 = r2 + r4			  ## gain_quant.c:156:14
   1598e:    06 e1 48 b0       	r6 = r11 + 0x48
   15992:    f8 f1 00 5d       	r5_r4 = r0 * r13 (s)  #			  ## gain_quant.c:157:14
   15996:    62 66             		 r2 = [r6+0x18] 			  ## gain_quant.c:166:14
   15998:    d0 e1 00 49       	r5_r4 >>= 0x10			  ## gain_quant.c:157:14
   1599c:    47 18             	r7 += r4			  ## gain_quant.c:157:14
   1599e:    f8 e1 80 d2       	r13_r12 = r8 * r2 (s)			  ## gain_quant.c:167:14
   159a2:    d0 e1 00 c1       	r13_r12 <<= 0x10			  ## gain_quant.c:167:14
   159a6:    d0 e1 00 ce       	r13_r12 >>>= 0x20			  ## gain_quant.c:167:14
   159aa:    f8 e1 c0 d8       	r13_r12 = r12 * r8 (s)			  ## gain_quant.c:167:14
   159ae:    06 eb 05 00       	{r2, r0} = [r6+]			  ## gain_quant.c:162:14
   159b2:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## gain_quant.c:167:14
   159b6:    b4 e0 70 4c       	r4 = r7 + r12			  ## gain_quant.c:163:14
   159ba:    f8 e1 00 73       	r7_r6 = r0 * r3 (s)			  ## gain_quant.c:162:14
   159be:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## gain_quant.c:162:14
   159c2:    f8 f1 20 d8       	r13_r12 = r2 * r8 (s)  #			  ## gain_quant.c:160:14
   159c6:    22 25             		 r2 = [sp+148]			  ## gain_quant.c:171:7
   159c8:    d0 e1 0f c8       	r13_r12 >>= 0xf			  ## gain_quant.c:161:14
   159cc:    70 e1 01 c0       	r0 = r12 & 0xFFFFFFFE			  ## gain_quant.c:161:14
   159d0:    60 18             	r0 += r6			  ## gain_quant.c:162:14
   159d2:    f8 e1 00 73       	r7_r6 = r0 * r3 (s)			  ## gain_quant.c:163:14
   159d6:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## gain_quant.c:163:14
   159da:    c0 dd             	r0 = r4 + r6  #			  ## gain_quant.c:167:14
   159dc:    24 28             		 r4 = [sp+160]			  ## gain_quant.c:167:14
   159de:    02 ed 07 00       	ifs (r0 >= r2) goto 0xe <silk_find_pred_coefs_FIX+0x308 : 159f0 >
   159e2:    f8 e8 a4 20       	r2 = sp + 164
   159e6:    03 3e             	r3 = [sp+120]			  ## gain_quant.c:173:9
   159e8:    d8 ee 21 43       	b[r2+r3] = r4			  ## gain_quant.c:173:9
   159ec:    a0 25             	[sp+148] = r0			  ## gain_quant.c:173:9
   159ee:    81 3d             	[sp+116] = r1			  ## gain_quant.c:173:9
   159f0:    09 e1 01 90       	r9 = r9 + 0x1			  ## gain_quant.c:119:2
   159f4:    c4 21             	r4 += 0x1			  ## gain_quant.c:119:2
   159f6:    d4 e9 9c a0       	r10 = [sp+156]			  ## gain_quant.c:119:2
   159fa:    0a e1 01 a0       	r10 = r10 + 0x1			  ## gain_quant.c:119:22
   159fe:    20 23             	r0 = [sp+140]			  ## gain_quant.c:119:2
   15a00:    80 ed 30 a1       	ifs (r10 < r0) goto -0x1a0 <silk_find_pred_coefs_FIX+0x17C : 15864 >			  ## gain_quant.c:119:2
   15a04:    00 3c             	r0 = [sp+112]			  ## gain_quant.c:245:20
   15a06:    21 25             	r1 = [sp+148]			  ## gain_quant.c:245:20
   15a08:    10 18             	r0 += r1			  ## gain_quant.c:245:20
   15a0a:    c1 ff ff ff ff 7f 	r1 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## gain_quant.c:245:20
   15a10:    81 3c             	[sp+112] = r1			  ## gain_quant.c:245:20
   15a12:    30 ed 00 00       	ifs (r0 >= 0x0) {			  ## gain_quant.c:245:20
   15a16:    80 3c             		[sp+112] = r0
                               	}			  ## gain_quant.c:245:20
   15a18:    00 3d             	r0 = [sp+116]			  ## gain_quant.c:246:26
   15a1a:    03 e1 33 00       	r3 = r0 + 0x33			  ## gain_quant.c:246:26
   15a1e:    30 16             	r0 = r3			  ## gain_quant.c:246:26
   15a20:    bf ea 80 dd       	call -0x4500 <silk_lin2log : 11524 >			  ## gain_quant.c:246:26
   15a24:    02 3b             	r2 = [sp+108]
   15a26:    81 dc             	r1 = r0 + r2  #			  ## gain_quant.c:246:26
   15a28:    04 3e             		 r4 = [sp+120]			  ## gain_quant.c:246:26
   15a2a:    40 20             	r0 = 0x0			  ## gain_quant.c:246:26
   15a2c:    0b ff 80 13 07 00 	ifs (r1 < 0x380) goto 0xe <silk_find_pred_coefs_FIX+0x358 : 15a40 >
   15a32:    30 16             	r0 = r3			  ## gain_quant.c:246:26
   15a34:    23 16             	r3 = r2			  ## gain_quant.c:246:26
   15a36:    bf ea 75 dd       	call -0x4516 <silk_lin2log : 11524 >			  ## gain_quant.c:246:26
   15a3a:    30 18             	r0 += r3			  ## gain_quant.c:246:26
   15a3c:    30 e1 80 0c       	r0 = r0 + -0x380			  ## gain_quant.c:246:26
   15a40:    c4 21             	r4 += 0x1			  ## gain_quant.c:227:30
   15a42:    0b f1 64 b0       	r11 = r11 + 0x64  #			  ## gain_quant.c:250:14
   15a46:    21 24             		 r1 = [sp+144]			  ## gain_quant.c:249:14
   15a48:    c1 2a             	r1 += 0xa			  ## gain_quant.c:249:14
   15a4a:    02 d6             	r2 = r0  #
   15a4c:    a1 24             		 [sp+144] = r1
   15a4e:    00 3a             	r0 = [sp+104]			  ## gain_quant.c:227:3
   15a50:    4b ff 00 40 f5 fe 	ifs (r4 < r0) goto -0x216 <silk_find_pred_coefs_FIX+0x158 : 15840 >			  ## gain_quant.c:227:3
   15a56:    c4 ff fe ff ff 7f 	r4 = 0x7ffffffe <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## gain_quant.c:254:19
   15a5c:    48 81             	r0 = r4 + 0x1			  ## gain_quant.c:254:19
   15a5e:    01 3c             	r1 = [sp+112]			  ## gain_quant.c:254:19
   15a60:    91 e8 00 00       	if (r1 != r0) {			  ## gain_quant.c:254:19
   15a64:    14 16             		r4 = r1
                               	}			  ## gain_quant.c:254:19
   15a66:    d4 e9 60 a0       	r10 = [sp+96]
   15a6a:    07 2e             	r7 = [sp+56]
   15a6c:    05 32             	r5 = [sp+72]
   15a6e:    00 31             	r0 = [sp+68]			  ## gain_quant.c:256:7
   15a70:    00 ed 0b 40       	ifs (r4 >= r0) goto 0x16 <silk_find_pred_coefs_FIX+0x3A2 : 15a8a >			  ## gain_quant.c:256:7
   15a74:    26 d6             	r6 = r2  #
   15a76:    fd 45             		 b[r7+0x5] = r5			  ## gain_quant.c:258:23
   15a78:    f8 e8 a4 10       	r1 = sp + 164			  ## gain_quant.c:258:23
   15a7c:    00 2a             	r0 = [sp+40]			  ## gain_quant.c:259:4
   15a7e:    02 3a             	r2 = [sp+104]			  ## gain_quant.c:259:4
   15a80:    80 ff b6 e6 fe ff 	call -0x1194a <memmove : 413c >			  ## gain_quant.c:259:4
   15a86:    84 31             	[sp+68] = r4
   15a88:    86 2b             	[sp+44] = r6
   15a8a:    c5 21             	r5 += 0x1			  ## gain_quant.c:211:22
   15a8c:    00 2c             	r0 = [sp+48]			  ## gain_quant.c:264:21
   15a8e:    00 ff 00 00 b0 fe 	if (r0 == 0x0) goto -0x2a0 <silk_find_pred_coefs_FIX+0x10C : 157f4 >			  ## gain_quant.c:264:21
   15a94:    c0 a4             	r0 = r4 >> 0x4
   15a96:    08 ff 00 03 ac fe 	if (r0 > 0x300) goto -0x2a8 <silk_find_pred_coefs_FIX+0x10C : 157f4 >
   15a9c:    00 2a             	r0 = [sp+40]			  ## gain_quant.c:269:15
   15a9e:    54 ee 09 01       	r0 = b[r0+0x19] (s)			  ## gain_quant.c:269:15
   15aa2:    c1 ff 5c ea 01 00 	r1 = 0x1ea5c <silk_LTP_vq_ptrs_Q7 : 1ea5c >			  ## gain_quant.c:269:15
   15aa8:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## gain_quant.c:269:15
   15aac:    01 e1 50 a0       	r1 = r10 + 0x50			  ## gain_quant.c:270:7
   15ab0:    42 20             	r2 = 0x0			  ## gain_quant.c:270:7
   15ab2:    04 95             	goto 0x2a <silk_find_pred_coefs_FIX+0x3F6 : 15ade >			  ## gain_quant.c:270:7
   15ab4:    15 d6             	r5 = r1  #
   15ab6:    03 35             		 r3 = [sp+84]
   15ab8:    23 18             	r3 += r2
   15aba:    13 e1 0c 30       	r3 = r3 + 0x100c
   15abe:    44 20             	r4 = 0x0
   15ac0:    04 8a             	goto 0x14 <silk_find_pred_coefs_FIX+0x3EE : 15ad6 >
   15ac2:    54 ee 30 60       	r6 = b[r3+0x0] (s)			  ## gain_quant.c:272:33
   15ac6:    e6 e1 05 60       	r6 = r6 * 0x5			  ## gain_quant.c:272:33
   15aca:    06 18             	r6 += r0			  ## gain_quant.c:272:33
   15acc:    d8 ee 62 64       	r6 = b[r6+r4] (s)			  ## gain_quant.c:272:33
   15ad0:    66 a7             	r6 = r6 << 0x7			  ## gain_quant.c:272:33
   15ad2:    d6 06             	h[r5++=0x2] = r6			  ## gain_quant.c:272:31
   15ad4:    c4 21             	r4 += 0x1			  ## gain_quant.c:271:31
   15ad6:    84 f8 f4 0b       	if (r4 != 0x5) goto -0x18 <silk_find_pred_coefs_FIX+0x3DA : 15ac2 >
   15ada:    c1 2a             	r1 += 0xa			  ## gain_quant.c:270:2
   15adc:    c2 21             	r2 += 0x1			  ## gain_quant.c:270:29
   15ade:    03 3a             	r3 = [sp+104]			  ## gain_quant.c:270:2
   15ae0:    83 ed e8 21       	ifs (r2 < r3) goto -0x30 <silk_find_pred_coefs_FIX+0x3CC : 15ab4 >			  ## gain_quant.c:270:2
   15ae4:    00 30             	r0 = [sp+64]			  ## gain_quant.c:275:19
   15ae6:    01 2b             	r1 = [sp+44]			  ## gain_quant.c:275:19
   15ae8:    81 60             	[r0+0x0] = r1			  ## gain_quant.c:275:19
   15aea:    00 34             	r0 = [sp+80]			  ## encode_frame_FIX.c:691:52
   15aec:    00 63             	r0 = [r0+0xc] 			  ## encode_frame_FIX.c:691:52
   15aee:    49 33             	r1 = 0x33			  ## encode_frame_FIX.c:691:52
   15af0:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## encode_frame_FIX.c:691:52
   15af4:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## encode_frame_FIX.c:691:52
   15af8:    42 22             	r2 = 0x2			  ## encode_frame_FIX.c:691:52
   15afa:    00 fe 04 04       	ifs (r0 > 0x2) goto 0x8 <silk_find_pred_coefs_FIX+0x41E : 15b06 >
   15afe:    42 20             	r2 = 0x0			  ## encode_frame_FIX.c:691:52
   15b00:    30 ed 00 00       	ifs (r0 >= 0x0) {			  ## encode_frame_FIX.c:691:52
   15b04:    02 16             		r2 = r0
                               	}			  ## encode_frame_FIX.c:691:52
   15b06:    28 17             	r0 = r2.b0 (s)			  ## encode_frame_FIX.c:694:31
   15b08:    c1 ff e0 eb 01 00 	r1 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >			  ## encode_frame_FIX.c:694:31
   15b0e:    c9 34             	r1 += 0x34			  ## encode_frame_FIX.c:694:31
   15b10:    d8 ed 1a 00       	r0 = h[r1+r0<<1] (s)			  ## encode_frame_FIX.c:694:31
   15b14:    fa 46             	b[r7+0x6] = r2			  ## encode_frame_FIX.c:691:39
   15b16:    d0 ec a9 08       	[r10+0x88] = r0			  ## encode_frame_FIX.c:694:29
   15b1a:    01 37             	r1 = [sp+92]			  ## encode_frame_FIX.c:694:29
   15b1c:    10 6a             	r0 = [r1+0x28] 			  ## encode_frame_FIX.c:698:61
   15b1e:    12 62             	r2 = [r1+0x8] 			  ## encode_frame_FIX.c:699:49
   15b20:    b4 f0 00 e2       	r14 = r0 + r2  #
   15b24:    a2 26             		 [sp+152] = r2
   15b26:    11 60             	r1 = [r1+0x0] 			  ## encode_frame_FIX.c:699:75
   15b28:    a1 27             	[sp+156] = r1			  ## encode_frame_FIX.c:698:47
   15b2a:    00 a1             	r0 = r0 << 0x1			  ## encode_frame_FIX.c:698:47
   15b2c:    01 27             	r1 = [sp+28]			  ## encode_frame_FIX.c:698:47
   15b2e:    10 1e             	r0 = r1 - r0			  ## encode_frame_FIX.c:698:47
   15b30:    a0 25             	[sp+148] = r0
   15b32:    44 20             	r4 = 0x0
   15b34:    d4 e9 20 f0       	r15 = [sp+32]
   15b38:    24 83             	goto 0x86 <silk_find_pred_coefs_FIX+0x4D8 : 15bc0 >
   15b3a:    c4 d4             	r12 = 0  #
   15b3c:    00 33             		 r0 = [sp+76]			  ## LTP_analysis_filter_FIX.c:123:25
   15b3e:    d8 ec 0a 14       	r1 = [r0+r4<<2]			  ## LTP_analysis_filter_FIX.c:123:25
   15b42:    20 26             	r0 = [sp+152]			  ## LTP_analysis_filter_FIX.c:122:23
   15b44:    40 db             	r0 *= r4  #			  ## LTP_analysis_filter_FIX.c:122:23
   15b46:    22 25             		 r2 = [sp+148]			  ## LTP_analysis_filter_FIX.c:122:19
   15b48:    00 a1             	r0 = r0 << 0x1			  ## LTP_analysis_filter_FIX.c:122:19
   15b4a:    20 18             	r0 += r2			  ## LTP_analysis_filter_FIX.c:122:19
   15b4c:    c0 f1 11 b0       	r11 = r1 << 0x1  #			  ## LTP_analysis_filter_FIX.c:123:23
   15b50:    01 36             		 r1 = [sp+88]			  ## LTP_analysis_filter_FIX.c:124:13
   15b52:    d8 ec 1a 34       	r3 = [r1+r4<<2]			  ## LTP_analysis_filter_FIX.c:124:13
   15b56:    e1 f1 0a 40       	r1 = r4 * 0xA  #			  ## LTP_analysis_filter_FIX.c:126:8
   15b5a:    a4 28             		 [sp+160] = r4			  ## LTP_analysis_filter_FIX.c:126:8
   15b5c:    1a 18             	r10 += r1			  ## LTP_analysis_filter_FIX.c:126:8
   15b5e:    54 ed a8 25       	r2 = h[r10+0x58] (s)			  ## LTP_analysis_filter_FIX.c:130:8
   15b62:    54 ed a6 45       	r4 = h[r10+0x56] (s)			  ## LTP_analysis_filter_FIX.c:129:8
   15b66:    54 ed a4 15       	r1 = h[r10+0x54] (s)			  ## LTP_analysis_filter_FIX.c:128:8
   15b6a:    54 ed a2 55       	r5 = h[r10+0x52] (s)			  ## LTP_analysis_filter_FIX.c:127:8
   15b6e:    54 ed a0 a5       	r10 = h[r10+0x50] (s)			  ## LTP_analysis_filter_FIX.c:126:8
   15b72:    b4 e0 02 6b       	r6 = r0 - r11			  ## LTP_analysis_filter_FIX.c:123:23
   15b76:    0b e1 04 60       	r11 = r6 + 0x4			  ## LTP_analysis_filter_FIX.c:123:35
   15b7a:    04 9c             	goto 0x38 <silk_find_pred_coefs_FIX+0x4CC : 15bb4 >
   15b7c:    e8 ee bf 9a       	r9_r8 = h[r11 ++= -0x2]*r10 (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15b80:    ec ee bf 95       	r9_r8 += h[r11 ++= -0x2]*r5 (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15b84:    ec ee bf 91       	r9_r8 += h[r11 ++= -0x2]*r1 (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15b88:    ec ee bf 94       	r9_r8 += h[r11 ++= -0x2]*r4 (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15b8c:    ec ee bf 92       	r9_r8 += h[r11 ++= -0x2]*r2 (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15b90:    0b e1 0c b0       	r11 = r11 + 0xc			  ## LTP_analysis_filter_FIX.c:136:4
   15b94:    d2 e1 8e d8       	r13 = r9_r8 >>> 0xe (up)			  ## LTP_analysis_filter_FIX.c:136:4
   15b98:    d4 ed 02 70       	r7 = h[r0++=0x2] (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15b9c:    b4 e0 72 dd       	r13 = r7 - r13			  ## LTP_analysis_filter_FIX.c:136:4
   15ba0:    78 e0 01 dd       	r13 = sat16(r13) (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15ba4:    f8 e1 d0 93       	r9_r8 = r13 * r3 (s)			  ## LTP_analysis_filter_FIX.c:136:4
   15ba8:    d0 e1 00 8d       	r9_r8 >>>= 0x10			  ## LTP_analysis_filter_FIX.c:136:4
   15bac:    d0 ed f3 80       	h[r15++=0x2] = r8			  ## LTP_analysis_filter_FIX.c:136:4
   15bb0:    0c e1 01 c0       	r12 = r12 + 0x1			  ## LTP_analysis_filter_FIX.c:133:47
   15bb4:    8e ed e2 c1       	ifs (r12 < r14) goto -0x3c <silk_find_pred_coefs_FIX+0x494 : 15b7c >
   15bb8:    24 28             	r4 = [sp+160]
   15bba:    c4 21             	r4 += 0x1			  ## LTP_analysis_filter_FIX.c:121:29
   15bbc:    d4 e9 60 a0       	r10 = [sp+96]
   15bc0:    01 34             	r1 = [sp+80]
   15bc2:    20 27             	r0 = [sp+156]			  ## LTP_analysis_filter_FIX.c:121:2
   15bc4:    80 ed b9 41       	ifs (r4 < r0) goto -0x8e <silk_find_pred_coefs_FIX+0x452 : 15b3a >			  ## LTP_analysis_filter_FIX.c:121:2
   15bc8:    14 93             	goto 0x66 <silk_find_pred_coefs_FIX+0x548 : 15c30 >			  ## LTP_analysis_filter_FIX.c:121:2
   15bca:    00 37             	r0 = [sp+92]			  ## encode_frame_FIX.c:706:31
   15bcc:    04 6a             	r4 = [r0+0x28] 			  ## encode_frame_FIX.c:706:31
   15bce:    40 a1             	r0 = r4 << 0x1			  ## encode_frame_FIX.c:706:17
   15bd0:    d0 e9 1c 20       	r3_r2 = d[sp+28]			  ## encode_frame_FIX.c:706:17
   15bd4:    20 1e             	r0 = r2 - r0			  ## encode_frame_FIX.c:706:17
   15bd6:    42 20             	r2 = 0x0
   15bd8:    04 99             	goto 0x32 <silk_find_pred_coefs_FIX+0x524 : 15c0c >
   15bda:    36 d6             	r6 = r3  #			  ## encode_frame_FIX.c:151:2
   15bdc:    07 37             		 r7 = [sp+92]			  ## encode_frame_FIX.c:151:2
   15bde:    71 62             	r1 = [r7+0x8] 			  ## encode_frame_FIX.c:710:17
   15be0:    41 d8             	r1 += r4  #			  ## encode_frame_FIX.c:710:30
   15be2:    05 36             		 r5 = [sp+88]			  ## encode_frame_FIX.c:709:48
   15be4:    d8 ec 5a 52       	r5 = [r5+r2<<2]			  ## encode_frame_FIX.c:709:48
   15be8:    04 16             	r4 = r0			  ## encode_frame_FIX.c:151:2
   15bea:    51 03             	rep 0xc r1 {			  ## encode_frame_FIX.c:151:2
   15bec:    e8 ee 41 95       		r9_r8 = h[r4 ++= 0x2]*r5 (s)			  ## encode_frame_FIX.c:151:2
   15bf0:    d0 e1 00 8d       		r9_r8 >>>= 0x10			  ## encode_frame_FIX.c:151:2
   15bf4:    d0 ed 63 80       		h[r6++=0x2] = r8
                               	}			  ## encode_frame_FIX.c:151:2
   15bf8:    f1 58             	if (r1 != 0) goto -0x10 <silk_find_pred_coefs_FIX+0x502 : 15bea >			  ## encode_frame_FIX.c:151:2
   15bfa:    71 62             	r1 = [r7+0x8] 			  ## encode_frame_FIX.c:711:29
   15bfc:    15 a1             	r5 = r1 << 0x1			  ## encode_frame_FIX.c:712:14
   15bfe:    50 d8             	r0 += r5  #			  ## encode_frame_FIX.c:712:14
   15c00:    74 6a             		 r4 = [r7+0x28] 			  ## encode_frame_FIX.c:711:56
   15c02:    4d dc             	r5 = r4 + r1  #			  ## encode_frame_FIX.c:711:42
   15c04:    71 60             		 r1 = [r7+0x0] 			  ## encode_frame_FIX.c:711:42
   15c06:    55 a1             	r5 = r5 << 0x1			  ## encode_frame_FIX.c:711:14
   15c08:    53 18             	r3 += r5			  ## encode_frame_FIX.c:711:14
   15c0a:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:708:42
   15c0c:    81 ed e5 21       	ifs (r2 < r1) goto -0x36 <silk_find_pred_coefs_FIX+0x4F2 : 15bda >
   15c10:    e0 e1 05 10       	r0 = r1 * 0x5			  ## encode_frame_FIX.c:715:62
   15c14:    41 22             	r1 = 0x2			  ## encode_frame_FIX.c:715:73
   15c16:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## encode_frame_FIX.c:715:73
   15c1a:    01 e1 50 a0       	r1 = r10 + 0x50			  ## encode_frame_FIX.c:715:17
   15c1e:    42 20             	r2 = 0x0			  ## opus_demo.c:208:2
   15c20:    00 03             	rep 0x2 r0 {			  ## opus_demo.c:208:2
   15c22:    92 05             		[r1++=0x4] = r2
                               	}			  ## opus_demo.c:208:2
   15c24:    f0 5d             	if (r0 != 0) goto -0x6 <silk_find_pred_coefs_FIX+0x538 : 15c20 >			  ## opus_demo.c:208:2
   15c26:    40 20             	r0 = 0x0
   15c28:    01 34             	r1 = [sp+80]
   15c2a:    90 63             	[r1+0xc] = r0			  ## encode_frame_FIX.c:716:31
   15c2c:    02 30             	r2 = [sp+64]			  ## encode_frame_FIX.c:717:31
   15c2e:    a0 60             	[r2+0x0] = r0			  ## encode_frame_FIX.c:717:31
   15c30:    00 30             	r0 = [sp+64]			  ## encode_frame_FIX.c:721:18
   15c32:    00 62             	r0 = [r0+0x8] 			  ## encode_frame_FIX.c:721:18
   15c34:    00 46             	if (r0 == 0) goto 0xc <silk_find_pred_coefs_FIX+0x55A : 15c42 >			  ## encode_frame_FIX.c:721:18
   15c36:    c4 ff 0a d7 a3 00 	r4 = 0xa3d70a <RAM_LIMIT_H+0x89D70A : a3d70a >
   15c3c:    19 d6             	r9 = r1  #
   15c3e:    07 35             		 r7 = [sp+84]
   15c40:    14 81             	goto 0x42 <silk_find_pred_coefs_FIX+0x59C : 15c84 >
   15c42:    19 d6             	r9 = r1  #
   15c44:    10 63             		 r0 = [r1+0xc] 			  ## encode_frame_FIX.c:724:34
   15c46:    41 e0 55 55       	r1 = 0x5555 <wtgv2_silk_LPC_analysis_filter+0x4 : 5554 >			  ## encode_frame_FIX.c:724:34
   15c4a:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## encode_frame_FIX.c:724:34
   15c4e:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## encode_frame_FIX.c:724:34
   15c52:    00 e1 00 08       	r0 = r0 + 0x800			  ## encode_frame_FIX.c:724:34
   15c56:    bf ea 40 dc       	call -0x4780 <silk_log2lin : 114da >			  ## encode_frame_FIX.c:724:20
   15c5a:    d0 ec 90 20       	r2 = [r9+0x0]			  ## encode_frame_FIX.c:726:4
   15c5e:    89 bf             	r1 = r0 >>> 0x1f			  ## Inlines.h:119:20
   15c60:    d0 e1 0e 00       	r1_r0 <<= 0xe			  ## Inlines.h:119:35
   15c64:    60 e0 40 3b       	r3 = 0x30000			  ## encode_frame_FIX.c:726:4
   15c68:    f8 e1 20 33       	r3_r2 = r2 * r3 (s)			  ## encode_frame_FIX.c:726:4
   15c6c:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## encode_frame_FIX.c:726:4
   15c70:    e2 e0 80 2b       	r2 = r2 + 0x10000			  ## encode_frame_FIX.c:726:4
   15c74:    c3 ff 00 00 10 27 	r3 = 0x27100000 <RAM_LIMIT_H+0x26F60000 : 27100000 >			  ## Inlines.h:122:21
   15c7a:    f8 e1 20 33       	r3_r2 = r2 * r3 (s)			  ## Inlines.h:122:21
   15c7e:    f6 f1 00 53       	r5_r4 = r1_r0 / r3 (s)  #			  ## Inlines.h:122:20
   15c82:    07 35             		 r7 = [sp+84]			  ## Inlines.h:122:20
   15c84:    70 d6             	r0 = r7  #			  ## encode_frame_FIX.c:731:2
   15c86:    06 29             		 r6 = [sp+36]			  ## encode_frame_FIX.c:731:2
   15c88:    61 d6             	r1 = r6  #			  ## encode_frame_FIX.c:731:2
   15c8a:    02 28             		 r2 = [sp+32]			  ## encode_frame_FIX.c:731:2
   15c8c:    43 16             	r3 = r4			  ## encode_frame_FIX.c:731:2
   15c8e:    bf ea fe f6       	call -0x1204 <silk_find_LPC_FIX : 14a8e >			  ## encode_frame_FIX.c:731:2
   15c92:    01 e1 10 a0       	r1 = r10 + 0x10			  ## encode_frame_FIX.c:734:29
   15c96:    70 16             	r0 = r7			  ## encode_frame_FIX.c:734:2
   15c98:    62 16             	r2 = r6			  ## encode_frame_FIX.c:734:2
   15c9a:    bf ea d9 f8       	call -0xe4e <silk_process_NLSFs : 14e50 >			  ## encode_frame_FIX.c:734:2
   15c9e:    40 f0 d0 2d       	r0 = 0x2dd0  # <WOLASynthesisFilter_Float_M256_m4_r1+0x5CC : 2dd0 >
   15ca2:    02 37             		 r2 = [sp+92]
   15ca4:    d0 ec 28 82       	r8 = [r2+0x28]			  ## encode_frame_FIX.c:738:63
   15ca8:    d0 ec 28 d0       	r13 = [r2+0x8]			  ## encode_frame_FIX.c:738:15
   15cac:    71 1c             	r1 = r7 + r0			  ## encode_frame_FIX.c:576:34
   15cae:    c0 f1 81 30       	r3 = r8 << 0x1  #			  ## encode_frame_FIX.c:576:34
   15cb2:    a1 26             		 [sp+152] = r1			  ## encode_frame_FIX.c:576:34
   15cb4:    31 18             	r1 += r3			  ## encode_frame_FIX.c:576:34
   15cb6:    b4 f0 80 1d       	r1 = r8 + r13  #			  ## encode_frame_FIX.c:579:21
   15cba:    a1 24             		 [sp+144] = r1			  ## encode_frame_FIX.c:579:21
   15cbc:    c0 f1 11 c0       	r12 = r1 << 0x1  #
   15cc0:    a1 23             		 [sp+140] = r1
   15cc2:    b4 f0 c2 58       	r5 = r12 - r8  #
   15cc6:    a3 25             		 [sp+148] = r3
   15cc8:    41 f0 f0 25       	r1 = 0x25f0  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## encode_frame_FIX.c:583:7
   15ccc:    22 60             		 r2 = [r2+0x0] 			  ## encode_frame_FIX.c:738:41
   15cce:    b4 e0 70 f1       	r15 = r7 + r1			  ## encode_frame_FIX.c:583:7
   15cd2:    f9 1c             	r1 = r7 + r3			  ## encode_frame_FIX.c:583:7
   15cd4:    10 18             	r0 += r1			  ## encode_frame_FIX.c:583:7
   15cd6:    30 f1 ff 8f       	r0 = r8 + -0x1  #
   15cda:    a0 22             		 [sp+136] = r0
   15cdc:    09 f1 20 90       	r9 = r9 + 0x20  #			  ## encode_frame_FIX.c:583:7
   15ce0:    a2 20             		 [sp+128] = r2			  ## encode_frame_FIX.c:583:7
   15ce2:    a9 a1             	r1 = r2 >>> 0x1
   15ce4:    c3 d4             	r11 = 0  #
   15ce6:    a1 27             		 [sp+156] = r1
   15ce8:    00 a1             	r0 = r0 << 0x1
   15cea:    a0 21             	[sp+132] = r0
   15cec:    24 8d             	goto 0x9a <silk_find_pred_coefs_FIX+0x6A0 : 15d88 >
   15cee:    d4 e9 a1 90       	[sp+160] = r9
   15cf2:    fe d6             	r14 = r15  #
   15cf4:    23 25             		 r3 = [sp+148]
   15cf6:    b4 f0 f0 03       	r0 = r15 + r3  #			  ## noise_shape_analysis_FIX.c:98:7
   15cfa:    02 38             		 r2 = [sp+96]			  ## noise_shape_analysis_FIX.c:87:37
   15cfc:    c0 f1 b5 10       	r1 = r11 << 0x5  #			  ## noise_shape_analysis_FIX.c:87:37
   15d00:    27 24             		 r7 = [sp+144]			  ## noise_shape_analysis_FIX.c:87:37
   15d02:    21 d8             	r1 += r2  #			  ## noise_shape_analysis_FIX.c:87:37
   15d04:    22 21             		 r2 = [sp+132]			  ## noise_shape_analysis_FIX.c:87:37
   15d06:    21 18             	r1 += r2			  ## noise_shape_analysis_FIX.c:87:37
   15d08:    c1 30             	r1 += 0x10			  ## noise_shape_analysis_FIX.c:87:37
   15d0a:    42 20             	r2 = 0x0
   15d0c:    04 9a             	goto 0x34 <silk_find_pred_coefs_FIX+0x65A : 15d42 >
   15d0e:    d8 ed 0a 42       	r4 = h[r0+r2<<1] (s)			  ## noise_shape_analysis_FIX.c:100:20
   15d12:    44 ac             	r4 = r4 << 0xc			  ## noise_shape_analysis_FIX.c:100:20
   15d14:    86 16             	r6 = r8			  ## noise_shape_analysis_FIX.c:107:3
   15d16:    66 03             	rep 0xe r6 {			  ## noise_shape_analysis_FIX.c:107:3
   15d18:    d7 ed 1e 9f       		r9 = h[r1++=-0x2] (s)			  ## noise_shape_analysis_FIX.c:107:3
   15d1c:    d4 ed e2 a0       		r10 = h[r14++=0x2] (s)			  ## noise_shape_analysis_FIX.c:107:3
   15d20:    a9 1b             		r9 *= r10			  ## noise_shape_analysis_FIX.c:107:3
   15d22:    b4 e0 42 49       		r4 = r4 - r9
                               	}			  ## noise_shape_analysis_FIX.c:107:3
   15d26:    09 e1 00 48       	r9 = r4 + 0x800			  ## noise_shape_analysis_FIX.c:107:3
   15d2a:    c0 e1 94 94       	r9 = r9 <<< 0x4			  ## noise_shape_analysis_FIX.c:107:3
   15d2e:    c0 e1 90 9d       	r9 = r9 >>> 0x10			  ## noise_shape_analysis_FIX.c:107:3
   15d32:    d0 ed 73 90       	h[r7++=0x2] = r9			  ## noise_shape_analysis_FIX.c:107:3
   15d36:    99 1c             	r1 = r1 + r3			  ## noise_shape_analysis_FIX.c:107:3
   15d38:    b4 e0 e2 e3       	r14 = r14 - r3			  ## noise_shape_analysis_FIX.c:107:3
   15d3c:    0e e1 02 e0       	r14 = r14 + 0x2			  ## noise_shape_analysis_FIX.c:107:3
   15d40:    c2 21             	r2 += 0x1			  ## noise_shape_analysis_FIX.c:98:16
   15d42:    85 ed e4 21       	ifs (r2 < r5) goto -0x38 <silk_find_pred_coefs_FIX+0x626 : 15d0e >
   15d46:    40 20             	r0 = 0x0			  ## noise_shape_analysis_FIX.c:136:2
   15d48:    82 d6             	r2 = r8  #			  ## noise_shape_analysis_FIX.c:136:2
   15d4a:    21 26             		 r1 = [sp+152]			  ## noise_shape_analysis_FIX.c:136:2
   15d4c:    02 03             	rep 0x2 r2 {			  ## noise_shape_analysis_FIX.c:136:2
   15d4e:    90 06             		h[r1++=0x2] = r0
                               	}			  ## noise_shape_analysis_FIX.c:136:2
   15d50:    44 22             	r4 = 0x2			  ## noise_shape_analysis_FIX.c:136:2
   15d52:    d4 e9 a0 90       	r9 = [sp+160]
   15d56:    96 d6             	r6 = r9  #
   15d58:    27 22             		 r7 = [sp+136]
   15d5a:    04 8e             	goto 0x1c <silk_find_pred_coefs_FIX+0x690 : 15d78 >
   15d5c:    30 e1 f0 6f       	r0 = r6 + -0x10			  ## encode_frame_FIX.c:591:4
   15d60:    f8 e8 a8 10       	r1 = sp + 168			  ## encode_frame_FIX.c:591:4
   15d64:    72 16             	r2 = r7			  ## encode_frame_FIX.c:591:4
   15d66:    d3 16             	r3 = r13			  ## encode_frame_FIX.c:591:4
   15d68:    bf ea ab de       	call -0x42aa <silk_sum_sqr_shift : 11ac2 >			  ## encode_frame_FIX.c:591:4
   15d6c:    20 2a             	r0 = [sp+168]			  ## encode_frame_FIX.c:594:46
   15d6e:    a0 e0 00 00       	r0 = 0x0 - r0			  ## encode_frame_FIX.c:594:45
   15d72:    c7 d8             	r7 += r12  #			  ## encode_frame_FIX.c:589:3
   15d74:    e0 05             		 [r6++=0x4] = r0			  ## encode_frame_FIX.c:594:43
   15d76:    fc 3f             	r4 += -0x1			  ## encode_frame_FIX.c:589:3
   15d78:    f4 51             	if (r4 != 0) goto -0x1e <silk_find_pred_coefs_FIX+0x674 : 15d5c >
   15d7a:    20 23             	r0 = [sp+140]			  ## encode_frame_FIX.c:583:2
   15d7c:    00 a2             	r0 = r0 << 0x2			  ## encode_frame_FIX.c:583:2
   15d7e:    0f 18             	r15 += r0			  ## encode_frame_FIX.c:583:2
   15d80:    09 e1 08 90       	r9 = r9 + 0x8			  ## encode_frame_FIX.c:583:2
   15d84:    0b e1 01 b0       	r11 = r11 + 0x1			  ## encode_frame_FIX.c:583:34
   15d88:    20 27             	r0 = [sp+156]			  ## encode_frame_FIX.c:583:2
   15d8a:    80 ed b0 b1       	ifs (r11 < r0) goto -0xa0 <silk_find_pred_coefs_FIX+0x606 : 15cee >			  ## encode_frame_FIX.c:583:2
   15d8e:    00 36             	r0 = [sp+88]			  ## encode_frame_FIX.c:570:27
   15d90:    09 f1 10 00       	r9 = r0 + 0x10  #			  ## encode_frame_FIX.c:570:27
   15d94:    00 35             		 r0 = [sp+84]			  ## encode_frame_FIX.c:734:77
   15d96:    18 f1 b4 02       	r8 = r0 + 0x12b4  #			  ## encode_frame_FIX.c:734:77
   15d9a:    01 38             		 r1 = [sp+96]
   15d9c:    42 20             	r2 = 0x0
   15d9e:    d4 e9 80 c0       	r12 = [sp+128]
   15da2:    14 8f             	goto 0x5e <silk_find_pred_coefs_FIX+0x71A : 15e02 >
   15da4:    20 a2             	r0 = r2 << 0x2			  ## encode_frame_FIX.c:606:21
   15da6:    13 1c             	r3 = r1 + r0			  ## encode_frame_FIX.c:606:21
   15da8:    34 16             	r4 = r3			  ## encode_frame_FIX.c:606:21
   15daa:    d1 ec 46 0f       	r0 = [++r4=0x1f4]			  ## encode_frame_FIX.c:606:21
   15dae:    4e 20             	r6 = 0x20
   15db0:    4d 20             	r5 = 0x20			  ## macros.h:143:12
   15db2:    00 42             	if (r0 == 0) goto 0x4 <silk_find_pred_coefs_FIX+0x6D0 : 15db8 >			  ## macros.h:143:12
   15db4:    80 e1 00 50       	r5 = clz(r0)			  ## entenc.c:124:2
   15db8:    d8 ec 9a 02       	r0 = [r9+r2<<2]			  ## encode_frame_FIX.c:607:21
   15dbc:    37 e1 ff 5f       	r7 = r5 + -0x1			  ## encode_frame_FIX.c:606:34
   15dc0:    00 45             	if (r0 == 0) goto 0xa <silk_find_pred_coefs_FIX+0x6E4 : 15dcc >
   15dc2:    80 e1 00 60       	r6 = clz(r0)			  ## entenc.c:124:2
   15dc6:    d8 ec 9a 02       	r0 = [r9+r2<<2]
   15dca:    04 81             	goto 0x2 <silk_find_pred_coefs_FIX+0x6E6 : 15dce >
   15dcc:    40 20             	r0 = 0x0
   15dce:    41 60             	r1 = [r4+0x0] 			  ## encode_frame_FIX.c:615:15
   15dd0:    c8 e1 10 a7       	r10 = r1 << r7			  ## encode_frame_FIX.c:615:15
   15dd4:    c0 e1 af bd       	r11 = r10 >>> 0x1f			  ## encode_frame_FIX.c:615:15
   15dd8:    31 e1 ff 6f       	r1 = r6 + -0x1			  ## encode_frame_FIX.c:607:34
   15ddc:    10 1a             	r0 <<= r1			  ## encode_frame_FIX.c:609:11
   15dde:    f8 e1 00 70       	r7_r6 = r0 * r0 (s)			  ## encode_frame_FIX.c:612:11
   15de2:    f0 e1 70 0b       	r0 = r7 * r11			  ## encode_frame_FIX.c:615:15
   15de6:    f8 e1 70 6a       	r7_r6 = r7 * r10 (u)			  ## encode_frame_FIX.c:615:15
   15dea:    70 18             	r0 += r7			  ## encode_frame_FIX.c:615:15
   15dec:    c0 60             	[r4+0x0] = r0			  ## encode_frame_FIX.c:615:13
   15dee:    d2 ec 34 00       	r0 = [r3+0x204]			  ## encode_frame_FIX.c:616:14
   15df2:    11 a1             	r1 = r1 << 0x1			  ## encode_frame_FIX.c:616:25
   15df4:    51 18             	r1 += r5			  ## encode_frame_FIX.c:616:21
   15df6:    10 18             	r0 += r1			  ## encode_frame_FIX.c:616:36
   15df8:    e8 3f             	r0 += -0x41			  ## encode_frame_FIX.c:616:14
   15dfa:    d2 ec 35 00       	[r3+0x204] = r0			  ## encode_frame_FIX.c:616:14
   15dfe:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:604:29
   15e00:    01 38             	r1 = [sp+96]
   15e02:    8c ed cf 21       	ifs (r2 < r12) goto -0x62 <silk_find_pred_coefs_FIX+0x6BC : 15da4 >
   15e06:    40 28             	r0 = 0x8			  ## opus_demo.c:186:2
   15e08:    02 29             	r2 = [sp+36]			  ## opus_demo.c:186:2
   15e0a:    20 03             	rep 0x6 r0 {			  ## opus_demo.c:186:2
   15e0c:    21 05             		r1 = [r2++=0x4] 			  ## opus_demo.c:186:2
   15e0e:    d8 ec 85 10       		[r8++=0x4] = r1
                               	}			  ## opus_demo.c:186:2
   15e12:    f0 5b             	if (r0 != 0) goto -0xa <silk_find_pred_coefs_FIX+0x722 : 15e0a >			  ## opus_demo.c:186:2
   15e14:    22 8b             	sp += 0xac
   15e16:    5f 04             	{pc, r15-r4} = [sp++]			  ## encode_frame_FIX.c:742:1


silk_gains_quant:
   15e18:    7e 04             	[--sp] = {rets, r14-r4}			  ## gain_quant.c:42:0
   15e1a:    3e 16             	r14 = r3			  ## gain_quant.c:42:0
   15e1c:    25 16             	r5 = r2			  ## gain_quant.c:42:0
   15e1e:    16 16             	r6 = r1			  ## gain_quant.c:42:0
   15e20:    07 16             	r7 = r0			  ## gain_quant.c:42:0
   15e22:    c1 14             	r9 = 0			  ## gain_quant.c:42:0
   15e24:    4a e0 cb 08       	r10 = 0x8cb <WOLAAnalysisFilter_Float_M128_m4_r1+0xC6 : 8ca >			  ## gain_quant.c:42:0
   15e28:    cb ff 71 1c 1d 00 	r11 = 0x1d1c71 <RAM_LIMIT_H+0x31C70 : 1d1c70 >			  ## gain_quant.c:42:0
   15e2e:    4c e0 7f 0f       	r12 = 0xf7f <usb_code_size+0x4BA : f7e >			  ## gain_quant.c:42:0
   15e32:    4d e0 f8 ff       	r13 = -0x8 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFF8 : fffffffffffffff8 >			  ## gain_quant.c:42:0
   15e36:    44 20             	r4 = 0x0			  ## gain_quant.c:42:0
   15e38:    34 98             	goto 0xf0 <silk_gains_quant+0x112 : 15f2a >			  ## gain_quant.c:42:0
   15e3a:    d8 ec 6a 04       	r0 = [r6+r4<<2]			  ## gain_quant.c:50:14
   15e3e:    bf ea 71 db       	call -0x491e <silk_lin2log : 11524 >			  ## gain_quant.c:50:14
   15e42:    30 e1 d6 07       	r0 = r0 + -0x82a			  ## gain_quant.c:50:14
   15e46:    f8 e1 00 1a       	r1_r0 = r0 * r10 (s)			  ## gain_quant.c:50:14
   15e4a:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## gain_quant.c:50:14
   15e4e:    d8 ee 71 04       	b[r7+r4] = r0			  ## gain_quant.c:50:12
   15e52:    54 ee 50 20       	r2 = b[r5+0x0] (s)			  ## gain_quant.c:53:18
   15e56:    08 17             	r0 = r0.b0 (s)			  ## gain_quant.c:50:14
   15e58:    90 ed 00 42       	ifs (r0 < r2) {			  ## gain_quant.c:50:14
   15e5c:    c0 21             		r0 += 0x1			  ## gain_quant.c:54:12
   15e5e:    d8 ee 71 04       		b[r7+r4] = r0
                               	}			  ## gain_quant.c:54:12
   15e62:    09 17             	r1 = r0.b0 (s)			  ## gain_quant.c:56:14
   15e64:    b1 ee 00 00       	ifs (r1 <= 0x0) {			  ## gain_quant.c:56:14
   15e68:    40 20             		r0 = 0x0
                               	}			  ## gain_quant.c:56:14
   15e6a:    4a 3f             	r2 = 0x3f			  ## gain_quant.c:56:14
   15e6c:    b1 ee 3f 00       	ifs (r1 <= 0x3f) {			  ## gain_quant.c:56:14
   15e70:    02 16             		r2 = r0
                               	}			  ## gain_quant.c:56:14
   15e72:    d8 ee 71 24       	b[r7+r4] = r2			  ## gain_quant.c:56:12
   15e76:    54 ee 50 10       	r1 = b[r5+0x0] (s)			  ## gain_quant.c:56:12
   15e7a:    28 17             	r0 = r2.b0 (s)			  ## gain_quant.c:56:14
   15e7c:    14 4c             	if (r4 == 0) goto 0x58 <silk_gains_quant+0xBE : 15ed6 >			  ## gain_quant.c:56:14
   15e7e:    09 1e             	r1 = r0 - r1			  ## gain_quant.c:65:24
   15e80:    d8 ee 71 14       	b[r7+r4] = r1			  ## gain_quant.c:65:13
   15e84:    54 ee 50 30       	r3 = b[r5+0x0] (s)			  ## gain_quant.c:68:77
   15e88:    1a 17             	r2 = r1.b0 (s)			  ## gain_quant.c:69:8
   15e8a:    38 88             	r0 = r3 + 0x8			  ## gain_quant.c:68:75
   15e8c:    80 ee 08 20       	ifs (r2 <= r0) goto 0x10 <silk_gains_quant+0x88 : 15ea0 >
   15e90:    b4 e0 d2 13       	r1 = r13 - r3
   15e94:    21 18             	r1 += r2			  ## gain_quant.c:70:45
   15e96:    c1 21             	r1 += 0x1			  ## gain_quant.c:70:45
   15e98:    91 a1             	r1 = r1 >> 0x1			  ## gain_quant.c:70:45
   15e9a:    01 18             	r1 += r0			  ## gain_quant.c:70:43
   15e9c:    d8 ee 71 14       	b[r7+r4] = r1			  ## gain_quant.c:70:14
   15ea0:    1a 17             	r2 = r1.b0 (s)			  ## gain_quant.c:73:15
   15ea2:    b2 ee fc 0f       	ifs (r2 <= -0x4) {			  ## gain_quant.c:73:15
   15ea6:    11 3c             		r1 = -0x4
                               	}			  ## gain_quant.c:73:15
   15ea8:    4b 24             	r3 = 0x24			  ## gain_quant.c:73:15
   15eaa:    b2 ee 24 00       	ifs (r2 <= 0x24) {			  ## gain_quant.c:73:15
   15eae:    13 16             		r3 = r1
                               	}			  ## gain_quant.c:73:15
   15eb0:    3a 17             	r2 = r3.b0 (s)			  ## gain_quant.c:76:8
   15eb2:    21 a1             	r1 = r2 << 0x1			  ## gain_quant.c:77:18
   15eb4:    11 1e             	r1 = r1 - r0			  ## gain_quant.c:77:45
   15eb6:    d8 ee 71 34       	b[r7+r4] = r3			  ## gain_quant.c:73:13
   15eba:    92 ee 00 00       	ifs (r2 <= r0) {			  ## gain_quant.c:73:13
   15ebe:    21 16             		r1 = r2
                               	}			  ## gain_quant.c:76:8
   15ec0:    58 40             	r0 = b[r5+0x0] (u)			  ## gain_quant.c:76:8
   15ec2:    10 18             	r0 += r1
   15ec4:    d8 40             	b[r5+0x0] = r0
   15ec6:    d8 ee 70 04       	r0 = b[r7+r4] (u)			  ## gain_quant.c:83:13
   15eca:    c0 24             	r0 += 0x4			  ## gain_quant.c:83:13
   15ecc:    d8 ee 71 04       	b[r7+r4] = r0			  ## gain_quant.c:83:13
   15ed0:    50 ee 50 80       	r8 = b[r5+0x0] (u)			  ## gain_quant.c:83:13
   15ed4:    04 98             	goto 0x30 <silk_gains_quant+0xEE : 15f06 >			  ## gain_quant.c:83:13
   15ed6:    32 e1 fc 1f       	r2 = r1 + -0x4			  ## gain_quant.c:61:15
   15eda:    01 17             	r1 = r0.b0 (u)			  ## gain_quant.c:61:15
   15edc:    82 fd 09 80       	ifs (r2 < 0x40) goto 0x12 <silk_gains_quant+0xDA : 15ef2 >			  ## gain_quant.c:61:15
   15ee0:    28 16             	r8 = r2			  ## gain_quant.c:61:15
   15ee2:    02 ee 0c 10       	ifs (r1 > r2) goto 0x18 <silk_gains_quant+0xE6 : 15efe >			  ## gain_quant.c:61:15
   15ee6:    48 e0 3f 00       	r8 = 0x3f <os_bss_size+0x2 : 3e >			  ## gain_quant.c:61:15
   15eea:    30 ed 3f 00       	ifs (r0 >= 0x3f) {			  ## gain_quant.c:61:15
   15eee:    18 16             		r8 = r1
                               	}			  ## gain_quant.c:61:15
   15ef0:    04 86             	goto 0xc <silk_gains_quant+0xE6 : 15efe >			  ## gain_quant.c:61:15
   15ef2:    48 e0 3f 00       	r8 = 0x3f <os_bss_size+0x2 : 3e >
   15ef6:    b0 ee 3f 00       	ifs (r0 <= 0x3f) {
   15efa:    34 e4 11 82       		r8 = smax(r1, r2)
                               	}			  ## gain_quant.c:61:15
   15efe:    d8 ee 71 84       	b[r7+r4] = r8			  ## gain_quant.c:61:13
   15f02:    52 ee 50 80       	b[r5+0x0] = r8			  ## gain_quant.c:62:14
   15f06:    80 15             	r1_r0 = r9_r8			  ## gain_quant.c:87:46
   15f08:    d0 e1 08 03       	r1_r0 <<= 0x38			  ## gain_quant.c:87:46
   15f0c:    d0 e1 08 0f       	r1_r0 >>>= 0x38			  ## gain_quant.c:87:46
   15f10:    f8 e1 00 1b       	r1_r0 = r0 * r11 (s)			  ## gain_quant.c:87:46
   15f14:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## gain_quant.c:87:46
   15f18:    00 e1 2a 08       	r0 = r0 + 0x82a			  ## gain_quant.c:87:86
   15f1c:    35 e4 01 0c       	r0 = smin(r0, r12)			  ## SigProc_FIX.h:354:13
   15f20:    bf ea db da       	call -0x4a4a <silk_log2lin : 114da >			  ## gain_quant.c:87:19
   15f24:    d8 ec 6b 04       	[r6+r4<<2] = r0			  ## gain_quant.c:87:17
   15f28:    c4 21             	r4 += 0x1			  ## gain_quant.c:48:29
   15f2a:    8e ed 86 41       	ifs (r4 < r14) goto -0xf4 <silk_gains_quant+0x22 : 15e3a >
   15f2e:    5e 04             	{pc, r14-r4} = [sp++]			  ## gain_quant.c:89:1


silk_process_gains_FIX:
   15f30:    7f 04             	[--sp] = {rets, r15-r4}			  ## encode_frame_FIX.c:752:0
   15f32:    e2 9b             	sp += -0x14			  ## encode_frame_FIX.c:752:0
   15f34:    06 16             	r6 = r0			  ## encode_frame_FIX.c:752:0
   15f36:    12 e1 20 60       	r2 = r6 + 0x1020			  ## encode_frame_FIX.c:752:0
   15f3a:    15 d6             	r5 = r1  #			  ## encode_frame_FIX.c:752:0
   15f3c:    28 42             		 r0 = b[r2+0x2] (u)			  ## encode_frame_FIX.c:758:26
   15f3e:    11 f1 08 60       	r1 = r6 + 0x1008  #
   15f42:    82 20             		 [sp] = r2			  ## encode_frame_FIX.c:758:6
   15f44:    17 f1 20 64       	r7 = r6 + 0x1420  #			  ## encode_frame_FIX.c:758:6
   15f48:    81 22             		 [sp+8] = r1			  ## encode_frame_FIX.c:758:6
   15f4a:    0a e1 dc 51       	r10 = r5 + 0x1dc			  ## encode_frame_FIX.c:758:6
   15f4e:    80 f8 1c 04       	if (r0 != 0x2) goto 0x38 <silk_process_gains_FIX+0x5A : 15f8a >			  ## encode_frame_FIX.c:758:6
   15f52:    d0 ec a4 01       	r0 = [r10+0x14]			  ## encode_frame_FIX.c:760:27
   15f56:    30 e1 08 0a       	r0 = r0 + -0x5f8			  ## encode_frame_FIX.c:760:27
   15f5a:    88 a4             	r0 = r0 >>> 0x4			  ## encode_frame_FIX.c:760:27
   15f5c:    bf ea f6 da       	call -0x4a14 <silk_sigm_Q15 : 1154c >			  ## encode_frame_FIX.c:760:12
   15f60:    a0 e0 00 00       	r0 = 0x0 - r0			  ## encode_frame_FIX.c:760:11
   15f64:    89 bf             	r1 = r0 >>> 0x1f
   15f66:    42 20             	r2 = 0x0
   15f68:    04 8a             	goto 0x14 <silk_process_gains_FIX+0x4E : 15f7e >
   15f6a:    d8 ec 5a 32       	r3 = [r5+r2<<2]			  ## encode_frame_FIX.c:762:32
   15f6e:    f8 e1 30 90       	r9_r8 = r3 * r0 (s)			  ## encode_frame_FIX.c:762:32
   15f72:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## encode_frame_FIX.c:762:32
   15f76:    83 18             	r3 += r8			  ## encode_frame_FIX.c:762:32
   15f78:    d8 ec 5b 32       	[r5+r2<<2] = r3			  ## encode_frame_FIX.c:762:30
   15f7c:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:761:42
   15f7e:    74 16             	r4 = r7			  ## encode_frame_FIX.c:761:31
   15f80:    d0 ec 42 31       	r3 = [++r4=0x10]			  ## encode_frame_FIX.c:761:31
   15f84:    83 ed f1 21       	ifs (r2 < r3) goto -0x1e <silk_process_gains_FIX+0x3A : 15f6a >			  ## encode_frame_FIX.c:761:31
   15f88:    04 81             	goto 0x2 <silk_process_gains_FIX+0x5C : 15f8c >			  ## encode_frame_FIX.c:761:31
   15f8a:    7c 90             	r4 = r7 + 0x10
   15f8c:    d4 e9 11 a0       	[sp+16] = r10
   15f90:    10 e1 90 64       	r0 = r6 + 0x1490
   15f94:    41 f0 be 22       	r1 = 0x22be  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xABA : 22be >			  ## encode_frame_FIX.c:768:21
   15f98:    80 21             		 [sp+4] = r0			  ## encode_frame_FIX.c:768:21
   15f9a:    00 61             	r0 = [r0+0x4] 			  ## encode_frame_FIX.c:768:21
   15f9c:    10 1e             	r0 = r1 - r0			  ## encode_frame_FIX.c:768:21
   15f9e:    41 e0 7b 54       	r1 = 0x547b <cvsd_decode+0xF4 : 547a >			  ## encode_frame_FIX.c:768:21
   15fa2:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## encode_frame_FIX.c:768:21
   15fa6:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## encode_frame_FIX.c:768:21
   15faa:    bf ea 96 da       	call -0x4ad4 <silk_log2lin : 114da >			  ## encode_frame_FIX.c:768:21
   15fae:    87 23             	[sp+12] = r7			  ## encode_frame_FIX.c:768:21
   15fb0:    71 66             	r1 = [r7+0x18] 			  ## encode_frame_FIX.c:768:21
   15fb2:    f4 e1 01 e1       	r14 = r0 / r1 (s)			  ## encode_frame_FIX.c:768:21
   15fb6:    c0 e1 ef fd       	r15 = r14 >>> 0x1f
   15fba:    42 20             	r2 = 0x0
   15fbc:    c1 ff ff ff ff 7f 	r1 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   15fc2:    40 e0 fe 7f       	r0 = 0x7ffe <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >
   15fc6:    44 8a             	goto 0x114 <silk_process_gains_FIX+0x1AC : 160dc >
   15fc8:    26 a2             	r6 = r2 << 0x2			  ## encode_frame_FIX.c:772:16
   15fca:    56 18             	r6 += r5			  ## encode_frame_FIX.c:772:16
   15fcc:    d1 ec 64 7f       	r7 = [r6+0x1f4]			  ## encode_frame_FIX.c:773:16
   15fd0:    d2 ec 64 60       	r6 = [r6+0x204]			  ## encode_frame_FIX.c:774:7
   15fd4:    f8 e1 70 9e       	r9_r8 = r7 * r14 (s)			  ## encode_frame_FIX.c:773:16
   15fd8:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## encode_frame_FIX.c:773:16
   15fdc:    86 fd 08 02       	ifs (r6 < 0x1) goto 0x10 <silk_process_gains_FIX+0xC0 : 15ff0 >
   15fe0:    86 f8 10 02       	if (r6 != 0x1) goto 0x20 <silk_process_gains_FIX+0xD4 : 16004 >
   15fe4:    66 e1 01 80       	r6 = r8 & 0x1			  ## encode_frame_FIX.c:775:17
   15fe8:    c0 e1 81 7c       	r7 = r8 >>> 0x1			  ## encode_frame_FIX.c:775:17
   15fec:    76 18             	r6 += r7			  ## encode_frame_FIX.c:775:17
   15fee:    04 92             	goto 0x24 <silk_process_gains_FIX+0xE4 : 16014 >			  ## encode_frame_FIX.c:775:17
   15ff0:    a7 e0 00 60       	r7 = 0x0 - r6			  ## encode_frame_FIX.c:777:22
   15ff4:    c8 e1 80 67       	r6 = r8 << r7			  ## encode_frame_FIX.c:780:18
   15ff8:    c8 e1 12 77       	r7 = r1 >> r7			  ## encode_frame_FIX.c:777:22
   15ffc:    18 ed 00 07       	ifs (r8 >= r7) {			  ## encode_frame_FIX.c:777:22
   16000:    16 16             		r6 = r1
                               	}			  ## encode_frame_FIX.c:777:8
   16002:    04 88             	goto 0x10 <silk_process_gains_FIX+0xE4 : 16014 >
   16004:    37 e1 ff 6f       	r7 = r6 + -0x1			  ## encode_frame_FIX.c:775:17
   16008:    43 21             	r3 = 0x1			  ## encode_frame_FIX.c:775:17
   1600a:    c8 e1 30 77       	r7 = r3 << r7			  ## encode_frame_FIX.c:775:17
   1600e:    87 18             	r7 += r8			  ## encode_frame_FIX.c:775:17
   16010:    c8 e1 73 66       	r6 = r7 >>> r6			  ## encode_frame_FIX.c:775:17
   16014:    d8 ec 5a 72       	r7 = [r5+r2<<2]			  ## encode_frame_FIX.c:784:18
   16018:    f8 e1 70 d7       	r13_r12 = r7 * r7 (s)			  ## encode_frame_FIX.c:784:18
   1601c:    b4 e0 d0 a6       	r10 = r13 + r6			  ## encode_frame_FIX.c:784:18
   16020:    17 16             	r7 = r1			  ## encode_frame_FIX.c:784:18
   16022:    b6 ee ff 0f       	ifs (r6 <= -0x1) {			  ## encode_frame_FIX.c:784:18
   16026:    a7 16             		r7 = r10
                               	}			  ## encode_frame_FIX.c:784:18
   16028:    ba ee ff 0f       	ifs (r10 <= -0x1) {			  ## encode_frame_FIX.c:784:18
   1602c:    7a 16             		r10 = r7
                               	}			  ## encode_frame_FIX.c:784:18
   1602e:    00 ee 32 a0       	ifs (r10 > r0) goto 0x64 <silk_process_gains_FIX+0x166 : 16096 >			  ## encode_frame_FIX.c:785:7
   16032:    ea 15             	r11_r10 = r15_r14
   16034:    d0 e1 00 c9       	r13_r12 >>= 0x10			  ## encode_frame_FIX.c:787:19
   16038:    c0 e1 60 e1       	r14 = r6 << 0x10			  ## encode_frame_FIX.c:787:19
   1603c:    c7 14             	r15 = 0			  ## encode_frame_FIX.c:787:19
   1603e:    b4 e0 c0 8e       	r8 = r12 + r14			  ## encode_frame_FIX.c:787:19
   16042:    b8 e0 d0 9f       	r9 = r13 + r15 + c			  ## encode_frame_FIX.c:787:19
   16046:    88 fd 17 02       	ifs (r8 < 0x1) goto 0x2e <silk_process_gains_FIX+0x148 : 16078 >
   1604a:    80 e1 00 68       	r6 = clz(r8)			  ## entenc.c:124:2
   1604e:    c7 ff 86 b4 00 00 	r7 = 0xb486 <print+0x36 : b486 >
   16054:    36 ea 01 00       	if ((r6 & 0x1) != 0) {
   16058:    0f 82             		r7 = r0 + 0x2
                               	}
   1605a:    eb a1             	r3 = r6 >>> 0x1			  ## Inlines.h:101:11
   1605c:    c8 e1 72 33       	r3 = r7 >> r3			  ## Inlines.h:101:7
   16060:    c8 e1 80 66       	r6 = r8 << r6			  ## Inlines.h:74:11
   16064:    b6 e1 1c 6c       	r6 = uextra(r6, p:0x18, l:0x7)			  ## Inlines.h:75:22
   16068:    e6 e1 d5 60       	r6 = r6 * 0xD5			  ## Inlines.h:104:9
   1606c:    f8 e1 30 76       	r7_r6 = r3 * r6 (s)			  ## Inlines.h:104:9
   16070:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:104:9
   16074:    b4 e0 60 f3       	r15 = r6 + r3			  ## Inlines.h:104:9
   16078:    c0 ff ff ff 7f 00 	r0 = 0x7fffff <RAM_LIMIT_H+0x65FFFE : 7ffffe >			  ## encode_frame_FIX.c:790:11
   1607e:    35 e4 f1 30       	r3 = smin(r15, r0)			  ## encode_frame_FIX.c:790:11
   16082:    c0 ff 00 00 80 ff 	r0 = 0xff800000 <RAM_LIMIT_H+0xFF660000 : ff800000 >			  ## encode_frame_FIX.c:791:32
   16088:    34 e4 31 60       	r6 = smax(r3, r0)			  ## encode_frame_FIX.c:791:32
   1608c:    47 28             	r7 = 0x8			  ## encode_frame_FIX.c:791:32
   1608e:    40 e0 fe 7f       	r0 = 0x7ffe <wtgv2silk_CB_lags_stage2+0x1C : 7ffe >			  ## encode_frame_FIX.c:791:32
   16092:    ae 15             	r15_r14 = r11_r10			  ## encode_frame_FIX.c:791:32
   16094:    04 9e             	goto 0x3c <silk_process_gains_FIX+0x1A2 : 160d2 >			  ## encode_frame_FIX.c:791:32
   16096:    80 e1 00 6a       	r6 = clz(r10)			  ## entenc.c:124:2
   1609a:    c7 ff 86 b4 00 00 	r7 = 0xb486 <print+0x36 : b486 >
   160a0:    36 ea 01 00       	if ((r6 & 0x1) != 0) {
   160a4:    0f 82             		r7 = r0 + 0x2
                               	}
   160a6:    eb a1             	r3 = r6 >>> 0x1			  ## Inlines.h:101:11
   160a8:    c8 e1 72 33       	r3 = r7 >> r3			  ## Inlines.h:101:7
   160ac:    c8 e1 a0 66       	r6 = r10 << r6			  ## Inlines.h:74:11
   160b0:    b6 e1 1c 6c       	r6 = uextra(r6, p:0x18, l:0x7)			  ## Inlines.h:75:22
   160b4:    e6 e1 d5 60       	r6 = r6 * 0xD5			  ## Inlines.h:104:9
   160b8:    f8 e1 30 76       	r7_r6 = r3 * r6 (s)			  ## Inlines.h:104:9
   160bc:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## Inlines.h:104:9
   160c0:    63 18             	r3 += r6			  ## Inlines.h:104:9
   160c2:    0e 81             	r6 = r0 + 0x1			  ## encode_frame_FIX.c:794:11
   160c4:    35 e4 31 36       	r3 = smin(r3, r6)			  ## encode_frame_FIX.c:794:11
   160c8:    46 e0 00 80       	r6 = -0x8000 <RAM_LIMIT_H+0xFFFFFFFFFFE58000 : ffffffffffff8000 >			  ## encode_frame_FIX.c:795:32
   160cc:    34 e4 31 66       	r6 = smax(r3, r6)			  ## encode_frame_FIX.c:795:32
   160d0:    47 30             	r7 = 0x10			  ## encode_frame_FIX.c:795:32
   160d2:    c8 e1 60 37       	r3 = r6 << r7
   160d6:    d8 ec 5b 32       	[r5+r2<<2] = r3
   160da:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:770:41
   160dc:    46 60             	r6 = [r4+0x0] 			  ## encode_frame_FIX.c:770:30
   160de:    86 ed 73 21       	ifs (r2 < r6) goto -0x11a <silk_process_gains_FIX+0x98 : 15fc8 >
   160e2:    d4 e9 10 80       	r8 = [sp+16]
   160e6:    00 e1 38 80       	r0 = r8 + 0x38			  ## encode_frame_FIX.c:800:16
   160ea:    51 16             	r1 = r5			  ## opus_demo.c:186:2
   160ec:    16 03             	rep 0x4 r6 {			  ## opus_demo.c:186:2
   160ee:    12 05             		r2 = [r1++=0x4] 			  ## opus_demo.c:186:2
   160f0:    82 05             		[r0++=0x4] = r2
                               	}			  ## opus_demo.c:186:2
   160f2:    f6 5c             	if (r6 != 0) goto -0x8 <silk_process_gains_FIX+0x1BC : 160ec >			  ## opus_demo.c:186:2
   160f4:    41 f0 24 02       	r1 = 0x224  # <ROM_RAM_SIZE+0x24 : 224 >			  ## encode_frame_FIX.c:801:13
   160f8:    07 21             		 r7 = [sp+4]			  ## encode_frame_FIX.c:801:13
   160fa:    78 4c             	r0 = b[r7+0xc] (u)			  ## encode_frame_FIX.c:801:44
   160fc:    d8 ee 51 01       	b[r5+r1] = r0			  ## encode_frame_FIX.c:801:31
   16100:    51 d6             	r1 = r5  #			  ## encode_frame_FIX.c:804:2
   16102:    43 60             		 r3 = [r4+0x0] 			  ## encode_frame_FIX.c:805:42
   16104:    04 23             	r4 = [sp+12]			  ## encode_frame_FIX.c:805:42
   16106:    02 f1 7c 40       	r2 = r4 + 0x7c  #			  ## encode_frame_FIX.c:801:44
   1610a:    06 22             		 r6 = [sp+8]			  ## encode_frame_FIX.c:801:44
   1610c:    60 16             	r0 = r6			  ## encode_frame_FIX.c:804:2
   1610e:    bf ea 83 fe       	call -0x2fa <silk_gains_quant : 15e18 >			  ## encode_frame_FIX.c:804:2
   16112:    54 ee 6a 01       	r0 = b[r6+0x1a] (s)			  ## encode_frame_FIX.c:808:26
   16116:    80 f8 0c 04       	if (r0 != 0x2) goto 0x18 <silk_process_gains_FIX+0x202 : 16132 >			  ## encode_frame_FIX.c:808:26
   1611a:    71 60             	r1 = [r7+0x0] 			  ## encode_frame_FIX.c:809:37
   1611c:    d0 ec 84 21       	r2 = [r8+0x14]			  ## encode_frame_FIX.c:809:18
   16120:    99 a8             	r1 = r1 >>> 0x8			  ## encode_frame_FIX.c:809:37
   16122:    12 18             	r2 += r1			  ## encode_frame_FIX.c:809:35
   16124:    41 21             	r1 = 0x1			  ## encode_frame_FIX.c:809:7
   16126:    32 ed 81 00       	ifs (r2 >= 0x81) {			  ## encode_frame_FIX.c:809:7
   1612a:    41 20             		r1 = 0x0
                               	}			  ## encode_frame_FIX.c:809:7
   1612c:    02 20             	r2 = [sp]			  ## encode_frame_FIX.c:809:7
   1612e:    a9 43             	b[r2+0x3] = r1			  ## encode_frame_FIX.c:809:7
   16130:    04 82             	goto 0x4 <silk_process_gains_FIX+0x206 : 16136 >			  ## encode_frame_FIX.c:809:7
   16132:    01 20             	r1 = [sp]
   16134:    19 43             	r1 = b[r1+0x3] (u)
   16136:    00 a1             	r0 = r0 << 0x1			  ## encode_frame_FIX.c:817:21
   16138:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## encode_frame_FIX.c:817:83
   1613c:    c2 ff 2a f6 01 00 	r2 = 0x1f62a <silk_Quantization_Offsets_Q10 : 1f62a >			  ## encode_frame_FIX.c:817:21
   16142:    20 d8             	r0 += r2  #			  ## encode_frame_FIX.c:817:21
   16144:    42 6c             		 r2 = [r4+0x30] 			  ## encode_frame_FIX.c:819:5
   16146:    19 d7             	r1 = r1.b0 (s)  #			  ## encode_frame_FIX.c:817:21
   16148:    44 60             		 r4 = [r4+0x0] 			  ## encode_frame_FIX.c:820:5
   1614a:    d8 ed 0a 01       	r0 = h[r0+r1<<1] (s)			  ## encode_frame_FIX.c:823:5
   1614e:    c1 ff cd cc 00 00 	r1 = 0xcccd <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1+0x4 : cccc >			  ## encode_frame_FIX.c:823:5
   16154:    f8 e1 00 11       	r1_r0 = r0 * r1 (s)			  ## encode_frame_FIX.c:823:5
   16158:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## encode_frame_FIX.c:823:5
   1615c:    43 e0 ce ff       	r3 = -0x32 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFCE : ffffffffffffffce >			  ## encode_frame_FIX.c:819:5
   16160:    32 1b             	r2 *= r3			  ## encode_frame_FIX.c:819:5
   16162:    20 18             	r0 += r2			  ## encode_frame_FIX.c:819:3
   16164:    c1 ff 34 33 ff ff 	r1 = 0xffff3334 <RAM_LIMIT_H+0xFFE53334 : ffff3334 >			  ## encode_frame_FIX.c:820:5
   1616a:    f8 e1 40 31       	r3_r2 = r4 * r1 (s)			  ## encode_frame_FIX.c:820:5
   1616e:    d0 ec 84 10       	r1 = [r8+0x4]			  ## encode_frame_FIX.c:821:5
   16172:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## encode_frame_FIX.c:820:5
   16176:    20 18             	r0 += r2			  ## encode_frame_FIX.c:820:3
   16178:    42 e0 67 fe       	r2 = -0x199 <RAM_LIMIT_H+0xFFFFFFFFFFE5FE66 : fffffffffffffe66 >			  ## encode_frame_FIX.c:821:5
   1617c:    f8 e1 10 32       	r3_r2 = r1 * r2 (s)			  ## encode_frame_FIX.c:821:5
   16180:    d0 ec 88 10       	r1 = [r8+0x8]			  ## encode_frame_FIX.c:822:5
   16184:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## encode_frame_FIX.c:821:5
   16188:    20 18             	r0 += r2			  ## encode_frame_FIX.c:821:3
   1618a:    42 e0 ce fc       	r2 = -0x332 <RAM_LIMIT_H+0xFFFFFFFFFFE5FCCE : fffffffffffffcce >			  ## encode_frame_FIX.c:822:5
   1618e:    f8 e1 10 32       	r3_r2 = r1 * r2 (s)			  ## encode_frame_FIX.c:822:5
   16192:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## encode_frame_FIX.c:822:5
   16196:    20 18             	r0 += r2			  ## encode_frame_FIX.c:822:3
   16198:    00 e1 cd 04       	r0 = r0 + 0x4cd			  ## encode_frame_FIX.c:823:3
   1619c:    d0 ec 81 00       	[r8+0x0] = r0			  ## encode_frame_FIX.c:818:24
   161a0:    02 85             	sp += 0x14			  ## encode_frame_FIX.c:818:24
   161a2:    5f 04             	{pc, r15-r4} = [sp++]			  ## encode_frame_FIX.c:827:1


silk_prefilter_FIX:
   161a4:    7f 04             	[--sp] = {rets, r15-r4}			  ## LTP_analysis_filter_FIX.c:241:0
   161a6:    e2 85             	sp += -0x6c			  ## LTP_analysis_filter_FIX.c:241:0
   161a8:    42 f0 f0 25       	r2 = 0x25f0  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xDEC : 25f0 >			  ## LTP_analysis_filter_FIX.c:251:51
   161ac:    82 37             		 [sp+92] = r2
   161ae:    02 18             	r2 += r0			  ## LTP_analysis_filter_FIX.c:251:51
   161b0:    44 f0 f4 25       	r4 = 0x25f4  # <WOLAAnalysisFilter_Float_M256_m4_r1+0xDF0 : 25f4 >			  ## LTP_analysis_filter_FIX.c:251:51
   161b4:    82 35             		 [sp+84] = r2			  ## LTP_analysis_filter_FIX.c:251:51
   161b6:    16 e1 30 04       	r6 = r0 + 0x1430			  ## LTP_analysis_filter_FIX.c:251:51
   161ba:    04 d8             	r4 += r0  #			  ## LTP_analysis_filter_FIX.c:251:51
   161bc:    62 69             		 r2 = [r6+0x24] 			  ## LTP_analysis_filter_FIX.c:253:26
   161be:    44 f0 70 28       	r4 = 0x2870  # <WOLASynthesisFilter_Float_M256_m4_r1+0x6C : 2870 >			  ## LTP_analysis_filter_FIX.c:252:50
   161c2:    84 25             		 [sp+20] = r4			  ## LTP_analysis_filter_FIX.c:252:50
   161c4:    04 18             	r4 += r0			  ## LTP_analysis_filter_FIX.c:252:50
   161c6:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## LTP_analysis_filter_FIX.c:252:50
   161ca:    84 24             		 [sp+16] = r4
   161cc:    14 e1 ac 08       	r4 = r0 + 0x18ac
   161d0:    10 e1 22 00       	r0 = r0 + 0x1022
   161d4:    00 f1 8c 11       	r0 = r1 + 0x18c  #
   161d8:    80 23             		 [sp+12] = r0
   161da:    c3 d4             	r11 = 0  #
   161dc:    81 26             		 [sp+24] = r1
   161de:    80 22             	[sp+8] = r0
   161e0:    84 2b             	[sp+44] = r4
   161e2:    47 64             	r7 = [r4+0x10] 			  ## LTP_analysis_filter_FIX.c:261:11
   161e4:    20 a1             	r0 = r2 << 0x1
   161e6:    80 21             	[sp+4] = r0
   161e8:    80 2a             	[sp+40] = r0
   161ea:    d0 e9 31 00       	d[sp+48] = r1_r0
   161ee:    84 96             	goto 0x22c <silk_prefilter_FIX+0x278 : 1641c >
   161f0:    6e d6             	r14 = r6  #
   161f2:    04 22             		 r4 = [sp+8]
   161f4:    01 e1 40 40       	r1 = r4 + 0x40			  ## LTP_analysis_filter_FIX.c:265:23
   161f8:    02 e1 20 40       	r2 = r4 + 0x20			  ## LTP_analysis_filter_FIX.c:265:23
   161fc:    d8 ec 2a 2b       	r2 = [r2+r11<<2]			  ## LTP_analysis_filter_FIX.c:265:23
   16200:    d8 ec 1a 1b       	r1 = [r1+r11<<2]			  ## LTP_analysis_filter_FIX.c:265:23
   16204:    a0 e0 80 2c       	r0 = 0x4000 - r2			  ## LTP_analysis_filter_FIX.c:265:23
   16208:    f8 e1 00 91       	r9_r8 = r0 * r1 (s)			  ## LTP_analysis_filter_FIX.c:265:23
   1620c:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## LTP_analysis_filter_FIX.c:265:23
   16210:    d0 ec 48 15       	r1 = [r4+0x58]			  ## LTP_analysis_filter_FIX.c:270:12
   16214:    d0 e9 39 80       	d[sp+56] = r9_r8			  ## LTP_analysis_filter_FIX.c:270:12
   16218:    f0 e1 80 02       	r0 = r8 * r2			  ## LTP_analysis_filter_FIX.c:269:12
   1621c:    4a 90             	r2 = r4 + 0x10			  ## LTP_analysis_filter_FIX.c:268:9
   1621e:    d8 ec 2a ab       	r10 = [r2+r11<<2]			  ## LTP_analysis_filter_FIX.c:268:9
   16222:    e1 e1 cd 1f       	r1 = r1 * 0x19A			  ## LTP_analysis_filter_FIX.c:270:12
   16226:    01 18             	r1 += r0			  ## LTP_analysis_filter_FIX.c:269:12
   16228:    c0 ff 33 33 33 00 	r0 = 0x333333 <RAM_LIMIT_H+0x193332 : 333332 >			  ## LTP_analysis_filter_FIX.c:270:12
   1622e:    01 18             	r1 += r0			  ## LTP_analysis_filter_FIX.c:270:12
   16230:    a0 e0 00 a0       	r0 = 0x0 - r10			  ## LTP_analysis_filter_FIX.c:271:12
   16234:    f8 e1 10 90       	r9_r8 = r1 * r0 (s)			  ## LTP_analysis_filter_FIX.c:271:12
   16238:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## LTP_analysis_filter_FIX.c:271:12
   1623c:    e1 e0 00 8d       	r1 = r8 + 0x2000			  ## LTP_analysis_filter_FIX.c:272:12
   16240:    99 ae             	r1 = r1 >>> 0xe			  ## LTP_analysis_filter_FIX.c:272:12
   16242:    78 e0 01 91       	r9 = sat16(r1) (s)			  ## LTP_analysis_filter_FIX.c:273:3
   16246:    d8 ec 4a 8b       	r8 = [r4+r11<<2]			  ## LTP_analysis_filter_FIX.c:277:16
   1624a:    cc 30             	r4 += 0x30			  ## LTP_analysis_filter_FIX.c:276:14
   1624c:    d8 ec 4a 0b       	r0 = [r4+r11<<2]			  ## LTP_analysis_filter_FIX.c:276:14
   16250:    d0 e9 61 00       	d[sp+96] = r1_r0			  ## LTP_analysis_filter_FIX.c:286:30
   16254:    00 21             	r0 = [sp+4]			  ## LTP_analysis_filter_FIX.c:286:30
   16256:    36 dc             	r6 = r3 + r0  #			  ## LTP_analysis_filter_FIX.c:286:30
   16258:    00 26             		 r0 = [sp+24]			  ## LTP_analysis_filter_FIX.c:278:18
   1625a:    d0 ec e8 c0       	r12 = [r14+0x8]			  ## LTP_analysis_filter_FIX.c:304:24
   1625e:    c0 e1 b5 10       	r1 = r11 << 0x5			  ## LTP_analysis_filter_FIX.c:278:18
   16262:    01 18             	r1 += r0			  ## LTP_analysis_filter_FIX.c:278:18
   16264:    d4 e9 10 f0       	r15 = [sp+16]
   16268:    f2 16             	r2 = r15			  ## LTP_analysis_filter_FIX.c:306:5
   1626a:    01 f1 8c 10       	r1 = r1 + 0x8c  #			  ## LTP_analysis_filter_FIX.c:278:18
   1626e:    83 29             		 [sp+36] = r3
   16270:    00 2a             	r0 = [sp+40]			  ## LTP_analysis_filter_FIX.c:306:5
   16272:    d0 e9 30 40       	r5_r4 = d[sp+48]			  ## LTP_analysis_filter_FIX.c:306:5
   16276:    84 14             	r5_r4 = 0			  ## LTP_analysis_filter_FIX.c:306:5
   16278:    44 24             	r4 = 0x4			  ## LTP_analysis_filter_FIX.c:306:5
   1627a:    50 87             	rep 0xc 0x8 {			  ## LTP_analysis_filter_FIX.c:306:5
   1627c:    d4 ed 12 d0       		r13 = h[r1++=0x2] (s)			  ## LTP_analysis_filter_FIX.c:306:5
   16280:    d4 ed 62 00       		r0 = h[r6++=0x2] (s)			  ## LTP_analysis_filter_FIX.c:306:5
   16284:    fc e1 00 5d       		r5_r4 += r0 * r13 (s)
                               	}			  ## LTP_analysis_filter_FIX.c:306:5
   16288:    d2 e1 4b d8       	r13 = r5_r4 >>> 0xb (up)			  ## LTP_analysis_filter_FIX.c:306:5
   1628c:    f9 30             	r1 += -0x10			  ## LTP_analysis_filter_FIX.c:306:5
   1628e:    fe 32             	r6 += -0xe			  ## LTP_analysis_filter_FIX.c:306:5
   16290:    d4 ed 32 00       	r0 = h[r3++=0x2] (s)			  ## LTP_analysis_filter_FIX.c:306:5
   16294:    00 a2             	r0 = r0 << 0x2			  ## LTP_analysis_filter_FIX.c:306:5
   16296:    b4 e0 02 0d       	r0 = r0 - r13			  ## LTP_analysis_filter_FIX.c:306:5
   1629a:    84 d4             	r5_r4 = 0  #			  ## LTP_analysis_filter_FIX.c:306:5
   1629c:    a0 05             		 [r2++=0x4] = r0			  ## LTP_analysis_filter_FIX.c:306:5
   1629e:    0c ea eb ff       	if (--r12 != 0) goto -0x2a <silk_prefilter_FIX+0xD4 : 16278 >			  ## LTP_analysis_filter_FIX.c:306:5
   162a2:    d0 e9 31 40       	d[sp+48] = r5_r4
   162a6:    d4 e9 1d d0       	[sp+28] = r13
   162aa:    80 2a             	[sp+40] = r0
   162ac:    d4 e9 2c c0       	r12 = [sp+44]
   162b0:    d0 ec cc 10       	r1 = [r12+0xc]			  ## LTP_analysis_filter_FIX.c:332:19
   162b4:    d0 ec f0 20       	r2 = [r15+0x0]			  ## LTP_analysis_filter_FIX.c:332:19
   162b8:    91 db             	r1 *= r9  #			  ## LTP_analysis_filter_FIX.c:332:19
   162ba:    00 35             		 r0 = [sp+84]			  ## LTP_analysis_filter_FIX.c:332:17
   162bc:    03 e1 08 a0       	r3 = r10 + 0x8			  ## LTP_analysis_filter_FIX.c:268:9
   162c0:    bb a4             	r3 = r3 >>> 0x4			  ## LTP_analysis_filter_FIX.c:268:9
   162c2:    32 1b             	r2 *= r3			  ## LTP_analysis_filter_FIX.c:332:19
   162c4:    21 18             	r1 += r2			  ## LTP_analysis_filter_FIX.c:332:19
   162c6:    f2 d6             	r2 = r15  #			  ## LTP_analysis_filter_FIX.c:342:4
   162c8:    81 60             		 [r0+0x0] = r1			  ## LTP_analysis_filter_FIX.c:332:17
   162ca:    d0 ec e8 10       	r1 = [r14+0x8]			  ## LTP_analysis_filter_FIX.c:341:27
   162ce:    3a f1 ff 1f       	r10 = r1 + -0x1  #			  ## LTP_analysis_filter_FIX.c:341:40
   162d2:    04 25             		 r4 = [sp+20]			  ## LTP_analysis_filter_FIX.c:342:4
   162d4:    d0 e9 30 00       	r1_r0 = d[sp+48]			  ## LTP_analysis_filter_FIX.c:342:4
   162d8:    4a 03             	rep 0xa r10 {			  ## LTP_analysis_filter_FIX.c:342:4
   162da:    e0 ee 21 19       		r1_r0 = [r2 ++= 0x4]*r9 (s)			  ## LTP_analysis_filter_FIX.c:342:4
   162de:    e4 ee 20 13       		r1_r0 += [r2 ++= 0x0]*r3 (s)			  ## LTP_analysis_filter_FIX.c:342:4
   162e2:    c0 05             		[r4++=0x4] = r0
                               	}			  ## LTP_analysis_filter_FIX.c:342:4
   162e4:    8a f8 f8 01       	if (r10 != 0x0) goto -0x10 <silk_prefilter_FIX+0x134 : 162d8 >			  ## LTP_analysis_filter_FIX.c:342:4
   162e8:    d0 e9 31 00       	d[sp+48] = r1_r0
   162ec:    e6 16             	r6 = r14
   162ee:    31 f1 fc ff       	r1 = r15 + -0x4  #			  ## LTP_analysis_filter_FIX.c:355:19
   162f2:    60 62             		 r0 = [r6+0x8] 			  ## LTP_analysis_filter_FIX.c:355:41
   162f4:    80 36             	[sp+88] = r0
   162f6:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## LTP_analysis_filter_FIX.c:355:19
   162fa:    d0 ec cd 10       	[r12+0xc] = r1			  ## LTP_analysis_filter_FIX.c:355:17
   162fe:    00 23             	r0 = [sp+12]			  ## LTP_analysis_filter_FIX.c:359:27
   16300:    09 40             	r1 = b[r0+0x0] (u)			  ## LTP_analysis_filter_FIX.c:359:27
   16302:    31 e8 02 80       	if (r1 == 0x2) {			  ## LTP_analysis_filter_FIX.c:359:27
   16306:    00 26             		r0 = [sp+24]			  ## LTP_analysis_filter_FIX.c:360:10
   16308:    d8 38             		r0 += 0x78			  ## LTP_analysis_filter_FIX.c:360:10
   1630a:    d8 ec 0a 7b       		r7 = [r0+r11<<2]
                               	}			  ## LTP_analysis_filter_FIX.c:360:10
   1630e:    d4 e9 21 b0       	[sp+32] = r11
   16312:    d0 e9 60 00       	r1_r0 = d[sp+96]
   16316:    89 bf             	r1 = r0 >>> 0x1f
   16318:    d0 e9 61 00       	d[sp+96] = r1_r0			  ## LTP_analysis_filter_FIX.c:178:41
   1631c:    b0 e1 41 80       	r0 = sextra(r8, p:0x0, l:0x10)			  ## LTP_analysis_filter_FIX.c:178:41
   16320:    89 bf             	r1 = r0 >>> 0x1f
   16322:    d0 e9 49 00       	d[sp+72] = r1_r0
   16326:    c0 f1 80 ed       	r14 = r8 >>> 0x10  #			  ## LTP_analysis_filter_FIX.c:179:33
   1632a:    00 2b             		 r0 = [sp+44]			  ## LTP_analysis_filter_FIX.c:179:33
   1632c:    c0 f1 ef fd       	r15 = r14 >>> 0x1f  #
   16330:    01 61             		 r1 = [r0+0x4] 			  ## LTP_analysis_filter_FIX.c:186:22
   16332:    d0 ec 08 c0       	r12 = [r0+0x8]			  ## LTP_analysis_filter_FIX.c:187:22
   16336:    7a d6             	r10 = r7  #
   16338:    03 60             		 r3 = [r0+0x0] 			  ## LTP_analysis_filter_FIX.c:185:23
   1633a:    d0 e9 38 40       	r5_r4 = d[sp+56]
   1633e:    c8 a1             	r0 = r4 >>> 0x1			  ## LTP_analysis_filter_FIX.c:181:35
   16340:    4b f0 ff 01       	r11 = 0x1ff  # <_MASK_MEM_SIZE+0x5A : 1fe >
   16344:    80 31             		 [sp+68] = r0			  ## LTP_analysis_filter_FIX.c:180:35
   16346:    c8 a2             	r0 = r4 >>> 0x2			  ## LTP_analysis_filter_FIX.c:180:35
   16348:    80 2e             	[sp+56] = r0
   1634a:    44 20             	r4 = 0x0
   1634c:    24 91             	goto 0xa2 <silk_prefilter_FIX+0x24C : 163f0 >
   1634e:    87 fd 1a 02       	ifs (r7 < 0x1) goto 0x34 <silk_prefilter_FIX+0x1E2 : 16386 >
   16352:    ba 1d             	r2 = r3 + r7			  ## LTP_analysis_filter_FIX.c:200:14
   16354:    90 e1 22 7b       	r7 = r2 & r11			  ## LTP_analysis_filter_FIX.c:203:64
   16358:    05 e1 7c 60       	r5 = r6 + 0x7c			  ## LTP_analysis_filter_FIX.c:201:16
   1635c:    d8 ed 5a 77       	r7 = h[r5+r7<<1] (s)			  ## LTP_analysis_filter_FIX.c:203:17
   16360:    00 e1 fe 21       	r0 = r2 + 0x1fe			  ## LTP_analysis_filter_FIX.c:201:59
   16364:    90 e1 02 0b       	r0 = r0 & r11			  ## LTP_analysis_filter_FIX.c:201:63
   16368:    d8 ed 5a 00       	r0 = h[r5+r0<<1] (s)			  ## LTP_analysis_filter_FIX.c:201:16
   1636c:    02 e1 ff 21       	r2 = r2 + 0x1ff			  ## LTP_analysis_filter_FIX.c:201:33
   16370:    90 e1 22 2b       	r2 = r2 & r11			  ## LTP_analysis_filter_FIX.c:202:60
   16374:    d8 ed 5a 22       	r2 = h[r5+r2<<1] (s)			  ## LTP_analysis_filter_FIX.c:202:17
   16378:    70 d8             	r0 += r7  #			  ## LTP_analysis_filter_FIX.c:202:17
   1637a:    05 2e             		 r5 = [sp+56]			  ## LTP_analysis_filter_FIX.c:202:17
   1637c:    50 db             	r0 *= r5  #			  ## LTP_analysis_filter_FIX.c:202:17
   1637e:    05 31             		 r5 = [sp+68]			  ## LTP_analysis_filter_FIX.c:202:71
   16380:    52 1b             	r2 *= r5			  ## LTP_analysis_filter_FIX.c:202:71
   16382:    02 18             	r2 += r0			  ## LTP_analysis_filter_FIX.c:203:14
   16384:    04 81             	goto 0x2 <silk_prefilter_FIX+0x1E4 : 16388 >			  ## LTP_analysis_filter_FIX.c:203:14
   16386:    42 20             	r2 = 0x0
   16388:    6d d6             	r13 = r6  #
   1638a:    05 35             		 r5 = [sp+84]			  ## LTP_analysis_filter_FIX.c:212:20
   1638c:    f8 e1 10 9e       	r9_r8 = r1 * r14 (s)			  ## LTP_analysis_filter_FIX.c:210:14
   16390:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## LTP_analysis_filter_FIX.c:210:14
   16394:    d0 e9 48 60       	r7_r6 = d[sp+72]			  ## LTP_analysis_filter_FIX.c:210:14
   16398:    f8 e1 c0 76       	r7_r6 = r12 * r6 (s)			  ## LTP_analysis_filter_FIX.c:210:14
   1639c:    d0 e1 00 69       	r7_r6 >>= 0x10			  ## LTP_analysis_filter_FIX.c:210:14
   163a0:    b4 e0 60 08       	r0 = r6 + r8			  ## LTP_analysis_filter_FIX.c:210:14
   163a4:    00 a2             	r0 = r0 << 0x2			  ## LTP_analysis_filter_FIX.c:213:20
   163a6:    d8 ec 5a 54       	r5 = [r5+r4<<2]			  ## LTP_analysis_filter_FIX.c:212:20
   163aa:    d0 e9 60 60       	r7_r6 = d[sp+96]			  ## LTP_analysis_filter_FIX.c:209:16
   163ae:    f8 e1 10 76       	r7_r6 = r1 * r6 (s)			  ## LTP_analysis_filter_FIX.c:209:16
   163b2:    d0 e1 0e 68       	r7_r6 >>= 0xe			  ## LTP_analysis_filter_FIX.c:212:20
   163b6:    71 e1 03 60       	r1 = r6 & 0xFFFFFFFC			  ## LTP_analysis_filter_FIX.c:212:20
   163ba:    59 1e             	r1 = r5 - r1			  ## LTP_analysis_filter_FIX.c:212:20
   163bc:    b4 e0 12 c0       	r12 = r1 - r0			  ## LTP_analysis_filter_FIX.c:213:20
   163c0:    05 e1 00 c8       	r5 = r12 + 0x800			  ## LTP_analysis_filter_FIX.c:218:9
   163c4:    dd ac             	r5 = r5 >>> 0xc			  ## LTP_analysis_filter_FIX.c:218:9
   163c6:    78 e0 01 65       	r6 = sat16(r5) (s)			  ## LTP_analysis_filter_FIX.c:219:4
   163ca:    03 e1 ff 31       	r3 = r3 + 0x1ff			  ## LTP_analysis_filter_FIX.c:215:38
   163ce:    90 e1 32 3b       	r3 = r3 & r11			  ## LTP_analysis_filter_FIX.c:215:42
   163d2:    05 e1 7c d0       	r5 = r13 + 0x7c			  ## LTP_analysis_filter_FIX.c:220:4
   163d6:    d8 ed 59 63       	h[r5+r3<<1] = r6			  ## LTP_analysis_filter_FIX.c:220:33
   163da:    20 18             	r0 += r2			  ## LTP_analysis_filter_FIX.c:213:20
   163dc:    02 e1 00 11       	r2 = r1 + 0x100			  ## LTP_analysis_filter_FIX.c:224:14
   163e0:    20 de             	r0 = r2 - r0  #			  ## LTP_analysis_filter_FIX.c:224:14
   163e2:    02 37             		 r2 = [sp+92]			  ## LTP_analysis_filter_FIX.c:224:12
   163e4:    88 a9             	r0 = r0 >>> 0x9			  ## LTP_analysis_filter_FIX.c:224:14
   163e6:    d8 ec 2b 04       	[r2+r4<<2] = r0			  ## LTP_analysis_filter_FIX.c:224:12
   163ea:    c4 21             	r4 += 0x1			  ## LTP_analysis_filter_FIX.c:195:27
   163ec:    d6 16             	r6 = r13
   163ee:    a7 16             	r7 = r10
   163f0:    00 36             	r0 = [sp+88]			  ## LTP_analysis_filter_FIX.c:195:2
   163f2:    80 ed ac 41       	ifs (r4 < r0) goto -0xa8 <silk_prefilter_FIX+0x1AA : 1634e >			  ## LTP_analysis_filter_FIX.c:195:2
   163f6:    00 2b             	r0 = [sp+44]
   163f8:    81 61             	[r0+0x4] = r1			  ## LTP_analysis_filter_FIX.c:229:20
   163fa:    d0 ec 09 c0       	[r0+0x8] = r12			  ## LTP_analysis_filter_FIX.c:230:20
   163fe:    83 60             	[r0+0x0] = r3			  ## LTP_analysis_filter_FIX.c:231:22
   16400:    60 62             	r0 = [r6+0x8] 			  ## LTP_analysis_filter_FIX.c:364:21
   16402:    01 a2             	r1 = r0 << 0x2			  ## LTP_analysis_filter_FIX.c:365:10
   16404:    02 37             	r2 = [sp+92]			  ## LTP_analysis_filter_FIX.c:365:10
   16406:    12 18             	r2 += r1			  ## LTP_analysis_filter_FIX.c:365:10
   16408:    82 37             	[sp+92] = r2			  ## LTP_analysis_filter_FIX.c:364:6
   1640a:    00 a1             	r0 = r0 << 0x1			  ## LTP_analysis_filter_FIX.c:364:6
   1640c:    03 29             	r3 = [sp+36]			  ## LTP_analysis_filter_FIX.c:364:6
   1640e:    03 18             	r3 += r0			  ## LTP_analysis_filter_FIX.c:364:6
   16410:    d4 e9 20 b0       	r11 = [sp+32]
   16414:    0b e1 01 b0       	r11 = r11 + 0x1			  ## LTP_analysis_filter_FIX.c:263:41
   16418:    d4 e9 1c d0       	r13 = [sp+28]
   1641c:    61 60             	r1 = [r6+0x0] 			  ## LTP_analysis_filter_FIX.c:263:30
   1641e:    4b ff 00 b1 e6 fe 	ifs (r11 < r1) goto -0x234 <silk_prefilter_FIX+0x4C : 161f0 >			  ## LTP_analysis_filter_FIX.c:263:30
   16424:    00 26             	r0 = [sp+24]			  ## LTP_analysis_filter_FIX.c:368:15
   16426:    d8 38             	r0 += 0x78			  ## LTP_analysis_filter_FIX.c:368:15
   16428:    f8 3c             	r0 += -0x4			  ## LTP_analysis_filter_FIX.c:368:15
   1642a:    d8 ec 0a 01       	r0 = [r0+r1<<2]			  ## LTP_analysis_filter_FIX.c:368:15
   1642e:    01 2b             	r1 = [sp+44]			  ## LTP_analysis_filter_FIX.c:368:13
   16430:    90 64             	[r1+0x10] = r0			  ## LTP_analysis_filter_FIX.c:368:13
   16432:    02 9b             	sp += 0x6c			  ## LTP_analysis_filter_FIX.c:368:13
   16434:    5f 04             	{pc, r15-r4} = [sp++]			  ## LTP_analysis_filter_FIX.c:369:1


combine_and_check:
   16436:    77 04             	[--sp] = {rets, r7-r4}			  ## encode_pulses.c:88:0
   16438:    04 16             	r4 = r0			  ## encode_pulses.c:88:0
   1643a:    40 20             	r0 = 0x0			  ## encode_pulses.c:88:0
   1643c:    45 20             	r5 = 0x0			  ## encode_pulses.c:88:0
   1643e:    04 89             	goto 0x12 <combine_and_check+0x1C : 16452 >			  ## encode_pulses.c:88:0
   16440:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## encode_pulses.c:92:9
   16444:    76 18             	r6 += r7			  ## encode_pulses.c:92:26
   16446:    02 ee 07 60       	ifs (r6 > r2) goto 0xe <combine_and_check+0x22 : 16458 >
   1644a:    d8 ec 4b 65       	[r4+r5<<2] = r6			  ## encode_pulses.c:96:18
   1644e:    c1 28             	r1 += 0x8			  ## encode_pulses.c:91:2
   16450:    c5 21             	r5 += 0x1			  ## encode_pulses.c:91:24
   16452:    83 ed f5 51       	ifs (r5 < r3) goto -0x16 <combine_and_check+0xA : 16440 >
   16456:    57 04             	{pc, r7-r4} = [sp++]			  ## encode_pulses.c:100:1
   16458:    40 21             	r0 = 0x1
   1645a:    57 04             	{pc, r7-r4} = [sp++]			  ## encode_pulses.c:100:1


encode_split:
   1645c:    74 04             	[--sp] = {rets, r4}			  ## encode_pulses.c:126:0
   1645e:    32 ed 01 c0       	ifs (r2 >= 0x1) {			  ## encode_pulses.c:126:0
   16462:    c4 ff c4 eb 01 00 		r4 = 0x1ebc4 <silk_shell_code_table_offsets : 1ebc4 >			  ## encode_pulses.c:128:50
   16468:    d8 ee 20 24       		r2 = b[r2+r4] (u)			  ## encode_pulses.c:128:38
   1646c:    32 18             		r2 += r3			  ## encode_pulses.c:128:38
   1646e:    bf ea 12 d6       		call -0x53dc
                               	} <ec_enc_icdf : 11096 >			  ## encode_pulses.c:128:3
   16472:    54 04             	{pc, r4} = [sp++]			  ## encode_pulses.c:130:1


silk_encode_pulses:
   16474:    7f 04             	[--sp] = {rets, r15-r4}			  ## encode_pulses.c:202:0
   16476:    e2 86             	sp += -0x68			  ## encode_pulses.c:202:0
   16478:    3b d6             	r11 = r3  #			  ## encode_pulses.c:202:0
   1647a:    82 21             		 [sp+4] = r2			  ## encode_pulses.c:202:0
   1647c:    c0 d4             	r8 = 0  #			  ## encode_pulses.c:202:0
   1647e:    81 22             		 [sp+8] = r1			  ## encode_pulses.c:202:0
   16480:    cb 84             	r3 = sp + 68			  ## encode_pulses.c:202:0
   16482:    41 28             	r1 = 0x8			  ## opus_demo.c:208:2
   16484:    42 20             	r2 = 0x0			  ## opus_demo.c:208:2
   16486:    01 03             	rep 0x2 r1 {			  ## opus_demo.c:208:2
   16488:    b2 05             		[r3++=0x4] = r2
                               	}			  ## opus_demo.c:208:2
   1648a:    f1 5d             	if (r1 != 0) goto -0x6 <silk_encode_pulses+0x12 : 16486 >			  ## opus_demo.c:208:2
   1648c:    41 e0 e4 35       	r1 = 0x35e4 <WOLASynthesisFilter_Float_M256_m4_r1+0xDE0 : 35e4 >
   16490:    b4 f0 00 e1       	r14 = r0 + r1  #
   16494:    21 27             		 r1 = [sp+156]
   16496:    0f f1 50 e0       	r15 = r14 + 0x50  #			  ## encode_pulses.c:217:34
   1649a:    80 23             		 [sp+12] = r0			  ## encode_pulses.c:217:34
   1649c:    42 f0 64 38       	r2 = 0x3864  # <STFT_Win_FixHalf_M512_D160+0x60 : 3864 >			  ## encode_pulses.c:215:25
   164a0:    81 20             		 [sp] = r1			  ## encode_pulses.c:215:25
   164a2:    85 1c             	r5 = r0 + r2			  ## encode_pulses.c:215:25
   164a4:    c0 e1 14 cc       	r12 = r1 >>> 0x4			  ## encode_pulses.c:224:9
   164a8:    b9 16             	r9 = r11
   164aa:    c5 14             	r13 = 0
   164ac:    d4 e9 41 e0       	[sp+64] = r14
   164b0:    14 9d             	goto 0x7a <silk_encode_pulses+0xB8 : 1652c >
   164b2:    50 16             	r0 = r5			  ## encode_pulses.c:247:4
   164b4:    50 8f             	rep 0xc 0x10 {			  ## encode_pulses.c:247:4
   164b6:    d4 ee 91 a0       		r10 = b[r9++=0x1] (s)			  ## encode_pulses.c:247:4
   164ba:    30 e4 00 aa       		r10 = abs(r10)			  ## encode_pulses.c:247:4
   164be:    d8 ec 05 a0       		[r0++=0x4] = r10
                               	}			  ## encode_pulses.c:247:4
   164c2:    d8 ec fb 8d       	[r15+r13<<2] = r8			  ## encode_pulses.c:258:15
   164c6:    e0 16             	r0 = r14			  ## encode_pulses.c:258:15
   164c8:    c0 e1 d2 e0       	r14 = r13 << 0x2			  ## encode_pulses.c:258:3
   164cc:    b4 e0 00 6e       	r6 = r0 + r14			  ## encode_pulses.c:258:3
   164d0:    04 8d             	goto 0x1a <silk_encode_pulses+0x78 : 164ec >			  ## encode_pulses.c:258:3
   164d2:    b4 e0 f0 0e       	r0 = r15 + r14			  ## encode_pulses.c:272:16
   164d6:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## encode_pulses.c:272:16
   164da:    40 20             	r0 = 0x0
   164dc:    04 85             	goto 0xa <silk_encode_pulses+0x74 : 164e8 >
   164de:    01 a2             	r1 = r0 << 0x2			  ## encode_pulses.c:274:26
   164e0:    51 18             	r1 += r5			  ## encode_pulses.c:274:26
   164e2:    6c e8 03 11       	[r1+0x0] >>>= 0x1			  ## encode_pulses.c:274:24
   164e6:    c0 21             	r0 += 0x1			  ## encode_pulses.c:273:48
   164e8:    80 f8 f9 21       	if (r0 != 0x10) goto -0xe <silk_encode_pulses+0x6A : 164de >
   164ec:    cf 84             	r7 = sp + 68
   164ee:    42 28             	r2 = 0x8			  ## encode_pulses.c:262:17
   164f0:    43 28             	r3 = 0x8			  ## encode_pulses.c:262:17
   164f2:    70 16             	r0 = r7			  ## encode_pulses.c:262:17
   164f4:    51 16             	r1 = r5			  ## encode_pulses.c:262:17
   164f6:    41 9f             	call -0xc2 <combine_and_check : 16436 >			  ## encode_pulses.c:262:17
   164f8:    04 16             	r4 = r0			  ## encode_pulses.c:262:17
   164fa:    42 2a             	r2 = 0xa			  ## encode_pulses.c:264:18
   164fc:    43 24             	r3 = 0x4			  ## encode_pulses.c:264:18
   164fe:    70 16             	r0 = r7			  ## encode_pulses.c:264:18
   16500:    71 16             	r1 = r7			  ## encode_pulses.c:264:18
   16502:    41 99             	call -0xce <combine_and_check : 16436 >			  ## encode_pulses.c:264:18
   16504:    04 18             	r4 += r0			  ## encode_pulses.c:264:15
   16506:    42 2c             	r2 = 0xc			  ## encode_pulses.c:266:18
   16508:    43 22             	r3 = 0x2			  ## encode_pulses.c:266:18
   1650a:    70 16             	r0 = r7			  ## encode_pulses.c:266:18
   1650c:    71 16             	r1 = r7			  ## encode_pulses.c:266:18
   1650e:    41 93             	call -0xda <combine_and_check : 16436 >			  ## encode_pulses.c:266:18
   16510:    04 18             	r4 += r0			  ## encode_pulses.c:266:15
   16512:    42 30             	r2 = 0x10			  ## encode_pulses.c:268:18
   16514:    43 21             	r3 = 0x1			  ## encode_pulses.c:268:18
   16516:    60 15             	r1_r0 = r7_r6			  ## encode_pulses.c:268:18
   16518:    41 8e             	call -0xe4 <combine_and_check : 16436 >			  ## encode_pulses.c:268:18
   1651a:    a0 e0 00 00       	r0 = 0x0 - r0			  ## encode_pulses.c:270:8
   1651e:    80 e8 d8 41       	if (r4 != r0) goto -0x50 <silk_encode_pulses+0x5E : 164d2 >			  ## encode_pulses.c:270:8
   16522:    0d e1 01 d0       	r13 = r13 + 0x1			  ## encode_pulses.c:238:25
   16526:    d5 20             	r5 += 0x40			  ## encode_pulses.c:282:18
   16528:    d4 e9 40 e0       	r14 = [sp+64]
   1652c:    8c ed c1 d1       	ifs (r13 < r12) goto -0x7e <silk_encode_pulses+0x3E : 164b2 >			  ## encode_pulses.c:238:2
   16530:    c2 d4             	r10 = 0  #
   16532:    00 22             		 r0 = [sp+8]
   16534:    88 a1             	r0 = r0 >>> 0x1
   16536:    cd ff ff ff ff 7f 	r13 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >
   1653c:    c5 ff e0 eb 01 00 	r5 = 0x1ebe0 <silk_lsb_iCDF : 1ebe0 >
   16542:    e9 e1 09 00       	r9 = r0 * 0x9
   16546:    48 e0 12 01       	r8 = 0x112 <var_bss_size+0x6 : 112 >
   1654a:    42 e0 bc 05       	r2 = 0x5bc <alg_code_size+0xEC : 5bc >
   1654e:    44 20             	r4 = 0x0
   16550:    14 81             	goto 0x42 <silk_encode_pulses+0x120 : 16594 >
   16552:    b4 e0 90 04       	r0 = r9 + r4			  ## encode_pulses.c:290:16
   16556:    50 18             	r0 += r5			  ## encode_pulses.c:290:16
   16558:    d8 ee 00 78       	r7 = b[r0+r8] (u)			  ## encode_pulses.c:290:16
   1655c:    41 20             	r1 = 0x0
   1655e:    e0 16             	r0 = r14
   16560:    04 8f             	goto 0x1e <silk_encode_pulses+0x10C : 16580 >
   16562:    d0 ec 00 35       	r3 = [r0+0x50]			  ## encode_pulses.c:292:8
   16566:    46 31             	r6 = 0x11			  ## encode_pulses.c:292:8
   16568:    b3 ee 00 00       	ifs (r3 <= 0x0) {			  ## encode_pulses.c:292:8
   1656c:    06 60             		r6 = [r0+0x0] 
                               	}			  ## encode_pulses.c:296:29
   1656e:    e3 e1 12 40       	r3 = r4 * 0x12			  ## encode_pulses.c:296:29
   16572:    63 18             	r3 += r6			  ## encode_pulses.c:296:29
   16574:    53 18             	r3 += r5			  ## encode_pulses.c:296:29
   16576:    d8 ee 30 32       	r3 = b[r3+r2] (u)			  ## encode_pulses.c:296:29
   1657a:    37 18             	r7 += r3			  ## encode_pulses.c:296:29
   1657c:    c0 24             	r0 += 0x4			  ## encode_pulses.c:291:3
   1657e:    c1 21             	r1 += 0x1			  ## encode_pulses.c:291:26
   16580:    8c ed ef 11       	ifs (r1 < r12) goto -0x22 <silk_encode_pulses+0xEE : 16562 >
   16584:    40 16             	r0 = r4			  ## encode_pulses.c:299:7
   16586:    17 ed 00 4d       	ifs (r7 >= r13) {			  ## encode_pulses.c:299:7
   1658a:    d7 16             		r7 = r13			  ## encode_pulses.c:299:7
   1658c:    a0 16             		r0 = r10
                               	}			  ## encode_pulses.c:299:7
   1658e:    c4 21             	r4 += 0x1			  ## encode_pulses.c:288:38
   16590:    7d 16             	r13 = r7
   16592:    0a 16             	r10 = r0
   16594:    84 f8 dd 13       	if (r4 != 0x9) goto -0x46 <silk_encode_pulses+0xDE : 16552 >
   16598:    b4 e0 90 05       	r0 = r9 + r5			  ## encode_pulses.c:304:42
   1659c:    02 f1 00 01       	r2 = r0 + 0x100  #			  ## encode_pulses.c:304:42
   165a0:    00 23             		 r0 = [sp+12]			  ## encode_pulses.c:214:34
   165a2:    c0 30             	r0 += 0x10			  ## encode_pulses.c:214:34
   165a4:    a1 16             	r1 = r10			  ## encode_pulses.c:304:2
   165a6:    bf ea 76 d5       	call -0x5514 <ec_enc_icdf : 11096 >			  ## encode_pulses.c:304:2
   165aa:    e1 e1 12 a0       	r1 = r10 * 0x12			  ## encode_pulses.c:307:12
   165ae:    51 18             	r1 += r5			  ## encode_pulses.c:307:12
   165b0:    06 e1 5e 16       	r6 = r1 + 0x65e			  ## encode_pulses.c:307:12
   165b4:    44 20             	r4 = 0x0
   165b6:    04 9f             	goto 0x3e <silk_encode_pulses+0x182 : 165f6 >
   165b8:    d8 ec fa 14       	r1 = [r15+r4<<2]			  ## encode_pulses.c:309:7
   165bc:    01 56             	if (r1 == 0) goto 0x2c <silk_encode_pulses+0x176 : 165ea >			  ## encode_pulses.c:309:7
   165be:    41 31             	r1 = 0x11			  ## encode_pulses.c:313:4
   165c0:    62 16             	r2 = r6			  ## encode_pulses.c:313:4
   165c2:    bf ea 68 d5       	call -0x5530 <ec_enc_icdf : 11096 >			  ## encode_pulses.c:313:4
   165c6:    47 20             	r7 = 0x0
   165c8:    04 86             	goto 0xc <silk_encode_pulses+0x162 : 165d6 >
   165ca:    02 e1 00 57       	r2 = r5 + 0x700			  ## encode_pulses.c:315:5
   165ce:    41 31             	r1 = 0x11			  ## encode_pulses.c:315:5
   165d0:    bf ea 61 d5       	call -0x553e <ec_enc_icdf : 11096 >			  ## encode_pulses.c:315:5
   165d4:    c7 21             	r7 += 0x1			  ## encode_pulses.c:314:38
   165d6:    d8 ec fa 14       	r1 = [r15+r4<<2]			  ## encode_pulses.c:314:20
   165da:    f9 3f             	r1 += -0x1			  ## encode_pulses.c:314:32
   165dc:    81 ed f5 71       	ifs (r7 < r1) goto -0x16 <silk_encode_pulses+0x156 : 165ca >			  ## encode_pulses.c:314:32
   165e0:    d8 ec ea 14       	r1 = [r14+r4<<2]			  ## encode_pulses.c:317:28
   165e4:    02 e1 00 57       	r2 = r5 + 0x700			  ## encode_pulses.c:317:4
   165e8:    04 83             	goto 0x6 <silk_encode_pulses+0x17C : 165f0 >			  ## encode_pulses.c:317:4
   165ea:    d8 ec ea 14       	r1 = [r14+r4<<2]			  ## encode_pulses.c:310:28
   165ee:    62 16             	r2 = r6			  ## encode_pulses.c:310:4
   165f0:    bf ea 51 d5       	call -0x555e <ec_enc_icdf : 11096 >
   165f4:    c4 21             	r4 += 0x1			  ## encode_pulses.c:308:25
   165f6:    8c ed df 41       	ifs (r4 < r12) goto -0x42 <silk_encode_pulses+0x144 : 165b8 >			  ## encode_pulses.c:308:2
   165fa:    47 20             	r7 = 0x0
   165fc:    42 20             	r2 = 0x0
   165fe:    44 99             	goto 0x132 <silk_encode_pulses+0x2BE : 16732 >
   16600:    d8 ec ea 12       	r1 = [r14+r2<<2]			  ## encode_pulses.c:323:7
   16604:    81 fd 93 02       	ifs (r1 < 0x1) goto 0x126 <silk_encode_pulses+0x2BA : 1672e >			  ## encode_pulses.c:323:7
   16608:    b4 e0 e0 47       	r4 = r14 + r7			  ## encode_pulses.c:149:15
   1660c:    d2 ec 42 18       	r1 = [++r4=0x280]			  ## encode_pulses.c:149:15
   16610:    82 2e             	[sp+56] = r2			  ## encode_pulses.c:149:15
   16612:    50 ec 44 20       	r3_r2 = d[r4+0x4]			  ## encode_pulses.c:149:28
   16616:    b4 f0 20 e1       	r14 = r2 + r1  #			  ## encode_pulses.c:149:26
   1661a:    46 63             		 r6 = [r4+0xc] 			  ## encode_pulses.c:150:28
   1661c:    e9 1c             	r1 = r6 + r3			  ## encode_pulses.c:150:26
   1661e:    b4 f0 10 ae       	r10 = r1 + r14  #			  ## encode_pulses.c:157:26
   16622:    81 27             		 [sp+28] = r1			  ## encode_pulses.c:157:26
   16624:    46 f0 20 0e       	r6 = 0xe20  # <usb_code_size+0x35C : e20 >			  ## encode_pulses.c:152:28
   16628:    03 23             		 r3 = [sp+12]			  ## encode_pulses.c:152:28
   1662a:    73 d8             	r3 += r7  #			  ## encode_pulses.c:152:28
   1662c:    41 64             		 r1 = [r4+0x10] 			  ## encode_pulses.c:151:15
   1662e:    d8 ec 3a 86       	r8 = [r3+r6<<2]			  ## encode_pulses.c:152:28
   16632:    50 ec 44 21       	r3_r2 = d[r4+0x14]			  ## encode_pulses.c:151:28
   16636:    2e 1c             	r6 = r2 + r1			  ## encode_pulses.c:151:26
   16638:    83 d8             	r3 += r8  #			  ## encode_pulses.c:152:26
   1663a:    86 25             		 [sp+20] = r6			  ## encode_pulses.c:153:15
   1663c:    41 68             	r1 = [r4+0x20] 			  ## encode_pulses.c:153:15
   1663e:    42 69             	r2 = [r4+0x24] 			  ## encode_pulses.c:153:28
   16640:    63 d8             	r3 += r6  #			  ## encode_pulses.c:158:26
   16642:    83 28             		 [sp+32] = r3			  ## encode_pulses.c:158:26
   16644:    b4 f0 30 6a       	r6 = r3 + r10  #			  ## encode_pulses.c:161:26
   16648:    83 26             		 [sp+24] = r3			  ## encode_pulses.c:161:26
   1664a:    21 18             	r1 += r2			  ## encode_pulses.c:153:26
   1664c:    81 29             	[sp+36] = r1			  ## encode_pulses.c:154:15
   1664e:    d0 ec 48 82       	r8 = [r4+0x28]			  ## encode_pulses.c:154:15
   16652:    d0 ec 4c d2       	r13 = [r4+0x2c]			  ## encode_pulses.c:154:29
   16656:    b7 d6             	r7 = r11  #			  ## encode_pulses.c:154:29
   16658:    87 2f             		 [sp+60] = r7			  ## encode_pulses.c:154:29
   1665a:    d0 ec 40 93       	r9 = [r4+0x30]			  ## encode_pulses.c:155:15
   1665e:    d8 d8             	r8 += r13  #			  ## encode_pulses.c:154:27
   16660:    43 6d             		 r3 = [r4+0x34] 			  ## encode_pulses.c:155:29
   16662:    42 6e             	r2 = [r4+0x38] 			  ## encode_pulses.c:156:15
   16664:    d0 ec 4c b3       	r11 = [r4+0x3c]			  ## encode_pulses.c:156:29
   16668:    d4 e9 29 80       	[sp+40] = r8			  ## encode_pulses.c:159:26
   1666c:    18 18             	r8 += r1			  ## encode_pulses.c:159:26
   1666e:    93 18             	r3 += r9			  ## encode_pulses.c:155:27
   16670:    b2 d8             	r2 += r11  #			  ## encode_pulses.c:156:27
   16672:    83 2b             		 [sp+44] = r3			  ## encode_pulses.c:156:27
   16674:    7b d6             	r11 = r7  #
   16676:    82 2d             		 [sp+52] = r2
   16678:    a9 1c             	r1 = r2 + r3			  ## encode_pulses.c:160:26
   1667a:    b4 f0 10 98       	r9 = r1 + r8  #			  ## encode_pulses.c:162:26
   1667e:    81 2c             		 [sp+48] = r1			  ## encode_pulses.c:162:26
   16680:    b4 e0 90 26       	r2 = r9 + r6			  ## encode_pulses.c:163:26
   16684:    03 e1 24 55       	r3 = r5 + 0x524			  ## encode_pulses.c:166:2
   16688:    61 16             	r1 = r6			  ## encode_pulses.c:166:2
   1668a:    bf ea e7 fe       	call -0x232 <encode_split : 1645c >			  ## encode_pulses.c:166:2
   1668e:    03 e1 8c 54       	r3 = r5 + 0x48c			  ## encode_pulses.c:168:2
   16692:    a1 d6             	r1 = r10  #			  ## encode_pulses.c:168:2
   16694:    83 24             		 [sp+16] = r3			  ## encode_pulses.c:168:2
   16696:    62 16             	r2 = r6			  ## encode_pulses.c:168:2
   16698:    bf ea e0 fe       	call -0x240 <encode_split : 1645c >			  ## encode_pulses.c:168:2
   1669c:    0d e1 f4 53       	r13 = r5 + 0x3f4			  ## encode_pulses.c:170:2
   166a0:    e1 16             	r1 = r14			  ## encode_pulses.c:170:2
   166a2:    a2 16             	r2 = r10			  ## encode_pulses.c:170:2
   166a4:    d3 16             	r3 = r13			  ## encode_pulses.c:170:2
   166a6:    bf ea d9 fe       	call -0x24e <encode_split : 1645c >			  ## encode_pulses.c:170:2
   166aa:    07 f1 5c 53       	r7 = r5 + 0x35c  #			  ## encode_pulses.c:171:2
   166ae:    41 60             		 r1 = [r4+0x0] 			  ## encode_pulses.c:171:27
   166b0:    e2 16             	r2 = r14			  ## encode_pulses.c:171:2
   166b2:    73 16             	r3 = r7			  ## encode_pulses.c:171:2
   166b4:    bf ea d2 fe       	call -0x25c <encode_split : 1645c >			  ## encode_pulses.c:171:2
   166b8:    73 d6             	r3 = r7  #			  ## encode_pulses.c:172:2
   166ba:    41 62             		 r1 = [r4+0x8] 			  ## encode_pulses.c:172:27
   166bc:    02 27             	r2 = [sp+28]			  ## encode_pulses.c:172:2
   166be:    bf ea cd fe       	call -0x266 <encode_split : 1645c >			  ## encode_pulses.c:172:2
   166c2:    d3 d6             	r3 = r13  #			  ## encode_pulses.c:174:2
   166c4:    06 25             		 r6 = [sp+20]			  ## encode_pulses.c:174:2
   166c6:    61 d6             	r1 = r6  #			  ## encode_pulses.c:174:2
   166c8:    02 26             		 r2 = [sp+24]			  ## encode_pulses.c:174:2
   166ca:    bf ea c7 fe       	call -0x272 <encode_split : 1645c >			  ## encode_pulses.c:174:2
   166ce:    62 d5             	r3_r2 = r7_r6  #			  ## encode_pulses.c:175:2
   166d0:    41 64             		 r1 = [r4+0x10] 			  ## encode_pulses.c:175:27
   166d2:    d4 e9 40 e0       	r14 = [sp+64]			  ## encode_pulses.c:175:27
   166d6:    bf ea c1 fe       	call -0x27e <encode_split : 1645c >			  ## encode_pulses.c:175:2
   166da:    73 d6             	r3 = r7  #			  ## encode_pulses.c:176:2
   166dc:    41 66             		 r1 = [r4+0x18] 			  ## encode_pulses.c:176:27
   166de:    02 28             	r2 = [sp+32]			  ## encode_pulses.c:176:2
   166e0:    bf ea bc fe       	call -0x288 <encode_split : 1645c >			  ## encode_pulses.c:176:2
   166e4:    81 d6             	r1 = r8  #			  ## encode_pulses.c:178:2
   166e6:    03 24             		 r3 = [sp+16]			  ## encode_pulses.c:178:2
   166e8:    92 16             	r2 = r9			  ## encode_pulses.c:178:2
   166ea:    bf ea b7 fe       	call -0x292 <encode_split : 1645c >			  ## encode_pulses.c:178:2
   166ee:    82 d6             	r2 = r8  #			  ## encode_pulses.c:180:2
   166f0:    06 29             		 r6 = [sp+36]			  ## encode_pulses.c:180:2
   166f2:    61 16             	r1 = r6			  ## encode_pulses.c:180:2
   166f4:    d3 16             	r3 = r13			  ## encode_pulses.c:180:2
   166f6:    bf ea b1 fe       	call -0x29e <encode_split : 1645c >			  ## encode_pulses.c:180:2
   166fa:    62 d5             	r3_r2 = r7_r6  #			  ## encode_pulses.c:181:2
   166fc:    41 68             		 r1 = [r4+0x20] 			  ## encode_pulses.c:181:27
   166fe:    bf ea ad fe       	call -0x2a6 <encode_split : 1645c >			  ## encode_pulses.c:181:2
   16702:    73 d6             	r3 = r7  #			  ## encode_pulses.c:182:2
   16704:    41 6a             		 r1 = [r4+0x28] 			  ## encode_pulses.c:182:27
   16706:    02 2a             	r2 = [sp+40]			  ## encode_pulses.c:182:2
   16708:    bf ea a8 fe       	call -0x2b0 <encode_split : 1645c >			  ## encode_pulses.c:182:2
   1670c:    d3 d6             	r3 = r13  #			  ## encode_pulses.c:184:2
   1670e:    06 2b             		 r6 = [sp+44]			  ## encode_pulses.c:184:2
   16710:    61 d6             	r1 = r6  #			  ## encode_pulses.c:184:2
   16712:    02 2c             		 r2 = [sp+48]			  ## encode_pulses.c:184:2
   16714:    bf ea a2 fe       	call -0x2bc <encode_split : 1645c >			  ## encode_pulses.c:184:2
   16718:    62 d5             	r3_r2 = r7_r6  #			  ## encode_pulses.c:185:2
   1671a:    41 6c             		 r1 = [r4+0x30] 			  ## encode_pulses.c:185:27
   1671c:    bf ea 9e fe       	call -0x2c4 <encode_split : 1645c >			  ## encode_pulses.c:185:2
   16720:    73 d6             	r3 = r7  #			  ## encode_pulses.c:186:2
   16722:    41 6e             		 r1 = [r4+0x38] 			  ## encode_pulses.c:186:27
   16724:    02 2d             	r2 = [sp+52]			  ## encode_pulses.c:186:2
   16726:    07 2f             	r7 = [sp+60]			  ## encode_pulses.c:186:2
   16728:    bf ea 98 fe       	call -0x2d0 <encode_split : 1645c >			  ## encode_pulses.c:186:2
   1672c:    02 2e             	r2 = [sp+56]			  ## encode_pulses.c:186:2
   1672e:    d7 20             	r7 += 0x40			  ## encode_pulses.c:322:2
   16730:    c2 21             	r2 += 0x1			  ## encode_pulses.c:322:25
   16732:    8c ed 65 21       	ifs (r2 < r12) goto -0x136 <silk_encode_pulses+0x18C : 16600 >
   16736:    c0 14             	r8 = 0
   16738:    14 88             	goto 0x50 <silk_encode_pulses+0x316 : 1678a >
   1673a:    d8 ec fa 18       	r1 = [r15+r8<<2]			  ## encode_pulses.c:330:7
   1673e:    81 fd 22 02       	ifs (r1 < 0x1) goto 0x44 <silk_encode_pulses+0x312 : 16786 >			  ## encode_pulses.c:330:7
   16742:    c0 e1 84 20       	r2 = r8 << 0x4			  ## encode_pulses.c:331:27
   16746:    b4 e0 b0 92       	r9 = r11 + r2			  ## encode_pulses.c:331:18
   1674a:    3a e1 ff 1f       	r10 = r1 + -0x1			  ## encode_pulses.c:333:9
   1674e:    44 20             	r4 = 0x0
   16750:    04 98             	goto 0x30 <silk_encode_pulses+0x30E : 16782 >
   16752:    d8 ee 92 14       	r1 = b[r9+r4] (s)			  ## encode_pulses.c:334:24
   16756:    9a a7             	r2 = r1 >>> 0x7			  ## encode_pulses.c:334:24
   16758:    21 18             	r1 += r2			  ## encode_pulses.c:334:24
   1675a:    29 19             	r1 ^= r2			  ## encode_pulses.c:334:24
   1675c:    1e 17             	r6 = r1.b0 (s)			  ## encode_pulses.c:334:13
   1675e:    a7 16             	r7 = r10
   16760:    04 88             	goto 0x10 <silk_encode_pulses+0x2FE : 16772 >
   16762:    c8 e1 62 17       	r1 = r6 >> r7			  ## encode_pulses.c:336:12
   16766:    61 e1 01 10       	r1 = r1 & 0x1			  ## encode_pulses.c:336:34
   1676a:    52 16             	r2 = r5			  ## encode_pulses.c:337:6
   1676c:    bf ea 93 d4       	call -0x56da <ec_enc_icdf : 11096 >			  ## encode_pulses.c:337:6
   16770:    ff 3f             	r7 += -0x1			  ## encode_pulses.c:335:5
   16772:    07 fd f6 03       	ifs (r7 >= 0x1) goto -0x14 <silk_encode_pulses+0x2EE : 16762 >
   16776:    61 e1 01 60       	r1 = r6 & 0x1			  ## encode_pulses.c:339:17
   1677a:    52 16             	r2 = r5			  ## encode_pulses.c:340:5
   1677c:    bf ea 8b d4       	call -0x56ea <ec_enc_icdf : 11096 >			  ## encode_pulses.c:340:5
   16780:    c4 21             	r4 += 0x1			  ## encode_pulses.c:333:47
   16782:    84 f8 e6 21       	if (r4 != 0x10) goto -0x34 <silk_encode_pulses+0x2DE : 16752 >
   16786:    08 e1 01 80       	r8 = r8 + 0x1			  ## encode_pulses.c:329:25
   1678a:    8c ed d6 81       	ifs (r8 < r12) goto -0x54 <silk_encode_pulses+0x2C6 : 1673a >
   1678e:    44 20             	r4 = 0x0
   16790:    de e9 67 40       	b[sp+103] = r4			  ## encode_pulses.c:56:10
   16794:    01 22             	r1 = [sp+8]			  ## encode_pulses.c:58:6
   16796:    11 a1             	r1 = r1 << 0x1			  ## encode_pulses.c:58:6
   16798:    02 21             	r2 = [sp+4]			  ## encode_pulses.c:58:6
   1679a:    21 18             	r1 += r2			  ## encode_pulses.c:58:6
   1679c:    e1 e1 07 10       	r1 = r1 * 0x7			  ## encode_pulses.c:58:6
   167a0:    51 18             	r1 += r5			  ## encode_pulses.c:58:6
   167a2:    05 f1 27 12       	r5 = r1 + 0x227  #			  ## encode_pulses.c:59:14
   167a6:    01 20             		 r1 = [sp]			  ## encode_pulses.c:60:11
   167a8:    c1 28             	r1 += 0x8			  ## encode_pulses.c:60:11
   167aa:    9e a4             	r6 = r1 >>> 0x4			  ## encode_pulses.c:60:11
   167ac:    04 9e             	goto 0x3c <silk_encode_pulses+0x376 : 167ea >
   167ae:    d8 ec ea 14       	r1 = [r14+r4<<2]			  ## encode_pulses.c:62:7
   167b2:    81 fd 17 02       	ifs (r1 < 0x1) goto 0x2e <silk_encode_pulses+0x370 : 167e4 >
   167b6:    61 e1 1f 10       	r1 = r1 & 0x1F			  ## encode_pulses.c:64:23
   167ba:    31 e9 06 00       	if (r1 >= 0x6) {
   167be:    41 26             		r1 = 0x6
                               	}			  ## encode_pulses.c:64:23
   167c0:    d8 ee 50 11       	r1 = b[r5+r1] (u)			  ## encode_pulses.c:64:14
   167c4:    de e9 66 10       	b[sp+102] = r1			  ## encode_pulses.c:64:12
   167c8:    47 20             	r7 = 0x0
   167ca:    04 8a             	goto 0x14 <silk_encode_pulses+0x36C : 167e0 >
   167cc:    d8 ee b2 17       	r1 = b[r11+r7] (s)			  ## encode_pulses.c:66:9
   167d0:    b1 e8 00 c0       	if (r1 != 0x0) {			  ## encode_pulses.c:66:9
   167d4:    99 af             		r1 = r1 >>> 0xf			  ## encode_pulses.c:67:30
   167d6:    c1 21             		r1 += 0x1			  ## encode_pulses.c:67:30
   167d8:    ea 86             		r2 = sp + 102			  ## encode_pulses.c:67:30
   167da:    bf ea 5c d4       		call -0x5748
                               	} <ec_enc_icdf : 11096 >			  ## encode_pulses.c:67:6
   167de:    c7 21             	r7 += 0x1			  ## encode_pulses.c:65:47
   167e0:    87 f8 f4 21       	if (r7 != 0x10) goto -0x18 <silk_encode_pulses+0x358 : 167cc >
   167e4:    c4 21             	r4 += 0x1			  ## encode_pulses.c:61:27
   167e6:    0b e1 10 b0       	r11 = r11 + 0x10			  ## encode_pulses.c:71:9
   167ea:    86 ed e0 41       	ifs (r4 < r6) goto -0x40 <silk_encode_pulses+0x33A : 167ae >
   167ee:    02 9a             	sp += 0x68
   167f0:    5f 04             	{pc, r15-r4} = [sp++]			  ## encode_pulses.c:347:1


silk_encode_frame_FIX:
   167f2:    7f 04             	[--sp] = {rets, r15-r4}			  ## encode_frame_FIX.c:872:0
   167f4:    c2 9c             	sp += -0x90			  ## encode_frame_FIX.c:872:0
   167f6:    15 e1 98 04       	r5 = r0 + 0x1498			  ## encode_frame_FIX.c:872:0
   167fa:    09 d6             	r9 = r0  #			  ## encode_frame_FIX.c:872:0
   167fc:    50 69             		 r0 = [r5+0x24] 			  ## encode_frame_FIX.c:895:53
   167fe:    0c 81             	r4 = r0 + 0x1			  ## encode_frame_FIX.c:895:53
   16800:    60 f1 03 00       	r0 = r0 & 0x3  #			  ## encode_frame_FIX.c:895:29
   16804:    d4 69             		 [r5+0x24] = r4			  ## encode_frame_FIX.c:895:53
   16806:    1b e1 94 90       	r11 = r9 + 0x1094			  ## encode_frame_FIX.c:895:53
   1680a:    52 ee b7 00       	b[r11+0x7] = r0			  ## encode_frame_FIX.c:895:27
   1680e:    1a f1 7c 90       	r10 = r9 + 0x107c  #			  ## encode_frame_FIX.c:895:27
   16812:    50 64             		 r0 = [r5+0x10] 			  ## encode_frame_FIX.c:911:79
   16814:    46 22             	r6 = 0x2			  ## encode_frame_FIX.c:911:91
   16816:    f4 f1 01 06       	r0 = r0 / r6 (s)  #			  ## encode_frame_FIX.c:911:91
   1681a:    54 66             		 r4 = [r5+0x18] 			  ## encode_frame_FIX.c:901:39
   1681c:    44 a1             	r4 = r4 << 0x1			  ## encode_frame_FIX.c:901:25
   1681e:    1c e1 c0 9a       	r12 = r9 + 0x1ac0			  ## encode_frame_FIX.c:901:25
   16822:    06 e1 9c c0       	r6 = r12 + 0x9c			  ## encode_frame_FIX.c:901:19
   16826:    b4 f0 60 84       	r8 = r6 + r4  #			  ## encode_frame_FIX.c:901:25
   1682a:    86 2b             		 [sp+44] = r6			  ## encode_frame_FIX.c:901:25
   1682c:    06 e1 a0 80       	r6 = r8 + 0xa0			  ## encode_frame_FIX.c:911:31
   16830:    07 e1 2c a0       	r7 = r10 + 0x2c			  ## encode_frame_FIX.c:911:45
   16834:    10 03             	rep 0x4 r0 {			  ## opus_demo.c:186:2
   16836:    74 05             		r4 = [r7++=0x4] 			  ## opus_demo.c:186:2
   16838:    e4 05             		[r6++=0x4] = r4
                               	}			  ## opus_demo.c:186:2
   1683a:    f0 5c             	if (r0 != 0) goto -0x8 <silk_encode_frame_FIX+0x42 : 16834 >			  ## opus_demo.c:186:2
   1683c:    d0 ec 58 e1       	r14 = [r5+0x18]			  ## encode_frame_FIX.c:925:45
   16840:    2d d6             	r13 = r2  #
   16842:    a3 22             		 [sp+136] = r3
   16844:    e0 f0 04 9d       	r0 = r9 + 0x2100  #
   16848:    81 2c             		 [sp+48] = r1
   1684a:    06 f1 24 00       	r6 = r0 + 0x24  #			  ## encode_frame_FIX.c:880:37
   1684e:    80 2a             		 [sp+40] = r0			  ## encode_frame_FIX.c:880:37
   16850:    07 e1 74 90       	r7 = r9 + 0x74			  ## encode_frame_FIX.c:873:44
   16854:    14 e1 34 99       	r4 = r9 + 0x1934
   16858:    70 16             	r0 = r7			  ## encode_frame_FIX.c:928:3
   1685a:    41 16             	r1 = r4			  ## encode_frame_FIX.c:928:3
   1685c:    62 16             	r2 = r6			  ## encode_frame_FIX.c:928:3
   1685e:    83 16             	r3 = r8			  ## encode_frame_FIX.c:928:3
   16860:    bf ea 7d de       	call -0x4306 <silk_find_pitch_lags_FIX : 1255e >			  ## encode_frame_FIX.c:928:3
   16864:    c0 e1 e1 00       	r0 = r14 << 0x1			  ## encode_frame_FIX.c:925:31
   16868:    62 1c             	r2 = r6 + r0			  ## encode_frame_FIX.c:925:31
   1686a:    70 16             	r0 = r7			  ## encode_frame_FIX.c:933:3
   1686c:    41 16             	r1 = r4			  ## encode_frame_FIX.c:933:3
   1686e:    83 16             	r3 = r8			  ## encode_frame_FIX.c:933:3
   16870:    bf ea 6a e1       	call -0x3d2c <silk_noise_shape_analysis_FIX : 12b48 >			  ## encode_frame_FIX.c:933:3
   16874:    70 16             	r0 = r7			  ## encode_frame_FIX.c:936:3
   16876:    41 16             	r1 = r4			  ## encode_frame_FIX.c:936:3
   16878:    62 16             	r2 = r6			  ## encode_frame_FIX.c:936:3
   1687a:    83 16             	r3 = r8			  ## encode_frame_FIX.c:936:3
   1687c:    bf ea 34 f7       	call -0x1198 <silk_find_pred_coefs_FIX : 156e8 >			  ## encode_frame_FIX.c:936:3
   16880:    70 16             	r0 = r7			  ## encode_frame_FIX.c:940:3
   16882:    41 16             	r1 = r4			  ## encode_frame_FIX.c:940:3
   16884:    bf ea 54 fb       	call -0x958 <silk_process_gains_FIX : 15f30 >			  ## encode_frame_FIX.c:940:3
   16888:    d0 e9 69 60       	d[sp+104] = r7_r6			  ## encode_frame_FIX.c:940:3
   1688c:    70 16             	r0 = r7			  ## encode_frame_FIX.c:945:3
   1688e:    41 16             	r1 = r4			  ## encode_frame_FIX.c:945:3
   16890:    62 16             	r2 = r6			  ## encode_frame_FIX.c:945:3
   16892:    83 16             	r3 = r8			  ## encode_frame_FIX.c:945:3
   16894:    bf ea 86 fc       	call -0x6f4 <silk_prefilter_FIX : 161a4 >			  ## encode_frame_FIX.c:945:3
   16898:    40 e0 bc 35       	r0 = 0x35bc <WOLASynthesisFilter_Float_M256_m4_r1+0xDB8 : 35bc >			  ## encode_frame_FIX.c:883:46
   1689c:    b4 e0 90 20       	r2 = r9 + r0			  ## encode_frame_FIX.c:883:46
   168a0:    d4 e9 81 a0       	[sp+128] = r10
   168a4:    d0 ec a0 a0       	r10 = [r10+0x0]			  ## encode_frame_FIX.c:964:13
   168a8:    40 2a             	r0 = 0xa			  ## opus_demo.c:186:2
   168aa:    d4 e9 71 d0       	[sp+112] = r13			  ## opus_demo.c:186:2
   168ae:    82 30             	[sp+64] = r2
   168b0:    20 03             	rep 0x6 r0 {			  ## opus_demo.c:186:2
   168b2:    d8 ec d4 30       		r3 = [r13++=0x4]			  ## opus_demo.c:186:2
   168b6:    a3 05             		[r2++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   168b8:    f0 5b             	if (r0 != 0) goto -0xa <silk_encode_frame_FIX+0xBE : 168b0 >			  ## opus_demo.c:186:2
   168ba:    40 e0 24 26       	r0 = 0x2624 <WOLAAnalysisFilter_Float_M256_m4_r1+0xE20 : 2624 >			  ## encode_frame_FIX.c:882:46
   168be:    b4 e0 90 10       	r1 = r9 + r0			  ## encode_frame_FIX.c:882:46
   168c2:    02 f1 e4 90       	r2 = r9 + 0xe4  #			  ## encode_frame_FIX.c:969:55
   168c6:    81 2f             		 [sp+60] = r1			  ## encode_frame_FIX.c:969:55
   168c8:    40 f0 e6 03       	r0 = 0x3e6  # <ROM_RAM_SIZE+0x1E6 : 3e6 >			  ## opus_demo.c:186:2
   168cc:    82 2e             		 [sp+56] = r2			  ## opus_demo.c:186:2
   168ce:    10 03             	rep 0x4 r0 {			  ## opus_demo.c:186:2
   168d0:    23 05             		r3 = [r2++=0x4] 			  ## opus_demo.c:186:2
   168d2:    93 05             		[r1++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   168d4:    f0 5c             	if (r0 != 0) goto -0x8 <silk_encode_frame_FIX+0xDC : 168ce >			  ## opus_demo.c:186:2
   168d6:    00 e1 78 40       	r0 = r4 + 0x78			  ## opus_demo.c:186:2
   168da:    00 f1 30 c0       	r0 = r12 + 0x30  #			  ## opus_demo.c:186:2
   168de:    80 39             		 [sp+100] = r0			  ## opus_demo.c:186:2
   168e0:    00 f1 40 c0       	r0 = r12 + 0x40  #			  ## opus_demo.c:186:2
   168e4:    80 38             		 [sp+96] = r0			  ## opus_demo.c:186:2
   168e6:    d4 e9 7d c0       	[sp+124] = r12			  ## opus_demo.c:186:2
   168ea:    10 f1 40 9a       	r0 = r9 + 0x1a40  #			  ## opus_demo.c:186:2
   168ee:    80 37             		 [sp+92] = r0			  ## opus_demo.c:186:2
   168f0:    00 f1 50 40       	r0 = r4 + 0x50  #			  ## opus_demo.c:186:2
   168f4:    80 36             		 [sp+88] = r0			  ## opus_demo.c:186:2
   168f6:    48 f0 ff ff       	r8 = -0x1  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >			  ## opus_demo.c:186:2
   168fa:    80 35             		 [sp+84] = r0
   168fc:    4e f0 00 01       	r14 = 0x100  # <os_code_size+0x56 : 100 >
   16900:    a4 23             		 [sp+140] = r4
   16902:    48 90             	r0 = r4 + 0x10
   16904:    10 f1 4a 93       	r0 = r9 + 0x134a  #
   16908:    80 34             		 [sp+80] = r0
   1690a:    d4 e9 85 90       	[sp+132] = r9
   1690e:    80 33             	[sp+76] = r0
   16910:    d4 e9 45 b0       	[sp+68] = r11
   16914:    50 ee b7 00       	r0 = b[r11+0x7] (u)			  ## encode_frame_FIX.c:970:35
   16918:    80 2d             	[sp+52] = r0			  ## encode_frame_FIX.c:970:35
   1691a:    42 20             	r2 = 0x0			  ## encode_frame_FIX.c:970:35
   1691c:    20 32             	r0 = [sp+200]			  ## encode_frame_FIX.c:970:35
   1691e:    80 29             	[sp+36] = r0			  ## encode_frame_FIX.c:970:35
   16920:    20 31             	r0 = [sp+196]			  ## encode_frame_FIX.c:970:35
   16922:    80 32             	[sp+72] = r0
   16924:    cd ff 00 00 80 ff 	r13 = 0xff800000 <RAM_LIMIT_H+0xFF660000 : ff800000 >
   1692a:    cc ff 00 ff ff 7f 	r12 = 0x7fffff00 <RAM_LIMIT_H+0x7FE5FF00 : 7fffff00 >
   16930:    47 20             	r7 = 0x0
   16932:    40 20             	r0 = 0x0
   16934:    80 3e             	[sp+120] = r0
   16936:    24 94             	goto 0xa8 <silk_encode_frame_FIX+0x1EE : 169e0 >
   16938:    20 22             	r0 = [sp+136]
   1693a:    80 ee 0c 40       	ifs (r4 <= r0) goto 0x18 <silk_encode_frame_FIX+0x164 : 16956 >
   1693e:    4b 16             	r11 = r4
   16940:    87 fd 0b 02       	ifs (r7 < 0x1) goto 0x16 <silk_encode_frame_FIX+0x168 : 1695a >
   16944:    d0 ec 90 00       	r0 = [r9+0x0]			  ## encode_frame_FIX.c:1013:29
   16948:    89 a1             	r1 = r0 >>> 0x1			  ## encode_frame_FIX.c:1013:29
   1694a:    10 18             	r0 += r1			  ## encode_frame_FIX.c:1013:29
   1694c:    d0 ec 91 00       	[r9+0x0] = r0			  ## encode_frame_FIX.c:1013:27
   16950:    4a e0 ff ff       	r10 = -0x1 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >			  ## encode_frame_FIX.c:1013:27
   16954:    04 81             	goto 0x2 <silk_encode_frame_FIX+0x166 : 16958 >
   16956:    8a 16             	r10 = r8
   16958:    2b 16             	r11 = r2
   1695a:    26 22             	r6 = [sp+136]
   1695c:    c1 df             	r1 = r4 - r6  #			  ## encode_frame_FIX.c:1027:37
   1695e:    50 64             		 r0 = [r5+0x10] 			  ## encode_frame_FIX.c:1027:85
   16960:    11 a7             	r1 = r1 << 0x7			  ## encode_frame_FIX.c:1027:37
   16962:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## encode_frame_FIX.c:1027:71
   16966:    00 e1 00 08       	r0 = r0 + 0x800			  ## encode_frame_FIX.c:1027:98
   1696a:    bf ea b6 d5       	call -0x5494 <silk_log2lin : 114da >			  ## encode_frame_FIX.c:1027:23
   1696e:    20 ed 00 0b       	ifs (r0 >= 0x20000) {
   16972:    60 e0 00 0b       		r0 = 0x20000
                               	}			  ## SigProc_FIX.h:354:18
   16976:    14 ee 00 46       	ifs (r4 > r6) {
   1697a:    c1 ff cd 4c 01 00 		r1 = 0x14ccd <silk_NLSF_stabilize+0x150 : 14ccc >			  ## SigProc_FIX.h:368:13
   16980:    34 e4 01 01       		r0 = smax(r0, r1)
                               	}			  ## SigProc_FIX.h:368:13
   16984:    f8 f1 00 fe       	r15_r14 = r0 * r14 (s)  #			  ## encode_frame_FIX.c:1033:19
   16988:    24 23             		 r4 = [sp+140]			  ## encode_frame_FIX.c:1033:19
   1698a:    d0 e1 00 e9       	r15_r14 >>= 0x10			  ## encode_frame_FIX.c:1033:19
   1698e:    e0 15             	r1_r0 = r15_r14
   16990:    d0 e1 00 02       	r1_r0 <<= 0x20
   16994:    d0 e1 00 0e       	r1_r0 >>>= 0x20
   16998:    42 20             	r2 = 0x0
   1699a:    04 8f             	goto 0x1e <silk_encode_frame_FIX+0x1C8 : 169ba >
   1699c:    d2 ec 44 31       	r3 = [r4+0x214]			  ## encode_frame_FIX.c:1037:32
   169a0:    f8 e1 30 90       	r9_r8 = r3 * r0 (s)			  ## encode_frame_FIX.c:1037:32
   169a4:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## encode_frame_FIX.c:1037:32
   169a8:    34 e4 81 3d       	r3 = smax(r8, r13)			  ## encode_frame_FIX.c:1037:32
   169ac:    36 a8             	r6 = r3 << 0x8			  ## encode_frame_FIX.c:1037:32
   169ae:    c3 16             	r3 = r12			  ## encode_frame_FIX.c:1037:32
   169b0:    a8 ed 00 08       	ifs (r8 < 0x800000) {			  ## encode_frame_FIX.c:1037:32
   169b4:    63 16             		r3 = r6
                               	}			  ## encode_frame_FIX.c:1037:32
   169b6:    c3 05             	[r4++=0x4] = r3			  ## encode_frame_FIX.c:1037:30
   169b8:    c2 21             	r2 += 0x1			  ## encode_frame_FIX.c:1036:43
   169ba:    53 63             	r3 = [r5+0xc] 			  ## encode_frame_FIX.c:1036:32
   169bc:    83 ed ee 21       	ifs (r2 < r3) goto -0x24 <silk_encode_frame_FIX+0x1AA : 1699c >			  ## encode_frame_FIX.c:1036:32
   169c0:    52 d6             	r2 = r5  #			  ## encode_frame_FIX.c:1041:32
   169c2:    00 3f             		 r0 = [sp+124]			  ## encode_frame_FIX.c:1041:44
   169c4:    50 ee 08 09       	r0 = b[r0+0x98] (u)			  ## encode_frame_FIX.c:1041:44
   169c8:    5a ee 28 07       	b[++r2=0x78] = r0			  ## encode_frame_FIX.c:1041:32
   169cc:    24 20             	r4 = [sp+128]			  ## encode_frame_FIX.c:1041:32
   169ce:    40 d6             	r0 = r4  #			  ## encode_frame_FIX.c:1042:4
   169d0:    21 23             		 r1 = [sp+140]			  ## encode_frame_FIX.c:1042:4
   169d2:    bf ea 21 fa       	call -0xbbe <silk_gains_quant : 15e18 >			  ## encode_frame_FIX.c:1042:4
   169d6:    a8 d6             	r8 = r10  #			  ## encode_frame_FIX.c:1042:4
   169d8:    40 60             		 r0 = [r4+0x0] 			  ## encode_frame_FIX.c:1046:14
   169da:    c7 21             	r7 += 0x1			  ## encode_frame_FIX.c:973:24
   169dc:    0a 16             	r10 = r0
   169de:    b2 16             	r2 = r11
   169e0:    20 21             	r0 = [sp+132]
   169e2:    19 e1 10 0b       	r9 = r0 + 0x1b10
   169e6:    7a f8 04 fe       	if (r10 == -0x1) goto 0x8 <silk_encode_frame_FIX+0x200 : 169f2 >
   169ea:    88 e8 04 a0       	if (r10 != r8) goto 0x8 <silk_encode_frame_FIX+0x204 : 169f6 >
   169ee:    24 16             	r4 = r2
   169f0:    24 96             	goto 0xac <silk_encode_frame_FIX+0x2AC : 16a9e >
   169f2:    44 20             	r4 = 0x0
   169f4:    24 94             	goto 0xa8 <silk_encode_frame_FIX+0x2AC : 16a9e >
   169f6:    7b d6             	r11 = r7  #
   169f8:    82 3d             		 [sp+116] = r2
   169fa:    04 3c             	r4 = [sp+112]
   169fc:    87 fd 12 02       	ifs (r7 < 0x1) goto 0x24 <silk_encode_frame_FIX+0x232 : 16a24 >
   16a00:    40 d6             	r0 = r4  #			  ## opus_demo.c:186:2
   16a02:    01 30             		 r1 = [sp+64]			  ## opus_demo.c:186:2
   16a04:    42 2a             	r2 = 0xa			  ## opus_demo.c:186:2
   16a06:    12 03             	rep 0x4 r2 {			  ## opus_demo.c:186:2
   16a08:    13 05             		r3 = [r1++=0x4] 			  ## opus_demo.c:186:2
   16a0a:    83 05             		[r0++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   16a0c:    f2 5c             	if (r2 != 0) goto -0x8 <silk_encode_frame_FIX+0x214 : 16a06 >			  ## opus_demo.c:186:2
   16a0e:    d0 e9 38 00       	r1_r0 = d[sp+56]			  ## opus_demo.c:186:2
   16a12:    42 e0 e6 03       	r2 = 0x3e6 <ROM_RAM_SIZE+0x1E6 : 3e6 >			  ## opus_demo.c:186:2
   16a16:    12 03             	rep 0x4 r2 {			  ## opus_demo.c:186:2
   16a18:    13 05             		r3 = [r1++=0x4] 			  ## opus_demo.c:186:2
   16a1a:    83 05             		[r0++=0x4] = r3
                               	}			  ## opus_demo.c:186:2
   16a1c:    f2 5c             	if (r2 != 0) goto -0x8 <silk_encode_frame_FIX+0x224 : 16a16 >			  ## opus_demo.c:186:2
   16a1e:    00 31             	r0 = [sp+68]			  ## encode_frame_FIX.c:983:31
   16a20:    01 2d             	r1 = [sp+52]			  ## encode_frame_FIX.c:983:31
   16a22:    89 47             	b[r0+0x7] = r1			  ## encode_frame_FIX.c:983:31
   16a24:    d0 ec 90 00       	r0 = [r9+0x0]			  ## encode_frame_FIX.c:989:55
   16a28:    22 23             	r2 = [sp+140]			  ## encode_frame_FIX.c:989:55
   16a2a:    d0 ec 28 18       	r1 = [r2+0x88]			  ## encode_frame_FIX.c:989:77
   16a2e:    d0 e9 1d 00       	d[sp+28] = r1_r0			  ## encode_frame_FIX.c:987:5
   16a32:    00 39             	r0 = [sp+100]			  ## encode_frame_FIX.c:987:5
   16a34:    80 26             	[sp+24] = r0			  ## encode_frame_FIX.c:987:5
   16a36:    82 25             	[sp+20] = r2			  ## encode_frame_FIX.c:987:5
   16a38:    00 3f             	r0 = [sp+124]			  ## encode_frame_FIX.c:987:5
   16a3a:    80 24             	[sp+16] = r0			  ## encode_frame_FIX.c:987:5
   16a3c:    00 38             	r0 = [sp+96]			  ## encode_frame_FIX.c:987:5
   16a3e:    80 23             	[sp+12] = r0			  ## encode_frame_FIX.c:987:5
   16a40:    00 37             	r0 = [sp+92]			  ## encode_frame_FIX.c:987:5
   16a42:    80 22             	[sp+8] = r0			  ## encode_frame_FIX.c:987:5
   16a44:    00 36             	r0 = [sp+88]			  ## encode_frame_FIX.c:987:5
   16a46:    80 21             	[sp+4] = r0			  ## encode_frame_FIX.c:987:5
   16a48:    00 35             	r0 = [sp+84]			  ## encode_frame_FIX.c:987:5
   16a4a:    80 20             	[sp] = r0			  ## encode_frame_FIX.c:987:5
   16a4c:    06 3b             	r6 = [sp+108]			  ## encode_frame_FIX.c:987:5
   16a4e:    60 d6             	r0 = r6  #			  ## encode_frame_FIX.c:987:5
   16a50:    01 3a             		 r1 = [sp+104]			  ## encode_frame_FIX.c:987:5
   16a52:    07 33             	r7 = [sp+76]			  ## encode_frame_FIX.c:987:5
   16a54:    72 d6             	r2 = r7  #			  ## encode_frame_FIX.c:987:5
   16a56:    03 34             		 r3 = [sp+80]			  ## encode_frame_FIX.c:987:5
   16a58:    bf ea f4 cc       	call -0x6618 <silk_NSQ_del_dec_c : 10444 >			  ## encode_frame_FIX.c:987:5
   16a5c:    60 16             	r0 = r6			  ## encode_frame_FIX.c:992:5
   16a5e:    41 16             	r1 = r4			  ## encode_frame_FIX.c:992:5
   16a60:    bf ea 84 d3       	call -0x58f8 <silk_encode_indices : 1116c >			  ## encode_frame_FIX.c:992:5
   16a64:    73 d6             	r3 = r7  #			  ## encode_frame_FIX.c:995:5
   16a66:    20 20             		 r0 = [sp+128]			  ## encode_frame_FIX.c:995:5
   16a68:    54 ee 0b 21       	r2 = b[r0+0x1b] (s)			  ## encode_frame_FIX.c:995:61
   16a6c:    54 ee 0a 11       	r1 = b[r0+0x1a] (s)			  ## encode_frame_FIX.c:995:29
   16a70:    50 64             	r0 = [r5+0x10] 			  ## encode_frame_FIX.c:996:38
   16a72:    80 20             	[sp] = r0			  ## encode_frame_FIX.c:995:5
   16a74:    20 21             	r0 = [sp+132]			  ## encode_frame_FIX.c:995:5
   16a76:    bf ea fd fc       	call -0x606 <silk_encode_pulses : 16474 >			  ## encode_frame_FIX.c:995:5
   16a7a:    41 65             	r1 = [r4+0x14] 			  ## encode_frame_FIX.c:995:5
   16a7c:    40 63             	r0 = [r4+0xc] 			  ## encode_frame_FIX.c:995:5
   16a7e:    bf ea 4c d5       	call -0x5568 <ec_tell : 1151a >			  ## encode_frame_FIX.c:998:13
   16a82:    04 d6             	r4 = r0  #			  ## encode_frame_FIX.c:998:13
   16a84:    00 3e             		 r0 = [sp+120]			  ## encode_frame_FIX.c:999:10
   16a86:    c0 21             	r0 += 0x1			  ## encode_frame_FIX.c:999:10
   16a88:    80 3e             	[sp+120] = r0
   16a8a:    00 32             	r0 = [sp+72]
   16a8c:    80 46             	if (r0 != 0) goto 0xc <silk_encode_frame_FIX+0x2A8 : 16a9a >
   16a8e:    b7 d6             	r7 = r11  #
   16a90:    20 22             		 r0 = [sp+136]
   16a92:    02 3d             	r2 = [sp+116]
   16a94:    00 ee 03 40       	ifs (r4 > r0) goto 0x6 <silk_encode_frame_FIX+0x2AC : 16a9e >
   16a98:    14 9f             	goto 0x7e <silk_encode_frame_FIX+0x326 : 16b18 >
   16a9a:    b7 d6             	r7 = r11  #
   16a9c:    02 3d             		 r2 = [sp+116]
   16a9e:    87 f8 4b 0d       	if (r7 != 0x6) goto -0x16a <silk_encode_frame_FIX+0x146 : 16938 >			  ## encode_frame_FIX.c:1006:8
   16aa2:    47 26             	r7 = 0x6
   16aa4:    e0 f1 b4 70       	r0 = r7 * 0xB4  #			  ## encode_frame_FIX.c:1059:35
   16aa8:    03 3c             		 r3 = [sp+112]			  ## encode_frame_FIX.c:1059:35
   16aaa:    02 2a             	r2 = [sp+40]			  ## encode_frame_FIX.c:1059:35
   16aac:    04 3e             	r4 = [sp+120]			  ## encode_frame_FIX.c:1059:35
   16aae:    40 ea 00 20       	[r2+0x0] = 0x0			  ## encode_frame_FIX.c:1058:26
   16ab2:    68 e8 04 20       	[r2+0x4] += r0
   16ab6:    00 29             	r0 = [sp+36]			  ## encode_frame_FIX.c:1062:8
   16ab8:    84 60             	[r0+0x0] = r4			  ## encode_frame_FIX.c:1062:8
   16aba:    68 e8 0c 24       	[r2+0xc] += r4			  ## encode_frame_FIX.c:1063:25
   16abe:    20 64             	r0 = [r2+0x10] 			  ## encode_frame_FIX.c:1064:19
   16ac0:    90 ed 00 04       	ifs (r0 < r4) {			  ## encode_frame_FIX.c:1064:19
   16ac4:    a4 64             		[r2+0x10] = r4
                               	}			  ## encode_frame_FIX.c:1065:27
   16ac6:    50 64             	r0 = [r5+0x10] 			  ## encode_frame_FIX.c:1076:71
   16ac8:    00 a1             	r0 = r0 << 0x1			  ## encode_frame_FIX.c:1076:45
   16aca:    06 3b             	r6 = [sp+108]			  ## encode_frame_FIX.c:1076:45
   16acc:    60 d8             	r0 += r6  #			  ## encode_frame_FIX.c:1076:45
   16ace:    04 2b             		 r4 = [sp+44]			  ## opus_demo.c:186:2
   16ad0:    10 e1 e8 0a       	r0 = r0 + 0x1ae8			  ## encode_frame_FIX.c:1076:45
   16ad4:    71 28             	r1 = 0xc8			  ## opus_demo.c:186:2
   16ad6:    11 03             	rep 0x4 r1 {			  ## opus_demo.c:186:2
   16ad8:    02 05             		r2 = [r0++=0x4] 			  ## opus_demo.c:186:2
   16ada:    c2 05             		[r4++=0x4] = r2
                               	}			  ## opus_demo.c:186:2
   16adc:    f1 5c             	if (r1 != 0) goto -0x8 <silk_encode_frame_FIX+0x2E4 : 16ad6 >			  ## opus_demo.c:186:2
   16ade:    11 f1 34 69       	r1 = r6 + 0x1934  #			  ## encode_frame_FIX.c:1079:31
   16ae2:    50 63             		 r0 = [r5+0xc] 			  ## encode_frame_FIX.c:1079:61
   16ae4:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## encode_frame_FIX.c:1079:31
   16ae8:    41 f0 48 13       	r1 = 0x1348  # <WOLASynthesisFilter_Float_M128_m4_r1+0x344 : 1348 >			  ## encode_frame_FIX.c:1080:14
   16aec:    d0 60             		 [r5+0x0] = r0			  ## encode_frame_FIX.c:1079:29
   16aee:    00 31             	r0 = [sp+68]			  ## encode_frame_FIX.c:1080:51
   16af0:    08 42             	r0 = b[r0+0x2] (u)			  ## encode_frame_FIX.c:1080:51
   16af2:    22 21             	r2 = [sp+132]			  ## encode_frame_FIX.c:1080:51
   16af4:    d8 ee 21 01       	b[r2+r1] = r0			  ## encode_frame_FIX.c:1080:29
   16af8:    40 e0 3b 05       	r0 = 0x53b <alg_code_size+0x6A : 53a >			  ## encode_frame_FIX.c:1083:14
   16afc:    41 20             	r1 = 0x0			  ## encode_frame_FIX.c:1083:14
   16afe:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## encode_frame_FIX.c:1083:38
   16b02:    31 65             	r1 = [r3+0x14] 			  ## encode_frame_FIX.c:1083:38
   16b04:    30 63             	r0 = [r3+0xc] 			  ## encode_frame_FIX.c:1083:38
   16b06:    bf ea 08 d5       	call -0x55f0 <ec_tell : 1151a >			  ## encode_frame_FIX.c:1085:16
   16b0a:    c0 27             	r0 += 0x7			  ## encode_frame_FIX.c:1085:16
   16b0c:    89 a3             	r1 = r0 >>> 0x3			  ## encode_frame_FIX.c:1085:16
   16b0e:    40 20             	r0 = 0x0			  ## encode_frame_FIX.c:1087:2
   16b10:    02 2c             	r2 = [sp+48]			  ## encode_frame_FIX.c:1085:14
   16b12:    a1 60             	[r2+0x0] = r1			  ## encode_frame_FIX.c:1085:14
   16b14:    22 84             	sp += 0x90			  ## encode_frame_FIX.c:1085:14
   16b16:    5f 04             	{pc, r15-r4} = [sp++]			  ## encode_frame_FIX.c:1087:2
   16b18:    07 fe c4 01       	ifs (r7 > 0x0) goto -0x78 <silk_encode_frame_FIX+0x2B2 : 16aa4 >
   16b1c:    02 2a             	r2 = [sp+40]
   16b1e:    20 60             	r0 = [r2+0x0] 			  ## encode_frame_FIX.c:1052:25
   16b20:    09 81             	r1 = r0 + 0x1			  ## encode_frame_FIX.c:1052:25
   16b22:    a1 60             	[r2+0x0] = r1			  ## encode_frame_FIX.c:1052:25
   16b24:    10 2c             	r0 = -0x14			  ## encode_frame_FIX.c:1052:25
   16b26:    03 3c             	r3 = [sp+112]			  ## encode_frame_FIX.c:1052:25
   16b28:    04 3e             	r4 = [sp+120]			  ## encode_frame_FIX.c:1052:25
   16b2a:    01 fe c2 09       	ifs (r1 > 0x4) goto -0x7c <silk_encode_frame_FIX+0x2C0 : 16ab2 >
   16b2e:    e7 83             	goto -0x7a <silk_encode_frame_FIX+0x2C4 : 16ab6 >


silk_Encode:
   16b30:    7c 04             	[--sp] = {rets, r12-r4}			  ## enc_API.c:89:0
   16b32:    e2 9c             	sp += -0x10			  ## enc_API.c:89:0
   16b34:    38 16             	r8 = r3			  ## enc_API.c:89:0
   16b36:    26 16             	r6 = r2			  ## enc_API.c:89:0
   16b38:    19 16             	r9 = r1			  ## enc_API.c:89:0
   16b3a:    07 16             	r7 = r0			  ## enc_API.c:89:0
   16b3c:    80 14             	r1_r0 = 0			  ## enc_API.c:89:0
   16b3e:    d8 e9 0f 00       	h[sp+14] = r0			  ## enc_API.c:101:14
   16b42:    70 20             	r0 = 0xc0			  ## enc_API.c:106:11
   16b44:    de e9 0e 00       	b[sp+14] = r0			  ## enc_API.c:106:11
   16b48:    8a 8e             	r2 = sp + 14			  ## enc_API.c:106:11
   16b4a:    60 16             	r0 = r6			  ## enc_API.c:107:3
   16b4c:    bf ea a3 d2       	call -0x5aba <ec_enc_icdf : 11096 >			  ## enc_API.c:107:3
   16b50:    61 65             	r1 = [r6+0x14] 			  ## enc_API.c:107:3
   16b52:    60 63             	r0 = [r6+0xc] 			  ## enc_API.c:107:3
   16b54:    bf ea e1 d4       	call -0x563e <ec_tell : 1151a >			  ## enc_API.c:108:19
   16b58:    41 e0 08 21       	r1 = 0x2108 <WOLAAnalysisFilter_Float_M256_m4_r1+0x904 : 2108 >			  ## enc_API.c:110:17
   16b5c:    71 18             	r1 += r7			  ## enc_API.c:110:17
   16b5e:    c0 eb 01 10       	[r1+0x0] += 0x1			  ## enc_API.c:110:26
   16b62:    41 e0 48 13       	r1 = 0x1348 <WOLASynthesisFilter_Float_M128_m4_r1+0x344 : 1348 >			  ## enc_API.c:47:15
   16b66:    d8 ee 70 11       	r1 = b[r7+r1] (u)			  ## enc_API.c:47:15
   16b6a:    03 16             	r3 = r0			  ## enc_API.c:108:19
   16b6c:    0c e1 54 70       	r12 = r7 + 0x54
   16b70:    15 e1 8c 74       	r5 = r7 + 0x148c
   16b74:    81 f8 46 04       	if (r1 != 0x2) goto 0x8c <silk_Encode+0xD4 : 16c04 >
   16b78:    50 65             	r0 = [r5+0x14] 			  ## enc_API.c:49:23
   16b7a:    e0 f1 7a 07       	r0 = r0 * 0x3E80000  #			  ## enc_API.c:49:23
   16b7e:    51 63             		 r1 = [r5+0xc] 			  ## enc_API.c:49:23
   16b80:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## enc_API.c:49:23
   16b84:    bf ea ce d4       	call -0x5664 <silk_lin2log : 11524 >			  ## enc_API.c:50:23
   16b88:    41 e0 3d 05       	r1 = 0x53d <alg_code_size+0x6C : 53c >			  ## enc_API.c:53:17
   16b8c:    d8 ec 7a 11       	r1 = [r7+r1<<2]			  ## enc_API.c:53:17
   16b90:    a2 e0 00 10       	r2 = 0x0 - r1			  ## enc_API.c:54:23
   16b94:    22 a2             	r2 = r2 << 0x2			  ## enc_API.c:54:23
   16b96:    f8 f1 10 b2       	r11_r10 = r1 * r2 (s)  #			  ## enc_API.c:54:23
   16b9a:    51 60             		 r1 = [r5+0x0] 			  ## enc_API.c:58:39
   16b9c:    d0 e1 00 a1       	r11_r10 <<= 0x10			  ## enc_API.c:54:23
   16ba0:    d0 e1 00 ae       	r11_r10 >>>= 0x20			  ## enc_API.c:54:23
   16ba4:    32 e1 0c 05       	r2 = r0 + -0xaf4			  ## enc_API.c:54:23
   16ba8:    f8 e1 a0 b2       	r11_r10 = r10 * r2 (s)			  ## enc_API.c:54:23
   16bac:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## enc_API.c:54:23
   16bb0:    30 e1 00 08       	r0 = r0 + -0x800			  ## enc_API.c:50:55
   16bb4:    9a a8             	r2 = r1 >>> 0x8			  ## enc_API.c:58:39
   16bb6:    80 1e             	r0 = r0 - r2			  ## enc_API.c:54:23
   16bb8:    b4 e0 00 2a       	r2 = r0 + r10			  ## enc_API.c:58:37
   16bbc:    e0 e1 03 20       	r0 = r2 * 0x3			  ## enc_API.c:61:20
   16bc0:    32 ed 00 00       	ifs (r2 >= 0x0) {
   16bc4:    20 16             		r0 = r2
                               	}			  ## enc_API.c:59:7
   16bc6:    02 16             	r2 = r0			  ## enc_API.c:65:19
   16bc8:    b0 ee cd 0f       	ifs (r0 <= -0x33) {			  ## enc_API.c:65:19
   16bcc:    42 e0 cd ff       		r2 = -0x33
                               	} <RAM_LIMIT_H+0xFFFFFFFFFFE5FFCC : ffffffffffffffcc >			  ## enc_API.c:65:19
   16bd0:    4c 33             	r4 = 0x33			  ## enc_API.c:65:19
   16bd2:    b0 ee 33 00       	ifs (r0 <= 0x33) {			  ## enc_API.c:65:19
   16bd6:    24 16             		r4 = r2
                               	}			  ## enc_API.c:65:19
   16bd8:    42 f0 9a 19       	r2 = 0x199a  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x196 : 199a >			  ## enc_API.c:68:36
   16bdc:    50 62             		 r0 = [r5+0x8] 			  ## enc_API.c:68:36
   16bde:    40 1b             	r0 *= r4			  ## enc_API.c:68:36
   16be0:    f8 e1 00 b2       	r11_r10 = r0 * r2 (s)			  ## enc_API.c:68:36
   16be4:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## enc_API.c:68:36
   16be8:    b4 e0 a0 01       	r0 = r10 + r1			  ## enc_API.c:68:36
   16bec:    01 16             	r1 = r0			  ## enc_API.c:74:36
   16bee:    a0 ee 3d 0b       	ifs (r0 <= 0x2f400) {			  ## enc_API.c:74:36
   16bf2:    60 e0 3d 1b       		r1 = 0x2F400
                               	}			  ## enc_API.c:74:36
   16bf6:    c2 ff 00 53 03 00 	r2 = 0x35300 <text_size+0x15300 : 35300 >			  ## enc_API.c:74:36
   16bfc:    90 ee 00 02       	ifs (r0 <= r2) {			  ## enc_API.c:74:36
   16c00:    12 16             		r2 = r1
                               	}			  ## enc_API.c:74:36
   16c02:    d2 60             	[r5+0x0] = r2			  ## enc_API.c:74:34
   16c04:    d0 ec 90 10       	r1 = [r9+0x0]			  ## enc_API.c:114:11
   16c08:    48 32             	r0 = 0x32			  ## enc_API.c:114:11
   16c0a:    d0 ec c0 20       	r2 = [r12+0x0]			  ## enc_API.c:120:21
   16c0e:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## enc_API.c:114:11
   16c12:    88 1e             	r0 = r0 - r3			  ## enc_API.c:115:9
   16c14:    e0 e1 32 00       	r0 = r0 * 0x32			  ## enc_API.c:118:20
   16c18:    22 a1             	r2 = r2 << 0x1			  ## enc_API.c:120:21
   16c1a:    82 1e             	r2 = r0 - r2			  ## enc_API.c:120:18
   16c1c:    43 e0 89 13       	r3 = 0x1389 <WOLASynthesisFilter_Float_M128_m4_r1+0x384 : 1388 >			  ## enc_API.c:121:20
   16c20:    00 e1 20 c0       	r0 = r12 + 0x20			  ## enc_API.c:110:7
   16c24:    83 ed 06 10       	ifs (r1 < r3) goto 0xc <silk_Encode+0x104 : 16c34 >			  ## enc_API.c:121:20
   16c28:    14 16             	r4 = r1			  ## enc_API.c:121:20
   16c2a:    01 ee 09 20       	ifs (r2 > r1) goto 0x12 <silk_Encode+0x110 : 16c40 >			  ## enc_API.c:121:20
   16c2e:    41 e0 88 13       	r1 = 0x1388 <WOLASynthesisFilter_Float_M128_m4_r1+0x384 : 1388 >			  ## enc_API.c:121:20
   16c32:    04 84             	goto 0x8 <silk_Encode+0x10C : 16c3c >			  ## enc_API.c:121:20
   16c34:    44 e0 88 13       	r4 = 0x1388 <WOLASynthesisFilter_Float_M128_m4_r1+0x384 : 1388 >
   16c38:    04 ee 02 20       	ifs (r2 > r4) goto 0x4 <silk_Encode+0x110 : 16c40 >
   16c3c:    34 e4 21 41       	r4 = smax(r2, r1)
   16c40:    bf ea ad d4       	call -0x56a6 <silk_encode_do_VAD_FIX : 1159e >			  ## enc_API.c:123:3
   16c44:    40 20             	r0 = 0x0			  ## enc_API.c:127:8
   16c46:    80 22             	[sp+8] = r0			  ## enc_API.c:127:8
   16c48:    84 fd 3f 02       	ifs (r4 < 0x1) goto 0x7e <silk_Encode+0x19A : 16cca >
   16c4c:    c0 ff 80 38 01 00 	r0 = 0x13880 <silk_find_LTP_FIX+0x4DC : 13880 >			  ## control_codec.c:46:19
   16c52:    94 ee 00 40       	ifs (r4 <= r0) {			  ## control_codec.c:46:19
   16c56:    40 e0 88 13       		r0 = 0x1388 <WOLASynthesisFilter_Float_M128_m4_r1+0x384 : 1388 >			  ## control_codec.c:46:19
   16c5a:    34 e4 41 00       		r0 = smax(r4, r0)
                               	}			  ## control_codec.c:46:19
   16c5e:    51 6b             	r1 = [r5+0x2c] 			  ## control_codec.c:47:32
   16c60:    01 e8 27 00       	if (r0 == r1) goto 0x4e <silk_Encode+0x182 : 16cb2 >			  ## control_codec.c:47:32
   16c64:    d0 6b             	[r5+0x2c] = r0			  ## control_codec.c:48:26
   16c66:    41 20             	r1 = 0x0
   16c68:    c2 ff c0 ec 01 00 	r2 = 0x1ecc0 <silk_SNR_table_Q1 : 1ecc0 >
   16c6e:    04 87             	goto 0xe <silk_Encode+0x14E : 16c7e >
   16c70:    03 e1 e0 20       	r3 = r2 + 0xe0			  ## control_codec.c:55:26
   16c74:    d8 ec 3a 31       	r3 = [r3+r1<<2]			  ## control_codec.c:55:26
   16c78:    83 ee 05 00       	ifs (r0 <= r3) goto 0xa <silk_Encode+0x156 : 16c86 >			  ## control_codec.c:55:26
   16c7c:    41 16             	r1 = r4
   16c7e:    1c 81             	r4 = r1 + 0x1			  ## control_codec.c:54:17
   16c80:    84 fe f6 0f       	ifs (r4 <= 0x7) goto -0x14 <silk_Encode+0x140 : 16c70 >
   16c84:    04 96             	goto 0x2c <silk_Encode+0x182 : 16cb2 >
   16c86:    d8 ed 2a 41       	r4 = h[r2+r1<<1] (s)			  ## control_codec.c:58:25
   16c8a:    2d 82             	r5 = r2 + 0x2			  ## control_codec.c:58:68
   16c8c:    d8 ed 5a 51       	r5 = h[r5+r1<<1] (s)			  ## control_codec.c:58:68
   16c90:    02 e1 dc 20       	r2 = r2 + 0xdc			  ## control_codec.c:56:15
   16c94:    d8 ec 2a 11       	r1 = [r2+r1<<2]			  ## control_codec.c:56:15
   16c98:    52 1f             	r2 = r5 - r4			  ## control_codec.c:58:68
   16c9a:    3b 1e             	r3 = r3 - r1			  ## control_codec.c:56:15
   16c9c:    08 1e             	r0 = r0 - r1			  ## control_codec.c:56:15
   16c9e:    00 a6             	r0 = r0 << 0x6			  ## control_codec.c:56:15
   16ca0:    f4 e1 01 03       	r0 = r0 / r3 (s)			  ## control_codec.c:56:15
   16ca4:    20 1b             	r0 *= r2			  ## control_codec.c:58:68
   16ca6:    41 a6             	r1 = r4 << 0x6			  ## control_codec.c:58:25
   16ca8:    10 18             	r0 += r1			  ## control_codec.c:58:66
   16caa:    41 e0 42 05       	r1 = 0x542 <alg_code_size+0x72 : 542 >			  ## control_codec.c:58:13
   16cae:    d8 ec 7b 01       	[r7+r1<<2] = r0			  ## control_codec.c:58:23
   16cb2:    d0 ec 9c 30       	r3 = [r9+0xc]			  ## enc_API.c:131:77
   16cb6:    d0 ec 98 00       	r0 = [r9+0x8]			  ## enc_API.c:131:98
   16cba:    89 88             	r1 = sp + 8			  ## enc_API.c:131:98
   16cbc:    d0 e9 01 00       	d[sp] = r1_r0			  ## enc_API.c:131:16
   16cc0:    70 16             	r0 = r7			  ## enc_API.c:131:16
   16cc2:    81 16             	r1 = r8			  ## enc_API.c:131:16
   16cc4:    62 16             	r2 = r6			  ## enc_API.c:131:16
   16cc6:    bf ea 94 fd       	call -0x4d8 <silk_encode_frame_FIX : 167f2 >			  ## enc_API.c:131:16
   16cca:    d0 ec 80 00       	r0 = [r8+0x0]			  ## enc_API.c:137:8
   16cce:    80 fd 3f 02       	ifs (r0 < 0x1) goto 0x7e <silk_Encode+0x220 : 16d50 >			  ## enc_API.c:137:8
   16cd2:    40 f0 49 13       	r0 = 0x1349  # <WOLASynthesisFilter_Float_M128_m4_r1+0x344 : 1348 >			  ## enc_API.c:138:32
   16cd6:    61 64             		 r1 = [r6+0x10] 			  ## entenc.c:223:12
   16cd8:    d8 ee 72 00       	r0 = b[r7+r0] (s)			  ## enc_API.c:138:13
   16cdc:    01 48             	if (r1 == 0) goto 0x10 <silk_Encode+0x1BE : 16cee >			  ## entenc.c:223:5
   16cde:    61 60             	r1 = [r6+0x0] 			  ## entenc.c:225:41
   16ce0:    1a 40             	r2 = b[r1+0x0] (u)			  ## entenc.c:225:34
   16ce2:    72 e1 c0 20       	r2 = r2 & 0xFFFFFF3F			  ## entenc.c:225:47
   16ce6:    a2 e1 e4 03       	r2 <= insert(r0, p:0x7, l:0x19)			  ## entenc.c:225:54
   16cea:    9a 40             	b[r1+0x0] = r2			  ## entenc.c:225:16
   16cec:    04 96             	goto 0x2c <silk_Encode+0x1EA : 16d1a >			  ## entenc.c:225:16
   16cee:    61 68             	r1 = [r6+0x20] 			  ## entenc.c:227:17
   16cf0:    81 fd 06 00       	ifs (r1 < 0x0) goto 0xc <silk_Encode+0x1D0 : 16d00 >			  ## entenc.c:227:10
   16cf4:    00 a7             	r0 = r0 << 0x7			  ## enc_API.c:139:13
   16cf6:    71 e1 c0 10       	r1 = r1 & 0xFFFFFF3F			  ## entenc.c:229:25
   16cfa:    10 19             	r0 |= r1			  ## entenc.c:229:32
   16cfc:    e0 68             	[r6+0x20] = r0			  ## entenc.c:229:13
   16cfe:    04 8d             	goto 0x1a <silk_Encode+0x1EA : 16d1a >			  ## entenc.c:229:13
   16d00:    61 65             	r1 = [r6+0x14] 			  ## entenc.c:231:17
   16d02:    29 ff 00 15 03 00 	if (r1 <= 0x20000000) goto 0x6 <silk_Encode+0x1DE : 16d0e >			  ## entenc.c:231:17
   16d08:    49 ea ff 63       	[r6+0x24] = 0xFFFFFFFF			  ## entenc.c:237:19
   16d0c:    04 86             	goto 0xc <silk_Encode+0x1EA : 16d1a >			  ## entenc.c:237:19
   16d0e:    61 66             	r1 = [r6+0x18] 			  ## entenc.c:233:22
   16d10:    00 be             	r0 = r0 << 0x1e			  ## entenc.c:234:21
   16d12:    71 e1 c0 14       	r1 = r1 & 0x9FFFFFFF			  ## entenc.c:233:25
   16d16:    10 19             	r0 |= r1			  ## entenc.c:233:62
   16d18:    e0 66             	[r6+0x18] = r0			  ## entenc.c:233:13
   16d1a:    d0 ec 90 00       	r0 = [r9+0x0]			  ## enc_API.c:143:26
   16d1e:    49 32             	r1 = 0x32			  ## enc_API.c:143:26
   16d20:    f4 f1 01 01       	r0 = r0 / r1 (s)  #			  ## enc_API.c:143:26
   16d24:    02 22             		 r2 = [sp+8]			  ## enc_API.c:142:41
   16d26:    d0 ec 80 30       	r3 = [r8+0x0]			  ## enc_API.c:142:27
   16d2a:    d0 ec c0 10       	r1 = [r12+0x0]			  ## enc_API.c:142:23
   16d2e:    22 a2             	r2 = r2 << 0x2			  ## enc_API.c:142:52
   16d30:    32 18             	r2 += r3			  ## enc_API.c:142:52
   16d32:    22 a3             	r2 = r2 << 0x3			  ## enc_API.c:142:38
   16d34:    21 18             	r1 += r2			  ## enc_API.c:142:57
   16d36:    f9 20             	r1 += -0x20			  ## enc_API.c:142:23
   16d38:    10 1e             	r0 = r1 - r0			  ## enc_API.c:143:23
   16d3a:    01 16             	r1 = r0			  ## enc_API.c:144:25
   16d3c:    b0 ee 00 00       	ifs (r0 <= 0x0) {			  ## enc_API.c:144:25
   16d40:    41 20             		r1 = 0x0
                               	}			  ## enc_API.c:144:25
   16d42:    42 e0 10 27       	r2 = 0x2710 <WOLAAnalysisFilter_Float_M256_m4_r1+0xF0C : 2710 >			  ## enc_API.c:144:25
   16d46:    90 ee 00 02       	ifs (r0 <= r2) {			  ## enc_API.c:144:25
   16d4a:    12 16             		r2 = r1
                               	}			  ## enc_API.c:144:25
   16d4c:    d0 ec c1 20       	[r12+0x0] = r2			  ## enc_API.c:144:23
   16d50:    40 20             	r0 = 0x0			  ## enc_API.c:149:2
   16d52:    02 84             	sp += 0x10			  ## enc_API.c:149:2
   16d54:    5c 04             	{pc, r12-r4} = [sp++]			  ## enc_API.c:149:2


gen_toc:
   16d56:    7b 30             	r3 = 0xf0			  ## opus_encoder.c:98:0
   16d58:    04 82             	goto 0x4 <gen_toc+0x8 : 16d5e >			  ## opus_encoder.c:98:0
   16d5a:    c3 28             	r3 += 0x8			  ## opus_encoder.c:103:2
   16d5c:    11 a1             	r1 = r1 << 0x1			  ## opus_encoder.c:105:13
   16d5e:    b1 fe fc 1f       	ifs (r1 <= 0x18f) goto -0x8 <gen_toc+0x4 : 16d5a >
   16d62:    00 ff ea 03 0a 00 	if (r0 == 0x3ea) goto 0x14 <gen_toc+0x26 : 16d7c >			  ## opus_encoder.c:108:6
   16d68:    30 e8 e8 b3       	if (r0 == 0x3e8) {
   16d6c:    20 a5             		r0 = r2 << 0x5			  ## opus_encoder.c:110:49
   16d6e:    d8 20             		r0 += 0x60			  ## opus_encoder.c:110:49
   16d70:    30 19             		r0 |= r3
                               	} else {			  ## opus_encoder.c:111:7
   16d72:    20 a4             		r0 = r2 << 0x4			  ## opus_encoder.c:125:7
   16d74:    30 19             		r0 |= r3			  ## opus_encoder.c:126:7
   16d76:    40 e1 60 00       		r0 = r0 | 0x60
                               	}			  ## opus_encoder.c:126:7
   16d7a:    04 8c             	goto 0x18 <gen_toc+0x3E : 16d94 >			  ## opus_encoder.c:126:7
   16d7c:    30 e1 b2 2b       	r0 = r2 + -0x44e			  ## opus_encoder.c:115:23
   16d80:    b0 ee 00 00       	ifs (r0 <= 0x0) {
   16d84:    40 20             		r0 = 0x0
                               	}			  ## opus_encoder.c:116:7
   16d86:    00 a5             	r0 = r0 << 0x5			  ## opus_encoder.c:119:7
   16d88:    31 e1 10 3f       	r1 = r3 + -0xf0			  ## opus_encoder.c:120:7
   16d8c:    10 19             	r0 |= r1			  ## opus_encoder.c:120:7
   16d8e:    41 e0 80 ff       	r1 = -0x80 <RAM_LIMIT_H+0xFFFFFFFFFFE5FF80 : ffffffffffffff80 >			  ## opus_encoder.c:120:7
   16d92:    10 19             	r0 |= r1			  ## opus_encoder.c:120:7
   16d94:    00 17             	r0 = r0.b0 (u)			  ## opus_encoder.c:129:2
   16d96:    80 00             	rts			  ## opus_encoder.c:129:2


opus_packet_get_samples_per_frame:
   16d98:    02 17             	r2 = r0.b0 (u)			  ## opus.c:245:0
   16d9a:    50 e8 0b 3a       	if ((r0 & 0x80) != 0) goto 0x16 <opus_packet_get_samples_per_frame+0x1C : 16db4 >			  ## opus.c:247:6
   16d9e:    70 e1 9f 20       	r0 = r2 & 0xFFFFFF60			  ## opus.c:251:21
   16da2:    80 f8 0e c0       	if (r0 != 0x60) goto 0x1c <opus_packet_get_samples_per_frame+0x2A : 16dc2 >			  ## opus.c:251:21
   16da6:    48 32             	r0 = 0x32			  ## opus.c:253:15
   16da8:    22 ea 08 00       	if ((r2 & 0x8) == 0) {			  ## opus.c:253:15
   16dac:    58 24             		r0 = 0x64
                               	}			  ## opus.c:253:15
   16dae:    f4 e1 11 00       	r0 = r1 / r0 (s)			  ## opus.c:253:15
   16db2:    80 00             	rts			  ## opus.c:261:2
   16db4:    b0 e1 88 21       	r0 = uextra(r2, p:0x3, l:0x2)			  ## opus.c:249:28
   16db8:    c8 e1 10 00       	r0 = r1 << r0			  ## opus.c:250:18
   16dbc:    41 e0 90 01       	r1 = 0x190 <var_bss_size+0x84 : 190 >			  ## opus.c:250:30
   16dc0:    04 8b             	goto 0x16 <opus_packet_get_samples_per_frame+0x40 : 16dd8 >			  ## opus.c:250:30
   16dc2:    b0 e1 88 21       	r0 = uextra(r2, p:0x3, l:0x2)			  ## opus.c:255:28
   16dc6:    b0 e8 03 60       	if (r0 != 0x3) {
   16dca:    c8 e1 10 00       		r0 = r1 << r0			  ## opus.c:259:19
   16dce:    59 24             		r1 = 0x64
                               	} else {			  ## opus.c:259:31
   16dd0:    e0 e1 3c 10       		r0 = r1 * 0x3C			  ## opus.c:257:18
   16dd4:    41 e0 e8 03       		r1 = 0x3e8
                               	} <ROM_RAM_SIZE+0x1E8 : 3e8 >			  ## opus.c:257:21
   16dd8:    f4 e1 01 01       	r0 = r0 / r1 (s)
   16ddc:    80 00             	rts			  ## opus.c:261:2


parse_size:
   16dde:    74 04             	[--sp] = {rets, r4}			  ## opus.c:225:0
   16de0:    03 16             	r3 = r0			  ## opus.c:225:0
   16de2:    10 3f             	r0 = -0x1			  ## opus.c:225:0
   16de4:    81 fd 05 02       	ifs (r1 < 0x1) goto 0xa <parse_size+0x14 : 16df2 >			  ## opus.c:225:0
   16de8:    3c 40             	r4 = b[r3+0x0] (u)			  ## opus.c:230:13
   16dea:    14 f9 06 f8       	if (r4 >= 0xfc) goto 0xc <parse_size+0x1C : 16dfa >			  ## opus.c:230:13
   16dee:    40 21             	r0 = 0x1
   16df0:    04 8c             	goto 0x18 <parse_size+0x2C : 16e0a >
   16df2:    c4 ff fe ff 00 00 	r4 = 0xfffe <.GJTIE291_0_0_+0x734 : fffe >
   16df8:    04 88             	goto 0x10 <parse_size+0x2C : 16e0a >
   16dfa:    31 ed 02 d0       	ifs (r1 >= 0x2) {
   16dfe:    38 41             		r0 = b[r3+0x1] (u)			  ## opus.c:239:13
   16e00:    00 a2             		r0 = r0 << 0x2			  ## opus.c:239:12
   16e02:    04 18             		r4 += r0			  ## opus.c:239:21
   16e04:    40 22             		r0 = 0x2
                               	} else {			  ## opus.c:239:21
   16e06:    e4 e0 80 0b       		r4 = r0 + 0x10000
                               	}			  ## opus.c:239:21
   16e0a:    ac 60             	h[r2+0x0] = r4
   16e0c:    54 04             	{pc, r4} = [sp++]			  ## opus.c:242:1


encode_size:
   16e0e:    b0 ee fb 80       	ifs (r0 <= 0xfb) {			  ## repacketizer.c:66:0
   16e12:    98 40             		b[r1+0x0] = r0			  ## repacketizer.c:69:11
   16e14:    40 21             		r0 = 0x1			  ## repacketizer.c:69:11
   16e16:    80 00             		rts
                               	}			  ## repacketizer.c:76:1
   16e18:    12 3c             	r2 = -0x4			  ## repacketizer.c:72:13
   16e1a:    02 19             	r2 |= r0			  ## repacketizer.c:72:13
   16e1c:    22 d7             	r2 = r2.b0 (u)  #			  ## repacketizer.c:73:19
   16e1e:    9a 40             		 b[r1+0x0] = r2			  ## repacketizer.c:72:11
   16e20:    80 1e             	r0 = r0 - r2			  ## repacketizer.c:73:18
   16e22:    80 a2             	r0 = r0 >> 0x2			  ## repacketizer.c:73:32
   16e24:    98 41             	b[r1+0x1] = r0			  ## repacketizer.c:73:11
   16e26:    40 22             	r0 = 0x2			  ## repacketizer.c:73:11
   16e28:    80 00             	rts			  ## repacketizer.c:76:1


opus_encode:
   16e2a:    7f 04             	[--sp] = {rets, r15-r4}			  ## opus_encoder.c:247:0
   16e2c:    e2 85             	sp += -0x6c			  ## opus_encoder.c:247:0
   16e2e:    0c 16             	r12 = r0			  ## opus_encoder.c:247:0
   16e30:    0a e1 38 00       	r10 = r0 + 0x38			  ## opus_encoder.c:247:0
   16e34:    d0 ec a8 61       	r6 = [r10+0x18]			  ## opus_encoder.c:257:23
   16e38:    45 20             	r5 = 0x0
   16e3a:    d0 ec ad 52       	[r10+0x2c] = r5			  ## opus_encoder.c:258:17
   16e3e:    d0 ec a4 01       	r0 = [r10+0x14]			  ## opus_encoder.c:259:24
   16e42:    d0 ec a1 01       	[r10+0x10] = r0			  ## opus_encoder.c:259:18
   16e46:    d0 ec cc 33       	r3 = [r12+0x3c]			  ## opus_encoder.c:261:11
   16e4a:    d0 ec ac 80       	r8 = [r10+0xc]			  ## opus_encoder.c:261:11
   16e4e:    1b 16             	r11 = r1			  ## opus_encoder.c:261:11
   16e50:    83 5c             	if (r3 != 0) goto 0x38 <opus_encode+0x60 : 16e8a >
   16e52:    e0 e1 03 00       	r0 = r0 * 0x3			  ## opus_encoder.c:267:14
   16e56:    41 28             	r1 = 0x8			  ## opus_encoder.c:267:14
   16e58:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## opus_encoder.c:267:14
   16e5c:    e1 e1 03 80       	r1 = r8 * 0x3			  ## opus_encoder.c:265:23
   16e60:    43 e0 80 02       	r3 = 0x280 <ROM_RAM_SIZE+0x80 : 280 >			  ## opus_encoder.c:267:14
   16e64:    f4 e1 11 33       	r3 = r1 / r3 (s)			  ## opus_encoder.c:267:14
   16e68:    30 18             	r0 += r3			  ## opus_encoder.c:267:14
   16e6a:    43 e0 40 01       	r3 = 0x140 <var_bss_size+0x34 : 140 >			  ## opus_encoder.c:265:32
   16e6e:    f4 e1 11 13       	r1 = r1 / r3 (s)			  ## opus_encoder.c:265:32
   16e72:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## opus_encoder.c:267:14
   16e76:    35 e4 01 66       	r6 = smin(r0, r6)			  ## opus_encoder.c:267:14
   16e7a:    f0 e1 10 06       	r0 = r1 * r6			  ## opus_encoder.c:268:56
   16e7e:    00 a3             	r0 = r0 << 0x3			  ## opus_encoder.c:268:56
   16e80:    41 23             	r1 = 0x3			  ## opus_encoder.c:265:23
   16e82:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## opus_encoder.c:268:60
   16e86:    d0 ec a1 01       	[r10+0x10] = r0			  ## opus_encoder.c:268:19
   16e8a:    43 f0 d7 03       	r3 = 0x3d7  # <ROM_RAM_SIZE+0x1D6 : 3d6 >			  ## opus_encoder.c:276:42
   16e8e:    82 24             		 [sp+16] = r2			  ## opus_encoder.c:276:42
   16e90:    28 81             	r0 = r2 + 0x1			  ## opus_encoder.c:272:7
   16e92:    80 20             	[sp] = r0
   16e94:    d0 ec c1 01       	[r12+0x10] = r0			  ## entenc.c:188:12
   16e98:    d0 ec c9 51       	[r12+0x18] = r5			  ## entenc.c:189:17
   16e9c:    47 ea 21 c0       	[r12+0x1c] = 0x21			  ## entenc.c:193:20
   16ea0:    d0 ec c1 52       	[r12+0x20] = r5			  ## entenc.c:194:13
   16ea4:    49 ea 00 c4       	[r12+0x24] = 0x80000000			  ## entenc.c:195:12
   16ea8:    4c ea ff c3       	[r12+0x30] = 0xFFFFFFFF			  ## entenc.c:196:12
   16eac:    d0 ec c9 52       	[r12+0x28] = r5			  ## entenc.c:197:12
   16eb0:    d0 ec cd 52       	[r12+0x2c] = r5			  ## entenc.c:198:12
   16eb4:    30 f1 ff 6f       	r0 = r6 + -0x1  #			  ## opus_encoder.c:273:45
   16eb8:    86 25             		 [sp+20] = r6			  ## opus_encoder.c:273:45
   16eba:    80 22             	[sp+8] = r0
   16ebc:    d0 ec c5 01       	[r12+0x14] = r0			  ## entenc.c:199:16
   16ec0:    d0 ec c5 53       	[r12+0x34] = r5			  ## entenc.c:200:14
   16ec4:    10 e1 8c c4       	r0 = r12 + 0x148c			  ## entenc.c:200:14
   16ec8:    01 61             	r1 = [r0+0x4] 			  ## opus_encoder.c:276:42
   16eca:    02 60             	r2 = [r0+0x0] 			  ## opus_encoder.c:275:34
   16ecc:    2a 1e             	r2 = r2 - r1			  ## opus_encoder.c:276:42
   16ece:    f8 e1 20 33       	r3_r2 = r2 * r3 (s)			  ## opus_encoder.c:276:42
   16ed2:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## opus_encoder.c:276:42
   16ed6:    21 18             	r1 += r2			  ## opus_encoder.c:276:42
   16ed8:    81 61             	[r0+0x4] = r1			  ## opus_encoder.c:276:40
   16eda:    98 a8             	r0 = r1 >>> 0x8			  ## opus_encoder.c:280:27
   16edc:    bf ea fd d2       	call -0x5a06 <silk_log2lin : 114da >			  ## opus_encoder.c:280:14
   16ee0:    41 e0 a7 09       	r1 = 0x9a7 <WOLAAnalysisFilter_Float_M128_m4_r1+0x1A2 : 9a6 >			  ## opus_encoder.c:225:11
   16ee4:    10 1b             	r0 *= r1			  ## opus_encoder.c:225:11
   16ee6:    41 e0 e8 03       	r1 = 0x3e8 <ROM_RAM_SIZE+0x1E8 : 3e8 >			  ## opus_encoder.c:225:11
   16eea:    f4 e1 81 11       	r1 = r8 / r1 (s)			  ## opus_encoder.c:225:11
   16eee:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## opus_encoder.c:225:11
   16ef2:    f8 e1 00 30       	r3_r2 = r0 * r0 (s)			  ## opus_encoder.c:239:13
   16ef6:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## opus_encoder.c:239:13
   16efa:    f1 e0 00 28       	r1 = r2 - 0x800000			  ## opus_encoder.c:239:13
   16efe:    42 e0 29 fe       	r2 = -0x1d7 <RAM_LIMIT_H+0xFFFFFFFFFFE5FE28 : fffffffffffffe28 >			  ## opus_encoder.c:229:34
   16f02:    02 1b             	r2 *= r0			  ## opus_encoder.c:229:34
   16f04:    e4 e0 80 25       	r4 = r2 + 0x10000000			  ## opus_encoder.c:229:34
   16f08:    c8 a6             	r0 = r4 >>> 0x6			  ## opus_encoder.c:238:10
   16f0a:    f8 e1 10 90       	r9_r8 = r1 * r0 (s)			  ## opus_encoder.c:239:13
   16f0e:    d0 e1 00 89       	r9_r8 >>= 0x10			  ## opus_encoder.c:239:13
   16f12:    a6 e0 00 80       	r6 = 0x0 - r8			  ## opus_encoder.c:185:22
   16f16:    ef bf             	r7 = r6 >>> 0x1f
   16f18:    d0 e9 29 60       	d[sp+40] = r7_r6
   16f1c:    f8 e1 00 10       	r1_r0 = r0 * r0 (s)			  ## opus_encoder.c:240:13
   16f20:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## opus_encoder.c:240:13
   16f24:    a0 e0 00 00       	r0 = 0x0 - r0			  ## opus_encoder.c:186:22
   16f28:    89 bf             	r1 = r0 >>> 0x1f
   16f2a:    d0 e9 21 00       	d[sp+32] = r1_r0
   16f2e:    cd bf             	r5 = r4 >>> 0x1f
   16f30:    d0 e9 31 40       	d[sp+48] = r5_r4
   16f34:    a0 e0 70 24       	r0 = 0xF0000000 - r2			  ## opus_encoder.c:234:13
   16f38:    00 a1             	r0 = r0 << 0x1			  ## opus_encoder.c:234:13
   16f3a:    89 bf             	r1 = r0 >>> 0x1f
   16f3c:    d0 e9 19 00       	d[sp+24] = r1_r0
   16f40:    00 e1 10 c0       	r0 = r12 + 0x10			  ## opus_encoder.c:273:19
   16f44:    45 f0 54 08       	r5 = 0x854  # <WOLAAnalysisFilter_Float_M128_m4_r1+0x50 : 854 >
   16f48:    80 21             		 [sp+4] = r0
   16f4a:    41 20             	r1 = 0x0
   16f4c:    d0 ec a8 e2       	r14 = [r10+0x28]			  ## opus_encoder.c:183:29
   16f50:    d4 e9 0d a0       	[sp+12] = r10
   16f54:    d0 ec a4 02       	r0 = [r10+0x24]			  ## opus_encoder.c:183:18
   16f58:    d0 e9 49 00       	d[sp+72] = r1_r0
   16f5c:    d4 e9 3d c0       	[sp+60] = r12
   16f60:    24 88             	goto 0x90 <opus_encode+0x1C8 : 16ff2 >
   16f62:    d4 ed b2 40       	r4 = h[r11++=0x2] (s)			  ## opus_encoder.c:200:20
   16f66:    d4 e9 45 b0       	[sp+68] = r11			  ## opus_encoder.c:200:20
   16f6a:    12 e1 6c 06       	r2 = r0 + 0x166c			  ## opus_encoder.c:200:20
   16f6e:    43 20             	r3 = 0x0			  ## opus_encoder.c:200:20
   16f70:    d0 e9 30 60       	r7_r6 = d[sp+48]			  ## opus_encoder.c:200:20
   16f74:    fc e1 40 36       	r3_r2 += r4 * r6 (s)			  ## opus_encoder.c:200:20
   16f78:    d0 e1 0e 28       	r3_r2 >>= 0xe			  ## opus_encoder.c:200:20
   16f7c:    d0 e9 48 80       	r9_r8 = d[sp+72]			  ## opus_encoder.c:200:20
   16f80:    b4 e0 20 a8       	r10 = r2 + r8			  ## opus_encoder.c:200:18
   16f84:    b8 e0 30 b9       	r11 = r3 + r9 + c			  ## opus_encoder.c:200:18
   16f88:    40 e0 ff 3f       	r0 = 0x3fff <STFT_Win_FixHalf_M256_D80+0x1FA : 3ffe >			  ## opus_encoder.c:210:8
   16f8c:    a0 18             	r0 += r10			  ## opus_encoder.c:210:8
   16f8e:    60 e0 00 c5       	r12 = 0x20000000			  ## opus_encoder.c:202:13
   16f92:    88 ae             	r0 = r0 >>> 0xe			  ## opus_encoder.c:210:8
   16f94:    c5 d4             	r13 = 0  #			  ## opus_encoder.c:202:13
   16f96:    80 30             		 [sp+64] = r0			  ## opus_encoder.c:202:13
   16f98:    c2 16             	r2 = r12			  ## opus_encoder.c:202:13
   16f9a:    43 20             	r3 = 0x0			  ## opus_encoder.c:202:13
   16f9c:    d0 e9 28 00       	r1_r0 = d[sp+40]			  ## opus_encoder.c:202:13
   16fa0:    fc e1 a0 30       	r3_r2 += r10 * r0 (s)			  ## opus_encoder.c:202:13
   16fa4:    d0 e1 0e 29       	r3_r2 >>= 0x1e			  ## opus_encoder.c:202:13
   16fa8:    9f 16             	r15 = r9			  ## opus_encoder.c:202:8
   16faa:    b4 e0 20 0e       	r0 = r2 + r14			  ## opus_encoder.c:202:11
   16fae:    b8 e0 30 19       	r1 = r3 + r9 + c			  ## opus_encoder.c:202:11
   16fb2:    d0 e9 18 20       	r3_r2 = d[sp+24]			  ## opus_encoder.c:203:8
   16fb6:    f8 e1 40 32       	r3_r2 = r4 * r2 (s)			  ## opus_encoder.c:203:8
   16fba:    d0 e1 00 29       	r3_r2 >>= 0x10			  ## opus_encoder.c:203:8
   16fbe:    b4 e0 00 82       	r8 = r0 + r2			  ## opus_encoder.c:203:8
   16fc2:    d0 e9 49 80       	d[sp+72] = r9_r8
   16fc6:    d0 e9 20 00       	r1_r0 = d[sp+32]			  ## opus_encoder.c:205:8
   16fca:    fc e1 a0 d0       	r13_r12 += r10 * r0 (s)			  ## opus_encoder.c:205:8
   16fce:    d4 e9 44 b0       	r11 = [sp+68]			  ## opus_encoder.c:205:8
   16fd2:    d0 e1 0e c9       	r13_r12 >>= 0x1e			  ## opus_encoder.c:205:8
   16fd6:    f8 e1 40 16       	r1_r0 = r4 * r6 (s)			  ## opus_encoder.c:200:20
   16fda:    d0 e1 00 09       	r1_r0 >>= 0x10			  ## opus_encoder.c:206:8
   16fde:    b4 f0 c0 e0       	r14 = r12 + r0  #			  ## opus_encoder.c:206:8
   16fe2:    01 30             		 r1 = [sp+64]			  ## opus_encoder.c:211:3
   16fe4:    d4 e9 3c c0       	r12 = [sp+60]
   16fe8:    78 e0 01 01       	r0 = sat16(r1) (s)			  ## opus_encoder.c:211:3
   16fec:    d8 ed c9 05       	h[r12+r5<<1] = r0			  ## opus_encoder.c:212:10
   16ff0:    c5 21             	r5 += 0x1			  ## opus_encoder.c:196:2
   16ff2:    40 e0 94 09       	r0 = 0x994 <WOLAAnalysisFilter_Float_M128_m4_r1+0x190 : 994 >			  ## opus_encoder.c:196:2
   16ff6:    80 e8 b4 51       	if (r5 != r0) goto -0x98 <opus_encode+0x138 : 16f62 >			  ## opus_encoder.c:196:2
   16ffa:    41 f0 40 01       	r1 = 0x140  # <var_bss_size+0x34 : 140 >			  ## opus_encoder.c:285:17
   16ffe:    00 23             		 r0 = [sp+12]			  ## opus_encoder.c:285:17
   17000:    d0 e9 48 20       	r3_r2 = d[sp+72]			  ## opus_encoder.c:214:7
   17004:    07 d6             	r7 = r0  #			  ## opus_encoder.c:214:7
   17006:    82 69             		 [r0+0x24] = r2			  ## opus_encoder.c:214:7
   17008:    d0 ec 09 e2       	[r0+0x28] = r14			  ## opus_encoder.c:215:7
   1700c:    70 63             	r0 = [r7+0xc] 			  ## opus_encoder.c:285:17
   1700e:    f4 f1 01 31       	r3 = r0 / r1 (s)  #			  ## opus_encoder.c:286:53
   17012:    72 64             		 r2 = [r7+0x10] 			  ## opus_encoder.c:285:17
   17014:    01 a3             	r1 = r0 << 0x3			  ## opus_encoder.c:285:17
   17016:    e0 e1 a0 2f       	r0 = r2 * 0x140			  ## opus_encoder.c:285:17
   1701a:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## opus_encoder.c:285:17
   1701e:    d4 e9 14 80       	r8 = [sp+20]			  ## opus_encoder.c:285:17
   17022:    35 e4 81 00       	r0 = smin(r8, r0)			  ## opus_encoder.c:285:17
   17026:    00 a3             	r0 = r0 << 0x3			  ## opus_encoder.c:286:28
   17028:    f8 38             	r0 += -0x8			  ## opus_encoder.c:286:28
   1702a:    30 1b             	r0 *= r3			  ## opus_encoder.c:286:43
   1702c:    d0 ec c1 00       	[r12+0x0] = r0			  ## opus_encoder.c:286:24
   17030:    02 22             	r2 = [sp+8]			  ## opus_encoder.c:286:24
   17032:    c0 f1 23 b0       	r11 = r2 << 0x3  #			  ## opus_encoder.c:288:33
   17036:    82 34             		 [sp+80] = r2			  ## opus_encoder.c:287:9
   17038:    d0 ec cd b0       	[r12+0xc] = r11			  ## opus_encoder.c:288:24
   1703c:    d0 ec c8 20       	r2 = [r12+0x8]			  ## opus_encoder.c:289:20
   17040:    02 53             	if (r2 == 0) goto 0x26 <opus_encode+0x23E : 17068 >			  ## opus_encoder.c:289:20
   17042:    e2 e1 a0 0f       	r2 = r0 * 0x140			  ## opus_encoder.c:291:50
   17046:    f4 e1 21 11       	r1 = r2 / r1 (s)			  ## opus_encoder.c:291:63
   1704a:    11 a3             	r1 = r1 << 0x3			  ## opus_encoder.c:291:79
   1704c:    30 e1 30 08       	r0 = r0 + -0x7d0			  ## opus_encoder.c:293:27
   17050:    d0 ec cd 10       	[r12+0xc] = r1			  ## opus_encoder.c:291:25
   17054:    d4 e9 10 a0       	r10 = [sp+16]			  ## opus_encoder.c:291:25
   17058:    d4 e9 04 e0       	r14 = [sp+4]			  ## opus_encoder.c:291:25
   1705c:    b0 ee 01 00       	ifs (r0 <= 0x1) {			  ## opus_encoder.c:291:25
   17060:    40 21             		r0 = 0x1
                               	}			  ## opus_encoder.c:293:27
   17062:    d0 ec c1 00       	[r12+0x0] = r0			  ## opus_encoder.c:293:25
   17066:    04 84             	goto 0x8 <opus_encode+0x246 : 17070 >			  ## opus_encoder.c:293:25
   17068:    d4 e9 10 a0       	r10 = [sp+16]
   1706c:    d4 e9 04 e0       	r14 = [sp+4]
   17070:    49 e0 04 21       	r9 = 0x2104 <WOLAAnalysisFilter_Float_M256_m4_r1+0x900 : 2104 >
   17074:    dc ec 92 1c       	r1 = [++r9=r12]			  ## opus_encoder.c:296:29
   17078:    12 16             	r2 = r1			  ## opus_encoder.c:296:29
   1707a:    b1 ee 00 00       	ifs (r1 <= 0x0) {			  ## opus_encoder.c:296:29
   1707e:    42 20             		r2 = 0x0
                               	}			  ## opus_encoder.c:296:29
   17080:    43 e0 c4 09       	r3 = 0x9c4 <WOLAAnalysisFilter_Float_M128_m4_r1+0x1C0 : 9c4 >			  ## opus_encoder.c:296:29
   17084:    91 ee 00 03       	ifs (r1 <= r3) {			  ## opus_encoder.c:296:29
   17088:    23 16             		r3 = r2
                               	}			  ## opus_encoder.c:296:29
   1708a:    88 1e             	r0 = r0 - r3			  ## opus_encoder.c:298:26
   1708c:    d0 ec 91 30       	[r9+0x0] = r3			  ## opus_encoder.c:296:27
   17090:    b0 ee 01 00       	ifs (r0 <= 0x1) {			  ## opus_encoder.c:296:27
   17094:    40 21             		r0 = 0x1
                               	}			  ## opus_encoder.c:298:26
   17096:    d0 ec c1 00       	[r12+0x0] = r0			  ## opus_encoder.c:298:24
   1709a:    cb 90             	r3 = sp + 80			  ## opus_encoder.c:298:24
   1709c:    c0 16             	r0 = r12			  ## opus_encoder.c:300:8
   1709e:    c1 16             	r1 = r12			  ## opus_encoder.c:300:8
   170a0:    e2 16             	r2 = r14			  ## opus_encoder.c:300:8
   170a2:    bf ea 45 fd       	call -0x576 <silk_Encode : 16b30 >			  ## opus_encoder.c:300:8
   170a6:    00 34             	r0 = [sp+80]			  ## opus_encoder.c:306:6
   170a8:    30 58             	if (r0 == 0) goto 0xf0 <opus_encode+0x370 : 1719a >
   170aa:    d0 ec c4 12       	r1 = [r12+0x24]
   170ae:    d0 ec cc 01       	r0 = [r12+0x1c]
   170b2:    bf ea 32 d2       	call -0x5b9c <ec_tell : 1151a >			  ## opus_encoder.c:313:9
   170b6:    d0 ec c4 12       	r1 = [r12+0x24]			  ## entenc.c:249:21
   170ba:    80 e1 00 41       	r4 = clz(r1)			  ## entenc.c:124:2
   170be:    d0 ec c8 12       	r1 = [r12+0x28]			  ## entenc.c:251:16
   170c2:    c2 ff ff ff ff 7f 	r2 = 0x7fffffff <RAM_LIMIT_H+0x7FE5FFFE : 7ffffffe >			  ## entenc.c:250:23
   170c8:    c2 1a             	r2 >>= r4			  ## entenc.c:250:23
   170ca:    d0 ec c4 32       	r3 = [r12+0x24]			  ## entenc.c:252:34
   170ce:    95 1c             	r5 = r1 + r2			  ## entenc.c:251:19
   170d0:    90 e1 53 52       	r5 = r5 & ~r2			  ## entenc.c:251:24
   170d4:    90 e1 50 62       	r6 = r5 | r2			  ## entenc.c:252:9
   170d8:    13 18             	r3 += r1			  ## entenc.c:252:26
   170da:    c0 27             	r0 += 0x7			  ## opus_encoder.c:313:27
   170dc:    16 e9 00 c3       	if (r6 >= r3) {			  ## opus_encoder.c:313:27
   170e0:    a2 a1             		r2 = r2 >> 0x1			  ## entenc.c:254:6
   170e2:    21 18             		r1 += r2			  ## entenc.c:255:18
   170e4:    90 e1 13 52       		r5 = r1 & ~r2			  ## entenc.c:255:23
   170e8:    c4 21             		r4 += 0x1
                               	}			  ## entenc.c:253:4
   170ea:    c0 e1 03 dc       	r13 = r0 >>> 0x3			  ## opus_encoder.c:313:32
   170ee:    c6 ff 00 ff ff 7f 	r6 = 0x7fffff00 <RAM_LIMIT_H+0x7FE5FF00 : 7fffff00 >
   170f4:    04 88             	goto 0x10 <opus_encode+0x2DC : 17106 >
   170f6:    d1 b7             	r1 = r5 >> 0x17			  ## entenc.c:258:35
   170f8:    e0 16             	r0 = r14			  ## entenc.c:258:3
   170fa:    bf ea 98 cf       	call -0x60d0 <ec_enc_carry_out : 1102e >			  ## entenc.c:258:3
   170fe:    50 a8             	r0 = r5 << 0x8			  ## entenc.c:259:11
   17100:    90 e1 02 56       	r5 = r0 & r6			  ## entenc.c:259:25
   17104:    fc 38             	r4 += -0x8			  ## entenc.c:260:4
   17106:    04 fd f6 03       	ifs (r4 >= 0x1) goto -0x14 <opus_encode+0x2CC : 170f6 >
   1710a:    d0 ec c0 03       	r0 = [r12+0x30]			  ## entenc.c:263:12
   1710e:    70 fe 03 fe       	ifs (r0 > -0x1) goto 0x6 <opus_encode+0x2EE : 17118 >			  ## entenc.c:263:12
   17112:    d0 ec cc 02       	r0 = [r12+0x2c]			  ## entenc.c:263:27
   17116:    00 44             	if (r0 == 0) goto 0x8 <opus_encode+0x2F6 : 17120 >			  ## entenc.c:263:27
   17118:    41 20             	r1 = 0x0			  ## entenc.c:263:33
   1711a:    e0 16             	r0 = r14			  ## entenc.c:263:33
   1711c:    bf ea 87 cf       	call -0x60f2 <ec_enc_carry_out : 1102e >			  ## entenc.c:263:33
   17120:    d0 ec c4 03       	r0 = [r12+0x34]			  ## entenc.c:273:13
   17124:    80 4d             	if (r0 != 0) goto 0x1a <opus_encode+0x316 : 17140 >			  ## entenc.c:273:13
   17126:    d0 ec c0 12       	r1 = [r12+0x20]			  ## entenc.c:274:3
   1712a:    d0 ec c0 01       	r0 = [r12+0x10]			  ## entenc.c:274:3
   1712e:    50 ec c4 21       	r3_r2 = d[r12+0x14]			  ## entenc.c:274:3
   17132:    10 18             	r0 += r1			  ## entenc.c:274:3
   17134:    29 1e             	r1 = r2 - r1			  ## entenc.c:274:3
   17136:    9a 1e             	r2 = r1 - r3			  ## entenc.c:274:3
   17138:    41 20             	r1 = 0x0			  ## entenc.c:274:3
   1713a:    80 ff e6 d0 fe ff 	call -0x12f1a <memset : 4226 >			  ## entenc.c:274:3
   17140:    d0 ec 98 01       	r0 = [r9+0x18]			  ## opus_encoder.c:315:28
   17144:    d0 18             	r0 += r13			  ## opus_encoder.c:315:35
   17146:    c0 21             	r0 += 0x1			  ## opus_encoder.c:315:28
   17148:    d0 ec 99 01       	[r9+0x18] = r0			  ## opus_encoder.c:315:28
   1714c:    43 f0 40 01       	r3 = 0x140  # <var_bss_size+0x34 : 140 >			  ## opus_encoder.c:322:37
   17150:    71 63             		 r1 = [r7+0xc] 			  ## opus_encoder.c:322:34
   17152:    f4 f1 11 13       	r1 = r1 / r3 (s)  #			  ## opus_encoder.c:322:37
   17156:    72 62             		 r2 = [r7+0x8] 			  ## opus_encoder.c:322:55
   17158:    54 ed c8 03       	r0 = h[r12+0x38] (s)			  ## opus_encoder.c:322:12
   1715c:    bf ea fb fd       	call -0x40a <gen_toc : 16d56 >			  ## opus_encoder.c:322:12
   17160:    52 ee a0 00       	b[r10+0x0] = r0			  ## opus_encoder.c:322:10
   17164:    d0 ec c4 12       	r1 = [r12+0x24]			  ## opus_encoder.c:324:27
   17168:    f1 6b             	[r7+0x2c] = r1			  ## opus_encoder.c:324:17
   1716a:    d0 ec cc 01       	r0 = [r12+0x1c]			  ## opus_encoder.c:324:17
   1716e:    bf ea d4 d1       	call -0x5c58 <ec_tell : 1151a >			  ## opus_encoder.c:329:6
   17172:    8b ee 22 00       	ifs (r0 <= r11) goto 0x44 <opus_encode+0x390 : 171ba >			  ## opus_encoder.c:329:6
   17176:    16 3e             	r6 = -0x2
   17178:    88 fd 39 04       	ifs (r8 < 0x2) goto 0x72 <opus_encode+0x3C4 : 171ee >
   1717c:    c4 eb 01 90       	[r9+0x10] += 0x1			  ## opus_encoder.c:335:26
   17180:    d0 ec 94 01       	r0 = [r9+0x14]			  ## opus_encoder.c:336:27
   17184:    d0 18             	r0 += r13			  ## opus_encoder.c:336:34
   17186:    f8 3f             	r0 += -0x1			  ## opus_encoder.c:336:27
   17188:    d0 ec 95 01       	[r9+0x14] = r0			  ## opus_encoder.c:336:27
   1718c:    40 20             	r0 = 0x0			  ## opus_encoder.c:336:27
   1718e:    52 ee a1 00       	b[r10+0x1] = r0			  ## opus_encoder.c:338:11
   17192:    4d f0 01 00       	r13 = 0x1  # <mem_code_size : 0 >			  ## opus_encoder.c:338:11
   17196:    f0 6b             		 [r7+0x2c] = r0			  ## opus_encoder.c:340:18
   17198:    04 9d             	goto 0x3a <opus_encode+0x3AA : 171d4 >			  ## opus_encoder.c:340:18
   1719a:    4b ea 00 70       	[r7+0x2c] = 0x0			  ## opus_encoder.c:308:18
   1719e:    43 f0 40 01       	r3 = 0x140  # <var_bss_size+0x34 : 140 >			  ## opus_encoder.c:309:39
   171a2:    71 63             		 r1 = [r7+0xc] 			  ## opus_encoder.c:309:36
   171a4:    f4 f1 11 13       	r1 = r1 / r3 (s)  #			  ## opus_encoder.c:309:39
   171a8:    72 62             		 r2 = [r7+0x8] 			  ## opus_encoder.c:309:57
   171aa:    54 ed c8 03       	r0 = h[r12+0x38] (s)			  ## opus_encoder.c:309:14
   171ae:    bf ea d2 fd       	call -0x45c <gen_toc : 16d56 >			  ## opus_encoder.c:309:14
   171b2:    52 ee a0 00       	b[r10+0x0] = r0			  ## opus_encoder.c:309:12
   171b6:    46 21             	r6 = 0x1			  ## opus_encoder.c:309:12
   171b8:    04 9a             	goto 0x34 <opus_encode+0x3C4 : 171ee >			  ## opus_encoder.c:309:12
   171ba:    8d fd 0b 06       	ifs (r13 < 0x3) goto 0x16 <opus_encode+0x3AA : 171d4 >
   171be:    78 60             	r0 = h[r7+0x0] (u)			  ## opus_encoder.c:342:15
   171c0:    01 ff e8 03 07 00 	if (r0 != 0x3e8) goto 0xe <opus_encode+0x3AA : 171d4 >			  ## opus_encoder.c:342:15
   171c6:    d8 ee a0 0d       	r0 = b[r10+r13] (u)			  ## opus_encoder.c:350:21
   171ca:    80 44             	if (r0 != 0) goto 0x8 <opus_encode+0x3AA : 171d4 >			  ## opus_encoder.c:350:21
   171cc:    3d e1 ff df       	r13 = r13 + -0x1			  ## opus_encoder.c:351:7
   171d0:    0d fe f9 05       	ifs (r13 > 0x2) goto -0xe <opus_encode+0x39C : 171c6 >
   171d4:    05 e1 01 d0       	r5 = r13 + 0x1			  ## opus_encoder.c:361:6
   171d8:    68 e8 1c 95       	[r9+0x1c] += r5			  ## opus_encoder.c:362:29
   171dc:    16 3d             	r6 = -0x3			  ## opus_encoder.c:362:29
   171de:    85 fd 06 02       	ifs (r5 < 0x1) goto 0xc <opus_encode+0x3C4 : 171ee >			  ## opus_encoder.c:362:29
   171e2:    88 e8 02 50       	if (r5 != r8) goto 0x4 <opus_encode+0x3C0 : 171ea >
   171e6:    86 16             	r6 = r8
   171e8:    04 82             	goto 0x4 <opus_encode+0x3C4 : 171ee >
   171ea:    88 ee 03 50       	ifs (r5 <= r8) goto 0x6 <opus_encode+0x3CA : 171f4 >
   171ee:    60 16             	r0 = r6			  ## opus_encoder.c:374:1
   171f0:    02 9b             	sp += 0x6c			  ## opus_encoder.c:374:1
   171f2:    5f 04             	{pc, r15-r4} = [sp++]			  ## opus_encoder.c:374:1
   171f4:    40 20             	r0 = 0x0
   171f6:    b4 f0 a0 b8       	r11 = r10 + r8  #			  ## repacketizer.c:223:2
   171fa:    80 35             		 [sp+84] = r0			  ## repacketizer.c:220:15
   171fc:    50 e1 ff d3       	r0 = r13 ^ 0xFFFFFFFF			  ## repacketizer.c:223:2
   17200:    b4 e0 b0 90       	r9 = r11 + r0			  ## repacketizer.c:223:2
   17204:    90 16             	r0 = r9			  ## repacketizer.c:223:2
   17206:    a1 16             	r1 = r10			  ## repacketizer.c:223:2
   17208:    52 16             	r2 = r5			  ## repacketizer.c:223:2
   1720a:    80 ff 2c cf fe ff 	call -0x130d4 <memmove : 413c >			  ## repacketizer.c:223:2
   17210:    50 ee 90 30       	r3 = b[r9+0x0] (u)			  ## repacketizer.c:40:13
   17214:    de e9 68 30       	b[sp+104] = r3			  ## repacketizer.c:40:11
   17218:    41 e0 40 1f       	r1 = 0x1f40 <WOLAAnalysisFilter_Float_M256_m4_r1+0x73C : 1f40 >			  ## repacketizer.c:41:19
   1721c:    30 16             	r0 = r3			  ## repacketizer.c:41:19
   1721e:    bf ea bb fd       	call -0x48a <opus_packet_get_samples_per_frame : 16d98 >			  ## repacketizer.c:41:19
   17222:    74 f1 fc 30       	r4 = r3 & 0xFFFFFF03  #			  ## opus_demo.c:55:6
   17226:    80 36             		 [sp+88] = r0			  ## repacketizer.c:41:17
   17228:    c9 94             	r1 = sp + 84			  ## repacketizer.c:41:17
   1722a:    0a e1 14 10       	r10 = r1 + 0x14
   1722e:    60 ff 03 30 09 00 	if ((r3 & 0x3) == 0) goto 0x12 <opus_encode+0x41C : 17246 >
   17234:    84 f8 0a 06       	if (r4 != 0x3) goto 0x14 <opus_encode+0x422 : 1724c >
   17238:    85 fd d9 05       	ifs (r5 < 0x2) goto -0x4e <opus_encode+0x3C4 : 171ee >
   1723c:    50 ee 91 10       	r1 = b[r9+0x1] (u)			  ## opus_demo.c:62:10
   17240:    7f e1 c0 10       	r15 = r1 & 0xFFFFFF3F			  ## opus_demo.c:62:19
   17244:    04 85             	goto 0xa <opus_encode+0x426 : 17250 >			  ## opus_demo.c:62:19
   17246:    4f e0 01 00       	r15 = 0x1 <mem_code_size : 0 >
   1724a:    04 82             	goto 0x4 <opus_encode+0x426 : 17250 >
   1724c:    4f e0 02 00       	r15 = 0x2 <mem_code_size+0x2 : 2 >
   17250:    0f f8 cd 01       	if (r15 == 0x0) goto -0x66 <opus_encode+0x3C4 : 171ee >
   17254:    f0 1b             	r0 *= r15			  ## repacketizer.c:51:36
   17256:    0c ff c0 03 c9 ff 	ifs (r0 > 0x3c0) goto -0x6e <opus_encode+0x3C4 : 171ee >			  ## repacketizer.c:51:36
   1725c:    c1 ff 80 bb 00 00 	r1 = 0xbb80 <LZ4_decompress_generic+0x10 : bb80 >			  ## opus.c:282:14
   17262:    30 16             	r0 = r3			  ## opus.c:282:14
   17264:    bf ea 98 fd       	call -0x4d0 <opus_packet_get_samples_per_frame : 16d98 >			  ## opus.c:282:14
   17268:    05 e1 01 90       	r5 = r9 + 0x1			  ## opus.c:285:13
   1726c:    f8 e8 54 e0       	r14 = sp + 84
   17270:    60 ff 03 30 0c 00 	if ((r3 & 0x3) == 0) goto 0x18 <opus_encode+0x464 : 1728e >
   17276:    04 f8 0c 04       	if (r4 == 0x2) goto 0x18 <opus_encode+0x468 : 17292 >
   1727a:    84 f8 58 02       	if (r4 != 0x1) goto 0xb0 <opus_encode+0x504 : 1732e >
   1727e:    5d e8 b6 03       	if ((r13 & 0x1) != 0) goto -0x94 <opus_encode+0x3C4 : 171ee >
   17282:    44 22             	r4 = 0x2
   17284:    f4 e1 d1 d4       	r13 = r13 / r4 (s)			  ## opus.c:302:19
   17288:    50 ed e1 d1       	h[r14+0x10] = r13			  ## opus.c:304:12
   1728c:    04 94             	goto 0x28 <opus_encode+0x48C : 172b6 >			  ## opus.c:304:12
   1728e:    44 21             	r4 = 0x1
   17290:    04 92             	goto 0x24 <opus_encode+0x48C : 172b6 >
   17292:    02 e1 10 e0       	r2 = r14 + 0x10			  ## repacketizer.c:56:90
   17296:    50 16             	r0 = r5			  ## opus.c:310:11
   17298:    d1 16             	r1 = r13			  ## opus.c:310:11
   1729a:    bf ea a0 fd       	call -0x4c0 <parse_size : 16dde >			  ## opus.c:310:11
   1729e:    54 ed e0 11       	r1 = h[r14+0x10] (s)			  ## opus.c:312:7
   172a2:    81 fd a4 01       	ifs (r1 < 0x0) goto -0xb8 <opus_encode+0x3C4 : 171ee >
   172a6:    b4 e0 d2 20       	r2 = r13 - r0			  ## opus.c:311:7
   172aa:    81 ed a0 21       	ifs (r2 < r1) goto -0xc0 <opus_encode+0x3C4 : 171ee >
   172ae:    b4 e0 22 d1       	r13 = r2 - r1			  ## opus.c:315:18
   172b2:    05 18             	r5 += r0			  ## opus.c:314:8
   172b4:    44 22             	r4 = 0x2
   172b6:    0c ff fb d4 99 ff 	ifs (r13 > 0x4fb) goto -0xce <opus_encode+0x3C4 : 171ee >
   172bc:    c8 94             	r0 = sp + 84
   172be:    c0 30             	r0 += 0x10			  ## opus.c:396:3
   172c0:    31 e1 fe 0f       	r1 = r0 + -0x2			  ## opus.c:396:3
   172c4:    d8 ed 19 d4       	h[r1+r4<<1] = r13			  ## opus.c:396:17
   172c8:    41 20             	r1 = 0x0			  ## opus.c:396:17
   172ca:    32 e1 f8 0f       	r2 = r0 + -0x8			  ## opus.c:396:17
   172ce:    04 86             	goto 0xc <opus_encode+0x4B2 : 172dc >			  ## opus.c:396:17
   172d0:    d8 ec 2b 51       	[r2+r1<<2] = r5			  ## opus.c:402:14
   172d4:    d8 ed 0a 31       	r3 = h[r0+r1<<1] (s)			  ## opus.c:403:11
   172d8:    35 18             	r5 += r3			  ## opus.c:403:8
   172da:    c1 21             	r1 += 0x1			  ## opus.c:399:20
   172dc:    84 ed f8 11       	ifs (r1 < r4) goto -0x10 <opus_encode+0x4A6 : 172d0 >
   172e0:    d4 e9 54 c0       	r12 = [sp+84]
   172e4:    b4 e8 00 40       	if (r4 != 0x0) {
   172e8:    fc 18             		r12 += r15			  ## repacketizer.c:59:16
   172ea:    d4 e9 55 c0       		[sp+84] = r12
                               	}			  ## repacketizer.c:59:16
   172ee:    8c fd 55 02       	ifs (r12 < 0x1) goto 0xaa <opus_encode+0x572 : 1739c >
   172f2:    0c f8 57 02       	if (r12 == 0x1) goto 0xae <opus_encode+0x57A : 173a4 >			  ## repacketizer.c:103:6
   172f6:    8c f8 66 04       	if (r12 != 0x2) goto 0xcc <opus_encode+0x59C : 173c6 >
   172fa:    d8 e9 66 00       	r0 = h[sp+102] (u)			  ## repacketizer.c:112:7
   172fe:    50 ed e0 11       	r1 = h[r14+0x10] (u)			  ## repacketizer.c:112:17
   17302:    9b 17             	r3 = r1.l (s)			  ## repacketizer.c:112:17
   17304:    81 e8 65 00       	if (r0 != r1) goto 0xca <opus_encode+0x5A8 : 173d2 >			  ## repacketizer.c:112:7
   17308:    48 f0 01 00       	r8 = 0x1  # <mem_code_size : 0 >
   1730c:    07 24             		 r7 = [sp+16]
   1730e:    a8 f1 fc 30       	r8 <= insert(r3, p:0x1, l:0x1f)  #			  ## repacketizer.c:115:24
   17312:    05 20             		 r5 = [sp]			  ## repacketizer.c:115:24
   17314:    11 3e             	r1 = -0x2
   17316:    d4 e9 14 90       	r9 = [sp+20]
   1731a:    4c ff 00 89 1d 01 	ifs (r8 > r9) goto 0x23a <opus_encode+0x730 : 1755a >
   17320:    50 ee a0 10       	r1 = b[r10+0x0] (u)			  ## repacketizer.c:118:18
   17324:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## repacketizer.c:118:21
   17328:    31 20             	r1 |= 0x1			  ## repacketizer.c:118:28
   1732a:    f9 40             	b[r7+0x0] = r1			  ## repacketizer.c:118:11
   1732c:    34 8e             	goto 0xdc <opus_encode+0x5E0 : 1740a >			  ## repacketizer.c:118:11
   1732e:    8d fd 5e 03       	ifs (r13 < 0x1) goto -0x144 <opus_encode+0x3C4 : 171ee >
   17332:    5a 40             	r2 = b[r5+0x0] (u)			  ## opus.c:322:8
   17334:    60 ff 3f 20 5a ff 	if ((r2 & 0x3F) == 0) goto -0x14c <opus_encode+0x3C4 : 171ee >			  ## opus.c:322:8
   1733a:    74 e1 c0 20       	r4 = r2 & 0xFFFFFF3F			  ## opus.c:323:13
   1733e:    40 1b             	r0 *= r4			  ## opus.c:324:30
   17340:    2c ff b4 0d 54 ff 	ifs (r0 > 0x1680) goto -0x158 <opus_encode+0x3C4 : 171ee >			  ## opus.c:324:30
   17346:    05 e1 02 90       	r5 = r9 + 0x2			  ## opus.c:322:13
   1734a:    31 e1 ff df       	r1 = r13 + -0x1			  ## opus.c:326:6
   1734e:    52 e8 10 30       	if ((r2 & 0x40) == 0) goto 0x20 <opus_encode+0x548 : 17372 >
   17352:    81 fd 4c 03       	ifs (r1 < 0x1) goto -0x168 <opus_encode+0x3C4 : 171ee >
   17356:    43 f0 02 ff       	r3 = -0xfe  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FF02 : ffffffffffffff02 >			  ## opus.c:337:11
   1735a:    50 07             		 r0 = b[r5++=0x1] (u)			  ## opus.c:335:9
   1735c:    a7 e0 00 00       	r7 = 0x0 - r0
   17360:    b0 e8 ff 00       	if (r0 != 0xff) {
   17364:    73 16             		r3 = r7
                               	}			  ## opus.c:337:11
   17366:    31 18             	r1 += r3			  ## opus.c:336:8
   17368:    f9 3f             	r1 += -0x1			  ## opus.c:338:9
   1736a:    10 f8 f2 ff       	if (r0 == 0xff) goto -0x1c <opus_encode+0x528 : 17352 >
   1736e:    81 fd 3e 01       	ifs (r1 < 0x0) goto -0x184 <opus_encode+0x3C4 : 171ee >
   17372:    28 17             	r0 = r2.b0 (s)			  ## opus.c:322:8
   17374:    f0 fe a6 fe       	ifs (r0 <= -0x1) goto 0x14c <opus_encode+0x69A : 174c4 >			  ## opus.c:322:8
   17378:    f4 e1 11 d4       	r13 = r1 / r4 (s)			  ## opus.c:364:19
   1737c:    f0 e1 d0 04       	r0 = r13 * r4			  ## opus.c:365:17
   17380:    81 e8 35 01       	if (r0 != r1) goto -0x196 <opus_encode+0x3C4 : 171ee >			  ## opus.c:365:17
   17384:    c8 94             	r0 = sp + 84
   17386:    c0 30             	r0 += 0x10			  ## opus.c:268:6
   17388:    31 e1 ff 4f       	r1 = r4 + -0x1			  ## opus.c:268:6
   1738c:    42 20             	r2 = 0x0			  ## opus.c:268:6
   1738e:    04 83             	goto 0x6 <opus_encode+0x56C : 17396 >			  ## opus.c:268:6
   17390:    d8 ed 09 d2       	h[r0+r2<<1] = r13			  ## opus.c:368:13
   17394:    c2 21             	r2 += 0x1			  ## opus.c:367:24
   17396:    81 ed fb 21       	ifs (r2 < r1) goto -0xa <opus_encode+0x566 : 17390 >
   1739a:    c7 8d             	goto -0xe6 <opus_encode+0x48C : 172b6 >
   1739c:    11 3f             	r1 = -0x1
   1739e:    d4 e9 14 90       	r9 = [sp+20]
   173a2:    64 9b             	goto 0x1b6 <opus_encode+0x730 : 1755a >
   173a4:    54 ed e0 01       	r0 = h[r14+0x10] (s)			  ## repacketizer.c:106:15
   173a8:    08 f1 01 00       	r8 = r0 + 0x1  #			  ## repacketizer.c:106:12
   173ac:    07 24             		 r7 = [sp+16]			  ## repacketizer.c:106:12
   173ae:    11 3e             	r1 = -0x2
   173b0:    d4 e9 14 90       	r9 = [sp+20]
   173b4:    05 20             	r5 = [sp]
   173b6:    09 ee d0 80       	ifs (r8 > r9) goto 0x1a0 <opus_encode+0x730 : 1755a >
   173ba:    50 ee a0 10       	r1 = b[r10+0x0] (u)			  ## repacketizer.c:109:16
   173be:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## repacketizer.c:109:19
   173c2:    f9 40             	b[r7+0x0] = r1			  ## repacketizer.c:109:10
   173c4:    14 82             	goto 0x44 <opus_encode+0x5E0 : 1740a >			  ## repacketizer.c:109:10
   173c6:    50 ed e0 01       	r0 = h[r14+0x10] (u)
   173ca:    d4 e9 14 90       	r9 = [sp+20]
   173ce:    07 24             	r7 = [sp+16]
   173d0:    04 9e             	goto 0x3c <opus_encode+0x5E4 : 1740e >
   173d2:    88 d7             	r0 = r0.l (s)  #			  ## repacketizer.c:112:7
   173d4:    07 24             		 r7 = [sp+16]			  ## repacketizer.c:112:7
   173d6:    41 21             	r1 = 0x1			  ## repacketizer.c:121:39
   173d8:    d4 e9 14 90       	r9 = [sp+20]			  ## repacketizer.c:121:39
   173dc:    05 20             	r5 = [sp]			  ## repacketizer.c:121:39
   173de:    b3 ee fb 00       	ifs (r3 <= 0xfb) {			  ## repacketizer.c:121:39
   173e2:    41 20             		r1 = 0x0
                               	}			  ## repacketizer.c:121:39
   173e4:    30 18             	r0 += r3			  ## repacketizer.c:121:29
   173e6:    10 18             	r0 += r1			  ## repacketizer.c:121:31
   173e8:    08 e1 02 00       	r8 = r0 + 0x2			  ## repacketizer.c:121:13
   173ec:    11 3e             	r1 = -0x2
   173ee:    09 ee b4 80       	ifs (r8 > r9) goto 0x168 <opus_encode+0x730 : 1755a >
   173f2:    50 ee a0 00       	r0 = b[r10+0x0] (u)			  ## repacketizer.c:124:18
   173f6:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## repacketizer.c:124:21
   173fa:    30 21             	r0 |= 0x2			  ## repacketizer.c:124:28
   173fc:    30 d6             	r0 = r3  #			  ## repacketizer.c:125:11
   173fe:    f8 40             		 b[r7+0x0] = r0			  ## repacketizer.c:124:11
   17400:    51 16             	r1 = r5			  ## repacketizer.c:125:11
   17402:    bf ea 04 fd       	call -0x5f8 <encode_size : 16e0e >			  ## repacketizer.c:125:11
   17406:    05 18             	r5 += r0			  ## repacketizer.c:125:8
   17408:    30 16             	r0 = r3
   1740a:    09 ed 8c 80       	ifs (r8 >= r9) goto 0x118 <opus_encode+0x6FC : 17526 >
   1740e:    41 29             	r1 = 0x9
   17410:    82 17             	r2 = r0.l (u)
   17412:    33 e1 f8 1f       	r3 = r1 + -0x8			  ## repacketizer.c:141:13
   17416:    0c ed 2b 30       	ifs (r3 >= r12) goto 0x56 <opus_encode+0x646 : 17470 >			  ## repacketizer.c:141:3
   1741a:    cb 94             	r3 = sp + 84
   1741c:    d8 ed 38 41       	r4 = h[r3+r1<<1] (u)			  ## repacketizer.c:143:8
   17420:    c1 21             	r1 += 0x1			  ## repacketizer.c:143:8
   17422:    02 e8 f6 41       	if (r4 == r2) goto -0x14 <opus_encode+0x5E8 : 17412 >			  ## repacketizer.c:143:8
   17426:    3a 90             	r2 = r3 + 0x10			  ## repacketizer.c:152:9
   17428:    30 e1 ff cf       	r0 = r12 + -0x1			  ## repacketizer.c:152:9
   1742c:    43 20             	r3 = 0x0			  ## repacketizer.c:152:9
   1742e:    41 22             	r1 = 0x2			  ## repacketizer.c:152:9
   17430:    04 89             	goto 0x12 <opus_encode+0x61A : 17444 >			  ## repacketizer.c:152:9
   17432:    d8 ed 2a 43       	r4 = h[r2+r3<<1] (s)			  ## repacketizer.c:153:22
   17436:    46 22             	r6 = 0x2			  ## repacketizer.c:153:19
   17438:    b4 ee fb 00       	ifs (r4 <= 0xfb) {			  ## repacketizer.c:153:19
   1743c:    46 21             		r6 = 0x1
                               	}			  ## repacketizer.c:153:19
   1743e:    41 18             	r1 += r4			  ## repacketizer.c:153:35
   17440:    61 18             	r1 += r6			  ## repacketizer.c:153:14
   17442:    c3 21             	r3 += 0x1			  ## repacketizer.c:152:24
   17444:    80 ed f5 31       	ifs (r3 < r0) goto -0x16 <opus_encode+0x608 : 17432 >
   17448:    ca 94             	r2 = sp + 84
   1744a:    c2 30             	r2 += 0x10			  ## repacketizer.c:154:16
   1744c:    d8 ed 2a 00       	r0 = h[r2+r0<<1] (s)			  ## repacketizer.c:154:16
   17450:    b4 e0 00 81       	r8 = r0 + r1			  ## repacketizer.c:154:13
   17454:    11 3e             	r1 = -0x2
   17456:    09 ee 80 80       	ifs (r8 > r9) goto 0x100 <opus_encode+0x730 : 1755a >
   1745a:    50 ee a0 00       	r0 = b[r10+0x0] (u)			  ## repacketizer.c:158:18
   1745e:    40 e1 03 00       	r0 = r0 | 0x3			  ## repacketizer.c:158:28
   17462:    40 f0 80 ff       	r0 = -0x80  # <RAM_LIMIT_H+0xFFFFFFFFFFE5FF80 : ffffffffffffff80 >			  ## repacketizer.c:159:13
   17466:    f8 40             		 b[r7+0x0] = r0			  ## repacketizer.c:158:11
   17468:    90 e1 c0 20       	r2 = r12 | r0			  ## repacketizer.c:159:13
   1746c:    40 21             	r0 = 0x1			  ## repacketizer.c:159:13
   1746e:    04 8e             	goto 0x1c <opus_encode+0x662 : 1748c >			  ## repacketizer.c:159:13
   17470:    88 17             	r0 = r0.l (s)			  ## repacketizer.c:161:22
   17472:    c0 1b             	r0 *= r12			  ## repacketizer.c:161:21
   17474:    08 e1 02 00       	r8 = r0 + 0x2			  ## repacketizer.c:161:13
   17478:    11 3e             	r1 = -0x2
   1747a:    09 ee 6e 80       	ifs (r8 > r9) goto 0xdc <opus_encode+0x730 : 1755a >
   1747e:    50 ee a0 00       	r0 = b[r10+0x0] (u)			  ## repacketizer.c:164:18
   17482:    40 e1 03 00       	r0 = r0 | 0x3			  ## repacketizer.c:164:28
   17486:    c2 d6             	r2 = r12  #			  ## repacketizer.c:164:28
   17488:    f8 40             		 b[r7+0x0] = r0			  ## repacketizer.c:164:11
   1748a:    40 20             	r0 = 0x0			  ## repacketizer.c:164:11
   1748c:    b4 f0 92 18       	r1 = r9 - r8  #			  ## repacketizer.c:167:29
   17490:    fa 41             		 b[r7+0x1] = r2			  ## repacketizer.c:159:11
   17492:    11 58             	if (r1 == 0) goto 0x70 <opus_encode+0x6DA : 17504 >			  ## repacketizer.c:159:11
   17494:    32 26             	r2 |= 0x40			  ## repacketizer.c:171:12
   17496:    32 f1 ff 1f       	r2 = r1 + -0x1  #			  ## repacketizer.c:172:25
   1749a:    fa 41             		 b[r7+0x1] = r2			  ## repacketizer.c:171:12
   1749c:    7b 3f             	r3 = 0xff			  ## repacketizer.c:172:28
   1749e:    f4 e1 21 23       	r2 = r2 / r3 (s)			  ## repacketizer.c:172:28
   174a2:    44 20             	r4 = 0x0
   174a4:    04 82             	goto 0x4 <opus_encode+0x680 : 174aa >
   174a6:    eb 42             	b[r6+0x2] = r3			  ## repacketizer.c:174:12
   174a8:    c4 21             	r4 += 0x1			  ## repacketizer.c:173:24
   174aa:    76 1d             	r6 = r7 + r4			  ## repacketizer.c:173:14
   174ac:    82 ed fb 41       	ifs (r4 < r2) goto -0xa <opus_encode+0x67C : 174a6 >			  ## repacketizer.c:173:14
   174b0:    43 e0 01 ff       	r3 = -0xff <RAM_LIMIT_H+0xFFFFFFFFFFE5FF00 : ffffffffffffff00 >			  ## repacketizer.c:175:23
   174b4:    32 1b             	r2 *= r3			  ## repacketizer.c:175:23
   174b6:    21 18             	r1 += r2			  ## repacketizer.c:175:23
   174b8:    01 e1 ff 10       	r1 = r1 + 0xff			  ## repacketizer.c:175:35
   174bc:    98 d6             	r8 = r9  #			  ## repacketizer.c:175:35
   174be:    e9 42             		 b[r6+0x2] = r1			  ## repacketizer.c:175:11
   174c0:    6d 83             	r5 = r6 + 0x3			  ## repacketizer.c:175:11
   174c2:    14 81             	goto 0x42 <opus_encode+0x6DC : 17506 >			  ## repacketizer.c:175:11
   174c4:    c8 94             	r0 = sp + 84
   174c6:    0a 90             	r2 = r0 + 0x10			  ## opus.c:264:44
   174c8:    38 e1 ff 4f       	r8 = r4 + -0x1			  ## opus.c:264:44
   174cc:    c1 14             	r9 = 0			  ## opus.c:264:44
   174ce:    1d 16             	r13 = r1			  ## opus.c:264:44
   174d0:    04 93             	goto 0x26 <opus_encode+0x6CE : 174f8 >			  ## opus.c:264:44
   174d2:    50 16             	r0 = r5			  ## opus.c:352:13
   174d4:    bf ea 83 fc       	call -0x6fa <parse_size : 16dde >			  ## opus.c:352:13
   174d8:    d4 ed 22 30       	r3 = h[r2++=0x2] (s)			  ## opus.c:354:9
   174dc:    0b ff 00 30 86 fe 	ifs (r3 < 0x0) goto -0x2f4 <opus_encode+0x3C4 : 171ee >
   174e2:    11 1e             	r1 = r1 - r0			  ## opus.c:353:9
   174e4:    4c ff 00 31 82 fe 	ifs (r3 > r1) goto -0x2fc <opus_encode+0x3C4 : 171ee >
   174ea:    05 18             	r5 += r0			  ## opus.c:356:10
   174ec:    b4 e0 d2 00       	r0 = r13 - r0			  ## opus.c:357:23
   174f0:    b4 e0 02 d3       	r13 = r0 - r3			  ## opus.c:357:15
   174f4:    09 e1 01 90       	r9 = r9 + 0x1			  ## opus.c:350:24
   174f8:    88 ed eb 91       	ifs (r9 < r8) goto -0x2a <opus_encode+0x6A8 : 174d2 >
   174fc:    0a ff 00 d0 da fe 	ifs (r13 >= 0x0) goto -0x24c <opus_encode+0x48C : 172b6 >
   17502:    37 95             	goto -0x316 <opus_encode+0x3C4 : 171ee >
   17504:    7d 82             	r5 = r7 + 0x2
   17506:    00 4f             	if (r0 == 0) goto 0x1e <opus_encode+0x6FC : 17526 >
   17508:    c8 94             	r0 = sp + 84
   1750a:    0b 90             	r3 = r0 + 0x10			  ## repacketizer.c:82:6
   1750c:    34 e1 ff cf       	r4 = r12 + -0x1			  ## repacketizer.c:82:6
   17510:    46 20             	r6 = 0x0			  ## repacketizer.c:82:6
   17512:    04 87             	goto 0xe <opus_encode+0x6F8 : 17522 >			  ## repacketizer.c:82:6
   17514:    d8 ed 3a 06       	r0 = h[r3+r6<<1] (s)			  ## repacketizer.c:181:24
   17518:    51 16             	r1 = r5			  ## repacketizer.c:181:12
   1751a:    bf ea 78 fc       	call -0x710 <encode_size : 16e0e >			  ## repacketizer.c:181:12
   1751e:    05 18             	r5 += r0			  ## repacketizer.c:181:9
   17520:    c6 21             	r6 += 0x1			  ## repacketizer.c:180:24
   17522:    84 ed f7 61       	ifs (r6 < r4) goto -0x12 <opus_encode+0x6EA : 17514 >
   17526:    c8 94             	r0 = sp + 84
   17528:    0e 90             	r6 = r0 + 0x10			  ## repacketizer.c:82:6
   1752a:    47 20             	r7 = 0x0			  ## repacketizer.c:82:6
   1752c:    34 e1 f8 6f       	r4 = r6 + -0x8			  ## repacketizer.c:82:6
   17530:    04 8c             	goto 0x18 <opus_encode+0x720 : 1754a >			  ## repacketizer.c:82:6
   17532:    d8 ed 6a 27       	r2 = h[r6+r7<<1] (s)			  ## repacketizer.c:194:3
   17536:    d8 ec 4a 17       	r1 = [r4+r7<<2]			  ## repacketizer.c:194:3
   1753a:    50 16             	r0 = r5			  ## repacketizer.c:194:3
   1753c:    80 ff fa cb fe ff 	call -0x13406 <memmove : 413c >			  ## repacketizer.c:194:3
   17542:    d8 ed 6a 07       	r0 = h[r6+r7<<1] (s)			  ## repacketizer.c:195:10
   17546:    05 18             	r5 += r0			  ## repacketizer.c:195:7
   17548:    c7 21             	r7 += 0x1			  ## repacketizer.c:189:20
   1754a:    8c ed f2 71       	ifs (r7 < r12) goto -0x1c <opus_encode+0x708 : 17532 >
   1754e:    40 20             	r0 = 0x0
   17550:    04 81             	goto 0x2 <opus_encode+0x72A : 17554 >
   17552:    d0 07             	b[r5++=0x1] = r0			  ## repacketizer.c:201:10
   17554:    8b e9 fd 51       	if (r5 < r11) goto -0x6 <opus_encode+0x728 : 17552 >
   17558:    81 16             	r1 = r8
   1755a:    b1 ee ff 0f       	ifs (r1 <= -0x1) {
   1755e:    49 e0 fd ff       		r9 = -0x3
                               	} <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFC : fffffffffffffffc >			  ## repacketizer.c:231:3
   17562:    96 16             	r6 = r9			  ## repacketizer.c:231:3
   17564:    27 84             	goto -0x378 <opus_encode+0x3C4 : 171ee >			  ## repacketizer.c:231:3


opus_run:
   17566:    7a 04             	[--sp] = {rets, r10-r4}			  ## opus_demo.c:83:0
   17568:    04 16             	r4 = r0			  ## opus_demo.c:83:0
   1756a:    06 e1 38 40       	r6 = r4 + 0x38			  ## opus_demo.c:83:0
   1756e:    41 f0 24 21       	r1 = 0x2124  # <WOLAAnalysisFilter_Float_M256_m4_r1+0x920 : 2124 >			  ## opus_demo.c:85:41
   17572:    62 68             		 r2 = [r6+0x20] 			  ## opus_demo.c:93:73
   17574:    4d dc             	r5 = r4 + r1  #			  ## opus_demo.c:85:41
   17576:    60 6c             		 r0 = [r6+0x30] 			  ## opus_demo.c:93:53
   17578:    21 a1             	r1 = r2 << 0x1			  ## opus_demo.c:93:59
   1757a:    51 d8             	r1 += r5  #			  ## opus_demo.c:93:59
   1757c:    63 6d             		 r3 = [r6+0x34] 			  ## opus_demo.c:93:30
   1757e:    a2 e0 a0 2f       	r2 = 0x140 - r2			  ## opus_demo.c:93:87
   17582:    a2 17             	r2 = r2.l (u)			  ## opus_demo.c:93:18
   17584:    c3 00             	call r3			  ## opus_demo.c:93:18
   17586:    61 68             	r1 = [r6+0x20] 			  ## opus_demo.c:94:15
   17588:    10 18             	r0 += r1			  ## opus_demo.c:94:15
   1758a:    e0 68             	[r6+0x20] = r0			  ## opus_demo.c:94:15
   1758c:    47 20             	r7 = 0x0
   1758e:    a0 f8 3a 80       	if (r0 != 0x140) goto 0x74 <opus_run+0xA0 : 17606 >
   17592:    c2 14             	r10 = 0
   17594:    d0 ec 61 a2       	[r6+0x20] = r10			  ## opus_demo.c:100:16
   17598:    41 f0 04 4b       	r1 = 0x4b04  # <.GJTIE82_0_0_+0x10 : 4b04 >			  ## opus_demo.c:100:16
   1759c:    68 61             		 r0 = h[r6+0x2] (u)			  ## opus_demo.c:101:11
   1759e:    b4 e0 40 91       	r9 = r4 + r1			  ## opus_demo.c:101:11
   175a2:    08 e1 08 90       	r8 = r9 + 0x8			  ## opus_demo.c:98:21
   175a6:    80 f8 0e 02       	if (r0 != 0x1) goto 0x1c <opus_run+0x60 : 175c6 >			  ## opus_demo.c:98:21
   175aa:    80 14             	r1_r0 = 0
   175ac:    04 86             	goto 0xc <opus_run+0x54 : 175ba >
   175ae:    d8 ed 5a 21       	r2 = h[r5+r1<<1] (s)			  ## opus_demo.c:105:13
   175b2:    30 e4 00 22       	r2 = abs(r2)			  ## opus_demo.c:105:13
   175b6:    20 18             	r0 += r2			  ## opus_demo.c:108:12
   175b8:    c1 21             	r1 += 0x1			  ## opus_demo.c:103:26
   175ba:    a1 f8 f8 81       	if (r1 != 0x140) goto -0x10 <opus_run+0x48 : 175ae >
   175be:    41 e0 40 01       	r1 = 0x140 <var_bss_size+0x34 : 140 >			  ## opus_demo.c:110:11
   175c2:    f4 e1 00 a1       	r10 = r0 / r1 (u)			  ## opus_demo.c:110:11
   175c6:    40 15             	r1_r0 = r5_r4			  ## opus_demo.c:113:13
   175c8:    82 16             	r2 = r8			  ## opus_demo.c:113:13
   175ca:    bf ea 2e fc       	call -0x7a4 <opus_encode : 16e2a >			  ## opus_demo.c:113:13
   175ce:    80 fd 0b 00       	ifs (r0 < 0x0) goto 0x16 <opus_run+0x82 : 175e8 >
   175d2:    69 61             	r1 = h[r6+0x2] (u)			  ## opus_demo.c:125:11
   175d4:    01 f8 0a 02       	if (r1 == 0x1) goto 0x14 <opus_run+0x86 : 175ec >			  ## opus_demo.c:125:7
   175d8:    81 56             	if (r1 != 0) goto 0x2c <opus_run+0xA0 : 17606 >
   175da:    82 d7             	r2 = r0.l (u)  #			  ## opus_demo.c:127:4
   175dc:    61 6c             		 r1 = [r6+0x30] 			  ## opus_demo.c:127:40
   175de:    10 d6             	r0 = r1  #			  ## opus_demo.c:127:4
   175e0:    63 6e             		 r3 = [r6+0x38] 			  ## opus_demo.c:127:16
   175e2:    81 16             	r1 = r8			  ## opus_demo.c:127:4
   175e4:    c3 00             	call r3			  ## opus_demo.c:127:4
   175e6:    04 8f             	goto 0x1e <opus_run+0xA0 : 17606 >			  ## opus_demo.c:127:4
   175e8:    17 3f             	r7 = -0x1
   175ea:    04 8d             	goto 0x1a <opus_run+0xA0 : 17606 >
   175ec:    50 ed 93 a0       	h[r9+0x2] = r10			  ## opus_demo.c:136:12
   175f0:    61 6b             	r1 = [r6+0x2c] 			  ## opus_demo.c:137:20
   175f2:    d0 ec 95 10       	[r9+0x4] = r1			  ## opus_demo.c:137:14
   175f6:    01 f1 02 90       	r1 = r9 + 0x2  #			  ## opus_demo.c:136:4
   175fa:    63 6c             		 r3 = [r6+0x30] 			  ## opus_demo.c:139:40
   175fc:    c0 26             	r0 += 0x6			  ## opus_demo.c:139:71
   175fe:    82 d7             	r2 = r0.l (u)  #			  ## opus_demo.c:139:4
   17600:    64 6e             		 r4 = [r6+0x38] 			  ## opus_demo.c:139:16
   17602:    30 16             	r0 = r3			  ## opus_demo.c:139:4
   17604:    c4 00             	call r4			  ## opus_demo.c:139:4
   17606:    70 16             	r0 = r7			  ## opus_demo.c:144:1
   17608:    5a 04             	{pc, r10-r4} = [sp++]			  ## opus_demo.c:144:1


p11_boot:
   1760a:    64 e0 00 e3       	r14 = rets			  ## p11.S:7:0
   1760e:    c0 ff 04 3e fd 00 	r0 = 0xfd3e04 <RAM_LIMIT_H+0xE33E04 : fd3e04 >			  ## p11.S:8:0
   17614:    01 60             	r1 = [r0+0x0] 			  ## p11.S:10:0
   17616:    51 e8 fd 29       	if ((r1 & 0x20) == 0) goto -0x6 <p11_boot+0xA : 17614 >			  ## p11.S:11:0
   1761a:    79 3f             	r1 = 0xff			  ## p11.S:13:0
   1761c:    7a 2e             	r2 = 0xee			  ## p11.S:14:0
   1761e:    6b 2b             	r3 = 0xab			  ## p11.S:15:0
   17620:    44 2e             	r4 = 0xe			  ## p11.S:16:0
   17622:    55 35             	r5 = 0x55			  ## p11.S:17:0
   17624:    c6 ff 08 a8 f2 00 	r6 = 0xf2a808 <RAM_LIMIT_H+0xD8A808 : f2a808 >			  ## p11.S:19:0
   1762a:    04 88             	goto 0x10 <p11_boot+0x32 : 1763c >			  ## p11.S:21:0
   1762c:    e1 60             	[r6+0x0] = r1			  ## p11.S:23:0
   1762e:    e2 60             	[r6+0x0] = r2			  ## p11.S:24:0
   17630:    e3 60             	[r6+0x0] = r3			  ## p11.S:25:0
   17632:    e4 60             	[r6+0x0] = r4			  ## p11.S:26:0
   17634:    e5 60             	[r6+0x0] = r5			  ## p11.S:27:0
   17636:    20 00             	csync			  ## p11.S:28:0
   17638:    00 00             	nop			  ## p11.S:29:0
   1763a:    00 00             	nop			  ## p11.S:30:0
   1763c:    07 60             	r7 = [r0+0x0] 			  ## p11.S:32:0
   1763e:    57 e8 f5 01       	if ((r7 & 0x1) == 0) goto -0x16 <p11_boot+0x22 : 1762c >			  ## p11.S:33:0
   17642:    c0 ff 00 a4 f2 00 	r0 = 0xf2a400 <RAM_LIMIT_H+0xD8A400 : f2a400 >			  ## p11.S:44:0
   17648:    00 60             	r0 = [r0+0x0] 			  ## p11.S:45:0
   1764a:    50 e8 17 3a       	if ((r0 & 0x80) != 0) goto 0x2e <p11_boot+0x72 : 1767c >			  ## p11.S:46:0
   1764e:    c0 ff ec 7f f2 00 	r0 = 0xf27fec <RAM_LIMIT_H+0xD87FEC : f27fec >			  ## p11.S:49:0
   17654:    01 96             	call 0x2c <read_32 : 17682 >			  ## p11.S:50:0
   17656:    c2 ff ef 27 12 ab 	r2 = 0xab1227ef <RAM_LIMIT_H+0xAAF827EE : ab1227ee >			  ## p11.S:51:0
   1765c:    82 e8 0e 00       	if (r0 != r2) goto 0x1c <p11_boot+0x72 : 1767c >			  ## p11.S:52:0
   17660:    c0 ff f0 7f f2 00 	r0 = 0xf27ff0 <RAM_LIMIT_H+0xD87FF0 : f27ff0 >			  ## p11.S:54:0
   17666:    01 8d             	call 0x1a <read_32 : 17682 >			  ## p11.S:55:0
   17668:    64 e0 80 0d       	ssp = r0			  ## p11.S:56:0
   1766c:    c0 ff f4 7f f2 00 	r0 = 0xf27ff4 <RAM_LIMIT_H+0xD87FF4 : f27ff4 >			  ## p11.S:58:0
   17672:    01 87             	call 0xe <read_32 : 17682 >			  ## p11.S:59:0
   17674:    64 e0 80 0c       	usp = r0			  ## p11.S:60:0
   17678:    64 e0 80 0e       	sp = r0			  ## p11.S:61:0
   1767c:    64 e0 80 e3       	rets = r14			  ## p11.S:63:0
   17680:    80 00             	rts			  ## p11.S:64:0


read_32:
   17682:    09 43             	r1 = b[r0+0x3] (u)			  ## p11.S:71:0
   17684:    0a 42             	r2 = b[r0+0x2] (u)			  ## p11.S:72:0
   17686:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## p11.S:73:0
   1768a:    0b 41             		 r3 = b[r0+0x1] (u)			  ## p11.S:73:0
   1768c:    08 40             	r0 = b[r0+0x0] (u)			  ## p11.S:74:0
   1768e:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## p11.S:75:0
   17692:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## p11.S:76:0
   17696:    80 00             	rts			  ## p11.S:77:0


rep_clz:
   17698:    42 21             	r2 = 0x1
   1769a:    f3 e0 00 00       	r3 = r0 - 0x0
   1769e:    b8 e0 12 22       	r2 = r1 - r2 - !c
   176a2:    64 e0 00 25       	r2 = psr
   176a6:    22 ea 02 50       	if ((r2 & 0x2) == 0) {
   176aa:    80 e1 00 00       		r0 = clz(r0)
   176ae:    30 25             		r0 |= 0x20
                               	} else {
   176b0:    80 e1 00 01       		r0 = clz(r1)
                               	}
   176b4:    80 00             	rts


normalize:
   176b6:    d9 e8 d0 00       	[--sp] = {rets, r7, r6, r4}
   176ba:    04 16             	r4 = r0
   176bc:    50 ec 40 60       	r7_r6 = d[r4+0x0]
   176c0:    60 15             	r1_r0 = r7_r6
   176c2:    71 8a             	call -0x2c <rep_clz : 17698 >
   176c4:    31 e1 f5 0f       	r1 = r0 + -0xb
   176c8:    d8 e1 00 61       	r7_r6 <<= r1
   176cc:    a0 e0 0c 00       	r0 = 0xC - r0
   176d0:    50 ec 41 60       	d[r4+0x0] = r7_r6
   176d4:    d5 e8 d0 00       	{pc, r7, r6, r4} = [sp++]


__adddf3:
   176d8:    7f 04             	[--sp] = {rets, r15-r4}
   176da:    e2 99             	sp += -0x1c
   176dc:    0a 15             	r11_r10 = r1_r0
   176de:    77 e1 00 14       	r7 = r1 & 0x7FFFFFFF
   176e2:    a6 16             	r6 = r10
   176e4:    11 3f             	r1 = -0x1
   176e6:    38 e1 ff 6f       	r8 = r6 + -0x1
   176ea:    b8 e0 70 91       	r9 = r7 + r1 + c
   176ee:    14 3e             	r4 = -0x2
   176f0:    ce ff ff ff ef 7f 	r14 = 0x7fefffff <RAM_LIMIT_H+0x7FD5FFFE : 7feffffe >
   176f6:    b4 e0 82 44       	r4 = r8 - r4
   176fa:    b8 e0 92 5e       	r5 = r9 - r14 - !c
   176fe:    64 e0 00 05       	r0 = psr
   17702:    54 19             	r4 |= r5
   17704:    79 e1 00 34       	r9 = r3 & 0x7FFFFFFF
   17708:    b5 e1 85 00       	r5 = sextra(r0, p:0x1, l:0x1)
   1770c:    28 16             	r8 = r2
   1770e:    3c e1 ff 2f       	r12 = r2 + -0x1
   17712:    b8 e0 90 d1       	r13 = r9 + r1 + c
   17716:    20 15             	r1_r0 = r3_r2
   17718:    45 fb 30 00       	if ((r5 & r4) != 0) goto 0x60 <__adddf3+0xA4 : 1777c >
   1771c:    f4 e0 ff c3       	r4 = r12 - 0xFFFFFFFF
   17720:    b8 e0 d2 4e       	r4 = r13 - r14 - !c
   17724:    64 e0 00 45       	r4 = psr
   17728:    54 e8 28 0a       	if ((r4 & 0x2) != 0) goto 0x50 <__adddf3+0xA4 : 1777c >
   1772c:    82 1f             	r2 = r0 - r6
   1772e:    b8 e0 92 37       	r3 = r9 - r7 - !c
   17732:    64 e0 00 45       	r4 = psr
   17736:    32 19             	r2 |= r3
   17738:    b3 e1 85 40       	r3 = sextra(r4, p:0x1, l:0x1)
   1773c:    13 ea 00 22       	if ((r3 & r2) == 0) {
   17740:    19 16             		r9 = r1
                               	} else {
   17742:    a8 15             		r9_r8 = r11_r10
   17744:    0a 15             		r11_r10 = r1_r0
                               	}
   17746:    c7 ff ff ff 0f 00 	r7 = 0xfffff <$data.__3+0xBDBE : ffffe >
   1774c:    90 e1 b2 17       	r1 = r11 & r7
   17750:    a0 16             	r0 = r10
   17752:    90 e1 92 d7       	r13 = r9 & r7
   17756:    d0 e9 15 00       	d[sp+20] = r1_r0
   1775a:    8c 16             	r12 = r8
   1775c:    82 15             	r3_r2 = r9_r8
   1775e:    d0 e1 04 2b       	r3_r2 >>= 0x34
   17762:    40 e0 ff 07       	r0 = 0x7ff <alg_code_size+0x32E : 7fe >
   17766:    90 e1 22 60       	r6 = r2 & r0
   1776a:    a2 15             	r3_r2 = r11_r10
   1776c:    d0 e1 04 2b       	r3_r2 >>= 0x34
   17770:    d0 e9 0d c0       	d[sp+12] = r13_r12
   17774:    02 fa 1b 00       	if ((r2 & r0) == 0) goto 0x36 <__adddf3+0xD6 : 177ae >
   17778:    a0 19             	r0 &= r2
   1777a:    04 9b             	goto 0x36 <__adddf3+0xDA : 177b2 >
   1777c:    04 e1 01 e0       	r4 = r14 + 0x1
   17780:    f5 e0 01 60       	r5 = r6 - 0x1
   17784:    b8 e0 72 54       	r5 = r7 - r4 - !c
   17788:    64 e0 00 55       	r5 = psr
   1778c:    55 e8 04 08       	if ((r5 & 0x2) == 0) goto 0x8 <__adddf3+0xC0 : 17798 >
   17790:    4b e1 00 ba       	r11 = r11 | 0x80000
   17794:    a2 15             	r3_r2 = r11_r10
   17796:    74 95             	goto 0x1ea <__adddf3+0x2AA : 17982 >
   17798:    f5 e0 01 00       	r5 = r0 - 0x1
   1779c:    b8 e0 92 54       	r5 = r9 - r4 - !c
   177a0:    64 e0 00 55       	r5 = psr
   177a4:    55 e8 d5 08       	if ((r5 & 0x2) == 0) goto 0x1aa <__adddf3+0x27A : 17952 >
   177a8:    31 33             	r1 |= 0x80000
   177aa:    02 15             	r3_r2 = r1_r0
   177ac:    74 8a             	goto 0x1d4 <__adddf3+0x2AA : 17982 >
   177ae:    88 94             	r0 = sp + 20
   177b0:    41 82             	call -0xfc <normalize : 176b6 >
   177b2:    d0 e9 01 00       	d[sp] = r1_r0
   177b6:    86 46             	if (r6 != 0) goto 0xc <__adddf3+0xEC : 177c4 >
   177b8:    88 8c             	r0 = sp + 12
   177ba:    bf ea 7c ff       	call -0x108 <normalize : 176b6 >
   177be:    d0 e9 0c c0       	r13_r12 = d[sp+12]
   177c2:    06 16             	r6 = r0
   177c4:    d0 e9 14 00       	r1_r0 = d[sp+20]
   177c8:    d0 e1 03 00       	r1_r0 <<= 0x3
   177cc:    43 e1 00 18       	r3 = r1 | 0x800000
   177d0:    02 16             	r2 = r0
   177d2:    d0 e9 15 20       	d[sp+20] = r3_r2
   177d6:    d0 e1 03 c0       	r13_r12 <<= 0x3
   177da:    4d e1 00 d8       	r13 = r13 | 0x800000
   177de:    d0 e9 0d c0       	d[sp+12] = r13_r12
   177e2:    90 e1 b1 f9       	r15 = r11 ^ r9
   177e6:    d0 e9 00 40       	r5_r4 = d[sp]
   177ea:    c6 1f             	r6 = r4 - r6
   177ec:    90 e1 a1 e8       	r14 = r10 ^ r8
   177f0:    06 5e             	if (r6 == 0) goto 0x3c <__adddf3+0x156 : 1782e >
   177f2:    06 fc 17 7e       	if (r6 > 0x3f) goto 0x2e <__adddf3+0x14C : 17824 >
   177f6:    75 16             	r5 = r7
   177f8:    a4 e0 40 60       	r4 = 0x40 - r6
   177fc:    c8 15             	r9_r8 = r13_r12
   177fe:    d8 e1 00 84       	r9_r8 <<= r4
   17802:    90 e1 80 79       	r7 = r8 | r9
   17806:    48 e0 01 00       	r8 = 0x1 <mem_code_size : 0 >
   1780a:    87 41             	if (r7 != 0) goto 0x2 <__adddf3+0x136 : 1780e >
   1780c:    78 16             	r8 = r7
   1780e:    c1 14             	r9 = 0
   17810:    d8 e1 02 c6       	r13_r12 >>= r6
   17814:    90 e1 d0 d9       	r13 = r13 | r9
   17818:    90 e1 c0 c8       	r12 = r12 | r8
   1781c:    d0 e9 0d c0       	d[sp+12] = r13_r12
   17820:    57 16             	r7 = r5
   17822:    04 85             	goto 0xa <__adddf3+0x156 : 1782e >
   17824:    4c e0 01 00       	r12 = 0x1 <mem_code_size : 0 >
   17828:    c5 14             	r13 = 0
   1782a:    d0 e9 0d c0       	d[sp+12] = r13_r12
   1782e:    ff fe 1f fe       	ifs (r15 <= -0x1) goto 0x3e <__adddf3+0x198 : 17870 >
   17832:    b4 e0 c0 82       	r8 = r12 + r2
   17836:    b8 e0 d0 93       	r9 = r13 + r3 + c
   1783a:    63 e1 80 97       	r3 = r9 & 0x1000000
   1783e:    42 20             	r2 = 0x0
   17840:    d0 e9 15 80       	d[sp+20] = r9_r8
   17844:    13 59             	if (r3 == 0) goto 0x72 <__adddf3+0x1E0 : 178b8 >
   17846:    76 16             	r6 = r7
   17848:    b4 e0 c0 40       	r4 = r12 + r0
   1784c:    b8 e0 d0 51       	r5 = r13 + r1 + c
   17850:    60 e1 01 40       	r0 = r4 & 0x1
   17854:    41 20             	r1 = 0x0
   17856:    d0 e1 01 88       	r9_r8 >>= 0x1
   1785a:    90 e1 90 91       	r9 = r9 | r1
   1785e:    90 e1 80 80       	r8 = r8 | r0
   17862:    d0 e9 15 80       	d[sp+20] = r9_r8
   17866:    d0 e9 00 c0       	r13_r12 = d[sp]
   1786a:    0c e1 01 c0       	r12 = r12 + 0x1
   1786e:    14 86             	goto 0x4c <__adddf3+0x1E4 : 178bc >
   17870:    b4 e0 22 8c       	r8 = r2 - r12
   17874:    b8 e0 32 9d       	r9 = r3 - r13 - !c
   17878:    90 e1 80 09       	r0 = r8 | r9
   1787c:    d0 e9 15 80       	d[sp+20] = r9_r8
   17880:    30 59             	if (r0 == 0) goto 0xf2 <__adddf3+0x29C : 17974 >
   17882:    c0 ff ff ff 7f 00 	r0 = 0x7fffff <RAM_LIMIT_H+0x65FFFE : 7ffffe >
   17888:    f1 e0 ff 83       	r1 = r8 - 0xFFFFFFFF
   1788c:    b8 e0 92 00       	r0 = r9 - r0 - !c
   17890:    64 e0 00 25       	r2 = psr
   17894:    10 19             	r0 |= r1
   17896:    b1 e1 85 20       	r1 = sextra(r2, p:0x1, l:0x1)
   1789a:    01 fb 0d 00       	if ((r1 & r0) != 0) goto 0x1a <__adddf3+0x1E0 : 178b8 >
   1789e:    80 15             	r1_r0 = r9_r8
   178a0:    bf ea fa fe       	call -0x20c <rep_clz : 17698 >
   178a4:    f8 38             	r0 += -0x8
   178a6:    d8 e1 00 80       	r9_r8 <<= r0
   178aa:    d0 e9 15 80       	d[sp+20] = r9_r8
   178ae:    d0 e9 00 c0       	r13_r12 = d[sp]
   178b2:    b4 e0 c2 c0       	r12 = r12 - r0
   178b6:    04 82             	goto 0x4 <__adddf3+0x1E4 : 178bc >
   178b8:    d0 e9 00 c0       	r13_r12 = d[sp]
   178bc:    63 e1 00 b4       	r3 = r11 & 0x80000000
   178c0:    42 20             	r2 = 0x0
   178c2:    0b ff ff c7 05 00 	ifs (r12 < 0x7ff) goto 0xa <__adddf3+0x1FA : 178d2 >
   178c8:    c0 ff 00 00 f0 7f 	r0 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   178ce:    03 19             	r3 |= r0
   178d0:    24 98             	goto 0xb0 <__adddf3+0x2AA : 17982 >
   178d2:    0c fe 18 00       	ifs (r12 > 0x0) goto 0x30 <__adddf3+0x22E : 17906 >
   178d6:    7a 16             	r10 = r7
   178d8:    a4 e0 01 c0       	r4 = 0x1 - r12
   178dc:    a0 e0 40 40       	r0 = 0x40 - r4
   178e0:    86 15             	r7_r6 = r9_r8
   178e2:    d8 e1 00 60       	r7_r6 <<= r0
   178e6:    90 e1 60 57       	r5 = r6 | r7
   178ea:    40 21             	r0 = 0x1
   178ec:    85 41             	if (r5 != 0) goto 0x2 <__adddf3+0x218 : 178f0 >
   178ee:    50 16             	r0 = r5
   178f0:    41 20             	r1 = 0x0
   178f2:    d8 e1 02 84       	r9_r8 >>= r4
   178f6:    90 e1 90 91       	r9 = r9 | r1
   178fa:    90 e1 80 80       	r8 = r8 | r0
   178fe:    d0 e9 15 80       	d[sp+20] = r9_r8
   17902:    c4 14             	r12 = 0
   17904:    a7 16             	r7 = r10
   17906:    80 15             	r1_r0 = r9_r8
   17908:    d0 e1 03 08       	r1_r0 >>= 0x3
   1790c:    f1 19             	r1 &= r7
   1790e:    90 e1 10 53       	r5 = r1 | r3
   17912:    c5 14             	r13 = 0
   17914:    90 e1 00 42       	r4 = r0 | r2
   17918:    c2 16             	r2 = r12
   1791a:    43 20             	r3 = 0x0
   1791c:    d0 e1 04 23       	r3_r2 <<= 0x34
   17920:    90 e1 50 13       	r1 = r5 | r3
   17924:    90 e1 40 02       	r0 = r4 | r2
   17928:    62 e1 07 80       	r2 = r8 & 0x7
   1792c:    46 21             	r6 = 0x1
   1792e:    b2 ec 04 00       	if (r2 <= 0x4) {
   17932:    46 20             		r6 = 0x0
                               	}
   17934:    47 20             	r7 = 0x0
   17936:    84 1d             	r4 = r0 + r6
   17938:    b8 e0 10 57       	r5 = r1 + r7 + c
   1793c:    60 e1 01 40       	r0 = r4 & 0x1
   17940:    b2 e8 04 50       	if (r2 != 0x4) {
   17944:    40 20             		r0 = 0x0
   17946:    41 20             		r1 = 0x0
                               	} else {
   17948:    41 20             		r1 = 0x0
                               	}
   1794a:    02 1d             	r2 = r0 + r4
   1794c:    b8 e0 10 35       	r3 = r1 + r5 + c
   17950:    04 98             	goto 0x30 <__adddf3+0x2AA : 17982 >
   17952:    90 e1 71 54       	r5 = r7 ^ r4
   17956:    65 19             	r5 |= r6
   17958:    85 50             	if (r5 != 0) goto 0x20 <__adddf3+0x2A2 : 1797a >
   1795a:    90 e1 11 3b       	r3 = r1 ^ r11
   1795e:    90 e1 01 26       	r2 = r0 ^ r6
   17962:    50 e1 00 34       	r0 = r3 ^ 0x80000000
   17966:    20 19             	r0 |= r2
   17968:    80 f8 14 01       	if (r0 != 0x0) goto -0x1d8 <__adddf3+0xBC : 17794 >
   1796c:    c2 14             	r10 = 0
   1796e:    eb e0 00 4a       	r11 = r4 + 0x80000
   17972:    87 90             	goto -0x1e0 <__adddf3+0xBC : 17794 >
   17974:    42 20             	r2 = 0x0
   17976:    43 20             	r3 = 0x0
   17978:    04 84             	goto 0x8 <__adddf3+0x2AA : 17982 >
   1797a:    90 e1 41 49       	r4 = r4 ^ r9
   1797e:    04 19             	r4 |= r0
   17980:    84 43             	if (r4 != 0) goto 0x6 <__adddf3+0x2B0 : 17988 >
   17982:    20 15             	r1_r0 = r3_r2
   17984:    02 87             	sp += 0x1c
   17986:    5f 04             	{pc, r15-r4} = [sp++]
   17988:    90 e1 60 47       	r4 = r6 | r7
   1798c:    04 47             	if (r4 == 0) goto 0xe <__adddf3+0x2C4 : 1799c >
   1798e:    90 e1 00 49       	r4 = r0 | r9
   17992:    a2 15             	r3_r2 = r11_r10
   17994:    01 ff 00 40 c9 fe 	if (r4 != 0x0) goto -0x26e <__adddf3+0x54 : 1772c >
   1799a:    f7 93             	goto -0x1a <__adddf3+0x2AA : 17982 >
   1799c:    90 e1 00 49       	r4 = r0 | r9
   179a0:    f4 50             	if (r4 != 0) goto -0x20 <__adddf3+0x2AA : 17982 >
   179a2:    90 e1 12 3b       	r3 = r1 & r11
   179a6:    90 e1 02 26       	r2 = r0 & r6
   179aa:    f7 8b             	goto -0x2a <__adddf3+0x2AA : 17982 >


__divdi3:
   179ac:    7d 04             	[--sp] = {rets, r13-r4}
   179ae:    e2 9f             	sp += -0x4
   179b0:    2c 15             	r13_r12 = r3_r2
   179b2:    06 15             	r7_r6 = r1_r0
   179b4:    62 15             	r3_r2 = r7_r6
   179b6:    d0 e1 0f 2f       	r3_r2 >>>= 0x3f
   179ba:    90 e1 31 97       	r9 = r3 ^ r7
   179be:    90 e1 21 86       	r8 = r2 ^ r6
   179c2:    b4 e0 82 02       	r0 = r8 - r2
   179c6:    b8 e0 92 13       	r1 = r9 - r3 - !c
   179ca:    c8 15             	r9_r8 = r13_r12
   179cc:    d0 e1 0f 8f       	r9_r8 >>>= 0x3f
   179d0:    90 e1 91 bd       	r11 = r9 ^ r13
   179d4:    90 e1 81 ac       	r10 = r8 ^ r12
   179d8:    b4 e0 a2 28       	r2 = r10 - r8
   179dc:    44 20             	r4 = 0x0
   179de:    b8 f0 b2 39       	r3 = r11 - r9 - !c  #
   179e2:    84 20             		 [sp] = r4
   179e4:    80 ea 3c 00       	call 0x78 <__udivmoddi4 : 17a60 >
   179e8:    90 e1 d1 37       	r3 = r13 ^ r7
   179ec:    90 e1 c1 26       	r2 = r12 ^ r6
   179f0:    d0 e1 0f 2f       	r3_r2 >>>= 0x3f
   179f4:    90 e1 11 53       	r5 = r1 ^ r3
   179f8:    90 e1 01 42       	r4 = r0 ^ r2
   179fc:    c0 1e             	r0 = r4 - r2
   179fe:    b8 e0 52 13       	r1 = r5 - r3 - !c
   17a02:    02 81             	sp += 0x4
   17a04:    5d 04             	{pc, r13-r4} = [sp++]


__fixdfsi:
   17a06:    75 04             	[--sp] = {rets, r5, r4}
   17a08:    02 15             	r3_r2 = r1_r0
   17a0a:    d0 e1 04 2b       	r3_r2 >>= 0x34
   17a0e:    44 e0 ff 07       	r4 = 0x7ff <alg_code_size+0x32E : 7fe >
   17a12:    a4 19             	r4 &= r2
   17a14:    45 20             	r5 = 0x0
   17a16:    32 e1 01 4c       	r2 = r4 + -0x3ff
   17a1a:    b8 e0 50 35       	r3 = r5 + r5 + c
   17a1e:    82 fd 1a 00       	ifs (r2 < 0x0) goto 0x34 <__fixdfsi+0x50 : 17a56 >
   17a22:    82 f9 07 40       	if (r2 < 0x20) goto 0xe <__fixdfsi+0x2E : 17a34 >
   17a26:    60 e0 00 54       	r5 = 0x80000000
   17a2a:    31 ed 00 00       	ifs (r1 >= 0x0) {
   17a2e:    e5 e0 ff 53       		r5 = r5 + 0xFFFFFFFF
                               	}
   17a32:    04 91             	goto 0x22 <__fixdfsi+0x50 : 17a56 >
   17a34:    c4 ff ff ff 0f 00 	r4 = 0xfffff <$data.__3+0xBDBE : ffffe >
   17a3a:    90 e1 12 54       	r5 = r1 & r4
   17a3e:    04 16             	r4 = r0
   17a40:    35 34             	r5 |= 0x100000
   17a42:    d0 e1 0f 0f       	r1_r0 >>>= 0x3f
   17a46:    30 20             	r0 |= 0x1
   17a48:    a2 e0 34 20       	r2 = 0x34 - r2
   17a4c:    d8 e1 02 42       	r5_r4 >>= r2
   17a50:    f8 e1 40 00       	r1_r0 = r4 * r0 (u)
   17a54:    05 16             	r5 = r0
   17a56:    50 16             	r0 = r5
   17a58:    55 04             	{pc, r5, r4} = [sp++]


__subdf3:
   17a5a:    3b 3f             	r3 ^= 0x80000000
   17a5c:    ff ea 3c fe       	goto -0x388 <__adddf3 : 176d8 >


__udivmoddi4:
   17a60:    7f 04             	[--sp] = {rets, r15-r4}
   17a62:    e2 9b             	sp += -0x14
   17a64:    d4 e9 48 c0       	r12 = [sp+72]
   17a68:    18 16             	r8 = r1
   17a6a:    07 16             	r7 = r0
   17a6c:    01 4e             	if (r1 == 0) goto 0x1c <__udivmoddi4+0x2A : 17a8a >
   17a6e:    02 58             	if (r2 == 0) goto 0x30 <__udivmoddi4+0x40 : 17aa0 >
   17a70:    13 4c             	if (r3 == 0) goto 0x58 <__udivmoddi4+0x6A : 17aca >
   17a72:    80 e1 00 41       	r4 = clz(r1)
   17a76:    80 e1 00 53       	r5 = clz(r3)
   17a7a:    54 1f             	r4 = r5 - r4
   17a7c:    84 f9 44 40       	if (r4 < 0x20) goto 0x88 <__udivmoddi4+0xA8 : 17b08 >
   17a80:    42 20             	r2 = 0x0
   17a82:    43 20             	r3 = 0x0
   17a84:    8c f8 07 00       	if (r12 != 0x0) goto 0xe <__udivmoddi4+0x36 : 17a96 >
   17a88:    04 88             	goto 0x10 <__udivmoddi4+0x3A : 17a9a >
   17a8a:    13 51             	if (r3 == 0) goto 0x62 <__udivmoddi4+0x8E : 17aee >
   17a8c:    42 20             	r2 = 0x0
   17a8e:    43 20             	r3 = 0x0
   17a90:    0c f8 03 00       	if (r12 == 0x0) goto 0x6 <__udivmoddi4+0x3A : 17a9a >
   17a94:    41 20             	r1 = 0x0
   17a96:    50 ec c1 00       	d[r12+0x0] = r1_r0
   17a9a:    20 16             	r0 = r2
   17a9c:    41 20             	r1 = 0x0
   17a9e:    64 89             	goto 0x192 <__udivmoddi4+0x1D2 : 17c32 >
   17aa0:    13 5c             	if (r3 == 0) goto 0x78 <__udivmoddi4+0xBA : 17b1a >
   17aa2:    27 4f             	if (r7 == 0) goto 0x9e <__udivmoddi4+0xE2 : 17b42 >
   17aa4:    34 e1 ff 3f       	r4 = r3 + -0x1
   17aa8:    34 fa c5 00       	if ((r4 & r3) == 0) goto 0x18a <__udivmoddi4+0x1D6 : 17c36 >
   17aac:    80 e1 00 41       	r4 = clz(r1)
   17ab0:    80 e1 00 53       	r5 = clz(r3)
   17ab4:    54 1f             	r4 = r5 - r4
   17ab6:    04 f9 e3 3f       	if (r4 >= 0x1f) goto -0x3a <__udivmoddi4+0x20 : 17a80 >
   17aba:    d4 e9 05 c0       	[sp+4] = r12
   17abe:    48 81             	r0 = r4 + 0x1
   17ac0:    c8 e1 72 10       	r1 = r7 >> r0
   17ac4:    a4 e0 1f 40       	r4 = 0x1F - r4
   17ac8:    34 87             	goto 0xce <__udivmoddi4+0x138 : 17b98 >
   17aca:    34 e1 ff 2f       	r4 = r2 + -0x1
   17ace:    24 fa 47 00       	if ((r4 & r2) == 0) goto 0x8e <__udivmoddi4+0x100 : 17b60 >
   17ad2:    80 e1 00 01       	r0 = clz(r1)
   17ad6:    80 e1 00 12       	r1 = clz(r2)
   17ada:    c9 21             	r1 += 0x21
   17adc:    10 1e             	r0 = r1 - r0
   17ade:    c1 14             	r9 = 0
   17ae0:    d4 e9 05 c0       	[sp+4] = r12
   17ae4:    80 f8 52 40       	if (r0 != 0x20) goto 0xa4 <__udivmoddi4+0x12C : 17b8c >
   17ae8:    46 20             	r6 = 0x0
   17aea:    48 20             	r0 = 0x20
   17aec:    24 9d             	goto 0xba <__udivmoddi4+0x148 : 17ba8 >
   17aee:    0c f8 07 00       	if (r12 == 0x0) goto 0xe <__udivmoddi4+0xA0 : 17b00 >
   17af2:    f4 e1 70 02       	r0 = r7 / r2 (u)
   17af6:    20 1b             	r0 *= r2
   17af8:    70 1e             	r0 = r7 - r0
   17afa:    41 20             	r1 = 0x0
   17afc:    50 ec c1 00       	d[r12+0x0] = r1_r0
   17b00:    f4 e1 70 02       	r0 = r7 / r2 (u)
   17b04:    41 20             	r1 = 0x0
   17b06:    44 95             	goto 0x12a <__udivmoddi4+0x1D2 : 17c32 >
   17b08:    48 81             	r0 = r4 + 0x1
   17b0a:    46 20             	r6 = 0x0
   17b0c:    d4 e9 05 c0       	[sp+4] = r12
   17b10:    80 f8 0c 40       	if (r0 != 0x20) goto 0x18 <__udivmoddi4+0xCC : 17b2c >
   17b14:    c1 14             	r9 = 0
   17b16:    48 20             	r0 = 0x20
   17b18:    24 87             	goto 0x8e <__udivmoddi4+0x148 : 17ba8 >
   17b1a:    bc e8 00 a0       	if (r12 != 0x0) {
   17b1e:    40 20             		r0 = 0x0
   17b20:    41 20             		r1 = 0x0
   17b22:    50 ec c1 00       		d[r12+0x0] = r1_r0
                               	} else {
   17b26:    40 20             		r0 = 0x0
   17b28:    41 20             		r1 = 0x0
                               	}
   17b2a:    44 83             	goto 0x106 <__udivmoddi4+0x1D2 : 17c32 >
   17b2c:    c8 e1 72 10       	r1 = r7 >> r0
   17b30:    a4 e0 1f 40       	r4 = 0x1F - r4
   17b34:    c8 e1 80 54       	r5 = r8 << r4
   17b38:    51 19             	r1 |= r5
   17b3a:    c8 e1 82 90       	r9 = r8 >> r0
   17b3e:    47 1a             	r7 <<= r4
   17b40:    14 92             	goto 0x64 <__udivmoddi4+0x146 : 17ba6 >
   17b42:    0c f8 09 00       	if (r12 == 0x0) goto 0x12 <__udivmoddi4+0xF8 : 17b58 >
   17b46:    f4 e1 10 03       	r0 = r1 / r3 (u)
   17b4a:    30 1b             	r0 *= r3
   17b4c:    10 1e             	r0 = r1 - r0
   17b4e:    41 20             	r1 = 0x0
   17b50:    d0 e1 00 02       	r1_r0 <<= 0x20
   17b54:    50 ec c1 00       	d[r12+0x0] = r1_r0
   17b58:    f4 e1 80 03       	r0 = r8 / r3 (u)
   17b5c:    41 20             	r1 = 0x0
   17b5e:    34 89             	goto 0xd2 <__udivmoddi4+0x1D2 : 17c32 >
   17b60:    bc e8 00 80       	if (r12 != 0x0) {
   17b64:    90 e1 42 a7       		r10 = r4 & r7
   17b68:    c3 14             		r11 = 0
   17b6a:    50 ec c1 a0       		d[r12+0x0] = r11_r10
                               	}
   17b6e:    02 f8 60 02       	if (r2 == 0x1) goto 0xc0 <__udivmoddi4+0x1D2 : 17c32 >
   17b72:    90 e1 43 02       	r0 = r4 & ~r2
   17b76:    80 e1 00 00       	r0 = clz(r0)
   17b7a:    01 1a             	r1 <<= r0
   17b7c:    a2 e0 20 00       	r2 = 0x20 - r0
   17b80:    c8 e1 72 02       	r0 = r7 >> r2
   17b84:    10 19             	r0 |= r1
   17b86:    c8 e1 82 12       	r1 = r8 >> r2
   17b8a:    24 93             	goto 0xa6 <__udivmoddi4+0x1D2 : 17c32 >
   17b8c:    00 fc 6b 3e       	if (r0 > 0x1f) goto 0xd6 <__udivmoddi4+0x206 : 17c66 >
   17b90:    c8 e1 72 10       	r1 = r7 >> r0
   17b94:    a4 e0 20 00       	r4 = 0x20 - r0
   17b98:    c8 e1 80 54       	r5 = r8 << r4
   17b9c:    51 19             	r1 |= r5
   17b9e:    c8 e1 82 90       	r9 = r8 >> r0
   17ba2:    47 1a             	r7 <<= r4
   17ba4:    46 20             	r6 = 0x0
   17ba6:    18 16             	r8 = r1
   17ba8:    11 3f             	r1 = -0x1
   17baa:    3c e1 ff 2f       	r12 = r2 + -0x1
   17bae:    d0 e9 09 20       	d[sp+8] = r3_r2
   17bb2:    b8 e0 30 d1       	r13 = r3 + r1 + c
   17bb6:    42 20             	r2 = 0x0
   17bb8:    14 83             	goto 0x46 <__udivmoddi4+0x1A0 : 17c00 >
   17bba:    c0 e1 8f f9       	r15 = r8 >> 0x1f
   17bbe:    af e1 fc 90       	r15 <= insert(r9, p:0x1, l:0x1f)
   17bc2:    c0 e1 7f e9       	r14 = r7 >> 0x1f
   17bc6:    ae e1 fc 80       	r14 <= insert(r8, p:0x1, l:0x1f)
   17bca:    b4 e0 c2 4e       	r4 = r12 - r14
   17bce:    b8 e0 d2 5f       	r5 = r13 - r15 - !c
   17bd2:    d0 e1 0f 4f       	r5_r4 >>>= 0x3f
   17bd6:    d0 e9 08 80       	r9_r8 = d[sp+8]
   17bda:    90 e1 52 b9       	r11 = r5 & r9
   17bde:    90 e1 42 a8       	r10 = r4 & r8
   17be2:    b4 e0 e2 8a       	r8 = r14 - r10
   17be6:    b8 e0 f2 9b       	r9 = r15 - r11 - !c
   17bea:    61 a1             	r1 = r6 << 0x1
   17bec:    21 19             	r1 |= r2
   17bee:    e2 bf             	r2 = r6 >> 0x1f
   17bf0:    a2 e1 fc 70       	r2 <= insert(r7, p:0x1, l:0x1f)
   17bf4:    63 e1 01 40       	r3 = r4 & 0x1
   17bf8:    27 16             	r7 = r2
   17bfa:    f8 3f             	r0 += -0x1
   17bfc:    16 16             	r6 = r1
   17bfe:    32 16             	r2 = r3
   17c00:    e0 5c             	if (r0 != 0) goto -0x48 <__udivmoddi4+0x15A : 17bba >
   17c02:    60 d5             	r1_r0 = r7_r6  #
   17c04:    04 21             		 r4 = [sp+4]
   17c06:    43 20             	r3 = 0x0
   17c08:    d0 e1 0f 09       	r1_r0 >>= 0x1f
   17c0c:    47 20             	r7 = 0x0
   17c0e:    d0 e1 01 60       	r7_r6 <<= 0x1
   17c12:    04 42             	if (r4 == 0) goto 0x4 <__udivmoddi4+0x1B8 : 17c18 >
   17c14:    50 ec 41 80       	d[r4+0x0] = r9_r8
   17c18:    74 e1 01 60       	r4 = r6 & 0xFFFFFFFE
   17c1c:    45 20             	r5 = 0x0
   17c1e:    d0 e1 00 02       	r1_r0 <<= 0x20
   17c22:    90 e1 10 75       	r7 = r1 | r5
   17c26:    90 e1 00 64       	r6 = r0 | r4
   17c2a:    90 e1 70 13       	r1 = r7 | r3
   17c2e:    90 e1 60 02       	r0 = r6 | r2
   17c32:    02 85             	sp += 0x14
   17c34:    5f 04             	{pc, r15-r4} = [sp++]
   17c36:    0c f8 0c 00       	if (r12 == 0x0) goto 0x18 <__udivmoddi4+0x1F2 : 17c52 >
   17c3a:    41 20             	r1 = 0x0
   17c3c:    90 e1 42 68       	r6 = r4 & r8
   17c40:    47 20             	r7 = 0x0
   17c42:    d0 e1 00 62       	r7_r6 <<= 0x20
   17c46:    90 e1 70 b1       	r11 = r7 | r1
   17c4a:    90 e1 60 a0       	r10 = r6 | r0
   17c4e:    50 ec c1 a0       	d[r12+0x0] = r11_r10
   17c52:    90 e1 43 03       	r0 = r4 & ~r3
   17c56:    80 e1 00 00       	r0 = clz(r0)
   17c5a:    a0 e0 20 00       	r0 = 0x20 - r0
   17c5e:    c8 e1 82 00       	r0 = r8 >> r0
   17c62:    41 20             	r1 = 0x0
   17c64:    f7 86             	goto -0x34 <__udivmoddi4+0x1D2 : 17c32 >
   17c66:    31 e1 e0 0f       	r1 = r0 + -0x20
   17c6a:    c8 e1 72 a1       	r10 = r7 >> r1
   17c6e:    a5 e0 40 00       	r5 = 0x40 - r0
   17c72:    c8 e1 80 45       	r4 = r8 << r5
   17c76:    90 e1 40 4a       	r4 = r4 | r10
   17c7a:    c8 e1 70 65       	r6 = r7 << r5
   17c7e:    c8 e1 82 81       	r8 = r8 >> r1
   17c82:    47 16             	r7 = r4
   17c84:    c7 91             	goto -0xde <__udivmoddi4+0x148 : 17ba8 >


__ledf2:
   17c86:    7c 04             	[--sp] = {rets, r12-r4}
   17c88:    77 e1 00 14       	r7 = r1 & 0x7FFFFFFF
   17c8c:    06 16             	r6 = r0
   17c8e:    ca ff 00 00 f0 7f 	r10 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   17c94:    f8 e0 00 60       	r8 = r6 - 0x0
   17c98:    b8 e0 72 5a       	r5 = r7 - r10 - !c
   17c9c:    64 e0 00 45       	r4 = psr
   17ca0:    90 e1 50 58       	r5 = r5 | r8
   17ca4:    b4 e1 85 40       	r4 = sextra(r4, p:0x1, l:0x1)
   17ca8:    4b e0 01 00       	r11 = 0x1 <mem_code_size : 0 >
   17cac:    54 fb 41 00       	if ((r4 & r5) != 0) goto 0x82 <__ledf2+0xAC : 17d32 >
   17cb0:    79 e1 00 34       	r9 = r3 & 0x7FFFFFFF
   17cb4:    28 16             	r8 = r2
   17cb6:    fc e0 00 20       	r12 = r2 - 0x0
   17cba:    b8 e0 92 5a       	r5 = r9 - r10 - !c
   17cbe:    64 e0 00 45       	r4 = psr
   17cc2:    90 e1 50 5c       	r5 = r5 | r12
   17cc6:    b4 e1 85 40       	r4 = sextra(r4, p:0x1, l:0x1)
   17cca:    54 fb 32 00       	if ((r4 & r5) != 0) goto 0x64 <__ledf2+0xAC : 17d32 >
   17cce:    90 e1 90 57       	r5 = r9 | r7
   17cd2:    90 e1 20 46       	r4 = r2 | r6
   17cd6:    54 19             	r4 |= r5
   17cd8:    04 52             	if (r4 == 0) goto 0x24 <__ledf2+0x78 : 17cfe >
   17cda:    90 e1 32 51       	r5 = r3 & r1
   17cde:    90 e1 22 40       	r4 = r2 & r0
   17ce2:    85 fd 0e 00       	ifs (r5 < 0x0) goto 0x1c <__ledf2+0x7C : 17d02 >
   17ce6:    84 1e             	r4 = r0 - r2
   17ce8:    b8 e0 12 43       	r4 = r1 - r3 - !c
   17cec:    64 e0 00 45       	r4 = psr
   17cf0:    c5 a3             	r5 = r4 >> 0x3
   17cf2:    5c 19             	r4 ^= r5
   17cf4:    4b e0 ff ff       	r11 = -0x1 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >
   17cf8:    54 e8 13 00       	if ((r4 & 0x1) == 0) goto 0x26 <__ledf2+0x9C : 17d22 >
   17cfc:    04 9a             	goto 0x34 <__ledf2+0xAC : 17d32 >
   17cfe:    c3 14             	r11 = 0
   17d00:    04 98             	goto 0x30 <__ledf2+0xAC : 17d32 >
   17d02:    84 1e             	r4 = r0 - r2
   17d04:    b8 e0 12 53       	r5 = r1 - r3 - !c
   17d08:    64 e0 00 65       	r6 = psr
   17d0c:    b7 e1 05 60       	r7 = sextra(r6, p:0x0, l:0x1)
   17d10:    b6 e1 85 61       	r6 = sextra(r6, p:0x3, l:0x1)
   17d14:    7e 19             	r6 ^= r7
   17d16:    ee 19             	r6 = ~r6
   17d18:    54 19             	r4 |= r5
   17d1a:    4b e0 ff ff       	r11 = -0x1 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >
   17d1e:    64 fb 08 00       	if ((r4 & r6) != 0) goto 0x10 <__ledf2+0xAC : 17d32 >
   17d22:    90 e1 11 43       	r4 = r1 ^ r3
   17d26:    28 19             	r0 ^= r2
   17d28:    40 19             	r0 |= r4
   17d2a:    4b e0 01 00       	r11 = 0x1 <mem_code_size : 0 >
   17d2e:    80 41             	if (r0 != 0) goto 0x2 <__ledf2+0xAC : 17d32 >
   17d30:    0b 16             	r11 = r0
   17d32:    b0 16             	r0 = r11
   17d34:    5c 04             	{pc, r12-r4} = [sp++]


__gedf2:
   17d36:    7c 04             	[--sp] = {rets, r12-r4}
   17d38:    77 e1 00 14       	r7 = r1 & 0x7FFFFFFF
   17d3c:    06 16             	r6 = r0
   17d3e:    ca ff 00 00 f0 7f 	r10 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   17d44:    f8 e0 00 60       	r8 = r6 - 0x0
   17d48:    b8 e0 72 5a       	r5 = r7 - r10 - !c
   17d4c:    64 e0 00 45       	r4 = psr
   17d50:    90 e1 50 58       	r5 = r5 | r8
   17d54:    b4 e1 85 40       	r4 = sextra(r4, p:0x1, l:0x1)
   17d58:    4b e0 ff ff       	r11 = -0x1 <RAM_LIMIT_H+0xFFFFFFFFFFE5FFFE : fffffffffffffffe >
   17d5c:    54 fb 3d 00       	if ((r4 & r5) != 0) goto 0x7a <__gedf2+0xA4 : 17dda >
   17d60:    79 e1 00 34       	r9 = r3 & 0x7FFFFFFF
   17d64:    28 16             	r8 = r2
   17d66:    fc e0 00 20       	r12 = r2 - 0x0
   17d6a:    b8 e0 92 5a       	r5 = r9 - r10 - !c
   17d6e:    64 e0 00 45       	r4 = psr
   17d72:    90 e1 50 5c       	r5 = r5 | r12
   17d76:    b4 e1 85 40       	r4 = sextra(r4, p:0x1, l:0x1)
   17d7a:    54 fb 2e 00       	if ((r4 & r5) != 0) goto 0x5c <__gedf2+0xA4 : 17dda >
   17d7e:    90 e1 90 57       	r5 = r9 | r7
   17d82:    90 e1 20 46       	r4 = r2 | r6
   17d86:    54 19             	r4 |= r5
   17d88:    04 50             	if (r4 == 0) goto 0x20 <__gedf2+0x74 : 17daa >
   17d8a:    90 e1 32 51       	r5 = r3 & r1
   17d8e:    90 e1 22 40       	r4 = r2 & r0
   17d92:    85 fd 0c 00       	ifs (r5 < 0x0) goto 0x18 <__gedf2+0x78 : 17dae >
   17d96:    84 1e             	r4 = r0 - r2
   17d98:    b8 e0 12 43       	r4 = r1 - r3 - !c
   17d9c:    64 e0 00 45       	r4 = psr
   17da0:    c5 a3             	r5 = r4 >> 0x3
   17da2:    5c 19             	r4 ^= r5
   17da4:    54 e8 11 00       	if ((r4 & 0x1) == 0) goto 0x22 <__gedf2+0x94 : 17dca >
   17da8:    04 98             	goto 0x30 <__gedf2+0xA4 : 17dda >
   17daa:    c3 14             	r11 = 0
   17dac:    04 96             	goto 0x2c <__gedf2+0xA4 : 17dda >
   17dae:    84 1e             	r4 = r0 - r2
   17db0:    b8 e0 12 53       	r5 = r1 - r3 - !c
   17db4:    64 e0 00 65       	r6 = psr
   17db8:    b7 e1 05 60       	r7 = sextra(r6, p:0x0, l:0x1)
   17dbc:    b6 e1 85 61       	r6 = sextra(r6, p:0x3, l:0x1)
   17dc0:    7e 19             	r6 ^= r7
   17dc2:    ee 19             	r6 = ~r6
   17dc4:    54 19             	r4 |= r5
   17dc6:    64 fb 08 00       	if ((r4 & r6) != 0) goto 0x10 <__gedf2+0xA4 : 17dda >
   17dca:    90 e1 11 43       	r4 = r1 ^ r3
   17dce:    28 19             	r0 ^= r2
   17dd0:    40 19             	r0 |= r4
   17dd2:    4b e0 01 00       	r11 = 0x1 <mem_code_size : 0 >
   17dd6:    80 41             	if (r0 != 0) goto 0x2 <__gedf2+0xA4 : 17dda >
   17dd8:    0b 16             	r11 = r0
   17dda:    b0 16             	r0 = r11
   17ddc:    5c 04             	{pc, r12-r4} = [sp++]


__unorddf2:
   17dde:    75 04             	[--sp] = {rets, r5, r4}
   17de0:    bb 3f             	r3 &= 0x7fffffff
   17de2:    c4 ff 00 00 f0 7f 	r4 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   17de8:    f5 e0 00 20       	r5 = r2 - 0x0
   17dec:    b8 e0 32 24       	r2 = r3 - r4 - !c
   17df0:    64 e0 00 35       	r3 = psr
   17df4:    52 19             	r2 |= r5
   17df6:    b3 e1 85 30       	r3 = sextra(r3, p:0x1, l:0x1)
   17dfa:    b2 19             	r2 &= r3
   17dfc:    b9 3f             	r1 &= 0x7fffffff
   17dfe:    f3 e0 00 00       	r3 = r0 - 0x0
   17e02:    b8 e0 12 04       	r0 = r1 - r4 - !c
   17e06:    64 e0 00 15       	r1 = psr
   17e0a:    30 19             	r0 |= r3
   17e0c:    b1 e1 85 10       	r1 = sextra(r1, p:0x1, l:0x1)
   17e10:    90 19             	r0 &= r1
   17e12:    90 e1 00 12       	r1 = r0 | r2
   17e16:    40 21             	r0 = 0x1
   17e18:    81 41             	if (r1 != 0) goto 0x2 <__unorddf2+0x3E : 17e1c >
   17e1a:    10 16             	r0 = r1
   17e1c:    55 04             	{pc, r5, r4} = [sp++]


__eqdf2:
   17e1e:    97 93             	goto -0x19a <__ledf2 : 17c86 >


__ltdf2:
   17e20:    97 92             	goto -0x19c <__ledf2 : 17c86 >


__nedf2:
   17e22:    97 91             	goto -0x19e <__ledf2 : 17c86 >


__gtdf2:
   17e24:    c7 88             	goto -0xf0 <__gedf2 : 17d36 >


normalize:
   17e26:    74 04             	[--sp] = {rets, r4}
   17e28:    50 ec 00 20       	r3_r2 = d[r0+0x0]
   17e2c:    41 21             	r1 = 0x1
   17e2e:    f4 e0 00 20       	r4 = r2 - 0x0
   17e32:    b8 e0 32 11       	r1 = r3 - r1 - !c
   17e36:    64 e0 00 15       	r1 = psr
   17e3a:    21 ea 02 50       	if ((r1 & 0x2) == 0) {
   17e3e:    80 e1 00 12       		r1 = clz(r2)
   17e42:    31 25             		r1 |= 0x20
                               	} else {
   17e44:    80 e1 00 13       		r1 = clz(r3)
                               	}
   17e48:    34 e1 f5 1f       	r4 = r1 + -0xb
   17e4c:    d8 e1 00 24       	r3_r2 <<= r4
   17e50:    a1 e0 0c 10       	r1 = 0xC - r1
   17e54:    50 ec 01 20       	d[r0+0x0] = r3_r2
   17e58:    10 16             	r0 = r1
   17e5a:    54 04             	{pc, r4} = [sp++]


__divdf3:
   17e5c:    7f 04             	[--sp] = {rets, r15-r4}
   17e5e:    e2 95             	sp += -0x2c
   17e60:    c6 ff ff ff 0f 00 	r6 = 0xfffff <$data.__3+0xBDBE : ffffe >
   17e66:    90 e1 12 56       	r5 = r1 & r6
   17e6a:    04 16             	r4 = r0
   17e6c:    90 e1 32 96       	r9 = r3 & r6
   17e70:    d0 e9 25 40       	d[sp+36] = r5_r4
   17e74:    28 16             	r8 = r2
   17e76:    d0 e9 1d 80       	d[sp+28] = r9_r8
   17e7a:    90 e1 31 51       	r5 = r3 ^ r1
   17e7e:    90 e1 21 40       	r4 = r2 ^ r0
   17e82:    6b e1 00 54       	r11 = r5 & 0x80000000
   17e86:    24 15             	r5_r4 = r3_r2
   17e88:    d0 e1 04 4b       	r5_r4 >>= 0x34
   17e8c:    46 e0 ff 07       	r6 = 0x7ff <alg_code_size+0x32E : 7fe >
   17e90:    90 e1 42 76       	r7 = r4 & r6
   17e94:    04 15             	r5_r4 = r1_r0
   17e96:    d0 e1 04 4b       	r5_r4 >>= 0x34
   17e9a:    c6 19             	r6 &= r4
   17e9c:    34 e1 ff 6f       	r4 = r6 + -0x1
   17ea0:    c2 14             	r10 = 0
   17ea2:    08 ff fd 47 aa 00 	if (r4 > 0x7fd) goto 0x154 <__divdf3+0x1A0 : 17ffc >
   17ea8:    34 e1 ff 7f       	r4 = r7 + -0x1
   17eac:    02 ff fe 47 a5 00 	if (r4 >= 0x7fe) goto 0x14a <__divdf3+0x1A0 : 17ffc >
   17eb2:    86 23             	[sp+12] = r6
   17eb4:    87 26             	[sp+24] = r7
   17eb6:    d0 e9 01 a0       	d[sp] = r11_r10
   17eba:    40 20             	r0 = 0x0
   17ebc:    80 22             	[sp+8] = r0
   17ebe:    d0 e9 24 c0       	r13_r12 = d[sp+36]
   17ec2:    49 e1 80 99       	r9 = r9 | 0x100000
   17ec6:    43 e1 80 d9       	r3 = r13 | 0x100000
   17eca:    8e 15             	r15_r14 = r9_r8
   17ecc:    d0 e1 05 e9       	r15_r14 >>= 0x15
   17ed0:    c0 ff 33 f3 04 75 	r0 = 0x7504f333 <RAM_LIMIT_H+0x74EAF332 : 7504f332 >
   17ed6:    b4 e0 02 4e       	r4 = r0 - r14
   17eda:    f8 e1 40 6e       	r7_r6 = r4 * r14 (u)
   17ede:    d0 e1 00 6a       	r7_r6 >>= 0x20
   17ee2:    41 20             	r1 = 0x0
   17ee4:    aa e0 00 60       	r10 = 0x0 - r6
   17ee8:    b8 e0 12 b7       	r11 = r1 - r7 - !c
   17eec:    f8 e1 a0 44       	r5_r4 = r10 * r4 (u)
   17ef0:    d0 e1 0f 49       	r5_r4 >>= 0x1f
   17ef4:    f8 e1 40 6e       	r7_r6 = r4 * r14 (u)
   17ef8:    d0 e1 00 6a       	r7_r6 >>= 0x20
   17efc:    aa e0 00 60       	r10 = 0x0 - r6
   17f00:    b8 e0 12 b7       	r11 = r1 - r7 - !c
   17f04:    f8 e1 a0 44       	r5_r4 = r10 * r4 (u)
   17f08:    d0 e1 0f 49       	r5_r4 >>= 0x1f
   17f0c:    f8 e1 40 6e       	r7_r6 = r4 * r14 (u)
   17f10:    d0 e1 00 6a       	r7_r6 >>= 0x20
   17f14:    aa e0 00 60       	r10 = 0x0 - r6
   17f18:    b8 e0 12 b7       	r11 = r1 - r7 - !c
   17f1c:    f8 e1 a0 44       	r5_r4 = r10 * r4 (u)
   17f20:    d0 e1 0f 49       	r5_r4 >>= 0x1f
   17f24:    36 e1 ff 4f       	r6 = r4 + -0x1
   17f28:    c0 e1 8b 40       	r4 = r8 << 0xb
   17f2c:    f8 e1 60 a4       	r11_r10 = r6 * r4 (u)
   17f30:    d0 e1 00 aa       	r11_r10 >>= 0x20
   17f34:    fc e1 60 ae       	r11_r10 += r6 * r14 (u)
   17f38:    a4 e0 00 a0       	r4 = 0x0 - r10
   17f3c:    b8 e0 12 5b       	r5 = r1 - r11 - !c
   17f40:    f8 e1 40 a6       	r11_r10 = r4 * r6 (u)
   17f44:    d0 e1 00 aa       	r11_r10 >>= 0x20
   17f48:    17 3f             	r7 = -0x1
   17f4a:    3e e1 fe af       	r14 = r10 + -0x2
   17f4e:    b8 e0 b0 f7       	r15 = r11 + r7 + c
   17f52:    fc e1 50 e6       	r15_r14 += r5 * r6 (u)
   17f56:    c4 15             	r5_r4 = r13_r12
   17f58:    d0 e1 02 40       	r5_r4 <<= 0x2
   17f5c:    70 e1 03 40       	r0 = r4 & 0xFFFFFFFC
   17f60:    f8 e1 e0 60       	r7_r6 = r14 * r0 (u)
   17f64:    d0 e1 00 6a       	r7_r6 >>= 0x20
   17f68:    f8 e1 f0 a0       	r11_r10 = r15 * r0 (u)
   17f6c:    70 e1 03 a0       	r0 = r10 & 0xFFFFFFFC
   17f70:    64 1c             	r4 = r6 + r0
   17f72:    b8 e0 70 51       	r5 = r7 + r1 + c
   17f76:    c2 16             	r2 = r12
   17f78:    d0 e9 25 20       	d[sp+36] = r3_r2
   17f7c:    d0 e9 11 c0       	d[sp+16] = r13_r12
   17f80:    d0 e1 0e 29       	r3_r2 >>= 0x1e
   17f84:    f8 e1 e0 c2       	r13_r12 = r14 * r2 (u)
   17f88:    c0 16             	r0 = r12
   17f8a:    46 1c             	r6 = r4 + r0
   17f8c:    b8 e0 50 71       	r7 = r5 + r1 + c
   17f90:    d0 e1 00 6a       	r7_r6 >>= 0x20
   17f94:    d0 e1 00 aa       	r11_r10 >>= 0x20
   17f98:    d0 e1 00 ca       	r13_r12 >>= 0x20
   17f9c:    b4 e0 c0 0a       	r0 = r12 + r10
   17fa0:    b8 e0 d0 1b       	r1 = r13 + r11 + c
   17fa4:    fc e1 f0 02       	r1_r0 += r15 * r2 (u)
   17fa8:    82 1d             	r2 = r0 + r6
   17faa:    b8 e0 10 37       	r3 = r1 + r7 + c
   17fae:    d0 e9 1d 80       	d[sp+28] = r9_r8
   17fb2:    c0 ff ff ff 1f 00 	r0 = 0x1fffff <RAM_LIMIT_H+0x5FFFE : 1ffffe >
   17fb8:    f1 e0 ff 23       	r1 = r2 - 0xFFFFFFFF
   17fbc:    b8 e0 32 00       	r0 = r3 - r0 - !c
   17fc0:    64 e0 00 45       	r4 = psr
   17fc4:    10 d9             	r0 |= r1  #
   17fc6:    01 26             		 r1 = [sp+24]
   17fc8:    05 23             	r5 = [sp+12]
   17fca:    59 de             	r1 = r5 - r1  #
   17fcc:    05 22             		 r5 = [sp+8]
   17fce:    b4 e1 85 40       	r4 = sextra(r4, p:0x1, l:0x1)
   17fd2:    5e 1c             	r6 = r5 + r1
   17fd4:    04 fb 23 00       	if ((r4 & r0) != 0) goto 0x46 <__divdf3+0x1C2 : 1801e >
   17fd8:    f0 e1 20 09       	r0 = r2 * r9
   17fdc:    f8 e1 20 48       	r5_r4 = r2 * r8 (u)
   17fe0:    50 18             	r0 += r5
   17fe2:    f0 e1 30 18       	r1 = r3 * r8
   17fe6:    0d 1c             	r5 = r0 + r1
   17fe8:    d0 e9 10 00       	r1_r0 = d[sp+16]
   17fec:    d0 e1 05 03       	r1_r0 <<= 0x35
   17ff0:    b4 e0 02 a4       	r10 = r0 - r4
   17ff4:    b8 e0 12 b5       	r11 = r1 - r5 - !c
   17ff8:    fe 3f             	r6 += -0x1
   17ffa:    14 83             	goto 0x46 <__divdf3+0x1E6 : 18042 >
   17ffc:    7f e1 00 14       	r15 = r1 & 0x7FFFFFFF
   18000:    0e 16             	r14 = r0
   18002:    c5 ff 00 00 f0 7f 	r5 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   18008:    f4 e0 01 00       	r4 = r0 - 0x1
   1800c:    b8 e0 f2 45       	r4 = r15 - r5 - !c
   18010:    64 e0 00 45       	r4 = psr
   18014:    54 e8 49 08       	if ((r4 & 0x2) == 0) goto 0x92 <__divdf3+0x24E : 180aa >
   18018:    31 33             	r1 |= 0x80000
   1801a:    0a 15             	r11_r10 = r1_r0
   1801c:    44 9d             	goto 0x13a <__divdf3+0x2FC : 18158 >
   1801e:    d0 e1 01 28       	r3_r2 >>= 0x1
   18022:    f0 e1 20 09       	r0 = r2 * r9
   18026:    f8 e1 20 48       	r5_r4 = r2 * r8 (u)
   1802a:    50 18             	r0 += r5
   1802c:    f0 e1 30 18       	r1 = r3 * r8
   18030:    0d 1c             	r5 = r0 + r1
   18032:    d0 e9 10 00       	r1_r0 = d[sp+16]
   18036:    d0 e1 04 03       	r1_r0 <<= 0x34
   1803a:    b4 e0 02 a4       	r10 = r0 - r4
   1803e:    b8 e0 12 b5       	r11 = r1 - r5 - !c
   18042:    00 e1 ff 63       	r0 = r6 + 0x3ff
   18046:    0b ff ff 07 08 00 	ifs (r0 < 0x7ff) goto 0x10 <__divdf3+0x200 : 1805c >
   1804c:    c0 ff 00 00 f0 7f 	r0 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   18052:    d0 e9 00 a0       	r11_r10 = d[sp]
   18056:    90 e1 b0 b0       	r11 = r11 | r0
   1805a:    34 9e             	goto 0xfc <__divdf3+0x2FC : 18158 >
   1805c:    80 fd 3f 02       	ifs (r0 < 0x1) goto 0x7e <__divdf3+0x282 : 180de >
   18060:    d0 e1 01 a0       	r11_r10 <<= 0x1
   18064:    b4 e0 a2 48       	r4 = r10 - r8
   18068:    b8 e0 b2 59       	r5 = r11 - r9 - !c
   1806c:    64 e0 00 65       	r6 = psr
   18070:    54 19             	r4 |= r5
   18072:    b5 e1 85 60       	r5 = sextra(r6, p:0x1, l:0x1)
   18076:    47 20             	r7 = 0x0
   18078:    46 21             	r6 = 0x1
   1807a:    15 ea 00 04       	if ((r5 & r4) == 0) {
   1807e:    46 20             		r6 = 0x0
                               	}
   18080:    71 16             	r1 = r7
   18082:    d0 e1 04 03       	r1_r0 <<= 0x34
   18086:    c4 ff ff ff 0f 00 	r4 = 0xfffff <$data.__3+0xBDBE : ffffe >
   1808c:    c3 19             	r3 &= r4
   1808e:    90 e1 10 53       	r5 = r1 | r3
   18092:    90 e1 00 42       	r4 = r0 | r2
   18096:    60 1d             	r0 = r6 + r4
   18098:    b8 e0 70 15       	r1 = r7 + r5 + c
   1809c:    d0 e9 00 a0       	r11_r10 = d[sp]
   180a0:    90 e1 b0 b1       	r11 = r11 | r1
   180a4:    90 e1 a0 a0       	r10 = r10 | r0
   180a8:    24 97             	goto 0xae <__divdf3+0x2FC : 18158 >
   180aa:    7d f1 00 34       	r13 = r3 & 0x7FFFFFFF  #
   180ae:    87 26             		 [sp+24] = r7
   180b0:    2c 16             	r12 = r2
   180b2:    f4 e0 01 20       	r4 = r2 - 0x1
   180b6:    b8 e0 d2 45       	r4 = r13 - r5 - !c
   180ba:    64 e0 00 45       	r4 = psr
   180be:    54 e8 03 08       	if ((r4 & 0x2) == 0) goto 0x6 <__divdf3+0x26C : 180c8 >
   180c2:    33 33             	r3 |= 0x80000
   180c4:    2a 15             	r11_r10 = r3_r2
   180c6:    24 88             	goto 0x90 <__divdf3+0x2FC : 18158 >
   180c8:    90 e1 f1 45       	r4 = r15 ^ r5
   180cc:    04 19             	r4 |= r0
   180ce:    84 4a             	if (r4 != 0) goto 0x14 <__divdf3+0x288 : 180e4 >
   180d0:    90 e1 d1 45       	r4 = r13 ^ r5
   180d4:    24 19             	r4 |= r2
   180d6:    94 59             	if (r4 != 0) goto 0x72 <__divdf3+0x2EE : 1814a >
   180d8:    eb e0 00 5a       	r11 = r5 + 0x80000
   180dc:    14 9d             	goto 0x7a <__divdf3+0x2FC : 18158 >
   180de:    d0 e9 00 a0       	r11_r10 = d[sp]
   180e2:    14 9a             	goto 0x74 <__divdf3+0x2FC : 18158 >
   180e4:    90 e1 d1 05       	r0 = r13 ^ r5
   180e8:    20 19             	r0 |= r2
   180ea:    10 56             	if (r0 == 0) goto 0x6c <__divdf3+0x2FC : 18158 >
   180ec:    90 e1 e0 0f       	r0 = r14 | r15
   180f0:    10 56             	if (r0 == 0) goto 0x6c <__divdf3+0x302 : 1815e >
   180f2:    90 e1 20 0d       	r0 = r2 | r13
   180f6:    10 57             	if (r0 == 0) goto 0x6e <__divdf3+0x30A : 18166 >
   180f8:    f0 e0 ff e3       	r0 = r14 - 0xFFFFFFFF
   180fc:    c4 ff ff ff 0f 00 	r4 = 0xfffff <$data.__3+0xBDBE : ffffe >
   18102:    b8 e0 f2 14       	r1 = r15 - r4 - !c
   18106:    64 e0 00 25       	r2 = psr
   1810a:    10 19             	r0 |= r1
   1810c:    b1 e1 85 20       	r1 = sextra(r2, p:0x1, l:0x1)
   18110:    45 20             	r5 = 0x0
   18112:    01 fb 04 00       	if ((r1 & r0) != 0) goto 0x8 <__divdf3+0x2C2 : 1811e >
   18116:    a8 84             	r0 = sp + 36
   18118:    bf ea 85 fe       	call -0x2f6 <normalize : 17e26 >
   1811c:    05 16             	r5 = r0
   1811e:    f0 f0 ff c3       	r0 = r12 - 0xFFFFFFFF  #
   18122:    86 23             		 [sp+12] = r6
   18124:    d0 e9 01 a0       	d[sp] = r11_r10
   18128:    b8 e0 d2 14       	r1 = r13 - r4 - !c
   1812c:    64 e0 00 25       	r2 = psr
   18130:    10 19             	r0 |= r1
   18132:    b1 e1 85 20       	r1 = sextra(r2, p:0x1, l:0x1)
   18136:    01 fb 06 00       	if ((r1 & r0) != 0) goto 0xc <__divdf3+0x2EA : 18146 >
   1813a:    88 9c             	r0 = sp + 28
   1813c:    bf ea 73 fe       	call -0x31a <normalize : 17e26 >
   18140:    d0 e9 1c 80       	r9_r8 = d[sp+28]
   18144:    55 1e             	r5 = r5 - r0
   18146:    85 22             	[sp+8] = r5
   18148:    57 9a             	goto -0x28c <__divdf3+0x62 : 17ebe >
   1814a:    63 e1 00 34       	r3 = r3 & 0x80000000
   1814e:    42 20             	r2 = 0x0
   18150:    90 e1 31 b1       	r11 = r3 ^ r1
   18154:    90 e1 21 a0       	r10 = r2 ^ r0
   18158:    a0 15             	r1_r0 = r11_r10
   1815a:    02 8b             	sp += 0x2c
   1815c:    5f 04             	{pc, r15-r4} = [sp++]
   1815e:    90 e1 20 0d       	r0 = r2 | r13
   18162:    50 5a             	if (r0 == 0) goto -0x8c <__divdf3+0x27C : 180d8 >
   18164:    f7 99             	goto -0xe <__divdf3+0x2FC : 18158 >
   18166:    90 e1 b0 b5       	r11 = r11 | r5
   1816a:    f7 96             	goto -0x14 <__divdf3+0x2FC : 18158 >


normalize:
   1816c:    74 04             	[--sp] = {rets, r4}
   1816e:    50 ec 00 20       	r3_r2 = d[r0+0x0]
   18172:    41 21             	r1 = 0x1
   18174:    f4 e0 00 20       	r4 = r2 - 0x0
   18178:    b8 e0 32 11       	r1 = r3 - r1 - !c
   1817c:    64 e0 00 15       	r1 = psr
   18180:    21 ea 02 50       	if ((r1 & 0x2) == 0) {
   18184:    80 e1 00 12       		r1 = clz(r2)
   18188:    31 25             		r1 |= 0x20
                               	} else {
   1818a:    80 e1 00 13       		r1 = clz(r3)
                               	}
   1818e:    34 e1 f5 1f       	r4 = r1 + -0xb
   18192:    d8 e1 00 24       	r3_r2 <<= r4
   18196:    a1 e0 0c 10       	r1 = 0xC - r1
   1819a:    50 ec 01 20       	d[r0+0x0] = r3_r2
   1819e:    10 16             	r0 = r1
   181a0:    54 04             	{pc, r4} = [sp++]


__muldf3:
   181a2:    7f 04             	[--sp] = {rets, r15-r4}
   181a4:    e2 93             	sp += -0x34
   181a6:    ca ff ff ff 0f 00 	r10 = 0xfffff <$data.__3+0xBDBE : ffffe >
   181ac:    90 e1 12 5a       	r5 = r1 & r10
   181b0:    04 16             	r4 = r0
   181b2:    90 e1 32 da       	r13 = r3 & r10
   181b6:    d0 e9 2d 40       	d[sp+44] = r5_r4
   181ba:    2c 16             	r12 = r2
   181bc:    d0 e9 25 c0       	d[sp+36] = r13_r12
   181c0:    90 e1 31 51       	r5 = r3 ^ r1
   181c4:    90 e1 21 40       	r4 = r2 ^ r0
   181c8:    69 e1 00 54       	r9 = r5 & 0x80000000
   181cc:    24 15             	r5_r4 = r3_r2
   181ce:    d0 e1 04 4b       	r5_r4 >>= 0x34
   181d2:    46 e0 ff 07       	r6 = 0x7ff <alg_code_size+0x32E : 7fe >
   181d6:    90 e1 42 76       	r7 = r4 & r6
   181da:    04 15             	r5_r4 = r1_r0
   181dc:    d0 e1 04 4b       	r5_r4 >>= 0x34
   181e0:    c6 19             	r6 &= r4
   181e2:    34 e1 ff 6f       	r4 = r6 + -0x1
   181e6:    c0 14             	r8 = 0
   181e8:    08 ff fd 47 70 00 	if (r4 > 0x7fd) goto 0xe0 <__muldf3+0x12C : 182ce >
   181ee:    34 e1 ff 7f       	r4 = r7 + -0x1
   181f2:    02 ff fe 47 6b 00 	if (r4 >= 0x7fe) goto 0xd6 <__muldf3+0x12C : 182ce >
   181f8:    d0 e9 0d 60       	d[sp+12] = r7_r6
   181fc:    d0 e9 01 80       	d[sp] = r9_r8
   18200:    40 20             	r0 = 0x0
   18202:    80 25             	[sp+20] = r0
   18204:    c0 15             	r1_r0 = r13_r12
   18206:    d0 e1 0b 00       	r1_r0 <<= 0xb
   1820a:    d0 e9 2c 20       	r3_r2 = d[sp+44]
   1820e:    44 e0 00 f8       	r4 = -0x800 <RAM_LIMIT_H+0xFFFFFFFFFFE5F800 : fffffffffffff800 >
   18212:    84 19             	r4 &= r0
   18214:    45 20             	r5 = 0x0
   18216:    f8 e1 20 84       	r9_r8 = r2 * r4 (u)
   1821a:    33 34             	r3 |= 0x100000
   1821c:    20 15             	r1_r0 = r3_r2
   1821e:    d0 e9 19 00       	d[sp+24] = r1_r0
   18222:    4d e1 80 d9       	r13 = r13 | 0x100000
   18226:    d0 e9 25 c0       	d[sp+36] = r13_r12
   1822a:    d0 e1 05 c9       	r13_r12 >>= 0x15
   1822e:    f8 e1 c0 a0       	r11_r10 = r12 * r0 (u)
   18232:    86 15             	r7_r6 = r9_r8
   18234:    ae 16             	r14 = r10
   18236:    d0 e1 00 6a       	r7_r6 >>= 0x20
   1823a:    c7 14             	r15 = 0
   1823c:    b4 e0 a0 26       	r2 = r10 + r6
   18240:    b8 e0 50 37       	r3 = r5 + r7 + c
   18244:    f8 e1 10 64       	r7_r6 = r1 * r4 (u)
   18248:    40 e0 00 f8       	r0 = -0x800 <RAM_LIMIT_H+0xFFFFFFFFFFE5F800 : fffffffffffff800 >
   1824c:    e0 19             	r0 &= r6
   1824e:    41 20             	r1 = 0x0
   18250:    b4 e0 20 e0       	r14 = r2 + r0
   18254:    b8 e0 30 f1       	r15 = r3 + r1 + c
   18258:    40 e0 00 f8       	r0 = -0x800 <RAM_LIMIT_H+0xFFFFFFFFFFE5F800 : fffffffffffff800 >
   1825c:    90 e1 02 08       	r0 = r0 & r8
   18260:    e8 15             	r9_r8 = r15_r14
   18262:    d0 e1 00 82       	r9_r8 <<= 0x20
   18266:    41 20             	r1 = 0x0
   18268:    90 e1 90 31       	r3 = r9 | r1
   1826c:    90 e1 80 20       	r2 = r8 | r0
   18270:    e8 15             	r9_r8 = r15_r14
   18272:    d0 e1 00 8a       	r9_r8 >>= 0x20
   18276:    d0 e1 00 6a       	r7_r6 >>= 0x20
   1827a:    d0 e1 00 aa       	r11_r10 >>= 0x20
   1827e:    b4 e0 a0 06       	r0 = r10 + r6
   18282:    b8 e0 b0 17       	r1 = r11 + r7 + c
   18286:    d0 e9 18 a0       	r11_r10 = d[sp+24]
   1828a:    fc e1 b0 0c       	r1_r0 += r11 * r12 (u)
   1828e:    b4 e0 00 68       	r6 = r0 + r8
   18292:    b8 e0 10 79       	r7 = r1 + r9 + c
   18296:    d0 e9 2d a0       	d[sp+44] = r11_r10
   1829a:    61 e1 80 79       	r1 = r7 & 0x100000
   1829e:    48 d6             	r8 = r4  #
   182a0:    04 24             		 r4 = [sp+16]
   182a2:    c1 d4             	r9 = 0  #
   182a4:    05 23             		 r5 = [sp+12]
   182a6:    54 d8             	r4 += r5  #
   182a8:    05 25             		 r5 = [sp+20]
   182aa:    90 16             	r0 = r9
   182ac:    54 18             	r4 += r5
   182ae:    34 e1 01 4c       	r4 = r4 + -0x3ff
   182b2:    81 5d             	if (r1 != 0) goto 0x3a <__muldf3+0x14C : 182ee >
   182b4:    d0 e1 01 60       	r7_r6 <<= 0x1
   182b8:    d0 e1 0f e9       	r15_r14 >>= 0x1f
   182bc:    68 e1 01 e0       	r8 = r14 & 0x1
   182c0:    90 e1 70 79       	r7 = r7 | r9
   182c4:    90 e1 60 68       	r6 = r6 | r8
   182c8:    d0 e1 01 20       	r3_r2 <<= 0x1
   182cc:    04 91             	goto 0x22 <__muldf3+0x14E : 182f0 >
   182ce:    7f e1 00 14       	r15 = r1 & 0x7FFFFFFF
   182d2:    0e 16             	r14 = r0
   182d4:    c4 ff 00 00 f0 7f 	r4 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   182da:    f5 e0 01 00       	r5 = r0 - 0x1
   182de:    b8 e0 f2 54       	r5 = r15 - r4 - !c
   182e2:    64 e0 00 55       	r5 = psr
   182e6:    55 e8 1b 08       	if ((r5 & 0x2) == 0) goto 0x36 <__muldf3+0x17E : 18320 >
   182ea:    31 33             	r1 |= 0x80000
   182ec:    44 88             	goto 0x110 <__muldf3+0x25C : 183fe >
   182ee:    c4 21             	r4 += 0x1
   182f0:    d0 e9 00 80       	r9_r8 = d[sp]
   182f4:    0b ff ff 47 07 00 	ifs (r4 < 0x7ff) goto 0xe <__muldf3+0x166 : 18308 >
   182fa:    c0 ff 00 00 f0 7f 	r0 = 0x7ff00000 <RAM_LIMIT_H+0x7FD60000 : 7ff00000 >
   18300:    90 e1 90 90       	r9 = r9 | r0
   18304:    80 15             	r1_r0 = r9_r8
   18306:    34 9b             	goto 0xf6 <__muldf3+0x25C : 183fe >
   18308:    84 fe 27 00       	ifs (r4 <= 0x0) goto 0x4e <__muldf3+0x1B8 : 1835a >
   1830c:    45 20             	r5 = 0x0
   1830e:    d0 e1 04 43       	r5_r4 <<= 0x34
   18312:    c0 ff ff ff 0f 00 	r0 = 0xfffff <$data.__3+0xBDBE : ffffe >
   18318:    87 19             	r7 &= r0
   1831a:    57 19             	r7 |= r5
   1831c:    46 19             	r6 |= r4
   1831e:    14 9e             	goto 0x7c <__muldf3+0x1FA : 1839c >
   18320:    d0 e9 19 c0       	d[sp+24] = r13_r12
   18324:    7d e1 00 34       	r13 = r3 & 0x7FFFFFFF
   18328:    2c 16             	r12 = r2
   1832a:    f5 e0 01 20       	r5 = r2 - 0x1
   1832e:    b8 e0 d2 54       	r5 = r13 - r4 - !c
   18332:    64 e0 00 55       	r5 = psr
   18336:    55 e8 03 08       	if ((r5 & 0x2) == 0) goto 0x6 <__muldf3+0x19E : 18340 >
   1833a:    33 33             	r3 |= 0x80000
   1833c:    20 15             	r1_r0 = r3_r2
   1833e:    24 9f             	goto 0xbe <__muldf3+0x25C : 183fe >
   18340:    90 e1 f1 54       	r5 = r15 ^ r4
   18344:    05 19             	r5 |= r0
   18346:    a5 48             	if (r5 != 0) goto 0x90 <__muldf3+0x236 : 183d8 >
   18348:    90 e1 20 4d       	r4 = r2 | r13
   1834c:    24 54             	if (r4 == 0) goto 0xa8 <__muldf3+0x254 : 183f6 >
   1834e:    63 e1 00 34       	r3 = r3 & 0x80000000
   18352:    42 20             	r2 = 0x0
   18354:    39 19             	r1 ^= r3
   18356:    28 19             	r0 ^= r2
   18358:    24 92             	goto 0xa4 <__muldf3+0x25C : 183fe >
   1835a:    a0 e0 01 40       	r0 = 0x1 - r4
   1835e:    00 fc d1 7f       	if (r0 > 0x3f) goto -0x5e <__muldf3+0x162 : 18304 >
   18362:    8c 15             	r13_r12 = r9_r8
   18364:    28 15             	r9_r8 = r3_r2
   18366:    d8 e1 02 80       	r9_r8 >>= r0
   1836a:    a1 e0 40 00       	r1 = 0x40 - r0
   1836e:    6a 15             	r11_r10 = r7_r6
   18370:    d8 e1 00 a1       	r11_r10 <<= r1
   18374:    90 e1 b0 59       	r5 = r11 | r9
   18378:    90 e1 a0 48       	r4 = r10 | r8
   1837c:    d8 e1 00 21       	r3_r2 <<= r1
   18380:    90 e1 20 13       	r1 = r2 | r3
   18384:    48 e0 01 00       	r8 = 0x1 <mem_code_size : 0 >
   18388:    81 41             	if (r1 != 0) goto 0x2 <__muldf3+0x1EA : 1838c >
   1838a:    18 16             	r8 = r1
   1838c:    c1 14             	r9 = 0
   1838e:    90 e1 50 39       	r3 = r5 | r9
   18392:    90 e1 40 28       	r2 = r4 | r8
   18396:    d8 e1 02 60       	r7_r6 >>= r0
   1839a:    c8 15             	r9_r8 = r13_r12
   1839c:    60 e0 00 04       	r0 = 0x80000000
   183a0:    f1 e0 01 20       	r1 = r2 - 0x1
   183a4:    b8 e0 32 00       	r0 = r3 - r0 - !c
   183a8:    64 e0 00 45       	r4 = psr
   183ac:    90 e1 70 19       	r1 = r7 | r9
   183b0:    90 e1 60 08       	r0 = r6 | r8
   183b4:    54 e8 05 08       	if ((r4 & 0x2) == 0) goto 0xa <__muldf3+0x220 : 183c2 >
   183b8:    42 20             	r2 = 0x0
   183ba:    c0 21             	r0 += 0x1
   183bc:    b8 e0 10 12       	r1 = r1 + r2 + c
   183c0:    04 9e             	goto 0x3c <__muldf3+0x25C : 183fe >
   183c2:    54 e1 00 34       	r4 = r3 ^ 0x80000000
   183c6:    42 19             	r2 |= r4
   183c8:    82 5a             	if (r2 != 0) goto 0x34 <__muldf3+0x25C : 183fe >
   183ca:    62 e1 01 60       	r2 = r6 & 0x1
   183ce:    43 20             	r3 = 0x0
   183d0:    20 18             	r0 += r2
   183d2:    b8 e0 10 13       	r1 = r1 + r3 + c
   183d6:    04 93             	goto 0x26 <__muldf3+0x25C : 183fe >
   183d8:    90 e1 41 4d       	r4 = r4 ^ r13
   183dc:    24 19             	r4 |= r2
   183de:    84 51             	if (r4 != 0) goto 0x22 <__muldf3+0x260 : 18402 >
   183e0:    90 e1 00 4f       	r4 = r0 | r15
   183e4:    04 48             	if (r4 == 0) goto 0x10 <__muldf3+0x254 : 183f6 >
   183e6:    65 e1 00 14       	r5 = r1 & 0x80000000
   183ea:    44 20             	r4 = 0x0
   183ec:    90 e1 51 13       	r1 = r5 ^ r3
   183f0:    90 e1 41 02       	r0 = r4 ^ r2
   183f4:    04 84             	goto 0x8 <__muldf3+0x25C : 183fe >
   183f6:    40 20             	r0 = 0x0
   183f8:    c1 ff 00 00 f8 7f 	r1 = 0x7ff80000 <RAM_LIMIT_H+0x7FDE0000 : 7ff80000 >
   183fe:    02 8d             	sp += 0x34
   18400:    5f 04             	{pc, r15-r4} = [sp++]
   18402:    90 e1 00 0f       	r0 = r0 | r15
   18406:    00 f8 7d 01       	if (r0 == 0x0) goto -0x106 <__muldf3+0x162 : 18304 >
   1840a:    90 e1 20 0d       	r0 = r2 | r13
   1840e:    00 f8 79 01       	if (r0 == 0x0) goto -0x10e <__muldf3+0x162 : 18304 >
   18412:    f0 e0 ff e3       	r0 = r14 - 0xFFFFFFFF
   18416:    b8 e0 f2 1a       	r1 = r15 - r10 - !c
   1841a:    64 e0 00 25       	r2 = psr
   1841e:    10 19             	r0 |= r1
   18420:    b1 e1 85 20       	r1 = sextra(r2, p:0x1, l:0x1)
   18424:    44 20             	r4 = 0x0
   18426:    01 fb 04 00       	if ((r1 & r0) != 0) goto 0x8 <__muldf3+0x290 : 18432 >
   1842a:    a8 8c             	r0 = sp + 44
   1842c:    bf ea 9e fe       	call -0x2c4 <normalize : 1816c >
   18430:    04 16             	r4 = r0
   18432:    f0 e0 ff c3       	r0 = r12 - 0xFFFFFFFF
   18436:    b8 e0 d2 1a       	r1 = r13 - r10 - !c
   1843a:    64 e0 00 25       	r2 = psr
   1843e:    10 19             	r0 |= r1
   18440:    b1 e1 85 20       	r1 = sextra(r2, p:0x1, l:0x1)
   18444:    d0 e9 01 80       	d[sp] = r9_r8
   18448:    d0 e9 0d 60       	d[sp+12] = r7_r6
   1844c:    01 fb 07 00       	if ((r1 & r0) != 0) goto 0xe <__muldf3+0x2BC : 1845e >
   18450:    a8 84             	r0 = sp + 36
   18452:    bf ea 8b fe       	call -0x2ea <normalize : 1816c >
   18456:    d0 e9 24 c0       	r13_r12 = d[sp+36]
   1845a:    04 18             	r4 += r0
   1845c:    04 82             	goto 0x4 <__muldf3+0x2C0 : 18462 >
   1845e:    d0 e9 18 c0       	r13_r12 = d[sp+24]
   18462:    84 25             	[sp+20] = r4
   18464:    67 8f             	goto -0x262 <__muldf3+0x62 : 18204 >
   18466:    00 00             	nop
   18468:    00 00             	nop
   1846a:    00 00             	nop
   1846c:    00 00             	nop
   1846e:    00 00             	nop


norflash_check_in.spi0_porta_config:
   18470:	 00 00 00 00                     ....


norflash_check_in.spi0_portb_config:
   18474:	 08 00 00 00                     ....


nvram_boot_tag:
   18478:	 bf ec cb d9 c6 f4 b6 af         ........
   18480:	 06 00 00 00 04 00 00 00         ........
   18488:	 03 00 00 00                     ....


wtgv2_LSFCosTab_FIX_Q12:
   1848c:	 00 20 fe 1f f6 1f ea 1f         . ......
   18494:	 d8 1f c2 1f a8 1f 88 1f         ........
   1849c:	 62 1f 3a 1f 0a 1f d8 1e         b.:.....
   184a4:	 a0 1e 62 1e 22 1e dc 1d         ..b."...
   184ac:	 90 1d 42 1d ee 1c 96 1c         ..B.....
   184b4:	 3a 1c d8 1b 72 1b 0a 1b         :...r...
   184bc:	 9c 1a 2a 1a b4 19 3a 19         ..*...:.
   184c4:	 bc 18 3c 18 b6 17 2e 17         ..<.....
   184cc:	 a0 16 10 16 7e 15 e8 14         ....~...
   184d4:	 4e 14 b0 13 10 13 6e 12         N.....n.
   184dc:	 c8 11 1e 11 74 10 c6 0f         ....t...
   184e4:	 16 0f 64 0e ae 0d f8 0c         ..d.....
   184ec:	 40 0c 84 0b c8 0a 0a 0a         @.......
   184f4:	 4a 09 8a 08 c6 07 02 07         J.......
   184fc:	 3e 06 78 05 b2 04 ea 03         >.x.....
   18504:	 22 03 5a 02 92 01 ca 00         ".Z.....
   1850c:	 00 00 36 ff 6e fe a6 fd         ..6.n...
   18514:	 de fc 16 fc 4e fb 88 fa         ....N...
   1851c:	 c2 f9 fe f8 3a f8 76 f7         ....:.v.
   18524:	 b6 f6 f6 f5 38 f5 7c f4         ....8.|.
   1852c:	 c0 f3 08 f3 52 f2 9c f1         ....R...
   18534:	 ea f0 3a f0 8c ef e2 ee         ..:.....
   1853c:	 38 ee 92 ed f0 ec 50 ec         8.....P.
   18544:	 b2 eb 18 eb 82 ea f0 e9         ........
   1854c:	 60 e9 d2 e8 4a e8 c4 e7         `...J...
   18554:	 44 e7 c6 e6 4c e6 d6 e5         D...L...
   1855c:	 64 e5 f6 e4 8e e4 28 e4         d.....(.
   18564:	 c6 e3 6a e3 12 e3 be e2         ..j.....
   1856c:	 70 e2 24 e2 de e1 9e e1         p.$.....
   18574:	 60 e1 28 e1 f6 e0 c6 e0         `.(.....
   1857c:	 9e e0 78 e0 58 e0 3e e0         ..x.X.>.
   18584:	 28 e0 16 e0 0a e0 02 e0         (.......
   1858c:	 00 e0 00 00                     ....


wtgv2_silk_NLSF_CB_NB_MB:
   18590:	 20 00 0a 00 14 2e 64 01          .....d.
   18598:	 b8 85 01 00 f8 86 01 00         ........
   185a0:	 00 00 00 00 78 89 01 00         ....x...
   185a8:	 8a 89 01 00 00 00 00 00         ........
   185b0:	 2a 8a 01 00 72 8a 01 00         *...r...


silk_NLSF_CB1_NB_MB_Q8:
   185b8:	 0c 23 3c 53 6c 84 9d b4         .#<Sl...
   185c0:	 ce e4 0f 20 37 4d 65 7d         ... 7Me}
   185c8:	 97 af c9 e1 13 2a 42 59         .....*BY
   185d0:	 72 89 a2 b8 d1 e6 0c 19         r.......
   185d8:	 32 48 61 78 93 ac c8 df         2Hax....
   185e0:	 1a 2c 45 5a 72 87 9f b4         .,EZr...
   185e8:	 cd e1 0d 16 35 50 6a 82         ....5Pj.
   185f0:	 9c b4 cd e4 0f 19 2c 40         ......,@
   185f8:	 5a 73 8e a8 c4 de 13 18         Zs......
   18600:	 3e 52 64 78 91 a8 be d6         >Rdx....
   18608:	 16 1f 32 4f 67 78 97 aa         ..2Ogx..
   18610:	 cb e3 15 1d 2d 41 6a 7c         ....-Aj|
   18618:	 96 ab c4 e0 1e 31 4b 61         .....1Ka
   18620:	 79 8e a5 ba d1 e5 13 19         y.......
   18628:	 34 46 5d 74 8f a6 c0 db         4F]t....
   18630:	 1a 22 3e 4b 61 76 91 a7         .">Kav..
   18638:	 c2 d9 19 21 38 46 5b 71         ...!8F[q
   18640:	 8f a5 c4 df 15 22 33 48         ....."3H
   18648:	 61 75 91 ab c4 de 14 1d         au......
   18650:	 32 43 5a 75 90 a8 c5 dd         2CZu....
   18658:	 16 1f 30 42 5f 75 92 a8         ..0B_u..
   18660:	 c4 de 18 21 33 4d 74 86         ...!3Mt.
   18668:	 9e b4 c8 e0 15 1c 46 57         ......FW
   18670:	 6a 7c 95 aa c2 d9 1a 21         j|.....!
   18678:	 35 40 53 75 98 ad cc e1         5@Su....
   18680:	 1b 22 41 5f 6c 81 9b ae         ."A_l...
   18688:	 d2 e1 14 1a 48 63 71 83         ....Hcq.
   18690:	 9a b0 c8 db 22 2b 3d 4e         ...."+=N
   18698:	 5d 72 9b b1 cd e5 17 1d         ]r......
   186a0:	 36 61 7c 8a a3 b3 d1 e5         6a|.....
   186a8:	 1e 26 38 59 76 81 9e b2         .&8Yv...
   186b0:	 c8 e7 15 1d 31 3f 55 6f         ....1?Uo
   186b8:	 8e a3 c1 de 1b 30 4d 67         .....0Mg
   186c0:	 85 9e b3 c4 d7 e8 1d 2f         ......./
   186c8:	 4a 63 7c 97 b0 c6 dc ed         Jc|.....
   186d0:	 21 2a 3d 4c 5d 79 9b ae         !*=L]y..
   186d8:	 cf e1 1d 35 57 70 88 9a         ...5Wp..
   186e0:	 aa bc d0 e3 18 1e 34 54         ......4T
   186e8:	 83 96 a6 ba cb e5 25 30         ......%0
   186f0:	 40 54 68 76 9c b1 c9 e6         @Thv....


silk_NLSF_CB1_Wght_Q9:
   186f8:	 51 0b 0a 09 0a 09 0a 09         Q.......
   18700:	 ef 08 ef 08 0a 09 fc 08         ........
   18708:	 17 09 ef 08 48 0b 14 0a         ....H...
   18710:	 5a 09 3f 09 0a 09 e2 08         Z.?.....
   18718:	 e2 08 e2 08 e2 08 92 08         ........
   18720:	 b7 09 24 09 24 09 0a 09         ..$.$...
   18728:	 0a 09 0a 09 24 09 24 09         ....$.$.
   18730:	 3f 09 32 09 90 0c ce 0a         ?.2.....
   18738:	 24 09 24 09 0a 09 e2 08         $.$.....
   18740:	 ad 08 9f 08 d5 08 92 08         ........
   18748:	 9c 09 aa 09 3f 09 5a 09         ....?.Z.
   18750:	 5a 09 5a 09 5a 09 3f 09         Z.Z.Z.?.
   18758:	 67 09 0a 09 97 0d f0 0b         g.......
   18760:	 4f 08 9f 08 e2 08 e2 08         O.......
   18768:	 e2 08 ef 08 0a 09 d5 08         ........
   18770:	 d2 0c 45 0c 14 0a 5a 09         ..E...Z.
   18778:	 c7 08 ad 08 9f 08 92 08         ........
   18780:	 92 08 42 08 00 10 05 0f         ..B.....
   18788:	 ad 08 3c 0a 3c 0a 67 09         ..<.<.g.
   18790:	 0a 09 5a 09 3f 09 1a 08         ..Z.?...
   18798:	 6a 0c ac 0c 3f 09 ad 08         j...?...
   187a0:	 f9 09 82 09 24 09 0a 09         ....$...
   187a8:	 77 08 ad 08 0a 0d a0 0d         w.......
   187b0:	 a6 0a 92 08 d5 08 9c 09         ........
   187b8:	 32 09 3f 09 9f 08 35 08         2.?...5.
   187c0:	 32 09 74 09 17 09 3f 09         2.t...?.
   187c8:	 5a 09 74 09 74 09 74 09         Z.t.t.t.
   187d0:	 9c 09 3f 09 c3 0e 2d 0e         ..?...-.
   187d8:	 82 09 df 09 3f 09 e2 08         ....?...
   187e0:	 e2 08 fc 08 9f 08 00 08         ........
   187e8:	 b6 0c 99 0c 99 0a 1e 0b         ........
   187f0:	 8f 09 17 09 fc 08 fc 08         ........
   187f8:	 e2 08 4f 08 bf 0c e4 0c         ..O.....
   18800:	 c1 0a f6 0a 8f 09 d5 08         ........
   18808:	 d5 08 c7 08 4f 08 35 08         ....O.5.
   18810:	 39 0b a5 0b 49 0a 3f 09         9...I.?.
   18818:	 67 09 32 09 92 08 c7 08         g.2.....
   18820:	 c7 08 42 08 99 0c 7d 0c         ..B...}.
   18828:	 49 0a 14 0a e2 08 85 08         I.......
   18830:	 c7 08 ad 08 ad 08 5d 08         ......].
   18838:	 6a 0c ee 0c b4 0a 67 09         j.....g.
   18840:	 e2 08 e2 08 e2 08 ef 08         ........
   18848:	 92 08 42 08 45 0c c8 0c         ..B.E...
   18850:	 9c 09 0d 08 ef 08 c4 09         ........
   18858:	 3f 09 b7 09 82 09 85 08         ?.......
   18860:	 b3 0d d2 0c 0a 09 8c 0a         ........
   18868:	 57 0a aa 09 3f 09 5a 09         W...?.Z.
   18870:	 24 09 4f 08 5f 0d cf 0d         $.O._...
   18878:	 de 0b f0 0b fc 08 9e 07         ........
   18880:	 ad 08 e2 08 e2 08 e2 08         ........
   18888:	 4c 0d 26 0d 27 08 7f 0a         L.&.'...
   18890:	 39 0b 32 09 74 09 e2 08         9.2.t...
   18898:	 aa 09 ec 09 b0 0e a0 0d         ........
   188a0:	 9e 07 64 0a 51 0b df 09         ..d.Q...
   188a8:	 5a 09 3f 09 9c 09 d5 08         Z.?.....
   188b0:	 d4 0b c8 0c b4 0a 48 0b         ......H.
   188b8:	 b4 0a 6a 08 4f 08 ef 08         ..j.O...
   188c0:	 ba 08 c7 08 6f 0e 49 0e         ....o.I.
   188c8:	 e9 07 b1 07 64 0a 8c 0a         ....d...
   188d0:	 14 0a c4 09 17 09 3f 09         ......?.
   188d8:	 87 0c 55 0d 32 09 1a 08         ..U.2...
   188e0:	 48 0b 48 0b 24 09 b7 09         H.H.$...
   188e8:	 c7 08 77 08 0a 0d 26 0d         ..w...&.
   188f0:	 1e 0b dc 0a 17 09 6a 08         ......j.
   188f8:	 e2 08 ef 08 42 08 0d 08         ....B...
   18900:	 17 09 fc 08 85 08 77 08         ......w.
   18908:	 85 08 3f 09 49 0a 8c 0a         ..?.I...
   18910:	 8c 0a f9 09 67 09 82 09         ....g...
   18918:	 ad 08 d5 08 ad 08 ad 08         ........
   18920:	 24 09 74 09 2f 0a 8c 0a         $.t./...
   18928:	 de 0b ac 0c f6 0a 48 0b         ......H.
   18930:	 aa 09 1a 08 fc 08 0a 09         ........
   18938:	 32 09 4c 09 ad 08 6a 08         2.L...j.
   18940:	 4f 08 ef 08 c4 09 e9 0a         O.......
   18948:	 e9 0a 3c 0a 14 0a 3f 09         ..<...?.
   18950:	 5c 0e 81 0e ba 08 2e 07         \.......
   18958:	 85 08 c1 0a a6 0a 71 0a         ......q.
   18960:	 d1 09 9f 08 e9 0a 58 0c         ......X.
   18968:	 a6 0a f9 09 1e 0b d1 09         ........
   18970:	 85 08 5a 09 ad 08 85 08         ..Z.....


silk_NLSF_PRED_NB_MB_Q8:
   18978:	 b3 8a 8c 94 97 95 99 97         ........
   18980:	 a3 74 43 52 3b 5c 48 64         .tCR;\Hd
   18988:	 59 5c                           Y\


silk_NLSF_CB2_SELECT_NB_MB:
   1898a:	 10 00 00 00 00 63 42 24         .....cB$
   18992:	 24 22 24 22 22 22 22 53         $"$""""S
   1899a:	 45 24 34 22 74 66 46 44         E$4"tfFD
   189a2:	 44 b0 66 44 44 22 41 55         D.fDD"AU
   189aa:	 44 54 24 74 8d 98 8b aa         DT$t....
   189b2:	 84 bb b8 d8 89 84 f9 a8         ........
   189ba:	 b9 8b 68 66 64 44 44 b2         ..hfdDD.
   189c2:	 da b9 b9 aa f4 d8 bb bb         ........
   189ca:	 aa f4 bb bb db 8a 67 9b         ......g.
   189d2:	 b8 b9 89 74 b7 9b 98 88         ...t....
   189da:	 84 d9 b8 b8 aa a4 d9 ab         ........
   189e2:	 9b 8b f4 a9 b8 b9 aa a4         ........
   189ea:	 d8 df da 8a d6 8f bc da         ........
   189f2:	 a8 f4 8d 88 9b aa a8 8a         ........
   189fa:	 dc db 8b a4 db ca d8 89         ........
   18a02:	 a8 ba f6 b9 8b 74 b9 db         .....t..
   18a0a:	 b9 8a 64 64 86 64 66 22         ..dd.df"
   18a12:	 44 44 64 44 a8 cb dd da         DDdD....
   18a1a:	 a8 a7 9a 88 68 46 a4 f6         ....hF..
   18a22:	 ab 89 8b 89 9b da db 8b         ........


silk_NLSF_CB2_BITS_NB_MB_Q5:
   18a2a:	 ff ff ff 83 06 91 ff ff         ........
   18a32:	 ff ff ff ec 5d 0f 60 ff         ....].`.
   18a3a:	 ff ff ff ff c2 53 19 47         .....S.G
   18a42:	 dd ff ff ff ff a2 49 22         ......I"
   18a4a:	 42 a2 ff ff ff d2 7e 49         B.....~I
   18a52:	 2b 39 ad ff ff ff c9 7d         +9.....}
   18a5a:	 47 30 3a 82 ff ff ff a6         G0:.....
   18a62:	 6e 49 39 3e 68 d2 ff ff         nI9>h...
   18a6a:	 fb 7b 41 37 44 64 ab ff         .{A7Dd..


silk_NLSF_DELTA_MIN_NB_MB_Q15:
   18a72:	 fa 00 03 00 06 00 03 00         ........
   18a7a:	 03 00 03 00 04 00 03 00         ........
   18a82:	 03 00 03 00 cd 01               ......


icdf_global_table:
   18a88:	 c0 80 40 00 d5 ab 80 55         ..@....U
   18a90:	 2b 00 e0 c0 a0 80 60 40         +.....`@
   18a98:	 20 00 b3 63 00 f3 dd c0          ..c....
   18aa0:	 b5 00 e6 00 e8 9e 0a 00         ........
   18aa8:	 fa f5 ea cb 47 32 2a 26         ....G2*&
   18ab0:	 23 21 1f 1d 1c 1b 1a 19         #!......
   18ab8:	 18 17 16 15 14 13 12 11         ........
   18ac0:	 10 0f 0e 0d 0c 0b 0a 09         ........
   18ac8:	 08 07 06 05 04 03 02 01         ........
   18ad0:	 00 e0 70 2c 0f 03 02 01         ..p,....
   18ad8:	 00 fe ed c0 84 46 17 04         .....F..
   18ae0:	 00 ff fc e2 9b 3d 0b 02         .....=..
   18ae8:	 00 bc b0 9b 8a 77 61 43         .....waC
   18af0:	 2b 1a 0a 00 71 3f 00 df         +...q?..
   18af8:	 c9 b7 a7 98 8a 7c 6f 62         .....|ob
   18b00:	 58 4f 46 3e 38 32 2c 27         XOF>82,'
   18b08:	 23 1f 1b 18 15 12 10 0e         #.......
   18b10:	 0c 0a 08 06 04 03 02 01         ........
   18b18:	 00 a5 77 50 3d 2f 23 1b         ..wP=/#.
   18b20:	 14 0e 09 04 00 47 38 2b         .....G8+
   18b28:	 1e 15 0c 06 00 c7 a5 90         ........
   18b30:	 7c 6d 60 54 47 3d 33 2a         |m`TG=3*
   18b38:	 20 17 0f 08 00 f1 e1 d3          .......
   18b40:	 c7 bb af a4 99 8e 84 7b         .......{
   18b48:	 72 69 60 58 50 48 40 39         ri`XPH@9
   18b50:	 32 2c 26 21 1d 18 14 10         2,&!....
   18b58:	 0c 09 05 02 00 80 40 00         ......@.
   18b60:	 fd fa f4 e9 d4 b6 96 83         ........
   18b68:	 78 6e 62 55 48 3c 31 28         xnbUH<1(
   18b70:	 20 19 13 0f 0d 0b 09 08          .......
   18b78:	 07 06 05 04 03 02 01 00         ........
   18b80:	 f1 be b2 84 57 4a 29 0e         ....WJ).
   18b88:	 00 df c1 9d 8c 6a 39 27         .....j9'
   18b90:	 12 00 fe 31 43 4d 52 5d         ...1CMR]
   18b98:	 63 c6 0b 12 18 1f 24 2d         c.....$-
   18ba0:	 ff 2e 42 4e 57 5e 68 d0         ..BNW^h.
   18ba8:	 0e 15 20 2a 33 42 ff 5e         .. *3B.^
   18bb0:	 68 6d 70 73 76 f8 35 45         hmpsv.5E
   18bb8:	 50 58 5f 66 d4 b2 94 81         PX_f....
   18bc0:	 6c 60 55 52 4f 4d 3d 3b         l`UROM=;
   18bc8:	 39 38 33 31 30 2d 2a 29         98310-*)
   18bd0:	 28 26 24 22 1f 1e 15 0c         (&$"....
   18bd8:	 0a 03 01 00 ff f5 f4 ec         ........
   18be0:	 e9 e1 d9 cb be b0 af a1         ........
   18be8:	 95 88 7d 72 66 5b 51 47         ..}rf[QG
   18bf0:	 3c 34 2b 23 1c 14 13 12         <4+#....
   18bf8:	 0c 0b 05 00 ff fe fd ee         ........
   18c00:	 0e 03 02 01 00 ff fe fc         ........
   18c08:	 da 23 03 02 01 00 ff fe         .#......
   18c10:	 fa d0 3b 04 02 01 00 ff         ..;.....
   18c18:	 fe f6 c2 47 0a 02 01 00         ...G....
   18c20:	 ff fc ec b7 52 08 02 01         ....R...
   18c28:	 00 ff fc eb b4 5a 11 02         .....Z..
   18c30:	 01 00 ff f8 e0 ab 61 1e         ......a.
   18c38:	 04 01 00 ff fe ec ad 5f         ......._
   18c40:	 25 07 01 00 e1 cc c9 b8         %.......
   18c48:	 b7 af 9e 9a 99 87 77 73         ......ws
   18c50:	 71 6e 6d 63 62 5f 4f 44         qnmcb_OD
   18c58:	 34 32 30 2d 2b 20 1f 1b         420-+ ..
   18c60:	 12 0a 03 00 ff fb eb e6         ........
   18c68:	 d4 c9 c4 b6 a7 a6 a3 97         ........
   18c70:	 8a 7c 6e 68 5a 4e 4c 46         .|nhZNLF
   18c78:	 45 39 2d 22 18 15 0b 06         E9-"....
   18c80:	 05 04 03 00 ff fe fd f4         ........
   18c88:	 0c 03 02 01 00 ff fe fc         ........
   18c90:	 e0 26 03 02 01 00 ff fe         .&......
   18c98:	 fb d1 39 04 02 01 00 ff         ..9.....
   18ca0:	 fe f4 c3 45 04 02 01 00         ...E....
   18ca8:	 ff fb e8 b8 54 07 02 01         ....T...
   18cb0:	 00 ff fe f0 ba 56 0e 02         .....V..
   18cb8:	 01 00 ff fe ef b2 5b 1e         ......[.
   18cc0:	 05 01 00 ff f8 e3 b1 64         .......d
   18cc8:	 13 02 01 00 64 28 10 07         ....d(..
   18cd0:	 03 01 00 d2 d0 ce cb c7         ........
   18cd8:	 c1 b7 a8 8e 68 4a 34 25         ....hJ4%
   18ce0:	 1b 14 0e 0a 06 04 02 00         ........
   18ce8:	 7d 33 1a 12 0f 0c 0b 0a         }3......
   18cf0:	 09 08 07 06 05 04 03 02         ........
   18cf8:	 01 00 c6 69 2d 16 0f 0c         ...i-...
   18d00:	 0b 0a 09 08 07 06 05 04         ........
   18d08:	 03 02 01 00 d5 a2 74 53         ......tS
   18d10:	 3b 2b 20 18 12 0f 0c 09         ;+ .....
   18d18:	 07 06 05 03 02 00 ef bb         ........
   18d20:	 74 3b 1c 10 0b 0a 09 08         t;......
   18d28:	 07 06 05 04 03 02 01 00         ........
   18d30:	 fa e5 bc 87 56 33 1e 13         ....V3..
   18d38:	 0d 0a 08 06 05 04 03 02         ........
   18d40:	 01 00 f9 eb d5 b9 9c 80         ........
   18d48:	 67 53 42 35 2a 21 1a 15         gSB5*!..
   18d50:	 11 0d 0a 00 fe f9 eb ce         ........
   18d58:	 a4 76 4d 2e 1b 10 0a 07         .vM.....
   18d60:	 05 04 03 02 01 00 ff fd         ........
   18d68:	 f9 ef dc bf 9c 77 55 39         .....wU9
   18d70:	 25 17 0f 0a 06 04 02 00         %.......
   18d78:	 ff fd fb f6 ed df cb b3         ........
   18d80:	 98 7c 62 4b 37 28 1d 15         .|bK7(..
   18d88:	 0f 00 ff fe fd f7 dc a2         ........
   18d90:	 6a 43 2a 1c 12 0c 09 06         jC*.....
   18d98:	 04 03 02 00 78 00 80 00         ....x...
   18da0:	 d6 2a 00 eb 80 15 00 f4         .*......
   18da8:	 b8 48 0b 00 f8 d6 80 2a         .H.....*
   18db0:	 07 00 f8 e1 aa 50 19 05         .....P..
   18db8:	 00 fb ec c6 7e 36 12 03         ....~6..
   18dc0:	 00 fa ee d3 9f 52 23 0f         .....R#.
   18dc8:	 05 00 fa e7 cb a8 80 58         .......X
   18dd0:	 35 19 06 00 fc ee d8 b9         5.......
   18dd8:	 94 6c 47 28 12 04 00 fd         .lG(....
   18de0:	 f3 e1 c7 a6 80 5a 39 1f         .....Z9.
   18de8:	 0d 03 00 fe f6 e9 d4 b7         ........
   18df0:	 93 6d 49 2c 17 0a 02 00         .mI,....
   18df8:	 ff fa f0 df c6 a6 80 5a         .......Z
   18e00:	 3a 21 10 06 01 00 ff fb         :!......
   18e08:	 f4 e7 d2 b5 92 6e 4b 2e         .....nK.
   18e10:	 19 0c 05 01 00 ff fd f8         ........
   18e18:	 ee dd c4 a4 80 5c 3c 23         .....\<#
   18e20:	 12 08 03 01 00 ff fd f9         ........
   18e28:	 f2 e5 d0 b4 92 6e 4c 30         .....nL0
   18e30:	 1b 0e 07 03 01 00 81 00         ........
   18e38:	 cf 32 00 ec 81 14 00 f5         .2......
   18e40:	 b9 48 0a 00 f9 d5 81 2a         .H.....*
   18e48:	 06 00 fa e2 a9 57 1b 04         .....W..
   18e50:	 00 fb e9 c2 82 3e 14 04         .....>..
   18e58:	 00 fa ec cf a0 63 2f 11         .....c/.
   18e60:	 03 00 ff f0 d9 b6 83 51         .......Q
   18e68:	 29 0b 01 00 ff fe e9 c9         ).......
   18e70:	 9f 6b 3d 14 02 01 00 ff         .k=.....
   18e78:	 f9 e9 ce aa 80 56 32 17         .....V2.
   18e80:	 07 01 00 ff fa ee d9 ba         ........
   18e88:	 94 6c 46 27 12 06 01 00         .lF'....
   18e90:	 ff fc f3 e2 c8 a6 80 5a         .......Z
   18e98:	 38 1e 0d 04 01 00 ff fc         8.......
   18ea0:	 f5 e7 d1 b4 92 6e 4c 2f         .....nL/
   18ea8:	 19 0b 04 01 00 ff fd f8         ........
   18eb0:	 ed db c2 a3 80 5d 3e 25         .....]>%
   18eb8:	 13 08 03 01 00 ff fe fa         ........
   18ec0:	 f1 e2 cd b1 91 6f 4f 33         .....oO3
   18ec8:	 1e 0f 06 02 01 00 81 00         ........
   18ed0:	 cb 36 00 ea 81 17 00 f5         .6......
   18ed8:	 b8 49 0a 00 fa d7 81 29         .I.....)
   18ee0:	 05 00 fc e8 ad 56 18 03         .....V..
   18ee8:	 00 fd f0 c8 81 38 0f 02         .....8..
   18ef0:	 00 fd f4 d9 a4 5e 26 0a         .....^&.
   18ef8:	 01 00 fd f5 e2 bd 84 47         .......G
   18f00:	 1b 07 01 00 fd f6 e7 cb         ........
   18f08:	 9f 69 38 17 06 01 00 ff         .i8.....
   18f10:	 f8 eb d5 b3 85 55 2f 13         .....U/.
   18f18:	 05 01 00 ff fe f3 dd c2         ........
   18f20:	 9f 75 46 25 0c 02 01 00         .uF%....
   18f28:	 ff fe f8 ea d0 ab 80 55         .......U
   18f30:	 30 16 08 02 01 00 ff fe         0.......
   18f38:	 fa f0 dc bd 95 6b 43 24         .....kC$
   18f40:	 10 06 02 01 00 ff fe fb         ........
   18f48:	 f3 e3 c9 a6 80 5a 37 1d         .....Z7.
   18f50:	 0d 05 02 01 00 ff fe fc         ........
   18f58:	 f6 ea d5 b7 93 6d 49 2b         .....mI+
   18f60:	 16 0a 04 02 01 00 82 00         ........
   18f68:	 c8 3a 00 e7 82 1a 00 f4         .:......
   18f70:	 b8 4c 0c 00 f9 d6 82 2b         .L.....+
   18f78:	 06 00 fc e8 ad 57 18 03         .....W..
   18f80:	 00 fd f1 cb 83 38 0e 02         .....8..
   18f88:	 00 fe f6 dd a7 5e 23 08         .....^#.
   18f90:	 01 00 fe f9 e8 c1 82 41         .......A
   18f98:	 17 05 01 00 ff fb ef d3         ........
   18fa0:	 a2 63 2d 0f 04 01 00 ff         .c-.....
   18fa8:	 fb f3 df ba 83 4a 21 0b         .....J!.
   18fb0:	 03 01 00 ff fc f5 e6 ca         ........
   18fb8:	 9e 69 39 18 08 02 01 00         .i9.....
   18fc0:	 ff fd f7 eb d6 b3 84 54         .......T
   18fc8:	 2c 13 07 02 01 00 ff fe         ,.......
   18fd0:	 fa f0 df c4 9f 70 45 24         .....pE$
   18fd8:	 0f 06 02 01 00 ff fe fd         ........
   18fe0:	 f5 e7 d1 b0 88 5d 37 1b         .....]7.
   18fe8:	 0b 03 02 01 00 ff fe fd         ........
   18ff0:	 fc ef dd c2 9e 75 4c 2a         .....uL*
   18ff8:	 12 04 03 02 01 00 00 00         ........


mdct_tab_256:
   19000:	 43 ec ff 3f f1 43 32 00         C..?.C2.
   19008:	 3a c1 f9 3f f5 54 c4 01         :..?.T..
   19010:	 a9 b8 e9 3f 38 20 56 03         ...?8 V.
   19018:	 0b d5 cf 3f c5 67 e7 04         ...?.g..
   19020:	 5b 1a ac 3f bb ed 77 06         [..?..w.
   19028:	 1e 8e 7e 3f 57 74 07 08         ..~?Wt..
   19030:	 59 37 47 3f fd bd 95 09         Y7G?....
   19038:	 95 1e 06 3f 42 8d 22 0b         ...?B.".
   19040:	 db 4d bb 3e f5 a4 ad 0c         .M.>....
   19048:	 b4 d0 66 3e 2a c8 36 0e         ..f>*.6.
   19050:	 2a b4 08 3e 40 ba bd 0f         *..>@...
   19058:	 bd 06 a1 3d f0 3e 42 11         ...=.>B.
   19060:	 6c d8 2f 3d 4f 1a c4 12         l./=O...
   19068:	 aa 3a b5 3c dd 10 43 14         .:.<..C.
   19070:	 60 40 31 3c 8c e7 be 15         `@1<....
   19078:	 e7 fd a3 3b c9 63 37 17         ...;.c7.
   19080:	 09 89 0d 3b 87 4b ac 18         ...;.K..
   19088:	 f8 f8 6d 3a 44 65 1d 1a         ..m:De..
   19090:	 4f 66 c5 39 15 78 8a 1b         Of.9.x..
   19098:	 0e eb 13 39 af 4b f3 1c         ...9.K..
   190a0:	 92 a2 59 38 6d a8 57 1e         ..Y8m.W.
   190a8:	 96 a9 96 37 5c 57 b7 1f         ...7\W..
   190b0:	 2a 1e cb 36 40 22 12 21         *..6@".!
   190b8:	 b1 1f f7 35 a0 d3 67 22         ...5..g"
   190c0:	 dd ce 1a 35 ca 36 b8 23         ...5.6.#
   190c8:	 a6 4d 36 34 df 17 03 25         .M64...%
   190d0:	 48 bf 49 33 d9 43 48 26         H.I3.CH&
   190d8:	 40 48 55 32 93 88 87 27         @HU2...'
   190e0:	 3e 0e 59 31 d2 b4 c0 28         >.Y1...(
   190e8:	 28 38 55 30 4c 98 f3 29         (8U0L..)
   190f0:	 0f ee 49 2f ac 03 20 2b         ..I/.. +
   190f8:	 2c 59 37 2e a0 c8 45 2c         ,Y7...E,
   19100:	 d5 a3 1d 2d da b9 64 2d         ...-..d-
   19108:	 7c f9 fc 2b 1c ab 7c 2e         |..+..|.
   19110:	 a3 86 d5 2a 3a 71 8d 2f         ...*:q./
   19118:	 db 78 a7 29 23 e2 96 30         .x.)#..0
   19120:	 b6 fe 72 28 ea d4 98 31         ..r(...1
   19128:	 c8 47 38 27 c7 21 93 32         .G8'.!.2
   19130:	 97 84 f7 25 22 a2 85 33         ...%"..3
   19138:	 99 e6 b0 24 95 30 70 34         ...$.0p4
   19140:	 2e a0 64 23 f4 a8 52 35         ..d#..R5
   19148:	 92 e4 12 22 55 e8 2c 36         ..."U.,6
   19150:	 d8 e7 bb 20 0e cd fe 36         ... ...6
   19158:	 e6 de 5f 1f c2 36 c8 37         .._..6.7
   19160:	 67 ff fe 1d 63 06 89 38         g...c..8
   19168:	 c4 7f 99 1c 33 1e 41 39         ....3.A9
   19170:	 1e 97 2f 1b d2 61 f0 39         ../..a.9
   19178:	 44 7d c1 19 36 b6 96 3a         D}..6..:
   19180:	 ab 6a 4f 18 bb 01 34 3b         .jO...4;
   19188:	 64 98 d9 16 1f 2c c8 3b         d....,.;
   19190:	 13 40 60 15 88 1e 53 3c         .@`...S<
   19198:	 e9 9b e3 13 8b c3 d4 3c         .......<
   191a0:	 99 e6 63 12 28 07 4d 3d         ..c.(.M=
   191a8:	 4e 5b e1 10 d4 d6 bb 3d         N[.....=
   191b0:	 a3 35 5c 0f 79 21 21 3e         .5\.y!!>
   191b8:	 9a b1 d4 0d 78 d7 7c 3e         ....x.|>
   191c0:	 94 0b 4b 0c ad ea ce 3e         ..K....>
   191c8:	 43 80 bf 0a 70 4e 17 3f         C...pN.?
   191d0:	 a7 4c 32 09 96 f7 55 3f         .L2...U?
   191d8:	 ff ad a3 07 77 dc 8a 3f         ....w..?
   191e0:	 c5 e1 13 06 ea f4 b5 3f         .......?
   191e8:	 9d 25 83 04 4a 3a d7 3f         .%..J:.?
   191f0:	 55 b7 f1 02 76 a7 ee 3f         U...v..?
   191f8:	 d2 d4 5f 01 d1 38 fc 3f         .._..8.?


mdct_tab_2048:
   19200:	 b1 ff ff 3f 7f 48 06 00         ...?.H..
   19208:	 05 e7 ff 3f 6e 8c 38 00         ...?n.8.
   19210:	 de a6 ff 3f 3b d0 6a 00         ...?;.j.
   19218:	 3c 3f ff 3f c5 13 9d 00         <?.?....
   19220:	 21 b0 fe 3f ef 56 cf 00         !..?.V..
   19228:	 8c f9 fd 3f 98 99 01 01         ...?....
   19230:	 7e 1b fd 3f a3 db 33 01         ~..?..3.
   19238:	 f7 15 fc 3f f0 1c 66 01         ...?..f.
   19240:	 f9 e8 fa 3f 60 5d 98 01         ...?`]..
   19248:	 83 94 f9 3f d4 9c ca 01         ...?....
   19250:	 96 18 f8 3f 2e db fc 01         ...?....
   19258:	 34 75 f6 3f 4d 18 2f 02         4u.?M./.
   19260:	 5d aa f4 3f 14 54 61 02         ]..?.Ta.
   19268:	 13 b8 f2 3f 62 8e 93 02         ...?b...
   19270:	 56 9e f0 3f 1a c7 c5 02         V..?....
   19278:	 28 5d ee 3f 1c fe f7 02         (].?....
   19280:	 8b f4 eb 3f 49 33 2a 03         ...?I3*.
   19288:	 80 64 e9 3f 82 66 5c 03         .d.?.f\.
   19290:	 08 ad e6 3f a9 97 8e 03         ...?....
   19298:	 26 ce e3 3f 9e c6 c0 03         &..?....
   192a0:	 da c7 e0 3f 42 f3 f2 03         ...?B...
   192a8:	 27 9a dd 3f 77 1d 25 04         '..?w.%.
   192b0:	 0f 45 da 3f 1d 45 57 04         .E.?.EW.
   192b8:	 94 c8 d6 3f 16 6a 89 04         ...?.j..
   192c0:	 b7 24 d3 3f 42 8c bb 04         .$.?B...
   192c8:	 7c 59 cf 3f 83 ab ed 04         |Y.?....
   192d0:	 e4 66 cb 3f b9 c7 1f 05         .f.?....
   192d8:	 f3 4c c7 3f c7 e0 51 05         .L.?..Q.
   192e0:	 aa 0b c3 3f 8c f6 83 05         ...?....
   192e8:	 0c a3 be 3f eb 08 b6 05         ...?....
   192f0:	 1b 13 ba 3f c3 17 e8 05         ...?....
   192f8:	 dc 5b b5 3f f7 22 1a 06         .[.?."..
   19300:	 50 7d b0 3f 67 2a 4c 06         P}.?g*L.
   19308:	 7b 77 ab 3f f5 2d 7e 06         {w.?.-~.
   19310:	 5f 4a a6 3f 81 2d b0 06         _J.?.-..
   19318:	 00 f6 a0 3f ee 28 e2 06         ...?.(..
   19320:	 62 7a 9b 3f 1b 20 14 07         bz.?. ..
   19328:	 87 d7 95 3f eb 12 46 07         ...?..F.
   19330:	 72 0d 90 3f 3d 01 78 07         r..?=.x.
   19338:	 29 1c 8a 3f f5 ea a9 07         )..?....
   19340:	 ae 03 84 3f f2 cf db 07         ...?....
   19348:	 05 c4 7d 3f 16 b0 0d 08         ..}?....
   19350:	 31 5d 77 3f 43 8b 3f 08         1]w?C.?.
   19358:	 38 cf 70 3f 59 61 71 08         8.p?Yaq.
   19360:	 1c 1a 6a 3f 3a 32 a3 08         ..j?:2..
   19368:	 e2 3d 63 3f c6 fd d4 08         .=c?....
   19370:	 8f 3a 5c 3f e0 c3 06 09         .:\?....
   19378:	 26 10 55 3f 69 84 38 09         &.U?i.8.
   19380:	 ac be 4d 3f 42 3f 6a 09         ..M?B?j.
   19388:	 26 46 46 3f 4c f4 9b 09         &FF?L...
   19390:	 97 a6 3e 3f 68 a3 cd 09         ..>?h...
   19398:	 06 e0 36 3f 78 4c ff 09         ..6?xL..
   193a0:	 76 f2 2e 3f 5e ef 30 0a         v..?^.0.
   193a8:	 ec dd 26 3f fa 8b 62 0a         ..&?..b.
   193b0:	 6e a2 1e 3f 2f 22 94 0a         n..?/"..
   193b8:	 01 40 16 3f dc b1 c5 0a         .@.?....
   193c0:	 a9 b6 0d 3f e5 3a f7 0a         ...?.:..
   193c8:	 6d 06 05 3f 2a bd 28 0b         m..?*.(.
   193d0:	 50 2f fc 3e 8d 38 5a 0b         P/.>.8Z.
   193d8:	 5a 31 f3 3e f0 ac 8b 0b         Z1.>....
   193e0:	 8e 0c ea 3e 33 1a bd 0b         ...>3...
   193e8:	 f4 c0 e0 3e 38 80 ee 0b         ...>8...
   193f0:	 91 4e d7 3e e1 de 1f 0c         .N.>....
   193f8:	 6a b5 cd 3e 10 36 51 0c         j..>.6Q.
   19400:	 85 f5 c3 3e a5 85 82 0c         ...>....
   19408:	 e9 0e ba 3e 84 cd b3 0c         ...>....
   19410:	 9c 01 b0 3e 8c 0d e5 0c         ...>....
   19418:	 a3 cd a5 3e a0 45 16 0d         ...>.E..
   19420:	 06 73 9b 3e a1 75 47 0d         .s.>.uG.
   19428:	 ca f1 90 3e 71 9d 78 0d         ...>q.x.
   19430:	 f5 49 86 3e f2 bc a9 0d         .I.>....
   19438:	 90 7b 7b 3e 06 d4 da 0d         .{{>....
   19440:	 9f 86 70 3e 8e e2 0b 0e         ..p>....
   19448:	 2b 6b 65 3e 6b e8 3c 0e         +ke>k.<.
   19450:	 39 29 5a 3e 80 e5 6d 0e         9)Z>..m.
   19458:	 d1 c0 4e 3e af d9 9e 0e         ..N>....
   19460:	 fa 31 43 3e d9 c4 cf 0e         .1C>....
   19468:	 bb 7c 37 3e df a6 00 0f         .|7>....
   19470:	 1b a1 2b 3e a5 7f 31 0f         ..+>..1.
   19478:	 21 9f 1f 3e 0c 4f 62 0f         !..>.Ob.
   19480:	 d5 76 13 3e f5 14 93 0f         .v.>....
   19488:	 3f 28 07 3e 43 d1 c3 0f         ?(.>C...
   19490:	 65 b3 fa 3d d7 83 f4 0f         e..=....
   19498:	 51 18 ee 3d 94 2c 25 10         Q..=.,%.
   194a0:	 08 57 e1 3d 5b cb 55 10         .W.=[.U.
   194a8:	 94 6f d4 3d 0e 60 86 10         .o.=.`..
   194b0:	 fc 61 c7 3d 90 ea b6 10         .a.=....
   194b8:	 48 2e ba 3d c3 6a e7 10         H..=.j..
   194c0:	 81 d4 ac 3d 88 e0 17 11         ...=....
   194c8:	 af 54 9f 3d c2 4b 48 11         .T.=.KH.
   194d0:	 d9 ae 91 3d 53 ac 78 11         ...=S.x.
   194d8:	 09 e3 83 3d 1d 02 a9 11         ...=....
   194e0:	 47 f1 75 3d 02 4d d9 11         G.u=.M..
   194e8:	 9b d9 67 3d e5 8c 09 12         ..g=....
   194f0:	 0e 9c 59 3d a7 c1 39 12         ..Y=..9.
   194f8:	 aa 38 4b 3d 2b eb 69 12         .8K=+.i.
   19500:	 76 af 3c 3d 54 09 9a 12         v.<=T...
   19508:	 7c 00 2e 3d 03 1c ca 12         |..=....
   19510:	 c5 2b 1f 3d 1b 23 fa 12         .+.=.#..
   19518:	 5a 31 10 3d 7e 1e 2a 13         Z1.=~.*.
   19520:	 45 11 01 3d 0e 0e 5a 13         E..=..Z.
   19528:	 8e cb f1 3c af f1 89 13         ...<....
   19530:	 3f 60 e2 3c 43 c9 b9 13         ?`.<C...
   19538:	 62 cf d2 3c ab 94 e9 13         b..<....
   19540:	 ff 18 c3 3c cb 53 19 14         ...<.S..
   19548:	 22 3d b3 3c 85 06 49 14         "=.<..I.
   19550:	 d3 3b a3 3c bc ac 78 14         .;.<..x.
   19558:	 1d 15 93 3c 52 46 a8 14         ...<RF..
   19560:	 09 c9 82 3c 2a d3 d7 14         ...<*...
   19568:	 a2 57 72 3c 27 53 07 15         .Wr<'S..
   19570:	 f1 c0 61 3c 2b c6 36 15         ..a<+.6.
   19578:	 01 05 51 3c 18 2c 66 15         ..Q<.,f.
   19580:	 dd 23 40 3c d3 84 95 15         .#@<....
   19588:	 8e 1d 2f 3c 3e d0 c4 15         ../<>...
   19590:	 1f f2 1d 3c 3a 0e f4 15         ...<:...
   19598:	 9b a1 0c 3c ac 3e 23 16         ...<.>#.
   195a0:	 0c 2c fb 3b 76 61 52 16         .,.;vaR.
   195a8:	 7e 91 e9 3b 7c 76 81 16         ~..;|v..
   195b0:	 fa d1 d7 3b 9f 7d b0 16         ...;.}..
   195b8:	 8d ed c5 3b c3 76 df 16         ...;.v..
   195c0:	 40 e4 b3 3b cc 61 0e 17         @..;.a..
   195c8:	 20 b6 a1 3b 9b 3e 3d 17          ..;.>=.
   195d0:	 37 63 8f 3b 15 0d 6c 17         7c.;..l.
   195d8:	 90 eb 7c 3b 1c cd 9a 17         ..|;....
   195e0:	 38 4f 6a 3b 93 7e c9 17         8Oj;.~..
   195e8:	 39 8e 57 3b 5e 21 f8 17         9.W;^!..
   195f0:	 a0 a8 44 3b 61 b5 26 18         ..D;a.&.
   195f8:	 77 9e 31 3b 7d 3a 55 18         w.1;}:U.
   19600:	 ca 6f 1e 3b 97 b0 83 18         .o.;....
   19608:	 a6 1c 0b 3b 91 17 b2 18         ...;....
   19610:	 16 a5 f7 3a 50 6f e0 18         ...:Po..
   19618:	 26 09 e4 3a b7 b7 0e 19         &..:....
   19620:	 e3 48 d0 3a a9 f0 3c 19         .H.:..<.
   19628:	 58 64 bc 3a 09 1a 6b 19         Xd.:..k.
   19630:	 92 5b a8 3a bb 33 99 19         .[.:.3..
   19638:	 9d 2e 94 3a a3 3d c7 19         ...:.=..
   19640:	 86 dd 7f 3a a4 37 f5 19         ...:.7..
   19648:	 59 68 6b 3a a2 21 23 1a         Yhk:.!#.
   19650:	 23 cf 56 3a 81 fb 50 1a         #.V:..P.
   19658:	 f0 11 42 3a 24 c5 7e 1a         ..B:$.~.
   19660:	 cd 30 2d 3a 6f 7e ac 1a         .0-:o~..
   19668:	 c8 2b 18 3a 46 27 da 1a         .+.:F'..
   19670:	 ed 02 03 3a 8c bf 07 1b         ...:....
   19678:	 49 b6 ed 39 27 47 35 1b         I..9'G5.
   19680:	 e9 45 d8 39 f8 bd 62 1b         .E.9..b.
   19688:	 da b1 c2 39 e5 23 90 1b         ...9.#..
   19690:	 2b fa ac 39 d2 78 bd 1b         +..9.x..
   19698:	 e7 1e 97 39 a1 bc ea 1b         ...9....
   196a0:	 1e 20 81 39 39 ef 17 1c         . .99...
   196a8:	 dc fd 6a 39 7c 10 45 1c         ..j9|.E.
   196b0:	 2e b8 54 39 4f 20 72 1c         ..T9O r.
   196b8:	 23 4f 3e 39 96 1e 9f 1c         #O>9....
   196c0:	 c9 c2 27 39 35 0b cc 1c         ..'95...
   196c8:	 2d 13 11 39 11 e6 f8 1c         -..9....
   196d0:	 5e 40 fa 38 0d af 25 1d         ^@.8..%.
   196d8:	 69 4a e3 38 0f 66 52 1d         iJ.8.fR.
   196e0:	 5d 31 cc 38 fb 0a 7f 1d         ]1.8....
   196e8:	 47 f5 b4 38 b5 9d ab 1d         G..8....
   196f0:	 37 96 9d 38 21 1e d8 1d         7..8!...
   196f8:	 3b 14 86 38 24 8c 04 1e         ;..8$...
   19700:	 60 6f 6e 38 a4 e7 30 1e         `on8..0.
   19708:	 b6 a7 56 38 84 30 5d 1e         ..V8.0].
   19710:	 4c bd 3e 38 a8 66 89 1e         L.>8.f..
   19718:	 30 b0 26 38 f7 89 b5 1e         0.&8....
   19720:	 71 80 0e 38 54 9a e1 1e         q..8T...
   19728:	 1d 2e f6 37 a5 97 0d 1f         ...7....
   19730:	 45 b9 dd 37 ce 81 39 1f         E..7..9.
   19738:	 f6 21 c5 37 b5 58 65 1f         .!.7.Xe.
   19740:	 41 68 ac 37 3d 1c 91 1f         Ah.7=...
   19748:	 34 8c 93 37 4d cc bc 1f         4..7M...
   19750:	 df 8d 7a 37 c8 68 e8 1f         ..z7.h..
   19758:	 51 6d 61 37 96 f1 13 20         Qma7... 
   19760:	 9a 2a 48 37 99 66 3f 20         .*H7.f? 
   19768:	 c9 c5 2e 37 b8 c7 6a 20         ...7..j 
   19770:	 ee 3e 15 37 d9 14 96 20         .>.7... 
   19778:	 18 96 fb 36 df 4d c1 20         ...6.M. 
   19780:	 58 cb e1 36 b1 72 ec 20         X..6.r. 
   19788:	 bd de c7 36 34 83 17 21         ...64..!
   19790:	 58 d0 ad 36 4d 7f 42 21         X..6M.B!
   19798:	 38 a0 93 36 e2 66 6d 21         8..6.fm!
   197a0:	 6e 4e 79 36 d8 39 98 21         nNy6.9.!
   197a8:	 09 db 5e 36 15 f8 c2 21         ..^6...!
   197b0:	 1b 46 44 36 7f a1 ed 21         .FD6...!
   197b8:	 b4 8f 29 36 fb 35 18 22         ..)6.5."
   197c0:	 e3 b7 0e 36 6f b5 42 22         ...6o.B"
   197c8:	 ba be f3 35 c1 1f 6d 22         ...5..m"
   197d0:	 49 a4 d8 35 d7 74 97 22         I..5.t."
   197d8:	 a1 68 bd 35 96 b4 c1 22         .h.5..."
   197e0:	 d3 0b a2 35 e5 de eb 22         ...5..."
   197e8:	 ef 8d 86 35 a8 f3 15 23         ...5...#
   197f0:	 08 ef 6a 35 c8 f2 3f 23         ..j5..?#
   197f8:	 2c 2f 4f 35 29 dc 69 23         ,/O5).i#
   19800:	 6f 4e 33 35 b2 af 93 23         oN35...#
   19808:	 e0 4c 17 35 48 6d bd 23         .L.5Hm.#
   19810:	 92 2a fb 34 d3 14 e7 23         .*.4...#
   19818:	 95 e7 de 34 39 a6 10 24         ...49..$
   19820:	 fb 83 c2 34 5f 21 3a 24         ...4_!:$
   19828:	 d5 ff a5 34 2c 86 63 24         ...4,.c$
   19830:	 36 5b 89 34 87 d4 8c 24         6[.4...$
   19838:	 2f 96 6c 34 57 0c b6 24         /.l4W..$
   19840:	 d1 b0 4f 34 81 2d df 24         ..O4.-.$
   19848:	 2e ab 32 34 ed 37 08 25         ..24.7.%
   19850:	 59 85 15 34 81 2b 31 25         Y..4.+1%
   19858:	 62 3f f8 33 23 08 5a 25         b?.3#.Z%
   19860:	 5e d9 da 33 bc cd 82 25         ^..3...%
   19868:	 5c 53 bd 33 30 7c ab 25         \S.30|.%
   19870:	 70 ad 9f 33 69 13 d4 25         p..3i..%
   19878:	 ac e7 81 33 4b 93 fc 25         ...3K..%
   19880:	 23 02 64 33 bf fb 24 26         #.d3..$&
   19888:	 e6 fc 45 33 ac 4c 4d 26         ..E3.LM&
   19890:	 08 d8 27 33 f8 85 75 26         ..'3..u&
   19898:	 9c 93 09 33 8b a7 9d 26         ...3...&
   198a0:	 b5 2f eb 32 4c b1 c5 26         ./.2L..&
   198a8:	 64 ac cc 32 22 a3 ed 26         d..2"..&
   198b0:	 be 09 ae 32 f5 7c 15 27         ...2.|.'
   198b8:	 d5 47 8f 32 ac 3e 3d 27         .G.2.>='
   198c0:	 bc 66 70 32 2f e8 64 27         .fp2/.d'
   198c8:	 86 66 51 32 65 79 8c 27         .fQ2ey.'
   198d0:	 46 47 32 32 35 f2 b3 27         FG225..'
   198d8:	 0f 09 13 32 88 52 db 27         ...2.R.'
   198e0:	 f5 ab f3 31 45 9a 02 28         ...1E..(
   198e8:	 0b 30 d4 31 54 c9 29 28         .0.1T.)(
   198f0:	 64 95 b4 31 9d df 50 28         d..1..P(
   198f8:	 14 dc 94 31 07 dd 77 28         ...1..w(
   19900:	 2e 04 75 31 7a c1 9e 28         ..u1z..(
   19908:	 c6 0d 55 31 df 8c c5 28         ..U1...(
   19910:	 f1 f8 34 31 1e 3f ec 28         ..41.?.(
   19918:	 c0 c5 14 31 1f d8 12 29         ...1...)
   19920:	 49 74 f4 30 c9 57 39 29         It.0.W9)
   19928:	 a0 04 d4 30 06 be 5f 29         ...0.._)
   19930:	 d8 76 b3 30 bd 0a 86 29         .v.0...)
   19938:	 05 cb 92 30 d7 3d ac 29         ...0.=.)
   19940:	 3c 01 72 30 3c 57 d2 29         <.r0<W.)
   19948:	 91 19 51 30 d5 56 f8 29         ..Q0.V.)
   19950:	 18 14 30 30 8a 3c 1e 2a         ..00.<.*
   19958:	 e5 f0 0e 30 44 08 44 2a         ...0D.D*
   19960:	 0d b0 ed 2f ec b9 69 2a         .../..i*
   19968:	 a5 51 cc 2f 6b 51 8f 2a         .Q./kQ.*
   19970:	 c1 d5 aa 2f a9 ce b4 2a         .../...*
   19978:	 75 3c 89 2f 8e 31 da 2a         u<./.1.*
   19980:	 d7 85 67 2f 05 7a ff 2a         ..g/.z.*
   19988:	 fb b1 45 2f f6 a7 24 2b         ..E/..$+
   19990:	 f6 c0 23 2f 4a bb 49 2b         ..#/J.I+
   19998:	 de b2 01 2f ea b3 6e 2b         .../..n+
   199a0:	 c6 87 df 2e c0 91 93 2b         .......+
   199a8:	 c4 3f bd 2e b4 54 b8 2b         .?...T.+
   199b0:	 ee da 9a 2e b0 fc dc 2b         .......+
   199b8:	 58 59 78 2e 9e 89 01 2c         XYx....,
   199c0:	 17 bb 55 2e 66 fb 25 2c         ..U.f.%,
   199c8:	 42 00 33 2e f3 51 4a 2c         B.3..QJ,
   199d0:	 ed 28 10 2e 2e 8d 6e 2c         .(....n,
   199d8:	 2f 35 ed 2d 01 ad 92 2c         /5.-...,
   199e0:	 1c 25 ca 2d 55 b1 b6 2c         .%.-U..,
   199e8:	 ca f8 a6 2d 14 9a da 2c         ...-...,
   199f0:	 4f b0 83 2d 28 67 fe 2c         O..-(g.,
   199f8:	 c0 4b 60 2d 7a 18 22 2d         .K`-z."-
   19a00:	 34 cb 3c 2d f6 ad 45 2d         4.<-..E-
   19a08:	 c1 2e 19 2d 84 27 69 2d         ...-.'i-
   19a10:	 7c 76 f5 2c 10 85 8c 2d         |v.,...-
   19a18:	 7b a2 d1 2c 83 c6 af 2d         {..,...-
   19a20:	 d5 b2 ad 2c c7 eb d2 2d         ...,...-
   19a28:	 9f a7 89 2c c7 f4 f5 2d         ...,...-
   19a30:	 f1 80 65 2c 6d e1 18 2e         ..e,m...
   19a38:	 df 3e 41 2c a4 b1 3b 2e         .>A,..;.
   19a40:	 81 e1 1c 2c 56 65 5e 2e         ...,Ve^.
   19a48:	 ed 68 f8 2b 6e fc 80 2e         .h.+n...
   19a50:	 3a d5 d3 2b d6 76 a3 2e         :..+.v..
   19a58:	 7d 26 af 2b 79 d4 c5 2e         }&.+y...
   19a60:	 ce 5c 8a 2b 43 15 e8 2e         .\.+C...
   19a68:	 44 78 65 2b 1d 39 0a 2f         Dxe+.9./
   19a70:	 f5 78 40 2b f2 3f 2c 2f         .x@+.?,/
   19a78:	 f8 5e 1b 2b af 29 4e 2f         .^.+.)N/
   19a80:	 63 2a f6 2a 3d f6 6f 2f         c*.*=.o/
   19a88:	 4e db d0 2a 89 a5 91 2f         N..*.../
   19a90:	 d0 71 ab 2a 7c 37 b3 2f         .q.*|7./
   19a98:	 00 ee 85 2a 04 ac d4 2f         ...*.../
   19aa0:	 f5 4f 60 2a 0a 03 f6 2f         .O`*.../
   19aa8:	 c7 97 3a 2a 7a 3c 17 30         ..:*z<.0
   19ab0:	 8b c5 14 2a 40 58 38 30         ...*@X80
   19ab8:	 5b d9 ee 29 48 56 59 30         [..)HVY0
   19ac0:	 4d d3 c8 29 7c 36 7a 30         M..)|6z0
   19ac8:	 78 b3 a2 29 ca f8 9a 30         x..)...0
   19ad0:	 f5 79 7c 29 1c 9d bb 30         .y|)...0
   19ad8:	 da 26 56 29 5e 23 dc 30         .&V)^#.0
   19ae0:	 40 ba 2f 29 7d 8b fc 30         @./)}..0
   19ae8:	 3e 34 09 29 64 d5 1c 31         >4.)d..1
   19af0:	 eb 94 e2 28 ff 00 3d 31         ...(..=1
   19af8:	 61 dc bb 28 3b 0e 5d 31         a..(;.]1
   19b00:	 b6 0a 95 28 04 fd 7c 31         ...(..|1
   19b08:	 02 20 6e 28 46 cd 9c 31         . n(F..1
   19b10:	 5e 1c 47 28 ee 7e bc 31         ^.G(.~.1
   19b18:	 e2 ff 1f 28 e8 11 dc 31         ...(...1
   19b20:	 a5 ca f8 27 20 86 fb 31         ...' ..1
   19b28:	 c1 7c d1 27 83 db 1a 32         .|.'...2
   19b30:	 4c 16 aa 27 fe 11 3a 32         L..'..:2
   19b38:	 60 97 82 27 7d 29 59 32         `..'})Y2
   19b40:	 14 00 5b 27 ee 21 78 32         ..['.!x2
   19b48:	 82 50 33 27 3d fb 96 32         .P3'=..2
   19b50:	 c2 88 0b 27 57 b5 b5 32         ...'W..2
   19b58:	 ec a8 e3 26 29 50 d4 32         ...&)P.2
   19b60:	 19 b1 bb 26 a1 cb f2 32         ...&...2
   19b68:	 61 a1 93 26 ab 27 11 33         a..&.'.3
   19b70:	 dd 79 6b 26 35 64 2f 33         .yk&5d/3
   19b78:	 a7 3a 43 26 2d 81 4d 33         .:C&-.M3
   19b80:	 d6 e3 1a 26 7e 7e 6b 33         ...&~~k3
   19b88:	 84 75 f2 25 18 5c 89 33         .u.%.\.3
   19b90:	 ca ef c9 25 e8 19 a7 33         ...%...3
   19b98:	 c0 52 a1 25 db b7 c4 33         .R.%...3
   19ba0:	 80 9e 78 25 df 35 e2 33         ..x%.5.3
   19ba8:	 23 d3 4f 25 e2 93 ff 33         #.O%...3
   19bb0:	 c1 f0 26 25 d2 d1 1c 34         ..&%...4
   19bb8:	 75 f7 fd 24 9c ef 39 34         u..$..94
   19bc0:	 57 e7 d4 24 2f ed 56 34         W..$/.V4
   19bc8:	 82 c0 ab 24 79 ca 73 34         ...$y.s4
   19bd0:	 0d 83 82 24 68 87 90 34         ...$h..4
   19bd8:	 13 2f 59 24 eb 23 ad 34         ./Y$.#.4
   19be0:	 ad c4 2f 24 ef 9f c9 34         ../$...4
   19be8:	 f4 43 06 24 63 fb e5 34         .C.$c..4
   19bf0:	 03 ad dc 23 36 36 02 35         ...#66.5
   19bf8:	 f3 ff b2 23 56 50 1e 35         ...#VP.5
   19c00:	 dd 3c 89 23 b2 49 3a 35         .<.#.I:5
   19c08:	 dc 63 5f 23 39 22 56 35         .c_#9"V5
   19c10:	 09 75 35 23 d9 d9 71 35         .u5#..q5
   19c18:	 7e 70 0b 23 81 70 8d 35         ~p.#.p.5
   19c20:	 55 56 e1 22 21 e6 a8 35         UV."!..5
   19c28:	 a8 26 b7 22 a7 3a c4 35         .&.".:.5
   19c30:	 91 e1 8c 22 03 6e df 35         ...".n.5
   19c38:	 29 87 62 22 23 80 fa 35         ).b"#..5
   19c40:	 8d 17 38 22 f8 70 15 36         ..8".p.6
   19c48:	 d4 92 0d 22 70 40 30 36         ..."p@06
   19c50:	 1a f9 e2 21 7b ee 4a 36         ...!{.J6
   19c58:	 79 4a b8 21 08 7b 65 36         yJ.!.{e6
   19c60:	 0b 87 8d 21 08 e6 7f 36         ...!...6
   19c68:	 ea ae 62 21 69 2f 9a 36         ..b!i/.6
   19c70:	 32 c2 37 21 1b 57 b4 36         2.7!.W.6
   19c78:	 fc c0 0c 21 10 5d ce 36         ...!.].6
   19c80:	 63 ab e1 20 35 41 e8 36         c.. 5A.6
   19c88:	 81 81 b6 20 7c 03 02 37         ... |..7
   19c90:	 72 43 8b 20 d4 a3 1b 37         rC. ...7
   19c98:	 4f f1 5f 20 2f 22 35 37         O._ /"57
   19ca0:	 35 8b 34 20 7b 7e 4e 37         5.4 {~N7
   19ca8:	 3c 11 09 20 a9 b8 67 37         <.. ..g7
   19cb0:	 81 83 dd 1f aa d0 80 37         .......7
   19cb8:	 1d e2 b1 1f 6f c6 99 37         ....o..7
   19cc0:	 2d 2d 86 1f e7 99 b2 37         --.....7
   19cc8:	 cb 64 5a 1f 04 4b cb 37         .dZ..K.7
   19cd0:	 11 89 2e 1f b7 d9 e3 37         .......7
   19cd8:	 1c 9a 02 1f ef 45 fc 37         .....E.7
   19ce0:	 05 98 d6 1e 9f 8f 14 38         .......8
   19ce8:	 e9 82 aa 1e b7 b6 2c 38         ......,8
   19cf0:	 e2 5a 7e 1e 28 bb 44 38         .Z~.(.D8
   19cf8:	 0c 20 52 1e e3 9c 5c 38         . R...\8
   19d00:	 82 d2 25 1e db 5b 74 38         ..%..[t8
   19d08:	 5f 72 f9 1d ff f7 8b 38         _r.....8
   19d10:	 bf ff cc 1d 42 71 a3 38         ....Bq.8
   19d18:	 bc 7a a0 1d 95 c7 ba 38         .z.....8
   19d20:	 74 e3 73 1d e9 fa d1 38         t.s....8
   19d28:	 00 3a 47 1d 31 0b e9 38         .:G.1..8
   19d30:	 7d 7e 1a 1d 5e f8 ff 38         }~..^..8
   19d38:	 06 b1 ed 1c 62 c2 16 39         ....b..9
   19d40:	 b6 d1 c0 1c 2f 69 2d 39         ..../i-9
   19d48:	 ab e0 93 1c b6 ec 43 39         ......C9
   19d50:	 fe dd 66 1c eb 4c 5a 39         ..f..LZ9
   19d58:	 cd c9 39 1c bf 89 70 39         ..9...p9
   19d60:	 32 a4 0c 1c 24 a3 86 39         2...$..9
   19d68:	 4a 6d df 1b 0d 99 9c 39         Jm.....9
   19d70:	 30 25 b2 1b 6d 6b b2 39         0%..mk.9
   19d78:	 01 cc 84 1b 36 1a c8 39         ....6..9
   19d80:	 d8 61 57 1b 5a a5 dd 39         .aW.Z..9
   19d88:	 d2 e6 29 1b cc 0c f3 39         ..)....9
   19d90:	 0a 5b fc 1a 7f 50 08 3a         .[...P.:
   19d98:	 9d be ce 1a 66 70 1d 3a         ....fp.:
   19da0:	 a6 11 a1 1a 74 6c 32 3a         ....tl2:
   19da8:	 42 54 73 1a 9c 44 47 3a         BTs..DG:
   19db0:	 8e 86 45 1a d1 f8 5b 3a         ..E...[:
   19db8:	 a5 a8 17 1a 06 89 70 3a         ......p:
   19dc0:	 a3 ba e9 19 2f f5 84 3a         ..../..:
   19dc8:	 a6 bc bb 19 3e 3d 99 3a         ....>=.:
   19dd0:	 c8 ae 8d 19 29 61 ad 3a         ....)a.:
   19dd8:	 28 91 5f 19 e1 60 c1 3a         (._..`.:
   19de0:	 e1 63 31 19 5b 3c d5 3a         .c1.[<.:
   19de8:	 0f 27 03 19 8b f3 e8 3a         .'.....:
   19df0:	 d0 da d4 18 63 86 fc 3a         ....c..:
   19df8:	 3f 7f a6 18 d9 f4 0f 3b         ?......;
   19e00:	 7a 14 78 18 e1 3e 23 3b         z.x..>#;
   19e08:	 9d 9a 49 18 6e 64 36 3b         ..I.nd6;
   19e10:	 c4 11 1b 18 74 65 49 3b         ....teI;
   19e18:	 0d 7a ec 17 e8 41 5c 3b         .z...A\;
   19e20:	 94 d3 bd 17 be f9 6e 3b         ......n;
   19e28:	 76 1e 8f 17 eb 8c 81 3b         v......;
   19e30:	 d0 5a 60 17 63 fb 93 3b         .Z`.c..;
   19e38:	 be 88 31 17 1b 45 a6 3b         ..1..E.;
   19e40:	 5e a8 02 17 08 6a b8 3b         ^....j.;
   19e48:	 cc b9 d3 16 1d 6a ca 3b         .....j.;
   19e50:	 25 bd a4 16 52 45 dc 3b         %...RE.;
   19e58:	 86 b2 75 16 99 fb ed 3b         ..u....;
   19e60:	 0d 9a 46 16 e8 8c ff 3b         ..F....;
   19e68:	 d6 73 17 16 35 f9 10 3c         .s..5..<
   19e70:	 ff 3f e8 15 75 40 22 3c         .?..u@"<
   19e78:	 a4 fe b8 15 9d 62 33 3c         .....b3<
   19e80:	 e3 af 89 15 a2 5f 44 3c         ....._D<
   19e88:	 d9 53 5a 15 7b 37 55 3c         .SZ.{7U<
   19e90:	 a3 ea 2a 15 1c ea 65 3c         ..*...e<
   19e98:	 5e 74 fb 14 7b 77 76 3c         ^t..{wv<
   19ea0:	 27 f1 cb 14 8e df 86 3c         '......<
   19ea8:	 1d 61 9c 14 4c 22 97 3c         .a..L".<
   19eb0:	 5c c4 6c 14 a9 3f a7 3c         \.l..?.<
   19eb8:	 02 1b 3d 14 9c 37 b7 3c         ..=..7.<
   19ec0:	 2c 65 0d 14 1c 0a c7 3c         ,e.....<
   19ec8:	 f7 a2 dd 13 1e b7 d6 3c         .......<
   19ed0:	 81 d4 ad 13 98 3e e6 3c         .....>.<
   19ed8:	 e7 f9 7d 13 82 a0 f5 3c         ..}....<
   19ee0:	 48 13 4e 13 d2 dc 04 3d         H.N....=
   19ee8:	 c0 20 1e 13 7e f3 13 3d         . ..~..=
   19ef0:	 6c 22 ee 12 7c e4 22 3d         l"..|."=
   19ef8:	 6c 18 be 12 c5 af 31 3d         l.....1=
   19f00:	 dc 02 8e 12 4e 55 40 3d         ....NU@=
   19f08:	 da e1 5d 12 0f d5 4e 3d         ..]...N=
   19f10:	 83 b5 2d 12 fe 2e 5d 3d         ..-...]=
   19f18:	 f6 7d fd 11 13 63 6b 3d         .}...ck=
   19f20:	 50 3b cd 11 45 71 79 3d         P;..Eqy=
   19f28:	 af ed 9c 11 8c 59 87 3d         .....Y.=
   19f30:	 31 95 6c 11 de 1b 95 3d         1.l....=
   19f38:	 f3 31 3c 11 34 b8 a2 3d         .1<.4..=
   19f40:	 13 c4 0b 11 84 2e b0 3d         .......=
   19f48:	 af 4b db 10 c7 7e bd 3d         .K...~.=
   19f50:	 e6 c8 aa 10 f5 a8 ca 3d         .......=
   19f58:	 d5 3b 7a 10 05 ad d7 3d         .;z....=
   19f60:	 9a a4 49 10 ef 8a e4 3d         ..I....=
   19f68:	 52 03 19 10 ab 42 f1 3d         R....B.=
   19f70:	 1d 58 e8 0f 32 d4 fd 3d         .X..2..=
   19f78:	 17 a3 b7 0f 7b 3f 0a 3e         ....{?.>
   19f80:	 60 e4 86 0f 80 84 16 3e         `......>
   19f88:	 15 1c 56 0f 38 a3 22 3e         ..V.8.">
   19f90:	 53 4a 25 0f 9c 9b 2e 3e         SJ%....>
   19f98:	 3b 6f f4 0e a4 6d 3a 3e         ;o...m:>
   19fa0:	 e8 8a c3 0e 4a 19 46 3e         ....J.F>
   19fa8:	 7a 9d 92 0e 86 9e 51 3e         z.....Q>
   19fb0:	 0f a7 61 0e 51 fd 5c 3e         ..a.Q.\>
   19fb8:	 c5 a7 30 0e a4 35 68 3e         ..0..5h>
   19fc0:	 ba 9f ff 0d 78 47 73 3e         ....xGs>
   19fc8:	 0d 8f ce 0d c6 32 7e 3e         .....2~>
   19fd0:	 db 75 9d 0d 88 f7 88 3e         .u.....>
   19fd8:	 43 54 6c 0d b7 95 93 3e         CTl....>
   19fe0:	 64 2a 3b 0d 4c 0d 9e 3e         d*;.L..>
   19fe8:	 5b f8 09 0d 41 5e a8 3e         [...A^.>
   19ff0:	 47 be d8 0c 8f 88 b2 3e         G......>
   19ff8:	 47 7c a7 0c 31 8c bc 3e         G|..1..>
   1a000:	 78 32 76 0c 20 69 c6 3e         x2v. i.>
   1a008:	 f9 e0 44 0c 55 1f d0 3e         ..D.U..>
   1a010:	 e9 87 13 0c cc ae d9 3e         .......>
   1a018:	 66 27 e2 0b 7e 17 e3 3e         f'..~..>
   1a020:	 8f bf b0 0b 65 59 ec 3e         ....eY.>
   1a028:	 81 50 7f 0b 7b 74 f5 3e         .P..{t.>
   1a030:	 5c da 4d 0b bc 68 fe 3e         \.M..h.>
   1a038:	 3d 5d 1c 0b 21 36 07 3f         =]..!6.?
   1a040:	 44 d9 ea 0a a5 dc 0f 3f         D......?
   1a048:	 8f 4e b9 0a 43 5c 18 3f         .N..C\.?
   1a050:	 3d bd 87 0a f5 b4 20 3f         =..... ?
   1a058:	 6c 25 56 0a b6 e6 28 3f         l%V...(?
   1a060:	 3a 87 24 0a 81 f1 30 3f         :.$...0?
   1a068:	 c7 e2 f2 09 52 d5 38 3f         ....R.8?
   1a070:	 31 38 c1 09 23 92 40 3f         18..#.@?
   1a078:	 96 87 8f 09 f0 27 48 3f         .....'H?
   1a080:	 16 d1 5d 09 b4 96 4f 3f         ..]...O?
   1a088:	 ce 14 2c 09 6a de 56 3f         ..,.j.V?
   1a090:	 de 52 fa 08 0e ff 5d 3f         .R....]?
   1a098:	 65 8b c8 08 9b f8 64 3f         e.....d?
   1a0a0:	 80 be 96 08 0e cb 6b 3f         ......k?
   1a0a8:	 4f ec 64 08 61 76 72 3f         O.d.avr?
   1a0b0:	 f1 14 33 08 92 fa 78 3f         ..3...x?
   1a0b8:	 83 38 01 08 9b 57 7f 3f         .8...W.?
   1a0c0:	 26 57 cf 07 79 8d 85 3f         &W..y..?
   1a0c8:	 f7 70 9d 07 28 9c 8b 3f         .p..(..?
   1a0d0:	 16 86 6b 07 a5 83 91 3f         ..k....?
   1a0d8:	 a1 96 39 07 eb 43 97 3f         ..9..C.?
   1a0e0:	 b7 a2 07 07 f7 dc 9c 3f         .......?
   1a0e8:	 77 aa d5 06 c6 4e a2 3f         w....N.?
   1a0f0:	 00 ae a3 06 54 99 a7 3f         ....T..?
   1a0f8:	 71 ad 71 06 9f bc ac 3f         q.q....?
   1a100:	 e7 a8 3f 06 a2 b8 b1 3f         ..?....?
   1a108:	 83 a0 0d 06 5b 8d b6 3f         ....[..?
   1a110:	 63 94 db 05 c7 3a bb 3f         c....:.?
   1a118:	 a6 84 a9 05 e3 c0 bf 3f         .......?
   1a120:	 6b 71 77 05 ac 1f c4 3f         kqw....?
   1a128:	 d1 5a 45 05 1f 57 c8 3f         .ZE..W.?
   1a130:	 f6 40 13 05 3b 67 cc 3f         .@..;g.?
   1a138:	 fa 23 e1 04 fc 4f d0 3f         .#...O.?
   1a140:	 fc 03 af 04 5f 11 d4 3f         ...._..?
   1a148:	 1a e1 7c 04 64 ab d7 3f         ..|.d..?
   1a150:	 73 bb 4a 04 06 1e db 3f         s.J....?
   1a158:	 26 93 18 04 45 69 de 3f         &...Ei.?
   1a160:	 52 68 e6 03 1f 8d e1 3f         Rh.....?
   1a168:	 17 3b b4 03 90 89 e4 3f         .;.....?
   1a170:	 93 0b 82 03 98 5e e7 3f         .....^.?
   1a178:	 e5 d9 4f 03 35 0c ea 3f         ..O.5..?
   1a180:	 2b a6 1d 03 65 92 ec 3f         +...e..?
   1a188:	 86 70 eb 02 26 f1 ee 3f         .p..&..?
   1a190:	 14 39 b9 02 78 28 f1 3f         .9..x(.?
   1a198:	 f3 ff 86 02 58 38 f3 3f         ....X8.?
   1a1a0:	 44 c5 54 02 c5 20 f5 3f         D.T.. .?
   1a1a8:	 24 89 22 02 bf e1 f6 3f         $."....?
   1a1b0:	 b4 4b f0 01 44 7b f8 3f         .K..D{.?
   1a1b8:	 11 0d be 01 53 ed f9 3f         ....S..?
   1a1c0:	 5b cd 8b 01 ec 37 fb 3f         [....7.?
   1a1c8:	 b1 8c 59 01 0c 5b fc 3f         ..Y..[.?
   1a1d0:	 31 4b 27 01 b5 56 fd 3f         1K'..V.?
   1a1d8:	 fc 08 f5 00 e5 2a fe 3f         .....*.?
   1a1e0:	 2f c6 c2 00 9b d7 fe 3f         /......?
   1a1e8:	 ea 82 90 00 d8 5c ff 3f         .....\.?
   1a1f0:	 4c 3f 5e 00 9b ba ff 3f         L?^....?
   1a1f8:	 74 fb 2b 00 e3 f0 ff 3f         t.+....?


sine_long_1024:
   1a200:	 fe 90 0c 00 f7 b2 25 00         ......%.
   1a208:	 ea d4 3e 00 d4 f6 57 00         ..>...W.
   1a210:	 b0 18 71 00 7b 3a 8a 00         ..q.{:..
   1a218:	 30 5c a3 00 cc 7d bc 00         0\...}..
   1a220:	 4c 9f d5 00 aa c0 ee 00         L.......
   1a228:	 e3 e1 07 01 f4 02 21 01         ......!.
   1a230:	 d8 23 3a 01 8c 44 53 01         .#:..DS.
   1a238:	 0b 65 6c 01 52 85 85 01         .el.R...
   1a240:	 5d a5 9e 01 28 c5 b7 01         ]...(...
   1a248:	 b0 e4 d0 01 ef 03 ea 01         ........
   1a250:	 e3 22 03 02 88 41 1c 02         ."...A..
   1a258:	 d9 5f 35 02 d4 7d 4e 02         ._5..}N.
   1a260:	 73 9b 67 02 b3 b8 80 02         s.g.....
   1a268:	 90 d5 99 02 07 f2 b2 02         ........
   1a270:	 13 0e cc 02 b0 29 e5 02         .....)..
   1a278:	 dc 44 fe 02 91 5f 17 03         .D..._..
   1a280:	 cc 79 30 03 89 93 49 03         .y0...I.
   1a288:	 c5 ac 62 03 7b c5 7b 03         ..b.{.{.
   1a290:	 a7 dd 94 03 46 f5 ad 03         ....F...
   1a298:	 54 0c c7 03 cc 22 e0 03         T...."..
   1a2a0:	 ac 38 f9 03 ee 4d 12 04         .8...M..
   1a2a8:	 90 62 2b 04 8d 76 44 04         .b+..vD.
   1a2b0:	 e2 89 5d 04 8b 9c 76 04         ..]...v.
   1a2b8:	 83 ae 8f 04 c7 bf a8 04         ........
   1a2c0:	 54 d0 c1 04 24 e0 da 04         T...$...
   1a2c8:	 35 ef f3 04 82 fd 0c 05         5.......
   1a2d0:	 08 0b 26 05 c3 17 3f 05         ..&...?.
   1a2d8:	 ae 23 58 05 c7 2e 71 05         .#X...q.
   1a2e0:	 08 39 8a 05 6f 42 a3 05         .9..oB..
   1a2e8:	 f8 4a bc 05 9e 52 d5 05         .J...R..
   1a2f0:	 5d 59 ee 05 33 5f 07 06         ]Y..3_..
   1a2f8:	 1a 64 20 06 10 68 39 06         .d ..h9.
   1a300:	 10 6b 52 06 16 6d 6b 06         .kR..mk.
   1a308:	 1f 6e 84 06 27 6e 9d 06         .n..'n..
   1a310:	 29 6d b6 06 23 6b cf 06         )m..#k..
   1a318:	 10 68 e8 06 eb 63 01 07         .h...c..
   1a320:	 b3 5e 1a 07 62 58 33 07         .^..bX3.
   1a328:	 f4 50 4c 07 67 48 65 07         .PL.gHe.
   1a330:	 b5 3e 7e 07 dc 33 97 07         .>~..3..
   1a338:	 d7 27 b0 07 a3 1a c9 07         .'......
   1a340:	 3b 0c e2 07 9c fc fa 07         ;.......
   1a348:	 c2 eb 13 08 a9 d9 2c 08         ......,.
   1a350:	 4d c6 45 08 ab b1 5e 08         M.E...^.
   1a358:	 be 9b 77 08 83 84 90 08         ..w.....
   1a360:	 f6 6b a9 08 13 52 c2 08         .k...R..
   1a368:	 d6 36 db 08 3c 1a f4 08         .6..<...
   1a370:	 40 fc 0c 09 df dc 25 09         @.....%.
   1a378:	 14 bc 3e 09 dd 99 57 09         ..>...W.
   1a380:	 35 76 70 09 18 51 89 09         5vp..Q..
   1a388:	 83 2a a2 09 71 02 bb 09         .*..q...
   1a390:	 df d8 d3 09 c9 ad ec 09         ........
   1a398:	 2c 81 05 0a 03 53 1e 0a         ,....S..
   1a3a0:	 4a 23 37 0a fe f1 4f 0a         J#7...O.
   1a3a8:	 1b bf 68 0a 9d 8a 81 0a         ..h.....
   1a3b0:	 80 54 9a 0a c1 1c b3 0a         .T......
   1a3b8:	 5b e3 cb 0a 4b a8 e4 0a         [...K...
   1a3c0:	 8d 6b fd 0a 1d 2d 16 0b         .k...-..
   1a3c8:	 f8 ec 2e 0b 19 ab 47 0b         ......G.
   1a3d0:	 7c 67 60 0b 1f 22 79 0b         |g`.."y.
   1a3d8:	 fc da 91 0b 11 92 aa 0b         ........
   1a3e0:	 59 47 c3 0b d1 fa db 0b         YG......
   1a3e8:	 75 ac f4 0b 41 5c 0d 0c         u...A\..
   1a3f0:	 31 0a 26 0c 41 b6 3e 0c         1.&.A.>.
   1a3f8:	 6e 60 57 0c b3 08 70 0c         n`W...p.
   1a400:	 0e af 88 0c 7a 53 a1 0c         ....zS..
   1a408:	 f3 f5 b9 0c 76 96 d2 0c         ....v...
   1a410:	 fe 34 eb 0c 89 d1 03 0d         .4......
   1a418:	 11 6c 1c 0d 95 04 35 0d         .l....5.
   1a420:	 0e 9b 4d 0d 7b 2f 66 0d         ..M.{/f.
   1a428:	 d6 c1 7e 0d 1d 52 97 0d         ..~..R..
   1a430:	 4b e0 af 0d 5d 6c c8 0d         K...]l..
   1a438:	 4f f6 e0 0d 1d 7e f9 0d         O....~..
   1a440:	 c3 03 12 0e 3e 87 2a 0e         ....>.*.
   1a448:	 89 08 43 0e a2 87 5b 0e         ..C...[.
   1a450:	 83 04 74 0e 2a 7f 8c 0e         ..t.*...
   1a458:	 93 f7 a4 0e b9 6d bd 0e         .....m..
   1a460:	 9a e1 d5 0e 31 53 ee 0e         ....1S..
   1a468:	 7a c2 06 0f 73 2f 1f 0f         z...s/..
   1a470:	 16 9a 37 0f 60 02 50 0f         ..7.`.P.
   1a478:	 4e 68 68 0f dc cb 80 0f         Nhh.....
   1a480:	 06 2d 99 0f c8 8b b1 0f         .-......
   1a488:	 1e e8 c9 0f 05 42 e2 0f         .....B..
   1a490:	 79 99 fa 0f 76 ee 12 10         y...v...
   1a498:	 f8 40 2b 10 fd 90 43 10         .@+...C.
   1a4a0:	 7f de 5b 10 7b 29 74 10         ..[.{)t.
   1a4a8:	 ee 71 8c 10 d3 b7 a4 10         .q......
   1a4b0:	 28 fb bc 10 e7 3b d5 10         (....;..
   1a4b8:	 0e 7a ed 10 99 b5 05 11         .z......
   1a4c0:	 84 ee 1d 11 cb 24 36 11         .....$6.
   1a4c8:	 6a 58 4e 11 5f 89 66 11         jXN._.f.
   1a4d0:	 a4 b7 7e 11 37 e3 96 11         ..~.7...
   1a4d8:	 13 0c af 11 35 32 c7 11         ....52..
   1a4e0:	 99 55 df 11 3c 76 f7 11         .U..<v..
   1a4e8:	 1a 94 0f 12 2e af 27 12         ......'.
   1a4f0:	 76 c7 3f 12 ed dc 57 12         v.?...W.
   1a4f8:	 90 ef 6f 12 5b ff 87 12         ..o.[...
   1a500:	 4b 0c a0 12 5b 16 b8 12         K...[...
   1a508:	 89 1d d0 12 cf 21 e8 12         .....!..
   1a510:	 2c 23 00 13 9a 21 18 13         ,#...!..
   1a518:	 16 1d 30 13 9d 15 48 13         ..0...H.
   1a520:	 2a 0b 60 13 bb fd 77 13         *.`...w.
   1a528:	 4b ed 8f 13 d7 d9 a7 13         K.......
   1a530:	 5b c3 bf 13 d3 a9 d7 13         [.......
   1a538:	 3c 8d ef 13 91 6d 07 14         <....m..
   1a540:	 d1 4a 1f 14 f5 24 37 14         .J...$7.
   1a548:	 fc fb 4e 14 e1 cf 66 14         ..N...f.
   1a550:	 a0 a0 7e 14 36 6e 96 14         ..~.6n..
   1a558:	 a0 38 ae 14 d9 ff c5 14         .8......
   1a560:	 de c3 dd 14 ac 84 f5 14         ........
   1a568:	 3d 42 0d 15 90 fc 24 15         =B....$.
   1a570:	 a0 b3 3c 15 6a 67 54 15         ..<.jgT.
   1a578:	 e9 17 6c 15 1b c5 83 15         ..l.....
   1a580:	 fb 6e 9b 15 87 15 b3 15         .n......
   1a588:	 ba b8 ca 15 90 58 e2 15         .....X..
   1a590:	 07 f5 f9 15 1a 8e 11 16         ........
   1a598:	 c5 23 29 16 06 b6 40 16         .#)...@.
   1a5a0:	 d8 44 58 16 39 d0 6f 16         .DX.9.o.
   1a5a8:	 23 58 87 16 94 dc 9e 16         #X......
   1a5b0:	 88 5d b6 16 fb da cd 16         .]......
   1a5b8:	 ea 54 e5 16 51 cb fc 16         .T..Q...
   1a5c0:	 2d 3e 14 17 7a ad 2b 17         ->..z.+.
   1a5c8:	 33 19 43 17 57 81 5a 17         3.C.W.Z.
   1a5d0:	 e0 e5 71 17 cc 46 89 17         ..q..F..
   1a5d8:	 17 a4 a0 17 bd fd b7 17         ........
   1a5e0:	 bb 53 cf 17 0c a6 e6 17         .S......
   1a5e8:	 ae f4 fd 17 9d 3f 15 18         .....?..
   1a5f0:	 d5 86 2c 18 53 ca 43 18         ..,.S.C.
   1a5f8:	 13 0a 5b 18 11 46 72 18         ..[..Fr.
   1a600:	 4a 7e 89 18 bb b2 a0 18         J~......
   1a608:	 5f e3 b7 18 34 10 cf 18         _...4...
   1a610:	 35 39 e6 18 5f 5e fd 18         59.._^..
   1a618:	 ae 7f 14 19 1f 9d 2b 19         ......+.
   1a620:	 af b6 42 19 5a cc 59 19         ..B.Z.Y.
   1a628:	 1b de 70 19 f0 eb 87 19         ..p.....
   1a630:	 d6 f5 9e 19 c8 fb b5 19         ........
   1a638:	 c2 fd cc 19 c3 fb e3 19         ........
   1a640:	 c5 f5 fa 19 c5 eb 11 1a         ........
   1a648:	 c0 dd 28 1a b3 cb 3f 1a         ..(...?.
   1a650:	 99 b5 56 1a 70 9b 6d 1a         ..V.p.m.
   1a658:	 33 7d 84 1a df 5a 9b 1a         3}...Z..
   1a660:	 71 34 b2 1a e5 09 c9 1a         q4......
   1a668:	 37 db df 1a 65 a8 f6 1a         7...e...
   1a670:	 6a 71 0d 1b 43 36 24 1b         jq..C6$.
   1a678:	 ec f6 3a 1b 63 b3 51 1b         ..:.c.Q.
   1a680:	 a3 6b 68 1b a9 1f 7f 1b         .kh.....
   1a688:	 71 cf 95 1b f9 7a ac 1b         q....z..
   1a690:	 3c 22 c3 1b 37 c5 d9 1b         <"..7...
   1a698:	 e6 63 f0 1b 46 fe 06 1c         .c..F...
   1a6a0:	 54 94 1d 1c 0c 26 34 1c         T....&4.
   1a6a8:	 6b b3 4a 1c 6d 3c 61 1c         k.J.m<a.
   1a6b0:	 0e c1 77 1c 4b 41 8e 1c         ..w.KA..
   1a6b8:	 21 bd a4 1c 8d 34 bb 1c         !....4..
   1a6c0:	 8a a7 d1 1c 15 16 e8 1c         ........
   1a6c8:	 2b 80 fe 1c c9 e5 14 1d         +.......
   1a6d0:	 ea 46 2b 1d 8c a3 41 1d         .F+...A.
   1a6d8:	 aa fb 57 1d 43 4f 6e 1d         ..W.COn.
   1a6e0:	 51 9e 84 1d d2 e8 9a 1d         Q.......
   1a6e8:	 c3 2e b1 1d 1f 70 c7 1d         .....p..
   1a6f0:	 e4 ac dd 1d 0d e5 f3 1d         ........
   1a6f8:	 98 18 0a 1e 81 47 20 1e         .....G .
   1a700:	 c5 71 36 1e 60 97 4c 1e         .q6.`.L.
   1a708:	 4f b8 62 1e 8e d4 78 1e         O.b...x.
   1a710:	 1b ec 8e 1e f0 fe a4 1e         ........
   1a718:	 0d 0d bb 1e 6b 16 d1 1e         ....k...
   1a720:	 0a 1b e7 1e e4 1a fd 1e         ........
   1a728:	 f7 15 13 1f 3f 0c 29 1f         ....?.).
   1a730:	 b9 fd 3e 1f 62 ea 54 1f         ..>.b.T.
   1a738:	 35 d2 6a 1f 31 b5 80 1f         5.j.1...
   1a740:	 50 93 96 1f 91 6c ac 1f         P....l..
   1a748:	 ef 40 c2 1f 67 10 d8 1f         .@..g...
   1a750:	 f6 da ed 1f 99 a0 03 20         ....... 
   1a758:	 4c 61 19 20 0b 1d 2f 20         La. ../ 
   1a760:	 d4 d3 44 20 a3 85 5a 20         ..D ..Z 
   1a768:	 75 32 70 20 46 da 85 20         u2p F.. 
   1a770:	 13 7d 9b 20 d9 1a b1 20         .}. ... 
   1a778:	 95 b3 c6 20 42 47 dc 20         ... BG. 
   1a780:	 de d5 f1 20 65 5f 07 21         ... e_.!
   1a788:	 d5 e3 1c 21 29 63 32 21         ...!)c2!
   1a790:	 5f dd 47 21 73 52 5d 21         _.G!sR]!
   1a798:	 62 c2 72 21 28 2d 88 21         b.r!(-.!
   1a7a0:	 c2 92 9d 21 2e f3 b2 21         ...!...!
   1a7a8:	 67 4e c8 21 6a a4 dd 21         gN.!j..!
   1a7b0:	 34 f5 f2 21 c2 40 08 22         4..!.@."
   1a7b8:	 11 87 1d 22 1c c8 32 22         ..."..2"
   1a7c0:	 e2 03 48 22 5e 3a 5d 22         ..H"^:]"
   1a7c8:	 8e 6b 72 22 6e 97 87 22         .kr"n.."
   1a7d0:	 fa bd 9c 22 30 df b1 22         ..."0.."
   1a7d8:	 0c fb c6 22 8c 11 dc 22         ..."..."
   1a7e0:	 ab 22 f1 22 67 2e 06 23         ."."g..#
   1a7e8:	 bc 34 1b 23 a7 35 30 23         .4.#.50#
   1a7f0:	 25 31 45 23 33 27 5a 23         %1E#3'Z#
   1a7f8:	 cc 17 6f 23 ef 02 84 23         ..o#...#
   1a800:	 98 e8 98 23 c4 c8 ad 23         ...#...#
   1a808:	 6f a3 c2 23 96 78 d7 23         o..#.x.#
   1a810:	 37 48 ec 23 4d 12 01 24         7H.#M..$
   1a818:	 d5 d6 15 24 ce 95 2a 24         ...$..*$
   1a820:	 32 4f 3f 24 ff 02 54 24         2O?$..T$
   1a828:	 32 b1 68 24 c8 59 7d 24         2.h$.Y}$
   1a830:	 be fc 91 24 0f 9a a6 24         ...$...$
   1a838:	 ba 31 bb 24 ba c3 cf 24         .1.$...$
   1a840:	 0e 50 e4 24 b0 d6 f8 24         .P.$...$
   1a848:	 a0 57 0d 25 d8 d2 21 25         .W.%..!%
   1a850:	 57 48 36 25 18 b8 4a 25         WH6%..J%
   1a858:	 19 22 5f 25 57 86 73 25         ."_%W.s%
   1a860:	 cf e4 87 25 7c 3d 9c 25         ...%|=.%
   1a868:	 5d 90 b0 25 6e dd c4 25         ]..%n..%
   1a870:	 ac 24 d9 25 14 66 ed 25         .$.%.f.%
   1a878:	 a2 a1 01 26 54 d7 15 26         ...&T..&
   1a880:	 27 07 2a 26 17 31 3e 26         '.*&.1>&
   1a888:	 21 55 52 26 42 73 66 26         !UR&Bsf&
   1a890:	 77 8b 7a 26 bd 9d 8e 26         w.z&...&
   1a898:	 11 aa a2 26 70 b0 b6 26         ...&p..&
   1a8a0:	 d6 b0 ca 26 41 ab de 26         ...&A..&
   1a8a8:	 ad 9f f2 26 18 8e 06 27         ...&...'
   1a8b0:	 7e 76 1a 27 dc 58 2e 27         ~v.'.X.'
   1a8b8:	 30 35 42 27 76 0b 56 27         05B'v.V'
   1a8c0:	 aa db 69 27 cb a5 7d 27         ..i'..}'
   1a8c8:	 d5 69 91 27 c4 27 a5 27         .i.'.'.'
   1a8d0:	 97 df b8 27 49 91 cc 27         ...'I..'
   1a8d8:	 d8 3c e0 27 41 e2 f3 27         .<.'A..'
   1a8e0:	 81 81 07 28 94 1a 1b 28         ...(...(
   1a8e8:	 78 ad 2e 28 2a 3a 42 28         x..(*:B(
   1a8f0:	 a6 c0 55 28 ea 40 69 28         ..U(.@i(
   1a8f8:	 f3 ba 7c 28 bd 2e 90 28         ..|(...(
   1a900:	 46 9c a3 28 8b 03 b7 28         F..(...(
   1a908:	 88 64 ca 28 3b bf dd 28         .d.(;..(
   1a910:	 a0 13 f1 28 b5 61 04 29         ...(.a.)
   1a918:	 77 a9 17 29 e3 ea 2a 29         w..)..*)
   1a920:	 f5 25 3e 29 ab 5a 51 29         .%>).ZQ)
   1a928:	 02 89 64 29 f7 b0 77 29         ..d)..w)
   1a930:	 87 d2 8a 29 af ed 9d 29         ...)...)
   1a938:	 6c 02 b1 29 ba 10 c4 29         l..)...)
   1a940:	 99 18 d7 29 03 1a ea 29         ...)...)
   1a948:	 f6 14 fd 29 70 09 10 2a         ...)p..*
   1a950:	 6e f7 22 2a eb de 35 2a         n."*..5*
   1a958:	 e7 bf 48 2a 5d 9a 5b 2a         ..H*].[*
   1a960:	 4b 6e 6e 2a ae 3b 81 2a         Knn*.;.*
   1a968:	 83 02 94 2a c6 c2 a6 2a         ...*...*
   1a970:	 77 7c b9 2a 90 2f cc 2a         w|.*./.*
   1a978:	 10 dc de 2a f3 81 f1 2a         ...*...*
   1a980:	 37 21 04 2b d9 b9 16 2b         7!.+...+
   1a988:	 d5 4b 29 2b 2a d7 3b 2b         .K)+*.;+
   1a990:	 d4 5b 4e 2b d0 d9 60 2b         .[N+..`+
   1a998:	 1c 51 73 2b b5 c1 85 2b         .Qs+...+
   1a9a0:	 97 2b 98 2b c0 8e aa 2b         .+.+...+
   1a9a8:	 2d eb bc 2b dc 40 cf 2b         -..+.@.+
   1a9b0:	 c9 8f e1 2b f2 d7 f3 2b         ...+...+
   1a9b8:	 53 19 06 2c eb 53 18 2c         S..,.S.,
   1a9c0:	 b6 87 2a 2c b1 b4 3c 2c         ..*,..<,
   1a9c8:	 da da 4e 2c 2d fa 60 2c         ..N,-.`,
   1a9d0:	 a9 12 73 2c 4a 24 85 2c         ..s,J$.,
   1a9d8:	 0d 2f 97 2c ef 32 a9 2c         ./.,.2.,
   1a9e0:	 ef 2f bb 2c 09 26 cd 2c         ./.,.&.,
   1a9e8:	 3a 15 df 2c 80 fd f0 2c         :..,...,
   1a9f0:	 d7 de 02 2d 3d b9 14 2d         ...-=..-
   1a9f8:	 b0 8c 26 2d 2c 59 38 2d         ..&-,Y8-
   1aa00:	 af 1e 4a 2d 36 dd 5b 2d         ..J-6.[-
   1aa08:	 bf 94 6d 2d 45 45 7f 2d         ..m-EE.-
   1aa10:	 c8 ee 90 2d 44 91 a2 2d         ...-D..-
   1aa18:	 b6 2c b4 2d 1c c1 c5 2d         .,.-...-
   1aa20:	 73 4e d7 2d b8 d4 e8 2d         sN.-...-
   1aa28:	 e9 53 fa 2d 03 cc 0b 2e         .S.-....
   1aa30:	 03 3d 1d 2e e6 a6 2e 2e         .=......
   1aa38:	 aa 09 40 2e 4c 65 51 2e         ..@.LeQ.
   1aa40:	 ca b9 62 2e 20 07 74 2e         ..b. .t.
   1aa48:	 4d 4d 85 2e 4d 8c 96 2e         MM..M...
   1aa50:	 1e c4 a7 2e bc f4 b8 2e         ........
   1aa58:	 27 1e ca 2e 5a 40 db 2e         '...Z@..
   1aa60:	 53 5b ec 2e 10 6f fd 2e         S[...o..
   1aa68:	 8e 7b 0e 2f ca 80 1f 2f         .{./.../
   1aa70:	 c2 7e 30 2f 73 75 41 2f         .~0/suA/
   1aa78:	 da 64 52 2f f5 4c 63 2f         .dR/.Lc/
   1aa80:	 c1 2d 74 2f 3c 07 85 2f         .-t/<../
   1aa88:	 63 d9 95 2f 33 a4 a6 2f         c../3../
   1aa90:	 aa 67 b7 2f c5 23 c8 2f         .g./.#./
   1aa98:	 82 d8 d8 2f de 85 e9 2f         .../.../
   1aaa0:	 d6 2b fa 2f 69 ca 0a 30         .+./i..0
   1aaa8:	 93 61 1b 30 51 f1 2b 30         .a.0Q.+0
   1aab0:	 a2 79 3c 30 83 fa 4c 30         .y<0..L0
   1aab8:	 f0 73 5d 30 e9 e5 6d 30         .s]0..m0
   1aac0:	 69 50 7e 30 6f b3 8e 30         iP~0o..0
   1aac8:	 f8 0e 9f 30 02 63 af 30         ...0.c.0
   1aad0:	 89 af bf 30 8c f4 cf 30         ...0...0
   1aad8:	 08 32 e0 30 fb 67 f0 30         .2.0.g.0
   1aae0:	 61 96 00 31 39 bd 10 31         a..19..1
   1aae8:	 80 dc 20 31 33 f4 30 31         .. 13.01
   1aaf0:	 50 04 41 31 d5 0c 51 31         P.A1..Q1
   1aaf8:	 bf 0d 61 31 0c 07 71 31         ..a1..q1
   1ab00:	 b8 f8 80 31 c3 e2 90 31         ...1...1
   1ab08:	 28 c5 a0 31 e7 9f b0 31         (..1...1
   1ab10:	 fb 72 c0 31 64 3e d0 31         .r.1d>.1
   1ab18:	 1e 02 e0 31 27 be ef 31         ...1'..1
   1ab20:	 7c 72 ff 31 1c 1f 0f 32         |r.1...2
   1ab28:	 03 c4 1e 32 30 61 2e 32         ...20a.2
   1ab30:	 a0 f6 3d 32 50 84 4d 32         ..=2P.M2
   1ab38:	 3e 0a 5d 32 68 88 6c 32         >.]2h.l2
   1ab40:	 cc fe 7b 32 66 6d 8b 32         ..{2fm.2
   1ab48:	 35 d4 9a 32 36 33 aa 32         5..263.2
   1ab50:	 67 8a b9 32 c6 d9 c8 32         g..2...2
   1ab58:	 50 21 d8 32 02 61 e7 32         P!.2.a.2
   1ab60:	 db 98 f6 32 d7 c8 05 33         ...2...3
   1ab68:	 f6 f0 14 33 34 11 24 33         ...34.$3
   1ab70:	 8f 29 33 33 04 3a 42 33         .)33.:B3
   1ab78:	 92 42 51 33 36 43 60 33         .BQ36C`3
   1ab80:	 ee 3b 6f 33 b7 2c 7e 33         .;o3.,~3
   1ab88:	 90 15 8d 33 75 f6 9b 33         ...3u..3
   1ab90:	 65 cf aa 33 5d a0 b9 33         e..3]..3
   1ab98:	 5b 69 c8 33 5d 2a d7 33         [i.3]*.3
   1aba0:	 60 e3 e5 33 62 94 f4 33         `..3b..3
   1aba8:	 61 3d 03 34 5b de 11 34         a=.4[..4
   1abb0:	 4d 77 20 34 36 08 2f 34         Mw 46./4
   1abb8:	 12 91 3d 34 e0 11 4c 34         ..=4..L4
   1abc0:	 9d 8a 5a 34 47 fb 68 34         ..Z4G.h4
   1abc8:	 dd 63 77 34 5b c4 85 34         .cw4[..4
   1abd0:	 bf 1c 94 34 08 6d a2 34         ...4.m.4
   1abd8:	 33 b5 b0 34 3d f5 be 34         3..4=..4
   1abe0:	 26 2d cd 34 ea 5c db 34         &-.4.\.4
   1abe8:	 87 84 e9 34 fb a3 f7 34         ...4...4
   1abf0:	 44 bb 05 35 60 ca 13 35         D..5`..5
   1abf8:	 4d d1 21 35 08 d0 2f 35         M.!5../5
   1ac00:	 8f c6 3d 35 e1 b4 4b 35         ..=5..K5
   1ac08:	 fa 9a 59 35 d9 78 67 35         ..Y5.xg5
   1ac10:	 7c 4e 75 35 e0 1b 83 35         |Nu5...5
   1ac18:	 04 e1 90 35 e5 9d 9e 35         ...5...5
   1ac20:	 82 52 ac 35 d7 fe b9 35         .R.5...5
   1ac28:	 e3 a2 c7 35 a5 3e d5 35         ...5.>.5
   1ac30:	 19 d2 e2 35 3d 5d f0 35         ...5=].5
   1ac38:	 11 e0 fd 35 90 5a 0b 36         ...5.Z.6
   1ac40:	 ba cc 18 36 8d 36 26 36         ...6.6&6
   1ac48:	 06 98 33 36 23 f1 40 36         ..36#.@6
   1ac50:	 e2 41 4e 36 41 8a 5b 36         .AN6A.[6
   1ac58:	 3e ca 68 36 d7 01 76 36         >.h6..v6
   1ac60:	 0b 31 83 36 d6 57 90 36         .1.6.W.6
   1ac68:	 37 76 9d 36 2c 8c aa 36         7v.6,..6
   1ac70:	 b3 99 b7 36 c9 9e c4 36         ...6...6
   1ac78:	 6e 9b d1 36 9e 8f de 36         n..6...6
   1ac80:	 58 7b eb 36 9a 5e f8 36         X{.6.^.6
   1ac88:	 62 39 05 37 ae 0b 12 37         b9.7...7
   1ac90:	 7c d5 1e 37 ca 96 2b 37         |..7..+7
   1ac98:	 95 4f 38 37 dd ff 44 37         .O87..D7
   1aca0:	 9e a7 51 37 d8 46 5e 37         ..Q7.F^7
   1aca8:	 88 dd 6a 37 ac 6b 77 37         ..j7.kw7
   1acb0:	 43 f1 83 37 49 6e 90 37         C..7In.7
   1acb8:	 be e2 9c 37 a0 4e a9 37         ...7.N.7
   1acc0:	 ec b1 b5 37 a1 0c c2 37         ...7...7
   1acc8:	 bd 5e ce 37 3d a8 da 37         .^.7=..7
   1acd0:	 21 e9 e6 37 65 21 f3 37         !..7e!.7
   1acd8:	 09 51 ff 37 0a 78 0b 38         .Q.7.x.8
   1ace0:	 66 96 17 38 1d ac 23 38         f..8..#8
   1ace8:	 2a b9 2f 38 8e bd 3b 38         *./8..;8
   1acf0:	 46 b9 47 38 4f ac 53 38         F.G8O.S8
   1acf8:	 a9 96 5f 38 52 78 6b 38         .._8Rxk8
   1ad00:	 47 51 77 38 87 21 83 38         GQw8.!.8
   1ad08:	 10 e9 8e 38 e0 a7 9a 38         ...8...8
   1ad10:	 f6 5d a6 38 4f 0b b2 38         .].8O..8
   1ad18:	 ea af bd 38 c4 4b c9 38         ...8.K.8
   1ad20:	 dd de d4 38 32 69 e0 38         ...82i.8
   1ad28:	 c2 ea eb 38 8b 63 f7 38         ...8.c.8
   1ad30:	 8b d3 02 39 c0 3a 0e 39         ...9.:.9
   1ad38:	 29 99 19 39 c3 ee 24 39         )..9..$9
   1ad40:	 8e 3b 30 39 86 7f 3b 39         .;09..;9
   1ad48:	 ac ba 46 39 fc ec 51 39         ..F9..Q9
   1ad50:	 75 16 5d 39 15 37 68 39         u.]9.7h9
   1ad58:	 dc 4e 73 39 c6 5d 7e 39         .Ns9.]~9
   1ad60:	 d2 63 89 39 ff 60 94 39         .c.9.`.9
   1ad68:	 4b 55 9f 39 b4 40 aa 39         KU.9.@.9
   1ad70:	 39 23 b5 39 d7 fc bf 39         9#.9...9
   1ad78:	 8d cd ca 39 5a 95 d5 39         ...9Z..9
   1ad80:	 3c 54 e0 39 31 0a eb 39         <T.91..9
   1ad88:	 37 b7 f5 39 4d 5b 00 3a         7..9M[.:
   1ad90:	 71 f6 0a 3a a2 88 15 3a         q..:...:
   1ad98:	 de 11 20 3a 23 92 2a 3a         .. :#.*:
   1ada0:	 70 09 35 3a c3 77 3f 3a         p.5:.w?:
   1ada8:	 1a dd 49 3a 74 39 54 3a         ..I:t9T:
   1adb0:	 d0 8c 5e 3a 2b d7 68 3a         ..^:+.h:
   1adb8:	 84 18 73 3a da 50 7d 3a         ..s:.P}:
   1adc0:	 2a 80 87 3a 74 a6 91 3a         *..:t..:
   1adc8:	 b6 c3 9b 3a ee d7 a5 3a         ...:...:
   1add0:	 1b e3 af 3a 3a e5 b9 3a         ...::..:
   1add8:	 4c de c3 3a 4d ce cd 3a         L..:M..:
   1ade0:	 3d b5 d7 3a 1a 93 e1 3a         =..:...:
   1ade8:	 e3 67 eb 3a 95 33 f5 3a         .g.:.3.:
   1adf0:	 30 f6 fe 3a b2 af 08 3b         0..:...;
   1adf8:	 19 60 12 3b 64 07 1c 3b         .`.;d..;
   1ae00:	 91 a5 25 3b a0 3a 2f 3b         ..%;.:/;
   1ae08:	 8e c6 38 3b 5a 49 42 3b         ..8;ZIB;
   1ae10:	 03 c3 4b 3b 86 33 55 3b         ..K;.3U;
   1ae18:	 e4 9a 5e 3b 19 f9 67 3b         ..^;..g;
   1ae20:	 25 4e 71 3b 07 9a 7a 3b         %Nq;..z;
   1ae28:	 bc dc 83 3b 44 16 8d 3b         ...;D..;
   1ae30:	 9d 46 96 3b c5 6d 9f 3b         .F.;.m.;
   1ae38:	 bc 8b a8 3b 80 a0 b1 3b         ...;...;
   1ae40:	 0e ac ba 3b 67 ae c3 3b         ...;g..;
   1ae48:	 89 a7 cc 3b 71 97 d5 3b         ...;q..;
   1ae50:	 20 7e de 3b 93 5b e7 3b          ~.;.[.;
   1ae58:	 c9 2f f0 3b c0 fa f8 3b         ./.;...;
   1ae60:	 78 bc 01 3c f0 74 0a 3c         x..<.t.<
   1ae68:	 24 24 13 3c 16 ca 1b 3c         $$.<...<
   1ae70:	 c2 66 24 3c 28 fa 2c 3c         .f$<(.,<
   1ae78:	 46 84 35 3c 1b 05 3e 3c         F.5<..><
   1ae80:	 a6 7c 46 3c e5 ea 4e 3c         .|F<..N<
   1ae88:	 d8 4f 57 3c 7c ab 5f 3c         .OW<|._<
   1ae90:	 d1 fd 67 3c d6 46 70 3c         ..g<.Fp<
   1ae98:	 88 86 78 3c e7 bc 80 3c         ..x<...<
   1aea0:	 f1 e9 88 3c a5 0d 91 3c         ...<...<
   1aea8:	 03 28 99 3c 08 39 a1 3c         .(.<.9.<
   1aeb0:	 b3 40 a9 3c 04 3f b1 3c         .@.<.?.<
   1aeb8:	 f9 33 b9 3c 90 1f c1 3c         .3.<...<
   1aec0:	 c9 01 c9 3c a2 da d0 3c         ...<...<
   1aec8:	 1b aa d8 3c 31 70 e0 3c         ...<1p.<
   1aed0:	 e4 2c e8 3c 32 e0 ef 3c         .,.<2..<
   1aed8:	 1b 8a f7 3c 9d 2a ff 3c         ...<.*.<
   1aee0:	 b6 c1 06 3d 67 4f 0e 3d         ...=gO.=
   1aee8:	 ad d3 15 3d 88 4e 1d 3d         ...=.N.=
   1aef0:	 f6 bf 24 3d f6 27 2c 3d         ..$=.',=
   1aef8:	 87 86 33 3d a7 db 3a 3d         ..3=..:=
   1af00:	 57 27 42 3d 94 69 49 3d         W'B=.iI=
   1af08:	 5e a2 50 3d b3 d1 57 3d         ^.P=..W=
   1af10:	 93 f7 5e 3d fb 13 66 3d         ..^=..f=
   1af18:	 ec 26 6d 3d 64 30 74 3d         .&m=d0t=
   1af20:	 61 30 7b 3d e4 26 82 3d         a0{=.&.=
   1af28:	 ea 13 89 3d 72 f7 8f 3d         ...=r..=
   1af30:	 7d d1 96 3d 08 a2 9d 3d         }..=...=
   1af38:	 12 69 a4 3d 9b 26 ab 3d         .i.=.&.=
   1af40:	 a2 da b1 3d 24 85 b8 3d         ...=$..=
   1af48:	 22 26 bf 3d 9b bd c5 3d         "&.=...=
   1af50:	 8d 4b cc 3d f7 cf d2 3d         .K.=...=
   1af58:	 d8 4a d9 3d 30 bc df 3d         .J.=0..=
   1af60:	 fd 23 e6 3d 3e 82 ec 3d         .#.=>..=
   1af68:	 f3 d6 f2 3d 1a 22 f9 3d         ...=.".=
   1af70:	 b2 63 ff 3d bb 9b 05 3e         .c.=...>
   1af78:	 34 ca 0b 3e 1b ef 11 3e         4..>...>
   1af80:	 6f 0a 18 3e 30 1c 1e 3e         o..>0..>
   1af88:	 5d 24 24 3e f4 22 2a 3e         ]$$>."*>
   1af90:	 f6 17 30 3e 60 03 36 3e         ..0>`.6>
   1af98:	 32 e5 3b 3e 6c bd 41 3e         2.;>l.A>
   1afa0:	 0b 8c 47 3e 10 51 4d 3e         ..G>.QM>
   1afa8:	 7a 0c 53 3e 47 be 58 3e         z.S>G.X>
   1afb0:	 76 66 5e 3e 07 05 64 3e         vf^>..d>
   1afb8:	 fa 99 69 3e 4c 25 6f 3e         ..i>L%o>
   1afc0:	 fd a6 74 3e 0d 1f 7a 3e         ..t>..z>
   1afc8:	 7b 8d 7f 3e 45 f2 84 3e         {..>E..>
   1afd0:	 6a 4d 8a 3e eb 9e 8f 3e         jM.>...>
   1afd8:	 c6 e6 94 3e fb 24 9a 3e         ...>.$.>
   1afe0:	 88 59 9f 3e 6c 84 a4 3e         .Y.>l..>
   1afe8:	 a8 a5 a9 3e 3a bd ae 3e         ...>:..>
   1aff0:	 21 cb b3 3e 5d cf b8 3e         !..>]..>
   1aff8:	 ed c9 bd 3e d0 ba c2 3e         ...>...>
   1b000:	 05 a2 c7 3e 8b 7f cc 3e         ...>...>
   1b008:	 63 53 d1 3e 8a 1d d6 3e         cS.>...>
   1b010:	 01 de da 3e c7 94 df 3e         ...>...>
   1b018:	 da 41 e4 3e 3a e5 e8 3e         .A.>:..>
   1b020:	 e7 7e ed 3e e0 0e f2 3e         .~.>...>
   1b028:	 23 95 f6 3e b1 11 fb 3e         #..>...>
   1b030:	 89 84 ff 3e a9 ed 03 3f         ...>...?
   1b038:	 12 4d 08 3f c2 a2 0c 3f         .M.?...?
   1b040:	 b9 ee 10 3f f7 30 15 3f         ...?.0.?
   1b048:	 7a 69 19 3f 42 98 1d 3f         zi.?B..?
   1b050:	 4e bd 21 3f 9e d8 25 3f         N.!?..%?
   1b058:	 31 ea 29 3f 06 f2 2d 3f         1.)?..-?
   1b060:	 1d f0 31 3f 76 e4 35 3f         ..1?v.5?
   1b068:	 0e cf 39 3f e7 af 3d 3f         ..9?..=?
   1b070:	 ff 86 41 3f 56 54 45 3f         ..A?VTE?
   1b078:	 eb 17 49 3f be d1 4c 3f         ..I?..L?
   1b080:	 cd 81 50 3f 1a 28 54 3f         ..P?.(T?
   1b088:	 a2 c4 57 3f 65 57 5b 3f         ..W?eW[?
   1b090:	 63 e0 5e 3f 9b 5f 62 3f         c.^?._b?
   1b098:	 0d d5 65 3f b8 40 69 3f         ..e?.@i?
   1b0a0:	 9c a2 6c 3f b8 fa 6f 3f         ..l?..o?
   1b0a8:	 0b 49 73 3f 96 8d 76 3f         .Is?..v?
   1b0b0:	 57 c8 79 3f 4e f9 7c 3f         W.y?N.|?
   1b0b8:	 7b 20 80 3f dd 3d 83 3f         { .?.=.?
   1b0c0:	 74 51 86 3f 3e 5b 89 3f         tQ.?>[.?
   1b0c8:	 3d 5b 8c 3f 6e 51 8f 3f         =[.?nQ.?
   1b0d0:	 d2 3d 92 3f 69 20 95 3f         .=.?i .?
   1b0d8:	 32 f9 97 3f 2c c8 9a 3f         2..?,..?
   1b0e0:	 56 8d 9d 3f b2 48 a0 3f         V..?.H.?
   1b0e8:	 3d fa a2 3f f9 a1 a5 3f         =..?...?
   1b0f0:	 e3 3f a8 3f fd d3 aa 3f         .?.?...?
   1b0f8:	 45 5e ad 3f bb de af 3f         E^.?...?
   1b100:	 5f 55 b2 3f 31 c2 b4 3f         _U.?1..?
   1b108:	 2f 25 b7 3f 5a 7e b9 3f         /%.?Z~.?
   1b110:	 b1 cd bb 3f 34 13 be 3f         ...?4..?
   1b118:	 e3 4e c0 3f bc 80 c2 3f         .N.?...?
   1b120:	 c1 a8 c4 3f f0 c6 c6 3f         ...?...?
   1b128:	 4a db c8 3f cd e5 ca 3f         J..?...?
   1b130:	 7a e6 cc 3f 50 dd ce 3f         z..?P..?
   1b138:	 4f ca d0 3f 77 ad d2 3f         O..?w..?
   1b140:	 c7 86 d4 3f 3f 56 d6 3f         ...??V.?
   1b148:	 df 1b d8 3f a7 d7 d9 3f         ...?...?
   1b150:	 96 89 db 3f ac 31 dd 3f         ...?.1.?
   1b158:	 e8 cf de 3f 4b 64 e0 3f         ...?Kd.?
   1b160:	 d5 ee e1 3f 84 6f e3 3f         ...?.o.?
   1b168:	 59 e6 e4 3f 54 53 e6 3f         Y..?TS.?
   1b170:	 74 b6 e7 3f b9 0f e9 3f         t..?...?
   1b178:	 23 5f ea 3f b2 a4 eb 3f         #_.?...?
   1b180:	 65 e0 ec 3f 3d 12 ee 3f         e..?=..?
   1b188:	 39 3a ef 3f 58 58 f0 3f         9:.?XX.?
   1b190:	 9c 6c f1 3f 03 77 f2 3f         .l.?.w.?
   1b198:	 8e 77 f3 3f 3c 6e f4 3f         .w.?<n.?
   1b1a0:	 0d 5b f5 3f 01 3e f6 3f         .[.?.>.?
   1b1a8:	 18 17 f7 3f 52 e6 f7 3f         ...?R..?
   1b1b0:	 ae ab f8 3f 2d 67 f9 3f         ...?-g.?
   1b1b8:	 cf 18 fa 3f 92 c0 fa 3f         ...?...?
   1b1c0:	 78 5e fb 3f 80 f2 fb 3f         x^.?...?
   1b1c8:	 aa 7c fc 3f f6 fc fc 3f         .|.?...?
   1b1d0:	 64 73 fd 3f f3 df fd 3f         ds.?...?
   1b1d8:	 a4 42 fe 3f 77 9b fe 3f         .B.?w..?
   1b1e0:	 6c ea fe 3f 82 2f ff 3f         l..?./.?
   1b1e8:	 b9 6a ff 3f 12 9c ff 3f         .j.?...?
   1b1f0:	 8c c3 ff 3f 28 e1 ff 3f         ...?(..?
   1b1f8:	 e6 f4 ff 3f c4 fe ff 3f         ...?...?


sine_short_128:
   1b200:	 c4 87 64 00 6c 93 2d 01         ..d.l.-.
   1b208:	 73 93 f6 01 1a 80 bf 02         s.......
   1b210:	 a2 51 88 03 4d 00 51 04         .Q..M.Q.
   1b218:	 5e 84 19 05 1b d6 e1 05         ^.......
   1b220:	 c9 ed a9 06 b3 c3 71 07         ......q.
   1b228:	 24 50 39 08 6a 8b 00 09         $P9.j...
   1b230:	 d8 6d c7 09 c3 ef 8d 0a         .m......
   1b238:	 82 09 54 0b 74 b3 19 0c         ..T.t...
   1b240:	 f9 e5 de 0c 78 99 a3 0d         ....x...
   1b248:	 5a c6 67 0e 0f 65 2b 0f         Z.g..e+.
   1b250:	 0d 6e ee 0f d0 d9 b0 10         .n......
   1b258:	 d7 a0 72 11 ac bb 33 12         ..r...3.
   1b260:	 db 22 f4 12 fa ce b3 13         ."......
   1b268:	 a5 b8 72 14 81 d8 30 15         ..r...0.
   1b270:	 38 27 ee 15 7e 9d aa 16         8'..~...
   1b278:	 0f 34 66 17 b0 e3 20 18         .4f... .
   1b280:	 2f a5 da 18 61 71 93 19         /...aq..
   1b288:	 28 41 4b 1a 6c 0d 02 1b         (AK.l...
   1b290:	 23 cf b7 1b 4a 7f 6c 1c         #...J.l.
   1b298:	 e9 16 20 1d 15 8f d2 1d         .. .....
   1b2a0:	 eb e0 83 1e 96 05 34 1f         ......4.
   1b2a8:	 4c f6 e2 1f 4d ac 90 20         L...M.. 
   1b2b0:	 e8 20 3d 21 76 4d e8 21         . =!vM.!
   1b2b8:	 5e 2b 92 22 14 b4 3a 23         ^+."..:#
   1b2c0:	 17 e1 e1 23 f7 ab 87 24         ...#...$
   1b2c8:	 4f 0e 2c 25 c8 01 cf 25         O.,%...%
   1b2d0:	 1a 80 70 26 0c 83 10 27         ..p&...'
   1b2d8:	 72 04 af 27 2f fe 4b 28         r..'/.K(
   1b2e0:	 37 6a e7 28 8c 42 81 29         7j.(.B.)
   1b2e8:	 3f 81 19 2a 71 20 b0 2a         ?..*q .*
   1b2f0:	 55 1a 45 2b 2b 69 d8 2b         U.E++i.+
   1b2f8:	 46 07 6a 2c 09 ef f9 2c         F.j,...,
   1b300:	 e8 1a 88 2d 66 85 14 2e         ...-f...
   1b308:	 1b 29 9f 2e af 00 28 2f         .)....(/
   1b310:	 da 06 af 2f 67 36 34 30         .../g640
   1b318:	 36 8a b7 30 35 fd 38 31         6..05.81
   1b320:	 66 8a b8 31 e0 2c 36 32         f..1.,62
   1b328:	 c9 df b1 32 5e 9e 2b 33         ...2^.+3
   1b330:	 ec 63 a3 33 d5 2b 19 34         .c.3.+.4
   1b338:	 90 f1 8c 34 a5 b0 fe 34         ...4...4
   1b340:	 b2 64 6e 35 68 09 dc 35         .dn5h..5
   1b348:	 8e 9a 47 36 fd 13 b1 36         ..G6...6
   1b350:	 a5 71 18 37 89 af 7d 37         .q.7..}7
   1b358:	 c3 c9 e0 37 7f bc 41 38         ...7..A8
   1b360:	 02 84 a0 38 a4 1c fd 38         ...8...8
   1b368:	 d3 82 57 39 13 b3 af 39         ..W9...9
   1b370:	 fd a9 05 3a 42 64 59 3a         ...:BdY:
   1b378:	 a6 de aa 3a 05 16 fa 3a         ...:...:
   1b380:	 53 07 47 3b 97 af 91 3b         S.G;...;
   1b388:	 f0 0b da 3b 94 19 20 3c         ...;.. <
   1b390:	 d1 d5 63 3c 09 3e a5 3c         ..c<.>.<
   1b398:	 b7 4f e4 3c 6c 08 21 3d         .O.<l.!=
   1b3a0:	 d2 65 5b 3d a8 65 93 3d         .e[=.e.=
   1b3a8:	 c5 05 c9 3d 18 44 fc 3d         ...=.D.=
   1b3b0:	 a8 1e 2d 3e 92 93 5b 3e         ..->..[>
   1b3b8:	 0c a1 87 3e 63 45 b1 3e         ...>cE.>
   1b3c0:	 fc 7e d8 3e 54 4c fd 3e         .~.>TL.>
   1b3c8:	 ff ab 1f 3f ab 9c 3f 3f         ...?..??
   1b3d0:	 1d 1d 5d 3f 30 2c 78 3f         ..]?0,x?
   1b3d8:	 da c8 90 3f 28 f2 a6 3f         ...?(..?
   1b3e0:	 40 a7 ba 3f 5e e7 cb 3f         @..?^..?
   1b3e8:	 d9 b1 da 3f 1f 06 e7 3f         ...?...?
   1b3f0:	 b6 e3 f0 3f 3c 4a f8 3f         ...?<J.?
   1b3f8:	 69 39 fd 3f 0b b1 ff 3f         i9.?...?


kbd_long_1024:
   1b400:	 18 cb 04 00 7e 0b 07 00         ....~...
   1b408:	 32 f5 08 00 87 ba 0a 00         2.......
   1b410:	 3a 6e 0c 00 97 19 0e 00         :n......
   1b418:	 fa c1 0f 00 cd 6a 11 00         .....j..
   1b420:	 61 16 13 00 62 c6 14 00         a...b...
   1b428:	 0f 7c 16 00 62 38 18 00         .|..b8..
   1b430:	 20 fc 19 00 ed c7 1b 00          .......
   1b438:	 50 9c 1d 00 c1 79 1f 00         P....y..
   1b440:	 a4 60 21 00 54 51 23 00         .`!.TQ#.
   1b448:	 23 4c 25 00 5c 51 27 00         #L%.\Q'.
   1b450:	 42 61 29 00 15 7c 2b 00         Ba)..|+.
   1b458:	 11 a2 2d 00 6f d3 2f 00         ..-.o./.
   1b460:	 64 10 32 00 24 59 34 00         d.2.$Y4.
   1b468:	 e2 ad 36 00 cd 0e 39 00         ..6...9.
   1b470:	 14 7c 3b 00 e5 f5 3d 00         .|;...=.
   1b478:	 6d 7c 40 00 d7 0f 43 00         m|@...C.
   1b480:	 4f b0 45 00 ff 5d 48 00         O.E..]H.
   1b488:	 12 19 4b 00 b1 e1 4d 00         ..K...M.
   1b490:	 05 b8 50 00 36 9c 53 00         ..P.6.S.
   1b498:	 6e 8e 56 00 d4 8e 59 00         n.V...Y.
   1b4a0:	 91 9d 5c 00 cb ba 5f 00         ..\..._.
   1b4a8:	 ab e6 62 00 59 21 66 00         ..b.Y!f.
   1b4b0:	 fa 6a 69 00 b6 c3 6c 00         .ji...l.
   1b4b8:	 b5 2b 70 00 1c a3 73 00         .+p...s.
   1b4c0:	 13 2a 77 00 c1 c0 7a 00         .*w...z.
   1b4c8:	 4c 67 7e 00 da 1d 82 00         Lg~.....
   1b4d0:	 92 e4 85 00 9a bb 89 00         ........
   1b4d8:	 19 a3 8d 00 35 9b 91 00         ....5...
   1b4e0:	 14 a4 95 00 dc bd 99 00         ........
   1b4e8:	 b4 e8 9d 00 c1 24 a2 00         .....$..
   1b4f0:	 2a 72 a6 00 15 d1 aa 00         *r......
   1b4f8:	 a7 41 af 00 06 c4 b3 00         .A......
   1b500:	 59 58 b8 00 c5 fe bc 00         YX......
   1b508:	 71 b7 c1 00 80 82 c6 00         q.......
   1b510:	 1b 60 cb 00 65 50 d0 00         .`..eP..
   1b518:	 85 53 d5 00 a1 69 da 00         .S...i..
   1b520:	 dd 92 df 00 5f cf e4 00         ...._...
   1b528:	 4d 1f ea 00 cc 82 ef 00         M.......
   1b530:	 01 fa f4 00 11 85 fa 00         ........
   1b538:	 22 24 00 01 59 d7 05 01         "$..Y...
   1b540:	 da 9e 0b 01 cb 7a 11 01         .....z..
   1b548:	 51 6b 17 01 90 70 1d 01         Qk...p..
   1b550:	 ad 8a 23 01 cc b9 29 01         ..#...).
   1b558:	 13 fe 2f 01 a5 57 36 01         ../..W6.
   1b560:	 a8 c6 3c 01 3e 4b 43 01         ..<.>KC.
   1b568:	 8e e5 49 01 b9 95 50 01         ..I...P.
   1b570:	 e6 5b 57 01 37 38 5e 01         .[W.78^.
   1b578:	 d0 2a 65 01 d5 33 6c 01         .*e..3l.
   1b580:	 69 53 73 01 b1 89 7a 01         iSs...z.
   1b588:	 ce d6 81 01 e5 3a 89 01         .....:..
   1b590:	 18 b6 90 01 8b 48 98 01         .....H..
   1b598:	 60 f2 9f 01 ba b3 a7 01         `.......
   1b5a0:	 bb 8c af 01 86 7d b7 01         .....}..
   1b5a8:	 3c 86 bf 01 01 a7 c7 01         <.......
   1b5b0:	 f6 df cf 01 3d 31 d8 01         ....=1..
   1b5b8:	 f7 9a e0 01 46 1d e9 01         ....F...
   1b5c0:	 4b b8 f1 01 27 6c fa 01         K...'l..
   1b5c8:	 fc 38 03 02 ea 1e 0c 02         .8......
   1b5d0:	 11 1e 15 02 93 36 1e 02         .....6..
   1b5d8:	 8f 68 27 02 25 b4 30 02         .h'.%.0.
   1b5e0:	 76 19 3a 02 a1 98 43 02         v.:...C.
   1b5e8:	 c5 31 4d 02 01 e5 56 02         .1M...V.
   1b5f0:	 76 b2 60 02 41 9a 6a 02         v.`.A.j.
   1b5f8:	 82 9c 74 02 56 b9 7e 02         ..t.V.~.
   1b600:	 dc f0 88 02 32 43 93 02         ....2C..
   1b608:	 76 b0 9d 02 c5 38 a8 02         v....8..
   1b610:	 3d dc b2 02 fb 9a bd 02         =.......
   1b618:	 1b 75 c8 02 bb 6a d3 02         .u...j..
   1b620:	 f6 7b de 02 e9 a8 e9 02         .{......
   1b628:	 af f1 f4 02 65 56 00 03         ....eV..
   1b630:	 25 d7 0b 03 0b 74 17 03         %....t..
   1b638:	 32 2d 23 03 b4 02 2f 03         2-#.../.
   1b640:	 ab f4 3a 03 32 03 47 03         ..:.2.G.
   1b648:	 63 2e 53 03 56 76 5f 03         c.S.Vv_.
   1b650:	 26 db 6b 03 ea 5c 78 03         &.k..\x.
   1b658:	 bc fb 84 03 b4 b7 91 03         ........
   1b660:	 ea 90 9e 03 77 87 ab 03         ....w...
   1b668:	 70 9b b8 03 ef cc c5 03         p.......
   1b670:	 08 1c d3 03 d4 88 e0 03         ........
   1b678:	 68 13 ee 03 da bb fb 03         h.......
   1b680:	 40 82 09 04 af 66 17 04         @....f..
   1b688:	 3d 69 25 04 fd 89 33 04         =i%...3.
   1b690:	 05 c9 41 04 67 26 50 04         ..A.g&P.
   1b698:	 39 a2 5e 04 8d 3c 6d 04         9.^..<m.
   1b6a0:	 76 f5 7b 04 06 cd 8a 04         v.{.....
   1b6a8:	 52 c3 99 04 69 d8 a8 04         R...i...
   1b6b0:	 5e 0c b8 04 42 5f c7 04         ^...B_..
   1b6b8:	 26 d1 d6 04 1b 62 e6 04         &....b..
   1b6c0:	 30 12 f6 04 76 e1 05 05         0...v...
   1b6c8:	 fc cf 15 05 d1 dd 25 05         ......%.
   1b6d0:	 04 0b 36 05 a4 57 46 05         ..6..WF.
   1b6d8:	 bd c3 56 05 5f 4f 67 05         ..V._Og.
   1b6e0:	 96 fa 77 05 6e c5 88 05         ..w.n...
   1b6e8:	 f5 af 99 05 37 ba aa 05         ....7...
   1b6f0:	 3f e4 bb 05 18 2e cd 05         ?.......
   1b6f8:	 ce 97 de 05 6b 21 f0 05         ....k!..
   1b700:	 f9 ca 01 06 81 94 13 06         ........
   1b708:	 0e 7e 25 06 a8 87 37 06         .~%...7.
   1b710:	 57 b1 49 06 24 fb 5b 06         W.I.$.[.
   1b718:	 16 65 6e 06 34 ef 80 06         .en.4...
   1b720:	 86 99 93 06 12 64 a6 06         .....d..
   1b728:	 de 4e b9 06 f0 59 cc 06         .N...Y..
   1b730:	 4c 85 df 06 f7 d0 f2 06         L.......
   1b738:	 f7 3c 06 07 4e c9 19 07         .<..N...
   1b740:	 00 76 2d 07 10 43 41 07         .v-..CA.
   1b748:	 81 30 55 07 56 3e 69 07         .0U.V>i.
   1b750:	 8f 6c 7d 07 2e bb 91 07         .l}.....
   1b758:	 34 2a a6 07 a1 b9 ba 07         4*......
   1b760:	 76 69 cf 07 b2 39 e4 07         vi...9..
   1b768:	 54 2a f9 07 5a 3b 0e 08         T*..Z;..
   1b770:	 c4 6c 23 08 8e be 38 08         .l#...8.
   1b778:	 b6 30 4e 08 38 c3 63 08         .0N.8.c.
   1b780:	 12 76 79 08 40 49 8f 08         .vy.@I..
   1b788:	 bc 3c a5 08 81 50 bb 08         .<...P..
   1b790:	 8b 84 d1 08 d4 d8 e7 08         ........
   1b798:	 54 4d fe 08 06 e2 14 09         TM......
   1b7a0:	 e3 96 2b 09 e1 6b 42 09         ..+..kB.
   1b7a8:	 fa 60 59 09 24 76 70 09         .`Y.$vp.
   1b7b0:	 57 ab 87 09 89 00 9f 09         W.......
   1b7b8:	 b0 75 b6 09 c1 0a ce 09         .u......
   1b7c0:	 b2 bf e5 09 77 94 fd 09         ....w...
   1b7c8:	 03 89 15 0a 4c 9d 2d 0a         ....L.-.
   1b7d0:	 44 d1 45 0a dd 24 5e 0a         D.E..$^.
   1b7d8:	 0b 98 76 0a be 2a 8f 0a         ..v..*..
   1b7e0:	 e8 dc a7 0a 7a ae c0 0a         ....z...
   1b7e8:	 64 9f d9 0a 96 af f2 0a         d.......
   1b7f0:	 00 df 0b 0b 90 2d 25 0b         .....-%.
   1b7f8:	 35 9b 3e 0b dc 27 58 0b         5.>..'X.
   1b800:	 75 d3 71 0b ea 9d 8b 0b         u.q.....
   1b808:	 2a 87 a5 0b 20 8f bf 0b         *... ...
   1b810:	 b8 b5 d9 0b dd fa f3 0b         ........
   1b818:	 79 5e 0e 0c 78 e0 28 0c         y^..x.(.
   1b820:	 c2 80 43 0c 41 3f 5e 0c         ..C.A?^.
   1b828:	 df 1b 79 0c 82 16 94 0c         ..y.....
   1b830:	 13 2f af 0c 7a 65 ca 0c         ./..ze..
   1b838:	 9e b9 e5 0c 64 2b 01 0d         ....d+..
   1b840:	 b4 ba 1c 0d 72 67 38 0d         ....rg8.
   1b848:	 84 31 54 0d ce 18 70 0d         .1T...p.
   1b850:	 35 1d 8c 0d 9c 3e a8 0d         5....>..
   1b858:	 e6 7c c4 0d f6 d7 e0 0d         .|......
   1b860:	 b0 4f fd 0d f3 e3 19 0e         .O......
   1b868:	 a3 94 36 0e 9f 61 53 0e         ..6..aS.
   1b870:	 c8 4a 70 0e ff 4f 8d 0e         .Jp..O..
   1b878:	 23 71 aa 0e 14 ae c7 0e         #q......
   1b880:	 af 06 e5 0e d3 7a 02 0f         .....z..
   1b888:	 5d 0a 20 0f 2d b5 3d 0f         ]. .-.=.
   1b890:	 1d 7b 5b 0f 0b 5c 79 0f         .{[..\y.
   1b898:	 d2 57 97 0f 4f 6e b5 0f         .W..On..
   1b8a0:	 5c 9f d3 0f d5 ea f1 0f         \.......
   1b8a8:	 92 50 10 10 6f d0 2e 10         .P..o...
   1b8b0:	 45 6a 4d 10 ec 1d 6c 10         EjM...l.
   1b8b8:	 3d eb 8a 10 11 d2 a9 10         =.......
   1b8c0:	 3e d2 c8 10 9d eb e7 10         >.......
   1b8c8:	 04 1e 07 11 4a 69 26 11         ....Ji&.
   1b8d0:	 44 cd 45 11 c8 49 65 11         D.E..Ie.
   1b8d8:	 ac de 84 11 c4 8b a4 11         ........
   1b8e0:	 e5 50 c4 11 e2 2d e4 11         .P...-..
   1b8e8:	 90 22 04 12 c1 2e 24 12         ."....$.
   1b8f0:	 48 52 44 12 f7 8c 64 12         HRD...d.
   1b8f8:	 a1 de 84 12 17 47 a5 12         .....G..
   1b900:	 2b c6 c5 12 ac 5b e6 12         +....[..
   1b908:	 6c 07 07 13 3b c9 27 13         l...;.'.
   1b910:	 e8 a0 48 13 43 8e 69 13         ..H.C.i.
   1b918:	 1a 91 8a 13 3c a9 ab 13         ....<...
   1b920:	 78 d6 cc 13 9b 18 ee 13         x.......
   1b928:	 72 6f 0f 14 cb da 30 14         ro....0.
   1b930:	 73 5a 52 14 35 ee 73 14         sZR.5.s.
   1b938:	 df 95 95 14 3b 51 b7 14         ....;Q..
   1b940:	 15 20 d9 14 38 02 fb 14         . ..8...
   1b948:	 6f f7 1c 15 84 ff 3e 15         o.....>.
   1b950:	 41 1a 61 15 6f 47 83 15         A.a.oG..
   1b958:	 d9 86 a5 15 48 d8 c7 15         ....H...
   1b960:	 83 3b ea 15 53 b0 0c 16         .;..S...
   1b968:	 81 36 2f 16 d4 cd 51 16         .6/...Q.
   1b970:	 14 76 74 16 08 2f 97 16         .vt../..
   1b978:	 77 f8 b9 16 27 d2 dc 16         w...'...
   1b980:	 df bb ff 16 64 b5 22 17         ....d.".
   1b988:	 7e be 45 17 f0 d6 68 17         ~.E...h.
   1b990:	 80 fe 8b 17 f4 34 af 17         .....4..
   1b998:	 0f 7a d2 17 96 cd f5 17         .z......
   1b9a0:	 4e 2f 19 18 f9 9e 3c 18         N/....<.
   1b9a8:	 5d 1c 60 18 3b a7 83 18         ].`.;...
   1b9b0:	 58 3f a7 18 75 e4 ca 18         X?..u...
   1b9b8:	 57 96 ee 18 bf 54 12 19         W....T..
   1b9c0:	 6e 1f 36 19 29 f6 59 19         n.6.).Y.
   1b9c8:	 af d8 7d 19 c2 c6 a1 19         ..}.....
   1b9d0:	 25 c0 c5 19 97 c4 e9 19         %.......
   1b9d8:	 da d3 0d 1a af ed 31 1a         ......1.
   1b9e0:	 d6 11 56 1a 0e 40 7a 1a         ..V..@z.
   1b9e8:	 1a 78 9e 1a b7 b9 c2 1a         .x......
   1b9f0:	 a7 04 e7 1a a8 58 0b 1b         .....X..
   1b9f8:	 7a b5 2f 1b dc 1a 54 1b         z./...T.
   1ba00:	 8e 88 78 1b 4e fe 9c 1b         ..x.N...
   1ba08:	 db 7b c1 1b f3 00 e6 1b         .{......
   1ba10:	 56 8d 0a 1c c1 20 2f 1c         V.... /.
   1ba18:	 f2 ba 53 1c a8 5b 78 1c         ..S..[x.
   1ba20:	 a1 02 9d 1c 9a af c1 1c         ........
   1ba28:	 51 62 e6 1c 83 1a 0b 1d         Qb......
   1ba30:	 ef d7 2f 1d 51 9a 54 1d         ../.Q.T.
   1ba38:	 66 61 79 1d ed 2c 9e 1d         fay..,..
   1ba40:	 a1 fc c2 1d 41 d0 e7 1d         ....A...
   1ba48:	 88 a7 0c 1e 34 82 31 1e         ....4.1.
   1ba50:	 01 60 56 1e ac 40 7b 1e         .`V..@{.
   1ba58:	 f2 23 a0 1e 8f 09 c5 1e         .#......
   1ba60:	 40 f1 e9 1e c1 da 0e 1f         @.......
   1ba68:	 cf c5 33 1f 26 b2 58 1f         ..3.&.X.
   1ba70:	 82 9f 7d 1f a0 8d a2 1f         ..}.....
   1ba78:	 3c 7c c7 1f 11 6b ec 1f         <|...k..
   1ba80:	 de 59 11 20 5d 48 36 20         .Y. ]H6 
   1ba88:	 4b 36 5b 20 64 23 80 20         K6[ d#. 
   1ba90:	 64 0f a5 20 08 fa c9 20         d.. ... 
   1ba98:	 0c e3 ee 20 2c ca 13 21         ... ,..!
   1baa0:	 24 af 38 21 b1 91 5d 21         $.8!..]!
   1baa8:	 8e 71 82 21 7a 4e a7 21         .q.!zN.!
   1bab0:	 2e 28 cc 21 6a fe f0 21         .(.!j..!
   1bab8:	 e8 d0 15 22 65 9f 3a 22         ..."e.:"
   1bac0:	 9e 69 5f 22 50 2f 84 22         .i_"P/."
   1bac8:	 37 f0 a8 22 10 ac cd 22         7.."..."
   1bad0:	 98 62 f2 22 8d 13 17 23         .b."...#
   1bad8:	 aa be 3b 23 ae 63 60 23         ..;#.c`#
   1bae0:	 55 02 85 23 5e 9a a9 23         U..#^..#
   1bae8:	 84 2b ce 23 87 b5 f2 23         .+.#...#
   1baf0:	 23 38 17 24 17 b3 3b 24         #8.$..;$
   1baf8:	 20 26 60 24 fd 90 84 24          &`$...$
   1bb00:	 6b f3 a8 24 29 4d cd 24         k..$)M.$
   1bb08:	 f6 9d f1 24 90 e5 15 25         ...$...%
   1bb10:	 b6 23 3a 25 27 58 5e 25         .#:%'X^%
   1bb18:	 a1 82 82 25 e5 a2 a6 25         ...%...%
   1bb20:	 b2 b8 ca 25 c7 c3 ee 25         ...%...%
   1bb28:	 e4 c3 12 26 c8 b8 36 26         ...&..6&
   1bb30:	 36 a2 5a 26 eb 7f 7e 26         6.Z&..~&
   1bb38:	 aa 51 a2 26 33 17 c6 26         .Q.&3..&
   1bb40:	 46 d0 e9 26 a6 7c 0d 27         F..&.|.'
   1bb48:	 13 1c 31 27 4f ae 54 27         ..1'O.T'
   1bb50:	 1c 33 78 27 3c aa 9b 27         .3x'<..'
   1bb58:	 71 13 bf 27 7e 6e e2 27         q..'~n.'
   1bb60:	 25 bb 05 28 2a f9 28 28         %..(*.((
   1bb68:	 50 28 4c 28 5a 48 6f 28         P(L(ZHo(
   1bb70:	 0c 59 92 28 2b 5a b5 28         .Y.(+Z.(
   1bb78:	 7a 4b d8 28 be 2c fb 28         zK.(.,.(
   1bb80:	 bc fd 1d 29 39 be 40 29         ...)9.@)
   1bb88:	 fb 6d 63 29 c7 0c 86 29         .mc)...)
   1bb90:	 63 9a a8 29 95 16 cb 29         c..)...)
   1bb98:	 25 81 ed 29 d9 d9 0f 2a         %..)...*
   1bba0:	 78 20 32 2a c9 54 54 2a         x 2*.TT*
   1bba8:	 96 76 76 2a a4 85 98 2a         .vv*...*
   1bbb0:	 be 81 ba 2a ac 6a dc 2a         ...*.j.*
   1bbb8:	 37 40 fe 2a 29 02 20 2b         7@.*). +
   1bbc0:	 4b b0 41 2b 68 4a 63 2b         K.A+hJc+
   1bbc8:	 49 d0 84 2b ba 41 a6 2b         I..+.A.+
   1bbd0:	 86 9e c7 2b 79 e6 e8 2b         ...+y..+
   1bbd8:	 5e 19 0a 2c 02 37 2b 2c         ^..,.7+,
   1bbe0:	 31 3f 4c 2c b9 31 6d 2c         1?L,.1m,
   1bbe8:	 66 0e 8e 2c 07 d5 ae 2c         f..,...,
   1bbf0:	 69 85 cf 2c 5b 1f f0 2c         i..,[..,
   1bbf8:	 ac a2 10 2d 2b 0f 31 2d         ...-+.1-
   1bc00:	 a8 64 51 2d f3 a2 71 2d         .dQ-..q-
   1bc08:	 dd c9 91 2d 36 d9 b1 2d         ...-6..-
   1bc10:	 cf d0 d1 2d 7b b0 f1 2d         ...-{..-
   1bc18:	 0b 78 11 2e 52 27 31 2e         .x..R'1.
   1bc20:	 22 be 50 2e 50 3c 70 2e         ".P.P<p.
   1bc28:	 ae a1 8f 2e 12 ee ae 2e         ........
   1bc30:	 4f 21 ce 2e 3b 3b ed 2e         O!..;;..
   1bc38:	 ab 3b 0c 2f 76 22 2b 2f         .;./v"+/
   1bc40:	 70 ef 49 2f 72 a2 68 2f         p.I/r.h/
   1bc48:	 52 3b 87 2f e9 b9 a5 2f         R;./.../
   1bc50:	 0e 1e c4 2f 99 67 e2 2f         .../.g./
   1bc58:	 65 96 00 30 4a aa 1e 30         e..0J..0
   1bc60:	 22 a3 3c 30 c8 80 5a 30         ".<0..Z0
   1bc68:	 16 43 78 30 e9 e9 95 30         .Cx0...0
   1bc70:	 1b 75 b3 30 89 e4 d0 30         .u.0...0
   1bc78:	 0f 38 ee 30 8c 6f 0b 31         .8.0.o.1
   1bc80:	 dc 8a 28 31 de 89 45 31         ..(1..E1
   1bc88:	 70 6c 62 31 71 32 7f 31         plb1q2.1
   1bc90:	 c2 db 9b 31 41 68 b8 31         ...1Ah.1
   1bc98:	 d1 d7 d4 31 51 2a f1 31         ...1Q*.1
   1bca0:	 a3 5f 0d 32 a9 77 29 32         ._.2.w)2
   1bca8:	 46 72 45 32 5d 4f 61 32         FrE2]Oa2
   1bcb0:	 d1 0e 7d 32 86 b0 98 32         ..}2...2
   1bcb8:	 61 34 b4 32 46 9a cf 32         a4.2F..2
   1bcc0:	 1c e2 ea 32 c7 0b 06 33         ...2...3
   1bcc8:	 30 17 21 33 3b 04 3c 33         0.!3;.<3
   1bcd0:	 d2 d2 56 33 dc 82 71 33         ..V3..q3
   1bcd8:	 41 14 8c 33 ea 86 a6 33         A..3...3
   1bce0:	 c2 da c0 33 b1 0f db 33         ...3...3
   1bce8:	 a3 25 f5 33 82 1c 0f 34         .%.3...4
   1bcf0:	 3a f4 28 34 b7 ac 42 34         :.(4..B4
   1bcf8:	 e6 45 5c 34 b3 bf 75 34         .E\4..u4
   1bd00:	 0c 1a 8f 34 e0 54 a8 34         ...4.T.4
   1bd08:	 1c 70 c1 34 b0 6b da 34         .p.4.k.4
   1bd10:	 8b 47 f3 34 9e 03 0c 35         .G.4...5
   1bd18:	 d9 9f 24 35 2d 1c 3d 35         ..$5-.=5
   1bd20:	 8d 78 55 35 e9 b4 6d 35         .xU5..m5
   1bd28:	 35 d1 85 35 64 cd 9d 35         5..5d..5
   1bd30:	 6a a9 b5 35 3a 65 cd 35         j..5:e.5
   1bd38:	 ca 00 e5 35 0f 7c fc 35         ...5.|.5
   1bd40:	 fe d6 13 36 8d 11 2b 36         ...6..+6
   1bd48:	 b5 2b 42 36 6a 25 59 36         .+B6j%Y6
   1bd50:	 a7 fe 6f 36 62 b7 86 36         ..o6b..6
   1bd58:	 94 4f 9d 36 38 c7 b3 36         .O.68..6
   1bd60:	 46 1e ca 36 b8 54 e0 36         F..6.T.6
   1bd68:	 8b 6a f6 36 b8 5f 0c 37         .j.6._.7
   1bd70:	 3c 34 22 37 13 e8 37 37         <4"7..77
   1bd78:	 3a 7b 4d 37 ae ed 62 37         :{M7..b7
   1bd80:	 6d 3f 78 37 75 70 8d 37         m?x7up.7
   1bd88:	 c5 80 a2 37 5c 70 b7 37         ...7\p.7
   1bd90:	 3a 3f cc 37 60 ed e0 37         :?.7`..7
   1bd98:	 cd 7a f5 37 84 e7 09 38         .z.7...8
   1bda0:	 86 33 1e 38 d5 5e 32 38         .3.8.^28
   1bda8:	 74 69 46 38 65 53 5a 38         tiF8eSZ8
   1bdb0:	 ae 1c 6e 38 51 c5 81 38         ..n8Q..8
   1bdb8:	 54 4d 95 38 bb b4 a8 38         TM.8...8
   1bdc0:	 8c fb bb 38 cd 21 cf 38         ...8.!.8
   1bdc8:	 85 27 e2 38 ba 0c f5 38         .'.8...8
   1bdd0:	 75 d1 07 39 bb 75 1a 39         u..9.u.9
   1bdd8:	 97 f9 2c 39 11 5d 3f 39         ..,9.]?9
   1bde0:	 32 a0 51 39 04 c3 63 39         2.Q9..c9
   1bde8:	 91 c5 75 39 e4 a7 87 39         ..u9...9
   1bdf0:	 07 6a 99 39 06 0c ab 39         .j.9...9
   1bdf8:	 ee 8d bc 39 ca ef cd 39         ...9...9
   1be00:	 a7 31 df 39 93 53 f0 39         .1.9.S.9
   1be08:	 9b 55 01 3a cd 37 12 3a         .U.:.7.:
   1be10:	 38 fa 22 3a eb 9c 33 3a         8.":..3:
   1be18:	 f5 1f 44 3a 66 83 54 3a         ..D:f.T:
   1be20:	 4e c7 64 3a be eb 74 3a         N.d:..t:
   1be28:	 c6 f0 84 3a 79 d6 94 3a         ...:y..:
   1be30:	 e8 9c a4 3a 25 44 b4 3a         ...:%D.:
   1be38:	 43 cc c3 3a 54 35 d3 3a         C..:T5.:
   1be40:	 6d 7f e2 3a a1 aa f1 3a         m..:...:
   1be48:	 05 b7 00 3b ac a4 0f 3b         ...;...;
   1be50:	 ab 73 1e 3b 19 24 2d 3b         .s.;.$-;
   1be58:	 0b b6 3b 3b 96 29 4a 3b         ..;;.)J;
   1be60:	 d1 7e 58 3b d3 b5 66 3b         .~X;..f;
   1be68:	 b4 ce 74 3b 89 c9 82 3b         ..t;...;
   1be70:	 6c a6 90 3b 75 65 9e 3b         l..;ue.;
   1be78:	 bb 06 ac 3b 58 8a b9 3b         ...;X..;
   1be80:	 65 f0 c6 3b fc 38 d4 3b         e..;.8.;
   1be88:	 36 64 e1 3b 2d 72 ee 3b         6d.;-r.;
   1be90:	 fc 62 fb 3b bf 36 08 3c         .b.;.6.<
   1be98:	 8e ed 14 3c 87 87 21 3c         ...<..!<
   1bea0:	 c6 04 2e 3c 65 65 3a 3c         ...<ee:<
   1bea8:	 81 a9 46 3c 37 d1 52 3c         ..F<7.R<
   1beb0:	 a4 dc 5e 3c e5 cb 6a 3c         ..^<..j<
   1beb8:	 17 9f 76 3c 59 56 82 3c         ..v<YV.<
   1bec0:	 c7 f1 8d 3c 81 71 99 3c         ...<.q.<
   1bec8:	 a5 d5 a4 3c 52 1e b0 3c         ...<R..<
   1bed0:	 a6 4b bb 3c c2 5d c6 3c         .K.<.].<
   1bed8:	 c4 54 d1 3c cc 30 dc 3c         .T.<.0.<
   1bee0:	 fb f1 e6 3c 71 98 f1 3c         ...<q..<
   1bee8:	 4e 24 fc 3c b3 95 06 3d         N$.<...=
   1bef0:	 c1 ec 10 3d 99 29 1b 3d         ...=.).=
   1bef8:	 5c 4c 25 3d 2c 55 2f 3d         \L%=,U/=
   1bf00:	 2b 44 39 3d 7b 19 43 3d         +D9={.C=
   1bf08:	 3e d5 4c 3d 96 77 56 3d         >.L=.wV=
   1bf10:	 a6 00 60 3d 91 70 69 3d         ..`=.pi=
   1bf18:	 79 c7 72 3d 83 05 7c 3d         y.r=..|=
   1bf20:	 d0 2a 85 3d 84 37 8e 3d         .*.=.7.=
   1bf28:	 c4 2b 97 3d b3 07 a0 3d         .+.=...=
   1bf30:	 74 cb a8 3d 2c 77 b1 3d         t..=,w.=
   1bf38:	 ff 0a ba 3d 11 87 c2 3d         ...=...=
   1bf40:	 87 eb ca 3d 86 38 d3 3d         ...=.8.=
   1bf48:	 31 6e db 3d af 8c e3 3d         1n.=...=
   1bf50:	 24 94 eb 3d b5 84 f3 3d         $..=...=
   1bf58:	 88 5e fb 3d c1 21 03 3e         .^.=.!.>
   1bf60:	 86 ce 0a 3e fc 64 12 3e         ...>.d.>
   1bf68:	 4a e5 19 3e 95 4f 21 3e         J..>.O!>
   1bf70:	 03 a4 28 3e b9 e2 2f 3e         ..(>../>
   1bf78:	 dd 0b 37 3e 96 1f 3e 3e         ..7>..>>
   1bf80:	 09 1e 45 3e 5e 07 4c 3e         ..E>^.L>
   1bf88:	 b8 db 52 3e 40 9b 59 3e         ..R>@.Y>
   1bf90:	 1c 46 60 3e 71 dc 66 3e         .F`>q.f>
   1bf98:	 66 5e 6d 3e 22 cc 73 3e         f^m>".s>
   1bfa0:	 cb 25 7a 3e 87 6b 80 3e         .%z>.k.>
   1bfa8:	 7d 9d 86 3e d4 bb 8c 3e         }..>...>
   1bfb0:	 b2 c6 92 3e 3d be 98 3e         ...>=..>
   1bfb8:	 9d a2 9e 3e f7 73 a4 3e         ...>.s.>
   1bfc0:	 72 32 aa 3e 36 de af 3e         r2.>6..>
   1bfc8:	 68 77 b5 3e 2e fe ba 3e         hw.>...>
   1bfd0:	 b1 72 c0 3e 15 d5 c5 3e         .r.>...>
   1bfd8:	 82 25 cb 3e 1e 64 d0 3e         .%.>.d.>
   1bfe0:	 0f 91 d5 3e 7c ac da 3e         ...>|..>
   1bfe8:	 8b b6 df 3e 63 af e4 3e         ...>c..>
   1bff0:	 29 97 e9 3e 04 6e ee 3e         )..>.n.>
   1bff8:	 1b 34 f3 3e 93 e9 f7 3e         .4.>...>
   1c000:	 92 8e fc 3e 3e 23 01 3f         ...>>#.?
   1c008:	 be a7 05 3f 37 1c 0a 3f         ...?7..?
   1c010:	 ce 80 0e 3f aa d5 12 3f         ...?...?
   1c018:	 f1 1a 17 3f c7 50 1b 3f         ...?.P.?
   1c020:	 52 77 1f 3f b7 8e 23 3f         Rw.?..#?
   1c028:	 1d 97 27 3f a7 90 2b 3f         ..'?..+?
   1c030:	 7c 7b 2f 3f bf 57 33 3f         |{/?.W3?
   1c038:	 96 25 37 3f 25 e5 3a 3f         .%7?%.:?
   1c040:	 92 96 3e 3f 00 3a 42 3f         ..>?.:B?
   1c048:	 95 cf 45 3f 73 57 49 3f         ..E?sWI?
   1c050:	 c0 d1 4c 3f a0 3e 50 3f         ..L?.>P?
   1c058:	 36 9e 53 3f a6 f0 56 3f         6.S?..V?
   1c060:	 13 36 5a 3f a2 6e 5d 3f         .6Z?.n]?
   1c068:	 75 9a 60 3f b0 b9 63 3f         u.`?..c?
   1c070:	 75 cc 66 3f e8 d2 69 3f         u.f?..i?
   1c078:	 2b cd 6c 3f 62 bb 6f 3f         +.l?b.o?
   1c080:	 ad 9d 72 3f 30 74 75 3f         ..r?0tu?
   1c088:	 0c 3f 78 3f 64 fe 7a 3f         .?x?d.z?
   1c090:	 5a b2 7d 3f 0e 5b 80 3f         Z.}?.[.?
   1c098:	 a3 f8 82 3f 39 8b 85 3f         ...?9..?
   1c0a0:	 f1 12 88 3f ee 8f 8a 3f         ...?...?
   1c0a8:	 4e 02 8d 3f 33 6a 8f 3f         N..?3j.?
   1c0b0:	 bd c7 91 3f 0d 1b 94 3f         ...?...?
   1c0b8:	 42 64 96 3f 7b a3 98 3f         Bd.?{..?
   1c0c0:	 da d8 9a 3f 7c 04 9d 3f         ...?|..?
   1c0c8:	 82 26 9f 3f 09 3f a1 3f         .&.?.?.?
   1c0d0:	 32 4e a3 3f 1a 54 a5 3f         2N.?.T.?
   1c0d8:	 e1 50 a7 3f a3 44 a9 3f         .P.?.D.?
   1c0e0:	 80 2f ab 3f 95 11 ad 3f         ./.?...?
   1c0e8:	 ff ea ae 3f dc bb b0 3f         ...?...?
   1c0f0:	 4a 84 b2 3f 64 44 b4 3f         J..?dD.?
   1c0f8:	 49 fc b5 3f 14 ac b7 3f         I..?...?
   1c100:	 e1 53 b9 3f cd f3 ba 3f         .S.?...?
   1c108:	 f5 8b bc 3f 72 1c be 3f         ...?r..?
   1c110:	 61 a5 bf 3f dd 26 c1 3f         a..?.&.?
   1c118:	 02 a1 c2 3f e9 13 c4 3f         ...?...?
   1c120:	 ae 7f c5 3f 6a e4 c6 3f         ...?j..?
   1c128:	 39 42 c8 3f 33 99 c9 3f         9B.?3..?
   1c130:	 73 e9 ca 3f 12 33 cc 3f         s..?.3.?
   1c138:	 29 76 cd 3f d2 b2 ce 3f         )v.?...?
   1c140:	 24 e9 cf 3f 39 19 d1 3f         $..?9..?
   1c148:	 2a 43 d2 3f 0d 67 d3 3f         *C.?.g.?
   1c150:	 fb 84 d4 3f 0c 9d d5 3f         ...?...?
   1c158:	 56 af d6 3f f2 bb d7 3f         V..?...?
   1c160:	 f7 c2 d8 3f 7a c4 d9 3f         ...?z..?
   1c168:	 93 c0 da 3f 57 b7 db 3f         ...?W..?
   1c170:	 de a8 dc 3f 3c 95 dd 3f         ...?<..?
   1c178:	 87 7c de 3f d6 5e df 3f         .|.?.^.?
   1c180:	 3c 3c e0 3f cf 14 e1 3f         <<.?...?
   1c188:	 a4 e8 e1 3f ce b7 e2 3f         ...?...?
   1c190:	 63 82 e3 3f 77 48 e4 3f         c..?wH.?
   1c198:	 1c 0a e5 3f 68 c7 e5 3f         ...?h..?
   1c1a0:	 6c 80 e6 3f 3d 35 e7 3f         l..?=5.?
   1c1a8:	 ed e5 e7 3f 8f 92 e8 3f         ...?...?
   1c1b0:	 35 3b e9 3f f2 df e9 3f         5;.?...?
   1c1b8:	 d8 80 ea 3f f8 1d eb 3f         ...?...?
   1c1c0:	 65 b7 eb 3f 2f 4d ec 3f         e..?/M.?
   1c1c8:	 68 df ec 3f 20 6e ed 3f         h..? n.?
   1c1d0:	 69 f9 ed 3f 53 81 ee 3f         i..?S..?
   1c1d8:	 ee 05 ef 3f 4b 87 ef 3f         ...?K..?
   1c1e0:	 79 05 f0 3f 88 80 f0 3f         y..?...?
   1c1e8:	 88 f8 f0 3f 87 6d f1 3f         ...?.m.?
   1c1f0:	 96 df f1 3f c2 4e f2 3f         ...?.N.?
   1c1f8:	 1a bb f2 3f ad 24 f3 3f         ...?.$.?
   1c200:	 89 8b f3 3f bc ef f3 3f         ...?...?
   1c208:	 55 51 f4 3f 60 b0 f4 3f         UQ.?`..?
   1c210:	 eb 0c f5 3f 03 67 f5 3f         ...?.g.?
   1c218:	 b6 be f5 3f 10 14 f6 3f         ...?...?
   1c220:	 1f 67 f6 3f ed b7 f6 3f         .g.?...?
   1c228:	 89 06 f7 3f fd 52 f7 3f         ...?.R.?
   1c230:	 56 9d f7 3f a0 e5 f7 3f         V..?...?
   1c238:	 e6 2b f8 3f 33 70 f8 3f         .+.?3p.?
   1c240:	 94 b2 f8 3f 12 f3 f8 3f         ...?...?
   1c248:	 b8 31 f9 3f 92 6e f9 3f         .1.?.n.?
   1c250:	 aa a9 f9 3f 09 e3 f9 3f         ...?...?
   1c258:	 bb 1a fa 3f c9 50 fa 3f         ...?.P.?
   1c260:	 3d 85 fa 3f 21 b8 fa 3f         =..?!..?
   1c268:	 7e e9 fa 3f 5d 19 fb 3f         ~..?]..?
   1c270:	 c8 47 fb 3f c7 74 fb 3f         .G.?.t.?
   1c278:	 64 a0 fb 3f a7 ca fb 3f         d..?...?
   1c280:	 98 f3 fb 3f 41 1b fc 3f         ...?A..?
   1c288:	 a8 41 fc 3f d7 66 fc 3f         .A.?.f.?
   1c290:	 d5 8a fc 3f aa ad fc 3f         ...?...?
   1c298:	 5e cf fc 3f f7 ef fc 3f         ^..?...?
   1c2a0:	 7e 0f fd 3f f9 2d fd 3f         ~..?.-.?
   1c2a8:	 70 4b fd 3f e9 67 fd 3f         pK.?.g.?
   1c2b0:	 6c 83 fd 3f fe 9d fd 3f         l..?...?
   1c2b8:	 a7 b7 fd 3f 6d d0 fd 3f         ...?m..?
   1c2c0:	 56 e8 fd 3f 67 ff fd 3f         V..?g..?
   1c2c8:	 a8 15 fe 3f 1e 2b fe 3f         ...?.+.?
   1c2d0:	 cf 3f fe 3f c0 53 fe 3f         .?.?.S.?
   1c2d8:	 f7 66 fe 3f 79 79 fe 3f         .f.?yy.?
   1c2e0:	 4c 8b fe 3f 74 9c fe 3f         L..?t..?
   1c2e8:	 f7 ac fe 3f da bc fe 3f         ...?...?
   1c2f0:	 21 cc fe 3f d1 da fe 3f         !..?...?
   1c2f8:	 ef e8 fe 3f 80 f6 fe 3f         ...?...?
   1c300:	 87 03 ff 3f 09 10 ff 3f         ...?...?
   1c308:	 0a 1c ff 3f 8e 27 ff 3f         ...?.'.?
   1c310:	 9a 32 ff 3f 30 3d ff 3f         .2.?0=.?
   1c318:	 56 47 ff 3f 0e 51 ff 3f         VG.?.Q.?
   1c320:	 5d 5a ff 3f 45 63 ff 3f         ]Z.?Ec.?
   1c328:	 cb 6b ff 3f f1 73 ff 3f         .k.?.s.?
   1c330:	 bb 7b ff 3f 2c 83 ff 3f         .{.?,..?
   1c338:	 47 8a ff 3f 0f 91 ff 3f         G..?...?
   1c340:	 88 97 ff 3f b3 9d ff 3f         ...?...?
   1c348:	 94 a3 ff 3f 2e a9 ff 3f         ...?...?
   1c350:	 83 ae ff 3f 95 b3 ff 3f         ...?...?
   1c358:	 68 b8 ff 3f fd bc ff 3f         h..?...?
   1c360:	 57 c1 ff 3f 78 c5 ff 3f         W..?x..?
   1c368:	 63 c9 ff 3f 19 cd ff 3f         c..?...?
   1c370:	 9d d0 ff 3f f1 d3 ff 3f         ...?...?
   1c378:	 16 d7 ff 3f 0f da ff 3f         ...?...?
   1c380:	 dd dc ff 3f 83 df ff 3f         ...?...?
   1c388:	 02 e2 ff 3f 5b e4 ff 3f         ...?[..?
   1c390:	 91 e6 ff 3f a4 e8 ff 3f         ...?...?
   1c398:	 97 ea ff 3f 6b ec ff 3f         ...?k..?
   1c3a0:	 21 ee ff 3f bb ef ff 3f         !..?...?
   1c3a8:	 3a f1 ff 3f 9f f2 ff 3f         :..?...?
   1c3b0:	 ec f3 ff 3f 22 f5 ff 3f         ...?"..?
   1c3b8:	 41 f6 ff 3f 4c f7 ff 3f         A..?L..?
   1c3c0:	 43 f8 ff 3f 26 f9 ff 3f         C..?&..?
   1c3c8:	 f8 f9 ff 3f ba fa ff 3f         ...?...?
   1c3d0:	 6b fb ff 3f 0d fc ff 3f         k..?...?
   1c3d8:	 a1 fc ff 3f 27 fd ff 3f         ...?'..?
   1c3e0:	 a1 fd ff 3f 0f fe ff 3f         ...?...?
   1c3e8:	 72 fe ff 3f cb fe ff 3f         r..?...?
   1c3f0:	 1a ff ff 3f 60 ff ff 3f         ...?`..?
   1c3f8:	 9d ff ff 3f d2 ff ff 3f         ...?...?


kbd_short_128:
   1c400:	 b1 b7 00 00 c1 f1 01 00         ........
   1c408:	 b2 c7 03 00 91 61 06 00         .....a..
   1c410:	 f6 ec 09 00 4e 9d 0e 00         ....N...
   1c418:	 0f ac 14 00 df 58 1c 00         .....X..
   1c420:	 a6 e9 25 00 9c aa 31 00         ..%...1.
   1c428:	 32 ee 3f 00 f9 0c 51 00         2.?...Q.
   1c430:	 68 65 65 00 96 5b 7d 00         hee..[}.
   1c438:	 d7 58 99 00 44 cb b9 00         .X..D...
   1c440:	 31 25 df 00 87 dc 09 01         1%......
   1c448:	 0e 6a 3a 01 9c 48 71 01         .j:..Hq.
   1c450:	 35 f4 ae 01 18 e9 f3 01         5.......
   1c458:	 bc a2 40 02 bc 9a 95 02         ..@.....
   1c460:	 ba 47 f3 02 36 1c 5a 03         .G..6.Z.
   1c468:	 63 85 ca 03 f5 e9 44 04         c.....D.
   1c470:	 ed a8 c9 04 6d 18 59 05         ....m.Y.
   1c478:	 8f 84 f3 05 47 2e 99 06         ....G...
   1c480:	 54 4a 4a 07 3f 00 07 08         TJJ.?...
   1c488:	 74 69 cf 08 69 90 a3 09         ti..i...
   1c490:	 eb 6f 83 0a 82 f2 6e 0b         .o....n.
   1c498:	 f8 f1 65 0c 00 37 68 0d         ..e..7h.
   1c4a0:	 07 79 75 0e 24 5e 8d 0f         .yu.$^..
   1c4a8:	 38 7b af 10 30 54 db 11         8{..0T..
   1c4b0:	 73 5c 10 13 77 f7 4d 14         s\..w.M.
   1c4b8:	 82 79 93 15 8d 28 e0 16         .y...(..
   1c4c0:	 4e 3d 33 18 6c e4 8b 19         N=3.l...
   1c4c8:	 c9 3f e9 1a f7 67 4a 1c         .?...gJ.
   1c4d0:	 bb 6d ae 1d b6 5b 14 1f         .m...[..
   1c4d8:	 13 38 7b 20 53 06 e2 21         .8{ S..!
   1c4e0:	 17 c9 47 23 f9 83 ab 24         ..G#...$
   1c4e8:	 63 3d 0c 26 62 00 69 27         c=.&b.i'
   1c4f0:	 74 de c0 28 47 f1 12 2a         t..(G..*
   1c4f8:	 61 5c 5e 2b bb 4e a2 2c         a\^+.N.,
   1c500:	 3b 04 de 2d 0b c7 10 2f         ;..-.../
   1c508:	 d8 f0 39 30 dc eb 58 31         ..90..X1
   1c510:	 cc 33 6d 32 8f 56 76 33         .3m2.Vv3
   1c518:	 cb f4 73 34 43 c2 65 35         ..s4C.e5
   1c520:	 ff 85 4b 36 4a 1a 25 37         ..K6J.%7
   1c528:	 75 6c f2 37 74 7c b3 38         ul.7t|.8
   1c530:	 45 5c 68 39 29 2f 11 3a         E\h9)/.:
   1c538:	 bd 28 ae 3a e1 8b 3f 3b         .(.:..?;
   1c540:	 83 a9 c5 3b 4c df 40 3c         ...;L.@<
   1c548:	 2e 96 b1 3c e9 40 18 3d         ...<.@.=
   1c550:	 77 5a 75 3d 76 64 c9 3d         wZu=vd.=
   1c558:	 91 e5 14 3e e7 67 58 3e         ...>.gX>
   1c560:	 82 77 94 3e db a0 c9 3e         .w.>...>
   1c568:	 72 6f f8 3e 84 6c 21 3f         ro.>.l!?
   1c570:	 d4 1d 45 3f a5 04 64 3f         ..E?..d?
   1c578:	 cc 9c 7e 3f e8 5b 95 3f         ..~?.[.?
   1c580:	 cb b0 a8 3f fc 02 b9 3f         ...?...?
   1c588:	 6c b2 c6 3f 44 17 d2 3f         l..?D..?
   1c590:	 df 81 db 3f da 3a e3 3f         ...?.:.?
   1c598:	 4a 83 e9 3f 01 95 ee 3f         J..?...?
   1c5a0:	 ea a2 f2 3f 79 d9 f5 3f         ...?y..?
   1c5a8:	 1f 5f f8 3f cd 54 fa 3f         ._.?.T.?
   1c5b0:	 79 d6 fb 3f 9d fb fc 3f         y..?...?
   1c5b8:	 c2 d7 fd 3f f8 7a fe 3f         ...?.z.?
   1c5c0:	 4f f2 fe 3f 48 48 ff 3f         O..?HH.?
   1c5c8:	 3a 85 ff 3f ad af ff 3f         :..?...?
   1c5d0:	 ad cc ff 3f 12 e0 ff 3f         ...?...?
   1c5d8:	 ba ec ff 3f c5 f4 ff 3f         ...?...?
   1c5e0:	 b9 f9 ff 3f a9 fc ff 3f         ...?...?
   1c5e8:	 55 fe ff 3f 3b ff ff 3f         U..?;..?
   1c5f0:	 af ff ff 3f e3 ff ff 3f         ...?...?
   1c5f8:	 f8 ff ff 3f ff ff ff 3f         ...?...?


aac_decoder_ops:
   1c600:	 15 f6 01 00 82 da 00 00         ........
   1c608:	 00 00 00 00 b0 f5 00 00         ........
   1c610:	 84 03 01 00 98 03 01 00         ........
   1c618:	 00 00 00 00 c0 03 01 00         ........
   1c620:	 00 00 00 00 00 00 00 00         ........
   1c628:	 00 00 00 00 00 00 00 00         ........
   1c630:	 c6 03 01 00                     ....


Huffmancb_SCL:
   1c634:	 f3 00 f3 00 04 00 08 00         ........
   1c63c:	 ef 00 ef 00 f5 00 e9 00         ........
   1c644:	 f9 00 0c 00 10 00 14 00         ........
   1c64c:	 e7 00 e7 00 ff 00 ff 00         ........
   1c654:	 e1 00 01 01 dd 00 05 01         ........
   1c65c:	 18 00 1c 00 20 00 28 00         .... .(.
   1c664:	 0b 01 0b 01 db 00 db 00         ........
   1c66c:	 0f 01 0f 01 d5 00 11 01         ........
   1c674:	 d1 00 15 01 cd 00 24 00         ......$.
   1c67c:	 1b 01 1b 01 cb 00 cb 00         ........
   1c684:	 2c 00 30 00 34 00 40 00         ,.0.4.@.
   1c68c:	 c7 00 c7 00 1f 01 1f 01         ........
   1c694:	 21 01 c1 00 25 01 bd 00         !...%...
   1c69c:	 29 01 b9 00 38 00 3c 00         )...8.<.
   1c6a4:	 33 01 33 01 2f 01 2f 01         3.3././.
   1c6ac:	 37 01 37 01 3b 01 3b 01         7.7.;.;.
   1c6b4:	 44 00 48 00 4c 00 58 00         D.H.L.X.
   1c6bc:	 b7 00 b7 00 af 00 af 00         ........
   1c6c4:	 b1 00 3d 01 a9 00 a5 00         ..=.....
   1c6cc:	 41 01 a1 00 50 00 54 00         A...P.T.
   1c6d4:	 47 01 47 01 9f 00 9f 00         G.G.....
   1c6dc:	 4b 01 4b 01 9b 00 9b 00         K.K.....
   1c6e4:	 5c 00 60 00 64 00 70 00         \.`.d.p.
   1c6ec:	 4f 01 4f 01 95 00 8d 00         O.O.....
   1c6f4:	 55 01 85 00 91 00 89 00         U.......
   1c6fc:	 51 01 81 00 68 00 6c 00         Q...h.l.
   1c704:	 5f 01 5f 01 67 01 67 01         _._.g.g.
   1c70c:	 7b 00 7b 00 7f 00 7f 00         {.{.....
   1c714:	 74 00 78 00 80 00 b0 00         t.x.....
   1c71c:	 59 01 75 00 69 00 6d 00         Y.u.i.m.
   1c724:	 71 00 61 00 61 01 7c 00         q.a.a.|.
   1c72c:	 67 00 67 00 5b 00 5b 00         g.g.[.[.
   1c734:	 84 00 88 00 8c 00 9c 00         ........
   1c73c:	 5f 00 5f 00 69 01 55 00         _._.i.U.
   1c744:	 4d 00 0d 00 05 00 09 00         M.......
   1c74c:	 01 00 90 00 94 00 98 00         ........
   1c754:	 8b 01 8b 01 8f 01 8f 01         ........
   1c75c:	 93 01 93 01 97 01 97 01         ........
   1c764:	 9b 01 9b 01 d7 01 d7 01         ........
   1c76c:	 a0 00 a4 00 a8 00 ac 00         ........
   1c774:	 87 01 87 01 6f 01 6f 01         ....o.o.
   1c77c:	 73 01 73 01 77 01 77 01         s.s.w.w.
   1c784:	 7b 01 7b 01 7f 01 7f 01         {.{.....
   1c78c:	 83 01 83 01 a3 01 a3 01         ........
   1c794:	 b4 00 c8 00 dc 00 f0 00         ........
   1c79c:	 b8 00 bc 00 c0 00 c4 00         ........
   1c7a4:	 bf 01 bf 01 c3 01 c3 01         ........
   1c7ac:	 c7 01 c7 01 cb 01 cb 01         ........
   1c7b4:	 cf 01 cf 01 d3 01 d3 01         ........
   1c7bc:	 bb 01 bb 01 a7 01 a7 01         ........
   1c7c4:	 cc 00 d0 00 d4 00 d8 00         ........
   1c7cc:	 ab 01 ab 01 af 01 af 01         ........
   1c7d4:	 b3 01 b3 01 b7 01 b7 01         ........
   1c7dc:	 db 01 db 01 1b 00 1b 00         ........
   1c7e4:	 23 00 23 00 27 00 27 00         #.#.'.'.
   1c7ec:	 e0 00 e4 00 e8 00 ec 00         ........
   1c7f4:	 2b 00 2b 00 17 00 17 00         +.+.....
   1c7fc:	 9f 01 9f 01 e3 01 e3 01         ........
   1c804:	 df 01 df 01 13 00 13 00         ........
   1c80c:	 1f 00 1f 00 3f 00 3f 00         ....?.?.
   1c814:	 f4 00 f8 00 fc 00 00 01         ........
   1c81c:	 43 00 43 00 4b 00 4b 00         C.C.K.K.
   1c824:	 53 00 53 00 47 00 47 00         S.S.G.G.
   1c82c:	 2f 00 2f 00 33 00 33 00         /./.3.3.
   1c834:	 3b 00 3b 00 37 00 37 00         ;.;.7.7.


AAC_SFHUFF_TAB:
   1c83c:	 34 c6 01 00 01 08 3c 00         4.....<.


num_swb_960_window:
   1c844:	 28 28 2d 31 31 31 2e 2e         ((-111..
   1c84c:	 2a 2a 2a 28                     ***(


num_swb_1024_window:
   1c850:	 29 29 2f 31 31 33 2f 2f         ))/113//
   1c858:	 2b 2b 2b 28                     +++(


num_swb_128_window:
   1c85c:	 0c 0c 0c 0e 0e 0e 0f 0f         ........
   1c864:	 0f 0f 0f 0f                     ....


swb_offset_1024_96:
   1c868:	 00 00 04 00 08 00 0c 00         ........
   1c870:	 10 00 14 00 18 00 1c 00         ........
   1c878:	 20 00 24 00 28 00 2c 00          .$.(.,.
   1c880:	 30 00 34 00 38 00 40 00         0.4.8.@.
   1c888:	 48 00 50 00 58 00 60 00         H.P.X.`.
   1c890:	 6c 00 78 00 84 00 90 00         l.x.....
   1c898:	 9c 00 ac 00 bc 00 d4 00         ........
   1c8a0:	 f0 00 14 01 40 01 80 01         ....@...
   1c8a8:	 c0 01 00 02 40 02 80 02         ....@...
   1c8b0:	 c0 02 00 03 40 03 80 03         ....@...
   1c8b8:	 c0 03 00 04                     ....


swb_offset_128_96:
   1c8bc:	 00 00 04 00 08 00 0c 00         ........
   1c8c4:	 10 00 14 00 18 00 20 00         ...... .
   1c8cc:	 28 00 30 00 40 00 5c 00         (.0.@.\.
   1c8d4:	 80 00                           ..


swb_offset_1024_64:
   1c8d6:	 00 00 04 00 08 00 0c 00         ........
   1c8de:	 10 00 14 00 18 00 1c 00         ........
   1c8e6:	 20 00 24 00 28 00 2c 00          .$.(.,.
   1c8ee:	 30 00 34 00 38 00 40 00         0.4.8.@.
   1c8f6:	 48 00 50 00 58 00 64 00         H.P.X.d.
   1c8fe:	 70 00 7c 00 8c 00 9c 00         p.|.....
   1c906:	 ac 00 c0 00 d8 00 f0 00         ........
   1c90e:	 0c 01 30 01 58 01 80 01         ..0.X...
   1c916:	 a8 01 d0 01 f8 01 20 02         ...... .
   1c91e:	 48 02 70 02 98 02 c0 02         H.p.....
   1c926:	 e8 02 10 03 38 03 60 03         ....8.`.
   1c92e:	 88 03 b0 03 d8 03 00 04         ........


swb_offset_128_64:
   1c936:	 00 00 04 00 08 00 0c 00         ........
   1c93e:	 10 00 14 00 18 00 20 00         ...... .
   1c946:	 28 00 30 00 40 00 5c 00         (.0.@.\.
   1c94e:	 80 00                           ..


swb_offset_1024_48:
   1c950:	 00 00 04 00 08 00 0c 00         ........
   1c958:	 10 00 14 00 18 00 1c 00         ........
   1c960:	 20 00 24 00 28 00 30 00          .$.(.0.
   1c968:	 38 00 40 00 48 00 50 00         8.@.H.P.
   1c970:	 58 00 60 00 6c 00 78 00         X.`.l.x.
   1c978:	 84 00 90 00 a0 00 b0 00         ........
   1c980:	 c4 00 d8 00 f0 00 08 01         ........
   1c988:	 24 01 40 01 60 01 80 01         $.@.`...
   1c990:	 a0 01 c0 01 e0 01 00 02         ........
   1c998:	 20 02 40 02 60 02 80 02          .@.`...
   1c9a0:	 a0 02 c0 02 e0 02 00 03         ........
   1c9a8:	 20 03 40 03 60 03 80 03          .@.`...
   1c9b0:	 a0 03 00 04                     ....


swb_offset_128_48:
   1c9b4:	 00 00 04 00 08 00 0c 00         ........
   1c9bc:	 10 00 14 00 1c 00 24 00         ......$.
   1c9c4:	 2c 00 38 00 44 00 50 00         ,.8.D.P.
   1c9cc:	 60 00 70 00 80 00               `.p...


swb_offset_1024_32:
   1c9d2:	 00 00 04 00 08 00 0c 00         ........
   1c9da:	 10 00 14 00 18 00 1c 00         ........
   1c9e2:	 20 00 24 00 28 00 30 00          .$.(.0.
   1c9ea:	 38 00 40 00 48 00 50 00         8.@.H.P.
   1c9f2:	 58 00 60 00 6c 00 78 00         X.`.l.x.
   1c9fa:	 84 00 90 00 a0 00 b0 00         ........
   1ca02:	 c4 00 d8 00 f0 00 08 01         ........
   1ca0a:	 24 01 40 01 60 01 80 01         $.@.`...
   1ca12:	 a0 01 c0 01 e0 01 00 02         ........
   1ca1a:	 20 02 40 02 60 02 80 02          .@.`...
   1ca22:	 a0 02 c0 02 e0 02 00 03         ........
   1ca2a:	 20 03 40 03 60 03 80 03          .@.`...
   1ca32:	 a0 03 c0 03 e0 03 00 04         ........


swb_offset_1024_24:
   1ca3a:	 00 00 04 00 08 00 0c 00         ........
   1ca42:	 10 00 14 00 18 00 1c 00         ........
   1ca4a:	 20 00 24 00 28 00 2c 00          .$.(.,.
   1ca52:	 34 00 3c 00 44 00 4c 00         4.<.D.L.
   1ca5a:	 54 00 5c 00 64 00 6c 00         T.\.d.l.
   1ca62:	 74 00 7c 00 88 00 94 00         t.|.....
   1ca6a:	 a0 00 ac 00 bc 00 cc 00         ........
   1ca72:	 dc 00 f0 00 04 01 1c 01         ........
   1ca7a:	 34 01 50 01 6c 01 8c 01         4.P.l...
   1ca82:	 b0 01 d4 01 fc 01 28 02         ......(.
   1ca8a:	 58 02 8c 02 c0 02 00 03         X.......
   1ca92:	 40 03 80 03 c0 03 00 04         @.......


swb_offset_128_24:
   1ca9a:	 00 00 04 00 08 00 0c 00         ........
   1caa2:	 10 00 14 00 18 00 1c 00         ........
   1caaa:	 24 00 2c 00 34 00 40 00         $.,.4.@.
   1cab2:	 4c 00 5c 00 6c 00 80 00         L.\.l...


swb_offset_1024_16:
   1caba:	 00 00 08 00 10 00 18 00         ........
   1cac2:	 20 00 28 00 30 00 38 00          .(.0.8.
   1caca:	 40 00 48 00 50 00 58 00         @.H.P.X.
   1cad2:	 64 00 70 00 7c 00 88 00         d.p.|...
   1cada:	 94 00 a0 00 ac 00 b8 00         ........
   1cae2:	 c4 00 d4 00 e4 00 f4 00         ........
   1caea:	 04 01 18 01 2c 01 40 01         ....,.@.
   1caf2:	 58 01 70 01 8c 01 a8 01         X.p.....
   1cafa:	 c8 01 ec 01 14 02 3c 02         ......<.
   1cb02:	 68 02 98 02 cc 02 04 03         h.......
   1cb0a:	 40 03 80 03 c0 03 00 04         @.......


swb_offset_128_16:
   1cb12:	 00 00 04 00 08 00 0c 00         ........
   1cb1a:	 10 00 14 00 18 00 1c 00         ........
   1cb22:	 20 00 28 00 30 00 3c 00          .(.0.<.
   1cb2a:	 48 00 58 00 6c 00 80 00         H.X.l...


swb_offset_1024_8:
   1cb32:	 00 00 0c 00 18 00 24 00         ......$.
   1cb3a:	 30 00 3c 00 48 00 54 00         0.<.H.T.
   1cb42:	 60 00 6c 00 78 00 84 00         `.l.x...
   1cb4a:	 90 00 9c 00 ac 00 bc 00         ........
   1cb52:	 cc 00 dc 00 ec 00 fc 00         ........
   1cb5a:	 0c 01 20 01 34 01 48 01         .. .4.H.
   1cb62:	 5c 01 74 01 8c 01 a4 01         \.t.....
   1cb6a:	 c0 01 dc 01 fc 01 20 02         ...... .
   1cb72:	 44 02 6c 02 98 02 c8 02         D.l.....
   1cb7a:	 fc 02 34 03 70 03 b0 03         ..4.p...
   1cb82:	 00 04                           ..


swb_offset_128_8:
   1cb84:	 00 00 04 00 08 00 0c 00         ........
   1cb8c:	 10 00 14 00 18 00 1c 00         ........
   1cb94:	 24 00 2c 00 34 00 3c 00         $.,.4.<.
   1cb9c:	 48 00 58 00 6c 00 80 00         H.X.l...


swb_offset_1024_window:
   1cba4:	 68 c8 01 00 68 c8 01 00         h...h...
   1cbac:	 d6 c8 01 00 50 c9 01 00         ....P...
   1cbb4:	 50 c9 01 00 d2 c9 01 00         P.......
   1cbbc:	 3a ca 01 00 3a ca 01 00         :...:...
   1cbc4:	 ba ca 01 00 ba ca 01 00         ........
   1cbcc:	 ba ca 01 00 32 cb 01 00         ....2...


swb_offset_128_window:
   1cbd4:	 bc c8 01 00 bc c8 01 00         ........
   1cbdc:	 36 c9 01 00 b4 c9 01 00         6.......
   1cbe4:	 b4 c9 01 00 b4 c9 01 00         ........
   1cbec:	 9a ca 01 00 9a ca 01 00         ........
   1cbf4:	 12 cb 01 00 12 cb 01 00         ........
   1cbfc:	 12 cb 01 00 84 cb 01 00         ........


iq_table:
   1cc04:	 00 00 00 00 00 08 00 00         ........
   1cc0c:	 29 14 00 00 9d 22 00 00         )...."..
   1cc14:	 cc 32 00 00 66 44 00 00         .2..fD..
   1cc1c:	 39 57 00 00 20 6b 00 00         9W.. k..
   1cc24:	 00 80 00 00 c4 95 00 00         ........
   1cc2c:	 5b ac 00 00 b6 c3 00 00         [.......
   1cc34:	 c9 db 00 00 8a f4 00 00         ........
   1cc3c:	 f0 0d 01 00 f2 27 01 00         .....'..
   1cc44:	 8a 42 01 00 b2 5d 01 00         .B...]..
   1cc4c:	 63 79 01 00 99 95 01 00         cy......
   1cc54:	 4f b2 01 00 80 cf 01 00         O.......
   1cc5c:	 29 ed 01 00 46 0b 02 00         )...F...
   1cc64:	 d3 29 02 00 ce 48 02 00         .)...H..
   1cc6c:	 33 68 02 00 00 88 02 00         3h......
   1cc74:	 32 a8 02 00 c7 c8 02 00         2.......
   1cc7c:	 bc e9 02 00 10 0b 03 00         ........
   1cc84:	 c0 2c 03 00 ca 4e 03 00         .,...N..
   1cc8c:	 2d 71 03 00 e6 93 03 00         -q......
   1cc94:	 f4 b6 03 00 56 da 03 00         ....V...
   1cc9c:	 0a fe 03 00 0f 22 04 00         ....."..
   1cca4:	 62 46 04 00 04 6b 04 00         bF...k..
   1ccac:	 f2 8f 04 00 2b b5 04 00         ....+...
   1ccb4:	 af da 04 00 7b 00 05 00         ....{...
   1ccbc:	 90 26 05 00 eb 4c 05 00         .&...L..
   1ccc4:	 8c 73 05 00 73 9a 05 00         .s..s...
   1cccc:	 9d c1 05 00 0a e9 05 00         ........
   1ccd4:	 ba 10 06 00 aa 38 06 00         .....8..
   1ccdc:	 dc 60 06 00 4d 89 06 00         .`..M...
   1cce4:	 fd b1 06 00 eb da 06 00         ........
   1ccec:	 16 04 07 00 7f 2d 07 00         .....-..
   1ccf4:	 23 57 07 00 03 81 07 00         #W......
   1ccfc:	 1d ab 07 00 72 d5 07 00         ....r...
   1cd04:	 00 00 08 00 c7 2a 08 00         .....*..
   1cd0c:	 c6 55 08 00 fd 80 08 00         .U......
   1cd14:	 6c ac 08 00 10 d8 08 00         l.......
   1cd1c:	 eb 03 09 00 fc 2f 09 00         ...../..
   1cd24:	 42 5c 09 00 bc 88 09 00         B\......
   1cd2c:	 6a b5 09 00 4c e2 09 00         j...L...
   1cd34:	 61 0f 0a 00 a9 3c 0a 00         a....<..
   1cd3c:	 24 6a 0a 00 d0 97 0a 00         $j......
   1cd44:	 ad c5 0a 00 bc f3 0a 00         ........
   1cd4c:	 fb 21 0b 00 6a 50 0b 00         .!..jP..
   1cd54:	 09 7f 0b 00 d8 ad 0b 00         ........
   1cd5c:	 d6 dc 0b 00 02 0c 0c 00         ........
   1cd64:	 5d 3b 0c 00 e6 6a 0c 00         ];...j..
   1cd6c:	 9d 9a 0c 00 80 ca 0c 00         ........
   1cd74:	 91 fa 0c 00 cf 2a 0d 00         .....*..
   1cd7c:	 38 5b 0d 00 ce 8b 0d 00         8[......
   1cd84:	 90 bc 0d 00 7d ed 0d 00         ....}...
   1cd8c:	 95 1e 0e 00 d8 4f 0e 00         .....O..
   1cd94:	 45 81 0e 00 dd b2 0e 00         E.......
   1cd9c:	 9f e4 0e 00 8a 16 0f 00         ........
   1cda4:	 9f 48 0f 00 dd 7a 0f 00         .H...z..
   1cdac:	 44 ad 0f 00 d3 df 0f 00         D.......
   1cdb4:	 8b 12 10 00 6b 45 10 00         ....kE..
   1cdbc:	 73 78 10 00 a3 ab 10 00         sx......
   1cdc4:	 fa de 10 00 78 12 11 00         ....x...
   1cdcc:	 1d 46 11 00 e9 79 11 00         .F...y..
   1cdd4:	 db ad 11 00 f3 e1 11 00         ........
   1cddc:	 32 16 12 00 96 4a 12 00         2....J..
   1cde4:	 21 7f 12 00 d0 b3 12 00         !.......
   1cdec:	 a5 e8 12 00 9e 1d 13 00         ........
   1cdf4:	 bd 52 13 00 00 88 13 00         .R......
   1cdfc:	 68 bd 13 00 f3 f2 13 00         h.......
   1ce04:	 a3 28 14 00 77 5e 14 00         .(..w^..
   1ce0c:	 6e 94 14 00 89 ca 14 00         n.......
   1ce14:	 c7 00 15 00 28 37 15 00         ....(7..
   1ce1c:	 ac 6d 15 00 52 a4 15 00         .m..R...
   1ce24:	 1c db 15 00 08 12 16 00         ........
   1ce2c:	 16 49 16 00 46 80 16 00         .I..F...
   1ce34:	 98 b7 16 00 0c ef 16 00         ........
   1ce3c:	 a1 26 17 00 58 5e 17 00         .&..X^..
   1ce44:	 30 96 17 00 29 ce 17 00         0...)...
   1ce4c:	 44 06 18 00 7f 3e 18 00         D....>..
   1ce54:	 db 76 18 00 57 af 18 00         .v..W...
   1ce5c:	 f4 e7 18 00 b0 20 19 00         ..... ..
   1ce64:	 8e 59 19 00 8b 92 19 00         .Y......
   1ce6c:	 a7 cb 19 00 e4 04 1a 00         ........
   1ce74:	 40 3e 1a 00 bb 77 1a 00         @>...w..
   1ce7c:	 56 b1 1a 00 10 eb 1a 00         V.......
   1ce84:	 e9 24 1b 00 e0 5e 1b 00         .$...^..
   1ce8c:	 f7 98 1b 00 2c d3 1b 00         ....,...
   1ce94:	 80 0d 1c 00 f2 47 1c 00         .....G..
   1ce9c:	 82 82 1c 00 31 bd 1c 00         ....1...
   1cea4:	 fd f7 1c 00 e7 32 1d 00         .....2..
   1ceac:	 ef 6d 1d 00 15 a9 1d 00         .m......
   1ceb4:	 59 e4 1d 00 b9 1f 1e 00         Y.......
   1cebc:	 37 5b 1e 00 d3 96 1e 00         7[......
   1cec4:	 8b d2 1e 00 60 0e 1f 00         ....`...
   1cecc:	 53 4a 1f 00 61 86 1f 00         SJ..a...
   1ced4:	 8d c2 1f 00 d5 fe 1f 00         ........
   1cedc:	 3a 3b 20 00 bb 77 20 00         :; ..w .
   1cee4:	 58 b4 20 00 12 f1 20 00         X. ... .
   1ceec:	 e7 2d 21 00 d8 6a 21 00         .-!..j!.
   1cef4:	 e5 a7 21 00 0e e5 21 00         ..!...!.
   1cefc:	 53 22 22 00 b3 5f 22 00         S"".._".
   1cf04:	 2e 9d 22 00 c5 da 22 00         .."...".
   1cf0c:	 77 18 23 00 45 56 23 00         w.#.EV#.
   1cf14:	 2d 94 23 00 30 d2 23 00         -.#.0.#.
   1cf1c:	 4f 10 24 00 88 4e 24 00         O.$..N$.
   1cf24:	 db 8c 24 00 4a cb 24 00         ..$.J.$.
   1cf2c:	 d3 09 25 00 76 48 25 00         ..%.vH%.
   1cf34:	 33 87 25 00 0b c6 25 00         3.%...%.
   1cf3c:	 fd 04 26 00 0a 44 26 00         ..&..D&.
   1cf44:	 30 83 26 00 70 c2 26 00         0.&.p.&.
   1cf4c:	 ca 01 27 00 3e 41 27 00         ..'.>A'.
   1cf54:	 cb 80 27 00 72 c0 27 00         ..'.r.'.
   1cf5c:	 33 00 28 00 0d 40 28 00         3.(..@(.
   1cf64:	 00 80 28 00 0d c0 28 00         ..(...(.
   1cf6c:	 32 00 29 00 71 40 29 00         2.).q@).
   1cf74:	 c9 80 29 00 3a c1 29 00         ..).:.).
   1cf7c:	 c4 01 2a 00 67 42 2a 00         ..*.gB*.
   1cf84:	 23 83 2a 00 f7 c3 2a 00         #.*...*.
   1cf8c:	 e3 04 2b 00 e9 45 2b 00         ..+..E+.
   1cf94:	 06 87 2b 00 3d c8 2b 00         ..+.=.+.
   1cf9c:	 8b 09 2c 00 f2 4a 2c 00         ..,..J,.
   1cfa4:	 71 8c 2c 00 08 ce 2c 00         q.,...,.
   1cfac:	 b7 0f 2d 00 7e 51 2d 00         ..-.~Q-.
   1cfb4:	 5d 93 2d 00 53 d5 2d 00         ].-.S.-.
   1cfbc:	 62 17 2e 00 88 59 2e 00         b....Y..
   1cfc4:	 c6 9b 2e 00 1b de 2e 00         ........
   1cfcc:	 88 20 2f 00 0d 63 2f 00         . /..c/.
   1cfd4:	 a8 a5 2f 00 5b e8 2f 00         ../.[./.
   1cfdc:	 26 2b 30 00 07 6e 30 00         &+0..n0.
   1cfe4:	 00 b1 30 00 0f f4 30 00         ..0...0.
   1cfec:	 36 37 31 00 73 7a 31 00         671.sz1.
   1cff4:	 c8 bd 31 00 33 01 32 00         ..1.3.2.
   1cffc:	 b5 44 32 00 4e 88 32 00         .D2.N.2.
   1d004:	 fd cb 32 00                     ..2.


tns_coef_0_3:
   1d008:	 00 00 00 00 05 4c bc 01         .....L..
   1d010:	 6f 98 20 03 81 53 e6 03         o. ..S..
   1d018:	 8e 8e 0f fc a3 30 89 fc         .....0..
   1d020:	 16 c9 6d fd 79 c5 a1 fe         ..m.y...
   1d028:	 fb b3 43 fe 91 67 df fc         ..C..g..
   1d030:	 7f ac 19 fc 7f ac 19 fc         ........
   1d038:	 8e 8e 0f fc a3 30 89 fc         .....0..
   1d040:	 16 c9 6d fd 79 c5 a1 fe         ..m.y...


tns_coef_0_4:
   1d048:	 00 00 00 00 cd e6 d4 00         ........
   1d050:	 92 7f a0 01 61 e4 59 02         ....a.Y.
   1d058:	 f5 fa f8 02 5d cf 76 03         ....].v.
   1d060:	 c2 e1 cd 03 f3 63 fa 03         .....c..
   1d068:	 43 5e 04 fc 2e 17 27 fc         C^....'.
   1d070:	 50 5a 6b fc 92 d4 ce fc         PZk.....
   1d078:	 bb 22 4e fd f8 ee e4 fd         ."N.....
   1d080:	 aa 16 8e fe 2b d7 43 ff         ....+.C.


tns_coef_1_3:
   1d088:	 00 00 00 00 05 4c bc 01         .....L..
   1d090:	 16 c9 6d fd 79 c5 a1 fe         ..m.y...
   1d098:	 81 53 e6 03 6f 98 20 03         .S..o. .
   1d0a0:	 16 c9 6d fd 79 c5 a1 fe         ..m.y...
   1d0a8:	 fb b3 43 fe 91 67 df fc         ..C..g..
   1d0b0:	 16 c9 6d fd 79 c5 a1 fe         ..m.y...
   1d0b8:	 91 67 df fc fb b3 43 fe         .g....C.
   1d0c0:	 16 c9 6d fd 79 c5 a1 fe         ..m.y...


tns_coef_1_4:
   1d0c8:	 00 00 00 00 cd e6 d4 00         ........
   1d0d0:	 92 7f a0 01 61 e4 59 02         ....a.Y.
   1d0d8:	 bb 22 4e fd f8 ee e4 fd         ."N.....
   1d0e0:	 aa 16 8e fe 2b d7 43 ff         ....+.C.
   1d0e8:	 f3 63 fa 03 c2 e1 cd 03         .c......
   1d0f0:	 5d cf 76 03 f5 fa f8 02         ].v.....
   1d0f8:	 bb 22 4e fd f8 ee e4 fd         ."N.....
   1d100:	 aa 16 8e fe 2b d7 43 ff         ....+.C.


pow05_table:
   1d108:	 99 9f e8 1a 66 9e a0 16         ....f...
   1d110:	 0a fe 06 13 00 00 00 10         ........
   1d118:	 cd 4f 74 0d 33 4f 50 0b         .Ot.3OP.
   1d120:	 05 7f 83 09                     ....


sample_rates:
   1d124:	 00 77 01 00 88 58 01 00         .w...X..
   1d12c:	 00 fa 00 00 80 bb 00 00         ........
   1d134:	 44 ac 00 00 00 7d 00 00         D....}..
   1d13c:	 c0 5d 00 00 22 56 00 00         .].."V..
   1d144:	 80 3e 00 00 e0 2e 00 00         .>......
   1d14c:	 11 2b 00 00 40 1f 00 00         .+..@...


pred_sfb_max:
   1d154:	 21 21 26 28 28 28 29 29         !!&((())
   1d15c:	 25 25 25 22                     %%%"


tns_sbf_max:
   1d160:	 1f 09 1c 07 1f 09 1c 07         ........
   1d168:	 22 0a 1b 07 28 0e 1a 06         "...(...
   1d170:	 2a 0e 1a 06 33 0e 1a 06         *...3...
   1d178:	 2e 0e 1d 07 2e 0e 1d 07         ........
   1d180:	 2a 0e 17 08 2a 0e 17 08         *...*...
   1d188:	 2a 0e 17 08 27 0e 13 07         *...'...
   1d190:	 27 0e 13 07 00 00 00 00         '.......
   1d198:	 00 00 00 00 00 00 00 00         ........


Huffmancb_1:
   1d1a0:	 57 01 57 01 04 00 18 00         W.W.....
   1d1a8:	 08 00 0c 00 10 00 14 00         ........
   1d1b0:	 5b 01 5b 01 53 01 53 01         [.[.S.S.
   1d1b8:	 57 00 57 00 67 01 67 01         W.W.g.g.
   1d1c0:	 57 02 57 02 17 01 17 01         W.W.....
   1d1c8:	 97 01 97 01 47 01 47 01         ....G.G.
   1d1d0:	 1c 00 30 00 44 00 58 00         ..0.D.X.
   1d1d8:	 20 00 24 00 28 00 2c 00          .$.(.,.
   1d1e0:	 4b 01 4b 01 63 01 63 01         K.K.c.c.
   1d1e8:	 17 02 17 02 27 01 27 01         ....'.'.
   1d1f0:	 87 01 87 01 97 00 97 00         ........
   1d1f8:	 6b 01 6b 01 17 00 17 00         k.k.....
   1d200:	 34 00 38 00 3c 00 40 00         4.8.<.@.
   1d208:	 43 01 43 01 07 01 07 01         C.C.....
   1d210:	 1b 01 1b 01 67 00 67 00         ....g.g.
   1d218:	 93 01 93 01 97 02 97 02         ........
   1d220:	 9b 01 9b 01 47 02 47 02         ....G.G.
   1d228:	 48 00 4c 00 50 00 54 00         H.L.P.T.
   1d230:	 a7 01 a7 01 67 02 67 02         ....g.g.
   1d238:	 13 01 13 01 5b 02 5b 02         ....[.[.
   1d240:	 53 00 53 00 5b 00 5b 00         S.S.[.[.
   1d248:	 53 02 53 02 47 00 47 00         S.S.G.G.
   1d250:	 5c 00 70 00 84 00 98 00         \.p.....
   1d258:	 60 00 64 00 68 00 6c 00         `.d.h.l.
   1d260:	 2b 01 2b 01 23 01 23 01         +.+.#.#.
   1d268:	 8b 01 8b 01 a7 00 a7 00         ........
   1d270:	 27 02 27 02 87 02 87 02         '.'.....
   1d278:	 87 00 87 00 0b 01 0b 01         ........
   1d280:	 74 00 78 00 7c 00 80 00         t.x.|...
   1d288:	 1b 02 1b 02 27 00 27 00         ....'.'.
   1d290:	 a3 01 a3 01 93 00 93 00         ........
   1d298:	 83 01 83 01 07 02 07 02         ........
   1d2a0:	 4b 02 4b 02 4b 00 4b 00         K.K.K.K.
   1d2a8:	 88 00 8c 00 90 00 94 00         ........
   1d2b0:	 63 00 63 00 03 01 03 01         c.c.....
   1d2b8:	 07 00 07 00 a7 02 a7 02         ........
   1d2c0:	 9b 00 9b 00 6b 02 6b 02         ....k.k.
   1d2c8:	 63 02 63 02 ab 01 ab 01         c.c.....
   1d2d0:	 9c 00 a0 00 a4 00 b8 00         ........
   1d2d8:	 41 02 11 00 69 00 19 00         A...i...
   1d2e0:	 11 02 41 00 91 02 99 02         ..A.....
   1d2e8:	 a8 00 ac 00 b0 00 b4 00         ........
   1d2f0:	 8b 00 8b 00 23 02 23 02         ....#.#.
   1d2f8:	 a3 00 a3 00 0b 02 0b 02         ........
   1d300:	 ab 02 ab 02 83 02 83 02         ........
   1d308:	 2b 00 2b 00 83 00 83 00         +.+.....
   1d310:	 bc 00 c0 00 c4 00 c8 00         ........
   1d318:	 03 00 03 00 2b 02 2b 02         ....+.+.
   1d320:	 8b 02 8b 02 a3 02 a3 02         ........
   1d328:	 23 00 23 00 03 02 03 02         #.#.....
   1d330:	 0b 00 0b 00 ab 00 ab 00         ........


Huffmancb_2:
   1d338:	 04 00 0c 00 20 00 34 00         .... .4.
   1d340:	 57 01 57 01 59 01 08 00         W.W.Y...
   1d348:	 53 01 53 01 57 02 57 02         S.S.W.W.
   1d350:	 10 00 14 00 18 00 1c 00         ........
   1d358:	 17 01 17 01 57 00 57 00         ....W.W.
   1d360:	 47 01 47 01 97 01 97 01         G.G.....
   1d368:	 67 01 67 01 85 01 61 01         g.g...a.
   1d370:	 25 01 95 00 65 00 15 02         %...e...
   1d378:	 24 00 28 00 2c 00 30 00         $.(.,.0.
   1d380:	 51 00 49 01 19 01 41 01         Q.I...A.
   1d388:	 15 00 99 01 59 02 45 02         ....Y.E.
   1d390:	 91 01 65 02 05 01 51 02         ..e...Q.
   1d398:	 45 00 11 01 69 01 a5 01         E...i...
   1d3a0:	 38 00 44 00 58 00 6c 00         8.D.X.l.
   1d3a8:	 95 02 59 00 3c 00 40 00         ..Y.<.@.
   1d3b0:	 27 02 27 02 1b 02 1b 02         '.'.....
   1d3b8:	 23 01 23 01 87 00 87 00         #.#.....
   1d3c0:	 48 00 4c 00 50 00 54 00         H.L.P.T.
   1d3c8:	 8b 01 8b 01 6b 00 6b 00         ....k.k.
   1d3d0:	 9b 02 9b 02 a3 01 a3 01         ........
   1d3d8:	 07 02 07 02 ab 01 ab 01         ........
   1d3e0:	 93 00 93 00 03 01 03 01         ........
   1d3e8:	 5c 00 60 00 64 00 68 00         \.`.d.h.
   1d3f0:	 13 02 13 02 0b 01 0b 01         ........
   1d3f8:	 2b 01 2b 01 49 02 61 00         +.+.I.a.
   1d400:	 81 01 91 02 41 02 41 00         ....A.A.
   1d408:	 05 00 99 00 19 00 25 00         ......%.
   1d410:	 70 00 74 00 78 00 88 00         p.t.x...
   1d418:	 a5 02 61 02 11 00 a5 00         ..a.....
   1d420:	 49 00 85 02 69 02 89 00         I...i...
   1d428:	 21 02 7c 00 80 00 84 00         !.|.....
   1d430:	 0b 02 0b 02 03 00 03 00         ........
   1d438:	 a3 00 a3 00 a3 02 a3 02         ........
   1d440:	 ab 02 ab 02 83 00 83 00         ........
   1d448:	 8c 00 90 00 94 00 98 00         ........
   1d450:	 8b 02 8b 02 23 00 23 00         ....#.#.
   1d458:	 83 02 83 02 2b 00 2b 00         ....+.+.
   1d460:	 0b 00 0b 00 03 02 03 02         ........
   1d468:	 2b 02 2b 02 ab 00 ab 00         +.+.....


Huffmancb_3:
   1d470:	 03 00 03 00 04 00 08 00         ........
   1d478:	 05 00 01 01 11 00 41 00         ......A.
   1d480:	 0c 00 10 00 14 00 20 00         ...... .
   1d488:	 17 00 17 00 43 01 43 01         ....C.C.
   1d490:	 51 00 11 01 45 00 51 01         Q...E.Q.
   1d498:	 05 01 55 00 18 00 1c 00         ..U.....
   1d4a0:	 57 01 57 01 47 01 47 01         W.W.G.G.
   1d4a8:	 17 01 17 01 09 00 01 02         ........
   1d4b0:	 24 00 2c 00 40 00 54 00         $.,.@.T.
   1d4b8:	 41 02 19 00 65 00 28 00         A...e.(.
   1d4c0:	 83 01 83 01 93 01 93 01         ........
   1d4c8:	 30 00 34 00 38 00 3c 00         0.4.8.<.
   1d4d0:	 27 00 27 00 53 02 53 02         '.'.S.S.
   1d4d8:	 5b 00 5b 00 83 00 83 00         [.[.....
   1d4e0:	 63 00 63 00 93 00 93 00         c.c.....
   1d4e8:	 23 00 23 00 13 02 13 02         #.#.....
   1d4f0:	 44 00 48 00 4c 00 50 00         D.H.L.P.
   1d4f8:	 4b 00 4b 00 67 01 67 01         K.K.g.g.
   1d500:	 63 01 63 01 97 00 97 00         c.c.....
   1d508:	 97 01 97 01 25 01 85 00         ....%...
   1d510:	 85 01 21 01 59 01 55 02         ..!.Y.U.
   1d518:	 58 00 5c 00 60 00 70 00         X.\.`.p.
   1d520:	 19 01 45 02 81 02 91 02         ..E.....
   1d528:	 69 00 a5 00 05 02 09 01         i.......
   1d530:	 a1 01 64 00 68 00 6c 00         ..d.h.l.
   1d538:	 2b 00 2b 00 a7 01 a7 01         +.+.....
   1d540:	 17 02 17 02 4b 01 4b 01         ....K.K.
   1d548:	 97 02 97 02 6b 01 6b 01         ....k.k.
   1d550:	 74 00 78 00 7c 00 80 00         t.x.|...
   1d558:	 a3 00 a3 00 63 02 63 02         ....c.c.
   1d560:	 85 02 29 01 99 00 a9 00         ..).....
   1d568:	 a1 02 a9 01 99 01 65 02         ......e.
   1d570:	 a5 02 84 00 88 00 8c 00         ........
   1d578:	 23 02 23 02 8b 00 8b 00         #.#.....
   1d580:	 27 02 27 02 89 01 59 02         '.'...Y.
   1d588:	 19 02 90 00 94 00 98 00         ........
   1d590:	 ab 02 ab 02 6b 02 6b 02         ....k.k.
   1d598:	 9b 02 9b 02 4b 02 4b 02         ....K.K.
   1d5a0:	 0b 02 0b 02 29 02 89 02         ....)...


Huffmancb_4:
   1d5a8:	 04 00 08 00 0c 00 18 00         ........
   1d5b0:	 55 01 51 01 15 01 55 00         U.Q...U.
   1d5b8:	 45 01 05 00 15 00 01 00         E.......
   1d5c0:	 41 01 45 00 10 00 14 00         A.E.....
   1d5c8:	 07 01 07 01 53 00 53 00         ....S.S.
   1d5d0:	 03 01 03 01 13 01 13 01         ........
   1d5d8:	 1c 00 20 00 34 00 48 00         .. .4.H.
   1d5e0:	 43 00 43 00 13 00 13 00         C.C.....
   1d5e8:	 24 00 28 00 2c 00 30 00         $.(.,.0.
   1d5f0:	 5b 01 5b 01 97 01 97 01         [.[.....
   1d5f8:	 67 01 67 01 57 02 57 02         g.g.W.W.
   1d600:	 5b 00 5b 00 1b 01 1b 01         [.[.....
   1d608:	 67 00 67 00 4b 01 4b 01         g.g.K.K.
   1d610:	 38 00 3c 00 40 00 44 00         8.<.@.D.
   1d618:	 93 01 93 01 51 02 95 00         ....Q...
   1d620:	 61 01 45 02 25 01 15 02         a.E.%...
   1d628:	 85 01 19 00 49 00 25 00         ....I.%.
   1d630:	 09 01 11 02 61 00 41 02         ....a.A.
   1d638:	 4c 00 50 00 58 00 6c 00         L.P.X.l.
   1d640:	 91 00 21 01 05 02 81 01         ..!.....
   1d648:	 85 00 09 00 01 02 54 00         ......T.
   1d650:	 23 00 23 00 83 00 83 00         #.#.....
   1d658:	 5c 00 60 00 64 00 68 00         \.`.d.h.
   1d660:	 a7 01 a7 01 6b 01 6b 01         ....k.k.
   1d668:	 9b 01 9b 01 97 02 97 02         ........
   1d670:	 67 02 67 02 5b 02 5b 02         g.g.[.[.
   1d678:	 a5 00 69 00 99 00 a1 01         ..i.....
   1d680:	 70 00 74 00 78 00 84 00         p.t.x...
   1d688:	 91 02 29 01 61 02 89 01         ..).a...
   1d690:	 85 02 a9 01 25 02 49 02         ....%.I.
   1d698:	 19 02 a5 02 7c 00 80 00         ....|...
   1d6a0:	 9b 02 9b 02 6b 02 6b 02         ....k.k.
   1d6a8:	 a3 00 a3 00 2b 00 2b 00         ....+.+.
   1d6b0:	 88 00 8c 00 90 00 94 00         ........
   1d6b8:	 83 02 83 02 8b 00 8b 00         ........
   1d6c0:	 23 02 23 02 0b 02 0b 02         #.#.....
   1d6c8:	 ab 02 ab 02 a3 02 a3 02         ........
   1d6d0:	 ab 00 ab 00 29 02 89 02         ....)...


Huffmancb_5:
   1d6d8:	 13 01 13 01 04 00 08 00         ........
   1d6e0:	 0d 01 15 01 51 01 d1 00         ....Q...
   1d6e8:	 0c 00 10 00 14 00 28 00         ......(.
   1d6f0:	 d7 00 d7 00 4f 01 4f 01         ....O.O.
   1d6f8:	 cf 00 cf 00 57 01 57 01         ....W.W.
   1d700:	 18 00 1c 00 20 00 24 00         .... .$.
   1d708:	 0b 01 0b 01 93 01 93 01         ........
   1d710:	 1b 01 1b 01 93 00 93 00         ........
   1d718:	 c9 00 59 01 8d 00 95 01         ..Y.....
   1d720:	 49 01 d9 00 8d 01 95 00         I.......
   1d728:	 2c 00 30 00 44 00 58 00         ,.0.D.X.
   1d730:	 05 01 1d 01 51 00 d1 01         ....Q...
   1d738:	 34 00 38 00 3c 00 40 00         4.8.<.@.
   1d740:	 c7 00 c7 00 d7 01 d7 01         ........
   1d748:	 5f 01 5f 01 4f 00 4f 00         _._.O.O.
   1d750:	 47 01 47 01 df 00 df 00         G.G.....
   1d758:	 57 00 57 00 cf 01 cf 01         W.W.....
   1d760:	 48 00 4c 00 50 00 54 00         H.L.P.T.
   1d768:	 8b 01 8b 01 9b 01 9b 01         ........
   1d770:	 8b 00 8b 00 9b 00 9b 00         ........
   1d778:	 85 00 9d 00 c9 01 59 00         ......Y.
   1d780:	 9d 01 d9 01 85 01 49 00         ......I.
   1d788:	 5c 00 60 00 74 00 88 00         \.`.t...
   1d790:	 11 00 01 01 61 01 21 01         ....a.!.
   1d798:	 64 00 68 00 6c 00 70 00         d.h.l.p.
   1d7a0:	 c3 00 c3 00 13 02 13 02         ........
   1d7a8:	 e3 00 e3 00 0f 00 0f 00         ........
   1d7b0:	 17 02 17 02 0f 02 0f 02         ........
   1d7b8:	 43 01 43 01 17 00 17 00         C.C.....
   1d7c0:	 78 00 7c 00 80 00 84 00         x.|.....
   1d7c8:	 5f 00 5f 00 47 00 47 00         _._.G.G.
   1d7d0:	 c7 01 c7 01 0b 02 0b 02         ........
   1d7d8:	 83 00 83 00 a3 01 a3 01         ........
   1d7e0:	 1b 00 1b 00 1b 02 1b 02         ........
   1d7e8:	 8c 00 90 00 94 00 98 00         ........
   1d7f0:	 df 01 df 01 83 01 83 01         ........
   1d7f8:	 09 00 a1 00 1d 00 41 00         ......A.
   1d800:	 c1 01 1d 02 05 02 e1 01         ........
   1d808:	 61 00 05 00 9c 00 a0 00         a.......
   1d810:	 23 00 23 00 03 02 03 02         #.#.....
   1d818:	 23 02 23 02 03 00 03 00         #.#.....


Huffmancb_6:
   1d820:	 04 00 08 00 0c 00 1c 00         ........
   1d828:	 11 01 15 01 d1 00 51 01         ......Q.
   1d830:	 0d 01 55 01 4d 01 d5 00         ..U.M...
   1d838:	 cd 00 10 00 14 00 18 00         ........
   1d840:	 d9 00 59 01 49 01 c9 00         ..Y.I...
   1d848:	 09 01 8d 01 19 01 95 00         ........
   1d850:	 95 01 91 00 8d 00 91 01         ........
   1d858:	 20 00 24 00 38 00 4c 00          .$.8.L.
   1d860:	 99 00 89 01 89 00 99 01         ........
   1d868:	 28 00 2c 00 30 00 34 00         (.,.0.4.
   1d870:	 47 01 47 01 5f 01 5f 01         G.G._._.
   1d878:	 df 00 df 00 cf 01 cf 01         ........
   1d880:	 c7 00 c7 00 d7 01 d7 01         ........
   1d888:	 57 00 57 00 4f 00 4f 00         W.W.O.O.
   1d890:	 3c 00 40 00 44 00 48 00         <.@.D.H.
   1d898:	 1f 01 1f 01 07 01 07 01         ........
   1d8a0:	 53 00 53 00 d3 01 d3 01         S.S.....
   1d8a8:	 9f 01 9f 01 85 00 c9 01         ........
   1d8b0:	 d9 01 9d 00 59 00 49 00         ....Y.I.
   1d8b8:	 50 00 5c 00 70 00 84 00         P.\.p...
   1d8c0:	 85 01 dd 01 54 00 58 00         ....T.X.
   1d8c8:	 5f 00 5f 00 47 00 47 00         _._.G.G.
   1d8d0:	 c7 01 c7 01 17 00 17 00         ........
   1d8d8:	 60 00 64 00 68 00 6c 00         `.d.h.l.
   1d8e0:	 0f 00 0f 00 63 01 63 01         ....c.c.
   1d8e8:	 43 01 43 01 c3 00 c3 00         C.C.....
   1d8f0:	 17 02 17 02 e3 00 e3 00         ........
   1d8f8:	 0f 02 0f 02 13 00 13 00         ........
   1d900:	 74 00 78 00 7c 00 80 00         t.x.|...
   1d908:	 83 01 83 01 83 00 83 00         ........
   1d910:	 1b 02 1b 02 0b 00 0b 00         ........
   1d918:	 03 01 03 01 a3 01 a3 01         ........
   1d920:	 a3 00 a3 00 0b 02 0b 02         ........
   1d928:	 88 00 8c 00 90 00 94 00         ........
   1d930:	 23 01 23 01 1b 00 1b 00         #.#.....
   1d938:	 13 02 13 02 05 00 05 02         ........
   1d940:	 1d 00 61 00 1d 02 e1 01         ..a.....
   1d948:	 c1 01 41 00 98 00 9c 00         ..A.....
   1d950:	 23 02 23 02 03 02 03 02         #.#.....
   1d958:	 03 00 03 00 23 00 23 00         ....#.#.


Huffmancb_7:
   1d960:	 03 00 03 00 04 00 08 00         ........
   1d968:	 07 00 07 00 43 00 43 00         ....C.C.
   1d970:	 45 00 0c 00 10 00 24 00         E.....$.
   1d978:	 49 00 85 00 09 00 81 00         I.......
   1d980:	 14 00 18 00 1c 00 20 00         ...... .
   1d988:	 4f 00 4f 00 c7 00 c7 00         O.O.....
   1d990:	 8b 00 8b 00 0f 00 0f 00         ........
   1d998:	 c3 00 c3 00 c9 00 8d 00         ........
   1d9a0:	 05 01 51 00 45 01 55 00         ..Q.E.U.
   1d9a8:	 28 00 2c 00 40 00 54 00         (.,.@.T.
   1d9b0:	 cd 00 09 01 01 01 11 00         ........
   1d9b8:	 30 00 34 00 38 00 3c 00         0.4.8.<.
   1d9c0:	 93 00 93 00 4b 01 4b 01         ....K.K.
   1d9c8:	 97 00 97 00 43 01 43 01         ....C.C.
   1d9d0:	 5b 00 5b 00 17 00 17 00         [.[.....
   1d9d8:	 87 01 87 01 d3 00 d3 00         ........
   1d9e0:	 44 00 48 00 4c 00 50 00         D.H.L.P.
   1d9e8:	 4f 01 4f 01 0f 01 0f 01         O.O.....
   1d9f0:	 d7 00 d7 00 8b 01 8b 01         ........
   1d9f8:	 9b 00 9b 00 c7 01 c7 01         ........
   1da00:	 8d 01 81 01 19 00 11 01         ........
   1da08:	 58 00 5c 00 60 00 68 00         X.\.`.h.
   1da10:	 5d 00 51 01 9d 00 15 01         ].Q.....
   1da18:	 d9 00 c9 01 dd 00 19 01         ........
   1da20:	 55 01 91 01 cd 01 64 00         U.....d.
   1da28:	 1f 00 1f 00 c3 01 c3 01         ........
   1da30:	 6c 00 70 00 74 00 78 00         l.p.t.x.
   1da38:	 5b 01 5b 01 97 01 97 01         [.[.....
   1da40:	 1f 01 1f 01 d3 01 d3 01         ........
   1da48:	 d7 01 d7 01 5f 01 5f 01         ...._._.
   1da50:	 9d 01 99 01 d9 01 dd 01         ........


Huffmancb_8:
   1da58:	 04 00 08 00 10 00 24 00         ......$.
   1da60:	 47 00 47 00 49 00 05 00         G.G.I...
   1da68:	 85 00 41 00 89 00 0c 00         ..A.....
   1da70:	 03 00 03 00 0b 00 0b 00         ........
   1da78:	 14 00 18 00 1c 00 20 00         ...... .
   1da80:	 83 00 83 00 4f 00 4f 00         ....O.O.
   1da88:	 c7 00 c7 00 8f 00 8f 00         ........
   1da90:	 cb 00 cb 00 cd 00 51 00         ......Q.
   1da98:	 05 01 91 00 09 01 0d 00         ........
   1daa0:	 28 00 2c 00 40 00 54 00         (.,.@.T.
   1daa8:	 c1 00 d1 00 0d 01 95 00         ........
   1dab0:	 30 00 34 00 38 00 3c 00         0.4.8.<.
   1dab8:	 57 00 57 00 4b 01 4b 01         W.W.K.K.
   1dac0:	 47 01 47 01 d7 00 d7 00         G.G.....
   1dac8:	 4f 01 4f 01 13 01 13 01         O.O.....
   1dad0:	 17 01 17 01 03 01 03 01         ........
   1dad8:	 44 00 48 00 4c 00 50 00         D.H.L.P.
   1dae0:	 53 01 53 01 13 00 13 00         S.S.....
   1dae8:	 8b 01 8b 01 9b 00 9b 00         ........
   1daf0:	 5b 00 5b 00 87 01 87 01         [.[.....
   1daf8:	 8d 01 d9 00 55 01 15 00         ....U...
   1db00:	 58 00 5c 00 60 00 68 00         X.\.`.h.
   1db08:	 19 01 41 01 91 01 5d 00         ..A...].
   1db10:	 9d 00 c9 01 59 01 dd 00         ....Y...
   1db18:	 c5 01 95 01 cd 01 64 00         ......d.
   1db20:	 9b 01 9b 01 1f 01 1f 01         ........
   1db28:	 6c 00 70 00 74 00 78 00         l.p.t.x.
   1db30:	 1b 00 1b 00 d3 01 d3 01         ........
   1db38:	 83 01 83 01 5f 01 5f 01         ...._._.
   1db40:	 9f 01 9f 01 db 01 db 01         ........
   1db48:	 d5 01 1d 00 c1 01 dd 01         ........


Huffmancb_9:
   1db50:	 03 00 03 00 04 00 08 00         ........
   1db58:	 07 00 07 00 43 00 43 00         ....C.C.
   1db60:	 45 00 0c 00 10 00 2c 00         E.....,.
   1db68:	 49 00 85 00 09 00 81 00         I.......
   1db70:	 14 00 18 00 1c 00 20 00         ...... .
   1db78:	 4f 00 4f 00 8b 00 8b 00         O.O.....
   1db80:	 c7 00 c7 00 0d 00 c1 00         ........
   1db88:	 c9 00 8d 00 05 01 51 00         ......Q.
   1db90:	 09 01 45 01 24 00 28 00         ..E.$.(.
   1db98:	 93 00 93 00 cf 00 cf 00         ........
   1dba0:	 03 01 03 01 13 00 13 00         ........
   1dba8:	 30 00 44 00 58 00 a4 00         0.D.X...
   1dbb0:	 34 00 38 00 3c 00 40 00         4.8.<.@.
   1dbb8:	 57 00 57 00 4b 01 4b 01         W.W.K.K.
   1dbc0:	 87 01 87 01 0f 01 0f 01         ........
   1dbc8:	 97 00 97 00 5b 00 5b 00         ....[.[.
   1dbd0:	 d3 00 d3 00 41 01 89 01         ....A...
   1dbd8:	 48 00 4c 00 50 00 54 00         H.L.P.T.
   1dbe0:	 15 00 c5 01 4d 01 05 02         ....M...
   1dbe8:	 61 00 11 01 d5 00 99 00         a.......
   1dbf0:	 5d 00 81 01 a1 00 09 02         ].......
   1dbf8:	 8d 01 c9 01 51 01 65 00         ....Q.e.
   1dc00:	 5c 00 68 00 7c 00 90 00         \.h.|...
   1dc08:	 45 02 9d 00 60 00 64 00         E...`.d.
   1dc10:	 1b 00 1b 00 17 01 17 01         ........
   1dc18:	 db 00 db 00 e3 00 e3 00         ........
   1dc20:	 6c 00 70 00 74 00 78 00         l.p.t.x.
   1dc28:	 c3 01 c3 01 a7 00 a7 00         ........
   1dc30:	 0f 02 0f 02 93 01 93 01         ........
   1dc38:	 cf 01 cf 01 03 02 03 02         ........
   1dc40:	 6b 00 6b 00 1b 01 1b 01         k.k.....
   1dc48:	 80 00 84 00 88 00 8c 00         ........
   1dc50:	 4b 02 4b 02 57 01 57 01         K.K.W.W.
   1dc58:	 23 00 23 00 1f 00 1f 00         #.#.....
   1dc60:	 df 00 df 00 ab 00 ab 00         ........
   1dc68:	 e7 00 e7 00 23 01 23 01         ....#.#.
   1dc70:	 94 00 98 00 9c 00 a0 00         ........
   1dc78:	 87 02 87 02 1f 01 1f 01         ........
   1dc80:	 5b 01 5b 01 97 01 97 01         [.[.....
   1dc88:	 13 02 13 02 d3 01 d3 01         ........
   1dc90:	 4f 02 4f 02 6f 00 6f 00         O.O.o.o.
   1dc98:	 a8 00 bc 00 d0 00 f4 00         ........
   1dca0:	 ac 00 b0 00 b4 00 b8 00         ........
   1dca8:	 17 02 17 02 27 00 27 00         ....'.'.
   1dcb0:	 63 01 63 01 e9 00 89 02         c.c.....
   1dcb8:	 41 02 ad 00 25 01 99 01         A...%...
   1dcc0:	 71 00 51 02 a1 01 c5 02         q.Q.....
   1dcc8:	 c0 00 c4 00 c8 00 cc 00         ........
   1dcd0:	 65 01 29 01 d5 01 5d 01         e.)...].
   1dcd8:	 c9 02 05 03 b1 00 ed 00         ........
   1dce0:	 8d 02 55 02 d9 01 e1 01         ..U.....
   1dce8:	 2d 01 81 02 9d 01 f1 00         -.......
   1dcf0:	 d4 00 d8 00 dc 00 e0 00         ........
   1dcf8:	 29 00 69 01 91 02 19 02         ).i.....
   1dd00:	 09 03 a5 01 e5 01 d1 02         ........
   1dd08:	 2d 00 59 02 cd 02 95 02         -.Y.....
   1dd10:	 e4 00 e8 00 ec 00 f0 00         ........
   1dd18:	 23 02 23 02 1f 02 1f 02         #.#.....
   1dd20:	 73 01 73 01 0f 03 0f 03         s.s.....
   1dd28:	 6f 01 6f 01 df 01 df 01         o.o.....
   1dd30:	 33 01 33 01 af 01 af 01         3.3.....
   1dd38:	 f8 00 0c 01 20 01 34 01         .... .4.
   1dd40:	 fc 00 00 01 04 01 08 01         ........
   1dd48:	 ab 01 ab 01 13 03 13 03         ........
   1dd50:	 5f 02 5f 02 d7 02 d7 02         _._.....
   1dd58:	 c3 02 c3 02 b3 01 b3 01         ........
   1dd60:	 9b 02 9b 02 33 00 33 00         ....3.3.
   1dd68:	 10 01 14 01 18 01 1c 01         ........
   1dd70:	 eb 01 eb 01 17 03 17 03         ........
   1dd78:	 9f 02 9f 02 27 02 27 02         ....'.'.
   1dd80:	 03 03 03 03 ef 01 ef 01         ........
   1dd88:	 63 02 63 02 67 02 67 02         c.c.g.g.
   1dd90:	 24 01 28 01 2c 01 30 01         $.(.,.0.
   1dd98:	 2b 02 2b 02 df 02 df 02         +.+.....
   1dda0:	 f3 01 f3 01 db 02 db 02         ........
   1dda8:	 e3 02 e3 02 2f 02 2f 02         ...././.
   1ddb0:	 1f 03 1f 03 1b 03 1b 03         ........
   1ddb8:	 38 01 3c 01 40 01 44 01         8.<.@.D.
   1ddc0:	 a1 02 69 02 21 03 a5 02         ..i.!...
   1ddc8:	 e5 02 25 03 e9 02 71 02         ..%...q.
   1ddd0:	 a9 02 6d 02 31 02 ad 02         ..m.1...
   1ddd8:	 b1 02 f1 02 48 01 4c 01         ....H.L.
   1dde0:	 2b 03 2b 03 ef 02 ef 02         +.+.....
   1dde8:	 2f 03 2f 03 33 03 33 03         /./.3.3.


Huffmancb_10:
   1ddf0:	 04 00 0c 00 20 00 4c 00         .... .L.
   1ddf8:	 45 00 85 00 49 00 08 00         E...I...
   1de00:	 8b 00 8b 00 07 00 07 00         ........
   1de08:	 10 00 14 00 18 00 1c 00         ........
   1de10:	 43 00 43 00 c7 00 c7 00         C.C.....
   1de18:	 8f 00 8f 00 4f 00 4f 00         ....O.O.
   1de20:	 cb 00 cb 00 cf 00 cf 00         ........
   1de28:	 09 00 81 00 09 01 91 00         ........
   1de30:	 24 00 28 00 2c 00 38 00         $.(.,.8.
   1de38:	 05 01 51 00 01 00 d1 00         ..Q.....
   1de40:	 0d 01 0d 00 c1 00 11 01         ........
   1de48:	 49 01 95 00 30 00 34 00         I...0.4.
   1de50:	 47 01 47 01 57 00 57 00         G.G.W.W.
   1de58:	 d7 00 d7 00 4f 01 4f 01         ....O.O.
   1de60:	 3c 00 40 00 44 00 48 00         <.@.D.H.
   1de68:	 17 01 17 01 53 01 53 01         ....S.S.
   1de70:	 9b 00 9b 00 8b 01 8b 01         ........
   1de78:	 db 00 db 00 13 00 13 00         ........
   1de80:	 5b 00 5b 00 03 01 03 01         [.[.....
   1de88:	 50 00 64 00 78 00 c0 00         P.d.x...
   1de90:	 54 00 58 00 5c 00 60 00         T.X.\.`.
   1de98:	 87 01 87 01 8f 01 8f 01         ........
   1dea0:	 57 01 57 01 1b 01 1b 01         W.W.....
   1dea8:	 93 01 93 01 59 01 9d 00         ....Y...
   1deb0:	 cd 01 c9 01 95 01 a1 00         ........
   1deb8:	 68 00 6c 00 70 00 74 00         h.l.p.t.
   1dec0:	 dd 00 15 00 5d 00 41 01         ....].A.
   1dec8:	 61 00 c5 01 e1 00 1d 01         a.......
   1ded0:	 d1 01 09 02 99 01 5d 01         ......].
   1ded8:	 05 02 0d 02 21 01 11 02         ....!...
   1dee0:	 7c 00 84 00 98 00 ac 00         |.......
   1dee8:	 d5 01 61 01 15 02 80 00         ..a.....
   1def0:	 9f 01 9f 01 db 01 db 01         ........
   1def8:	 88 00 8c 00 90 00 94 00         ........
   1df00:	 a7 00 a7 00 1b 00 1b 00         ........
   1df08:	 1b 02 1b 02 e7 00 e7 00         ........
   1df10:	 4f 02 4f 02 67 00 67 00         O.O.g.g.
   1df18:	 4b 02 4b 02 83 01 83 01         K.K.....
   1df20:	 9c 00 a0 00 a4 00 a8 00         ........
   1df28:	 a3 01 a3 01 27 01 27 01         ....'.'.
   1df30:	 53 02 53 02 ab 00 ab 00         S.S.....
   1df38:	 47 02 47 02 df 01 df 01         G.G.....
   1df40:	 e3 01 e3 01 67 01 67 01         ....g.g.
   1df48:	 b0 00 b4 00 b8 00 bc 00         ........
   1df50:	 1f 02 1f 02 eb 00 eb 00         ........
   1df58:	 57 02 57 02 2b 01 2b 01         W.W.+.+.
   1df60:	 8b 02 8b 02 6b 00 6b 00         ....k.k.
   1df68:	 8f 02 8f 02 a7 01 a7 01         ........
   1df70:	 c4 00 d8 00 ec 00 00 01         ........
   1df78:	 c8 00 cc 00 d0 00 d4 00         ........
   1df80:	 5b 02 5b 02 23 00 23 00         [.[.#.#.
   1df88:	 93 02 93 02 1f 00 1f 00         ........
   1df90:	 af 00 af 00 5d 02 ed 00         ....]...
   1df98:	 a9 01 85 02 6d 00 e5 01         ....m...
   1dfa0:	 dc 00 e0 00 e4 00 e8 00         ........
   1dfa8:	 c1 01 21 02 69 01 cd 02         ..!.i...
   1dfb0:	 95 02 61 02 6d 01 01 02         ..a.m...
   1dfb8:	 2d 01 c9 02 9d 02 99 02         -.......
   1dfc0:	 e9 01 d1 02 c5 02 b1 00         ........
   1dfc8:	 f0 00 f4 00 f8 00 fc 00         ........
   1dfd0:	 25 02 f1 00 ad 01 d5 02         %.......
   1dfd8:	 31 01 ed 01 71 01 0d 03         1...q...
   1dfe0:	 d9 02 25 00 29 02 29 00         ..%.).).
   1dfe8:	 71 00 41 02 11 03 65 02         q.A...e.
   1dff0:	 04 01 0c 01 20 01 34 01         .... .4.
   1dff8:	 b1 01 09 03 a1 02 08 01         ........
   1e000:	 a7 02 a7 02 07 03 07 03         ........
   1e008:	 10 01 14 01 18 01 1c 01         ........
   1e010:	 2f 02 2f 02 f3 01 f3 01         /./.....
   1e018:	 df 02 df 02 17 03 17 03         ........
   1e020:	 1b 03 1b 03 6b 02 6b 02         ....k.k.
   1e028:	 e3 02 e3 02 33 02 33 02         ....3.3.
   1e030:	 24 01 28 01 2c 01 30 01         $.(.,.0.
   1e038:	 83 02 83 02 1f 03 1f 03         ........
   1e040:	 2f 00 2f 00 ab 02 ab 02         /./.....
   1e048:	 6f 02 6f 02 af 02 af 02         o.o.....
   1e050:	 c3 02 c3 02 ef 02 ef 02         ........
   1e058:	 38 01 3c 01 40 01 44 01         8.<.@.D.
   1e060:	 e7 02 e7 02 eb 02 eb 02         ........
   1e068:	 33 00 33 00 23 03 23 03         3.3.#.#.
   1e070:	 71 02 29 03 25 03 2d 03         q.).%.-.
   1e078:	 f1 02 01 03 b1 02 31 03         ......1.


Huffmancb_11:
   1e080:	 04 00 10 00 38 00 8c 00         ....8...
   1e088:	 01 00 85 00 08 00 0c 00         ........
   1e090:	 43 08 43 08 07 00 07 00         C.C.....
   1e098:	 83 00 83 00 8b 00 8b 00         ........
   1e0a0:	 14 00 18 00 1c 00 24 00         ......$.
   1e0a8:	 07 01 07 01 0b 01 0b 01         ........
   1e0b0:	 85 01 8d 00 0d 01 09 00         ........
   1e0b8:	 89 01 01 01 8d 01 20 00         ...... .
   1e0c0:	 93 00 93 00 07 02 07 02         ........
   1e0c8:	 28 00 2c 00 30 00 34 00         (.,.0.4.
   1e0d0:	 13 01 13 01 0b 02 0b 02         ........
   1e0d8:	 93 01 93 01 0f 02 0f 02         ........
   1e0e0:	 0f 00 0f 00 83 01 83 01         ........
   1e0e8:	 97 00 97 00 17 01 17 01         ........
   1e0f0:	 3c 00 50 00 64 00 78 00         <.P.d.x.
   1e0f8:	 40 00 44 00 48 00 4c 00         @.D.H.L.
   1e100:	 8b 02 8b 02 13 02 13 02         ........
   1e108:	 87 02 87 02 97 01 97 01         ........
   1e110:	 8f 02 8f 02 17 02 17 02         ........
   1e118:	 91 02 19 01 09 03 99 00         ........
   1e120:	 54 00 58 00 5c 00 60 00         T.X.\.`.
   1e128:	 99 01 0d 03 05 03 11 08         ........
   1e130:	 0d 08 c1 02 c1 01 41 02         ......A.
   1e138:	 19 02 41 03 11 00 11 03         ..A.....
   1e140:	 01 02 09 08 95 02 15 08         ........
   1e148:	 68 00 6c 00 70 00 74 00         h.l.p.t.
   1e150:	 c1 03 41 01 41 04 89 03         ..A.A...
   1e158:	 1d 01 8d 03 99 02 15 03         ........
   1e160:	 19 08 41 05 9d 01 9d 00         ..A.....
   1e168:	 c1 04 1d 08 05 08 85 03         ........
   1e170:	 7c 00 80 00 84 00 88 00         |.......
   1e178:	 91 03 c1 05 1d 02 41 06         ......A.
   1e180:	 21 08 c1 00 19 03 25 08         !.....%.
   1e188:	 09 04 95 03 29 08 c1 06         ....)...
   1e190:	 a1 01 21 01 0d 04 15 00         ..!.....
   1e198:	 90 00 c8 00 1c 01 70 01         ......p.
   1e1a0:	 94 00 98 00 a0 00 b4 00         ........
   1e1a8:	 41 07 2d 08 9d 02 11 04         A.-.....
   1e1b0:	 99 03 1d 03 81 02 9c 00         ........
   1e1b8:	 23 02 23 02 c3 07 c3 07         #.#.....
   1e1c0:	 a4 00 a8 00 ac 00 b0 00         ........
   1e1c8:	 33 08 33 08 07 04 07 04         3.3.....
   1e1d0:	 a3 00 a3 00 3b 08 3b 08         ....;.;.
   1e1d8:	 17 04 17 04 37 08 37 08         ....7.7.
   1e1e0:	 8f 04 8f 04 a3 02 a3 02         ........
   1e1e8:	 b8 00 bc 00 c0 00 c4 00         ........
   1e1f0:	 9f 03 9f 03 8b 04 8b 04         ........
   1e1f8:	 23 03 23 03 27 01 27 01         #.#.'.'.
   1e200:	 a7 01 a7 01 3f 08 3f 08         ....?.?.
   1e208:	 93 04 93 04 1b 04 1b 04         ........
   1e210:	 cc 00 e0 00 f4 00 08 01         ........
   1e218:	 d0 00 d4 00 d8 00 dc 00         ........
   1e220:	 1b 00 1b 00 27 02 27 02         ....'.'.
   1e228:	 97 04 97 04 a3 03 a3 03         ........
   1e230:	 1f 04 1f 04 87 04 87 04         ........
   1e238:	 ab 01 ab 01 03 03 03 03         ........
   1e240:	 e4 00 e8 00 ec 00 f0 00         ........
   1e248:	 2b 01 2b 01 a7 00 a7 00         +.+.....
   1e250:	 a7 02 a7 02 13 05 13 05         ........
   1e258:	 0b 05 0b 05 27 03 27 03         ....'.'.
   1e260:	 0f 05 0f 05 9b 04 9b 04         ........
   1e268:	 f8 00 fc 00 00 01 04 01         ........
   1e270:	 2b 02 2b 02 23 04 23 04         +.+.#.#.
   1e278:	 ab 02 ab 02 a7 03 a7 03         ........
   1e280:	 af 01 af 01 07 05 07 05         ........
   1e288:	 1f 00 1f 00 2b 03 2b 03         ....+.+.
   1e290:	 0c 01 10 01 14 01 18 01         ........
   1e298:	 9f 04 9f 04 8f 05 8f 05         ........
   1e2a0:	 17 05 17 05 ab 00 ab 00         ........
   1e2a8:	 93 05 93 05 2f 01 2f 01         ...././.
   1e2b0:	 37 01 37 01 1b 05 1b 05         7.7.....
   1e2b8:	 20 01 34 01 48 01 5c 01          .4.H.\.
   1e2c0:	 24 01 28 01 2c 01 30 01         $.(.,.0.
   1e2c8:	 b7 01 b7 01 8b 05 8b 05         ........
   1e2d0:	 43 00 43 00 97 05 97 05         C.C.....
   1e2d8:	 af 02 af 02 2d 02 25 04         ....-.%.
   1e2e0:	 1d 05 a1 04 01 08 91 06         ........
   1e2e8:	 38 01 3c 01 40 01 44 01         8.<.@.D.
   1e2f0:	 81 03 8d 06 2d 03 b5 00         ....-...
   1e2f8:	 35 02 b1 01 89 06 b5 02         5.......
   1e300:	 21 05 99 05 29 04 a9 03         !...)...
   1e308:	 39 01 31 02 85 05 11 06         9.1.....
   1e310:	 4c 01 50 01 54 01 58 01         L.P.T.X.
   1e318:	 ad 00 0d 06 85 06 31 01         ......1.
   1e320:	 9d 05 0d 07 15 06 95 06         ........
   1e328:	 39 02 11 07 ad 03 b9 01         9.......
   1e330:	 b1 02 35 03 31 03 21 00         ..5.1.!.
   1e338:	 60 01 64 01 68 01 6c 01         `.d.h.l.
   1e340:	 2d 04 09 06 a5 04 b9 02         -.......
   1e348:	 99 06 29 05 3d 01 a1 05         ..).=...
   1e350:	 25 05 39 03 a9 04 15 07         %.9.....
   1e358:	 ad 04 b9 00 09 07 19 06         ........
   1e360:	 74 01 88 01 9c 01 cc 01         t.......
   1e368:	 78 01 7c 01 80 01 84 01         x.|.....
   1e370:	 05 06 35 04 01 04 b5 03         ..5.....
   1e378:	 1d 06 b1 03 9d 06 bd 01         ........
   1e380:	 b1 00 19 07 89 07 bd 02         ........
   1e388:	 3d 02 05 07 a5 05 91 07         =.......
   1e390:	 8c 01 90 01 94 01 98 01         ........
   1e398:	 b9 03 a1 06 b5 04 21 06         ......!.
   1e3a0:	 95 07 8d 07 a9 05 2d 05         ......-.
   1e3a8:	 31 04 3d 03 bd 03 21 07         1.=...!.
   1e3b0:	 bd 00 1d 07 25 00 81 04         ....%...
   1e3b8:	 a0 01 a4 01 a8 01 b8 01         ........
   1e3c0:	 a5 06 25 06 b1 04 39 04         ..%...9.
   1e3c8:	 a9 06 b9 04 31 05 99 07         ....1...
   1e3d0:	 9d 07 ac 01 b0 01 b4 01         ........
   1e3d8:	 27 07 27 07 3f 04 3f 04         '.'.?.?.
   1e3e0:	 af 05 af 05 2f 07 2f 07         ...././.
   1e3e8:	 87 07 87 07 2b 06 2b 06         ....+.+.
   1e3f0:	 bc 01 c0 01 c4 01 c8 01         ........
   1e3f8:	 2b 07 2b 07 b7 05 b7 05         +.+.....
   1e400:	 37 05 37 05 af 06 af 06         7.7.....
   1e408:	 2f 06 2f 06 a3 07 a3 07         /./.....
   1e410:	 bb 05 bb 05 37 06 37 06         ....7.7.
   1e418:	 d0 01 e4 01 f8 01 0c 02         ........
   1e420:	 d4 01 d8 01 dc 01 e0 01         ........
   1e428:	 b3 06 b3 06 bf 04 bf 04         ........
   1e430:	 3b 05 3b 05 2b 00 2b 00         ;.;.+.+.
   1e438:	 b3 05 b3 05 a7 07 a7 07         ........
   1e440:	 03 05 03 05 33 06 33 06         ....3.3.
   1e448:	 e8 01 ec 01 f0 01 f4 01         ........
   1e450:	 2f 00 2f 00 33 07 33 07         /./.3.3.
   1e458:	 ab 07 ab 07 b7 06 b7 06         ........
   1e460:	 83 06 83 06 3b 06 3b 06         ....;.;.
   1e468:	 3f 05 3f 05 bf 05 bf 05         ?.?.....
   1e470:	 fc 01 00 02 04 02 08 02         ........
   1e478:	 af 07 af 07 bb 06 bb 06         ........
   1e480:	 37 00 37 00 83 05 83 05         7.7.....
   1e488:	 37 07 37 07 3f 06 3f 06         7.7.?.?.
   1e490:	 bf 06 bf 06 b3 07 b3 07         ........
   1e498:	 10 02 14 02 18 02 1c 02         ........
   1e4a0:	 3b 00 3b 00 3b 07 3b 07         ;.;.;.;.
   1e4a8:	 b7 07 b7 07 33 00 33 00         ....3.3.
   1e4b0:	 bb 07 bb 07 01 07 01 06         ........
   1e4b8:	 3d 07 3d 00 81 07 bd 07         =.=.....
   1e4c0:	 18 01 17 01 00 01 09 01         ........
   1e4c8:	 a5 05 a1 05 b7 05 13 05         ........
   1e4d0:	 f9 08 ff 08 21 08 ff 08         ....!...
   1e4d8:	 4f 08 ff 08 bc 08 ff 08         O.......
   1e4e0:	 15 08 ff 08 37 08 ff 08         ....7...
   1e4e8:	 0d 08 ff 08 5f 08 ff 08         ...._...
   1e4f0:	 4a 08 ff 08 7d 08 ff 08         J...}...
   1e4f8:	 ff 08 ff 08 a8 08 ff 08         ........
   1e500:	 15 08 ff 08 3f 08 ff 08         ....?...
   1e508:	 30 08 ff 08 94 08 ff 08         0.......
   1e510:	 d4 08 ff 08 25 08 ff 08         ....%...
   1e518:	 ef 08 ff 08 3f 08 ff 08         ....?...
   1e520:	 09 08 ff 08 fc 08 ff 08         ........
   1e528:	 42 08 ff 08 b3 08 ff 08         B.......
   1e530:	 0d 07 a9 07 0e 06 e2 06         ........
   1e538:	 c7 06 d0 06 b2 04 07 04         ........


AACcodeBookDTable:
   1e540:	 00 00 00 00 00 00 00 00         ........
   1e548:	 a0 d1 01 00 04 02 01 00         ........
   1e550:	 38 d3 01 00 04 02 01 00         8.......
   1e558:	 70 d4 01 00 04 02 00 00         p.......
   1e560:	 a8 d5 01 00 04 02 00 00         ........
   1e568:	 d8 d6 01 00 02 04 04 00         ........
   1e570:	 20 d8 01 00 02 04 04 00          .......
   1e578:	 60 d9 01 00 02 04 00 00         `.......
   1e580:	 58 da 01 00 02 04 00 00         X.......
   1e588:	 50 db 01 00 02 04 00 00         P.......
   1e590:	 f0 dd 01 00 02 04 00 00         ........
   1e598:	 80 e0 01 00 02 05 00 00         ........
   1e5a0:	 34 c6 01 00 01 08 3c 00         4.....<.


tns_decode_coef.tns_coef_seek:
   1e5a8:	 48 d0 01 00 08 d0 01 00         H.......
   1e5b0:	 c8 d0 01 00 88 d0 01 00         ........


silk_NLSF_CB_WB:
   1e5b8:	 20 00 10 00 66 26 ab 01          ...f&..
   1e5c0:	 dc e5 01 00 dc e7 01 00         ........
   1e5c8:	 1c e8 01 00 3a e8 01 00         ....:...
   1e5d0:	 3a e9 01 00 82 e9 01 00         :.......
   1e5d8:	 ca e9 01 00                     ....


silk_NLSF_CB1_WB_Q8:
   1e5dc:	 07 17 26 36 45 55 64 74         ..&6EUdt
   1e5e4:	 83 93 a2 b2 c1 d0 df ef         ........
   1e5ec:	 0d 19 29 37 45 53 62 70         ..)7ESbp
   1e5f4:	 7f 8e 9d ab bb cb dc ec         ........
   1e5fc:	 0f 15 22 33 3d 4e 5c 6a         .."3=N\j
   1e604:	 7e 88 98 a7 b9 cd e1 f0         ~.......
   1e60c:	 0a 15 24 32 3f 4f 5f 6e         ..$2?O_n
   1e614:	 7e 8d 9d ad bd cd dd ed         ~.......
   1e61c:	 11 14 25 33 3b 4e 59 6b         ..%3;NYk
   1e624:	 7b 86 96 a4 b8 cd e0 f0         {.......
   1e62c:	 0a 0f 20 33 43 51 60 70         .. 3CQ`p
   1e634:	 81 8e 9e ad bd cc dc ec         ........
   1e63c:	 08 15 25 33 41 4f 62 71         ..%3AObq
   1e644:	 7e 8a 9b a8 b3 c0 d1 da         ~.......
   1e64c:	 0c 0f 22 37 3f 4e 57 6c         .."7?NWl
   1e654:	 76 83 94 a7 b9 cb db ec         v.......
   1e65c:	 10 13 20 24 38 4f 5b 6c         .. $8O[l
   1e664:	 76 88 9a ab ba cc dc ed         v.......
   1e66c:	 0b 1c 2b 3a 4a 59 69 78         ..+:JYix
   1e674:	 87 96 a5 b4 c4 d3 e2 f1         ........
   1e67c:	 06 10 21 2e 3c 4b 5c 6b         ..!.<K\k
   1e684:	 7b 89 9c a9 b9 c7 d6 e1         {.......
   1e68c:	 0b 13 1e 2c 39 4a 59 69         ...,9JYi
   1e694:	 79 87 98 a9 ba ca da ea         y.......
   1e69c:	 0c 13 1d 2e 39 47 58 64         ....9GXd
   1e6a4:	 78 84 94 a5 b6 c7 d8 e9         x.......
   1e6ac:	 11 17 23 2e 38 4d 5c 6a         ..#.8M\j
   1e6b4:	 7b 86 98 a7 b9 cc de ed         {.......
   1e6bc:	 0e 11 2d 35 3f 4b 59 6b         ..-5?KYk
   1e6c4:	 73 84 97 ab bc ce dd f0         s.......
   1e6cc:	 09 10 1d 28 38 47 58 67         ...(8GXg
   1e6d4:	 77 89 9a ab bd cd de ed         w.......
   1e6dc:	 10 13 24 30 39 4c 57 69         ..$09LWi
   1e6e4:	 76 84 96 a7 b9 ca da ec         v.......
   1e6ec:	 0c 11 1d 36 47 51 5e 68         ...6GQ^h
   1e6f4:	 7e 88 95 a4 b6 c9 dd ed         ~.......
   1e6fc:	 0f 1c 2f 3e 4f 61 73 81         ../>Oas.
   1e704:	 8e 9b a8 b4 c2 d0 df ee         ........
   1e70c:	 08 0e 1e 2d 3e 4e 5e 6f         ...->N^o
   1e714:	 7f 8f 9f af c0 cf df ef         ........
   1e71c:	 11 1e 31 3e 4f 5c 6b 77         ..1>O\kw
   1e724:	 84 91 a0 ae be cc dc eb         ........
   1e72c:	 0e 13 24 2d 3d 4c 5b 6c         ..$-=L[l
   1e734:	 79 8a 9a ac bd cd de ee         y.......
   1e73c:	 0c 12 1f 2d 3c 4c 5b 6b         ...-<L[k
   1e744:	 7b 8a 9a ab bb cc dd ec         {.......
   1e74c:	 0d 11 1f 2b 35 46 53 67         ...+5FSg
   1e754:	 72 83 95 a7 b9 cb dc ed         r.......
   1e75c:	 11 16 23 2a 3a 4e 5d 6e         ..#*:N]n
   1e764:	 7d 8b 9b aa bc ce e0 f0         }.......
   1e76c:	 08 0f 22 32 43 53 63 73         .."2CScs
   1e774:	 83 92 a2 b2 c1 d1 e0 ef         ........
   1e77c:	 0d 10 29 42 49 56 5f 6f         ..)BIV_o
   1e784:	 80 89 96 a3 b7 ce e1 f1         ........
   1e78c:	 11 19 25 34 3f 4b 5c 66         ..%4?K\f
   1e794:	 77 84 90 a0 af bf d4 e7         w.......
   1e79c:	 13 1f 31 41 53 64 75 85         ..1ASdu.
   1e7a4:	 93 a1 ae bb c8 d5 e3 f2         ........
   1e7ac:	 12 1f 34 44 58 67 75 7e         ..4DXgu~
   1e7b4:	 8a 95 a3 b1 c0 cf df ef         ........
   1e7bc:	 10 1d 2f 3d 4c 5a 6a 77         ../=LZjw
   1e7c4:	 85 93 a1 b0 c1 d1 e0 f0         ........
   1e7cc:	 0f 15 23 32 3d 49 56 61         ..#2=IVa
   1e7d4:	 6e 77 81 8d af c6 da ed         nw......


silk_NLSF_CB1_iCDF_WB:
   1e7dc:	 e1 cc c9 b8 b7 af 9e 9a         ........
   1e7e4:	 99 87 77 73 71 6e 6d 63         ..wsqnmc
   1e7ec:	 62 5f 4f 44 34 32 30 2d         b_OD420-
   1e7f4:	 2b 20 1f 1b 12 0a 03 00         + ......
   1e7fc:	 ff fb eb e6 d4 c9 c4 b6         ........
   1e804:	 a7 a6 a3 97 8a 7c 6e 68         .....|nh
   1e80c:	 5a 4e 4c 46 45 39 2d 22         ZNLFE9-"
   1e814:	 18 15 0b 06 05 04 03 00         ........


silk_NLSF_PRED_WB_Q8.261:
   1e81c:	 af 94 a0 b0 b2 ad ae a4         ........
   1e824:	 b1 ae c4 b6 c6 c0 b6 44         .......D
   1e82c:	 3e 42 3c 48 75 55 5a 76         >B<HuUZv
   1e834:	 88 97 8e a0 8e 9b               ......


silk_NLSF_CB2_SELECT_WB.262:
   1e83a:	 00 00 00 00 00 00 00 01         ........
   1e842:	 64 66 66 44 44 24 22 60         dffDD$"`
   1e84a:	 a4 6b 9e b9 b4 b9 8b 66         .k.....f
   1e852:	 40 42 24 22 22 00 01 20         @B$"".. 
   1e85a:	 d0 8b 8d bf 98 b9 9b 68         .......h
   1e862:	 60 ab 68 a6 66 66 66 84         `.h.fff.
   1e86a:	 01 00 00 00 00 10 10 00         ........
   1e872:	 50 6d 4e 6b b9 8b 67 65         PmNk..ge
   1e87a:	 d0 d4 8d 8b ad 99 7b 67         ......{g
   1e882:	 24 00 00 00 00 00 00 01         $.......
   1e88a:	 30 00 00 00 00 00 00 20         0...... 
   1e892:	 44 87 7b 77 77 67 45 62         D.{wwgEb
   1e89a:	 44 67 78 76 76 66 47 62         DgxvvfGb
   1e8a2:	 86 88 9d b8 b6 99 8b 86         ........
   1e8aa:	 d0 a8 f8 4b bd 8f 79 6b         ...K..yk
   1e8b2:	 20 31 22 22 22 00 11 02          1"""...
   1e8ba:	 d2 eb 8b 7b b9 89 69 86         ...{..i.
   1e8c2:	 62 87 68 b6 64 b7 ab 86         b.h.d...
   1e8ca:	 64 46 44 46 42 42 22 83         dFDFBB".
   1e8d2:	 40 a6 66 44 24 02 01 00         @.fD$...
   1e8da:	 86 a6 66 44 22 22 42 84         ..fD""B.
   1e8e2:	 d4 f6 9e 8b 6b 6b 57 66         ....kkWf
   1e8ea:	 64 db 7d 7a 89 76 67 84         d.}z.vg.
   1e8f2:	 72 87 89 69 ab 6a 32 22         r..i.j2"
   1e8fa:	 a4 d6 8d 8f b9 97 79 67         ......yg
   1e902:	 c0 22 00 00 00 00 00 01         ."......
   1e90a:	 d0 6d 4a bb 86 f9 9f 89         .mJ.....
   1e912:	 66 6e 9a 76 57 65 77 65         fn.vWewe
   1e91a:	 00 02 00 24 24 42 44 23         ...$$BD#
   1e922:	 60 a4 66 64 24 00 02 21         `.fd$..!
   1e92a:	 a7 8a ae 66 64 54 02 02         ...fdT..
   1e932:	 64 6b 78 77 24 c5 18 00         dkxw$...


silk_NLSF_CB2_iCDF_WB:
   1e93a:	 ff fe fd f4 0c 03 02 01         ........
   1e942:	 00 ff fe fc e0 26 03 02         .....&..
   1e94a:	 01 00 ff fe fb d1 39 04         ......9.
   1e952:	 02 01 00 ff fe f4 c3 45         .......E
   1e95a:	 04 02 01 00 ff fb e8 b8         ........
   1e962:	 54 07 02 01 00 ff fe f0         T.......
   1e96a:	 ba 56 0e 02 01 00 ff fe         .V......
   1e972:	 ef b2 5b 1e 05 01 00 ff         ..[.....
   1e97a:	 f8 e3 b1 64 13 02 01 00         ...d....


silk_NLSF_CB2_BITS_WB_Q5.263:
   1e982:	 ff ff ff 9c 04 9a ff ff         ........
   1e98a:	 ff ff ff e3 66 0f 5c ff         ....f.\.
   1e992:	 ff ff ff ff d5 53 18 48         .....S.H
   1e99a:	 ec ff ff ff ff 96 4c 21         ......L!
   1e9a2:	 3f d6 ff ff ff be 79 4d         ?.....yM
   1e9aa:	 2b 37 b9 ff ff ff f5 89         +7......
   1e9b2:	 47 2b 3b 8b ff ff ff ff         G+;.....
   1e9ba:	 83 42 32 42 6b c2 ff ff         .B2Bk...
   1e9c2:	 a6 74 4c 37 35 7d ff ff         .tL75}..


silk_NLSF_DELTA_MIN_WB_Q15.264:
   1e9ca:	 64 00 03 00 28 00 03 00         d...(...
   1e9d2:	 03 00 03 00 05 00 0e 00         ........
   1e9da:	 0e 00 0a 00 0b 00 03 00         ........
   1e9e2:	 08 00 09 00 07 00 03 00         ........
   1e9ea:	 5b 01                           [.


silk_LTP_gain_iCDF_0:
   1e9ec:	 47 38 2b 1e 15 0c 06 00         G8+.....


silk_LTP_gain_iCDF_1:
   1e9f4:	 c7 a5 90 7c 6d 60 54 47         ...|m`TG
   1e9fc:	 3d 33 2a 20 17 0f 08 00         =3* ....


silk_LTP_gain_iCDF_2:
   1ea04:	 f1 e1 d3 c7 bb af a4 99         ........
   1ea0c:	 8e 84 7b 72 69 60 58 50         ..{ri`XP
   1ea14:	 48 40 39 32 2c 26 21 1d         H@92,&!.
   1ea1c:	 18 14 10 0c 09 05 02 00         ........


silk_LTP_gain_BITS_Q5_0:
   1ea24:	 0f 83 8a 8a 9b 9b ad ad         ........


silk_LTP_gain_BITS_Q5_1:
   1ea2c:	 45 5d 73 76 83 8a 8d 8a         E]sv....
   1ea34:	 96 96 9b 96 9b a0 a6 a0         ........


silk_LTP_gain_BITS_Q5_2:
   1ea3c:	 83 80 86 8d 8d 8d 91 91         ........
   1ea44:	 91 96 9b 9b 9b 9b a0 a0         ........
   1ea4c:	 a0 a0 a6 a6 ad ad b6 c0         ........
   1ea54:	 b6 c0 c0 c0 cd c0 cd e0         ........


silk_LTP_vq_ptrs_Q7:
   1ea5c:	 68 ea 01 00 90 ea 01 00         h.......
   1ea64:	 e0 ea 01 00                     ....


silk_LTP_gain_vq_0:
   1ea68:	 04 06 18 07 05 00 00 02         ........
   1ea70:	 00 00 0c 1c 29 0d fc f7         ....)...
   1ea78:	 0f 2a 19 0e 01 fe 3e 29         .*....>)
   1ea80:	 f7 f6 25 41 fc 03 fa 04         ..%A....
   1ea88:	 42 07 f8 10 0e 26 fd 21         B....&.!


silk_LTP_gain_vq_1:
   1ea90:	 0d 16 27 17 0c ff 24 40         ..'...$@
   1ea98:	 1b fa f9 0a 37 2b 11 01         ....7+..
   1eaa0:	 01 08 01 01 06 f5 4a 35         ......J5
   1eaa8:	 f7 f4 37 4c f4 08 fd 03         ..7L....
   1eab0:	 5d 1b fc 1a 27 3b 03 f8         ]...';..
   1eab8:	 02 00 4d 0b 09 f8 16 2c         ..M....,
   1eac0:	 fa 07 28 09 1a 03 09 f9         ..(.....
   1eac8:	 14 65 f9 04 03 f8 2a 1a         .e....*.
   1ead0:	 00 f1 21 44 02 17 fe 37         ..!D...7
   1ead8:	 2e fe 0f 03 ff 15 10 29         .......)


silk_LTP_gain_vq_2:
   1eae0:	 fa 1b 3d 27 05 f5 2a 58         ..='..*X
   1eae8:	 04 01 fe 3c 41 06 fc ff         ...<A...
   1eaf0:	 fb 49 38 01 f7 13 5e 1d         .I8...^.
   1eaf8:	 f7 00 0c 63 06 04 08 ed         ...c....
   1eb00:	 66 2e f3 03 02 0d 03 02         f.......
   1eb08:	 09 eb 54 48 ee f5 2e 68         ..TH...h
   1eb10:	 ea 08 12 26 30 17 00 f0         ...&0...
   1eb18:	 46 53 eb 0b 05 f5 75 16         FS....u.
   1eb20:	 f8 fa 17 75 f4 03 03 f8         ...u....
   1eb28:	 5f 1c 04 f6 0f 4d 3c f1         _....M<.
   1eb30:	 ff 04 7c 02 fc 03 26 54         ..|...&T
   1eb38:	 18 e7 02 0d 2a 0d 1f 15         ....*...
   1eb40:	 fc 38 2e ff ff 23 4f f3         .8...#O.
   1eb48:	 13 f9 41 58 f7 f2 14 04         ..AX....
   1eb50:	 51 31 e3 14 00 4b 03 ef         Q1...K..
   1eb58:	 05 f7 2c 5c f8 01 fd 16         ..,\....
   1eb60:	 45 1f fa 5f 29 f4 05 27         E.._)..'
   1eb68:	 43 10 fc 01 00 fa 78 37         C.....x7
   1eb70:	 dc f3 2c 7a 04 e8 51 05         ..,z..Q.
   1eb78:	 0b 03 07 02 00 09 0a 58         .......X


silk_LTP_gain_vq_0_gain:
   1eb80:	 2e 02 5a 57 5d 5b 52 62         ..ZW][Rb


silk_LTP_gain_vq_1_gain:
   1eb88:	 6d 78 76 0c 71 73 75 77         mxv.qsuw
   1eb90:	 63 3b 57 6f 3f 6f 70 50         c;Wo?opP


silk_LTP_gain_vq_2_gain:
   1eb98:	 7e 7c 7d 7c 81 79 7e 17         ~|}|.y~.
   1eba0:	 84 7f 7f 7f 7e 7f 7a 85         ....~.z.
   1eba8:	 82 86 65 76 77 91 7e 56         ..evw.~V
   1ebb0:	 7c 78 7b 77 aa ad 6b 6d         |x{w..km


opus_enc_opst:
   1ebb8:	 34 13 01 00 3a 13 01 00         4...:...
   1ebc0:	 66 75 01 00                     fu..


silk_shell_code_table_offsets:
   1ebc4:	 00 00 02 05 09 0e 14 1b         ........
   1ebcc:	 23 2c 36 41 4d 5a 68 77         #,6AMZhw
   1ebd4:	 87 00 00 00 00 00 00 00         ........
   1ebdc:	 00 00 00 00                     ....


silk_lsb_iCDF:
   1ebe0:	 78 00                           x.


silk_type_offset_no_VAD_iCDF:
   1ebe2:	 e6 00                           ..


silk_LTP_per_index_iCDF:
   1ebe4:	 b3 63 00                        .c.


silk_LTP_vq_sizes:
   1ebe7:	 08 10 20                        .. 


silk_nb_cbk_searchs_stage3:
   1ebea:	 10 18 22                        .."


silk_LTPscale_iCDF:
   1ebed:	 80 40 00 73 79 73 00 6f         .@.sys.o
   1ebf5:	 73 63 00                        sc.


silk_VAD_GetSA_Q8_c.sub_frameLen_tab:
   1ebf8:	 05 05 0a 14                     ....


silk_type_offset_VAD_iCDF:
   1ebfc:	 e8 9e 0a 00                     ....


silk_uniform4_iCDF:
   1ec00:	 c0 80 40 00                     ..@.


ack_cmd:
   1ec04:	 55 aa 01 20 22 75 61 72         U.. "uar
   1ec0c:	 74 00                           t.


silk_NLSF_interpolation_factor_iCDF:
   1ec0e:	 f3 dd c0 b5 00 00               ......


silk_LTPScales_table_Q14:
   1ec14:	 cd 3c 00 30 00 20               .<.0. 


silk_NLSF_EXT_iCDF:
   1ec1a:	 64 28 10 07 03 01 00            d(.....


silk_uniform8_iCDF:
   1ec21:	 e0 c0 a0 80 60 40 20 00         ....`@ .
   1ec29:	 43 4f 4e 30 3a 25 78 0a         CON0:%x.
   1ec31:	 00 43 4f 44 45 3a 25 78         .CODE:%x
   1ec39:	 0a 00 51 55 43 4e 54 3a         ..QUCNT:
   1ec41:	 25 78 0a 00                     %x..


silk_NLSF2A.ordering10:
   1ec45:	 00 09 06 03 04 05 08 01         ........
   1ec4d:	 02 07 00                        ...


silk_LTP_gain_iCDF_ptrs:
   1ec50:	 ec e9 01 00 f4 e9 01 00         ........
   1ec58:	 04 ea 01 00                     ....


silk_LTP_gain_BITS_Q5_ptrs:
   1ec5c:	 24 ea 01 00 2c ea 01 00         $...,...
   1ec64:	 3c ea 01 00                     <...


silk_LTP_vq_gain_ptrs_Q7:
   1ec68:	 80 eb 01 00 88 eb 01 00         ........
   1ec70:	 98 eb 01 00 73 66 63 20         ....sfc 
   1ec78:	 70 6f 72 74 20 41 20 0d         port A .
   1ec80:	 00 73 66 63 20 70 6f 72         .sfc por
   1ec88:	 74 20 42 20 0d 00 00 00         t B ....


spi_flash_io_nor:
   1ec90:	 10 fc 19 00 00 00 00 00         ........
   1ec98:	 00 00 00 00 dc c7 00 00         ........


nor_flash_boot_table:
   1eca0:	 00 10 00 00 00 00 01 00         ........
   1eca8:	 00 00 02 00 00 00 04 00         ........


tiltWeights:
   1ecb0:	 30 75 00 00 70 17 00 00         0u..p...
   1ecb8:	 20 d1 ff ff 20 d1 ff ff          ... ...


silk_SNR_table_Q1:
   1ecc0:	 12 00 1d 00 26 00 28 00         ....&.(.
   1ecc8:	 2e 00 34 00 3e 00 54 00         ..4.>.T.


silk_NLSF2A.ordering16:
   1ecd0:	 00 0f 08 07 04 0b 0c 03         ........
   1ecd8:	 02 0d 0a 05 06 09 0e 01         ........


silk_rate_levels_iCDF:
   1ece0:	 f1 be b2 84 57 4a 29 0e         ....WJ).
   1ece8:	 00 df c1 9d 8c 6a 39 27         .....j9'
   1ecf0:	 12 00                           ..


silk_rate_levels_BITS_Q5:
   1ecf2:	 83 4a 8d 4f 50 8a 5f 68         .J.OP._h
   1ecfa:	 86 5f 63 5b 7d 5d 4c 7b         ._c[}]L{
   1ed02:	 73 7b                           s{


silk_Lag_range_stage3:
   1ed04:	 fb 08 ff 06 ff 06 fc 0a         ........
   1ed0c:	 fa 0a fe 06 ff 06 fb 0a         ........
   1ed14:	 f7 0c fd 07 fe 07 f9 0d         ........


silk_gain_iCDF:
   1ed1c:	 e0 70 2c 0f 03 02 01 00         .p,.....
   1ed24:	 fe ed c0 84 46 17 04 00         ....F...
   1ed2c:	 ff fc e2 9b 3d 0b 02 00         ....=...


sigm_LUT_neg_Q15:
   1ed34:	 00 40 00 00 6c 22 00 00         .@..l"..
   1ed3c:	 42 0f 00 00 12 06 00 00         B.......
   1ed44:	 4d 02 00 00 db 00 00 00         M.......


sigm_LUT_slope_Q10:
   1ed4c:	 ed 00 00 00 99 00 00 00         ........
   1ed54:	 49 00 00 00 1e 00 00 00         I.......
   1ed5c:	 0c 00 00 00 07 00 00 00         ........


sigm_LUT_pos_Q15:
   1ed64:	 00 40 00 00 93 5d 00 00         .@...]..
   1ed6c:	 bd 70 00 00 ed 79 00 00         .p...y..
   1ed74:	 b2 7d 00 00 24 7f 00 00         .}..$...


silk_pitch_lag_iCDF:
   1ed7c:	 fd fa f4 e9 d4 b6 96 83         ........
   1ed84:	 78 6e 62 55 48 3c 31 28         xnbUH<1(
   1ed8c:	 20 19 13 0f 0d 0b 09 08          .......
   1ed94:	 07 06 05 04 03 02 01 00         ........


silk_TargetRate_table_WB:
   1ed9c:	 00 00 00 00 04 29 00 00         .....)..
   1eda4:	 b0 36 00 00 68 42 00 00         .6..hB..
   1edac:	 fc 53 00 00 54 6f 00 00         .S..To..
   1edb4:	 10 a4 00 00 80 38 01 00         .....8..


silk_pitch_contour_iCDF:
   1edbc:	 df c9 b7 a7 98 8a 7c 6f         ......|o
   1edc4:	 62 58 4f 46 3e 38 32 2c         bXOF>82,
   1edcc:	 27 23 1f 1b 18 15 12 10         '#......
   1edd4:	 0e 0c 0a 08 06 04 03 02         ........
   1eddc:	 01 00                           ..


silk_delta_gain_iCDF:
   1edde:	 fa f5 ea cb 47 32 2a 26         ....G2*&
   1ede6:	 23 21 1f 1d 1c 1b 1a 19         #!......
   1edee:	 18 17 16 15 14 13 12 11         ........
   1edf6:	 10 0f 0e 0d 0c 0b 0a 09         ........
   1edfe:	 08 07 06 05 04 03 02 01         ........
   1ee06:	 00                              .


silk_sign_iCDF:
   1ee07:	 fe 31 43 4d 52 5d 63 c6         .1CMR]c.
   1ee0f:	 0b 12 18 1f 24 2d ff 2e         ....$-..
   1ee17:	 42 4e 57 5e 68 d0 0e 15         BNW^h...
   1ee1f:	 20 2a 33 42 ff 5e 68 6d          *3B.^hm
   1ee27:	 70 73 76 f8 35 45 50 58         psv.5EPX
   1ee2f:	 5f 66                           _f


silk_CB_lags_stage2:
   1ee31:	 00 02 ff ff ff 00 00 01         ........
   1ee39:	 01 00 01 00 01 00 00 00         ........
   1ee41:	 00 00 01 00 00 00 00 00         ........
   1ee49:	 01 00 00 00 01 00 00 00         ........
   1ee51:	 00 00 ff 02 01 00 01 01         ........
   1ee59:	 00 00 ff ff 00 00 00            .......


out01_Q10_table:
   1ee60:	 0f fa ff ff a8 fa ff ff         ........
   1ee68:	 42 fb ff ff dc fb ff ff         B.......
   1ee70:	 75 fc ff ff 0f fd ff ff         u.......
   1ee78:	 a8 fd ff ff 42 fe ff ff         ....B...
   1ee80:	 dc fe ff ff 75 ff ff ff         ....u...
   1ee88:	 00 00 00 00 8a 00 00 00         ........
   1ee90:	 23 01 00 00 bd 01 00 00         #.......
   1ee98:	 57 02 00 00 f0 02 00 00         W.......
   1eea0:	 8a 03 00 00 23 04 00 00         ....#...
   1eea8:	 bd 04 00 00 57 05 00 00         ....W...
   1eeb0:	 f0 05 00 00                     ....


silk_CB_lags_stage3:
   1eeb4:	 00 00 01 ff 00 01 ff 00         ........
   1eebc:	 ff 01 fe 02 fe fe 02 fd         ........
   1eec4:	 02 03 fd fc 03 fc 04 04         ........
   1eecc:	 fb 05 fa fb 06 f9 06 05         ........
   1eed4:	 08 f7 00 00 01 00 00 00         ........
   1eedc:	 00 00 00 00 ff 01 00 00         ........
   1eee4:	 01 ff 00 01 ff ff 01 ff         ........
   1eeec:	 02 01 ff 02 fe fe 02 fe         ........
   1eef4:	 02 02 03 fd 00 01 00 00         ........
   1eefc:	 00 00 00 00 01 00 01 00         ........
   1ef04:	 00 01 ff 01 00 00 02 01         ........
   1ef0c:	 ff 02 ff ff 02 ff 02 02         ........
   1ef14:	 ff 03 fe fe fe 03 00 01         ........
   1ef1c:	 00 00 01 00 01 ff 02 ff         ........
   1ef24:	 02 ff 02 03 fe 03 fe fe         ........
   1ef2c:	 04 04 fd 05 fd fc 06 fc         ........
   1ef34:	 06 05 fb 08 fa fb f9 09         ........


silk_shell_code_table0:
   1ef3c:	 80 00 d6 2a 00 eb 80 15         ...*....
   1ef44:	 00 f4 b8 48 0b 00 f8 d6         ...H....
   1ef4c:	 80 2a 07 00 f8 e1 aa 50         .*.....P
   1ef54:	 19 05 00 fb ec c6 7e 36         ......~6
   1ef5c:	 12 03 00 fa ee d3 9f 52         .......R
   1ef64:	 23 0f 05 00 fa e7 cb a8         #.......
   1ef6c:	 80 58 35 19 06 00 fc ee         .X5.....
   1ef74:	 d8 b9 94 6c 47 28 12 04         ...lG(..
   1ef7c:	 00 fd f3 e1 c7 a6 80 5a         .......Z
   1ef84:	 39 1f 0d 03 00 fe f6 e9         9.......
   1ef8c:	 d4 b7 93 6d 49 2c 17 0a         ...mI,..
   1ef94:	 02 00 ff fa f0 df c6 a6         ........
   1ef9c:	 80 5a 3a 21 10 06 01 00         .Z:!....
   1efa4:	 ff fb f4 e7 d2 b5 92 6e         .......n
   1efac:	 4b 2e 19 0c 05 01 00 ff         K.......
   1efb4:	 fd f8 ee dd c4 a4 80 5c         .......\
   1efbc:	 3c 23 12 08 03 01 00 ff         <#......
   1efc4:	 fd f9 f2 e5 d0 b4 92 6e         .......n
   1efcc:	 4c 30 1b 0e 07 03 01 00         L0......


silk_shell_code_table1:
   1efd4:	 81 00 cf 32 00 ec 81 14         ...2....
   1efdc:	 00 f5 b9 48 0a 00 f9 d5         ...H....
   1efe4:	 81 2a 06 00 fa e2 a9 57         .*.....W
   1efec:	 1b 04 00 fb e9 c2 82 3e         .......>
   1eff4:	 14 04 00 fa ec cf a0 63         .......c
   1effc:	 2f 11 03 00 ff f0 d9 b6         /.......
   1f004:	 83 51 29 0b 01 00 ff fe         .Q).....
   1f00c:	 e9 c9 9f 6b 3d 14 02 01         ...k=...
   1f014:	 00 ff f9 e9 ce aa 80 56         .......V
   1f01c:	 32 17 07 01 00 ff fa ee         2.......
   1f024:	 d9 ba 94 6c 46 27 12 06         ...lF'..
   1f02c:	 01 00 ff fc f3 e2 c8 a6         ........
   1f034:	 80 5a 38 1e 0d 04 01 00         .Z8.....
   1f03c:	 ff fc f5 e7 d1 b4 92 6e         .......n
   1f044:	 4c 2f 19 0b 04 01 00 ff         L/......
   1f04c:	 fd f8 ed db c2 a3 80 5d         .......]
   1f054:	 3e 25 13 08 03 01 00 ff         >%......
   1f05c:	 fe fa f1 e2 cd b1 91 6f         .......o
   1f064:	 4f 33 1e 0f 06 02 01 00         O3......


silk_shell_code_table2:
   1f06c:	 81 00 cb 36 00 ea 81 17         ...6....
   1f074:	 00 f5 b8 49 0a 00 fa d7         ...I....
   1f07c:	 81 29 05 00 fc e8 ad 56         .).....V
   1f084:	 18 03 00 fd f0 c8 81 38         .......8
   1f08c:	 0f 02 00 fd f4 d9 a4 5e         .......^
   1f094:	 26 0a 01 00 fd f5 e2 bd         &.......
   1f09c:	 84 47 1b 07 01 00 fd f6         .G......
   1f0a4:	 e7 cb 9f 69 38 17 06 01         ...i8...
   1f0ac:	 00 ff f8 eb d5 b3 85 55         .......U
   1f0b4:	 2f 13 05 01 00 ff fe f3         /.......
   1f0bc:	 dd c2 9f 75 46 25 0c 02         ...uF%..
   1f0c4:	 01 00 ff fe f8 ea d0 ab         ........
   1f0cc:	 80 55 30 16 08 02 01 00         .U0.....
   1f0d4:	 ff fe fa f0 dc bd 95 6b         .......k
   1f0dc:	 43 24 10 06 02 01 00 ff         C$......
   1f0e4:	 fe fb f3 e3 c9 a6 80 5a         .......Z
   1f0ec:	 37 1d 0d 05 02 01 00 ff         7.......
   1f0f4:	 fe fc f6 ea d5 b7 93 6d         .......m
   1f0fc:	 49 2b 16 0a 04 02 01 00         I+......


silk_shell_code_table3:
   1f104:	 82 00 c8 3a 00 e7 82 1a         ...:....
   1f10c:	 00 f4 b8 4c 0c 00 f9 d6         ...L....
   1f114:	 82 2b 06 00 fc e8 ad 57         .+.....W
   1f11c:	 18 03 00 fd f1 cb 83 38         .......8
   1f124:	 0e 02 00 fe f6 dd a7 5e         .......^
   1f12c:	 23 08 01 00 fe f9 e8 c1         #.......
   1f134:	 82 41 17 05 01 00 ff fb         .A......
   1f13c:	 ef d3 a2 63 2d 0f 04 01         ...c-...
   1f144:	 00 ff fb f3 df ba 83 4a         .......J
   1f14c:	 21 0b 03 01 00 ff fc f5         !.......
   1f154:	 e6 ca 9e 69 39 18 08 02         ...i9...
   1f15c:	 01 00 ff fd f7 eb d6 b3         ........
   1f164:	 84 54 2c 13 07 02 01 00         .T,.....
   1f16c:	 ff fe fa f0 df c4 9f 70         .......p
   1f174:	 45 24 0f 06 02 01 00 ff         E$......
   1f17c:	 fe fd f5 e7 d1 b0 88 5d         .......]
   1f184:	 37 1b 0b 03 02 01 00 ff         7.......
   1f18c:	 fe fd fc ef dd c2 9e 75         .......u
   1f194:	 4c 2a 12 04 03 02 01 00         L*......


silk_pulses_per_block_BITS_Q5:
   1f19c:	 1f 39 6b a0 cd cd ff ff         .9k.....
   1f1a4:	 ff ff ff ff ff ff ff ff         ........
   1f1ac:	 ff ff 45 2f 43 6f a6 cd         ..E/Co..
   1f1b4:	 ff ff ff ff ff ff ff ff         ........
   1f1bc:	 ff ff ff ff 52 4a 4f 5f         ....RJO_
   1f1c4:	 6d 80 91 a0 ad cd cd cd         m.......
   1f1cc:	 e0 ff ff e0 ff e0 7d 4a         ......}J
   1f1d4:	 3b 45 61 8d b6 ff ff ff         ;Ea.....
   1f1dc:	 ff ff ff ff ff ff ff ff         ........
   1f1e4:	 ad 73 55 49 4c 5c 73 91         .sUIL\s.
   1f1ec:	 ad cd e0 e0 ff ff ff ff         ........
   1f1f4:	 ff ff a6 86 71 66 65 66         ....qfef
   1f1fc:	 6b 76 7d 8a 91 9b a6 b6         kv}.....
   1f204:	 c0 c0 cd 96 e0 b6 86 65         .......e
   1f20c:	 53 4f 55 61 78 91 ad cd         SOUax...
   1f214:	 e0 ff ff ff ff ff ff e0         ........
   1f21c:	 c0 96 78 65 5c 59 5d 66         ..xe\Y]f
   1f224:	 76 86 a0 b6 c0 e0 e0 e0         v.......
   1f22c:	 ff e0 e0 b6 9b 86 76 6d         ......vm
   1f234:	 68 66 6a 6f 76 83 91 a0         hfjov...
   1f23c:	 ad 83                           ..


silk_pulses_per_block_iCDF:
   1f23e:	 7d 33 1a 12 0f 0c 0b 0a         }3......
   1f246:	 09 08 07 06 05 04 03 02         ........
   1f24e:	 01 00 c6 69 2d 16 0f 0c         ...i-...
   1f256:	 0b 0a 09 08 07 06 05 04         ........
   1f25e:	 03 02 01 00 d5 a2 74 53         ......tS
   1f266:	 3b 2b 20 18 12 0f 0c 09         ;+ .....
   1f26e:	 07 06 05 03 02 00 ef bb         ........
   1f276:	 74 3b 1c 10 0b 0a 09 08         t;......
   1f27e:	 07 06 05 04 03 02 01 00         ........
   1f286:	 fa e5 bc 87 56 33 1e 13         ....V3..
   1f28e:	 0d 0a 08 06 05 04 03 02         ........
   1f296:	 01 00 f9 eb d5 b9 9c 80         ........
   1f29e:	 67 53 42 35 2a 21 1a 15         gSB5*!..
   1f2a6:	 11 0d 0a 00 fe f9 eb ce         ........
   1f2ae:	 a4 76 4d 2e 1b 10 0a 07         .vM.....
   1f2b6:	 05 04 03 02 01 00 ff fd         ........
   1f2be:	 f9 ef dc bf 9c 77 55 39         .....wU9
   1f2c6:	 25 17 0f 0a 06 04 02 00         %.......
   1f2ce:	 ff fd fb f6 ed df cb b3         ........
   1f2d6:	 98 7c 62 4b 37 28 1d 15         .|bK7(..
   1f2de:	 0f 00 ff fe fd f7 dc a2         ........
   1f2e6:	 6a 43 2a 1c 12 0c 09 06         jC*.....
   1f2ee:	 04 03 02 00 00 00               ......


sin_win_tab1:
   1f2f4:	 31 0c 00 00 63 18 00 00         1...c...
   1f2fc:	 78 24 00 00 8e 30 00 00         x$...0..
   1f304:	 6b 3c 00 00 48 48 00 00         k<..HH..
   1f30c:	 d1 53 00 00 5b 5f 00 00         .S..[_..
   1f314:	 75 6a 00 00 90 75 00 00         uj...u..
   1f31c:	 22 80 00 00 b5 8a 00 00         ".......
   1f324:	 a6 94 00 00 98 9e 00 00         ........
   1f32c:	 d2 a7 00 00 0c b1 00 00         ........
   1f334:	 78 b9 00 00 e5 c1 00 00         x.......
   1f33c:	 71 c9 00 00 fd d0 00 00         q.......
   1f344:	 96 d7 00 00 30 de 00 00         ....0...
   1f34c:	 c8 e3 00 00 60 e9 00 00         ....`...
   1f354:	 e9 ed 00 00 72 f2 00 00         ....r...
   1f35c:	 e2 f5 00 00 52 f9 00 00         ....R...
   1f364:	 a0 fb 00 00 ef fd 00 00         ........
   1f36c:	 f7 fe 00 00 00 00 01 00         ........
   1f374:	 6c ff 00 00 d9 fe 00 00         l.......
   1f37c:	 1e fd 00 00 63 fb 00 00         ....c...
   1f384:	 84 f8 00 00 a5 f5 00 00         ........
   1f38c:	 a9 f1 00 00 ae ed 00 00         ........
   1f394:	 9e e8 00 00 8f e3 00 00         ........
   1f39c:	 77 dd 00 00 60 d7 00 00         w...`...
   1f3a4:	 4e d0 00 00 3d c9 00 00         N...=...
   1f3ac:	 42 c1 00 00 48 b9 00 00         B...H...
   1f3b4:	 76 b0 00 00 a5 a7 00 00         v.......
   1f3bc:	 11 9e 00 00 7e 94 00 00         ....~...
   1f3c4:	 3e 8a 00 00 fe 7f 00 00         >.......
   1f3cc:	 2a 75 00 00 56 6a 00 00         *u..Vj..
   1f3d4:	 06 5f 00 00 b7 53 00 00         ._...S..
   1f3dc:	 06 48 00 00 56 3c 00 00         .H..V<..
   1f3e4:	 5f 30 00 00 69 24 00 00         _0..i$..
   1f3ec:	 48 18 00 00 28 0c 00 00         H...(...


sin_win_tab2:
   1f3f4:	 33 06 00 00 67 0c 00 00         3...g...
   1f3fc:	 97 12 00 00 c7 18 00 00         ........
   1f404:	 ef 1e 00 00 18 25 00 00         .....%..
   1f40c:	 35 2b 00 00 53 31 00 00         5+..S1..
   1f414:	 61 37 00 00 70 3d 00 00         a7..p=..
   1f41c:	 6c 43 00 00 69 49 00 00         lC..iI..
   1f424:	 4f 4f 00 00 35 55 00 00         OO..5U..
   1f42c:	 01 5b 00 00 ce 60 00 00         .[...`..
   1f434:	 7d 66 00 00 2c 6c 00 00         }f..,l..
   1f43c:	 ba 71 00 00 49 77 00 00         .q..Iw..
   1f444:	 b3 7c 00 00 1e 82 00 00         .|......
   1f44c:	 61 87 00 00 a5 8c 00 00         a.......
   1f454:	 be 91 00 00 d7 96 00 00         ........
   1f45c:	 c3 9b 00 00 af a0 00 00         ........
   1f464:	 6a a5 00 00 26 aa 00 00         j...&...
   1f46c:	 ae ae 00 00 37 b3 00 00         ....7...
   1f474:	 89 b7 00 00 dc bb 00 00         ........
   1f47c:	 f6 bf 00 00 10 c4 00 00         ........
   1f484:	 ef c7 00 00 ce cb 00 00         ........
   1f48c:	 70 cf 00 00 12 d3 00 00         p.......
   1f494:	 74 d6 00 00 d7 d9 00 00         t.......
   1f49c:	 f8 dc 00 00 19 e0 00 00         ........
   1f4a4:	 f6 e2 00 00 d4 e5 00 00         ........
   1f4ac:	 6c e8 00 00 05 eb 00 00         l.......
   1f4b4:	 56 ed 00 00 a8 ef 00 00         V.......
   1f4bc:	 b1 f1 00 00 bb f3 00 00         ........
   1f4c4:	 7b f5 00 00 3b f7 00 00         {...;...
   1f4cc:	 b1 f8 00 00 27 fa 00 00         ....'...
   1f4d4:	 51 fb 00 00 7c fc 00 00         Q...|...
   1f4dc:	 5b fd 00 00 3a fe 00 00         [...:...
   1f4e4:	 cc fe 00 00 5f ff 00 00         ...._...
   1f4ec:	 a5 ff 00 00 eb ff 00 00         ........
   1f4f4:	 db ff 00 00 b7 ff 00 00         ........
   1f4fc:	 46 ff 00 00 d5 fe 00 00         F.......
   1f504:	 17 fe 00 00 59 fd 00 00         ....Y...
   1f50c:	 4f fc 00 00 45 fb 00 00         O...E...
   1f514:	 ef f9 00 00 99 f8 00 00         ........
   1f51c:	 f8 f6 00 00 58 f5 00 00         ....X...
   1f524:	 6d f3 00 00 83 f1 00 00         m.......
   1f52c:	 50 ef 00 00 1d ed 00 00         P.......
   1f534:	 a2 ea 00 00 28 e8 00 00         ....(...
   1f53c:	 68 e5 00 00 a8 e2 00 00         h.......
   1f544:	 a3 df 00 00 9f dc 00 00         ........
   1f54c:	 58 d9 00 00 12 d6 00 00         X.......
   1f554:	 8b d2 00 00 04 cf 00 00         ........
   1f55c:	 3f cb 00 00 7a c7 00 00         ?...z...
   1f564:	 79 c3 00 00 78 bf 00 00         y...x...
   1f56c:	 3d bb 00 00 03 b7 00 00         =.......
   1f574:	 91 b2 00 00 1f ae 00 00         ........
   1f57c:	 79 a9 00 00 d3 a4 00 00         y.......
   1f584:	 fb 9f 00 00 23 9b 00 00         ....#...
   1f58c:	 1c 96 00 00 16 91 00 00         ........
   1f594:	 e3 8b 00 00 b1 86 00 00         ........
   1f59c:	 56 81 00 00 fb 7b 00 00         V....{..
   1f5a4:	 7a 76 00 00 fa 70 00 00         zv...p..
   1f5ac:	 58 6b 00 00 b6 65 00 00         Xk...e..
   1f5b4:	 f5 5f 00 00 34 5a 00 00         ._..4Z..
   1f5bc:	 58 54 00 00 7c 4e 00 00         XT..|N..
   1f5c4:	 88 48 00 00 94 42 00 00         .H...B..
   1f5cc:	 8c 3c 00 00 84 36 00 00         .<...6..
   1f5d4:	 6b 30 00 00 53 2a 00 00         k0..S*..
   1f5dc:	 2e 24 00 00 09 1e 00 00         .$......
   1f5e4:	 da 17 00 00 ac 11 00 00         ........
   1f5ec:	 78 0b 00 00 45 05 00 00         x...E...
   1f5f4:	 28 6e 75 6c 6c 29 00 61         (null).a
   1f5fc:	 70 70 5f 64 69 72 5f 68         pp_dir_h
   1f604:	 65 61 64 32 00 53 50 49         ead2.SPI
   1f60c:	 00 53 48 41 2d 32 35 36         .SHA-256
   1f614:	 00 41 41 43 00                  .AAC.


CrcDecode.keylcode:
   1f619:	 c3 cf c0 e8 ce d2 b0 ae         ........
   1f621:	 c4 e3 a3 ac d3 f1 c1 d6         ........
   1f629:	 00                              .


silk_Quantization_Offsets_Q10:
   1f62a:	 64 00 f0 00 20 00 64 00         d... .d.


rom_size:
   1f632:    00 00             	nop
   1f634:    00 00             	nop
   1f636:    00 00             	nop
   1f638:    00 00             	nop
   1f63a:    00 00             	nop
   1f63c:    00 00             	nop
   1f63e:    00 00             	nop
   1f640:    00 00             	nop
   1f642:    00 00             	nop
   1f644:    00 00             	nop
   1f646:    00 00             	nop
   1f648:    00 00             	nop
   1f64a:    00 00             	nop
   1f64c:    00 00             	nop
   1f64e:    00 00             	nop
   1f650:    00 00             	nop
   1f652:    00 00             	nop
   1f654:    00 00             	nop
   1f656:    00 00             	nop
   1f658:    00 00             	nop
   1f65a:    00 00             	nop
   1f65c:    00 00             	nop
   1f65e:    00 00             	nop
   1f660:    00 00             	nop
   1f662:    00 00             	nop
   1f664:    00 00             	nop
   1f666:    00 00             	nop
   1f668:    00 00             	nop
   1f66a:    00 00             	nop
   1f66c:    00 00             	nop
   1f66e:    00 00             	nop
   1f670:    00 00             	nop
   1f672:    00 00             	nop
   1f674:    00 00             	nop
   1f676:    00 00             	nop
   1f678:    00 00             	nop
   1f67a:    00 00             	nop
   1f67c:    00 00             	nop
   1f67e:    00 00             	nop
   1f680:    00 00             	nop
   1f682:    00 00             	nop
   1f684:    00 00             	nop
   1f686:    00 00             	nop
   1f688:    00 00             	nop
   1f68a:    00 00             	nop
   1f68c:    00 00             	nop
   1f68e:    00 00             	nop
   1f690:    00 00             	nop
   1f692:    00 00             	nop
   1f694:    00 00             	nop
   1f696:    00 00             	nop
   1f698:    00 00             	nop
   1f69a:    00 00             	nop
   1f69c:    00 00             	nop
   1f69e:    00 00             	nop
   1f6a0:    00 00             	nop
   1f6a2:    00 00             	nop
   1f6a4:    00 00             	nop
   1f6a6:    00 00             	nop
   1f6a8:    00 00             	nop
   1f6aa:    00 00             	nop
   1f6ac:    00 00             	nop
   1f6ae:    00 00             	nop
   1f6b0:    00 00             	nop
   1f6b2:    00 00             	nop
   1f6b4:    00 00             	nop
   1f6b6:    00 00             	nop
   1f6b8:    00 00             	nop
   1f6ba:    00 00             	nop
   1f6bc:    00 00             	nop
   1f6be:    00 00             	nop
   1f6c0:    00 00             	nop
   1f6c2:    00 00             	nop
   1f6c4:    00 00             	nop
   1f6c6:    00 00             	nop
   1f6c8:    00 00             	nop
   1f6ca:    00 00             	nop
   1f6cc:    00 00             	nop
   1f6ce:    00 00             	nop
   1f6d0:    00 00             	nop
   1f6d2:    00 00             	nop
   1f6d4:    00 00             	nop
   1f6d6:    00 00             	nop
   1f6d8:    00 00             	nop
   1f6da:    00 00             	nop
   1f6dc:    00 00             	nop
   1f6de:    00 00             	nop
   1f6e0:    00 00             	nop
   1f6e2:    00 00             	nop
   1f6e4:    00 00             	nop
   1f6e6:    00 00             	nop
   1f6e8:    00 00             	nop
   1f6ea:    00 00             	nop
   1f6ec:    00 00             	nop
   1f6ee:    00 00             	nop
   1f6f0:    00 00             	nop
   1f6f2:    00 00             	nop
   1f6f4:    00 00             	nop
   1f6f6:    00 00             	nop
   1f6f8:    00 00             	nop
   1f6fa:    00 00             	nop
   1f6fc:    00 00             	nop
   1f6fe:    00 00             	nop
   1f700:    00 00             	nop
   1f702:    00 00             	nop
   1f704:    00 00             	nop
   1f706:    00 00             	nop
   1f708:    00 00             	nop
   1f70a:    00 00             	nop
   1f70c:    00 00             	nop
   1f70e:    00 00             	nop
   1f710:    00 00             	nop
   1f712:    00 00             	nop
   1f714:    00 00             	nop
   1f716:    00 00             	nop
   1f718:    00 00             	nop
   1f71a:    00 00             	nop
   1f71c:    00 00             	nop
   1f71e:    00 00             	nop
   1f720:    00 00             	nop
   1f722:    00 00             	nop
   1f724:    00 00             	nop
   1f726:    00 00             	nop
   1f728:    00 00             	nop
   1f72a:    00 00             	nop
   1f72c:    00 00             	nop
   1f72e:    00 00             	nop
   1f730:    00 00             	nop
   1f732:    00 00             	nop
   1f734:    00 00             	nop
   1f736:    00 00             	nop
   1f738:    00 00             	nop
   1f73a:    00 00             	nop
   1f73c:    00 00             	nop
   1f73e:    00 00             	nop
   1f740:    00 00             	nop
   1f742:    00 00             	nop
   1f744:    00 00             	nop
   1f746:    00 00             	nop
   1f748:    00 00             	nop
   1f74a:    00 00             	nop
   1f74c:    00 00             	nop
   1f74e:    00 00             	nop
   1f750:    00 00             	nop
   1f752:    00 00             	nop
   1f754:    00 00             	nop
   1f756:    00 00             	nop
   1f758:    00 00             	nop
   1f75a:    00 00             	nop
   1f75c:    00 00             	nop
   1f75e:    00 00             	nop
   1f760:    00 00             	nop
   1f762:    00 00             	nop
   1f764:    00 00             	nop
   1f766:    00 00             	nop
   1f768:    00 00             	nop
   1f76a:    00 00             	nop
   1f76c:    00 00             	nop
   1f76e:    00 00             	nop
   1f770:    00 00             	nop
   1f772:    00 00             	nop
   1f774:    00 00             	nop
   1f776:    00 00             	nop
   1f778:    00 00             	nop
   1f77a:    00 00             	nop
   1f77c:    00 00             	nop
   1f77e:    00 00             	nop
   1f780:    00 00             	nop
   1f782:    00 00             	nop
   1f784:    00 00             	nop
   1f786:    00 00             	nop
   1f788:    00 00             	nop
   1f78a:    00 00             	nop
   1f78c:    00 00             	nop
   1f78e:    00 00             	nop
   1f790:    00 00             	nop
   1f792:    00 00             	nop
   1f794:    00 00             	nop
   1f796:    00 00             	nop
   1f798:    00 00             	nop
   1f79a:    00 00             	nop
   1f79c:    00 00             	nop
   1f79e:    00 00             	nop
   1f7a0:    00 00             	nop
   1f7a2:    00 00             	nop
   1f7a4:    00 00             	nop
   1f7a6:    00 00             	nop
   1f7a8:    00 00             	nop
   1f7aa:    00 00             	nop
   1f7ac:    00 00             	nop
   1f7ae:    00 00             	nop
   1f7b0:    00 00             	nop
   1f7b2:    00 00             	nop
   1f7b4:    00 00             	nop
   1f7b6:    00 00             	nop
   1f7b8:    00 00             	nop
   1f7ba:    00 00             	nop
   1f7bc:    00 00             	nop
   1f7be:    00 00             	nop
   1f7c0:    00 00             	nop
   1f7c2:    00 00             	nop
   1f7c4:    00 00             	nop
   1f7c6:    00 00             	nop
   1f7c8:    00 00             	nop
   1f7ca:    00 00             	nop
   1f7cc:    00 00             	nop
   1f7ce:    00 00             	nop
   1f7d0:    00 00             	nop
   1f7d2:    00 00             	nop
   1f7d4:    00 00             	nop
   1f7d6:    00 00             	nop
   1f7d8:    00 00             	nop
   1f7da:    00 00             	nop
   1f7dc:    00 00             	nop
   1f7de:    00 00             	nop
   1f7e0:    00 00             	nop
   1f7e2:    00 00             	nop
   1f7e4:    00 00             	nop
   1f7e6:    00 00             	nop
   1f7e8:    00 00             	nop
   1f7ea:    00 00             	nop
   1f7ec:    00 00             	nop
   1f7ee:    00 00             	nop
   1f7f0:    00 00             	nop
   1f7f2:    00 00             	nop
   1f7f4:    00 00             	nop
   1f7f6:    00 00             	nop
   1f7f8:    00 00             	nop
   1f7fa:    00 00             	nop
   1f7fc:    00 00             	nop
   1f7fe:    00 00             	nop
   1f800:    00 00             	nop
   1f802:    00 00             	nop
   1f804:    00 00             	nop
   1f806:    00 00             	nop
   1f808:    00 00             	nop
   1f80a:    00 00             	nop
   1f80c:    00 00             	nop
   1f80e:    00 00             	nop
   1f810:    00 00             	nop
   1f812:    00 00             	nop
   1f814:    00 00             	nop
   1f816:    00 00             	nop
   1f818:    00 00             	nop
   1f81a:    00 00             	nop
   1f81c:    00 00             	nop
   1f81e:    00 00             	nop
   1f820:    00 00             	nop
   1f822:    00 00             	nop
   1f824:    00 00             	nop
   1f826:    00 00             	nop
   1f828:    00 00             	nop
   1f82a:    00 00             	nop
   1f82c:    00 00             	nop
   1f82e:    00 00             	nop
   1f830:    00 00             	nop
   1f832:    00 00             	nop
   1f834:    00 00             	nop
   1f836:    00 00             	nop
   1f838:    00 00             	nop
   1f83a:    00 00             	nop
   1f83c:    00 00             	nop
   1f83e:    00 00             	nop
   1f840:    00 00             	nop
   1f842:    00 00             	nop
   1f844:    00 00             	nop
   1f846:    00 00             	nop
   1f848:    00 00             	nop
   1f84a:    00 00             	nop
   1f84c:    00 00             	nop
   1f84e:    00 00             	nop
   1f850:    00 00             	nop
   1f852:    00 00             	nop
   1f854:    00 00             	nop
   1f856:    00 00             	nop
   1f858:    00 00             	nop
   1f85a:    00 00             	nop
   1f85c:    00 00             	nop
   1f85e:    00 00             	nop
   1f860:    00 00             	nop
   1f862:    00 00             	nop
   1f864:    00 00             	nop
   1f866:    00 00             	nop
   1f868:    00 00             	nop
   1f86a:    00 00             	nop
   1f86c:    00 00             	nop
   1f86e:    00 00             	nop
   1f870:    00 00             	nop
   1f872:    00 00             	nop
   1f874:    00 00             	nop
   1f876:    00 00             	nop
   1f878:    00 00             	nop
   1f87a:    00 00             	nop
   1f87c:    00 00             	nop
   1f87e:    00 00             	nop
   1f880:    00 00             	nop
   1f882:    00 00             	nop
   1f884:    00 00             	nop
   1f886:    00 00             	nop
   1f888:    00 00             	nop
   1f88a:    00 00             	nop
   1f88c:    00 00             	nop
   1f88e:    00 00             	nop
   1f890:    00 00             	nop
   1f892:    00 00             	nop
   1f894:    00 00             	nop
   1f896:    00 00             	nop
   1f898:    00 00             	nop
   1f89a:    00 00             	nop
   1f89c:    00 00             	nop
   1f89e:    00 00             	nop
   1f8a0:    00 00             	nop
   1f8a2:    00 00             	nop
   1f8a4:    00 00             	nop
   1f8a6:    00 00             	nop
   1f8a8:    00 00             	nop
   1f8aa:    00 00             	nop
   1f8ac:    00 00             	nop
   1f8ae:    00 00             	nop
   1f8b0:    00 00             	nop
   1f8b2:    00 00             	nop
   1f8b4:    00 00             	nop
   1f8b6:    00 00             	nop
   1f8b8:    00 00             	nop
   1f8ba:    00 00             	nop
   1f8bc:    00 00             	nop
   1f8be:    00 00             	nop
   1f8c0:    00 00             	nop
   1f8c2:    00 00             	nop
   1f8c4:    00 00             	nop
   1f8c6:    00 00             	nop
   1f8c8:    00 00             	nop
   1f8ca:    00 00             	nop
   1f8cc:    00 00             	nop
   1f8ce:    00 00             	nop
   1f8d0:    00 00             	nop
   1f8d2:    00 00             	nop
   1f8d4:    00 00             	nop
   1f8d6:    00 00             	nop
   1f8d8:    00 00             	nop
   1f8da:    00 00             	nop
   1f8dc:    00 00             	nop
   1f8de:    00 00             	nop
   1f8e0:    00 00             	nop
   1f8e2:    00 00             	nop
   1f8e4:    00 00             	nop
   1f8e6:    00 00             	nop
   1f8e8:    00 00             	nop
   1f8ea:    00 00             	nop
   1f8ec:    00 00             	nop
   1f8ee:    00 00             	nop
   1f8f0:    00 00             	nop
   1f8f2:    00 00             	nop
   1f8f4:    00 00             	nop
   1f8f6:    00 00             	nop
   1f8f8:    00 00             	nop
   1f8fa:    00 00             	nop
   1f8fc:    00 00             	nop
   1f8fe:    00 00             	nop
   1f900:    00 00             	nop
   1f902:    00 00             	nop
   1f904:    00 00             	nop
   1f906:    00 00             	nop
   1f908:    00 00             	nop
   1f90a:    00 00             	nop
   1f90c:    00 00             	nop
   1f90e:    00 00             	nop
   1f910:    00 00             	nop
   1f912:    00 00             	nop
   1f914:    00 00             	nop
   1f916:    00 00             	nop
   1f918:    00 00             	nop
   1f91a:    00 00             	nop
   1f91c:    00 00             	nop
   1f91e:    00 00             	nop
   1f920:    00 00             	nop
   1f922:    00 00             	nop
   1f924:    00 00             	nop
   1f926:    00 00             	nop
   1f928:    00 00             	nop
   1f92a:    00 00             	nop
   1f92c:    00 00             	nop
   1f92e:    00 00             	nop
   1f930:    00 00             	nop
   1f932:    00 00             	nop
   1f934:    00 00             	nop
   1f936:    00 00             	nop
   1f938:    00 00             	nop
   1f93a:    00 00             	nop
   1f93c:    00 00             	nop
   1f93e:    00 00             	nop
   1f940:    00 00             	nop
   1f942:    00 00             	nop
   1f944:    00 00             	nop
   1f946:    00 00             	nop
   1f948:    00 00             	nop
   1f94a:    00 00             	nop
   1f94c:    00 00             	nop
   1f94e:    00 00             	nop
   1f950:    00 00             	nop
   1f952:    00 00             	nop
   1f954:    00 00             	nop
   1f956:    00 00             	nop
   1f958:    00 00             	nop
   1f95a:    00 00             	nop
   1f95c:    00 00             	nop
   1f95e:    00 00             	nop
   1f960:    00 00             	nop
   1f962:    00 00             	nop
   1f964:    00 00             	nop
   1f966:    00 00             	nop
   1f968:    00 00             	nop
   1f96a:    00 00             	nop
   1f96c:    00 00             	nop
   1f96e:    00 00             	nop
   1f970:    00 00             	nop
   1f972:    00 00             	nop
   1f974:    00 00             	nop
   1f976:    00 00             	nop
   1f978:    00 00             	nop
   1f97a:    00 00             	nop
   1f97c:    00 00             	nop
   1f97e:    00 00             	nop
   1f980:    00 00             	nop
   1f982:    00 00             	nop
   1f984:    00 00             	nop
   1f986:    00 00             	nop
   1f988:    00 00             	nop
   1f98a:    00 00             	nop
   1f98c:    00 00             	nop
   1f98e:    00 00             	nop
   1f990:    00 00             	nop
   1f992:    00 00             	nop
   1f994:    00 00             	nop
   1f996:    00 00             	nop
   1f998:    00 00             	nop
   1f99a:    00 00             	nop
   1f99c:    00 00             	nop
   1f99e:    00 00             	nop
   1f9a0:    00 00             	nop
   1f9a2:    00 00             	nop
   1f9a4:    00 00             	nop
   1f9a6:    00 00             	nop
   1f9a8:    00 00             	nop
   1f9aa:    00 00             	nop
   1f9ac:    00 00             	nop
   1f9ae:    00 00             	nop
   1f9b0:    00 00             	nop
   1f9b2:    00 00             	nop
   1f9b4:    00 00             	nop
   1f9b6:    00 00             	nop
   1f9b8:    00 00             	nop
   1f9ba:    00 00             	nop
   1f9bc:    00 00             	nop
   1f9be:    00 00             	nop
   1f9c0:    00 00             	nop
   1f9c2:    00 00             	nop
   1f9c4:    00 00             	nop
   1f9c6:    00 00             	nop
   1f9c8:    00 00             	nop
   1f9ca:    00 00             	nop
   1f9cc:    00 00             	nop
   1f9ce:    00 00             	nop
   1f9d0:    00 00             	nop
   1f9d2:    00 00             	nop
   1f9d4:    00 00             	nop
   1f9d6:    00 00             	nop
   1f9d8:    00 00             	nop
   1f9da:    00 00             	nop
   1f9dc:    00 00             	nop
   1f9de:    00 00             	nop
   1f9e0:    00 00             	nop
   1f9e2:    00 00             	nop
   1f9e4:    00 00             	nop
   1f9e6:    00 00             	nop
   1f9e8:    00 00             	nop
   1f9ea:    00 00             	nop
   1f9ec:    00 00             	nop
   1f9ee:    00 00             	nop
   1f9f0:    00 00             	nop
   1f9f2:    00 00             	nop
   1f9f4:    00 00             	nop
   1f9f6:    00 00             	nop
   1f9f8:    00 00             	nop
   1f9fa:    00 00             	nop
   1f9fc:    00 00             	nop
   1f9fe:    00 00             	nop
   1fa00:    00 00             	nop
   1fa02:    00 00             	nop
   1fa04:    00 00             	nop
   1fa06:    00 00             	nop
   1fa08:    00 00             	nop
   1fa0a:    00 00             	nop
   1fa0c:    00 00             	nop
   1fa0e:    00 00             	nop
   1fa10:    00 00             	nop
   1fa12:    00 00             	nop
   1fa14:    00 00             	nop
   1fa16:    00 00             	nop
   1fa18:    00 00             	nop
   1fa1a:    00 00             	nop
   1fa1c:    00 00             	nop
   1fa1e:    00 00             	nop
   1fa20:    00 00             	nop
   1fa22:    00 00             	nop
   1fa24:    00 00             	nop
   1fa26:    00 00             	nop
   1fa28:    00 00             	nop
   1fa2a:    00 00             	nop
   1fa2c:    00 00             	nop
   1fa2e:    00 00             	nop
   1fa30:    00 00             	nop
   1fa32:    00 00             	nop
   1fa34:    00 00             	nop
   1fa36:    00 00             	nop
   1fa38:    00 00             	nop
   1fa3a:    00 00             	nop
   1fa3c:    00 00             	nop
   1fa3e:    00 00             	nop
   1fa40:    00 00             	nop
   1fa42:    00 00             	nop
   1fa44:    00 00             	nop
   1fa46:    00 00             	nop
   1fa48:    00 00             	nop
   1fa4a:    00 00             	nop
   1fa4c:    00 00             	nop
   1fa4e:    00 00             	nop
   1fa50:    00 00             	nop
   1fa52:    00 00             	nop
   1fa54:    00 00             	nop
   1fa56:    00 00             	nop
   1fa58:    00 00             	nop
   1fa5a:    00 00             	nop
   1fa5c:    00 00             	nop
   1fa5e:    00 00             	nop
   1fa60:    00 00             	nop
   1fa62:    00 00             	nop
   1fa64:    00 00             	nop
   1fa66:    00 00             	nop
   1fa68:    00 00             	nop
   1fa6a:    00 00             	nop
   1fa6c:    00 00             	nop
   1fa6e:    00 00             	nop
   1fa70:    00 00             	nop
   1fa72:    00 00             	nop
   1fa74:    00 00             	nop
   1fa76:    00 00             	nop
   1fa78:    00 00             	nop
   1fa7a:    00 00             	nop
   1fa7c:    00 00             	nop
   1fa7e:    00 00             	nop
   1fa80:    00 00             	nop
   1fa82:    00 00             	nop
   1fa84:    00 00             	nop
   1fa86:    00 00             	nop
   1fa88:    00 00             	nop
   1fa8a:    00 00             	nop
   1fa8c:    00 00             	nop
   1fa8e:    00 00             	nop
   1fa90:    00 00             	nop
   1fa92:    00 00             	nop
   1fa94:    00 00             	nop
   1fa96:    00 00             	nop
   1fa98:    00 00             	nop
   1fa9a:    00 00             	nop
   1fa9c:    00 00             	nop
   1fa9e:    00 00             	nop
   1faa0:    00 00             	nop
   1faa2:    00 00             	nop
   1faa4:    00 00             	nop
   1faa6:    00 00             	nop
   1faa8:    00 00             	nop
   1faaa:    00 00             	nop
   1faac:    00 00             	nop
   1faae:    00 00             	nop
   1fab0:    00 00             	nop
   1fab2:    00 00             	nop
   1fab4:    00 00             	nop
   1fab6:    00 00             	nop
   1fab8:    00 00             	nop
   1faba:    00 00             	nop
   1fabc:    00 00             	nop
   1fabe:    00 00             	nop
   1fac0:    00 00             	nop
   1fac2:    00 00             	nop
   1fac4:    00 00             	nop
   1fac6:    00 00             	nop
   1fac8:    00 00             	nop
   1faca:    00 00             	nop
   1facc:    00 00             	nop
   1face:    00 00             	nop
   1fad0:    00 00             	nop
   1fad2:    00 00             	nop
   1fad4:    00 00             	nop
   1fad6:    00 00             	nop
   1fad8:    00 00             	nop
   1fada:    00 00             	nop
   1fadc:    00 00             	nop
   1fade:    00 00             	nop
   1fae0:    00 00             	nop
   1fae2:    00 00             	nop
   1fae4:    00 00             	nop
   1fae6:    00 00             	nop
   1fae8:    00 00             	nop
   1faea:    00 00             	nop
   1faec:    00 00             	nop
   1faee:    00 00             	nop
   1faf0:    00 00             	nop
   1faf2:    00 00             	nop
   1faf4:    00 00             	nop
   1faf6:    00 00             	nop
   1faf8:    00 00             	nop
   1fafa:    00 00             	nop
   1fafc:    00 00             	nop
   1fafe:    00 00             	nop
   1fb00:    00 00             	nop
   1fb02:    00 00             	nop
   1fb04:    00 00             	nop
   1fb06:    00 00             	nop
   1fb08:    00 00             	nop
   1fb0a:    00 00             	nop
   1fb0c:    00 00             	nop
   1fb0e:    00 00             	nop
   1fb10:    00 00             	nop
   1fb12:    00 00             	nop
   1fb14:    00 00             	nop
   1fb16:    00 00             	nop
   1fb18:    00 00             	nop
   1fb1a:    00 00             	nop
   1fb1c:    00 00             	nop
   1fb1e:    00 00             	nop
   1fb20:    00 00             	nop
   1fb22:    00 00             	nop
   1fb24:    00 00             	nop
   1fb26:    00 00             	nop
   1fb28:    00 00             	nop
   1fb2a:    00 00             	nop
   1fb2c:    00 00             	nop
   1fb2e:    00 00             	nop
   1fb30:    00 00             	nop
   1fb32:    00 00             	nop
   1fb34:    00 00             	nop
   1fb36:    00 00             	nop
   1fb38:    00 00             	nop
   1fb3a:    00 00             	nop
   1fb3c:    00 00             	nop
   1fb3e:    00 00             	nop
   1fb40:    00 00             	nop
   1fb42:    00 00             	nop
   1fb44:    00 00             	nop
   1fb46:    00 00             	nop
   1fb48:    00 00             	nop
   1fb4a:    00 00             	nop
   1fb4c:    00 00             	nop
   1fb4e:    00 00             	nop
   1fb50:    00 00             	nop
   1fb52:    00 00             	nop
   1fb54:    00 00             	nop
   1fb56:    00 00             	nop
   1fb58:    00 00             	nop
   1fb5a:    00 00             	nop
   1fb5c:    00 00             	nop
   1fb5e:    00 00             	nop
   1fb60:    00 00             	nop
   1fb62:    00 00             	nop
   1fb64:    00 00             	nop
   1fb66:    00 00             	nop
   1fb68:    00 00             	nop
   1fb6a:    00 00             	nop
   1fb6c:    00 00             	nop
   1fb6e:    00 00             	nop
   1fb70:    00 00             	nop
   1fb72:    00 00             	nop
   1fb74:    00 00             	nop
   1fb76:    00 00             	nop
   1fb78:    00 00             	nop
   1fb7a:    00 00             	nop
   1fb7c:    00 00             	nop
   1fb7e:    00 00             	nop
   1fb80:    00 00             	nop
   1fb82:    00 00             	nop
   1fb84:    00 00             	nop
   1fb86:    00 00             	nop
   1fb88:    00 00             	nop
   1fb8a:    00 00             	nop
   1fb8c:    00 00             	nop
   1fb8e:    00 00             	nop
   1fb90:    00 00             	nop
   1fb92:    00 00             	nop
   1fb94:    00 00             	nop
   1fb96:    00 00             	nop
   1fb98:    00 00             	nop
   1fb9a:    00 00             	nop
   1fb9c:    00 00             	nop
   1fb9e:    00 00             	nop
   1fba0:    00 00             	nop
   1fba2:    00 00             	nop
   1fba4:    00 00             	nop
   1fba6:    00 00             	nop
   1fba8:    00 00             	nop
   1fbaa:    00 00             	nop
   1fbac:    00 00             	nop
   1fbae:    00 00             	nop
   1fbb0:    00 00             	nop
   1fbb2:    00 00             	nop
   1fbb4:    00 00             	nop
   1fbb6:    00 00             	nop
   1fbb8:    00 00             	nop
   1fbba:    00 00             	nop
   1fbbc:    00 00             	nop
   1fbbe:    00 00             	nop
   1fbc0:    00 00             	nop
   1fbc2:    00 00             	nop
   1fbc4:    00 00             	nop
   1fbc6:    00 00             	nop
   1fbc8:    00 00             	nop
   1fbca:    00 00             	nop
   1fbcc:    00 00             	nop
   1fbce:    00 00             	nop
   1fbd0:    00 00             	nop
   1fbd2:    00 00             	nop
   1fbd4:    00 00             	nop
   1fbd6:    00 00             	nop
   1fbd8:    00 00             	nop
   1fbda:    00 00             	nop
   1fbdc:    00 00             	nop
   1fbde:    00 00             	nop
   1fbe0:    00 00             	nop
   1fbe2:    00 00             	nop
   1fbe4:    00 00             	nop
   1fbe6:    00 00             	nop
   1fbe8:    00 00             	nop
   1fbea:    00 00             	nop
   1fbec:    00 00             	nop
   1fbee:    00 00             	nop
   1fbf0:    00 00             	nop
   1fbf2:    00 00             	nop
   1fbf4:    00 00             	nop
   1fbf6:    00 00             	nop
   1fbf8:    00 00             	nop
   1fbfa:    00 00             	nop
   1fbfc:    00 00             	nop
   1fbfe:    00 00             	nop
   1fc00:    00 00             	nop
   1fc02:    00 00             	nop
   1fc04:    00 00             	nop
   1fc06:    00 00             	nop
   1fc08:    00 00             	nop
   1fc0a:    00 00             	nop
   1fc0c:    00 00             	nop
   1fc0e:    00 00             	nop
   1fc10:    00 00             	nop
   1fc12:    00 00             	nop
   1fc14:    00 00             	nop
   1fc16:    00 00             	nop
   1fc18:    00 00             	nop
   1fc1a:    00 00             	nop
   1fc1c:    00 00             	nop
   1fc1e:    00 00             	nop
   1fc20:    00 00             	nop
   1fc22:    00 00             	nop
   1fc24:    00 00             	nop
   1fc26:    00 00             	nop
   1fc28:    00 00             	nop
   1fc2a:    00 00             	nop
   1fc2c:    00 00             	nop
   1fc2e:    00 00             	nop
   1fc30:    00 00             	nop
   1fc32:    00 00             	nop
   1fc34:    00 00             	nop
   1fc36:    00 00             	nop
   1fc38:    00 00             	nop
   1fc3a:    00 00             	nop
   1fc3c:    00 00             	nop
   1fc3e:    00 00             	nop
   1fc40:    00 00             	nop
   1fc42:    00 00             	nop
   1fc44:    00 00             	nop
   1fc46:    00 00             	nop
   1fc48:    00 00             	nop
   1fc4a:    00 00             	nop
   1fc4c:    00 00             	nop
   1fc4e:    00 00             	nop
   1fc50:    00 00             	nop
   1fc52:    00 00             	nop
   1fc54:    00 00             	nop
   1fc56:    00 00             	nop
   1fc58:    00 00             	nop
   1fc5a:    00 00             	nop
   1fc5c:    00 00             	nop
   1fc5e:    00 00             	nop
   1fc60:    00 00             	nop
   1fc62:    00 00             	nop
   1fc64:    00 00             	nop
   1fc66:    00 00             	nop
   1fc68:    00 00             	nop
   1fc6a:    00 00             	nop
   1fc6c:    00 00             	nop
   1fc6e:    00 00             	nop
   1fc70:    00 00             	nop
   1fc72:    00 00             	nop
   1fc74:    00 00             	nop
   1fc76:    00 00             	nop
   1fc78:    00 00             	nop
   1fc7a:    00 00             	nop
   1fc7c:    00 00             	nop
   1fc7e:    00 00             	nop
   1fc80:    00 00             	nop
   1fc82:    00 00             	nop
   1fc84:    00 00             	nop
   1fc86:    00 00             	nop
   1fc88:    00 00             	nop
   1fc8a:    00 00             	nop
   1fc8c:    00 00             	nop
   1fc8e:    00 00             	nop
   1fc90:    00 00             	nop
   1fc92:    00 00             	nop
   1fc94:    00 00             	nop
   1fc96:    00 00             	nop
   1fc98:    00 00             	nop
   1fc9a:    00 00             	nop
   1fc9c:    00 00             	nop
   1fc9e:    00 00             	nop
   1fca0:    00 00             	nop
   1fca2:    00 00             	nop
   1fca4:    00 00             	nop
   1fca6:    00 00             	nop
   1fca8:    00 00             	nop
   1fcaa:    00 00             	nop
   1fcac:    00 00             	nop
   1fcae:    00 00             	nop
   1fcb0:    00 00             	nop
   1fcb2:    00 00             	nop
   1fcb4:    00 00             	nop
   1fcb6:    00 00             	nop
   1fcb8:    00 00             	nop
   1fcba:    00 00             	nop
   1fcbc:    00 00             	nop
   1fcbe:    00 00             	nop
   1fcc0:    00 00             	nop
   1fcc2:    00 00             	nop
   1fcc4:    00 00             	nop
   1fcc6:    00 00             	nop
   1fcc8:    00 00             	nop
   1fcca:    00 00             	nop
   1fccc:    00 00             	nop
   1fcce:    00 00             	nop
   1fcd0:    00 00             	nop
   1fcd2:    00 00             	nop
   1fcd4:    00 00             	nop
   1fcd6:    00 00             	nop
   1fcd8:    00 00             	nop
   1fcda:    00 00             	nop
   1fcdc:    00 00             	nop
   1fcde:    00 00             	nop
   1fce0:    00 00             	nop
   1fce2:    00 00             	nop
   1fce4:    00 00             	nop
   1fce6:    00 00             	nop
   1fce8:    00 00             	nop
   1fcea:    00 00             	nop
   1fcec:    00 00             	nop
   1fcee:    00 00             	nop
   1fcf0:    00 00             	nop
   1fcf2:    00 00             	nop
   1fcf4:    00 00             	nop
   1fcf6:    00 00             	nop
   1fcf8:    00 00             	nop
   1fcfa:    00 00             	nop
   1fcfc:    00 00             	nop
   1fcfe:    00 00             	nop
   1fd00:    00 00             	nop
   1fd02:    00 00             	nop
   1fd04:    00 00             	nop
   1fd06:    00 00             	nop
   1fd08:    00 00             	nop
   1fd0a:    00 00             	nop
   1fd0c:    00 00             	nop
   1fd0e:    00 00             	nop
   1fd10:    00 00             	nop
   1fd12:    00 00             	nop
   1fd14:    00 00             	nop
   1fd16:    00 00             	nop
   1fd18:    00 00             	nop
   1fd1a:    00 00             	nop
   1fd1c:    00 00             	nop
   1fd1e:    00 00             	nop
   1fd20:    00 00             	nop
   1fd22:    00 00             	nop
   1fd24:    00 00             	nop
   1fd26:    00 00             	nop
   1fd28:    00 00             	nop
   1fd2a:    00 00             	nop
   1fd2c:    00 00             	nop
   1fd2e:    00 00             	nop
   1fd30:    00 00             	nop
   1fd32:    00 00             	nop
   1fd34:    00 00             	nop
   1fd36:    00 00             	nop
   1fd38:    00 00             	nop
   1fd3a:    00 00             	nop
   1fd3c:    00 00             	nop
   1fd3e:    00 00             	nop
   1fd40:    00 00             	nop
   1fd42:    00 00             	nop
   1fd44:    00 00             	nop
   1fd46:    00 00             	nop
   1fd48:    00 00             	nop
   1fd4a:    00 00             	nop
   1fd4c:    00 00             	nop
   1fd4e:    00 00             	nop
   1fd50:    00 00             	nop
   1fd52:    00 00             	nop
   1fd54:    00 00             	nop
   1fd56:    00 00             	nop
   1fd58:    00 00             	nop
   1fd5a:    00 00             	nop
   1fd5c:    00 00             	nop
   1fd5e:    00 00             	nop
   1fd60:    00 00             	nop
   1fd62:    00 00             	nop
   1fd64:    00 00             	nop
   1fd66:    00 00             	nop
   1fd68:    00 00             	nop
   1fd6a:    00 00             	nop


__stub_lp_signature_set:
   1fd6c:    ff ea 30 52       	goto -0x15ba0 <lp_signature_set : a1d0 >			  ## entry_list.S:7:0


__stub_memmem:
   1fd70:    ff ea 45 22       	goto -0x1bb76 <memmem : 41fe >			  ## entry_list.S:14:0


__stub_memcpy:
   1fd74:    ff ea e2 21       	goto -0x1bc3c <memmove : 413c >			  ## entry_list.S:21:0


__stub_memmove:
   1fd78:    ff ea e0 21       	goto -0x1bc40 <memmove : 413c >			  ## entry_list.S:28:0


__stub_memcmp:
   1fd7c:    ff ea c2 21       	goto -0x1bc7c <memcmp : 4104 >			  ## entry_list.S:35:0


__stub_memset:
   1fd80:    ff ea 51 22       	goto -0x1bb5e <memset : 4226 >			  ## entry_list.S:42:0


__stub_strcmp:
   1fd84:    ff ea b6 22       	goto -0x1ba94 <strcmp : 42f4 >			  ## entry_list.S:49:0


__stub_strcpy:
   1fd88:    ff ea 04 23       	goto -0x1b9f8 <strcpy : 4394 >			  ## entry_list.S:56:0


__stub_strlen:
   1fd8c:    ff ea 39 23       	goto -0x1b98e <strlen : 4402 >			  ## entry_list.S:63:0


__stub_strncmp:
   1fd90:    ff ea 3d 23       	goto -0x1b986 <strncmp : 440e >			  ## entry_list.S:70:0


__stub_strstr:
   1fd94:    ff ea 4b 23       	goto -0x1b96a <strstr : 442e >			  ## entry_list.S:77:0


__stub_strchr:
   1fd98:    ff ea a2 22       	goto -0x1babc <strchr : 42e0 >			  ## entry_list.S:84:0


__stub___divdi3:
   1fd9c:    ff ea 06 be       	goto -0x83f4 <__divdi3 : 179ac >			  ## entry_list.S:91:0


__stub___udivmoddi4:
   1fda0:    ff ea 5e be       	goto -0x8344 <__udivmoddi4 : 17a60 >			  ## entry_list.S:98:0


__stub___adddf3:
   1fda4:    ff ea 98 bc       	goto -0x86d0 <__adddf3 : 176d8 >			  ## entry_list.S:105:0


__stub___fixdfsi:
   1fda8:    ff ea 2d be       	goto -0x83a6 <__fixdfsi : 17a06 >			  ## entry_list.S:112:0


__stub_flush_dcache:
   1fdac:    ff ea e8 64       	goto -0x13630 <flush_dcache : c780 >			  ## entry_list.S:119:0


__stub_flushinv_dcache:
   1fdb0:    ff ea ec 64       	goto -0x13628 <flushinv_dcache : c78c >			  ## entry_list.S:126:0


__stub_IcuWaitIdle:
   1fdb4:    ff ea ed 64       	goto -0x13626 <IcuWaitIdle : c792 >			  ## entry_list.S:133:0


__stub_DcuWaitIdle:
   1fdb8:    ff ea b2 5e       	goto -0x1429c <DcuWaitIdle : bb20 >			  ## entry_list.S:140:0


__stub_IcuInitial:
   1fdbc:    ff ea 90 5e       	goto -0x142e0 <IcuInitial : bae0 >			  ## entry_list.S:147:0


__stub_DcuInitial:
   1fdc0:    ff ea b6 5e       	goto -0x14294 <DcuInitial : bb30 >			  ## entry_list.S:154:0


__stub_sfc_suspend:
   1fdc4:    ff ea 67 64       	goto -0x13732 <sfc_suspend : c696 >			  ## entry_list.S:161:0


__stub_sfc_resume:
   1fdc8:    ff ea 87 64       	goto -0x136f2 <sfc_resume : c6da >			  ## entry_list.S:168:0


__stub_sfc_drop_cache:
   1fdcc:    ff ea ab 64       	goto -0x136aa <sfc_drop_cache : c726 >			  ## entry_list.S:175:0


__stub_chip_crc16:
   1fdd0:    ff ea 01 56       	goto -0x153fe <chip_crc16 : a9d6 >			  ## entry_list.S:182:0


__stub_CrcDecode:
   1fdd4:    ff ea 23 56       	goto -0x153ba <CrcDecode : aa1e >			  ## entry_list.S:189:0


__stub_get_flash_file_key:
   1fdd8:    ff ea 69 58       	goto -0x14f2e <get_flash_file_key : aeae >			  ## entry_list.S:196:0


__stub_dec_isd_cfg_ini:
   1fddc:    ff ea a0 58       	goto -0x14ec0 <dec_isd_cfg_ini : af20 >			  ## entry_list.S:203:0


__stub__jlfs_mount:
   1fde0:    ff ea f3 58       	goto -0x14e1a <_jlfs_mount : afca >			  ## entry_list.S:210:0


__stub_sfc_boot:
   1fde4:    ff ea f4 5d       	goto -0x14418 <sfc_boot : b9d0 >			  ## entry_list.S:217:0


__stub_mask_init:
   1fde8:    ff ea d2 23       	goto -0x1b85c <mask_init : 4590 >			  ## entry_list.S:224:0


__stub_wdt_clr:
   1fdec:    ff ea ad 55       	goto -0x154a6 <wdt_clr : a94a >			  ## entry_list.S:231:0


__stub_nvram_set_boot_state:
   1fdf0:    ff ea 69 23       	goto -0x1b92e <nvram_set_boot_state : 44c6 >			  ## entry_list.S:238:0


__stub_chip_reset:
   1fdf4:    ff ea 87 23       	goto -0x1b8f2 <chip_reset : 4506 >			  ## entry_list.S:245:0


__stub_the_debug_isr:
   1fdf8:    ff ea 60 51       	goto -0x15d40 <the_debug_isr : a0bc >			  ## entry_list.S:252:0


__stub_print:
   1fdfc:    ff ea 28 5b       	goto -0x149b0 <print : b450 >			  ## entry_list.S:259:0


__stub_sprintf:
   1fe00:    ff ea d6 64       	goto -0x13654 <sprintf : c7b0 >			  ## entry_list.S:266:0


__stub_printf:
   1fe04:    ff ea d6 5d       	goto -0x14454 <printf : b9b4 >			  ## entry_list.S:273:0


__stub_puts:
   1fe08:    ff ea 55 59       	goto -0x14d56 <puts : b0b6 >			  ## entry_list.S:280:0


__stub_doe:
   1fe0c:    ff ea b4 58       	goto -0x14e98 <doe : af78 >			  ## entry_list.S:287:0


__stub_spi_get_port:
   1fe10:    ff ea c3 57       	goto -0x1507a <spi_get_port : ad9a >			  ## entry_list.S:294:0


__stub__pll_init:
   1fe14:    ff ea 5b 62       	goto -0x13b4a <_pll_init : c2ce >			  ## entry_list.S:301:0


__stub_flash_poweron:
   1fe18:    ff ea 08 53       	goto -0x159f0 <flash_poweron : a42c >			  ## entry_list.S:308:0


__stub_spi_unmount:
   1fe1c:    ff ea 64 61       	goto -0x13d38 <spi_unmount : c0e8 >			  ## entry_list.S:315:0


__stub_spi_port_io_init:
   1fe20:    ff ea 69 57       	goto -0x1512e <spi_port_io_init : acf6 >			  ## entry_list.S:322:0


__stub_usb_slave_mode:
   1fe24:    ff ea f0 24       	goto -0x1b620 <usb_slave_mode : 4808 >			  ## entry_list.S:329:0


__stub_LZ4_setStreamDecode:
   1fe28:    ff ea 38 65       	goto -0x13590 <LZ4_setStreamDecode : c89c >			  ## entry_list.S:336:0


__stub_LZ4_decompress_safe_continue:
   1fe2c:    ff ea df 5f       	goto -0x14042 <LZ4_decompress_safe_continue : bdee >			  ## entry_list.S:343:0


__stub_LZ4_decompress_generic:
   1fe30:    ff ea 9e 5e       	goto -0x142c4 <LZ4_decompress_generic : bb70 >			  ## entry_list.S:350:0


__stub__sdk_mkey_lock:
   1fe34:    ff ea 3d 65       	goto -0x13586 <_sdk_mkey_lock : c8b2 >			  ## entry_list.S:357:0


__stub_g_hash_function:
   1fe38:    ff ea 73 43       	goto -0x1791a <g_hash_function : 8522 >			  ## entry_list.S:364:0


__stub_f1_hash_function:
   1fe3c:    ff ea 54 43       	goto -0x17958 <f1_hash_function : 84e8 >			  ## entry_list.S:371:0


__stub_f2_hash_function:
   1fe40:    ff ea 92 43       	goto -0x178dc <f2_hash_function : 8568 >			  ## entry_list.S:378:0


__stub_f3_hash_function:
   1fe44:    ff ea bf 43       	goto -0x17882 <f3_hash_function : 85c6 >			  ## entry_list.S:385:0


__stub_h2_hash_function:
   1fe48:    ff ea f2 43       	goto -0x1781c <h2_hash_function : 8630 >			  ## entry_list.S:392:0


__stub_h3_hash_function:
   1fe4c:    ff ea 04 44       	goto -0x177f8 <h3_hash_function : 8658 >			  ## entry_list.S:399:0


__stub_h4_hash_function:
   1fe50:    ff ea 24 44       	goto -0x177b8 <h4_hash_function : 869c >			  ## entry_list.S:406:0


__stub_h5_hash_function:
   1fe54:    ff ea 3f 44       	goto -0x17782 <h5_hash_function : 86d6 >			  ## entry_list.S:413:0


__stub_g_function:
   1fe58:    ff ea 5b 44       	goto -0x1774a <g_function : 8712 >			  ## entry_list.S:420:0


__stub_f1_function:
   1fe5c:    ff ea aa 44       	goto -0x176ac <f1_function : 87b4 >			  ## entry_list.S:427:0


__stub_f2_function:
   1fe60:    ff ea de 44       	goto -0x17644 <f2_function : 8820 >			  ## entry_list.S:434:0


__stub_f3_function:
   1fe64:    ff ea 40 45       	goto -0x17580 <f3_function : 88e8 >			  ## entry_list.S:441:0


__stub_sha256Compute:
   1fe68:    ff ea df 42       	goto -0x17a42 <sha256Compute : 842a >			  ## entry_list.S:448:0


__stub_uECC_compute_public_key:
   1fe6c:    ff ea e6 4a       	goto -0x16a34 <uECC_compute_public_key : 943c >			  ## entry_list.S:455:0


__stub_uECC_shared_secret:
   1fe70:    ff ea 92 4a       	goto -0x16adc <uECC_shared_secret : 9398 >			  ## entry_list.S:462:0


__stub_bi_initialize:
   1fe74:    ff ea 32 4d       	goto -0x1659c <bi_initialize : 98dc >			  ## entry_list.S:469:0


__stub_bi_read_from_byte:
   1fe78:    ff ea 0c 4d       	goto -0x165e8 <bi_read_from_byte : 9894 >			  ## entry_list.S:476:0


__stub_bi_poly_mod2:
   1fe7c:    ff ea 59 4c       	goto -0x1674e <bi_poly_mod2 : 9732 >			  ## entry_list.S:483:0


__stub_bi_poly_mul:
   1fe80:    ff ea b0 4c       	goto -0x166a0 <bi_poly_mul : 97e4 >			  ## entry_list.S:490:0


__stub_trim:
   1fe84:    ff ea 63 4b       	goto -0x1693a <trim : 954e >			  ## entry_list.S:497:0


__stub_bi_wirte_to_byte:
   1fe88:    ff ea ed 4c       	goto -0x16626 <bi_wirte_to_byte : 9866 >			  ## entry_list.S:504:0


__stub_bi_free:
   1fe8c:    ff ea 3c 4c       	goto -0x16788 <bi_free : 9708 >			  ## entry_list.S:511:0


__stub_bi_terminate:
   1fe90:    ff ea 38 4d       	goto -0x16590 <bi_terminate : 9904 >			  ## entry_list.S:518:0


__stub_get_cvsd_codec_ops:
   1fe94:    ff ea 4e 2b       	goto -0x1a964 <get_cvsd_codec_ops : 5534 >			  ## entry_list.S:525:0


__stub_get_wtgv2dec_ops:
   1fe98:    ff ea fb 38       	goto -0x18e0a <get_wtgv2dec_ops : 7092 >			  ## entry_list.S:532:0


__stub_wtgv2_silk_Decode:
   1fe9c:    ff ea a7 39       	goto -0x18cb2 <wtgv2_silk_Decode : 71ee >			  ## entry_list.S:539:0


__stub_wtgv2_silk_decode_frame:
   1fea0:    ff ea a0 38       	goto -0x18ec0 <wtgv2_silk_decode_frame : 6fe4 >			  ## entry_list.S:546:0


__stub_wtgv2_silk_decoder_set_fs:
   1fea4:    ff ea 32 39       	goto -0x18d9c <wtgv2_silk_decoder_set_fs : 710c >			  ## entry_list.S:553:0


__stub_wtgv2_silk_decode_indices:
   1fea8:    ff ea 26 30       	goto -0x19fb4 <wtgv2_silk_decode_indices : 5ef8 >			  ## entry_list.S:560:0


__stub_wtgv2_silk_decode_pulses:
   1feac:    ff ea 60 31       	goto -0x19d40 <wtgv2_silk_decode_pulses : 6170 >			  ## entry_list.S:567:0


__stub_wtgv2_silk_decode_parameters:
   1feb0:    ff ea 07 36       	goto -0x193f2 <wtgv2_silk_decode_parameters : 6ac2 >			  ## entry_list.S:574:0


__stub_wtgv2_silk_decode_core:
   1feb4:    ff ea bf 2b       	goto -0x1a882 <wtgv2_silk_decode_core : 5636 >			  ## entry_list.S:581:0


__stub_logAprx_CORDIC_float:
   1feb8:    ff ea 3c 65       	goto -0x13588 <logAprx_CORDIC_float : c934 >			  ## entry_list.S:588:0


__stub_expAprx_CORDIC_float:
   1febc:    ff ea 54 65       	goto -0x13558 <expAprx_CORDIC_float : c968 >			  ## entry_list.S:595:0


__stub_magnAprx_float:
   1fec0:    ff ea 72 65       	goto -0x1351c <magnAprx_float : c9a8 >			  ## entry_list.S:602:0


__stub_MatrixCopy_float_c_c:
   1fec4:    ff ea 87 65       	goto -0x134f2 <MatrixCopy_float_c_c : c9d6 >			  ## entry_list.S:609:0


__stub_MatrixCopy_float_f_f:
   1fec8:    ff ea ab 65       	goto -0x134aa <MatrixCopy_float_f_f : ca22 >			  ## entry_list.S:616:0


__stub_MatrixEwMulAndSumOneDim_float_c_c_c_s0:
   1fecc:    ff ea cc 65       	goto -0x13468 <MatrixEwMulAndSumOneDim_float_c_c_c_s0 : ca68 >			  ## entry_list.S:623:0


__stub_MatrixEwMulAndSumOneDim_float_c_c_c_s1:
   1fed0:    ff ea 0e 66       	goto -0x133e4 <MatrixEwMulAndSumOneDim_float_c_c_c_s1 : caf0 >			  ## entry_list.S:630:0


__stub_MatrixEwMulAndSumOneDim_float_f_f_f_s0:
   1fed4:    ff ea 50 66       	goto -0x13360 <MatrixEwMulAndSumOneDim_float_f_f_f_s0 : cb78 >			  ## entry_list.S:637:0


__stub_MatrixEwMulAndSumOneDim_float_f_f_f_s1:
   1fed8:    ff ea 80 66       	goto -0x13300 <MatrixEwMulAndSumOneDim_float_f_f_f_s1 : cbdc >			  ## entry_list.S:644:0


__stub_MatrixEwConjMulAndSumOneDim_float_c_c_c_s0:
   1fedc:    ff ea b0 66       	goto -0x132a0 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s0 : cc40 >			  ## entry_list.S:651:0


__stub_MatrixEwConjMulAndSumOneDim_float_c_c_c_s1:
   1fee0:    ff ea f2 66       	goto -0x1321c <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1 : ccc8 >			  ## entry_list.S:658:0


__stub_VecMeanSq_s16_f32:
   1fee4:    ff ea 34 67       	goto -0x13198 <VecMeanSq_s16_f32 : cd50 >			  ## entry_list.S:665:0


__stub_VecOverShift_s16_f32:
   1fee8:    ff ea 52 67       	goto -0x1315c <VecOverShift_s16_f32 : cd90 >			  ## entry_list.S:672:0


__stub_VecMinus_s16_f32_f32:
   1feec:    ff ea 7f 67       	goto -0x13102 <VecMinus_s16_f32_f32 : cdee >			  ## entry_list.S:679:0


__stub_VectorCopy_f32_s16:
   1fef0:    ff ea 9c 67       	goto -0x130c8 <VectorCopy_f32_s16 : ce2c >			  ## entry_list.S:686:0


__stub_VecEleMul_s16_s16_f32:
   1fef4:    ff ea af 67       	goto -0x130a2 <VecEleMul_s16_s16_f32 : ce56 >			  ## entry_list.S:693:0


__stub_VecEleMul_f32_s16_f32:
   1fef8:    ff ea df 67       	goto -0x13042 <VecEleMul_f32_s16_f32 : ceba >			  ## entry_list.S:700:0


__stub_VecMeanSq_float_f_f:
   1fefc:    ff ea 9d 6c       	goto -0x126c6 <VecMeanSq_float_f_f : d83a >			  ## entry_list.S:707:0


__stub_VectorSet_float_f_f:
   1ff00:    ff ea 01 68       	goto -0x12ffe <VectorSet_float_f_f : cf06 >			  ## entry_list.S:714:0


__stub_VecMagRecAve_float_c_f_f:
   1ff04:    ff ea 0b 68       	goto -0x12fea <VecMagRecAve_float_c_f_f : cf1e >			  ## entry_list.S:721:0


__stub_VecMulScalar_float_c_f_c:
   1ff08:    ff ea 27 68       	goto -0x12fb2 <VecMulScalar_float_c_f_c : cf5a >			  ## entry_list.S:728:0


__stub_VecConjEleMul_float_c_c_c:
   1ff0c:    ff ea 3c 68       	goto -0x12f88 <VecConjEleMul_float_c_c_c : cf88 >			  ## entry_list.S:735:0


__stub_VecPlus_float_f_f_f:
   1ff10:    ff ea 5c 68       	goto -0x12f48 <VecPlus_float_f_f_f : cfcc >			  ## entry_list.S:742:0


__stub_VecDivide_float_c_f_c_f:
   1ff14:    ff ea 76 68       	goto -0x12f14 <VecDivide_float_c_f_c_f : d004 >			  ## entry_list.S:749:0


__stub_VecPlus_float_c_c_c:
   1ff18:    ff ea 93 68       	goto -0x12eda <VecPlus_float_c_c_c : d042 >			  ## entry_list.S:756:0


__stub_VecConjMulRecAve_float_c_c_c_f:
   1ff1c:    ff ea b1 68       	goto -0x12e9e <VecConjMulRecAve_float_c_c_c_f : d082 >			  ## entry_list.S:763:0


__stub_VecGetMag_float_c_f:
   1ff20:    ff ea d9 68       	goto -0x12e4e <VecGetMag_float_c_f : d0d6 >			  ## entry_list.S:770:0


__stub_VecMax_float_f_f:
   1ff24:    ff ea ed 68       	goto -0x12e26 <VecMax_float_f_f : d102 >			  ## entry_list.S:777:0


__stub_VecRecAve_float_f_f_f:
   1ff28:    ff ea fb 68       	goto -0x12e0a <VecRecAve_float_f_f_f : d122 >			  ## entry_list.S:784:0


__stub_VecEleMul_float_f_f_f:
   1ff2c:    ff ea 15 69       	goto -0x12dd6 <VecEleMul_float_f_f_f : d15a >			  ## entry_list.S:791:0


__stub_VecMagAndDiv_float_c_f_f_f:
   1ff30:    ff ea 2b 69       	goto -0x12daa <VecMagAndDiv_float_c_f_f_f : d18a >			  ## entry_list.S:798:0


__stub_VecMin_float_f_f:
   1ff34:    ff ea 49 69       	goto -0x12d6e <VecMin_float_f_f : d1ca >			  ## entry_list.S:805:0


__stub_VecMinus_float_f_f_f:
   1ff38:    ff ea 57 69       	goto -0x12d52 <VecMinus_float_f_f_f : d1ea >			  ## entry_list.S:812:0


__stub_VecMean_float_f_f:
   1ff3c:    ff ea 71 69       	goto -0x12d1e <VecMean_float_f_f : d222 >			  ## entry_list.S:819:0


__stub_VecEleMul_float_c_f_c:
   1ff40:    ff ea 87 69       	goto -0x12cf2 <VecEleMul_float_c_f_c : d252 >			  ## entry_list.S:826:0


__stub_VecMeanSqu_float_c_f:
   1ff44:    ff ea a0 69       	goto -0x12cc0 <VecMeanSqu_float_c_f : d288 >			  ## entry_list.S:833:0


__stub_VecCopy_float_f_f:
   1ff48:    ff ea bd 69       	goto -0x12c86 <VecCopy_float_f_f : d2c6 >			  ## entry_list.S:840:0


__stub_VecMin_float_f_f_f:
   1ff4c:    ff ea cd 69       	goto -0x12c66 <VecMin_float_f_f_f : d2ea >			  ## entry_list.S:847:0


__stub_VecDivide_float_f_f_f_f:
   1ff50:    ff ea e7 69       	goto -0x12c32 <VecDivide_float_f_f_f_f : d322 >			  ## entry_list.S:854:0


__stub_VecCompBT_float_f_f_f:
   1ff54:    ff ea 04 6a       	goto -0x12bf8 <VecCompBT_float_f_f_f : d360 >			  ## entry_list.S:861:0


__stub_VecCondCopy_float_f_f_f:
   1ff58:    ff ea 1c 6a       	goto -0x12bc8 <VecCondCopy_float_f_f_f : d394 >			  ## entry_list.S:868:0


__stub_VecMulScalar_float_f_f_f:
   1ff5c:    ff ea 36 6a       	goto -0x12b94 <VecMulScalar_float_f_f_f : d3cc >			  ## entry_list.S:875:0


__stub_VecPlusScalar_float_f_f_f:
   1ff60:    ff ea 49 6a       	goto -0x12b6e <VecPlusScalar_float_f_f_f : d3f6 >			  ## entry_list.S:882:0


__stub_VecMinScalar_float_f_f_f:
   1ff64:    ff ea 5c 6a       	goto -0x12b48 <VecMinScalar_float_f_f_f : d420 >			  ## entry_list.S:889:0


__stub_VecOpposite_float_f_f:
   1ff68:    ff ea 6f 6a       	goto -0x12b22 <VecOpposite_float_f_f : d44a >			  ## entry_list.S:896:0


__stub_VecEleMla_float_f_f_f:
   1ff6c:    ff ea 81 6a       	goto -0x12afe <VecEleMla_float_f_f_f : d472 >			  ## entry_list.S:903:0


__stub_VecEleMla_float_c_c_c:
   1ff70:    ff ea 9a 6a       	goto -0x12acc <VecEleMla_float_c_c_c : d4a8 >			  ## entry_list.S:910:0


__stub_VecMinus_float_c_c_c:
   1ff74:    ff ea bc 6a       	goto -0x12a88 <VecMinus_float_c_c_c : d4f0 >			  ## entry_list.S:917:0


__stub_VecDotProduct_float_f_f_f:
   1ff78:    ff ea da 6a       	goto -0x12a4c <VecDotProduct_float_f_f_f : d530 >			  ## entry_list.S:924:0


__stub_VecDotProduct_float_c_c_c:
   1ff7c:    ff ea ef 6a       	goto -0x12a22 <VecDotProduct_float_c_c_c : d55e >			  ## entry_list.S:931:0


__stub_VecDotProduct_float_c_f_c:
   1ff80:    ff ea 0f 6b       	goto -0x129e2 <VecDotProduct_float_c_f_c : d5a2 >			  ## entry_list.S:938:0


__stub_VecCopy_float_c_c:
   1ff84:    ff ea 28 6b       	goto -0x129b0 <VecCopy_float_c_c : d5d8 >			  ## entry_list.S:945:0


__stub_VecCopy_float_f_c:
   1ff88:    ff ea 38 6b       	goto -0x12990 <VecCopy_float_f_c : d5fc >			  ## entry_list.S:952:0


__stub_VecConjDotProduct_float_c_c_c:
   1ff8c:    ff ea 4a 6b       	goto -0x1296c <VecConjDotProduct_float_c_c_c : d624 >			  ## entry_list.S:959:0


__stub_VecNormalize_float_c_c_f:
   1ff90:    ff ea 6a 6b       	goto -0x1292c <VecNormalize_float_c_c_f : d668 >			  ## entry_list.S:966:0


__stub_VecRecAve_float_c_c_f:
   1ff94:    ff ea 97 6b       	goto -0x128d2 <VecRecAve_float_c_c_f : d6c6 >			  ## entry_list.S:973:0


__stub_VecOverlapShift_float_f_f_i:
   1ff98:    ff ea b5 6b       	goto -0x12896 <VecOverlapShift_float_f_f_i : d706 >			  ## entry_list.S:980:0


__stub_VecMax_float_f_f_f:
   1ff9c:    ff ea df 6b       	goto -0x12842 <VecMax_float_f_f_f : d75e >			  ## entry_list.S:987:0


__stub_VecConjEwMulAndDiv_float_c_c_f_f_c:
   1ffa0:    ff ea f9 6b       	goto -0x1280e <VecConjEwMulAndDiv_float_c_c_f_f_c : d796 >			  ## entry_list.S:994:0


__stub_VecPlusMulScalar_float_c_c_f_c:
   1ffa4:    ff ea 29 6c       	goto -0x127ae <VecPlusMulScalar_float_c_c_f_c : d7fa >			  ## entry_list.S:1001:0


__stub_VecCondCopy_float_c_i_c:
   1ffa8:    ff ea 60 6c       	goto -0x12740 <VecCondCopy_float_c_i_c : d86c >			  ## entry_list.S:1008:0


__stub_VecEleMulAndDiv_float_f_f_f_f_f:
   1ffac:    ff ea 7b 6c       	goto -0x1270a <VecEleMulAndDiv_float_f_f_f_f_f : d8a6 >			  ## entry_list.S:1015:0


__stub_VectorSet_float_f_c:
   1ffb0:    ff ea a3 6c       	goto -0x126ba <VectorSet_float_f_c : d8fa >			  ## entry_list.S:1022:0


__stub_VecDivScalar_float_f_f_f:
   1ffb4:    ff ea ae 6c       	goto -0x126a4 <VecDivScalar_float_f_f_f : d914 >			  ## entry_list.S:1029:0


__stub_VecDivScalar_float_c_f_c:
   1ffb8:    ff ea c1 6c       	goto -0x1267e <VecDivScalar_float_c_f_c : d93e >			  ## entry_list.S:1036:0


__stub_VecPlusScalar_float_c_f_c:
   1ffbc:    ff ea d6 6c       	goto -0x12654 <VecPlusScalar_float_c_f_c : d96c >			  ## entry_list.S:1043:0


__stub_VecMinScalar_float_c_f_c:
   1ffc0:    ff ea e9 6c       	goto -0x1262e <VecMinScalar_float_c_f_c : d996 >			  ## entry_list.S:1050:0


__stub_get_aac_ops:
   1ffc4:    ff ea dc 6d       	goto -0x12448 <get_aac_ops : db80 >			  ## entry_list.S:1057:0


__stub_get_opus_enc_ops:
   1ffc8:    ff ea b0 89       	goto -0xeca0 <get_opus_enc_ops : 1132c >			  ## entry_list.S:1064:0


__stub_opus_encode:
   1ffcc:    ff ea 2d b7       	goto -0x91a6 <opus_encode : 16e2a >			  ## entry_list.S:1071:0


__stub_silk_Encode:
   1ffd0:    ff ea ae b5       	goto -0x94a4 <silk_Encode : 16b30 >			  ## entry_list.S:1078:0


__stub_silk_encode_do_VAD_FIX:
   1ffd4:    ff ea e3 8a       	goto -0xea3a <silk_encode_do_VAD_FIX : 1159e >			  ## entry_list.S:1085:0


__stub_silk_encode_frame_FIX:
   1ffd8:    ff ea 0b b4       	goto -0x97ea <silk_encode_frame_FIX : 167f2 >			  ## entry_list.S:1092:0


__stub_silk_find_pitch_lags_FIX:
   1ffdc:    ff ea bf 92       	goto -0xda82 <silk_find_pitch_lags_FIX : 1255e >			  ## entry_list.S:1099:0


__stub_silk_noise_shape_analysis_FIX:
   1ffe0:    ff ea b2 95       	goto -0xd49c <silk_noise_shape_analysis_FIX : 12b48 >			  ## entry_list.S:1106:0


__stub_silk_find_pred_coefs_FIX:
   1ffe4:    ff ea 80 ab       	goto -0xa900 <silk_find_pred_coefs_FIX : 156e8 >			  ## entry_list.S:1113:0


__stub_silk_process_gains_FIX:
   1ffe8:    ff ea a2 af       	goto -0xa0bc <silk_process_gains_FIX : 15f30 >			  ## entry_list.S:1120:0


__stub_silk_prefilter_FIX:
   1ffec:    ff ea da b0       	goto -0x9e4c <silk_prefilter_FIX : 161a4 >			  ## entry_list.S:1127:0


__stub_silk_NSQ_del_dec_c:
   1fff0:    ff ea 28 82       	goto -0xfbb0 <silk_NSQ_del_dec_c : 10444 >			  ## entry_list.S:1134:0


__stub_silk_encode_indices:
   1fff4:    ff ea ba 88       	goto -0xee8c <silk_encode_indices : 1116c >			  ## entry_list.S:1141:0


__stub_silk_encode_pulses:
   1fff8:    ff ea 3c b2       	goto -0x9b88 <silk_encode_pulses : 16474 >			  ## entry_list.S:1148:0


__stub_silk_ana_filt_bank_1:
   1fffc:    ff ea dc 87       	goto -0xf048 <silk_ana_filt_bank_1 : 10fb8 >			  ## entry_list.S:1155:0

Disassembly of section .nul_space:
$data.__3:
   f4240:	 90 85 01 00 8c 84 01 00         ........
   f4248:	 88 8a 01 00 00 90 01 00         ........
   f4250:	 00 92 01 00 00 a2 01 00         ........
   f4258:	 00 b2 01 00 00 b4 01 00         ........
   f4260:	 00 c4 01 00 34 c6 01 00         ....4...
   f4268:	 44 c8 01 00 50 c8 01 00         D...P...
   f4270:	 5c c8 01 00 68 c8 01 00         \...h...
   f4278:	 bc c8 01 00 d6 c8 01 00         ........
   f4280:	 36 c9 01 00 50 c9 01 00         6...P...
   f4288:	 b4 c9 01 00 d2 c9 01 00         ........
   f4290:	 3a ca 01 00 9a ca 01 00         :.......
   f4298:	 ba ca 01 00 12 cb 01 00         ........
   f42a0:	 32 cb 01 00 84 cb 01 00         2.......
   f42a8:	 a4 cb 01 00 d4 cb 01 00         ........
   f42b0:	 04 cc 01 00 08 d0 01 00         ........
   f42b8:	 48 d0 01 00 88 d0 01 00         H.......
   f42c0:	 c8 d0 01 00 08 d1 01 00         ........
   f42c8:	 24 d1 01 00 54 d1 01 00         $...T...
   f42d0:	 60 d1 01 00 a0 d1 01 00         `.......
   f42d8:	 38 d3 01 00 70 d4 01 00         8...p...
   f42e0:	 a8 d5 01 00 d8 d6 01 00         ........
   f42e8:	 20 d8 01 00 60 d9 01 00          ...`...
   f42f0:	 58 da 01 00 50 db 01 00         X...P...
   f42f8:	 f0 dd 01 00 80 e0 01 00         ........
   f4300:	 40 e5 01 00 3c c8 01 00         @...<...
   f4308:	 b8 e5 01 00 5c ea 01 00         ....\...
   f4310:	 04 38 00 00 04 3c 00 00         .8...<..
   f4318:	 04 3e 00 00 04 40 00 00         .>...@..
   f4320:	 04 00 00 00 04 04 00 00         ........
   f4328:	 04 08 00 00 04 10 00 00         ........
   f4330:	 04 18 00 00 04 28 00 00         .....(..
   f4338:	 14 99 00 00 18 9a 00 00         ........
   f4340:	 1c 9b 00 00 20 9c 00 00         .... ...
   f4348:	 a4 9c 00 00                     ....

